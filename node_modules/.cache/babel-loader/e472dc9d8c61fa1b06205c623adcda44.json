{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex, childSpecLoadCheck, constructjsonOptionList, constructjsonOptionDefault, rearrangeDateFormatforUI, childComboLoadForEdit } from '../components/CommonScript';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\nimport { intl } from '../components/App';\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // console.log(\"respObj:\", respObj);\n\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", {\n      userinfo\n    });\n    listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\n          ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\n          staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          showFilter: false,\n          ncontrolcode: ncontrolCode,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDefaultTemplate(ComboData, sampleType, userInfo, masterData) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    // rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n    //     nsampletypecode: sampleType.value,\n    //     userinfo: userInfo,\n    //     SubSample:false\n    // })\n    let url = [];\n\n    if (ComboData.value === SampleType.SUBSAMPLE) {\n      const str = rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\n        userinfo: userInfo,\n        nsampletypecode: sampleType.SampleType && sampleType.SampleType.value\n      });\n      url = [str];\n    } else {\n      const str = rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n        nsubsampletypecode: sampleType.SubSampleType && sampleType.SubSampleType.value,\n        userinfo: userInfo,\n        nsampletypecode: sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode,\n        SubSample: String(sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode) === '-1' ? true : false\n      });\n      url = [str];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(url).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: ComboData.value === SampleType.SUBSAMPLE ? { ...masterData,\n            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\n            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n            selectedSampleType: sampleType.SampleType.item,\n            DefaultSampleTypeList: response[0].data[\"SampleTypeList\"],\n            selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"] // selectedSampleTypeList:sampleType.item,\n\n          } : { ...masterData,\n            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\n            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n            selectedSampleTypeList: sampleType.SubSampleType && sampleType.SubSampleType.item,\n            selectedSampleType: sampleType.SampleType && sampleType.SampleType.item || masterData.selectedSampleType\n          },\n          // realSampleType: [{\n          //     \"label\": \"IDS_SAMPLETYPE\",\n          //     \"value\": sampleType.label,\n          //     \"item\": sampleType\n          // }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getDefaultSampleType(sampleType, userInfo, masterData,SampleTypeName,selectedSampleType) {\n//     return function (dispatch) {\n//     let url=[];\n//         if(sampleType.label===\"Sub Sample\"){\n//       const str=  rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\n//             userinfo: userInfo,\n//             nsampletypecode: sampleType.value\n//         })\n//         url=[str];\n//     }else{\n//         const str=  rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n//             nsubsampletypecode: sampleType.value,\n//             userinfo: userInfo,SubSample:true,nsampletypecode:selectedSampleType.value\n//         })\n//         url=[str];\n//     }\n//     dispatch(initRequest(true));\n//     Axios.all(url)\n//          .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: { masterData: sampleType.label===\"Sub Sample\"?{ ...masterData, \n//                                             DefaultSampleTypeList :response[0].data[\"SampleTypeList\"],\n//                                             selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],SampleTypeName,\n//                                             selectedSampleType:sampleType.item,\n//                                             DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\n//                                             selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n//                                             //defaultTemplateOptions:[],selectedDefaultTemplate:[],DefaultTemplateList:[]\n//                                             }:{ ...masterData, \n//                                                 DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\n//                                                 selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n//                                                 selectedSampleTypeList:sampleType.item,\n//                                                 }, \n//                                 loading: false }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function getRegistrationTemplate(selectedSampleType, selectedDefaultTemplate, masterData, userinfo, selectedDefaultSampleType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      SampleType: selectedSampleType.label,\n      ndefaulttemplatecode: selectedDefaultTemplate.value,\n      userinfo,\n      SubSample: selectedSampleType.label === \"Sub Sample\" ? true : false,\n      nsubsampletypecode: selectedDefaultSampleType.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined,\n        selectedDefaultTemplate: selectedDefaultTemplate\n      };\n      sortData(masterData);\n      let realSampleTypes = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": selectedSampleType.label,\n        \"item\": selectedSampleType\n      }, // realDefaultTemplate: [\n      selectedSampleType.value === SampleType.SUBSAMPLE ? {\n        \"label\": \"IDS_SUBSAMPLEBASEDSAMPLETYPE\",\n        \"value\": selectedDefaultSampleType.label,\n        \"item\": selectedDefaultSampleType\n      } : \"\", {\n        \"label\": \"IDS_TEMPLATETYPE\",\n        \"value\": selectedDefaultTemplate.label,\n        \"item\": selectedDefaultTemplate\n      }];\n      let realSampleType = [];\n      realSampleTypes.map((item, index) => {\n        if (item === \"\") {\n          delete realSampleTypes[index];\n        } else {\n          realSampleType.push(item);\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      let jsonData = response.data.jsondata;\n      sortData(masterData);\n      const respObj = {\n        masterData,\n        ncontrolcode: editId,\n        openPortal: true,\n        loading: false,\n        openModal: false,\n        design: jsonData,\n        selectedRecord: {\n          templatename: response.data.sregtemplatename\n        }\n      };\n\n      if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\n        // let jsonData = response.data.jsondata;\n        // sortData(masterData)\n        // const respObj = {\n        //     masterData,\n        //     ncontrolcode: editId,\n        //     openPortal: true,\n        //     loading: false,\n        //     openModal: false,\n        //     design: jsonData,\n        //     selectedRecord: { templateName: response.data.sregtemplatename }\n        // }                \n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj)); // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      return JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      \"nquerybuildertablecode\": stablename || 0,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      let filterColumns = []; //  let selectedComponentpath=componentData.selectedComponentpath\n\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"dynamic\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"dynamic\",\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      filterColumns = [...comboData];\n      numericColumns.map(item => {\n        filterColumns.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.tablecolumnname,\n          type: \"numeric\",\n          item\n        });\n      });\n\n      if (defaultColumn.item && defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined || componentData.components === undefined) {\n        componentData = componentData || {};\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            filterfields: [{\n              type: defaultColumn.type,\n              ...defaultColumn.item\n            }],\n            customsearchfilter: [defaultColumn],\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        } else {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            column: defaultColumn,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        }\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        let parentRadioValue = [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        componentData = { ...componentData,\n          validComponents,\n          parentRadioValue\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData,\n          filterColumns\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          // selectedComponentpath,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          filterColumns,\n          columnInfo,\n          primaryKeyName,\n          selectedComponentpath: componentData.path,\n          ...componentData,\n          showFilter: showFilter\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    let parentcolumnlist = [{\n      source: selectedFieldRecord.filtercolumn.item.foriegntablename,\n      valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\n      displaymember: selectedFieldRecord.filtercolumn.item.columnname,\n      conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\n      label: \"filterData\",\n      inputtype: \"combo\",\n      isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\n    }];\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist,\n      userinfo\n    }).then(response => {\n      let comboData = [];\n      let selectedRecord = {};\n      const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (updateComponents) {\n        componentData = componentData || {}; // selectedFieldRecord = { ...selectedFieldRecord };\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          masterDataValue: comboData,\n          columnInfo,\n          ...componentData,\n          ...comboData1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList ? columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true) : [],\n      childcolumnlist: childColumnList ? childColumnList : [],\n      userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService, dateService, currentDate]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          //  if (componentrow.mandatory) {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n\n            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n              const Age = withoutCombocomponent.filter(item => item.name === \"Age\");\n              selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label]);\n            }\n\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          } // }else{\n          //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          // }\n          // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation: \"preview\" // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = selectedRecord1[Instrument[0].label] && selectedRecord1[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName // loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] && selectedRecord1[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label].value;\n                let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n                  ncategorybasedFlow = transactionStatus.YES;\n                }\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === transactionStatus.YES) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName // loadPreregister:true\n\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = selectedRecord1[Material[0].label] && selectedRecord1[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName // loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    } else {\n                      mapOfFilterRegData['nproductcode'] = -1;\n                      mapOfFilterRegData['nproductcatcode'] = -1;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName //loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    }\n                  }\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              } else {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName //loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              }\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n\n          if (dateComp[0].label !== undefined) {\n            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\n            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\n            selectedRecord1[ageComp[0].label] = age;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label].value : -1;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'] : undefined;\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const project = comboComponents.filter(x => x.name === 'Project Code');\n          let nprojectMasterCode = -1;\n\n          if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\n            nprojectMasterCode = selectedRecord1[project[0].label] && selectedRecord1[project[0].label].value;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        }\n      }\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData, instrumentCategory, instrument, materialCategory, material, materialType, subsample, project, comboComponents) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo, comboComponents);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (subsample) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            SubSamplecomboData: { ...returnObj.comboData\n            },\n            selectComponent: selectedRecord,\n            screenName: inputParem.screenName,\n            selectedMaster: [],\n            addMaster: false,\n            selectedControl: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterIndex: undefined,\n            loadCustomSearchFilter: false\n          }\n        });\n      } // else if (childSpec) {\n      //     if (mapOfRegFilterData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && mapOfRegFilterData.nprojectSpecReqd === 3) {\n      //     }\n      //     else if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\n      //         if (mapOfRegFilterData.childSpecBasedAddMaster\n      //             && mapOfRegFilterData.childSpecBasedAddMaster) {\n      //             if (mapOfRegFilterData.ProductCategory[0]\n      //                 && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]===undefined) {\n      //                 selectedRecord[mapOfRegFilterData.ProductCategory[0].label]=returnObj[mapOfRegFilterData.ProductCategory[0].label]&&returnObj[mapOfRegFilterData.ProductCategory[0].label][0]\n      //             }\n      //             const label = mapOfRegFilterData.ProductCategory[0].label\n      //             let ncategorybasedflow = selectedRecord[label] &&\n      //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\n      //             if (ncategorybasedflow === transactionStatus.YES) {\n      //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\n      //                 mapOfRegFilterData['nproductcode'] = -1\n      //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //             }\n      //         }\n      //         else if (mapOfRegFilterData.ProductCategory && mapOfRegFilterData.ProductCategory[0]\n      //             && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]) {\n      //             const label = mapOfRegFilterData.ProductCategory[0].label\n      //             let ncategorybasedflow = selectedRecord[label] &&\n      //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\n      //             if (ncategorybasedflow === transactionStatus.YES) {\n      //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\n      //                 mapOfRegFilterData['nproductcode'] = -1\n      //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //             }\n      //             else {\n      //                 if (mapOfRegFilterData.ProductCategory[0].child && mapOfRegFilterData.ProductCategory[0].child) {\n      //                     let pt = []\n      //                     mapOfRegFilterData.ProductCategory[0].child.map(x =>\n      //                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\n      //                     )\n      //                     if (pt.length > 0) {\n      //                         if (pt && pt[0]) {\n      //                             const pclabel = mapOfRegFilterData.ProductCategory[0].label\n      //                             const label = pt[0].label\n      //                             if (selectedRecord[pclabel] && selectedRecord[pclabel].value &&\n      //                                 selectedRecord[label] && selectedRecord[label].value) {\n      //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pclabel].value\n      //                                 mapOfRegFilterData['nproductcode'] = selectedRecord[label].value\n      //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                             }\n      //                         }\n      //                     }\n      //                 }\n      //             }\n      //         } else if (mapOfRegFilterData.childSpec && mapOfRegFilterData.childSpec) {\n      //             if (selectedRecord[inputParem.label] && selectedRecord[inputParem.label]) {\n      //                 const TemplateChild = parentcolumnlist && parentcolumnlist.filter(x => x.child && x.child.length > 0)\n      //                 if (TemplateChild && TemplateChild.length > 0) {\n      //                     let pc = {}\n      //                     TemplateChild.map(x => {\n      //                         x.child && x.child.map(y => {\n      //                             const data = comboComponents1.filter(x => x.label === y.label)\n      //                             if (data && data[0].templatemandatory) {\n      //                                 const name = data[0].name\n      //                                 if (name === \"Product Category\") {\n      //                                     pc = data[0]\n      //                                 }\n      //                             }\n      //                         })\n      //                     })\n      //                     if (pc && pc.label) {\n      //                         if (selectedRecord[pc.label]\n      //                             && selectedRecord[pc.label].value) {\n      //                             let ncategorybasedflow = selectedRecord[pc.label] &&\n      //                                 selectedRecord[pc.label]['item']['jsondata']['ncategorybasedflow'];\n      //                             if (ncategorybasedflow === transactionStatus.YES) {\n      //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\n      //                                 mapOfRegFilterData['nproductcode'] = -1\n      //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                             } else {\n      //                                 if (pc.child && pc.child > 0) {\n      //                                     let pt = []\n      //                                     pc.child.map(x =>\n      //                                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\n      //                                     )\n      //                                     if (pt.length > 0) {\n      //                                         if (selectedRecord[pt[0].label] && selectedRecord[pt[0].label].value) {\n      //                                             mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\n      //                                             mapOfRegFilterData['nproductcode'] = selectedRecord[pt[0].label].value\n      //                                             dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                                         }\n      //                                     }\n      //                                 }\n      //                             }\n      //                         }\n      //                     }\n      //                 } else {\n      //                     selectedRecord[\"nallottedspeccode\"] = \"\"\n      //                     selectedRecord[\"sversion\"] = \"\"\n      //                     dispatch({\n      //                         type: DEFAULT_RETURN,\n      //                         payload: {\n      //                             loading: false,\n      //                             comboData: { ...returnObj.comboData },\n      //                             selectedRecord,\n      //                             AgaramTree: [],\n      //                             ActiveKey: [],\n      //                             FocusKey: [],\n      //                             OpenNodes: [],\n      //                             Test: [],\n      //                             SelectedTest: [],\n      //                             selectedSpec: {},\n      //                             Component: [],\n      //                             selectComponent: {},\n      //                             selectedComponent: {},\n      //                             Specification: [],\n      //                             selectedMaster: [],\n      //                             subSampleDataGridList: []\n      //                         }\n      //                     })\n      //                 }\n      //             } else {\n      //                 selectedRecord[\"nallottedspeccode\"] = \"\"\n      //                 selectedRecord[\"sversion\"] = \"\"\n      //                 dispatch({\n      //                     type: DEFAULT_RETURN,\n      //                     payload: {\n      //                         loading: false,\n      //                         comboData: { ...returnObj.comboData },\n      //                         selectedRecord,\n      //                         AgaramTree: [],\n      //                         ActiveKey: [],\n      //                         FocusKey: [],\n      //                         OpenNodes: [],\n      //                         Test: [],\n      //                         SelectedTest: [],\n      //                         selectedSpec: {},\n      //                         Component: [],\n      //                         selectComponent: {},\n      //                         selectedComponent: {},\n      //                         Specification: [],\n      //                         selectedMaster: [],\n      //                         subSampleDataGridList: []\n      //                     }\n      //                 })\n      //             }\n      //         }\n      //         else {\n      //             selectedRecord[\"nallottedspeccode\"] = \"\"\n      //             selectedRecord[\"sversion\"] = \"\"\n      //             dispatch({\n      //                 type: DEFAULT_RETURN,\n      //                 payload: {\n      //                     loading: false,\n      //                     comboData: { ...returnObj.comboData },\n      //                     selectedRecord,\n      //                     AgaramTree: [],\n      //                     ActiveKey: [],\n      //                     FocusKey: [],\n      //                     OpenNodes: [],\n      //                     Test: [],\n      //                     SelectedTest: [],\n      //                     selectedSpec: {},\n      //                     Component: [],\n      //                     selectComponent: {},\n      //                     selectedComponent: {},\n      //                     Specification: [],\n      //                     selectedMaster: [],\n      //                     subSampleDataGridList: []\n      //                 }\n      //             })\n      //         }\n      //     }\n      // }\n      else if (project) {\n        //console.log(\"data:\", mapOfRegFilterData, selectedRecord );\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (productCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              subSampleDataGridList: []\n            }\n          });\n        }\n      } else if (instrumentCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (materialCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (instrument) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (material) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (materialType) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\n          const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] : undefined; //  mapOfRegFilterData[\"nproductcatcode\"]\n\n          if (productCategory !== undefined) {\n            if (productCategory.item.ncategorybasedflow === 3) {\n              mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n              mapOfRegFilterData[\"nproductcode\"] = -1;\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n              if (product !== undefined) {\n                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                mapOfRegFilterData[\"nproductcode\"] = product.value;\n                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                }));\n              } else {\n                const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n                if (product !== undefined) {\n                  mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                  mapOfRegFilterData[\"nproductcode\"] = product.value;\n                  dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                  }));\n                } else {\n                  selectedRecord[\"nallottedspeccode\"] = \"\";\n                  selectedRecord[\"sversion\"] = \"\";\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false,\n                      comboData: { ...returnObj.comboData\n                      },\n                      selectedRecord,\n                      AgaramTree: [],\n                      ActiveKey: [],\n                      FocusKey: [],\n                      OpenNodes: [],\n                      Test: [],\n                      SelectedTest: [],\n                      selectedSpec: {},\n                      Component: [],\n                      selectComponent: {},\n                      selectedComponent: {},\n                      Specification: [],\n                      selectedMaster: [],\n                      addMaster: false\n                    }\n                  });\n                }\n              }\n            }\n          } else {\n            selectedRecord[\"nallottedspeccode\"] = \"\";\n            selectedRecord[\"sversion\"] = \"\";\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                AgaramTree: [],\n                ActiveKey: [],\n                FocusKey: [],\n                OpenNodes: [],\n                Test: [],\n                SelectedTest: [],\n                selectedSpec: {},\n                Component: [],\n                selectComponent: {},\n                selectedComponent: {},\n                Specification: [],\n                selectedMaster: [],\n                addMaster: false\n              }\n            });\n          }\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else {\n        let productCategory = false;\n        let map = {};\n\n        if (userinfo.nformcode === 43) {\n          if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\n            if (inputParem.child && inputParem.child.length > 0) {\n              inputParem.child.map(y => {\n                const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label && z.templatemandatory && z.name === 'Product Category');\n\n                if (indexTemplateMandatory !== -1) {\n                  const templateManRecord = parentcolumnlist[indexTemplateMandatory]; //  if (inputParem.nsampletypecode === SampleType.CLINICALTYPE) {\n\n                  if (templateManRecord.name === 'Product Category') {\n                    productCategory = true;\n\n                    if (selectedRecord[templateManRecord.label]) {\n                      map = {\n                        nproductcatcode: selectedRecord[templateManRecord.label].value,\n                        nproductcode: -1\n                      };\n                    } else {\n                      map = {\n                        nproductcatcode: -1,\n                        nproductcode: -1\n                      };\n                    } //  }\n\n                  }\n                } else {\n                  const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label);\n\n                  if (indexTemplateMandatory !== -1) {\n                    const templateManRecord = parentcolumnlist[indexTemplateMandatory];\n\n                    if (templateManRecord.child && templateManRecord.child.length > 0) {\n                      const val = childSpecLoadCheck(templateManRecord, childcolumnlist, productCategory, map, y.label, selectedRecord);\n\n                      if (val.productCategory) {\n                        productCategory = val.productCategory;\n                        map = { ...map,\n                          ...val.map\n                        };\n                      }\n                    }\n                  }\n                }\n              });\n            }\n\n            if (productCategory) {\n              mapOfRegFilterData = { ...mapOfRegFilterData,\n                nproductcatcode: map.nproductcatcode,\n                nproductcode: map.nproductcode\n              };\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  loading: false,\n                  comboData: { ...returnObj.comboData\n                  },\n                  selectedRecord,\n                  selectedMaster: [],\n                  addMaster: false,\n                  selectedControl: [],\n                  masterComboColumnFiled: [],\n                  masterDesign: [],\n                  masterextractedColumnList: [],\n                  masterfieldList: [],\n                  masterdataList: [],\n                  mastercomboComponents: [],\n                  masterwithoutCombocomponent: [],\n                  masterIndex: undefined,\n                  screenName: inputParem.screenName,\n                  loadCustomSearchFilter: false\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                selectedMaster: [],\n                addMaster: false,\n                selectedControl: [],\n                masterComboColumnFiled: [],\n                masterDesign: [],\n                masterextractedColumnList: [],\n                masterfieldList: [],\n                masterdataList: [],\n                mastercomboComponents: [],\n                masterwithoutCombocomponent: [],\n                masterIndex: undefined,\n                screenName: inputParem.screenName,\n                loadCustomSearchFilter: false\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              selectedMaster: [],\n              addMaster: false,\n              selectedControl: [],\n              masterComboColumnFiled: [],\n              masterDesign: [],\n              masterextractedColumnList: [],\n              masterfieldList: [],\n              masterdataList: [],\n              mastercomboComponents: [],\n              masterwithoutCombocomponent: [],\n              masterIndex: undefined,\n              screenName: inputParem.screenName,\n              loadCustomSearchFilter: false\n            }\n          });\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validatePreview(inputParam) {\n  return function (dispatch) {\n    rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam\n    }).then(response => {\n      if (response.data.rtn === \"Success\") {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SUCCESSFULLYVALIDATE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addMasterRecord(inputParam) {\n  return function (dispatch) {\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        let masterIndex = inputParam.masterIndex;\n        let data = [];\n        const data1 = sortData(response.data);\n\n        if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.SelectedPatient\n            }];\n          } else {\n            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.ExternalOrder\n            }];\n          } else {\n            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else {\n          data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        }\n\n        const newdata = data.map((item1, index) => {\n          item1 = { ...item1,\n            item: {\n              jsondata: { ...item1.item,\n                jsondata: { ...item1.item\n                }\n              }\n            }\n          };\n          return item1;\n        });\n\n        if (masterIndex === 0) {\n          const selectedRecord = inputParam.selectedRecord || {};\n          const selectedControl = inputParam.selectedControl || {};\n          let comboData1 = {};\n\n          if (inputParam.operation === 'create') {\n            comboData1 = { ...newdata[0],\n              item: { ...newdata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          } else {\n            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ? inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value;\n            let combodata = [];\n\n            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n              combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value);\n            } else {\n              combodata = newdata.filter(x => x.value === value);\n            }\n\n            comboData1 = { ...combodata[0],\n              item: { ...combodata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          }\n\n          selectedRecord[selectedControl[masterIndex].label] = comboData1;\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid'];\n          }\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode'];\n          }\n\n          const comboData = inputParam.comboData;\n          comboData[selectedControl[masterIndex].label] = newdata;\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName,\n              nsampletypecode: inputParam.nsampletypecode ? inputParam.nsampletypecode : -1\n            };\n\n            if (inputParam.loadSubSample) {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, {}, false, false, false, false, false, true, false));\n            } else {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, inputParam.nsampletypecode === 5 ? {\n                nportalrequired: inputParam.nportalrequired && inputParam.nportalrequired,\n                nsampletypecode: inputParam.nsampletypecode,\n                nneedsubsample: inputParam.nneedsubsample\n              } : {}, false, false, false, false, false, false, false, inputParam.comboComponents));\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                addMaster: false,\n                [inputParam.comboName]: comboData,\n                selectedMaster: [],\n                [inputParam.selectedRecordName]: selectedRecord,\n                screenName: inputParam.screenName,\n                masterIndex: undefined,\n                mastercomboComponents: [],\n                masterwithoutCombocomponent: [],\n                masterComboColumnFiled: [],\n                masterextractedColumnList: [],\n                masterdataList: [],\n                masterDesign: [],\n                masterfieldList: [],\n                masterOperation: [],\n                masterEditObject: []\n              }\n            });\n          }\n        } else {\n          let selectedMaster = inputParam.selectedMaster || [];\n          let selectedControl = inputParam.selectedControl || [];\n          let comboData1 = {};\n\n          if (inputParam.operation === 'create') {\n            comboData1 = { ...newdata[0],\n              item: { ...newdata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          } else {\n            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ? inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value;\n            let combodata = [];\n\n            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n              combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value);\n            } else {\n              combodata = newdata.filter(x => x.value === value);\n            }\n\n            comboData1 = { ...combodata[0],\n              item: { ...combodata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          }\n\n          selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1; // const comboData = inputParam.comboData\n          // comboData[selectedControl[masterIndex].label] = newdata\n\n          let masterdataList = inputParam.masterdataList || [];\n          masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1],\n            [selectedControl[masterIndex].label]: newdata\n          };\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName\n            };\n            dispatch(getChildValuesForMasterAdd(inputParem, inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList, childComboList, childColumnList, inputParam.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex, inputParam));\n          } else {\n            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex);\n            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n            const masterOperation = inputParam.masterOperation && removeIndex(inputParam.masterOperation, masterIndex);\n            const masterEditObject = inputParam.masterEditObject && removeIndex(inputParam.masterEditObject, masterIndex);\n            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n            masterIndex = parseInt(masterIndex) - 1;\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                selectedControl,\n                selectedMaster,\n                mastercomboComponents,\n                masterwithoutCombocomponent,\n                masterComboColumnFiled,\n                masterextractedColumnList,\n                masterdataList,\n                masterDesign,\n                masterfieldList,\n                masterOperation,\n                masterEditObject,\n                loading: false,\n                // addMaster: false,\n                // masterdataList,\n                // selectedMaster: {},\n                //  selectedMaster: selectedMaster,\n                screenName,\n                masterIndex\n              }\n            });\n          }\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function removeIndex(data, removeIndex) {\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\n//     return data1\n// }\n\nexport function getAddMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let masterIndex = inputParam.masterIndex;\n    inputParam.masterComboColumnFiled[masterIndex].map(item => {\n      if (item.needService === undefined) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo\n        }));\n        item[\"fetchIndex\"] = urlArray.length - 1;\n      }\n    });\n\n    if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n      urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: inputParam.userinfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let masterdataList = inputParam.masterdataList;\n      inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\n        if (item.needService === undefined) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\"); //selectedMaster[masterIndex][item.dataField] = ComboFieldData.get(\"DefaultValue\");\n        } else {\n          if (item.child !== undefined) {\n            masterdataList[masterIndex][item.dataField] = [];\n          } else if (item.useService !== undefined) {\n            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField];\n          }\n        }\n      });\n      let currentTime = '';\n      let selectedMaster = inputParam.selectedMaster || [];\n\n      if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n        selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterIndex,\n          selectedMaster,\n          masterdataList,\n          addMaster: true,\n          loading: false,\n          selectedControl: inputParam.selectedControl,\n          masterfieldList: inputParam.masterfieldList,\n          masterextractedColumnList: inputParam.masterextractedColumnList,\n          masterprimaryKeyField: inputParam.masterprimaryKeyField,\n          masterComboColumnFiled: inputParam.masterComboColumnFiled,\n          screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n          mastercomboComponents: inputParam.mastercomboComponents,\n          masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n          masterDesign: inputParam.masterDesign,\n          masterOperation: inputParam.masterOperation\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterTempalte(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\", {\n      userinfo: { ...inputParam.userinfo,\n        nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode\n      }\n    }).then(response => {\n      const design = response.data;\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || [];\n      let data = inputParam.masterdesignData || [];\n      const masterextractedColumnList = inputParam.masterextractedColumnList || []; //masterwithoutCombocomponent[masterIndex] = []\n      // masterextractedColumnList[masterIndex] = []\n\n      data[masterIndex] = [];\n      design.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data[masterIndex].push(componentrow);\n                } else {\n                  masterwithoutCombocomponent[masterIndex].push(componentrow);\n                }\n\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              });\n            } else {\n              component.inputtype === \"combo\" ? data[masterIndex].push(component) : masterwithoutCombocomponent[masterIndex].push(component);\n\n              if (component.mandatory === true) {\n                if (component.inputtype === \"email\") {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                } else {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      const comboComponents = inputParam.mastercomboComponents || [];\n      comboComponents[masterIndex] = data[masterIndex];\n      let childColumnList = {};\n      data[masterIndex].map(columnList => {\n        const val = comboChild(data[masterIndex], columnList, childColumnList, true);\n        data[masterIndex] = val.data;\n        childColumnList = val.childColumnList;\n      });\n      const masterdesignData = inputParam.masterdesignData || [];\n      masterdesignData[masterIndex] = [...data[masterIndex]];\n      const masterDesign = inputParam.masterDesign || [];\n      masterDesign[masterIndex] = design;\n      inputParam = { ...inputParam,\n        masterchildColumnList: childColumnList,\n        mastercomboComponents: comboComponents,\n        masterextractedColumnList,\n        masterwithoutCombocomponent,\n        masterDesign,\n        masterdesignData,\n        masterOperation: inputParam.masterOperation\n      };\n\n      if (inputParam.masterOperation[masterIndex] === 'create') {\n        dispatch(getDynamicMasterComboForAdd(inputParam, true));\n      } else {\n        dispatch(getEditMasterCombo(inputParam));\n      }\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: inputParam.masterdesignData[masterIndex],\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: inputParam.masterwithoutCombocomponent[masterIndex].filter(x => x.inputtype === \"date\"),\n      userinfo: inputParam.userinfo\n    });\n    let urlArray = [timeZoneService, actualService, dateService];\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      let selectedMaster = inputParam.selectedMaster || [];\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo);\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\n        if (componentrow.inputtype === 'date') {\n          selectedRecord1[selectedRecord1.label] = selectedRecord1[selectedRecord1.label] && selectedRecord1[componentrow.label] !== '-' ? rearrangeDateFormat(inputParam.userinfo, selectedRecord1[componentrow.label]) : \"\";\n\n          if (selectedRecord1.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      }); //const masterchildColumnList=inputParam.masterchildColumnList || []\n      // masterchildColumnList[masterIndex] = comboData1\n\n      const masterdataList = inputParam.masterdataList || [];\n      masterdataList[masterIndex] = comboData1;\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        selectedRecord1\n      };\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam,\n            mastertimeZoneList: timeZoneList,\n            masterdefaultTimeZone: defaultTimeZone,\n            loading: false,\n            addMaster: true,\n            masterdataList,\n            selectedMaster,\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterdesignData: inputParam.masterdesignData,\n            masterIndex,\n            // masterchildColumnList: inputParam.masterchildColumnList,\n            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode] // operation: inputParam.masterOperation[masterIndex],\n\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValuesForAddMaster(inputParam, userinfo, selectedMaster, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParam.child,\n      parentdata: inputParam.item.jsondata,\n      parentsource: inputParam.source,\n      [inputParam.primarykeyField]: inputParam.value,\n      valuemember: inputParam.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData[masterIndex],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        ...returnObj.selectedRecord\n      };\n      const masterdataList = comboData || [];\n      masterdataList[masterIndex] = returnObj.comboData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterdataList,\n          selectedMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildComboMaster(selectedMaster, filedName, item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const obj = masterComboColumnFiled[masterIndex][item.childIndex];\n    urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, {\n      [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField],\n      userinfo: userInfo\n    }));\n    Axios.all(urlArray).then(response => {\n      selectedMaster[masterIndex][obj.dataField] = undefined;\n      const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField, obj.foreignDisplayMember, undefined, undefined, undefined);\n      masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\n\n      if (item.childFieldToClear) {\n        item.childFieldToClear.forEach(item1 => (selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n          [item1.label]: undefined,\n          [item1.tablecolumnname]: undefined\n        }, masterdataList[masterIndex] = { ...masterdataList[masterIndex],\n          [item1.label]: []\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedMaster,\n          masterdataList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getChildValuesForMasterAdd(inputParem, userinfo, selectedMaster, masterdataList, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...masterdataList[masterIndex - 1],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex - 1], childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1],\n        ...returnObj.selectedRecord\n      };\n      masterdataList[masterIndex - 1] = returnObj.comboData; // const dataList = {\n      // }\n\n      const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex);\n      selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n      const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n      const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n      const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n      masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n      const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n      const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n      const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n      masterIndex = parseInt(masterIndex) - 1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\n          // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\n          // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\n          // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\n          // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\n          // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\n          // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\n          // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\n          // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\n          // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\n          // loading: false,\n          //masterdataList,\n          //selectedMaster,\n          // ...dataList,\n          //   masterIndex: (parseInt(masterIndex) - 1),\n          // screenName: inputParem.screenName\n          selectedControl,\n          selectedMaster,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterComboColumnFiled,\n          masterextractedColumnList,\n          masterdataList,\n          masterDesign,\n          masterfieldList,\n          loading: false,\n          // addMaster: false,\n          // masterdataList,\n          // selectedMaster: {},\n          //  selectedMaster: selectedMaster,\n          screenName,\n          masterIndex\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewExternalportalDetail(selectedControl, comboData, userinfo) {\n  return function (dispatch) {\n    if (selectedControl.table.item.nquerybuildertablecode === 222) {\n      dispatch(initRequest(true));\n      rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\n        nexternalordercode: comboData.value,\n        nquerybuildertablecode: selectedControl.table.item.nquerybuildertablecode,\n        userinfo\n      }).then(response => {\n        let Map1 = new Map();\n        response.data.Sample.map(item => {\n          const newData = response.data.Test.filter(x => x.nexternalordersamplecode === item.nexternalordersamplecode);\n          Map1.set(item.nexternalordersamplecode, Object.values(newData));\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isDynamicViewSlideOut: true,\n            dynamicExternalSample: response.data.Sample,\n            dynamicExternalTestChild: Map1,\n            dynamicGridSelectedId: response.data.Sample.length > 0 ? Object.keys(response.data.Sample[0].nexternalordersamplecode) : null,\n            loading: false,\n            selectedDynamicViewControl: selectedControl // dynamicExternalSubSample:[],\n            // dynamicExternalTest:[]\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getEditMaster(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let masterIndex = inputParam.masterIndex;\n    const componentName = inputParam.selectedControl[masterIndex].table.item.component;\n    const valueMember = inputParam.selectedControl[masterIndex].valuemember;\n\n    if (componentName === 'Type1Component' || componentName === 'Type2Component') {\n      rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", {\n        userinfo: inputParam.userinfo,\n        [valueMember]: inputParam.masterEditObject[masterIndex]['value']\n      }).then(response => {\n        if (response.status === 202) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.success(response.data);\n        } else if (response.status === 208) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(response.data);\n        } else {\n          let masterIndex = inputParam.masterIndex;\n          const data = response.data;\n          let selectedMaster = inputParam.selectedMaster || [];\n          inputParam.masterextractedColumnList[masterIndex].map(item => {\n            let fieldName = item.dataField;\n\n            if (item.controlType === \"checkbox\") {\n              selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\n            } else {\n              selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\n            }\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterIndex,\n              selectedMaster,\n              masterdataList: inputParam.masterdataList,\n              addMaster: true,\n              loading: false,\n              selectedControl: inputParam.selectedControl,\n              masterfieldList: inputParam.masterfieldList,\n              masterextractedColumnList: inputParam.masterextractedColumnList,\n              masterprimaryKeyField: inputParam.masterprimaryKeyField,\n              masterComboColumnFiled: inputParam.masterComboColumnFiled,\n              screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n              mastercomboComponents: inputParam.mastercomboComponents,\n              masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n              masterDesign: inputParam.masterDesign,\n              masterEditObject: inputParam.masterEditObject,\n              masterOperation: inputParam.masterOperation\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else if (componentName === 'Type3Component') {\n      let urlArray = [];\n      urlArray.push(rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", {\n        userinfo: inputParam.userinfo,\n        [valueMember]: inputParam.masterEditObject[masterIndex]['value']\n      }));\n      inputParam.masterComboColumnFiled[masterIndex].map(item => {\n        // if (item.needService === undefined) {\n        let input = {};\n\n        if (item.needService === false) {\n          input = {\n            [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]]\n          };\n        }\n\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo,\n          ...input\n        }));\n        item[\"fetchIndex\"] = urlArray.length - 1; // }\n      });\n\n      if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n        urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo: inputParam.userinfo\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let ComboFieldData = [];\n        let masterdataList = inputParam.masterdataList;\n        const data = response[0].data;\n        let selectedMaster = inputParam.selectedMaster || [];\n        inputParam.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField; // if (item.controlType === \"selectbox\") {\n          //     // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n          //     selectedMaster[masterIndex][fieldName]= {lable:data[item.dataField],value:data[item.tableDataField]};\n          // }\n\n          if (item.controlType === \"datepicker\") {\n            selectedMaster[masterIndex][fieldName] = rearrangeDateFormat(inputParam.userinfo, data[item.dateField] ? data[item.dateField] : \"\");\n          } else if (item.controlType === \"checkbox\") {\n            selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\n          } else {\n            selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\n          }\n        });\n        inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\n          //  if (item.needService === undefined) {\n          let fieldName = item.dataField;\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\n\n          if (masterdataList[masterIndex][item.dataField].length > 0) {\n            selectedMaster[masterIndex][fieldName] = { ...masterdataList[masterIndex][item.dataField].filter(x => x.item[item.foreignDataField] === data[item.tableDataField])[0]\n            };\n          } // } else {\n          //     if (item.child !== undefined) {\n          //         masterdataList[masterIndex][item.dataField] = []\n          //     } else if (item.useService !== undefined) {\n          //         masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\n          //     }\n          // }\n\n        });\n        let currentTime = '';\n\n        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n          //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n          currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n          selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n          selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n          selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\n          selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterIndex,\n            selectedMaster,\n            masterdataList,\n            addMaster: true,\n            loading: false,\n            selectedControl: inputParam.selectedControl,\n            masterfieldList: inputParam.masterfieldList,\n            masterextractedColumnList: inputParam.masterextractedColumnList,\n            masterprimaryKeyField: inputParam.masterprimaryKeyField,\n            masterComboColumnFiled: inputParam.masterComboColumnFiled,\n            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterDesign: inputParam.masterDesign,\n            masterOperation: inputParam.masterOperation,\n            masterEditObject: inputParam.masterEditObject\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else if (componentName === 'Dynamic') {\n      dispatch(getDynamicMasterTempalte(inputParam));\n    }\n  };\n}\nexport function getEditMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let masterIndex = inputParam.masterIndex;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const selectedMaster1 = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\n      ndynamicmastercode: inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode,\n      parentcolumnlist: inputParam.masterdesignData[masterIndex],\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    urlArray = [timeZoneService, selectedMaster1];\n    Axios.all(urlArray).then(response => {\n      let data = { ...response[1].data[\"EditData\"]\n      };\n      let selectedMaster = inputParam.selectedMaster || [];\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      const selectedRecord1 = { ...data\n      };\n      const languagetypeCode = undefined;\n      const comboData = response[1].data;\n      delete comboData['EditData'];\n      let comboValues = {};\n\n      if (inputParam.masterdesignData[masterIndex].length > 0) {\n        inputParam.masterdesignData[masterIndex].map(x => {\n          if (x.inputtype === 'combo') {\n            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n              {\n                if (comboData[x.label].length > 0) {\n                  if (comboData[x.label][0].label === undefined) {\n                    const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    comboData[x.label] = optionList.get(\"OptionList\");\n                  } else {\n                    comboData[x.label] = comboData[x.label];\n                    const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                  }\n                } else {\n                  comboData[x.label] = [];\n                }\n\n                comboValues = childComboLoadForEdit(x, comboData, selectedRecord1, inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex]);\n              } else {\n              comboValues = {\n                \"comboData\": comboData\n              };\n            }\n          } else {\n            comboValues = {\n              comboData: comboData,\n              ...comboValues\n            };\n          }\n        });\n      } else {\n        comboValues = {\n          \"comboData\": comboData\n        };\n      }\n\n      if (inputParam.masterwithoutCombocomponent[masterIndex].length > 0) {\n        inputParam.masterwithoutCombocomponent[masterIndex].map(item => {\n          if (item.inputtype === \"date\") {\n            if (selectedRecord1[item.label]) {\n              selectedRecord1 = { ...selectedRecord1,\n                [item.label]: rearrangeDateFormatforUI(inputParam.userinfo, selectedRecord1[item.label])\n              };\n            }\n          }\n        });\n      }\n\n      const masterdataList = inputParam.masterdataList || [];\n      masterdataList[masterIndex] = comboValues.comboData;\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        ...selectedRecord1\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...inputParam,\n          mastertimeZoneList: timeZoneList,\n          masterdefaultTimeZone: defaultTimeZone,\n          loading: false,\n          addMaster: true,\n          masterdataList,\n          selectedMaster,\n          mastercomboComponents: inputParam.mastercomboComponents,\n          masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n          masterdesignData: inputParam.masterdesignData,\n          masterIndex,\n          screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n          masterOperation: inputParam.masterOperation,\n          masterEditObject: inputParam.masterEditObject\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","ageCalculate","comboChild","validateEmail","getSameRecordFromTwoArrays","removeIndex","childSpecLoadCheck","constructjsonOptionList","constructjsonOptionDefault","rearrangeDateFormatforUI","childComboLoadForEdit","getcomponentdata","getValidComponent","replaceChildFromChildren","designComponents","ReactComponents","SampleType","transactionStatus","Axios","getTreeByProduct","preRegDispatch","faShareAltSquare","intl","getReactInputFields","userinfo","operation","respObj","ncontrolCode","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","Period","get","ReactTables","tables","staticfiltertables","selectedFieldRecord","openModal","loading","openPortal","showFilter","ncontrolcode","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getDefaultTemplate","ComboData","sampleType","userInfo","url","value","SUBSAMPLE","str","nsampletypecode","nsubsampletypecode","SubSampleType","selectedSampleType","SubSample","String","DefaultTemplateList","selectedDefaultTemplate","item","DefaultSampleTypeList","selectedSampleTypeList","getRegistrationTemplate","selectedDefaultSampleType","label","ndefaulttemplatecode","searchedData","undefined","realSampleTypes","realSampleType","map","index","push","getEditRegTemplate","editId","jsonData","jsondata","design","selectedRecord","templatename","sregtemplatename","ntransactionstatus","DRAFT","getJsonValue","PGjsonData","Array","isArray","JSONData","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","filterColumns","displayname","slanguagetypecode","columnname","default","tablecolumnname","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","validComponents","filterfields","customsearchfilter","parentRadioValue","parentPath","oldParentData","split","hasOwnProperty","child","radioOptions","tags","id","text","tableColumn","optionalPayload","selectedComponentpath","join","getForeignTableData","parentcolumnlist","source","filtercolumn","foriegntablename","foriegntablePK","conditionstring","inputtype","isMultiLingual","newcomboData","comboData1","selectedRecord1","masterDataValue","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","timeZoneService","actualService","filter","x","readonly","childcolumnlist","dateService","datecolumnlist","currentDate","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","componentrow","loadcurrentdate","CLINICALTYPE","Age","name","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","length","i","PRODUCT","ProductCategory","nproductcatcode","ncategorybasedFlow","sampletypecategorybasedflow","YES","inputParam","Product","nproductcode","INSTRUMENT","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MATERIAL","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","dateComp","ageComp","age","PROJECTSAMPLETYPE","project","nprojectMasterCode","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","instrumentCategory","instrument","materialCategory","material","materialType","subsample","parentdata","parentsource","primarykeyField","returnObj","SubSamplecomboData","selectComponent","selectedMaster","addMaster","selectedControl","masterComboColumnFiled","masterDesign","masterextractedColumnList","masterfieldList","masterdataList","mastercomboComponents","masterwithoutCombocomponent","masterIndex","loadCustomSearchFilter","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectedComponent","Specification","subSampleDataGridList","InstrumentName","MaterialName","MaterialCategoryName","ncategorybasedflow","nformcode","y","indexTemplateMandatory","findIndex","z","templatemandatory","templateManRecord","validatePreview","rtn","info","formatMessage","showConfirmAlert","addMasterRecord","classUrl","methodUrl","inputData","success","data1","table","component","DynamicMasterData","SelectedPatient","PatientList","ExternalOrder","newdata","item1","nquerybuildertablecode","masterEditObject","ndynamicmastercode","combodata","childComboList","parentList","loadSubSample","nportalrequired","nneedsubsample","comboName","selectedRecordName","masterOperation","getChildValuesForMasterAdd","parseInt","getAddMasterCombo","urlArray","needService","ComboFieldData","objectValue","fetchIndex","foreignDataField","dataField","useService","currentTime","NO","masterprimaryKeyField","getDynamicMasterTempalte","masterdesignData","slideoutdesign","row","children","mandatory","props","masterchildColumnList","getDynamicMasterComboForAdd","getEditMasterCombo","mastertimeZoneList","masterdefaultTimeZone","getChildValuesForAddMaster","getChildComboMaster","filedName","obj","childIndex","tableDataField","foreignDisplayMember","childFieldToClear","forEach","viewExternalportalDetail","nexternalordercode","Map1","Map","Sample","newData","nexternalordersamplecode","set","Object","values","isDynamicViewSlideOut","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","keys","selectedDynamicViewControl","getEditMaster","componentName","valueMember","fieldName","controlType","controlName","input","dateField","selectedMaster1","languagetypeCode","comboValues","optionList","console","log"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex, childSpecLoadCheck, constructjsonOptionList, constructjsonOptionDefault, rearrangeDateFormatforUI, childComboLoadForEdit } from '../components/CommonScript';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\r\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        // console.log(\"respObj:\", respObj);\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", { userinfo })\r\n        listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\r\n                        staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        showFilter: false,\r\n                        ncontrolcode: ncontrolCode,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDefaultTemplate(ComboData, sampleType, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n        //     nsampletypecode: sampleType.value,\r\n        //     userinfo: userInfo,\r\n        //     SubSample:false\r\n        // })\r\n        let url = [];\r\n        if (ComboData.value === SampleType.SUBSAMPLE) {\r\n            const str = rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\r\n                userinfo: userInfo,\r\n                nsampletypecode: sampleType.SampleType && sampleType.SampleType.value\r\n            })\r\n            url = [str];\r\n        } else {\r\n            const str = rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n                nsubsampletypecode: sampleType.SubSampleType && sampleType.SubSampleType.value,\r\n                userinfo: userInfo,\r\n                nsampletypecode: sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode,\r\n                SubSample: String(sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode) === '-1' ? true : false\r\n\r\n            })\r\n            url = [str];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(url)\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: ComboData.value === SampleType.SUBSAMPLE ? {\r\n                            ...masterData,\r\n                            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\r\n                            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n                            selectedSampleType: sampleType.SampleType.item,\r\n                            DefaultSampleTypeList: response[0].data[\"SampleTypeList\"],\r\n                            selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],\r\n                            // selectedSampleTypeList:sampleType.item,\r\n                        } : {\r\n                            ...masterData,\r\n                            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\r\n                            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n                            selectedSampleTypeList: sampleType.SubSampleType && sampleType.SubSampleType.item,\r\n                            selectedSampleType: sampleType.SampleType && sampleType.SampleType.item || masterData.selectedSampleType,\r\n                        },\r\n                        // realSampleType: [{\r\n                        //     \"label\": \"IDS_SAMPLETYPE\",\r\n                        //     \"value\": sampleType.label,\r\n                        //     \"item\": sampleType\r\n                        // }],\r\n\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getDefaultSampleType(sampleType, userInfo, masterData,SampleTypeName,selectedSampleType) {\r\n//     return function (dispatch) {\r\n//     let url=[];\r\n//         if(sampleType.label===\"Sub Sample\"){\r\n//       const str=  rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\r\n//             userinfo: userInfo,\r\n//             nsampletypecode: sampleType.value\r\n//         })\r\n//         url=[str];\r\n//     }else{\r\n//         const str=  rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n//             nsubsampletypecode: sampleType.value,\r\n//             userinfo: userInfo,SubSample:true,nsampletypecode:selectedSampleType.value\r\n//         })\r\n//         url=[str];\r\n//     }\r\n//     dispatch(initRequest(true));\r\n//     Axios.all(url)\r\n//          .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: { masterData: sampleType.label===\"Sub Sample\"?{ ...masterData, \r\n//                                             DefaultSampleTypeList :response[0].data[\"SampleTypeList\"],\r\n//                                             selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],SampleTypeName,\r\n//                                             selectedSampleType:sampleType.item,\r\n//                                             DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\r\n//                                             selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n//                                             //defaultTemplateOptions:[],selectedDefaultTemplate:[],DefaultTemplateList:[]\r\n//                                             }:{ ...masterData, \r\n//                                                 DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\r\n//                                                 selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n//                                                 selectedSampleTypeList:sampleType.item,\r\n//                                                 }, \r\n\r\n//                                 loading: false }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\nexport function getRegistrationTemplate(selectedSampleType, selectedDefaultTemplate, masterData, userinfo, selectedDefaultSampleType) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            SampleType: selectedSampleType.label,\r\n            ndefaulttemplatecode: selectedDefaultTemplate.value,\r\n            userinfo, SubSample: selectedSampleType.label === \"Sub Sample\" ? true : false,\r\n            nsubsampletypecode: selectedDefaultSampleType.value\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined,selectedDefaultTemplate:selectedDefaultTemplate }\r\n                sortData(masterData)\r\n                let realSampleTypes = [{\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": selectedSampleType.label,\r\n                    \"item\": selectedSampleType\r\n                },\r\n                // realDefaultTemplate: [\r\n                selectedSampleType.value === SampleType.SUBSAMPLE ? {\r\n                    \"label\": \"IDS_SUBSAMPLEBASEDSAMPLETYPE\",\r\n                    \"value\": selectedDefaultSampleType.label,\r\n                    \"item\": selectedDefaultSampleType\r\n                } : \"\", {\r\n                    \"label\": \"IDS_TEMPLATETYPE\",\r\n                    \"value\": selectedDefaultTemplate.label,\r\n                    \"item\": selectedDefaultTemplate\r\n                }]\r\n                let realSampleType = [];\r\n                realSampleTypes.map((item, index) => {\r\n                    if (item === \"\") {\r\n                        delete (realSampleTypes[index])\r\n                    } else {\r\n                        realSampleType.push(item)\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                let jsonData = response.data.jsondata;\r\n                sortData(masterData)\r\n\r\n                const respObj = {\r\n                    masterData,\r\n                    ncontrolcode: editId,\r\n                    openPortal: true,\r\n                    loading: false,\r\n                    openModal: false,\r\n                    design: jsonData,\r\n                    selectedRecord: { templatename: response.data.sregtemplatename }\r\n                }\r\n                if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    // let jsonData = response.data.jsondata;\r\n                    // sortData(masterData)\r\n\r\n                    // const respObj = {\r\n                    //     masterData,\r\n                    //     ncontrolcode: editId,\r\n                    //     openPortal: true,\r\n                    //     loading: false,\r\n                    //     openModal: false,\r\n                    //     design: jsonData,\r\n                    //     selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    // }                \r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                }\r\n                else {\r\n                    dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj))\r\n                    // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            return JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\n\r\nexport function getTableColumns(design, selectedFieldRecord, stablename,\r\n    userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { \"nquerybuildertablecode\": stablename || 0, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let filterColumns = [];\r\n                //  let selectedComponentpath=componentData.selectedComponentpath\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"dynamic\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"dynamic\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                filterColumns = [...comboData];\r\n                numericColumns.map(item => {\r\n                    filterColumns.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.tablecolumnname,\r\n                        type: \"numeric\",\r\n                        item\r\n                    })\r\n                })\r\n                if (defaultColumn.item && defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined || componentData.components === undefined) {\r\n                    componentData = componentData || {}\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER\r\n                        || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, filterfields: [{ type: defaultColumn.type, ...defaultColumn.item }], customsearchfilter: [defaultColumn], displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    } else {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }\r\n\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    let parentRadioValue = []\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        if (selectedFieldRecord.parentPath) {\r\n                            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                            if (oldParentData.hasOwnProperty('child')) {\r\n                                oldParentData.child.map(item => {\r\n                                    if (item.label === selectedFieldRecord.label) {\r\n                                        parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                            return { value: item.id, label: item.text, item }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    componentData = { ...componentData, validComponents, parentRadioValue }\r\n                }\r\n\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData, filterColumns }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        // selectedComponentpath,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        filterColumns,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        selectedComponentpath: componentData.path,\r\n                        ...componentData,\r\n                        showFilter: showFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        let parentcolumnlist = [{\r\n            source: selectedFieldRecord.filtercolumn.item.foriegntablename,\r\n            valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\r\n            displaymember: selectedFieldRecord.filtercolumn.item.columnname,\r\n            conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\r\n            label: \"filterData\",\r\n            inputtype: \"combo\",\r\n            isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\r\n        }]\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", { parentcolumnlist, userinfo })\r\n            .then(response => {\r\n                let comboData = [];\r\n                let selectedRecord = {};\r\n                const newcomboData = parentChildComboLoad(parentcolumnlist, response.data,\r\n                    selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    // selectedFieldRecord = { ...selectedFieldRecord };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        masterDataValue: comboData,\r\n                        columnInfo,\r\n                        ...componentData,\r\n                        ...comboData1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList ? columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)) : [],\r\n            childcolumnlist: childColumnList ? childColumnList : [],\r\n            userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService, dateService, currentDate])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data, selectedRecord,\r\n                    childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        //  if (componentrow.mandatory) {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                const Age = withoutCombocomponent.filter(item =>\r\n                                    item.name === \"Age\");\r\n                                selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label])\r\n                            }\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                        // }else{\r\n                        //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation: \"preview\"\r\n\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] &&\r\n                                selectedRecord1[InstrumentCategory[0].label].value\r\n                            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label]\r\n                                && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = selectedRecord1[Instrument[0].label]\r\n                                            && selectedRecord1[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    // loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] &&\r\n                                selectedRecord1[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] &&\r\n                                        selectedRecord1[MaterialCategory[0].label].value\r\n                                    let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label]\r\n                                        && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                                    if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                        ncategorybasedFlow = transactionStatus.YES;\r\n                                    }\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName,\r\n                                                // loadPreregister:true\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                selectedRecord1,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = selectedRecord1[Material[0].label]\r\n                                                    && selectedRecord1[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    // loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    //loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                } else {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = -1\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        //loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                        if (dateComp[0].label !== undefined) {\r\n                            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\r\n                            selectedRecord1[ageComp[0].label] = age;\r\n                        }\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ?\r\n                                selectedRecord1[ProductCategory[0].label].value : -1;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']\r\n                                : undefined;\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const project = comboComponents.filter(x => x.name === 'Project Code');\r\n                        let nprojectMasterCode = -1;\r\n                        if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\r\n                            nprojectMasterCode = selectedRecord1[project[0].label] &&\r\n                                selectedRecord1[project[0].label].value;\r\n                        }\r\n\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        }\r\n                        else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1;\r\n                            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData,\r\n    instrumentCategory, instrument, materialCategory,\r\n    material, materialType, subsample, project, comboComponents) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj,\r\n                    selectedRecord, childcolumnlist,\r\n                    withoutCombocomponent, inputParem,\r\n                    userinfo.slanguagetypecode, userinfo, comboComponents)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (subsample) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            SubSamplecomboData: { ...returnObj.comboData },\r\n                            selectComponent: selectedRecord,\r\n                            screenName: inputParem.screenName,\r\n                            selectedMaster: [],\r\n                            addMaster: false,\r\n                            selectedControl: [],\r\n                            masterComboColumnFiled: [],\r\n                            masterDesign: [],\r\n                            masterextractedColumnList: [],\r\n                            masterfieldList: [],\r\n                            masterdataList: [],\r\n                            mastercomboComponents: [],\r\n                            masterwithoutCombocomponent: [],\r\n                            masterIndex: undefined,\r\n                            loadCustomSearchFilter: false,\r\n                        }\r\n                    })\r\n                }\r\n                // else if (childSpec) {\r\n\r\n                //     if (mapOfRegFilterData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && mapOfRegFilterData.nprojectSpecReqd === 3) {\r\n\r\n                //     }\r\n                //     else if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                //         if (mapOfRegFilterData.childSpecBasedAddMaster\r\n                //             && mapOfRegFilterData.childSpecBasedAddMaster) {\r\n                //             if (mapOfRegFilterData.ProductCategory[0]\r\n                //                 && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]===undefined) {\r\n\r\n                //                 selectedRecord[mapOfRegFilterData.ProductCategory[0].label]=returnObj[mapOfRegFilterData.ProductCategory[0].label]&&returnObj[mapOfRegFilterData.ProductCategory[0].label][0]\r\n\r\n                //             }\r\n                //             const label = mapOfRegFilterData.ProductCategory[0].label\r\n\r\n                //             let ncategorybasedflow = selectedRecord[label] &&\r\n                //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\r\n                //                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //             }\r\n\r\n                //         }\r\n                //         else if (mapOfRegFilterData.ProductCategory && mapOfRegFilterData.ProductCategory[0]\r\n                //             && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]) {\r\n                //             const label = mapOfRegFilterData.ProductCategory[0].label\r\n\r\n                //             let ncategorybasedflow = selectedRecord[label] &&\r\n                //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\r\n                //                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //             }\r\n                //             else {\r\n                //                 if (mapOfRegFilterData.ProductCategory[0].child && mapOfRegFilterData.ProductCategory[0].child) {\r\n                //                     let pt = []\r\n                //                     mapOfRegFilterData.ProductCategory[0].child.map(x =>\r\n                //                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\r\n                //                     )\r\n                //                     if (pt.length > 0) {\r\n                //                         if (pt && pt[0]) {\r\n                //                             const pclabel = mapOfRegFilterData.ProductCategory[0].label\r\n                //                             const label = pt[0].label\r\n                //                             if (selectedRecord[pclabel] && selectedRecord[pclabel].value &&\r\n                //                                 selectedRecord[label] && selectedRecord[label].value) {\r\n                //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pclabel].value\r\n                //                                 mapOfRegFilterData['nproductcode'] = selectedRecord[label].value\r\n                //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                             }\r\n                //                         }\r\n                //                     }\r\n\r\n                //                 }\r\n\r\n                //             }\r\n                //         } else if (mapOfRegFilterData.childSpec && mapOfRegFilterData.childSpec) {\r\n                //             if (selectedRecord[inputParem.label] && selectedRecord[inputParem.label]) {\r\n                //                 const TemplateChild = parentcolumnlist && parentcolumnlist.filter(x => x.child && x.child.length > 0)\r\n                //                 if (TemplateChild && TemplateChild.length > 0) {\r\n                //                     let pc = {}\r\n                //                     TemplateChild.map(x => {\r\n                //                         x.child && x.child.map(y => {\r\n                //                             const data = comboComponents1.filter(x => x.label === y.label)\r\n                //                             if (data && data[0].templatemandatory) {\r\n                //                                 const name = data[0].name\r\n                //                                 if (name === \"Product Category\") {\r\n                //                                     pc = data[0]\r\n                //                                 }\r\n                //                             }\r\n                //                         })\r\n                //                     })\r\n\r\n                //                     if (pc && pc.label) {\r\n                //                         if (selectedRecord[pc.label]\r\n                //                             && selectedRecord[pc.label].value) {\r\n\r\n                //                             let ncategorybasedflow = selectedRecord[pc.label] &&\r\n                //                                 selectedRecord[pc.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //                             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\r\n                //                                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                             } else {\r\n                //                                 if (pc.child && pc.child > 0) {\r\n                //                                     let pt = []\r\n                //                                     pc.child.map(x =>\r\n                //                                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\r\n                //                                     )\r\n                //                                     if (pt.length > 0) {\r\n                //                                         if (selectedRecord[pt[0].label] && selectedRecord[pt[0].label].value) {\r\n                //                                             mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\r\n                //                                             mapOfRegFilterData['nproductcode'] = selectedRecord[pt[0].label].value\r\n                //                                             dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                                         }\r\n                //                                     }\r\n                //                                 }\r\n\r\n                //                             }\r\n\r\n                //                         }\r\n                //                     }\r\n                //                 } else {\r\n                //                     selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //                     selectedRecord[\"sversion\"] = \"\"\r\n                //                     dispatch({\r\n                //                         type: DEFAULT_RETURN,\r\n                //                         payload: {\r\n                //                             loading: false,\r\n                //                             comboData: { ...returnObj.comboData },\r\n                //                             selectedRecord,\r\n                //                             AgaramTree: [],\r\n                //                             ActiveKey: [],\r\n                //                             FocusKey: [],\r\n                //                             OpenNodes: [],\r\n                //                             Test: [],\r\n                //                             SelectedTest: [],\r\n                //                             selectedSpec: {},\r\n                //                             Component: [],\r\n                //                             selectComponent: {},\r\n                //                             selectedComponent: {},\r\n                //                             Specification: [],\r\n                //                             selectedMaster: [],\r\n                //                             subSampleDataGridList: []\r\n                //                         }\r\n                //                     })\r\n                //                 }\r\n                //             } else {\r\n                //                 selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //                 selectedRecord[\"sversion\"] = \"\"\r\n                //                 dispatch({\r\n                //                     type: DEFAULT_RETURN,\r\n                //                     payload: {\r\n                //                         loading: false,\r\n                //                         comboData: { ...returnObj.comboData },\r\n                //                         selectedRecord,\r\n                //                         AgaramTree: [],\r\n                //                         ActiveKey: [],\r\n                //                         FocusKey: [],\r\n                //                         OpenNodes: [],\r\n                //                         Test: [],\r\n                //                         SelectedTest: [],\r\n                //                         selectedSpec: {},\r\n                //                         Component: [],\r\n                //                         selectComponent: {},\r\n                //                         selectedComponent: {},\r\n                //                         Specification: [],\r\n                //                         selectedMaster: [],\r\n                //                         subSampleDataGridList: []\r\n                //                     }\r\n                //                 })\r\n                //             }\r\n\r\n\r\n                //         }\r\n                //         else {\r\n                //             selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //             selectedRecord[\"sversion\"] = \"\"\r\n                //             dispatch({\r\n                //                 type: DEFAULT_RETURN,\r\n                //                 payload: {\r\n                //                     loading: false,\r\n                //                     comboData: { ...returnObj.comboData },\r\n                //                     selectedRecord,\r\n                //                     AgaramTree: [],\r\n                //                     ActiveKey: [],\r\n                //                     FocusKey: [],\r\n                //                     OpenNodes: [],\r\n                //                     Test: [],\r\n                //                     SelectedTest: [],\r\n                //                     selectedSpec: {},\r\n                //                     Component: [],\r\n                //                     selectComponent: {},\r\n                //                     selectedComponent: {},\r\n                //                     Specification: [],\r\n                //                     selectedMaster: [],\r\n                //                     subSampleDataGridList: []\r\n                //                 }\r\n                //             })\r\n                //         }\r\n                //     }\r\n                // }\r\n                else if (project) {\r\n                    //console.log(\"data:\", mapOfRegFilterData, selectedRecord );\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (productCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (product) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                subSampleDataGridList: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (instrumentCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (materialCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (instrument) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ?\r\n                            inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (material) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ?\r\n                            inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (materialType) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\r\n                        const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                            inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                inputParem.MaterialCategoryName : inputParem.label] : undefined\r\n\r\n                        //  mapOfRegFilterData[\"nproductcatcode\"]\r\n                        if (productCategory !== undefined) {\r\n                            if (productCategory.item.ncategorybasedflow === 3) {\r\n                                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                mapOfRegFilterData[\"nproductcode\"] = -1\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                            } else {\r\n\r\n                                const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                    inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                        inputParem.MaterialName : inputParem.label] : undefined\r\n                                if (product !== undefined) {\r\n                                    mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                    mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                } else {\r\n\r\n                                    const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                        inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                            inputParem.MaterialName : inputParem.label] : undefined\r\n                                    if (product !== undefined) {\r\n                                        mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                        mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                    } else {\r\n                                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                                        selectedRecord[\"sversion\"] = \"\"\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                loading: false,\r\n                                                comboData: { ...returnObj.comboData },\r\n                                                selectedRecord,\r\n                                                AgaramTree: [],\r\n                                                ActiveKey: [],\r\n                                                FocusKey: [],\r\n                                                OpenNodes: [],\r\n                                                Test: [],\r\n                                                SelectedTest: [],\r\n                                                selectedSpec: {},\r\n                                                Component: [],\r\n                                                selectComponent: {},\r\n                                                selectedComponent: {},\r\n                                                Specification: [],\r\n                                                selectedMaster: [],\r\n                                                addMaster: false\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                            selectedRecord[\"sversion\"] = \"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec: {},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification: [],\r\n                                    selectedMaster: [],\r\n                                    addMaster: false\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    let productCategory = false\r\n                    let map = {}\r\n                    if (userinfo.nformcode === 43) {\r\n                        if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                            if (inputParem.child && inputParem.child.length > 0) {\r\n                                inputParem.child.map(y => {\r\n                                    const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label && z.templatemandatory && z.name === 'Product Category')\r\n                                    if (indexTemplateMandatory !== -1) {\r\n                                        const templateManRecord = parentcolumnlist[indexTemplateMandatory]\r\n                                        //  if (inputParem.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                        if (templateManRecord.name === 'Product Category') {\r\n                                            productCategory = true\r\n                                            if (selectedRecord[templateManRecord.label]) {\r\n                                                map = {\r\n                                                    nproductcatcode: selectedRecord[templateManRecord.label].value,\r\n                                                    nproductcode: -1\r\n                                                }\r\n                                            } else {\r\n                                                map = {\r\n                                                    nproductcatcode: -1,\r\n                                                    nproductcode: -1\r\n                                                }\r\n                                            }\r\n                                            //  }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label)\r\n                                        if (indexTemplateMandatory !== -1) {\r\n                                            const templateManRecord = parentcolumnlist[indexTemplateMandatory]\r\n                                            if (templateManRecord.child && templateManRecord.child.length > 0) {\r\n                                                const val = childSpecLoadCheck(templateManRecord, childcolumnlist, productCategory, map, y.label, selectedRecord)\r\n                                                if (val.productCategory) {\r\n                                                    productCategory = val.productCategory\r\n                                                    map = { ...map, ...val.map }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                })\r\n                            }\r\n\r\n                            if (productCategory) {\r\n                                mapOfRegFilterData = { ...mapOfRegFilterData, nproductcatcode: map.nproductcatcode, nproductcode: map.nproductcode }\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        loading: false,\r\n                                        comboData: { ...returnObj.comboData },\r\n                                        selectedRecord,\r\n                                        selectedMaster: [],\r\n                                        addMaster: false,\r\n                                        selectedControl: [],\r\n                                        masterComboColumnFiled: [],\r\n                                        masterDesign: [],\r\n                                        masterextractedColumnList: [],\r\n                                        masterfieldList: [],\r\n                                        masterdataList: [],\r\n                                        mastercomboComponents: [],\r\n                                        masterwithoutCombocomponent: [],\r\n                                        masterIndex: undefined,\r\n                                        screenName: inputParem.screenName,\r\n                                        loadCustomSearchFilter: false\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    selectedMaster: [],\r\n                                    addMaster: false,\r\n                                    selectedControl: [],\r\n                                    masterComboColumnFiled: [],\r\n                                    masterDesign: [],\r\n                                    masterextractedColumnList: [],\r\n                                    masterfieldList: [],\r\n                                    masterdataList: [],\r\n                                    mastercomboComponents: [],\r\n                                    masterwithoutCombocomponent: [],\r\n                                    masterIndex: undefined,\r\n                                    screenName: inputParem.screenName,\r\n                                    loadCustomSearchFilter: false\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    } else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                selectedMaster: [],\r\n                                addMaster: false,\r\n                                selectedControl: [],\r\n                                masterComboColumnFiled: [],\r\n                                masterDesign: [],\r\n                                masterextractedColumnList: [],\r\n                                masterfieldList: [],\r\n                                masterdataList: [],\r\n                                mastercomboComponents: [],\r\n                                masterwithoutCombocomponent: [],\r\n                                masterIndex: undefined,\r\n                                screenName: inputParem.screenName,\r\n                                loadCustomSearchFilter: false\r\n                            }\r\n                        })\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validatePreview(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam })\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    toast.info(intl.formatMessage({\r\n                        id: \"IDS_SUCCESSFULLYVALIDATE\"\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                        }\r\n                    })\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMasterRecord(inputParam) {\r\n    return function (dispatch) {\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                if (response.status === 202) {\r\n                    //HttpStatus:Accepted\r\n                    //Use this block when u need to display any success message\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.success(response.data);\r\n                }\r\n                else if (response.status === 208) {\r\n                    //HttpStatus:Accepted\r\n                    //208-Already Reported\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.warn(response.data);\r\n                } else {\r\n                    let masterIndex = inputParam.masterIndex\r\n                    let data = []\r\n                    const data1 = sortData(response.data);\r\n                    if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                        data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember], value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember], item: data1.SelectedPatient }]\r\n                        } else {\r\n                            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember], value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember], item: data1.ExternalOrder }]\r\n                        } else {\r\n                            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n\r\n                    const newdata = data.map((item1, index) => {\r\n                        item1 = { ...item1, item: { jsondata: { ...item1.item, jsondata: { ...item1.item } } } }\r\n                        return item1;\r\n                    })\r\n                    if (masterIndex === 0) {\r\n                        const selectedRecord = inputParam.selectedRecord || {}\r\n                        const selectedControl = inputParam.selectedControl || {}\r\n                        let comboData1 = {}\r\n                        if (inputParam.operation === 'create') {\r\n                            comboData1 = {\r\n                                ...newdata[0], item: {\r\n                                    ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ?\r\n                                inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value\r\n                            let combodata = []\r\n                            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                                combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value)\r\n                            } else {\r\n                                combodata = newdata.filter(x => x.value === value)\r\n                            }\r\n\r\n\r\n                            comboData1 = {\r\n                                ...combodata[0], item: {\r\n                                    ...combodata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        selectedRecord[selectedControl[masterIndex].label] = comboData1\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid']\r\n                        }\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode']\r\n                        }\r\n                        const comboData = inputParam.comboData\r\n                        comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\")\r\n\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName,\r\n                                nsampletypecode: inputParam.nsampletypecode ? inputParam.nsampletypecode : -1\r\n                            }\r\n\r\n\r\n                            if (inputParam.loadSubSample) {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList], false, false, {},\r\n                                    false, false, false,\r\n                                    false, false, true, false))\r\n                            } else {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList], false, false, inputParam.nsampletypecode === 5 ? { nportalrequired: inputParam.nportalrequired && inputParam.nportalrequired, nsampletypecode: inputParam.nsampletypecode, nneedsubsample: inputParam.nneedsubsample } : {},\r\n                                    false, false, false,\r\n                                    false, false, false, false, inputParam.comboComponents))\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    addMaster: false,\r\n                                    [inputParam.comboName]: comboData,\r\n                                    selectedMaster: [],\r\n                                    [inputParam.selectedRecordName]: selectedRecord,\r\n                                    screenName: inputParam.screenName,\r\n                                    masterIndex: undefined,\r\n                                    mastercomboComponents: [],\r\n                                    masterwithoutCombocomponent: [],\r\n                                    masterComboColumnFiled: [],\r\n                                    masterextractedColumnList: [],\r\n                                    masterdataList: [],\r\n                                    masterDesign: [],\r\n                                    masterfieldList: [],\r\n                                    masterOperation: [],\r\n                                    masterEditObject: [],\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        let selectedMaster = inputParam.selectedMaster || []\r\n                        let selectedControl = inputParam.selectedControl || []\r\n                        let comboData1 = {}\r\n\r\n                        if (inputParam.operation === 'create') {\r\n                            comboData1 = {\r\n                                ...newdata[0], item: {\r\n                                    ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ?\r\n                                inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value\r\n                            let combodata = []\r\n                            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                                combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value)\r\n                            } else {\r\n                                combodata = newdata.filter(x => x.value === value)\r\n                            }\r\n\r\n                            comboData1 = {\r\n                                ...combodata[0], item: {\r\n                                    ...combodata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1\r\n\r\n                        // const comboData = inputParam.comboData\r\n                        // comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        let masterdataList = inputParam.masterdataList || []\r\n                        masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1], [selectedControl[masterIndex].label]: newdata }\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName\r\n                            }\r\n\r\n                            dispatch(getChildValuesForMasterAdd(inputParem,\r\n                                inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList,\r\n                                childComboList, childColumnList,\r\n                                inputParam.masterwithoutCombocomponent,\r\n                                [...childComboList, ...parentList], masterIndex, inputParam))\r\n\r\n\r\n\r\n                        } else {\r\n\r\n                            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex)\r\n                            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                            const masterOperation = inputParam.masterOperation && removeIndex(inputParam.masterOperation, masterIndex)\r\n                            const masterEditObject = inputParam.masterEditObject && removeIndex(inputParam.masterEditObject, masterIndex)\r\n                            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                            masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    selectedControl,\r\n                                    selectedMaster,\r\n                                    mastercomboComponents,\r\n                                    masterwithoutCombocomponent,\r\n                                    masterComboColumnFiled,\r\n                                    masterextractedColumnList,\r\n                                    masterdataList,\r\n                                    masterDesign,\r\n                                    masterfieldList,\r\n                                    masterOperation,\r\n                                    masterEditObject,\r\n                                    loading: false,\r\n                                    // addMaster: false,\r\n                                    // masterdataList,\r\n                                    // selectedMaster: {},\r\n                                    //  selectedMaster: selectedMaster,\r\n\r\n                                    screenName,\r\n                                    masterIndex,\r\n\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export function removeIndex(data, removeIndex) {\r\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n//     return data1\r\n// }\r\n\r\nexport function getAddMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let masterIndex = inputParam.masterIndex\r\n        inputParam.masterComboColumnFiled[masterIndex].map(item => {\r\n            if (item.needService === undefined) {\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo }));\r\n                item[\"fetchIndex\"] = urlArray.length - 1;\r\n            }\r\n        }\r\n        )\r\n        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let ComboFieldData = [];\r\n                let masterdataList = inputParam.masterdataList;\r\n\r\n                inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\r\n                    if (item.needService === undefined) {\r\n\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue],\r\n                            item.foreignDataField, item.dataField, undefined, undefined, undefined,);\r\n                        masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\r\n                        //selectedMaster[masterIndex][item.dataField] = ComboFieldData.get(\"DefaultValue\");\r\n\r\n                    } else {\r\n                        if (item.child !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = []\r\n                        } else if (item.useService !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let currentTime = ''\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                    //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                    currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                    selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                    selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterIndex,\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        addMaster: true,\r\n                        loading: false,\r\n                        selectedControl: inputParam.selectedControl,\r\n                        masterfieldList: inputParam.masterfieldList,\r\n                        masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                        masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                        masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                        screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                        mastercomboComponents: inputParam.mastercomboComponents,\r\n                        masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                        masterDesign: inputParam.masterDesign,\r\n                        masterOperation: inputParam.masterOperation\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDynamicMasterTempalte(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\",\r\n            { userinfo: { ...inputParam.userinfo, nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode } })\r\n            .then(response => {\r\n                const design = response.data\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || []\r\n                let data = inputParam.masterdesignData || []\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList || []\r\n\r\n                //masterwithoutCombocomponent[masterIndex] = []\r\n                // masterextractedColumnList[masterIndex] = []\r\n                data[masterIndex] = []\r\n                design.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data[masterIndex].push(componentrow)\r\n                                    } else {\r\n                                        masterwithoutCombocomponent[masterIndex].push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data[masterIndex].push(component)\r\n                                    : masterwithoutCombocomponent[masterIndex].push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = inputParam.mastercomboComponents || []\r\n                comboComponents[masterIndex] = data[masterIndex];\r\n                let childColumnList = {};\r\n                data[masterIndex].map(columnList => {\r\n                    const val = comboChild(data[masterIndex], columnList, childColumnList, true);\r\n                    data[masterIndex] = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterdesignData = inputParam.masterdesignData || []\r\n                masterdesignData[masterIndex] = [...data[masterIndex]]\r\n                const masterDesign = inputParam.masterDesign || []\r\n                masterDesign[masterIndex] = design\r\n                inputParam = {\r\n                    ...inputParam,\r\n                    masterchildColumnList: childColumnList,\r\n                    mastercomboComponents: comboComponents,\r\n                    masterextractedColumnList,\r\n                    masterwithoutCombocomponent,\r\n                    masterDesign,\r\n                    masterdesignData,\r\n                    masterOperation: inputParam.masterOperation\r\n                }\r\n\r\n\r\n                if (inputParam.masterOperation[masterIndex] === 'create') {\r\n\r\n                    dispatch(getDynamicMasterComboForAdd(inputParam, true))\r\n                } else {\r\n                    dispatch(getEditMasterCombo(inputParam))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: inputParam.masterdesignData[masterIndex],\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: inputParam.masterwithoutCombocomponent[masterIndex].filter(x => x.inputtype === \"date\"),\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService, dateService];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode }\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n                const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList,\r\n                    inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\r\n                    if (componentrow.inputtype === 'date') {\r\n                        selectedRecord1[selectedRecord1.label] = selectedRecord1[selectedRecord1.label] && selectedRecord1[componentrow.label] !== '-' ?\r\n                            rearrangeDateFormat(inputParam.userinfo, selectedRecord1[componentrow.label]) : \"\"\r\n\r\n                        if (selectedRecord1.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n                //const masterchildColumnList=inputParam.masterchildColumnList || []\r\n                // masterchildColumnList[masterIndex] = comboData1\r\n                const masterdataList = inputParam.masterdataList || []\r\n                masterdataList[masterIndex] = comboData1\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], selectedRecord1 }\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...inputParam,\r\n                            mastertimeZoneList: timeZoneList,\r\n                            masterdefaultTimeZone: defaultTimeZone,\r\n                            loading: false,\r\n                            addMaster: true,\r\n                            masterdataList,\r\n                            selectedMaster,\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterdesignData: inputParam.masterdesignData,\r\n                            masterIndex,\r\n                            // masterchildColumnList: inputParam.masterchildColumnList,\r\n                            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                            // operation: inputParam.masterOperation[masterIndex],\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValuesForAddMaster(inputParam,\r\n    userinfo, selectedMaster, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex\r\n) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParam.child,\r\n            parentdata: inputParam.item.jsondata,\r\n            parentsource: inputParam.source,\r\n            [inputParam.primarykeyField]: inputParam.value,\r\n            valuemember: inputParam.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData[masterIndex], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], ...returnObj.selectedRecord }\r\n                const masterdataList = comboData || []\r\n                masterdataList[masterIndex] = returnObj.comboData\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterdataList,\r\n                        selectedMaster\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getChildComboMaster(selectedMaster, filedName,\r\n    item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const obj = masterComboColumnFiled[masterIndex][item.childIndex]\r\n        urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField], userinfo: userInfo }))\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                selectedMaster[masterIndex][obj.dataField] = undefined\r\n                const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField,\r\n                    obj.foreignDisplayMember, undefined, undefined, undefined);\r\n                masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n\r\n                if (item.childFieldToClear) {\r\n                    item.childFieldToClear.forEach(item1 => (\r\n\r\n                        selectedMaster[masterIndex] = {\r\n                            ...selectedMaster[masterIndex],\r\n                            [item1.label]: undefined,\r\n                            [item1.tablecolumnname]: undefined\r\n                        },\r\n                        masterdataList[masterIndex] = {\r\n                            ...masterdataList[masterIndex],\r\n                            [item1.label]: []\r\n                        }\r\n                    )\r\n                    );\r\n\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getChildValuesForMasterAdd(inputParem,\r\n    userinfo, selectedMaster, masterdataList, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    masterIndex, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...masterdataList[masterIndex - 1], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj,\r\n                    selectedMaster[masterIndex - 1],\r\n                    childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem,\r\n                    userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1], ...returnObj.selectedRecord }\r\n                masterdataList[masterIndex - 1] = returnObj.comboData\r\n\r\n\r\n                // const dataList = {\r\n\r\n                // }\r\n                const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex)\r\n                selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\r\n                        // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\r\n                        // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\r\n                        // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\r\n                        // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\r\n                        // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\r\n                        // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\r\n                        // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\r\n                        // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\r\n                        // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\r\n                        // loading: false,\r\n                        //masterdataList,\r\n                        //selectedMaster,\r\n                        // ...dataList,\r\n                        //   masterIndex: (parseInt(masterIndex) - 1),\r\n                        // screenName: inputParem.screenName\r\n\r\n\r\n                        selectedControl,\r\n                        selectedMaster,\r\n                        mastercomboComponents,\r\n                        masterwithoutCombocomponent,\r\n                        masterComboColumnFiled,\r\n                        masterextractedColumnList,\r\n                        masterdataList,\r\n                        masterDesign,\r\n                        masterfieldList,\r\n                        loading: false,\r\n                        // addMaster: false,\r\n                        // masterdataList,\r\n                        // selectedMaster: {},\r\n                        //  selectedMaster: selectedMaster,\r\n\r\n                        screenName,\r\n                        masterIndex,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewExternalportalDetail(selectedControl, comboData, userinfo) {\r\n    return function (dispatch) {\r\n        if (selectedControl.table.item.nquerybuildertablecode === 222) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\r\n                nexternalordercode: comboData.value,\r\n                nquerybuildertablecode: selectedControl.table.item.nquerybuildertablecode,\r\n                userinfo,\r\n            })\r\n                .then(response => {\r\n                    let Map1 = new Map();\r\n                    response.data.Sample.map((item) => {\r\n                        const newData = response.data.Test.filter(x => x.nexternalordersamplecode === item.nexternalordersamplecode)\r\n                        Map1.set(item.nexternalordersamplecode, Object.values(newData))\r\n                    })\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isDynamicViewSlideOut: true,\r\n                            dynamicExternalSample: response.data.Sample,\r\n                            dynamicExternalTestChild: Map1,\r\n                            dynamicGridSelectedId: response.data.Sample.length > 0 ? Object.keys(response.data.Sample[0].nexternalordersamplecode) : null,\r\n                            loading: false,\r\n                            selectedDynamicViewControl: selectedControl\r\n                            // dynamicExternalSubSample:[],\r\n                            // dynamicExternalTest:[]\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getEditMaster(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let masterIndex = inputParam.masterIndex\r\n        const componentName = inputParam.selectedControl[masterIndex].table.item.component;\r\n        const valueMember = inputParam.selectedControl[masterIndex].valuemember;\r\n\r\n        if (componentName === 'Type1Component' || componentName === 'Type2Component') {\r\n            rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", { userinfo: inputParam.userinfo, [valueMember]: inputParam.masterEditObject[masterIndex]['value'] })\r\n                .then(response => {\r\n                    if (response.status === 202) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.success(response.data);\r\n                    }\r\n                    else if (response.status === 208) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.warn(response.data);\r\n                    } else {\r\n                        let masterIndex = inputParam.masterIndex\r\n                        const data = response.data;\r\n                        let selectedMaster = inputParam.selectedMaster || []\r\n\r\n                        inputParam.masterextractedColumnList[masterIndex].map(item => {\r\n                            let fieldName = item.dataField;\r\n                            if (item.controlType === \"checkbox\") {\r\n                                selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\r\n                            }\r\n                            else {\r\n                                selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\r\n                            }\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterIndex,\r\n                                selectedMaster,\r\n                                masterdataList: inputParam.masterdataList,\r\n                                addMaster: true,\r\n                                loading: false,\r\n                                selectedControl: inputParam.selectedControl,\r\n                                masterfieldList: inputParam.masterfieldList,\r\n                                masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                                masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                                masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                                screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                                mastercomboComponents: inputParam.mastercomboComponents,\r\n                                masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                                masterDesign: inputParam.masterDesign, masterEditObject: inputParam.masterEditObject, masterOperation: inputParam.masterOperation\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        } else if (componentName === 'Type3Component') {\r\n            let urlArray = [];\r\n            urlArray.push(rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", { userinfo: inputParam.userinfo, [valueMember]: inputParam.masterEditObject[masterIndex]['value'] }))\r\n\r\n\r\n            inputParam.masterComboColumnFiled[masterIndex].map(item => {\r\n                // if (item.needService === undefined) {\r\n                let input = {}\r\n                if (item.needService === false) {\r\n                    input = { [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]] }\r\n                }\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo, ...input }));\r\n                item[\"fetchIndex\"] = urlArray.length - 1;\r\n                // }\r\n            }\r\n            )\r\n            if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let ComboFieldData = [];\r\n                    let masterdataList = inputParam.masterdataList;\r\n                    const data = response[0].data;\r\n                    let selectedMaster = inputParam.selectedMaster || []\r\n\r\n\r\n                    inputParam.masterextractedColumnList[masterIndex].map(item => {\r\n                        let fieldName = item.dataField;\r\n\r\n                        // if (item.controlType === \"selectbox\") {\r\n                        //     // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        //     selectedMaster[masterIndex][fieldName]= {lable:data[item.dataField],value:data[item.tableDataField]};\r\n\r\n                        // }\r\n                        if (item.controlType === \"datepicker\") {\r\n                            selectedMaster[masterIndex][fieldName] = rearrangeDateFormat(inputParam.userinfo, data[item.dateField] ? data[item.dateField] : \"\");\r\n                        }\r\n                        else if (item.controlType === \"checkbox\") {\r\n                            selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\r\n                        }\r\n                        else {\r\n                            selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\r\n                        }\r\n\r\n\r\n                    })\r\n\r\n\r\n                    inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\r\n                        //  if (item.needService === undefined) {\r\n                        let fieldName = item.dataField;\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField,\r\n                            item.dataField, undefined, undefined, undefined);\r\n                        masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n                        if (masterdataList[masterIndex][item.dataField].length > 0) {\r\n                            selectedMaster[masterIndex][fieldName] = { ...masterdataList[masterIndex][item.dataField].filter(x => x.item[item.foreignDataField] === data[item.tableDataField])[0] }\r\n                        }\r\n\r\n\r\n\r\n\r\n                        // } else {\r\n                        //     if (item.child !== undefined) {\r\n                        //         masterdataList[masterIndex][item.dataField] = []\r\n                        //     } else if (item.useService !== undefined) {\r\n                        //         masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\r\n                        //     }\r\n\r\n                        // }\r\n                    });\r\n                    let currentTime = ''\r\n\r\n                    if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                        selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                        selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                        selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                        selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterIndex,\r\n                            selectedMaster,\r\n                            masterdataList,\r\n                            addMaster: true,\r\n                            loading: false,\r\n                            selectedControl: inputParam.selectedControl,\r\n                            masterfieldList: inputParam.masterfieldList,\r\n                            masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                            masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                            masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterDesign: inputParam.masterDesign, masterOperation: inputParam.masterOperation, masterEditObject: inputParam.masterEditObject\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch(initRequest(false));\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else if (componentName === 'Dynamic') {\r\n\r\n            dispatch(getDynamicMasterTempalte(inputParam))\r\n\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function getEditMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let masterIndex = inputParam.masterIndex\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const selectedMaster1 = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\r\n            ndynamicmastercode: inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode,\r\n            parentcolumnlist: inputParam.masterdesignData[masterIndex],\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        urlArray = [timeZoneService, selectedMaster1]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let data = { ...response[1].data[\"EditData\"] };\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode };\r\n                const selectedRecord1 = { ...data }\r\n                const languagetypeCode = undefined;\r\n                const comboData = response[1].data;\r\n                delete comboData['EditData']\r\n                let comboValues = {}\r\n                if (inputParam.masterdesignData[masterIndex].length > 0) {\r\n                    inputParam.masterdesignData[masterIndex].map(x => {\r\n                        if (x.inputtype === 'combo') {\r\n                            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                            {\r\n                                if (comboData[x.label].length > 0) {\r\n                                    if (comboData[x.label][0].label === undefined) {\r\n                                        const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        comboData[x.label] = optionList.get(\"OptionList\");\r\n                                    } else {\r\n                                        comboData[x.label] = comboData[x.label]\r\n                                        const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                    }\r\n                                } else {\r\n                                    comboData[x.label] = []\r\n                                }\r\n\r\n                                comboValues = childComboLoadForEdit(x, comboData, selectedRecord1,\r\n                                    inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex])\r\n                            } else {\r\n                                comboValues = {\r\n                                    \"comboData\": comboData,\r\n                                }\r\n                            }\r\n                        } else {\r\n                            comboValues = {\r\n                                comboData: comboData,\r\n                                ...comboValues\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    comboValues = {\r\n                        \"comboData\": comboData,\r\n                    }\r\n                }\r\n\r\n                if (inputParam.masterwithoutCombocomponent[masterIndex].length > 0) {\r\n                    inputParam.masterwithoutCombocomponent[masterIndex].map(item => {\r\n                        if (item.inputtype === \"date\") {\r\n                            if (selectedRecord1[item.label]) {\r\n                                selectedRecord1 = { ...selectedRecord1, [item.label]: rearrangeDateFormatforUI(inputParam.userinfo, selectedRecord1[item.label]) }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                const masterdataList = inputParam.masterdataList || []\r\n                masterdataList[masterIndex] = comboValues.comboData\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], ...selectedRecord1 }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...inputParam,\r\n                        mastertimeZoneList: timeZoneList,\r\n                        masterdefaultTimeZone: defaultTimeZone,\r\n                        loading: false,\r\n                        addMaster: true,\r\n                        masterdataList,\r\n                        selectedMaster,\r\n                        mastercomboComponents: inputParam.mastercomboComponents,\r\n                        masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                        masterdesignData: inputParam.masterdesignData,\r\n                        masterIndex,\r\n                        screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                        masterOperation: inputParam.masterOperation,\r\n                        masterEditObject: inputParam.masterEditObject,\r\n\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}