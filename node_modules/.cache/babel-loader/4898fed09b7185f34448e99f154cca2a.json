{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSubSampleBySample(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getSubSampleBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n      let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\n      releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseSubSample,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseSubSample,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\n  let npreregno = \"\";\n  selectedSampleData.map((item, i) => {\n    let s = \"\";\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSampleData.length) {\n      if (i < selectedSampleData.length - 1) {\n        s = \",\";\n      }\n\n      npreregno = npreregno + s;\n    } else {\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSample\", {\n      npreregno: npreregno,\n      nregtypecode: selectedSampleData[0].nregtypecode,\n      nregsubtypecode: selectedSampleData[0].nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  selectedSubSampleData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSubSampleData.length) {\n      if (i < selectedSubSampleData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSubSample\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBySample(methodParam, kjkj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getTestBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.viewRow.npreregno,\n      ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let releaseTest = methodParam.masterData.releaseTest || new Map();\n      releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseTest,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseTest,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  let ntransactiontestcode = \"\";\n  selectedTestData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n    ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\n\n    if (i < selectedTestData.length) {\n      if (i < selectedTestData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n      ntransactiontestcode = ntransactiontestcode + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n      ntransactiontestcode = item.ntransactiontestcode;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedTest\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      ntransactiontestcode: ntransactiontestcode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \n//    let ntransactionsamplecode = \"\"\n//    let npreregno = \"\"\n//     let ntransactiontestcode = \"\" \n//     let bFlag = \"\" \n//     if (TestArray !== undefined) {\n//         TestArray.map(test => {\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\n//             npreregno += test.npreregno + ',';\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\n//         })\n//         TestArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"3\"\n//         }\n//     }   \n//     if (SubSampleArray !== undefined) {\n//         SubSampleArray.map(SubSample => {\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\n//             npreregno += SubSample.npreregno + ',';\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\n//             SubSampleArray = {\n//                 ntransactionsamplecode: ntransactionsamplecode,\n//                 npreregno: npreregno,\n//                 ntransactiontestcode: ntransactiontestcode,\n//                 bFlag:\"2\"\n//             }\n//         })\n//     }\n//     if (SampleArray !== undefined) {\n//         SampleArray.map(Sample => {\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\n//             npreregno += Sample.npreregno + ',';\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\n//         })\n//         SampleArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"1\"\n//         }\n//     }\n//     let allNpreregno = []\n//     if (SampleArray1 !== undefined) {\n//         SampleArray1.map(temp => {\n//             allNpreregno += temp + ','\n//         })\n//     }\n//     let allNtransactionsamplecode = []\n//     if (SubSampleArray1 !== undefined) {\n//         SubSampleArray1.map(temp => {\n//             allNtransactionsamplecode += temp + ','\n//         })\n//     }\n//     let allNtransactiontestcode = []\n//     if (TestArray1 !== undefined) {\n//         TestArray1.map(temp => {\n//             allNtransactiontestcode += temp + ','\n//         })\n//     }\n//     return function (dispatch) {  \n//     dispatch(initRequest(true));\n//     return rsapi.post(\"coarelease/updateStatus\", \n//         {\n//             SampleArray:SampleArray,\n//             SubSampleArray:SubSampleArray,\n//             TestArray: TestArray,\n//             userinfo: userInfo,\n//             allNtransactionsamplecode: allNtransactionsamplecode,\n//             allNtransactiontestcode: allNtransactiontestcode,\n//             allNpreregno:allNpreregno\n//         })\n//     .then(response=>{ \n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \n//        let releaseTest = Data1.releaseTest || new Map();           \n//        releaseSubSample = Data1.releaseSubSample || new Map();           \n//              releaseTest = Data1.releaseTest || new Map();\n// if(response.data.body[\"cFlag\"]===\"3\"){\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n//        }\n//       //  else {\n//         if(response.data.body[\"cFlag\"]===\"2\"){\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n//         }\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\n//             sortData(masterData);\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\n//                 data:releaseSubSample,releaseTest,\n//                       //  dataState:dataState,\n//                         loading:false\n//                     }});\n//         })\n//         .catch(error=>{\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })        \n//     }\n// }\n\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"coarelease/updateStatus\", inputData).then(response => {\n        if (response.data.statusCodeValue !== 200) {\n          toast.warn(intl.formatMessage({\n            id: response.data.body\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        } else {\n          let selected = [];\n          let expanded = [];\n          let testdata = [];\n          let subsampleData = [];\n          let subsampleexpanded = [];\n          let subsampleselected = [];\n          let subsampleDataRes = []; // let y = []\n          // let a = []\n          // let SubSample = Object.values(Data1.ReleaseSubSample).forEach(item1 => {\n          //     item1.map(item2 => {\n          //         subsampleData.push(item2)\n          //         if (item2.expanded === true) {\n          //             subsampleexpanded.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"expanded\": item2.expanded })\n          //         }\n          //         if (item2.selected === true) {\n          //             subsampleselected.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"selected\": item2.selected })\n          //         }\n          //     })\n          // });\n          // let SubSampleRes = Object.values(response.data.body.ReleaseSubSample).forEach(item1 => {\n          //     item1.map(item2 => {\n          //         subsampleDataRes.push(item2)\n          //         subsampleexpanded.map(item1 => {\n          //             if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\n          //                 item2[\"expanded\"] = true\n          //             }\n          //         })\n          //         subsampleselected.map(item1 => {\n          //             if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\n          //                 item2[\"selected\"] = true\n          //             }\n          //         })\n          //     })\n          // });\n\n          let testDataRes = [];\n          let testDataPrevious = []; // let testDataSelected = []\n          // let testDataExpanded = []\n          // testDataSelected = Object.values(Data1.ReleaseTest).forEach(item1 => {\n          //     item1.map(item2 => {\n          //         testDataPrevious.push(item2)\n          //         if (item2.selected === true) {\n          //             testdata.push({ \"ntransactiontestcode\": item2.ntransactiontestcode })\n          //         }\n          //     })\n          // });\n          // testDataExpanded = Object.values(response.data.body.ReleaseTest||{}).forEach(item1 => {\n          //     item1.map(item2 => {\n          //         testDataRes.push(item2)\n          //         testdata.map(x => {\n          //             if (item2.ntransactiontestcode === x.ntransactiontestcode) {\n          //                 item2[\"selected\"] = true\n          //             }\n          //         })\n          //     })\n          // });\n\n          let ReleaseTest = replaceUpdatedObject(testDataRes, testDataPrevious, 'ntransactiontestcode');\n          let ReleaseTest1 = groupBy(ReleaseTest, 'ntransactionsamplecode');\n          let ReleaseSubSample = replaceUpdatedObject(subsampleDataRes, subsampleData, 'ntransactionsamplecode');\n          let ReleaseSubSample1 = groupBy(ReleaseSubSample, 'npreregno');\n\n          function groupBy(objectArray, property) {\n            return objectArray.reduce((acc, obj) => {\n              const key = obj[property];\n\n              if (!acc[key]) {\n                acc[key] = [];\n              }\n\n              acc[key].push(obj);\n              return acc;\n            }, {});\n          } // Data1.ReleaseSample.map(item => {\n          //     delete item[\"expanded\"]\n          // });\n\n\n          Data1.ReleaseSample.map(item2 => {\n            if (item2.expanded === true) {\n              expanded.push({\n                \"npreregno\": item2.npreregno,\n                \"expanded\": item2.expanded\n              });\n            }\n\n            if (item2.selected === true) {\n              selected.push({\n                \"npreregno\": item2.npreregno,\n                \"selected\": item2.selected\n              });\n            }\n          });\n          response.data.body.ReleaseSample && response.data.body.ReleaseSample.map(item2 => {\n            expanded.map(item1 => {\n              if (item1.npreregno === item2.npreregno) {\n                item2[\"expanded\"] = true;\n              }\n            });\n            selected.map(item1 => {\n              if (item1.npreregno === item2.npreregno) {\n                item2[\"selected\"] = true;\n              }\n            });\n          });\n          let masterData = { ...Data1,\n            ...response.data.body,\n            ReleaseTest: ReleaseTest1,\n            ReleaseSubSample: ReleaseSubSample1,\n            ReleaseSample: replaceUpdatedObject(response.data.body.ReleaseSample, Data1.ReleaseSample, 'npreregno')\n          }; // sortData(masterData);\n          //  dispatch(generateReport(inputData,masterData))\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              checkedflag: false,\n              change: inputData.change,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\n      }));\n    }\n  };\n}\nexport function getReleaseRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"coarelease/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleaseApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          checkedflag: false,\n          npreregno: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCOAReportType(releaseParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getCOAReportType\", {\n      userinfo: releaseParam.userInfo\n    }).then(response => {\n      let reportType = [];\n      const reportTypeMap = constructOptionList(response.data.ReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, false);\n      const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let selectedRecord = {\n        \"ncoareporttypecode\": {\n          \"value\": response.data.ReportType[0].ncoareporttypecode,\n          \"label\": response.data.ReportType[0].scoareporttypename\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined //,modalShow: true\n          ,\n          ReportTypeList,\n          modalTitle: \"IDS_RELEASEANDREPORTGENERATION\",\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReport(inputParam, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.npreregno,\n      //   nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode,\n      ntransactiontestcode: inputParam.ntransactiontestcode,\n      napproveconfversioncode: inputParam.napprovalversioncode,\n      action: inputParam.action\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData: Data,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/COAReleaseAction.js"],"names":["toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","rsapi","initRequest","DEFAULT_RETURN","getSubSampleBySample","methodParam","dispatch","post","nsitecode","npreregno","primaryKeyValue","userinfo","userInfo","then","response","releaseSubSample","masterData","Map","set","parseInt","Object","keys","data","values","type","payload","dataState","loading","catch","error","status","message","warn","getReleaseSelectedSamples","controlId","selectedSampleData","flag","map","item","i","s","length","nregtypecode","nregsubtypecode","getReleaseSelectedSubSamples","selectedSubSampleData","ntransactionsamplecode","getTestBySample","kjkj","viewRow","releaseTest","getReleaseSelectedTest","selectedTestData","ntransactiontestcode","getReleaseSelectedSampleSubSampleTest","Data1","inputData","undefined","statusCodeValue","formatMessage","id","body","selected","expanded","testdata","subsampleData","subsampleexpanded","subsampleselected","subsampleDataRes","testDataRes","testDataPrevious","ReleaseTest","ReleaseTest1","groupBy","ReleaseSubSample","ReleaseSubSample1","objectArray","property","reduce","acc","obj","key","push","ReleaseSample","item2","item1","checkedflag","change","getReleaseRegistrationType","responseData","SampleTypeValue","getReleaseRegistrationSubType","RegTypeValue","getReleaseFilterStatus","RegSubTypeValue","getReleaseFilterBasedTest","napprovalversioncode","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","getReleaseApprovalVersion","inputParam","getReleaseSample","searchSampleRef","current","value","searchSubSampleRef","searchTestRef","showFilter","skip","take","testskip","testtake","resultDataState","sort","filter","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","getCOAReportType","releaseParam","reportType","reportTypeMap","ReportType","ReportTypeList","get","selectedRecord","ncoareporttypecode","scoareporttypename","operation","modalName","modalTitle","generateReport","Data","nprimarykey","SAMPLEWISE","nreporttypecode","COAREPORT","sprimarykeyname","ncontrolcode","ncontrolCode","napproveconfversioncode","action","document","getElementById","setAttribute","filepath","click","modalShow","loadEsign"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,QAApD,QAAoE,4BAApE;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,2BAA1C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,SAASC,oBAAT,CAA8BC,WAA9B,EAA2C;AAC9C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,iCAAX,EACH;AACIC,MAAAA,SAAS,EAAEH,WAAW,CAACG,SAD3B;AACsCC,MAAAA,SAAS,EAAEJ,WAAW,CAACK,eAD7D;AAEIC,MAAAA,QAAQ,EAAEN,WAAW,CAACO;AAF1B,KADG,EAKFC,IALE,CAKGC,QAAQ,IAAI;AACd;AACA,UAAIC,gBAAgB,GAAGV,WAAW,CAACW,UAAZ,CAAuBD,gBAAvB,IAA2C,IAAIE,GAAJ,EAAlE;AAEAF,MAAAA,gBAAgB,CAACG,GAAjB,CAAqBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAc,kBAAd,CAAZ,EAA+C,CAA/C,CAAD,CAA7B,EAAkFF,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAc,kBAAd,CAAd,EAAiD,CAAjD,CAAlF;AACA,UAAIN,UAAU,GAAG,EAAE,GAAGX,WAAW,CAACW,UAAjB;AAA6BD,QAAAA,gBAA7B;AAA+C,WAAGD,QAAQ,CAACQ;AAA3D,OAAjB,CALc,CAOd;;AACAhB,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BM,UAAAA,IAAI,EAAEjB,WAAW,CAACiB,IAFS;AAEHP,UAAAA,gBAFG;AAG3BW,UAAAA,SAAS,EAAErB,WAAW,CAACqB,SAHI;AAI3BC,UAAAA,OAAO,EAAE;AAJkB;AAD1B,OAAD,CAAR;AAQH,KArBE,EAsBFC,KAtBE,CAsBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA9BE,CAAP;AA+BH,GAjCD;AAkCH;AAED,OAAO,SAASW,yBAAT,CAAmCrB,QAAnC,EAA6CsB,SAA7C,EAAwDC,kBAAxD,EAA4Eb,IAA5E,EAAkFc,IAAlF,EAAwF;AAC3F,MAAI3B,SAAS,GAAG,EAAhB;AACA0B,EAAAA,kBAAkB,CAACE,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,QAAIC,CAAC,GAAG,EAAR;AACA/B,IAAAA,SAAS,GAAGA,SAAS,GAAG6B,IAAI,CAAC7B,SAA7B;;AACA,QAAI8B,CAAC,GAAGJ,kBAAkB,CAACM,MAA3B,EAAmC;AAC/B,UAAIF,CAAC,GAAGJ,kBAAkB,CAACM,MAAnB,GAA4B,CAApC,EAAuC;AACnCD,QAAAA,CAAC,GAAG,GAAJ;AACH;;AACD/B,MAAAA,SAAS,GAAGA,SAAS,GAAG+B,CAAxB;AACH,KALD,MAMK;AACD/B,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AACH;AACJ,GAZD;AAaA,SAAO,UAAUH,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,iCAAX,EACH;AACIE,MAAAA,SAAS,EAAEA,SADf;AAEIiC,MAAAA,YAAY,EAAEP,kBAAkB,CAAC,CAAD,CAAlB,CAAsBO,YAFxC;AAGIC,MAAAA,eAAe,EAAER,kBAAkB,CAAC,CAAD,CAAlB,CAAsBQ,eAH3C;AAIIhC,MAAAA,QAAQ,EAAEC;AAJd,KADG,EAOFC,IAPE,CAOGC,QAAQ,IAAI;AACd;AACA,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEAxB,MAAAA,QAAQ,CAACkB,UAAD,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BM,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAFY;AAG3BK,UAAAA,OAAO,EAAE;AAHkB;AAD1B,OAAD,CAAR;AAOH,KAnBE,EAoBFC,KApBE,CAoBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA5BE,CAAP;AA6BH,GA/BD;AAgCH;AACD,OAAO,SAASsB,4BAAT,CAAsChC,QAAtC,EAAgDsB,SAAhD,EAA2DW,qBAA3D,EAAkFvB,IAAlF,EAAwFc,IAAxF,EAA8F;AACjG,MAAIU,sBAAsB,GAAG,EAA7B;AACA,MAAIrC,SAAS,GAAG,EAAhB;AAEAoC,EAAAA,qBAAqB,CAACR,GAAtB,CAA0B,CAACC,IAAD,EAAOC,CAAP,KAAa;AACnC,QAAIC,CAAC,GAAG,EAAR;AACAM,IAAAA,sBAAsB,GAAGA,sBAAsB,GAAGR,IAAI,CAACQ,sBAAvD;AACArC,IAAAA,SAAS,GAAGA,SAAS,GAAG6B,IAAI,CAAC7B,SAA7B;;AAEA,QAAI8B,CAAC,GAAGM,qBAAqB,CAACJ,MAA9B,EAAsC;AAClC,UAAIF,CAAC,GAAGM,qBAAqB,CAACJ,MAAtB,GAA+B,CAAvC,EAA0C;AACtCD,QAAAA,CAAC,GAAG,GAAJ;AACH;;AACDM,MAAAA,sBAAsB,GAAGA,sBAAsB,GAAGN,CAAlD;AACA/B,MAAAA,SAAS,GAAGA,SAAS,GAAG+B,CAAxB;AAEH,KAPD,MAQK;AACDM,MAAAA,sBAAsB,GAAGR,IAAI,CAACQ,sBAA9B;AACArC,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AAEH;AACJ,GAlBD;AAmBA,SAAO,UAAUH,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,oCAAX,EACH;AAEIE,MAAAA,SAAS,EAAEA,SAFf;AAGIqC,MAAAA,sBAAsB,EAAEA,sBAH5B;AAKInC,MAAAA,QAAQ,EAAEC;AALd,KADG,EASFC,IATE,CASGC,QAAQ,IAAI;AACd;AACA,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEAxB,MAAAA,QAAQ,CAACkB,UAAD,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BM,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAFY;AAG3BK,UAAAA,OAAO,EAAE;AAHkB;AAD1B,OAAD,CAAR;AAOH,KArBE,EAsBFC,KAtBE,CAsBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA9BE,CAAP;AA+BH,GAjCD;AAkCH;AACD,OAAO,SAASyB,eAAT,CAAyB1C,WAAzB,EAAsC2C,IAAtC,EAA4C;AAE/C,SAAO,UAAU1C,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,4BAAX,EACH;AACIC,MAAAA,SAAS,EAAEH,WAAW,CAACG,SAD3B;AACsCC,MAAAA,SAAS,EAAEJ,WAAW,CAAC4C,OAAZ,CAAoBxC,SADrE;AAEIqC,MAAAA,sBAAsB,EAAEzC,WAAW,CAAC4C,OAAZ,CAAoBH,sBAFhD;AAGInC,MAAAA,QAAQ,EAAEN,WAAW,CAACO;AAH1B,KADG,EAMFC,IANE,CAMGC,QAAQ,IAAI;AACd,UAAIoC,WAAW,GAAG7C,WAAW,CAACW,UAAZ,CAAuBkC,WAAvB,IAAsC,IAAIjC,GAAJ,EAAxD;AACAiC,MAAAA,WAAW,CAAChC,GAAZ,CAAgBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAc,aAAd,CAAZ,EAA0C,CAA1C,CAAD,CAAxB,EAAwEF,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAc,aAAd,CAAd,EAA4C,CAA5C,CAAxE;AACA,UAAIN,UAAU,GAAG,EAAE,GAAGX,WAAW,CAACW,UAAjB;AAA6BkC,QAAAA,WAA7B;AAA0C,WAAGpC,QAAQ,CAACQ;AAAtD,OAAjB,CAHc,CAKd;;AACAhB,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BM,UAAAA,IAAI,EAAEjB,WAAW,CAACiB,IAFS;AAG3B4B,UAAAA,WAH2B;AAI3BxB,UAAAA,SAAS,EAAErB,WAAW,CAACqB,SAJI;AAK3BC,UAAAA,OAAO,EAAE;AALkB;AAD1B,OAAD,CAAR;AASH,KArBE,EAsBFC,KAtBE,CAsBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA9BE,CAAP;AA+BH,GAjCD;AAkCH;AACD,OAAO,SAAS6B,sBAAT,CAAgCvC,QAAhC,EAA0CsB,SAA1C,EAAqDkB,gBAArD,EAAuE9B,IAAvE,EAA6Ec,IAA7E,EAAmF;AACtF,MAAIU,sBAAsB,GAAG,EAA7B;AACA,MAAIrC,SAAS,GAAG,EAAhB;AACA,MAAI4C,oBAAoB,GAAG,EAA3B;AAEAD,EAAAA,gBAAgB,CAACf,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC9B,QAAIC,CAAC,GAAG,EAAR;AACAM,IAAAA,sBAAsB,GAAGA,sBAAsB,GAAGR,IAAI,CAACQ,sBAAvD;AACArC,IAAAA,SAAS,GAAGA,SAAS,GAAG6B,IAAI,CAAC7B,SAA7B;AACA4C,IAAAA,oBAAoB,GAAGA,oBAAoB,GAAGf,IAAI,CAACe,oBAAnD;;AAEA,QAAId,CAAC,GAAGa,gBAAgB,CAACX,MAAzB,EAAiC;AAC7B,UAAIF,CAAC,GAAGa,gBAAgB,CAACX,MAAjB,GAA0B,CAAlC,EAAqC;AACjCD,QAAAA,CAAC,GAAG,GAAJ;AACH;;AACDM,MAAAA,sBAAsB,GAAGA,sBAAsB,GAAGN,CAAlD;AACA/B,MAAAA,SAAS,GAAGA,SAAS,GAAG+B,CAAxB;AACAa,MAAAA,oBAAoB,GAAGA,oBAAoB,GAAGb,CAA9C;AAEH,KARD,MASK;AACDM,MAAAA,sBAAsB,GAAGR,IAAI,CAACQ,sBAA9B;AACArC,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AACA4C,MAAAA,oBAAoB,GAAGf,IAAI,CAACe,oBAA5B;AAEH;AACJ,GArBD;AAsBA,SAAO,UAAU/C,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,+BAAX,EACH;AAEIE,MAAAA,SAAS,EAAEA,SAFf;AAGIqC,MAAAA,sBAAsB,EAAEA,sBAH5B;AAIIO,MAAAA,oBAAoB,EAAEA,oBAJ1B;AAMI1C,MAAAA,QAAQ,EAAEC;AANd,KADG,EAUFC,IAVE,CAUGC,QAAQ,IAAI;AACd;AACA,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEAxB,MAAAA,QAAQ,CAACkB,UAAD,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BM,UAAAA,IAAI,EAAER,QAAQ,CAACQ,IAFY;AAG3BK,UAAAA,OAAO,EAAE;AAHkB;AAD1B,OAAD,CAAR;AAOH,KAtBE,EAuBFC,KAvBE,CAuBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA/BE,CAAP;AAgCH,GAlCD;AAmgC,qCAAT,CAA+C1C,QAA/C,EAAyD2C,KAAzD,EAAgEC,SAAhE,EAA2E;AAG9E,SAAO,UAAUlD,QAAV,EAAoB;AACzB,QAAIkD,SAAS,KAAKC,SAAd,IAA0BD,SAAS,CAAC/C,SAAV,KAAsB,EAApD,EAAwD;AAEtDH,MAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAOD,KAAK,CAACM,IAAN,CAAW,yBAAX,EAEHiD,SAFG,EAIF3C,IAJE,CAIGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACQ,IAAT,CAAcoC,eAAd,KAAkC,GAAtC,EAA2C;AACvChE,UAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAACgE,aAAL,CAAmB;AAC1BC,YAAAA,EAAE,EAAE9C,QAAQ,CAACQ,IAAT,CAAcuC;AADQ,WAAnB,CAAX;AAGAvD,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAErB,cADD;AAELsB,YAAAA,OAAO,EAAE;AACLE,cAAAA,OAAO,EAAE;AADJ;AAFJ,WAAD,CAAR;AAQH,SAZD,MAaK;AACD,cAAImC,QAAQ,GAAG,EAAf;AACA,cAAIC,QAAQ,GAAG,EAAf;AACA,cAAIC,QAAQ,GAAG,EAAf;AACA,cAAIC,aAAa,GAAG,EAApB;AACA,cAAIC,iBAAiB,GAAG,EAAxB;AACA,cAAIC,iBAAiB,GAAG,EAAxB;AACA,cAAIC,gBAAgB,GAAG,EAAvB,CAPC,CAQF;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAIC,WAAW,GAAG,EAAlB;AACA,cAAIC,gBAAgB,GAAG,EAAvB,CAtCC,CAuCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAIC,WAAW,GAAG1E,oBAAoB,CAACwE,WAAD,EAAcC,gBAAd,EAAgC,sBAAhC,CAAtC;AACA,cAAIE,YAAY,GAAGC,OAAO,CAACF,WAAD,EAAc,wBAAd,CAA1B;AACA,cAAIG,gBAAgB,GAAG7E,oBAAoB,CAACuE,gBAAD,EAAmBH,aAAnB,EAAkC,wBAAlC,CAA3C;AACA,cAAIU,iBAAiB,GAAGF,OAAO,CAACC,gBAAD,EAAmB,WAAnB,CAA/B;;AAEA,mBAASD,OAAT,CAAiBG,WAAjB,EAA8BC,QAA9B,EAAwC;AACpC,mBAAOD,WAAW,CAACE,MAAZ,CAAmB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,oBAAMC,GAAG,GAAGD,GAAG,CAACH,QAAD,CAAf;;AACA,kBAAI,CAACE,GAAG,CAACE,GAAD,CAAR,EAAe;AACXF,gBAAAA,GAAG,CAACE,GAAD,CAAH,GAAW,EAAX;AACH;;AACDF,cAAAA,GAAG,CAACE,GAAD,CAAH,CAASC,IAAT,CAAcF,GAAd;AACA,qBAAOD,GAAP;AACH,aAPM,EAOJ,EAPI,CAAP;AAQH,WA1EA,CA2ED;AACA;AACA;;;AACAxB,UAAAA,KAAK,CAAC4B,aAAN,CAAoB9C,GAApB,CAAwB+C,KAAK,IAAI;AAC7B,gBAAIA,KAAK,CAACrB,QAAN,KAAmB,IAAvB,EAA6B;AACzBA,cAAAA,QAAQ,CAACmB,IAAT,CAAc;AAAE,6BAAaE,KAAK,CAAC3E,SAArB;AAAgC,4BAAY2E,KAAK,CAACrB;AAAlD,eAAd;AACH;;AACD,gBAAIqB,KAAK,CAACtB,QAAN,KAAmB,IAAvB,EAA6B;AACzBA,cAAAA,QAAQ,CAACoB,IAAT,CAAc;AAAE,6BAAaE,KAAK,CAAC3E,SAArB;AAAgC,4BAAY2E,KAAK,CAACtB;AAAlD,eAAd;AACH;AACJ,WAPD;AAQAhD,UAAAA,QAAQ,CAACQ,IAAT,CAAcuC,IAAd,CAAmBsB,aAAnB,IAAkCrE,QAAQ,CAACQ,IAAT,CAAcuC,IAAd,CAAmBsB,aAAnB,CAAiC9C,GAAjC,CAAqC+C,KAAK,IAAI;AAC5ErB,YAAAA,QAAQ,CAAC1B,GAAT,CAAagD,KAAK,IAAI;AAClB,kBAAIA,KAAK,CAAC5E,SAAN,KAAoB2E,KAAK,CAAC3E,SAA9B,EAAyC;AACrC2E,gBAAAA,KAAK,CAAC,UAAD,CAAL,GAAoB,IAApB;AACH;AACJ,aAJD;AAKAtB,YAAAA,QAAQ,CAACzB,GAAT,CAAagD,KAAK,IAAI;AAClB,kBAAIA,KAAK,CAAC5E,SAAN,KAAoB2E,KAAK,CAAC3E,SAA9B,EAAyC;AACrC2E,gBAAAA,KAAK,CAAC,UAAD,CAAL,GAAoB,IAApB;AACH;AACJ,aAJD;AAMH,WAZiC,CAAlC;AAcA,cAAIpE,UAAU,GAAG,EAEb,GAAGuC,KAFU;AAEH,eAAGzC,QAAQ,CAACQ,IAAT,CAAcuC,IAFd;AAGbU,YAAAA,WAAW,EAAEC,YAHA;AAIbE,YAAAA,gBAAgB,EAAEC,iBAJL;AAMbQ,YAAAA,aAAa,EAAEtF,oBAAoB,CAACiB,QAAQ,CAACQ,IAAT,CAAcuC,IAAd,CAAmBsB,aAApB,EAAmC5B,KAAK,CAAC4B,aAAzC,EAAwD,WAAxD;AANtB,WAAjB,CApGC,CA+GD;AACF;;AAEE7E,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAErB,cADD;AACiBsB,YAAAA,OAAO,EAAE;AAC3BT,cAAAA,UAD2B;AAE3BsE,cAAAA,WAAW,EAAC,KAFe;AAG3BC,cAAAA,MAAM,EAAE/B,SAAS,CAAC+B,MAHS;AAI3B5D,cAAAA,OAAO,EAAE;AAJkB;AAD1B,WAAD,CAAR;AAQH;AACJ,OA7IE,EA+IFC,KA/IE,CA+IIC,KAAK,IAAI;AACZvB,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,IAAI,EAAErB,cAAR;AAAwBsB,UAAAA,OAAO,EAAE;AAAEE,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AAEH,SAHD,MAIK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,OAxJE,CAAP;AA2JC,KA9JH,MA+JO;AACD5B,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAACgE,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GArKD;AAsKH;AACD,OAAO,SAAS4B,0BAAT,CAAoChC,SAApC,EAA+C;AAClD,SAAO,UAAUlD,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAW,gCAAX,EAA6CiD,SAA7C,EACK3C,IADL,CACUC,QAAQ,IAAI;AACd,UAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,OAAnB;AACAmE,MAAAA,YAAY,GAAG3F,QAAQ,CAAC2F,YAAD,CAAvB;AACAnF,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAAU,EAAE,EACR,GAAGwC,SAAS,CAACxC,UADL;AAER,eAAGyE,YAFK;AAGRC,YAAAA,eAAe,EAAElC,SAAS,CAACkC;AAHnB,WADe;AAM3B/D,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AACD,OAAO,SAASqE,6BAAT,CAAuCnC,SAAvC,EAAkD;AACrD,SAAO,UAAUlD,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAW,mCAAX,EAAgDiD,SAAhD,EACK3C,IADL,CACUC,QAAQ,IAAI;AACd,UAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,OAAnB;AACAmE,MAAAA,YAAY,GAAG3F,QAAQ,CAAC2F,YAAD,CAAvB;AACAnF,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAAU,EAAE,EACR,GAAGwC,SAAS,CAACxC,UADL;AAER,eAAGyE,YAFK;AAGRG,YAAAA,YAAY,EAAEpC,SAAS,CAACoC;AAHhB,WADe;AAM3BjE,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AACD,OAAO,SAASuE,sBAAT,CAAgCrC,SAAhC,EAA2C;AAC9C,SAAO,UAAUlD,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAW,4BAAX,EAAyCiD,SAAzC,EACK3C,IADL,CACUC,QAAQ,IAAI;AACd,UAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,OAAnB;AACAmE,MAAAA,YAAY,GAAG3F,QAAQ,CAAC2F,YAAD,CAAvB;AACAnF,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAAU,EAAE,EACR,GAAGwC,SAAS,CAACxC,UADL;AAER,eAAGyE,YAFK;AAGRK,YAAAA,eAAe,EAAEtC,SAAS,CAACsC;AAHnB,WADe;AAM3BnE,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AAED,OAAO,SAASyE,yBAAT,CAAmCvC,SAAnC,EAA8C;AACjD,SAAO,UAAUlD,QAAV,EAAoB;AACvB,QAAIkD,SAAS,CAACwC,oBAAd,EAAoC;AAChC1F,MAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAACM,IAAN,CAAW,+BAAX,EAA4CiD,SAA5C,EACK3C,IADL,CACUC,QAAQ,IAAI;AAGd,YAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,SAAnB;AACAmE,QAAAA,YAAY,GAAG3F,QAAQ,CAAC2F,YAAD,CAAvB;AACAnF,QAAAA,QAAQ,CAAC;AACLkB,UAAAA,IAAI,EAAErB,cADD;AACiBsB,UAAAA,OAAO,EAAE;AAC3BT,YAAAA,UAAU,EAAE,EACR,GAAGwC,SAAS,CAACxC,UADL;AAER,iBAAGyE,YAFK;AAGRK,cAAAA,eAAe,EAAEtC,SAAS,CAACsC,eAHnB;AAIRG,cAAAA,0BAA0B,EAAEzC,SAAS,CAACyC,0BAJ9B;AAKRC,cAAAA,0BAA0B,EAAE1C,SAAS,CAAC0C;AAL9B,aADe;AAQ3BvE,YAAAA,OAAO,EAAE;AARkB;AAD1B,SAAD,CAAR;;AAYA,YAAIb,QAAQ,CAACQ,IAAT,CAAc6E,GAAlB,EAAuB;AACnBzG,UAAAA,KAAK,CAACsC,IAAN,CAAWlB,QAAQ,CAACQ,IAAT,CAAc6E,GAAzB;AACH;AAEJ,OAtBL,EAuBKvE,KAvBL,CAuBWC,KAAK,IAAI;AACZvB,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,IAAI,EAAErB,cAAR;AAAwBsB,UAAAA,OAAO,EAAE;AAAEE,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,OA/BL;AAgCH,KAlCD,MAmCK;AACD5B,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAACgE,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GAzCD;AA2CH;AAED,OAAO,SAASwC,yBAAT,CAAmCC,UAAnC,EAA+C;AAClD,SAAO,UAAU/F,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAW,+BAAX,EAA4C8F,UAAU,CAAC7C,SAAvD,EACK3C,IADL,CACUC,QAAQ,IAAI;AACd,UAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,OAAnB;AACAmE,MAAAA,YAAY,GAAG3F,QAAQ,CAAC2F,YAAD,CAAvB;AACAnF,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAAU,EAAE,EACR,GAAGqF,UAAU,CAACrF,UADN;AAER,eAAGyE,YAFK,CAGR;AACA;;AAJQ,WADe;AAO3B9D,UAAAA,OAAO,EAAE;AAPkB;AAD1B,OAAD,CAAR;AAWH,KAfL,EAgBKC,KAhBL,CAgBWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA3BD;AA4BH;AACD,OAAO,SAASgF,gBAAT,CAA0BD,UAA1B,EAAsC;AACzC,SAAO,UAAU/F,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACM,IAAN,CAAW,6BAAX,EAA0C8F,UAAU,CAAC7C,SAArD,EACK3C,IADL,CACUC,QAAQ,IAAI;AACd,UAAI2E,YAAY,GAAG,EAAE,GAAG3E,QAAQ,CAACQ;AAAd,OAAnB,CADc,CAEd;;AACA,UAAIN,UAAU,GAAG,EACb,GAAGqF,UAAU,CAACrF,UADD;AAEb,WAAGyE;AAFU,OAAjB;;AAIA,UAAIY,UAAU,CAACE,eAAX,KAA+B9C,SAA/B,IAA4C4C,UAAU,CAACE,eAAX,CAA2BC,OAA3B,KAAuC,IAAvF,EAA6F;AACzFH,QAAAA,UAAU,CAACE,eAAX,CAA2BC,OAA3B,CAAmCC,KAAnC,GAA2C,EAA3C;AACAzF,QAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+ByC,SAA/B;AACH;;AACD,UAAI4C,UAAU,CAACK,kBAAX,KAAkCjD,SAAlC,IAA+C4C,UAAU,CAACK,kBAAX,CAA8BF,OAA9B,KAA0C,IAA7F,EAAmG;AAC/FH,QAAAA,UAAU,CAACK,kBAAX,CAA8BF,OAA9B,CAAsCC,KAAtC,GAA8C,EAA9C;AACAzF,QAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkCyC,SAAlC;AACH;;AACD,UAAI4C,UAAU,CAACM,aAAX,KAA6BlD,SAA7B,IAA0C4C,UAAU,CAACM,aAAX,CAAyBH,OAAzB,KAAqC,IAAnF,EAAyF;AACrFH,QAAAA,UAAU,CAACM,aAAX,CAAyBH,OAAzB,CAAiCC,KAAjC,GAAyC,EAAzC,CADqF,CAErF;;AACAzF,QAAAA,UAAU,CAAC,eAAD,CAAV,GAA8ByC,SAA9B;AAEH;;AACD3D,MAAAA,QAAQ,CAACkB,UAAD,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AACiBsB,QAAAA,OAAO,EAAE;AAC3BT,UAAAA,UAD2B;AAE3BW,UAAAA,OAAO,EAAE,KAFkB;AAG3BiF,UAAAA,UAAU,EAAE,KAHe;AAI3BC,UAAAA,IAAI,EAAE,CAJqB;AAK3BC,UAAAA,IAAI,EAAET,UAAU,CAACS,IALU;AAM3BC,UAAAA,QAAQ,EAAE,CANiB;AAO3BC,UAAAA,QAAQ,EAAEX,UAAU,CAACW,QAPM;AAQ3BC,UAAAA,eAAe,EAAE,EAAE,GAAGZ,UAAU,CAACY,eAAhB;AAAiCC,YAAAA,IAAI,EAAEzD,SAAvC;AAAkD0D,YAAAA,MAAM,EAAE1D;AAA1D,WARU;AAS3B2D,UAAAA,mBAAmB,EAAE,EAAE,GAAGf,UAAU,CAACe,mBAAhB;AAAqCF,YAAAA,IAAI,EAAEzD,SAA3C;AAAsD0D,YAAAA,MAAM,EAAE1D;AAA9D,WATM;AAU3B4D,UAAAA,iBAAiB,EAAE,EAAE,GAAGhB,UAAU,CAACgB,iBAAhB;AAAmCH,YAAAA,IAAI,EAAEzD,SAAzC;AAAoD0D,YAAAA,MAAM,EAAE1D;AAA5D,WAVQ;AAW3B6D,UAAAA,aAAa,EAAE,EAAE,GAAGjB,UAAU,CAACiB,aAAhB;AAA+BJ,YAAAA,IAAI,EAAEzD,SAArC;AAAgD0D,YAAAA,MAAM,EAAE1D;AAAxD,WAXY;AAY3B8D,UAAAA,iBAAiB,EAAE,EAAE,GAAGlB,UAAU,CAACkB,iBAAhB;AAAmCL,YAAAA,IAAI,EAAEzD,SAAzC;AAAoD0D,YAAAA,MAAM,EAAE1D;AAA5D,WAZQ;AAa3B+D,UAAAA,qBAAqB,EAAE,EAAE,GAAGnB,UAAU,CAACmB,qBAAhB;AAAuCN,YAAAA,IAAI,EAAEzD,SAA7C;AAAwD0D,YAAAA,MAAM,EAAE1D;AAAhE,WAbI;AAc3BgE,UAAAA,oBAAoB,EAAE,EAAE,GAAGpB,UAAU,CAACoB,oBAAhB;AAAsCP,YAAAA,IAAI,EAAEzD,SAA5C;AAAuD0D,YAAAA,MAAM,EAAE1D;AAA/D,WAdK;AAe3BiE,UAAAA,gBAAgB,EAAE,EAAE,GAAGrB,UAAU,CAACqB,gBAAhB;AAAkCR,YAAAA,IAAI,EAAEzD,SAAxC;AAAmD0D,YAAAA,MAAM,EAAE1D;AAA3D,WAfS;AAgB3BkE,UAAAA,2BAA2B,EAAE,EAAE,GAAGtB,UAAU,CAACsB,2BAAhB;AAA6CT,YAAAA,IAAI,EAAEzD,SAAnD;AAA8D0D,YAAAA,MAAM,EAAE1D;AAAtE,WAhBF;AAiB3BmE,UAAAA,sBAAsB,EAAE,EAAE,GAAGvB,UAAU,CAACuB,sBAAhB;AAAwCV,YAAAA,IAAI,EAAEzD,SAA9C;AAAyD0D,YAAAA,MAAM,EAAE1D;AAAjE,WAjBG;AAkB3B6B,UAAAA,WAAW,EAAC,KAlBe;AAmB3B7E,UAAAA,SAAS,EAAC;AAnBiB;AAD1B,OAAD,CAAR;AAuBH,KA9CL,EA+CKmB,KA/CL,CA+CWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAvDL;AAwDH,GA1DD;AA2DH;AACD,OAAO,SAASuG,gBAAT,CAA0BC,YAA1B,EAAwC;AAC3C,SAAO,UAAUxH,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,6BAAX,EAA0C;AAACI,MAAAA,QAAQ,EAAEmH,YAAY,CAAClH;AAAxB,KAA1C,EACFC,IADE,CACGC,QAAQ,IAAI;AACd,UAAIiH,UAAU,GAAG,EAAjB;AAEA,YAAMC,aAAa,GAAGpI,mBAAmB,CAACkB,QAAQ,CAACQ,IAAT,CAAc2G,UAAd,IAA4B,EAA7B,EAAiC,oBAAjC,EACrC,oBADqC,EACfxE,SADe,EACJA,SADI,EACO,KADP,CAAzC;AAGA,YAAMyE,cAAc,GAAGF,aAAa,CAACG,GAAd,CAAkB,YAAlB,CAAvB;AACA,UAAIC,cAAc,GAAG;AAAC,8BAAsB;AACxC,mBAAStH,QAAQ,CAACQ,IAAT,CAAc2G,UAAd,CAAyB,CAAzB,EAA4BI,kBADG;AAEvC,mBAASvH,QAAQ,CAACQ,IAAT,CAAc2G,UAAd,CAAyB,CAAzB,EAA4BK;AAFE;AAAvB,OAArB;AAKAhI,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAErB,cADD;AAEJsB,QAAAA,OAAO,EAAE;AACN8G,UAAAA,SAAS,EAAE,IADL;AACWC,UAAAA,SAAS,EAAE/E,SADtB;AAEN9B,UAAAA,OAAO,EAAE,KAFH;AAEUD,UAAAA,SAAS,EAAE+B,SAFrB,CAE8B;AAF9B;AAGLyE,UAAAA,cAHK;AAILO,UAAAA,UAAU,EAAC,gCAJN;AAKNL,UAAAA;AALM;AAFL,OAAD,CAAR;AAWH,KAxBE,EAyBFxG,KAzBE,CAyBIC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AAEJ,KAlCE,CAAP;AAmCH,GArCD;AAsCH;AACD,OAAO,SAASoH,cAAT,CAAwBrC,UAAxB,EAAmCsC,IAAnC,EAAyC;AAC5C,SAAO,UAAUrI,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMsD,SAAS,GAAG;AACd/C,MAAAA,SAAS,EAAE4F,UAAU,CAAC5F,SADR;AAEjB;AACGE,MAAAA,QAAQ,EAAE0F,UAAU,CAAC1F,QAHP;AAIdiI,MAAAA,WAAW,EAAEvC,UAAU,CAAC5F,SAJV;AAKd4H,MAAAA,kBAAkB,EAAEtI,aAAa,CAAC8I,UALpB;AAMdC,MAAAA,eAAe,EAAE9I,UAAU,CAAC+I,SANd;AAOdC,MAAAA,eAAe,EAAE,WAPH;AAQdC,MAAAA,YAAY,EAAE5C,UAAU,CAAC6C,YARX;AASdxG,MAAAA,YAAY,EAAE2D,UAAU,CAAC3D,YATX;AAUdC,MAAAA,eAAe,EAAE0D,UAAU,CAAC1D,eAVd;AAWdU,MAAAA,oBAAoB,EAACgD,UAAU,CAAChD,oBAXlB;AAYd8F,MAAAA,uBAAuB,EAAE9C,UAAU,CAACL,oBAZtB;AAadoD,MAAAA,MAAM,EAAC/C,UAAU,CAAC+C;AAbJ,KAAlB;AAeAnJ,IAAAA,KAAK,CAACM,IAAN,CAAW,4BAAX,EAAyCiD,SAAzC,EACK3C,IADL,CACUC,QAAQ,IAAI;AAEd,UAAIA,QAAQ,CAACQ,IAAT,CAAc6E,GAAd,KAAsB,SAA1B,EAAqC;AACjCkD,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DzI,QAAQ,CAACQ,IAAT,CAAckI,QAA5E;AACAH,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,OAHD,MAGO;AACH/J,QAAAA,KAAK,CAACsC,IAAN,CAAWlB,QAAQ,CAACQ,IAAT,CAAc6E,GAAzB;AACH;;AAED7F,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE,KAAX;AAAiB4D,UAAAA,MAAM,EAAEc,UAAU,CAACd,MAApC;AAA2CvE,UAAAA,UAAU,EAAC2H,IAAtD;AACtCe,UAAAA,SAAS,EAAE,KAD2B;AACpBtB,UAAAA,cAAc,EAAE,EADI;AACAuB,UAAAA,SAAS,EAAE;AADX;AAAjC,OAAD,CAAR;AAEH,KAZL,EAaK/H,KAbL,CAaWC,KAAK,IAAI;AACZvB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAErB,cAAR;AAAwBsB,QAAAA,OAAO,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KArBL;AAsBH,GAxCD;AAyCH","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSubSampleBySample(methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getSubSampleBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.primaryKeyValue,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n                let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\r\n\r\n                releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseSubSample, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data, releaseSubSample,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\r\n    let npreregno = \"\";\r\n    selectedSampleData.map((item, i) => {\r\n        let s = \"\";\r\n        npreregno = npreregno + item.npreregno;\r\n        if (i < selectedSampleData.length) {\r\n            if (i < selectedSampleData.length - 1) {\r\n                s = \",\";\r\n            }\r\n            npreregno = npreregno + s;\r\n        }\r\n        else {\r\n            npreregno = item.npreregno;\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSample\",\r\n            {\r\n                npreregno: npreregno,\r\n                nregtypecode: selectedSampleData[0].nregtypecode,\r\n                nregsubtypecode: selectedSampleData[0].nregsubtypecode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n\r\n    selectedSubSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n\r\n        if (i < selectedSubSampleData.length) {\r\n            if (i < selectedSubSampleData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSubSample\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestBySample(methodParam, kjkj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getTestBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.viewRow.npreregno,\r\n                ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let releaseTest = methodParam.masterData.releaseTest || new Map();\r\n                releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseTest, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data,\r\n                        releaseTest,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n    let ntransactiontestcode = \"\"\r\n\r\n    selectedTestData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n        ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\r\n\r\n        if (i < selectedTestData.length) {\r\n            if (i < selectedTestData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n            ntransactiontestcode = ntransactiontestcode + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n            ntransactiontestcode = item.ntransactiontestcode;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedTest\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n                ntransactiontestcode: ntransactiontestcode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \r\n//    let ntransactionsamplecode = \"\"\r\n//    let npreregno = \"\"\r\n//     let ntransactiontestcode = \"\" \r\n//     let bFlag = \"\" \r\n//     if (TestArray !== undefined) {\r\n//         TestArray.map(test => {\r\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\r\n//             npreregno += test.npreregno + ',';\r\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\r\n//         })\r\n//         TestArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"3\"\r\n\r\n//         }\r\n//     }   \r\n//     if (SubSampleArray !== undefined) {\r\n//         SubSampleArray.map(SubSample => {\r\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\r\n//             npreregno += SubSample.npreregno + ',';\r\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\r\n//             SubSampleArray = {\r\n//                 ntransactionsamplecode: ntransactionsamplecode,\r\n//                 npreregno: npreregno,\r\n//                 ntransactiontestcode: ntransactiontestcode,\r\n//                 bFlag:\"2\"\r\n\r\n//             }\r\n//         })\r\n//     }\r\n//     if (SampleArray !== undefined) {\r\n\r\n//         SampleArray.map(Sample => {\r\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\r\n//             npreregno += Sample.npreregno + ',';\r\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\r\n\r\n//         })\r\n//         SampleArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"1\"\r\n\r\n//         }\r\n//     }\r\n//     let allNpreregno = []\r\n//     if (SampleArray1 !== undefined) {\r\n\r\n//         SampleArray1.map(temp => {\r\n//             allNpreregno += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactionsamplecode = []\r\n//     if (SubSampleArray1 !== undefined) {\r\n\r\n//         SubSampleArray1.map(temp => {\r\n//             allNtransactionsamplecode += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactiontestcode = []\r\n//     if (TestArray1 !== undefined) {\r\n\r\n//         TestArray1.map(temp => {\r\n//             allNtransactiontestcode += temp + ','\r\n//         })\r\n//     }\r\n\r\n//     return function (dispatch) {  \r\n//     dispatch(initRequest(true));\r\n//     return rsapi.post(\"coarelease/updateStatus\", \r\n//         {\r\n//             SampleArray:SampleArray,\r\n//             SubSampleArray:SubSampleArray,\r\n//             TestArray: TestArray,\r\n//             userinfo: userInfo,\r\n//             allNtransactionsamplecode: allNtransactionsamplecode,\r\n//             allNtransactiontestcode: allNtransactiontestcode,\r\n//             allNpreregno:allNpreregno\r\n//         })\r\n//     .then(response=>{ \r\n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \r\n//        let releaseTest = Data1.releaseTest || new Map();           \r\n//        releaseSubSample = Data1.releaseSubSample || new Map();           \r\n\r\n//              releaseTest = Data1.releaseTest || new Map();\r\n// if(response.data.body[\"cFlag\"]===\"3\"){\r\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n//        }\r\n//       //  else {\r\n//         if(response.data.body[\"cFlag\"]===\"2\"){\r\n\r\n\r\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n\r\n//         }\r\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\r\n\r\n//             sortData(masterData);\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n//                 data:releaseSubSample,releaseTest,\r\n//                       //  dataState:dataState,\r\n//                         loading:false\r\n//                     }});\r\n//         })\r\n//         .catch(error=>{\r\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n//         })        \r\n//     }\r\n// }\r\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                if (response.data.statusCodeValue !== 200) {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response.data.body\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n                else {\r\n                    let selected = []\r\n                    let expanded = []\r\n                    let testdata = []\r\n                    let subsampleData = []\r\n                    let subsampleexpanded = []\r\n                    let subsampleselected = []\r\n                    let subsampleDataRes = []\r\n                   // let y = []\r\n                   // let a = []\r\n                    // let SubSample = Object.values(Data1.ReleaseSubSample).forEach(item1 => {\r\n                    //     item1.map(item2 => {\r\n                    //         subsampleData.push(item2)\r\n                    //         if (item2.expanded === true) {\r\n                    //             subsampleexpanded.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"expanded\": item2.expanded })\r\n                    //         }\r\n                    //         if (item2.selected === true) {\r\n                    //             subsampleselected.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"selected\": item2.selected })\r\n                    //         }\r\n\r\n                    //     })\r\n                    // });\r\n                    // let SubSampleRes = Object.values(response.data.body.ReleaseSubSample).forEach(item1 => {\r\n                    //     item1.map(item2 => {\r\n                    //         subsampleDataRes.push(item2)\r\n                    //         subsampleexpanded.map(item1 => {\r\n                    //             if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\r\n                    //                 item2[\"expanded\"] = true\r\n                    //             }\r\n                    //         })\r\n                    //         subsampleselected.map(item1 => {\r\n                    //             if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\r\n                    //                 item2[\"selected\"] = true\r\n                    //             }\r\n                    //         })\r\n                    //     })\r\n                    // });\r\n                    let testDataRes = []\r\n                    let testDataPrevious = []\r\n                    // let testDataSelected = []\r\n                    // let testDataExpanded = []\r\n                    // testDataSelected = Object.values(Data1.ReleaseTest).forEach(item1 => {\r\n                    //     item1.map(item2 => {\r\n                    //         testDataPrevious.push(item2)\r\n                    //         if (item2.selected === true) {\r\n                    //             testdata.push({ \"ntransactiontestcode\": item2.ntransactiontestcode })\r\n                    //         }\r\n                    //     })\r\n                    // });\r\n                    // testDataExpanded = Object.values(response.data.body.ReleaseTest||{}).forEach(item1 => {\r\n                    //     item1.map(item2 => {\r\n                    //         testDataRes.push(item2)\r\n\r\n                    //         testdata.map(x => {\r\n                    //             if (item2.ntransactiontestcode === x.ntransactiontestcode) {\r\n                    //                 item2[\"selected\"] = true\r\n                    //             }\r\n                    //         })\r\n                    //     })\r\n                    // });\r\n                    let ReleaseTest = replaceUpdatedObject(testDataRes, testDataPrevious, 'ntransactiontestcode');\r\n                    let ReleaseTest1 = groupBy(ReleaseTest, 'ntransactionsamplecode');\r\n                    let ReleaseSubSample = replaceUpdatedObject(subsampleDataRes, subsampleData, 'ntransactionsamplecode');\r\n                    let ReleaseSubSample1 = groupBy(ReleaseSubSample, 'npreregno');\r\n\r\n                    function groupBy(objectArray, property) {\r\n                        return objectArray.reduce((acc, obj) => {\r\n                            const key = obj[property];\r\n                            if (!acc[key]) {\r\n                                acc[key] = [];\r\n                            }\r\n                            acc[key].push(obj);\r\n                            return acc;\r\n                        }, {});\r\n                    }\r\n                    // Data1.ReleaseSample.map(item => {\r\n                    //     delete item[\"expanded\"]\r\n                    // });\r\n                    Data1.ReleaseSample.map(item2 => {\r\n                        if (item2.expanded === true) {\r\n                            expanded.push({ \"npreregno\": item2.npreregno, \"expanded\": item2.expanded })\r\n                        }\r\n                        if (item2.selected === true) {\r\n                            selected.push({ \"npreregno\": item2.npreregno, \"selected\": item2.selected })\r\n                        }\r\n                    })\r\n                    response.data.body.ReleaseSample&&response.data.body.ReleaseSample.map(item2 => {\r\n                        expanded.map(item1 => {\r\n                            if (item1.npreregno === item2.npreregno) {\r\n                                item2[\"expanded\"] = true\r\n                            }\r\n                        })\r\n                        selected.map(item1 => {\r\n                            if (item1.npreregno === item2.npreregno) {\r\n                                item2[\"selected\"] = true\r\n                            }\r\n                        })\r\n\r\n                    })\r\n\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data.body,\r\n                        ReleaseTest: ReleaseTest1,\r\n                        ReleaseSubSample: ReleaseSubSample1,\r\n\r\n                        ReleaseSample: replaceUpdatedObject(response.data.body.ReleaseSample, Data1.ReleaseSample, 'npreregno'),\r\n\r\n\r\n                    };\r\n\r\n                    // sortData(masterData);\r\n                  //  dispatch(generateReport(inputData,masterData))\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            checkedflag:false,\r\n                            change: inputData.change,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getReleaseRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"coarelease/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleaseApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined },\r\n                        checkedflag:false,\r\n                        npreregno:[]\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getCOAReportType(releaseParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getCOAReportType\", {userinfo: releaseParam.userInfo })\r\n            .then(response => {\r\n                let reportType = [];\r\n\r\n                const reportTypeMap = constructOptionList(response.data.ReportType || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let selectedRecord = {\"ncoareporttypecode\": {\r\n                    \"value\": response.data.ReportType[0].ncoareporttypecode,\r\n                     \"label\": response.data.ReportType[0].scoareporttypename\r\n                 }};\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                     payload: {\r\n                        operation: null, modalName: undefined,\r\n                        loading: false, dataState: undefined//,modalShow: true\r\n                        ,ReportTypeList\r\n                        ,modalTitle:\"IDS_RELEASEANDREPORTGENERATION\"\r\n                       ,selectedRecord\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function generateReport(inputParam,Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.npreregno,\r\n         //   nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode,\r\n            ntransactiontestcode:inputParam.ntransactiontestcode,\r\n            napproveconfversioncode: inputParam.napprovalversioncode,\r\n            action:inputParam.action\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n               \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputParam.change,masterData:Data,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}