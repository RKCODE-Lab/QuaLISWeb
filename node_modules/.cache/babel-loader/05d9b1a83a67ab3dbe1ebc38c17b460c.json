{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\BatchCreation.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport reject from \"../../assets/image/reject.svg\";\nimport elnimage from \"../../assets/image/sheet-view.svg\";\nimport { callService, crudMaster, updateStore, getTestInstrumentComboService, getTestInstrumentCategory, getProductBasedInstrument, getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction, createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction, getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation, batchInitiateAction, getBCRegistrationSubType, batchCompleteAction, validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory, getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv, getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction //,batchTAT\n} from '../../actions';\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString, CF_encryptionData } from '../../components/CommonScript';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport Esign from '../audittrail/Esign';\nimport { ProductList } from '../product/product.styled';\nimport CustomPopover from '../../components/customPopover';\nimport BatchCreationFilter from './BatchCreationFilter';\nimport AddBatchCreation from './AddBatchCreation';\nimport AddBatchinitiate from './AddBatchinitiate';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport SampleTab from './SampleTab';\nimport BatchhistoryTab from './BatchhistoryTab';\nimport { process } from '@progress/kendo-data-query';\nimport AddSample from './AddSample';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ViewInfo from './ViewInfo';\nimport { Affix } from 'rsuite';\nimport AddMaterialIqc from './AddMaterialIqc';\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\nimport BatchResultTab from './BatchResultTab';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BatchCreation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.completeMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.initiateMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHINITIATEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.materialIqcMandatory = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"smaterialtypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"smaterialname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"sinventoryid\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    {\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    this.getSamples = selectedbatchmaster => {\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n\n      if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else {\n        this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID);\n      }\n    };\n\n    this.getIqcSamples = SelectedBatchmaster => {\n      if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED || SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDIQC\"\n        }));\n      } else {\n        let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n        let inputData = {};\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData['naddcontrolCode'] = addcontrolcode; // inputData['section']={\n        //         nsectioncode: SelectedBatchmaster.nsectioncode\n        // };\n\n        inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        this.props.getIqcSamples(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\n          fetchUrl: \"batchcreation/getSampleTabDetails\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let jsondata = inputData.selectedRecord;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Sample\",\n          postParam,\n          inputData: {\n            Sample: {\n              \"sarno\": inputData.selectedRecord.sarno,\n              \"ssamplearno\": inputData.selectedRecord.ssamplearno,\n              \"stestname\": inputData.selectedRecord.stestname,\n              \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode\n            },\n            \"userInfo\": this.props.Login.userInfo,\n            nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\n            masterData: { ...this.props.Login.masterData,\n              \"samples\": []\n            },\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.deleteSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.cancelRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.nbatchsampleiqccode,\n          fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"IQCSample\",\n          postParam,\n          inputData: {\n            iqcSample: inputData.selectedRecord,\n            nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\n            masterData: this.props.Login.masterData,\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.cancelIQCSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_BATCHHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchhistoryAction(inputData, true);\n      } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchIqcSampleAction(inputData, true);\n      } else if (screenName == \"IDS_RESULTS\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchViewResultAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            batchactiveKey: screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Samples, event.dataState),\n        sampleState: event.dataState\n      });\n    };\n\n    this.dataStateBatchHistoryChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\n        histortState: event.dataState\n      });\n    };\n\n    this.dataStateBatchIqcChangeChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\n        iqcsampleState: event.dataState\n      });\n    };\n\n    this.dataStateViewChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\n        viewstate: event.dataState\n      });\n    };\n\n    this.getApprovalVersion = data => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      inputData = {\n        needFilterSubmit: \"false\",\n        nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n        fromDate: obj.fromDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n        toDate: obj.toDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n        nregtypecode: data.item.nregtypecode,\n        userInfo: this.props.Login.userInfo,\n        nregsubtypecode: data.item.nregsubtypecode,\n        masterData: this.props.Login.masterData,\n        isneedapprovalfilter: true,\n        defaultRegistrationSubType: data.item,\n        isneedrealFilterStatus: \"false\",\n        realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n        realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n        realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n        realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n      };\n      this.props.getBCApprovalConfigVersion(inputData);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_SAMPLE\", /*#__PURE__*/React.createElement(SampleTab, {\n        sample: this.props.Login.masterData.Samples || [],\n        dataResult: process(this.props.Login.masterData.Samples || [], this.state.sampleState),\n        dataState: this.state.sampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        deleteRecord: this.deleteRecord,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreItem) || [],\n        methodUrl: \"Samples\",\n        getSamples: () => this.getSamples(this.props.Login.masterData.SelectedBatchmaster) // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\n        //inputParam={this.props.Login.inputParam}\n        ,\n        screenName: \"IDS_SAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 9\n        }\n      }));\n      tabMap.set(\"IDS_BATCHIQCSAMPLE\", /*#__PURE__*/React.createElement(BatchIqcSampleTab, {\n        iqcsample: this.props.Login.masterData.iqcsample || [],\n        dataResult: process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState),\n        dataState: this.state.iqcsampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateBatchIqcChangeChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        cancelRecord: this.cancelRecord,\n        methodUrl: \"IQCSample\",\n        getIqcSamples: () => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster),\n        screenName: \"IDS_BATCHIQCSAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 9\n        }\n      }));\n\n      if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED) {\n        tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(BatchResultTab, {\n          ELNTest: this.props.Login.masterData.ELNTest || [],\n          resultview: this.props.Login.masterData.Resultview || [],\n          dataResult: process(this.props.Login.masterData.Resultview || [], this.state.viewstate),\n          dataState: this.state.viewstate,\n          dataStateChange: this.dataStateViewChange,\n          userInfo: this.props.Login.userInfo,\n          methodUrl: \"BatchViewResult\",\n          screenName: \"IDS_RESULTS\",\n          intl: this.props.intl,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          selectedfilename: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      tabMap.set(\"IDS_BATCHHISTORY\", /*#__PURE__*/React.createElement(BatchhistoryTab, {\n        batchhistory: this.props.Login.masterData.Batchhistory || [],\n        dataResult: process(this.props.Login.masterData.Batchhistory || [], this.state.histortState),\n        dataState: this.state.histortState,\n        dataStateChange: this.dataStateBatchHistoryChange,\n        userInfo: this.props.Login.userInfo,\n        methodUrl: \"Batchhistory\",\n        screenName: \"IDS_BATCHHISTORY\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 9\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            toDate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            toDate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(event.value),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCRegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userInfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          const nregsubtypecode = this.state; //this.setState({ nregsubtypecode:event });\n\n          this.getApprovalVersion(event);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getBCFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\n          //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          // inputData = {\n          //     nflag: 4,\n          //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\n          //     todate: obj.toDate,//this.props.Login.masterData.toDate,\n          //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n          //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n          //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n          //     napprovalversioncode: event.value,\n          //     userinfo: this.props.Login.userInfo,\n          //     defaultApprovalConfigVersion: event.item,\n          //     masterData: this.props.Login.masterData,\n          //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          // }\n          // this.props.getBCJobStatus(inputData)\n          const ApprovalVersionValue = this.state;\n          this.setState({\n            ApprovalVersionValue: event\n          });\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else if (fieldname === \"test\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else {\n          const selectedRecord = this.state;\n          this.setState({\n            selectedRecord: event\n          });\n        }\n      }\n    };\n\n    this.handleFilterDateChange = (dateValue, dateName) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let sampleList = this.state.samples || [];\n      let addedSamplesList = [];\n\n      if (checked) {\n        //const data = event.dataItems.map(item => {\n        const data = event.target.props.data.map(item => {\n          if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            sampleList.push({ ...item,\n              selected: false\n            });\n            item.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = olditem;\n            newItem[\"jsonuidata\"]['samplelist'] = olditem;\n            addedSamplesList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          sampleList,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        // let sampleListData = this.state.sampleList || [];\n        // let deletedListdData = this.state.sampleList || [];\n        let sampleListData = this.state.samples || [];\n        let deletedListdData = this.state.samples || [];\n        const data = this.state.samples.map(item => {\n          sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          samples: data,\n          addedSamplesList: sampleListData,\n          deletedList: deletedListdData,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } // const data = this.state.addComponentDataList.map(item=>{\n      //     if (checked){\n      //         addedComponentList.push({...item, selected:false});\n      //     }\n      //     else{\n      //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\n      //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \n      //     }  \n      //     item.selected = checked;\n      //     return item;\n      // });\n\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedSamplesList = this.state.addedSamplesList || []; //let addedSamplesList= [];\n\n      let samples = this.state.samples || [];\n      const samplesList = this.state.samples.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n          } else {\n            // if(addedSamplesList.length === 0){\n            addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode); //   }else{\n            //     this.state.samples.map((item1,index) => { \n            //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\n            //             if(this.state.samples.length == 1){\n            //                 addedSamplesList=[];\n            //             }else{\n            //                 const newItem = JSON.parse(JSON.stringify(item1));\n            //                 newItem.selected = false;\n            //                 newItem[\"jsondata\"]={};\n            //                 newItem[\"jsonuidata\"]={};\n            //                 newItem[\"jsondata\"]['samplelist'] = item1\n            //                 newItem[\"jsonuidata\"]['samplelist'] = item1\n            //                 //addedSamplesList.push(newItem);\n            //                 addedSamplesList = item1;\n            //             }  \n            //         }\n            //     } \n            //   )\n          }\n        }\n\n        return item;\n      }); ///samplesList = addedSamplesList;\n\n      this.setState({\n        samplesList,\n        addedSamplesList,\n        samples,\n        initialList: addedSamplesList,\n        addSelectAll: this.valiateCheckAll(samplesList),\n        deleteSelectAll: this.valiateCheckAll(samplesList)\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n      console.log(\"handle save:\", selectedRecord);\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SPECIFICATION\",\n        \"dataField\": \"nallottedspeccode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n      let selectedSpec = this.props.Login.selectedSpec;\n\n      if (selectedSpec.nallottedspeccode !== \"\") {\n        selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n        selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n        selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadSpec: false,\n            selectedSpec,\n            openModal: true,\n            openSpecModal: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.ConfirmDelete = (selectedBatch, deleteId, operation) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\n    };\n\n    this.completePopUpStartActions = completeId => {\n      // if(this.props.Login.masterData.nneedtestinitiate === true){\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } //    }else \n      else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } else {\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         openModal: true, \n        //         completeId : completeId,\n        //         masterData: this.props.Login.masterData,\n        //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n        //         operation: \"complete\"\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"completeId\"] = completeId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"complete\";\n        this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.AddSpec = e => {\n      if (this.state.selectedMaterial !== undefined && this.state.selectedMaterialCategory !== undefined) {\n        let inputData = {};\n        inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\n        inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode; // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \n        // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \n        // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n\n        this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_FILLALLDETAILSTOADDSPEC\"\n        }));\n      }\n    };\n\n    this.testPopUpStartActions = testStartId => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } // else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"initiate\";\n        this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData); //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 openModal: true, \n        //                 testStartId : testStartId,\n        //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\n        //                 masterData: this.props.Login.masterData,\n        //                 operation: \"initiate\"\n        //             }\n        //         }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.testStartActions = (selectedmaster, testStartId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } //else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        let jsonuidata = [];\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/initiateBatchcreation\",\n          isSingleGet: true,\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n\n        if (this.props.Login.masterData.iqcsample.length > 0) {\n          let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\n          inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"nneedjoballocationiqc\"] = true;\n          inputData[\"isiqcdata\"] = true;\n        } else {\n          inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"isiqcdata\"] = false;\n          inputData[\"nneedjoballocationiqc\"] = false;\n        }\n\n        inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n        inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\n        inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"batchsample\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\n        inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\n        inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\n        inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\n        inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"initiate\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\n        }\n      }\n    };\n\n    this.batchSaveIQCActions = selectedmaster => {\n      if (this.state.selectedRecord.savailablequatity !== \"0.00\") {\n        if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\n          if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\n            let userInfo = {};\n            let inputRegistrationData = {};\n            let inputMaterialInventoryData = {};\n            let inputBatchData = {};\n            const map = {};\n            let batchCreationSampleData = {};\n            let batchCreationTestData = {};\n            let batchCreationSampleArray = [];\n            let batchCreationTestArray = [];\n            let samplecombinationuniqueArray = [];\n            let inputMaterialInventoryArrData = [];\n            batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\n            batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\n            batchCreationSampleData[\"slno\"] = 1;\n            batchCreationSampleArray.push(batchCreationSampleData);\n            inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\n            inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\n            inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode; // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n            inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n            inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            inputRegistrationData[\"jsondata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            };\n            inputRegistrationData[\"jsonuidata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; // inputMaterialInventoryData = {\n            //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\n            // }\n            //  inputMaterialInventoryData = {\n            //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n            //         jsondata : {\n            //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         jsonuidata : {\n            //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            //  };\n\n            inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\n            inputMaterialInventoryData[\"jsondata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\n\n            inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\n            inputMaterialInventoryData[\"jsonuidata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\n\n            batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA; //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\n\n            batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n            batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n            batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA; //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\n\n            batchCreationTestData[\"nrepeatcountno\"] = 1; //--\n            //    batchCreationTestData[\"ntestretestno\"]=0;\n\n            batchCreationTestData[\"nparametercount\"] = 1; //--\n\n            batchCreationTestData[\"slno\"] = 1; //--\n\n            batchCreationTestArray.push(batchCreationTestData);\n            map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n            map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n            userInfo = this.props.Login.userInfo;\n            map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n            map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n            map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n            map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n            map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\n            inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\n            map['Registration'] = inputRegistrationData;\n            map['Batchsampleiqc'] = inputBatchData;\n            map['RegistrationSample'] = batchCreationSampleArray;\n            map['testgrouptest'] = batchCreationTestArray;\n            map['userInfo'] = userInfo;\n            map['samplecombinationunique'] = samplecombinationuniqueArray;\n            map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\n            const inputParam = {\n              inputData: map,\n              classUrl: \"batchcreation\",\n              methodUrl: \"Batchcreation\",\n              displayName: \"IDS_BATCHIQCSAVE\",\n              operation: \"createiqc\"\n            };\n            this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDSPECIFICATIONS\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOAVAILABLEQUANTITY\"\n        }));\n      }\n    };\n\n    this.cancelBatch = (selectedmaster, cancelId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHINITIATEDRECORD\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/cancelBatch\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT; // inputData[\"Batchhistory\"] ={\n        //     dtransactiondate : formatInputDate(new Date(),true),\n        //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\n        //     };\n        //inputData[\"completeId\"] = completeId;\n\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[3];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batch\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"cancel\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCancelAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.batchCompleteActions = (selectedmaster, completeId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/completeBatchcreation\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"completeId\"] = completeId;\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"complete\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCompleteAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openSpecModal = this.props.Login.openSpecModal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\n          //    this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n\n        selectedRecord[\"esigncomments\"] = \"\";\n        selectedRecord[\"esignpassword\"] = \"\";\n      } else if (this.props.Login.openSpecModal) {\n        loadEsign = false;\n        openSpecModal = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          openSpecModal,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let inputData = {};\n      selectedRecord[fieldName] = comboData.item;\n\n      if (fieldName === \"sproductname\") {\n        selectedRecord[\"nproductcode\"] = comboData.value;\n        selectedRecord[\"userInfo\"] = this.props.Login.userInfo;\n        selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\n        selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\n        selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n        selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n        selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA; //this.setState({ selectedProduct:comboData });\n\n        this.props.getProductBasedInstrument(selectedRecord, this.props.Login.masterData);\n      } else if (fieldName === \"ssectionname\") {\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n        inputData['section'] = selectedRecord.ssectionname;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData); // this.setState({ selectedSection:comboData });\n      } else if (fieldName === \"stestname\") {\n        if (this.props.Login.operation === \"update\") {\n          selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value;\n        }\n\n        selectedRecord[\"ntestcode\"] = comboData.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n        selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n        selectedRecord['sinstrumentcatname'] = undefined;\n        selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\n      } else if (fieldName === \"sinstrumentcatname\") {\n        selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\n        selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\n        selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n        selectedRecord['sinstrumentname'] = undefined;\n        this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData); //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\n      } else if (fieldName === \"smaterialcatname\") {\n        selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n        selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n        this.setState({\n          selectedMaterialCategory: comboData\n        });\n        this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"smaterialname\") {\n        selectedRecord[\"nmaterialcode\"] = comboData.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['needsection'] = comboData.item.needsection;\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n        this.setState({\n          selectedMaterial: comboData\n        });\n        this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"sinventoryid\") {\n        selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\n        this.setState({\n          selectedMaterialInventory: comboData\n        }); // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\n        //     selectedRecord['nsectioncode']=transactionStatus.NA;\n        // }else{\n\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode; //}\n\n        this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"sinstrumentname\") {\n        selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\n        selectedRecord[\"sinstrumentname\"] = comboData.label;\n        selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n        selectedRecord['selectedInstrument'] = comboData.item;\n        selectedRecord['ninstrumentcatcode'] = comboData.item.ninstrumentcatcode;\n        selectedRecord['ninstrumentcode'] = comboData.item.ninstrumentcode;\n        this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\n      } else {\n        this.setState({\n          selectedInstrumentId: comboData\n        });\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onMultiColumnValue = (value, key, flag, label, keys) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n\n        if (flag) {\n          keys.map((objkey, index) => {\n            return selectedRecord[objkey] = {\n              \"label\": value[0][label[index]],\n              \"value\": value[0][objkey]\n            };\n          });\n        }\n      } else {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = \"\";\n        });\n        keys.map((objkey, index) => {\n          return selectedRecord[objkey] = \"\";\n        });\n      }\n\n      this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\n    };\n\n    this.onMultiColumnMAHChange = (value, key) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.clearComponentInput = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"nproductcode\"] = undefined;\n      selectedRecord[\"ncomponentcode\"] = undefined;\n      selectedRecord[\"smanuflotno\"] = \"\";\n      selectedRecord[\"dateprompt\"] = transactionStatus.NO;\n      selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\n      selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.openClosePortal = () => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED) {\n        if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n          this.props.Login.masterData.enlLink = \"\";\n          let integrationSettings = this.props.Login.integrationSettings;\n          let inputParam = {\n            userInfo: this.props.Login.userInfo,\n            elnUserInfo: this.props.Login.elnUserInfo,\n            elnSite: this.props.Login.elnSite,\n            nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n            ntestcode: this.props.Login.masterData.ntestcode\n          };\n          let link = \"\";\n          let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\n          const settedId = inputParam.nbatchmastercode; //console.log(settedId);\n\n          let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\n          const userObject = {\n            usercode: inputParam.elnUserInfo.nelncode,\n            username: inputParam.elnUserInfo.selnuserid,\n            userfullname: inputParam.elnUserInfo.selnusername,\n            lsusergroup: {\n              usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\n              usergroupname: inputParam.elnUserInfo.nelnusergroupcode\n            },\n            lssitemaster: {\n              sitecode: inputParam.elnSite.nelnsitecode\n            }\n          };\n          let encrypteduser = CF_encryptionData(userObject).EncryptData;\n          const baseURL = integrationSettings[1].slinkname;\n          link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}'; // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openELNSheet: true,\n              masterData: { ...this.props.Login.masterData,\n                enlLink: link,\n                baseURL: baseURL\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openELNSheet: false,\n              masterData: { ...this.props.Login.masterData,\n                enlLink: \"\"\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.saveSample = addedsamplelist => {\n      if (addedsamplelist === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      } else if (addedsamplelist.length > 0) {\n        let sampleArray = [];\n        addedsamplelist.map(item => sampleArray.push({\n          npreregno: item.npreregno,\n          ntransactionsamplecode: item.ntransactionsamplecode,\n          ntransactiontestcode: item.ntransactiontestcode,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ? this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\n          sarno: item.jsonuidata.samplelist.sarno,\n          ssamplearno: item.jsonuidata.samplelist.ssamplearno,\n          stestname: item.jsonuidata.samplelist.stestname,\n          jsonuidata: {\n            samplelist: item.jsonuidata.samplelist\n          },\n          jsondata: {\n            samplelist: item.jsondata.samplelist\n          }\n        }));\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode; // batchSample = {\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\n        // }\n        //jsondata : \n\n        const inputParam = {\n          inputData: {\n            batchSample: nbatchmastercode,\n            sampleArray,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\n          }\n        };\n        this.props.createSampleAction(inputParam.inputData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"createSample\") {\n        this.saveSample(this.state.addedSamplesList);\n      } else if (this.props.Login.operation === \"initiate\") {\n        this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId);\n      } else if (this.props.Login.operation === \"complete\") {\n        this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId);\n      } else if (this.props.Login.operation === \"createiqcsample\") {\n        this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n\n        if (this.props.Login.operation === \"create\") {\n          inputData[\"fromDate\"] = obj.fromDate;\n          inputData[\"toDate\"] = obj.toDate;\n        }\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedcombodataforFilter\"] = \"true\";\n        inputData[\"needFilterSubmit\"] = \"false\";\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\n        inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\n        inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\n\n        inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\n        inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\n        inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\n        inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\n        inputData[\"sbatcharno\"] = '-'; // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId && this.state.selectedInstrumentId.label; // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\n        let postParam = undefined;\n        postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          unchangeList: [\"FromDate\", \"ToDate\"],\n          isSingleGet: true,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef\n        };\n\n        if (this.props.Login.operation === \"create\") {\n          this.searchRef.current.value = \"\";\n          this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n        } else {\n          inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\n          inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_BATCHCREATION\",\n                operation: inputParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n          }\n        }\n      } // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n      // if (esignNeeded) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: \"IDS_BATCHCREATION\",\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\n      //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\n      // }\n\n    };\n\n    this.deleteBatchCreation = (selectedBatch, deleteId, operation) => {\n      if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || selectedBatch.ntransactionstatus === transactionStatus.INITIATED || selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedBatch.nbatchmastercode,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userInfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"currentdate\"] = formatInputDate(new Date(), true);\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT; // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"selectedBatch\"] = selectedBatch;\n        inputData[\"samples\"] = this.props.Login.masterData.Samples;\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          operation,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.fetchEditData = editParam => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        this.props.getActiveBatchCreationService(editParam, this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"needFilterSubmit\"] = \"true\";\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA; //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\n\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\n\n      if (this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegSubTypeValue !== null && this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA || this.props.Login.masterData.realApproveConfigVersion !== null && this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA || this.props.Login.masterData.defaultFilterStatus !== null) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA; //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onClickReport = (selectedRecord, flag, ncontrolcode) => {\n      const reportParam = {\n        classUrl: \"certificategeneration\",\n        methodUrl: \"reportGeneration\",\n        screenName: \"CertificateGeneration\",\n        operation: \"previewReport\",\n        primaryKeyField: \"nreleasebatchcode\",\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: -1,\n        inputData: {\n          sprimarykeyname: 'nreleasebatchcode',\n          nprimarykey: selectedRecord.nreleasebatchcode,\n          nreleasebatchcode: selectedRecord.nreleasebatchcode,\n          ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\n          ndecisionstatus: selectedRecord.ndecision,\n          // === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\n          nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\n          ncontrolcode,\n          ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\n          userinfo: this.props.Login.userInfo,\n          nflag: flag,\n          skipbatchvalidation: true\n        }\n      };\n      this.props.onClickReport(reportParam);\n    };\n\n    this.reportMethod = value => {\n      if (value.method === 1) {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\n      } else {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\n      }\n    };\n\n    const sampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const histortState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const iqcsampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const viewstate = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedFilter: {},\n      sampleState,\n      histortState,\n      iqcsampleState,\n      viewstate,\n      selectedRecord: {},\n      //confirmmsg:this.ConfirmMessage.bind(this),\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\", \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\n    this.sampleMandatoryFields = [];\n    this.copyMandatoryFields = [];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (props.Login.masterStatus !== \"\") {\n    //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n    //        if(props.Login.operation == \"initiate\"){\n    //         toast.warn(props.Login.masterStatus);\n    //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\n    //        }\n    //     }\n    // }\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null; // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n  } // const sampleColumnList = [];\n  // if (props.nneedsubsample){\n  //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\n  // }\n  // else{\n  //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\n  // }\n\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\n        \"width\": \"150px\",\n        \"columnSize\": \"4\"\n      };\n    });\n    return temparray;\n  }\n\n  // headerSelectionChange = (event) => {\n  //     const checked = event.syntheticEvent.target.checked;\n  //     let addedComponentList = this.state.addedComponentList || [];\n  //     if (checked) {\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n  //                 addedComponentList.push({ ...item, selected: false });\n  //                 item.selected = checked;\n  //                 return item;\n  //             } else {\n  //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n  //                 olditem.selected = checked;\n  //                 return olditem;\n  //             }\n  //         });\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  //     else {\n  //         let addedComponentData = this.state.addedComponentList || [];\n  //         let deletedListdData = this.state.deletedList || [];\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             item.selected = checked;\n  //             return item;\n  //         });\n  //         // console.log(\"data:\",data1, data2);\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  render() {\n    let reportActionList = [];\n    let batchMandatoryFields = [];\n\n    if (this.props.Login.operation === \"update\") {\n      batchMandatoryFields.push({\n        idsName: \"IDS_INSTRUMENTCATEGORY\",\n        dataField: \"sinstrumentcatname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_INSTRUMENT\",\n        dataField: \"sinstrumentname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_INSTRUMENTID\",\n        dataField: \"sinstrumentid\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_PRODUCT\",\n        dataField: \"sproductname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    } else {\n      batchMandatoryFields.push({\n        idsName: \"IDS_SECTION\",\n        dataField: \"ssectionname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_TEST\",\n        dataField: \"stestname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_INSTRUMENTCATEGORY\",\n        dataField: \"sinstrumentcatname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_INSTRUMENT\",\n        dataField: \"sinstrumentname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_INSTRUMENTID\",\n        dataField: \"sinstrumentid\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        idsName: \"IDS_PRODUCT\",\n        dataField: \"sproductname\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    const getBatch = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"Batchcreation\",\n      keyName: \"batchcreation\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.realFromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.realFromDate) : undefined;\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.realToDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.realToDate) : undefined;\n    const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\n    const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\n    const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\n    const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\n    const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\n    const addParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      primaryeyField: \"nreleasebatchcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      //inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\n      masterData: this.props.Login.masterData,\n      fromdate: this.props.Login.masterData.fromDate,\n      todate: this.props.Login.masterData.toDate,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n      napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n      ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    const viewInfoFields = [{\n      \"fieldName\": \"sbatcharno\",\n      \"label\": \"IDS_BATCHARNO\"\n    }, {\n      \"fieldName\": \"ssectionname\",\n      \"label\": \"IDS_SECTION\"\n    }, {\n      \"fieldName\": \"stestname\",\n      \"label\": \"IDS_TESTNAME\"\n    }, {\n      \"fieldName\": \"sinstrumentcatname\",\n      \"label\": \"IDS_INSTRUMENTCATEGORY\"\n    }, {\n      \"fieldName\": \"sinstrumentid\",\n      \"label\": \"IDS_INSTRUMENTID\"\n    }, {\n      \"fieldName\": \"sinstrumentname\",\n      \"label\": \"IDS_INSTRUMENTNAME\"\n    }, {\n      \"fieldName\": \"sproductname\",\n      \"label\": \"IDS_SAMPLETYPE\"\n    }, {\n      \"fieldName\": \"stransdisplaystatus\",\n      \"label\": \"IDS_STATUS\"\n    }, {\n      \"fieldName\": \"username\",\n      \"label\": this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" : this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\" : \"IDS_BATCHCREATEDBY\"\n    }];\n    let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\n\n    if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\n      stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\n    }\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const editParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"update\",\n      primaryKeyField: \"nbatchmastercode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      naddcontrolCode: addId,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n    };\n    const filterParam = {\n      inputListName: \"Batchmaster\",\n      selectedObject: \"SelectedBatchmaster\",\n      primaryKeyField: \"nbatchmastercode\",\n      fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n      fecthInputObject: {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userInfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\n        ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\n        nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA //fromDate, toDate, \n        //stransactionstatuscode,\n        //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\n\n      },\n      masterData: this.props.Login.masterData,\n      //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_BATCHSTATUS\",\n      \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\n    } // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // }\n    ];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 25\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Batchmaster || [],\n      selectedMaster: this.props.Login.masterData.SelectedBatchmaster,\n      primaryKeyField: \"nbatchmastercode\",\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData //getMasterDetail={this.props.getSelectedBatchCreationDetail}\n      ,\n      getMasterDetail: batch => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: getBatch,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_BATCHCREATION\"\n      }) //mainField=\"stestname\"\n      ,\n      mainField: \"sbatcharno\",\n      firstField: \"stestname\",\n      secondField: \"sinstrumentname\",\n      selectedListName: \"SelectedBatchmaster\",\n      objectName: \"BatchCreation\",\n      listName: \"IDS_BATCHCREATION\",\n      needValidation: false,\n      hidePaging: false // subFields={\n      //     [\n      //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\n      //         { [designProperties.VALUE]: \"sinstrumentname\" },\n      //         // { [designProperties.VALUE]: \"smahname\" },\n      //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\n      //     ]\n      // }\n      ,\n      needFilter: true,\n      needMultiSelect: false,\n      subFieldsLabel: true,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      isClearSearch: this.props.Login.isClearSearch // skip={this.state.skip}\n      // take={this.state.take}\n      // handlePageChange={this.handlePageChange}\n      ,\n      addId: addId,\n      showFilterIcon: true,\n      userRoleControlRights: this.state.userRoleControlRights,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getBatchSection(addParam) // openModal={() => this.props.getTestInstrumentComboService(addParam)}\n      ,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1235,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getTestInstrumentComboService(addParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1237,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1243,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\" //onClick={() => this.reloadData(false)} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1245,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1250,\n          columnNumber: 45\n        }\n      }))) // </Tooltip>\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(BatchCreationFilter, {\n          fromDate: this.state.selectedFilter[\"fromDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n          toDate: this.state.selectedFilter[\"toDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.state.nregsubtypecode || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.BCFilterStatus || [],\n          FilterStatusValue: this.state.FilterStatusValue || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.state.ApprovalVersionValue || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.selectedTestSynonym || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1258,\n            columnNumber: 54\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1186,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1292,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0 && this.props.Login.masterData.SelectedBatchmaster ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.sbatcharno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1303,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedBatchTestTAT && this.props.Login.masterData.SelectedBatchTestTAT.Deviation && this.props.intl.formatMessage({\n      id: \"IDS_DEVIATION\"\n    }) + \" : \" + this.props.Login.masterData.SelectedBatchTestTAT.Deviation, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"openelnsheet\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(elnSheetId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENELNSHEET\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: elnimage,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 75\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"view\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWINFO\"\n      }) // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\n      ,\n      onClick: () => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.fetchEditData(editParam) // onClick={() => this.props.getActiveBatchCreationService(editParam,\n      //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1354,\n        columnNumber: 77\n      }\n    })),\n    /*#__PURE__*/\n    // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\n    React.createElement(Nav.Link, {\n      name: \"initiateBatchCreation\" //  data-for=\"tooltip-common-wrap\" \n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BATCHINITIATE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\" //role=\"button\"\n      ,\n      onClick: () => this.testPopUpStartActions(testStartId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367,\n        columnNumber: 77\n      }\n    })) // :\"\"\n    , /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"completeBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETE\"\n      }),\n      onClick: () => this.completePopUpStartActions(completeId) //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\n      // onClick={() => this.props.validateBatchComplete({\n      //     masterData: this.props.Login.masterData,\n      //     userInfo: this.props.Login.userInfo,\n      //     userRoleControlRights: this.props.Login.userRoleControlRights,\n      //     ncontrolCode: completeId,\n      //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\n      // })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1374,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1388,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1399,\n        columnNumber: 75\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: reject,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 75\n      }\n    })), reportActionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: reportActionList,\n      Button: true,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      dynamicButton: value => this.reportMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 77\n      }\n    }) : \"\")))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 64\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 67\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1439,\n        columnNumber: 69\n      }\n    })))))) : \"\"))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet // show={this.state.openELNSheet}\n      ,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1476,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1484,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\n    , {\n      url: this.props.Login.masterData.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1486,\n        columnNumber: 37\n      }\n    })))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLE\"\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCH\"\n      }) : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCHIQCSAMPLE\"\n      }) : this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? batchMandatoryFields //  : this.props.Login.operation === \"initiate\"  ?\n      //    this.initiateMandatoryFields \n      //  : this.props.Login.operation === \"complete\" ?\n      //    this.completeMandatoryFields\n      : this.props.Login.operation === \"createiqcsample\" ? this.materialIqcMandatory : [],\n      showSaveContinue: this.state.showSaveContinue,\n      noSave: this.props.Login.operation === \"view\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(AddBatchCreation, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        handleDateChange: this.handleDateChange,\n        Test: this.state.Testvalues || [],\n        selectedInstrumentCategory: this.state.selectedInstCategory,\n        InstrumentCategory: this.state.InstrumentCategory,\n        Instrument: this.state.Instrument,\n        selectedInstrument: this.state.selectedInstrument,\n        productCategory: this.state.ProductCategory,\n        selectedProductCategory: this.state.selectedProductCategory,\n        TestValue: this.state.selectedTestSynonym || [],\n        product: this.state.Product || [],\n        instrumentID: this.state.InstrumentID || [],\n        selectedProduct: this.state.selectedProduct || [],\n        studyPlanList: this.props.Login.studyPlanList || [],\n        manufacturerList: this.props.Login.productManufacturerList || [],\n        maHolderList: this.props.Login.maHolderList || [],\n        timeZoneList: this.props.Login.timeZoneList || [],\n        selectedBacthCreation: this.props.Login.masterData.SelectedBatchmaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        selectedInstrumentId: this.state.selectedInstrumentId,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        batchCreationEditStatusList: this.props.Login.batchCreationEditStatusList,\n        Section: this.state.Section,\n        selectedSection: this.state.selectedSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1544,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"createSample\" ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputOnChange: this.onInputOnChange,\n        getProductByCategory: this.getProductByCategory,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        productCategoryList: this.props.productCategoryList,\n        productList: this.props.productList,\n        componentList: this.props.componentList,\n        getDataForAddComponent: this.getDataForAddComponent,\n        clearComponentInput: this.props.clearComponentInput,\n        samples: this.state.samples || [],\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        addedComponentList: this.state.addedComponentList || [],\n        addedHeaderSelectionChange: this.addedHeaderSelectionChange,\n        addedSelectionChange: this.addedSelectionChange //dataStateChange={this.dataStateChange} \n        ,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        screenName: this.props.screenName,\n        addSelectAll: this.state.addSelectAll,\n        deleteSelectAll: this.state.deleteSelectAll,\n        onDeleteSelectedComponent: this.onDeleteSelectedComponent,\n        componentPopupSkip: this.props.componentPopupSkip,\n        componentPopupTake: this.props.componentPopupTake,\n        componentPageSizes: this.props.componentPageSizes,\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1577,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ? /*#__PURE__*/React.createElement(AddBatchinitiate, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        handleDateChange: this.handleDateChange,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 28\n        }\n      }) : this.props.Login.operation === \"view\" ? /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1617,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1618,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(ViewInfo, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecordView: this.props.Login.masterData.selectedRecordView,\n        viewInfoFields: viewInfoFields,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1619,\n          columnNumber: 28\n        }\n      }))) : this.props.Login.operation === \"createiqcsample\" ? /*#__PURE__*/React.createElement(AddMaterialIqc, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        materialCategory: this.state.MaterialCategory,\n        selectedMaterialType: this.state.selectedMaterialType,\n        selectedMaterialCategory: this.state.selectedMaterialCategory,\n        onComboChange: this.onComboChange,\n        selectedMaterial: this.state.selectedMaterial,\n        screenName: this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATION\"\n        }),\n        handleSaveClick: this.handleSaveClick,\n        material: this.state.Material,\n        materialInventory: this.state.MaterialInventory,\n        AddSpec: this.AddSpec,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        loadSpec: this.props.Login.loadSpec,\n        selectedMaterialInventory: this.state.selectedMaterialInventory,\n        selectedInventoryUnit: this.props.Login.masterData.selectedInventoryUnit,\n        AgaramTree: this.props.Login.AgaramTree,\n        openNodes: this.props.Login.OpenNodes,\n        onTreeClick: this.onTreeClick,\n        focusKey: this.props.Login.FocusKey,\n        activeKey: this.props.Login.batchactiveKey,\n        Specification: this.props.Login.Specification,\n        selectedSpec: this.props.Login.selectedSpec,\n        selectedRecord: this.state.selectedRecord,\n        onSpecChange: this.onspecChange,\n        openSpecModal: this.props.Login.openSpecModal,\n        closeModal: this.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1627,\n          columnNumber: 28\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 21\n      }\n    }) : \"\", this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      selectedRecord,\n      filterData,\n      addedComponentList,\n      filterStatusList,\n      dataState,\n      sahDataState,\n      bahDataState,\n      chDataState,\n      testCommentDataState,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      BCFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      InstrumentCategory,\n      selectedInstCategory,\n      ProductCategory,\n      Instrument,\n      selectedInstrument,\n      selectedTestSynonym,\n      nregsubtypecode,\n      selectedProductCategory,\n      Product,\n      selectedProduct,\n      samples,\n      addSelectAll,\n      deleteSelectAll,\n      ApprovalVersionValue,\n      FilterStatusValue,\n      Section,\n      selectedSection,\n      sampleGridItem,\n      subsampleGridItem,\n      testGridItem = [],\n      DynamicGridItem,\n      samplegridmoreitem,\n      DynamicGridMoreItem,\n      MaterialCategory,\n      selectedMaterialType,\n      Material,\n      selectedMaterial,\n      selectedMaterialCategory,\n      MaterialInventory,\n      selectedMaterialInventory,\n      Specification,\n      selectedSpec,\n      addedSamplesList,\n      testGridArnoItems,\n      InstrumentID,\n      selectedInstrumentId,\n      sinstrumentid\n    } = this.state;\n    let isStateChanged = false;\n    let bool = false;\n    addedSamplesList = [];\n    samples = [];\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      isStateChanged = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname', 'ascending', 'ninstrumentcatcode', false);\n      Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname', 'ascending', 'ninstrumentcode', false);\n      ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname', 'ascending', 'nproductcatcode', false);\n      Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname', 'ascending', 'nproductcode', false);\n      Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname', 'ascending', 'nsectioncode', false);\n      MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname', 'ascending', 'nmaterialcatcode', false);\n      Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname', 'ascending', 'nmaterialcode', false);\n      MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid', 'ascending', 'nmaterialinventtranscode', false);\n      InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid', 'ascending', 'ninstrumentcode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      BCFilterStatus = BCFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n      InstrumentCategory = InstrumentCategory.get(\"OptionList\");\n      Instrument = Instrument.get(\"OptionList\");\n      ProductCategory = ProductCategory.get(\"OptionList\");\n      Product = Product.get(\"OptionList\");\n      Section = Section.get(\"OptionList\");\n      MaterialCategory = MaterialCategory.get(\"OptionList\");\n      Material = Material.get(\"OptionList\");\n      MaterialInventory = MaterialInventory.get(\"OptionList\");\n      InstrumentID = InstrumentID.get(\"OptionList\"); //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\n\n      samples = this.props.Login.masterData.samples;\n      addSelectAll = false;\n      deleteSelectAll = true;\n      nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ? {\n        label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\n        value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\n        item: this.props.Login.masterData.defaultRegistrationSubType\n      } : \"\";\n\n      if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\n        selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ? {\n          label: this.props.Login.masterData.selectedTestSynonym.stestname,\n          value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\n          item: this.props.Login.masterData.selectedTestSynonym\n        } : \"\";\n        let stestname = selectedTestSynonym.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          stestname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\n        selectedProductCategory = this.props.Login.masterData.selectedProductcategory ? {\n          label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\n          value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\n          item: this.props.Login.masterData.selectedProductcategory\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\n        selectedProduct = this.props.Login.masterData.selectedProduct ? {\n          label: this.props.Login.masterData.selectedProduct.sproductname,\n          value: this.props.Login.masterData.selectedProduct.nproductcode,\n          item: this.props.Login.masterData.selectedProduct\n        } : \"\";\n        let sproductname = selectedProduct.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sproductname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\n        selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ? {\n          label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\n          value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\n          item: this.props.Login.masterData.selectedInstrumentCategory\n        } : \"\";\n        let sinstrumentcatname = selectedInstCategory.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sinstrumentcatname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\n        selectedInstrument = this.props.Login.masterData.selectedInstrument ? {\n          label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\n          value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrument\n        } : \"\";\n        let sinstrumentname = selectedInstrument.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sinstrumentname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\n        selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ? {\n          label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\n          value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrumentId\n        } : \"\";\n        let sinstrumentid = selectedInstrumentId.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sinstrumentid,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\n        addedComponentList = this.props.Login.selectedComponentList;\n        isStateChanged = true; // this.setState({ addedComponentList });\n      }\n\n      if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\n        ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ? {\n          label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\n          value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\n          item: this.props.Login.masterData.defaultApprovalConfigVersion\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\n        FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ? {\n          label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\n          value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n          item: this.props.Login.masterData.defaultFilterStatus\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\n        selectedSection = this.props.Login.masterData.selectedSection ? {\n          label: this.props.Login.masterData.selectedSection.ssectionname,\n          value: this.props.Login.masterData.selectedSection.nsectioncode,\n          item: this.props.Login.masterData.selectedSection\n        } : \"\";\n        let ssectionname = selectedSection.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          ssectionname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\n        selectedMaterialType = this.props.Login.masterData.selectedMaterialType ? {\n          label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\n          value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\n          item: this.props.Login.masterData.selectedMaterialType\n        } : \"\";\n        selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\n        selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ? {\n          label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\n          value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\n          item: this.props.Login.masterData.selectedMaterialCategory\n        } : \"\";\n        selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\n        selectedMaterial = this.props.Login.masterData.selectedMaterial ? {\n          label: this.props.Login.masterData.selectedMaterial.smaterialname,\n          value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\n          item: this.props.Login.masterData.selectedMaterial\n        } : \"\";\n        selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\n        selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ? {\n          label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\n          value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\n          item: this.props.Login.masterData.selectedMaterialInventory\n        } : \"\";\n        selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit && this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\n        selectedRecord[\"susedquantity\"] = \"\";\n        selectedRecord[\"sremarks\"] = \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.isselectedrecordempty) {\n        selectedRecord = {};\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        Specification = this.props.Login.masterData.Specification && this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\n        selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        selectedRecord = this.props.Login.selectedRecord;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n        sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        DynamicGridMoreItem = [...samplegridmoreitem];\n        DynamicGridItem = [...testGridArnoItems, ...testGridItem, ...sampleGridItem, ...subsampleGridItem];\n        isStateChanged = true;\n      }\n    } // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\n    //     // let selectedRecord = {};\n    //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\n    //     'ascending', 'nmaterialcatcode', false);\n    //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\n    //     'ascending', 'nmaterialcode', false);\n    //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\n    //     'ascending', 'nmaterialinventorycode', false);\n    //      MaterialCategory = MaterialCategory.get(\"OptionList\")\n    //      Material = Material.get(\"OptionList\")\n    //      MaterialInventory = MaterialInventory.get(\"OptionList\")\n    //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\n    //      selectedRecord[\"Material\"]=Material\n    //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\n    //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\n    //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\n    //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\n    //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\n    //         isStateChanged = true;\n    //     }\n    //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\n    //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\n    //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\n    //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\n    //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\n    //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\n    //             item: this.props.Login.selectedRecord.selectedMaterial\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\n    //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\n    //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\n    //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\n    //             item: this.props.Login.selectedRecord.selectedMaterialInventory\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\n    //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\n    //         isStateChanged = true;\n    //     }\n\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      isStateChanged = true; //selectedRecord = this.props.Login.selectedRecord;\n\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterData,\n        addedComponentList,\n        filterStatusList,\n        dataState,\n        sahDataState,\n        bahDataState,\n        chDataState,\n        testCommentDataState,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        BCFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        selectedInstCategory,\n        InstrumentCategory,\n        Instrument,\n        selectedInstrument,\n        selectedTestSynonym,\n        nregsubtypecode,\n        ProductCategory,\n        selectedProductCategory,\n        Product,\n        selectedProduct,\n        samples,\n        addSelectAll,\n        deleteSelectAll,\n        ApprovalVersionValue,\n        FilterStatusValue,\n        Section,\n        selectedSection,\n        sampleGridItem,\n        subsampleGridItem,\n        testGridItem,\n        DynamicGridItem,\n        samplegridmoreitem,\n        DynamicGridMoreItem,\n        MaterialCategory,\n        selectedMaterialType,\n        Material,\n        selectedMaterial,\n        selectedMaterialCategory,\n        MaterialInventory,\n        selectedMaterialInventory,\n        Specification,\n        selectedSpec,\n        addedSamplesList,\n        testGridArnoItems,\n        InstrumentID,\n        selectedInstrumentId,\n        sinstrumentid\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getTestInstrumentComboService,\n  getTestInstrumentCategory,\n  getInstrumentForInstCategory,\n  getProductBasedInstrument,\n  getBatchCreationDetails,\n  onActionFilterSubmit,\n  getProductcategoryAction,\n  createBatchmasterAction,\n  getSamplesForGrid,\n  getSelectedBatchCreationDetail,\n  createSampleAction,\n  deleteSampleAction,\n  getActiveBatchCreationService,\n  updateBatchcreationAction,\n  deleteBatchCreation,\n  batchInitiateAction,\n  getBCRegistrationSubType,\n  batchCompleteAction,\n  validateEsignCredential,\n  filterColumnData,\n  getBatchhistoryAction,\n  getBatchSection,\n  viewInfo,\n  getIqcSamples,\n  getMaterialBasedOnMaterialCategory,\n  getMaterialInventoryBasedOnMaterial,\n  batchSaveIQCActions,\n  getMaterialAvailQtyBasedOnInv,\n  getBatchIqcSampleAction,\n  getBCApprovalConfigVersion,\n  getBCRegistrationType,\n  getTreeByMaterial,\n  getNewRegSpecification,\n  cancelIQCSampleAction,\n  batchCancelAction,\n  batchInitiateDatePopup,\n  batchCompleteDatePopup,\n  getInstrumentID,\n  getBatchViewResultAction //,batchTAT\n\n})(injectIntl(BatchCreation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/batchruncreation/BatchCreation.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Nav","FormGroup","FormLabel","Card","Modal","Image","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faCheckCircle","faCopy","faEye","faPlay","faPlus","faSync","callService","crudMaster","updateStore","getTestInstrumentComboService","getTestInstrumentCategory","getProductBasedInstrument","getInstrumentForInstCategory","getBatchCreationDetails","onActionFilterSubmit","getProductcategoryAction","createBatchmasterAction","getSamplesForGrid","getSelectedBatchCreationDetail","createSampleAction","deleteSampleAction","getActiveBatchCreationService","updateBatchcreationAction","deleteBatchCreation","batchInitiateAction","getBCRegistrationSubType","batchCompleteAction","validateEsignCredential","filterColumnData","getBatchhistoryAction","getBatchSection","viewInfo","getIqcSamples","getMaterialBasedOnMaterialCategory","getMaterialInventoryBasedOnMaterial","batchSaveIQCActions","getMaterialAvailQtyBasedOnInv","getBatchIqcSampleAction","getBCApprovalConfigVersion","getBCRegistrationType","getTreeByMaterial","getNewRegSpecification","cancelIQCSampleAction","batchCancelAction","batchInitiateDatePopup","batchCompleteDatePopup","getInstrumentID","getBatchViewResultAction","transactionStatus","designProperties","reportTypeEnum","reportCOAType","RegistrationSubType","DEFAULT_RETURN","showEsign","getControlMap","getStartOfDay","getEndOfDay","formatInputDate","constructOptionList","rearrangeDateFormat","convertDateValuetoString","CF_encryptionData","ConfirmMessage","SlideOutModal","ReadOnlyText","ContentPanel","MediaLabel","ListWrapper","BreadcrumbComponent","Esign","ProductList","CustomPopover","BatchCreationFilter","AddBatchCreation","AddBatchinitiate","CustomTab","SampleTab","BatchhistoryTab","process","AddSample","ListMaster","ViewInfo","Affix","AddMaterialIqc","BatchIqcSampleTab","BatchResultTab","PortalModal","Iframe","ReactTooltip","mapStateToProps","state","Login","BatchCreation","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","completeMandatoryFields","initiateMandatoryFields","materialIqcMandatory","getSamples","selectedbatchmaster","addSampleID","controlMap","has","get","ncontrolcode","ntransactionstatus","INITIATED","COMPLETED","CANCELLED","warn","intl","formatMessage","id","masterData","SelectedBatchmaster","ntestcode","nbatchmastercode","userInfo","realRegTypeValue","nregtypecode","NA","realRegSubTypeValue","nregsubtypecode","Samples","length","addcontrolcode","inputData","realSampleTypeValue","nsampletypecode","nsectioncode","deleteRecord","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","selectedRecord","nbatchsampleCode","fetchUrl","isSingleGet","fecthInputObject","userinfo","jsondata","inputParam","classUrl","methodUrl","Sample","sarno","ssamplearno","stestname","nbatchsamplecode","ndesigntemplatemappingcode","operation","displayName","dataState","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","cancelRecord","nbatchsampleiqccode","iqcSample","nmaterialinventtranscode","onTabChange","tabProps","nneedsubsample","item","batchactiveKey","dataStateChange","event","dataResult","sampleState","dataStateBatchHistoryChange","Batchhistory","histortState","dataStateBatchIqcChangeChange","iqcsample","iqcsampleState","dataStateViewChange","Resultview","viewstate","getApprovalVersion","obj","selectedFilter","fromDate","realFromDate","toDate","realToDate","needFilterSubmit","parseInt","defaultSampleType","isneedapprovalfilter","defaultRegistrationSubType","isneedrealFilterStatus","realApproveConfigVersion","ApprovalVersionValue","realdefaultFilterStatus","tabDetail","tabMap","Map","set","gridfillingColumn","DynamicGridItem","DynamicGridMoreItem","ELNTest","sbatcharno","onFilterComboChange","fieldname","dateObj","nflag","defaultRegistrationType","ntranscode","FilterStatusValue","value","inputParamData","fromdate","todate","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","String","defaultFilterStatus","DesignTemplateMappingValue","getBCFilterTemplate","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","getBCFilterStatus","handleFilterDateChange","dateValue","dateName","Date","headerSelectionChange","checked","syntheticEvent","target","sampleList","samples","addedSamplesList","map","findIndex","x","ntransactiontestcode","push","selected","newItem","JSON","parse","stringify","olditem","addSelectAll","deleteSelectAll","sampleListData","deletedListdData","filter","item1","npreregno","deletedList","onTreeClick","activeKey","key","focusKey","keyName","selectedNode","primaryKey","selectionChange","samplesList","dataItem","initialList","valiateCheckAll","handleSaveClick","saveType","failedControls","startLabel","label","mandatoryFields","console","log","selectedSpec","nallottedspeccode","loadSpec","openSpecModal","info","handlePageChange","e","skip","take","ConfirmDelete","selectedBatch","deleteId","confirmMessage","confirm","completePopUpStartActions","completeId","DRAFT","AddSpec","selectedMaterial","undefined","selectedMaterialCategory","ncategorybasedflow","testPopUpStartActions","testStartId","testStartActions","selectedmaster","jsonuidata","totalSample","concat","join","ntransactionsamplecode","nneedmyjob","nneedjoballocation","napprovalconfigcode","nneedtestinitiate","dtransactiondate","currentTime","scomments","BCFilterStatus","sample","savailablequatity","parseFloat","susedquantity","inventoryTransaction","inputRegistrationData","inputMaterialInventoryData","inputBatchData","batchCreationSampleData","batchCreationTestData","batchCreationSampleArray","batchCreationTestArray","samplecombinationuniqueArray","inputMaterialInventoryArrData","nspecsampletypecode","ntemplatemanipulationcode","nregsubtypeversioncode","nmaterialcode","nmaterialcatcode","smaterialcatname","sinventoryid","selectedMaterialInventory","nmaterialinventorycode","smaterial","smaterialname","smaterialtype","selectedMaterialType","smaterialtypename","nmaterialtypecode","sunitname","sremarks","selectedInventoryUnit","nqtyused","selectedTestDetails","ntestgrouptestcode","nmethodcode","PREREGISTER","cancelBatch","cancelId","batchCompleteActions","closeAlert","showConfirmAlert","loading","closeModal","selectedId","onComboChange","comboData","fieldName","naddcontrolCode","sregsubtypename","ssectionname","selectedTestSynonym","ncalibrationreq","needSectionwise","needsection","ninstrumentcatcode","ninstrumentcode","selectedInstrumentId","onNumericInputOnChange","name","onInputOnChange","type","ACTIVE","DEACTIVE","YES","NO","onMultiColumnValue","flag","keys","forEach","objarray","objkey","index","getBatchManufacturerComboChange","onMultiColumnMAHChange","clearComponentInput","componentDefaultSearchDate","openClosePortal","openELNSheet","enlLink","integrationSettings","elnUserInfo","elnSite","link","detail","EncryptData","settedId","encryptedbatchid","userObject","usercode","nelncode","username","selnuserid","userfullname","selnusername","lsusergroup","usergroupcode","nelnusergroupcode","usergroupname","lssitemaster","sitecode","nelnsitecode","encrypteduser","baseURL","slinkname","handleDateChange","onDropImage","attachedFiles","actionType","saveSample","addedsamplelist","sampleArray","samplelist","batchSample","onSaveClick","formRef","nprevioustestcode","selectedSection","selectedInstCategory","selectedInstrument","selectedProduct","unchangeList","searchRef","current","editId","fetchEditData","editParam","validateEsign","sreason","password","onFilterSubmit","reloadData","isFilterSubmit","onClickReport","reportParam","sprimarykeyname","nprimarykey","nreleasebatchcode","ncertificatetypecode","ndecision","PASS","ndecisionstatus","nreporttypecode","SCREENWISE","BATCH","ncoareporttypecode","BATCHPREVIEW","skipbatchvalidation","reportMethod","method","SelectedBatchCreation","controlId","settings","createRef","searchFieldList","sampleMandatoryFields","copyMandatoryFields","getDerivedStateFromProps","masterStatus","error","temparray","option","LABEL","slanguagetypecode","VALUE","selectAll","render","reportActionList","batchMandatoryFields","idsName","dataField","mandatoryLabel","controlType","getBatch","addId","elnSheetId","addParam","primaryeyField","viewInfoFields","stransactionstatuscode","SelectedFilterStatus","filterParam","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sfilterstatus","searchedData","Batchmaster","batch","openFilter","closeFilter","isClearSearch","indexOf","SampleType","RegistrationType","REJobStatus","Testvalues","onDesignTemplateChange","stateDynamicDesign","SelectedBatchTestTAT","Deviation","stransdisplaystatus","elnimage","reject","showSaveContinue","InstrumentCategory","Instrument","ProductCategory","selectedProductCategory","Product","InstrumentID","studyPlanList","productManufacturerList","maHolderList","timeZoneList","batchCreationEditStatusList","Section","getProductByCategory","productCategoryList","productList","componentList","getDataForAddComponent","addedComponentList","addedHeaderSelectionChange","addedSelectionChange","onDeleteSelectedComponent","componentPopupSkip","componentPopupTake","componentPageSizes","selectedRecordView","MaterialCategory","Material","MaterialInventory","AgaramTree","OpenNodes","FocusKey","Specification","onspecChange","confirmAlert","componentDidUpdate","previousProps","filterData","filterStatusList","sahDataState","bahDataState","chDataState","testCommentDataState","testskip","testtake","sampleGridItem","subsampleGridItem","testGridItem","samplegridmoreitem","testGridArnoItems","sinstrumentid","isStateChanged","bool","instrumentCategory","instrument","productcategory","product","instrumentID","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","selectedProductcategory","sproductcatname","nproductcatcode","sproductname","nproductcode","selectedInstrumentCategory","sinstrumentcatname","sinstrumentname","Object","values","selectedComponentList","sversionname","isselectedrecordempty","DynamicDesign","dynamicColumn","testListFields","testlistitem","releasetestfields","samplegriditem","subsamplelistitem"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col,Nav,FormGroup, FormLabel,Card,Modal,Image,Button} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye,faPlay,faPlus, faSync \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport  elnimage  from '../../assets/image/sheet-view.svg'\r\nimport {\r\n    callService, crudMaster,updateStore,\r\n    getTestInstrumentComboService,getTestInstrumentCategory,getProductBasedInstrument,\r\n    getInstrumentForInstCategory,getBatchCreationDetails,onActionFilterSubmit,\r\n    getProductcategoryAction,createBatchmasterAction,getSamplesForGrid,\r\n    getSelectedBatchCreationDetail,createSampleAction,deleteSampleAction,\r\n    getActiveBatchCreationService,updateBatchcreationAction,deleteBatchCreation,\r\n    batchInitiateAction,getBCRegistrationSubType,batchCompleteAction,\r\n    validateEsignCredential,filterColumnData,getBatchhistoryAction,getBatchSection,\r\n    viewInfo,getIqcSamples,getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial,batchSaveIQCActions,getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction,getBCApprovalConfigVersion,getBCRegistrationType,getTreeByMaterial,\r\n    getNewRegSpecification,cancelIQCSampleAction,batchCancelAction,batchInitiateDatePopup,\r\n    batchCompleteDatePopup,getInstrumentID,getBatchViewResultAction\r\n    //,batchTAT\r\n} from '../../actions';\r\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, \r\n    RegistrationSubType } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, \r\nformatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString,CF_encryptionData } from '../../components/CommonScript';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport BatchCreationFilter from './BatchCreationFilter';\r\nimport AddBatchCreation from './AddBatchCreation';\r\nimport AddBatchinitiate from './AddBatchinitiate';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport SampleTab from './SampleTab';\r\nimport BatchhistoryTab from './BatchhistoryTab';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AddSample from './AddSample';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ViewInfo from './ViewInfo';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialIqc from './AddMaterialIqc';\r\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\r\nimport BatchResultTab from './BatchResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BatchCreation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sampleState = { skip: 0, take: this.props.Login.settings ?\r\n             parseInt(this.props.Login.settings[14]) : 5 };\r\n        \r\n        const histortState = { skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5 };\r\n                \r\n        const iqcsampleState = { skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5 };\r\n\r\n        const viewstate ={skip: 0, take: this.props.Login.settings ?\r\n            parseInt(this.props.Login.settings[14]) : 5};\r\n                    \r\n        this.state = {\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedFilter: {},\r\n            sampleState,\r\n            histortState,\r\n            iqcsampleState,\r\n            viewstate,\r\n            selectedRecord :{},\r\n            //confirmmsg:this.ConfirmMessage.bind(this),\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            sidebarview: false\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.searchFieldList = [\"stestname\",\"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\",\r\n        \"stransactionstatus\", \"sdecision\",\"sbatcharno\",\"stransdisplaystatus\"];\r\n\r\n        this.sampleMandatoryFields = [];\r\n        this.copyMandatoryFields = [];\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n            // if (props.Login.masterStatus !== \"\") {\r\n            //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n            //        if(props.Login.operation == \"initiate\"){\r\n            //         toast.warn(props.Login.masterStatus);\r\n            //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\r\n            //        }\r\n            //     }\r\n            // }\r\n            if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n    \r\n            if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n                toast.error(props.Login.error)\r\n                props.Login.error = \"\";\r\n            }\r\n            if (props.Login.selectedRecord === undefined) {\r\n                return { selectedRecord: {} }\r\n            }\r\n            return null;\r\n            // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n            //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n            // }\r\n        }\r\n    \r\n        \r\n     // const sampleColumnList = [];\r\n    \r\n    // if (props.nneedsubsample){\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n    // }\r\n    // else{\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n    // }\r\n    \r\n    completeMandatoryFields = [\r\n        { \r\n          \"idsName\":  \"IDS_BATCHCOMPLETEDATE\",\r\n          //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n          \"dataField\": \"dtransactiondate\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n    \r\n    initiateMandatoryFields = [\r\n        { \r\n          \"idsName\":  \"IDS_BATCHINITIATEDATE\",\r\n          //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n          \"dataField\": \"dtransactiondate\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n    \r\n\r\n    materialIqcMandatory = [\r\n        \r\n        { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"smaterialname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"sinventoryid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n    ]\r\n\r\n     getSamples=(selectedbatchmaster)=>{\r\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode\r\n        if(selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || \r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }else{\r\n            this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                this.props.Login.userInfo,this.props.Login.masterData,\r\n                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? \r\n\t\t\t    this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n\t\t\t    this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,addSampleID)\r\n            }\r\n     }\r\n\r\n     getIqcSamples = (SelectedBatchmaster) =>{\r\n        if(SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }else if (this.props.Login.masterData.Samples.length==0){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDIQC\" }));\r\n        }else{\r\n        let addcontrolcode=this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        let inputData={};\r\n        inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? \r\n        this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n        // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n        inputData['naddcontrolCode']=addcontrolcode;\r\n            // inputData['section']={\r\n            //         nsectioncode: SelectedBatchmaster.nsectioncode\r\n           // };\r\n            inputData['nsectioncode']=SelectedBatchmaster.nsectioncode;\r\n            inputData['userInfo']=this.props.Login.userInfo;\r\n            inputData['nbatchmastercode']= SelectedBatchmaster.nbatchmastercode;\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n        this.props.getIqcSamples(inputData,this.props.Login.masterData);\r\n      }\r\n    }\r\n\r\n     deleteRecord = (inputData) => {\r\n\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else{\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\r\n                    fetchUrl: \"batchcreation/getSampleTabDetails\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let jsondata = inputData.selectedRecord;\r\n                const inputParam = {\r\n                    classUrl: \"batchcreation\",\r\n                    methodUrl: \"Sample\",\r\n                    postParam,\r\n                    inputData: {\r\n                        Sample: {\r\n                            \"sarno\":inputData.selectedRecord.sarno,\r\n                            \"ssamplearno\":inputData.selectedRecord.ssamplearno,\r\n                            \"stestname\":inputData.selectedRecord.stestname,\r\n                            \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode,\r\n\r\n                        },\r\n                        \"userInfo\": this.props.Login.userInfo,\r\n                        nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\r\n                        masterData : {...this.props.Login.masterData,\r\n                                      \"samples\":[]\r\n                                    },\r\n                        nbatchmastercode : inputData.selectedRecord.nbatchmastercode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                        //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                        //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                        nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                        nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                    },\r\n                    operation: inputData.operation,\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    dataState: this.state.dataState\r\n                }\r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                            operation: inputData.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.deleteSampleAction(inputParam.inputData);\r\n                }\r\n            }\r\n       }\r\n\r\n     cancelRecord = (inputData) => {\r\n\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else{\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: inputData.nbatchsampleiqccode,\r\n                    fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                const inputParam = {\r\n                    classUrl: \"batchcreation\",\r\n                    methodUrl: \"IQCSample\",\r\n                    postParam,\r\n                    inputData: {\r\n                        iqcSample:inputData.selectedRecord,\r\n                        nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\r\n                        masterData : this.props.Login.masterData,\r\n                        nbatchmastercode : inputData.selectedRecord.nbatchmastercode,\r\n                        nmaterialinventtranscode : inputData.selectedRecord.nmaterialinventtranscode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                        //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                        //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                         nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                         nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                         nsampletypecode : this.props.Login.masterData.realSampleTypeValue ? \r\n                                   this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\r\n                    },\r\n                    operation: inputData.operation,\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    dataState: this.state.dataState\r\n                }\r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, \r\n                            screenData: { inputParam,\r\n                                          masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                            operation: inputData.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.cancelIQCSampleAction(inputParam.inputData);\r\n                }\r\n            }\r\n       }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n\r\n        if (screenName == \"IDS_BATCHHISTORY\") {\r\n         \r\n                let inputData = {\r\n                    masterData:this.props.Login.masterData,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n                }\r\n                this.props.getBatchhistoryAction(inputData, true);\r\n        }else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\r\n         \r\n            let inputData = {\r\n                masterData:this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchIqcSampleAction(inputData, true);\r\n         }else if(screenName == \"IDS_RESULTS\"){\r\n            let inputData = {\r\n                masterData:this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nneedsubsample : this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchViewResultAction(inputData, true);\r\n         }else{    \r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { screenName,batchactiveKey : screenName }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n         }\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Samples, event.dataState),\r\n            sampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchHistoryChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\r\n            histortState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchIqcChangeChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\r\n            iqcsampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateViewChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\r\n            viewstate: event.dataState\r\n        });\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n          return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \r\n                   \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\r\n                    \"width\": \"150px\", \"columnSize\": \"4\" };\r\n    \r\n        });\r\n        return temparray;\r\n    \r\n      }\r\n\r\n      getApprovalVersion = (data) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n         \r\n        inputData = {\r\n            needFilterSubmit : \"false\",\r\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n            fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n            toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n            nregtypecode: data.item.nregtypecode,\r\n            userInfo: this.props.Login.userInfo,\r\n            nregsubtypecode: data.item.nregsubtypecode,\r\n            masterData : this.props.Login.masterData,\r\n            isneedapprovalfilter : true,\r\n            defaultRegistrationSubType:data.item,\r\n            isneedrealFilterStatus:\"false\",\r\n            realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n            realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n            realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n        }\r\n        this.props.getBCApprovalConfigVersion(inputData)\r\n    \r\n      }\r\n    \r\n   tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_SAMPLE\",\r\n        <SampleTab\r\n            sample={this.props.Login.masterData.Samples || []}\r\n            dataResult={process(this.props.Login.masterData.Samples || [], this.state.sampleState)}\r\n            dataState={this.state.sampleState}\r\n            controlMap={this.state.controlMap}\r\n            dataStateChange={this.dataStateChange}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteRecord={this.deleteRecord}\r\n            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreItem) || []}\r\n            methodUrl={\"Samples\"}\r\n            getSamples={() => this.getSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n            // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n            //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\r\n            //inputParam={this.props.Login.inputParam}\r\n            screenName=\"IDS_SAMPLE\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n        />\r\n        )\r\n        tabMap.set(\"IDS_BATCHIQCSAMPLE\",\r\n        <BatchIqcSampleTab\r\n            iqcsample={this.props.Login.masterData.iqcsample || []}\r\n            dataResult={process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState)}\r\n            dataState={this.state.iqcsampleState}\r\n            controlMap={this.state.controlMap}\r\n            dataStateChange={this.dataStateBatchIqcChangeChange}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            userInfo={this.props.Login.userInfo}\r\n            cancelRecord={this.cancelRecord}\r\n            methodUrl={\"IQCSample\"}\r\n            getIqcSamples={() => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n            screenName=\"IDS_BATCHIQCSAMPLE\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n        />\r\n        )\r\n    if(this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.INITIATED\r\n    || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.COMPLETED){\r\n        tabMap.set(\"IDS_RESULTS\",\r\n        <BatchResultTab\r\n           ELNTest={this.props.Login.masterData.ELNTest || []}\r\n            resultview={this.props.Login.masterData.Resultview || []}\r\n            dataResult={process(this.props.Login.masterData.Resultview || [], this.state.viewstate)}\r\n            dataState={this.state.viewstate}\r\n            dataStateChange={this.dataStateViewChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            methodUrl={\"BatchViewResult\"}\r\n            screenName=\"IDS_RESULTS\"\r\n            intl={this.props.intl}\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            selectedfilename = {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n\r\n        />\r\n        )\r\n    }\r\n\r\n        tabMap.set(\"IDS_BATCHHISTORY\",\r\n        <BatchhistoryTab\r\n            batchhistory={this.props.Login.masterData.Batchhistory || []}\r\n            dataResult={process(this.props.Login.masterData.Batchhistory || [], this.state.histortState)}\r\n            dataState={this.state.histortState}\r\n            dataStateChange={this.dataStateBatchHistoryChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            methodUrl={\"Batchhistory\"}\r\n            screenName=\"IDS_BATCHHISTORY\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n\r\n        />\r\n        )\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n           \r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    fromDate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    toDate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    defaultRegistrationType : this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType : this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType :this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    fromDate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    toDate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    defaultRegistrationType : this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType : this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType :this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCRegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit : \"false\",\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    defaultSampleType:this.props.Login.masterData.defaultSampleType,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCRegistrationSubType(inputData,this.props.Login.masterData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n                const nregsubtypecode = this.state;\r\n                //this.setState({ nregsubtypecode:event });\r\n                this.getApprovalVersion(event);\r\n                \r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit : \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getBCFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                // inputData = {\r\n                //     nflag: 4,\r\n                //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                //     todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                //     napprovalversioncode: event.value,\r\n                //     userinfo: this.props.Login.userInfo,\r\n                //     defaultApprovalConfigVersion: event.item,\r\n                //     masterData: this.props.Login.masterData,\r\n                //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                // }\r\n                // this.props.getBCJobStatus(inputData)\r\n                const ApprovalVersionValue = this.state;\r\n                this.setState({ ApprovalVersionValue:event });\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    needFilterSubmit : \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue:event });\r\n                \r\n            }\r\n            else if(fieldname === \"test\") {\r\n\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue:event });\r\n            }else{\r\n                const selectedRecord = this.state;\r\n                this.setState({ selectedRecord:event });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilterDateChange = (dateValue,dateName) => {\r\n            const { selectedFilter } = this.state;\r\n            if (dateValue === null) {\r\n                dateValue = new Date();\r\n            }\r\n            selectedFilter[dateName] = dateValue;\r\n            this.setState({ selectedFilter });\r\n    \r\n    }\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let addedComponentList = this.state.addedComponentList || [];\r\n    //     if (checked) {\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n    //                 addedComponentList.push({ ...item, selected: false });\r\n    //                 item.selected = checked;\r\n    //                 return item;\r\n    //             } else {\r\n    //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n    //                 olditem.selected = checked;\r\n    //                 return olditem;\r\n    //             }\r\n\r\n    //         });\r\n\r\n\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         let addedComponentData = this.state.addedComponentList || [];\r\n    //         let deletedListdData = this.state.deletedList || [];\r\n\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             item.selected = checked;\r\n    //             return item;\r\n    //         });\r\n\r\n    //         // console.log(\"data:\",data1, data2);\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    // }\r\n   \r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        // let checkRepeatComponent;\r\n        //  let addedComponentList = this.state.addedComponentList || [];\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                    // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n                    // if(checkRepeatComponent.length>0){\r\n                    //     selectAll = true;\r\n                    // }else{\r\n                    //     selectAll = false;\r\n                    // }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            //if (gridType === \"originalgrid\"){\r\n            selectAll = false;\r\n            // }\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n\r\n    \r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let sampleList = this.state.samples || [];\r\n        let addedSamplesList=[];\r\n        if (checked) {\r\n            //const data = event.dataItems.map(item => {\r\n            const data = event.target.props.data.map(item => {\r\n                if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n                    sampleList.push({ ...item, selected: false });\r\n                    item.selected = checked;   \r\n                    let newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item    \r\n                    addedSamplesList.push(newItem);\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = olditem\r\n                    newItem[\"jsonuidata\"]['samplelist'] = olditem\r\n                    addedSamplesList.push(newItem);\r\n                    return olditem;\r\n                    \r\n                }\r\n\r\n            });\r\n\r\n\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList:addedSamplesList,\r\n                sampleList,\r\n                addSelectAll: checked, \r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n        else {\r\n            // let sampleListData = this.state.sampleList || [];\r\n            // let deletedListdData = this.state.sampleList || [];\r\n\r\n            let sampleListData = this.state.samples || [];\r\n            let deletedListdData = this.state.samples || [];\r\n\r\n            const data = this.state.samples.map(item => {\r\n                sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            // console.log(\"data:\",data1, data2);\r\n            this.setState({\r\n                samples: data, \r\n                addedSamplesList: sampleListData,\r\n                deletedList: deletedListdData,\r\n                addSelectAll: checked, \r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n\r\n        // const data = this.state.addComponentDataList.map(item=>{\r\n        //     if (checked){\r\n        //         addedComponentList.push({...item, selected:false});\r\n        //     }\r\n        //     else{\r\n        //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\r\n        //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \r\n        //     }  \r\n        //     item.selected = checked;\r\n        //     return item;\r\n        // });\r\n\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n\r\n    selectionChange = (event) => {\r\n        let addedSamplesList=this.state.addedSamplesList || [];\r\n        //let addedSamplesList= [];\r\n        let samples = this.state.samples || [];\r\n        const samplesList = this.state.samples.map(item => {\r\n            if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n                item.selected = !event.dataItem.selected;\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                }\r\n                else {\r\n                    // if(addedSamplesList.length === 0){\r\n                      addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                    //   }else{\r\n                    //     this.state.samples.map((item1,index) => { \r\n                    //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\r\n                    //             if(this.state.samples.length == 1){\r\n                    //                 addedSamplesList=[];\r\n                    //             }else{\r\n                    //                 const newItem = JSON.parse(JSON.stringify(item1));\r\n                    //                 newItem.selected = false;\r\n                    //                 newItem[\"jsondata\"]={};\r\n                    //                 newItem[\"jsonuidata\"]={};\r\n                    //                 newItem[\"jsondata\"]['samplelist'] = item1\r\n                    //                 newItem[\"jsonuidata\"]['samplelist'] = item1\r\n                    //                 //addedSamplesList.push(newItem);\r\n                    //                 addedSamplesList = item1;\r\n                    //             }  \r\n                    //         }\r\n                    //     } \r\n                    //   )\r\n                 }\r\n            }\r\n            return item;\r\n        });\r\n        ///samplesList = addedSamplesList;\r\n        this.setState({\r\n            samplesList,\r\n            addedSamplesList,\r\n            samples,\r\n            initialList :addedSamplesList,\r\n            addSelectAll: this.valiateCheckAll(samplesList),\r\n            deleteSelectAll: this.valiateCheckAll(samplesList)\r\n        });\r\n    }\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        console.log(\"handle save:\", selectedRecord);\r\n        mandatoryFields = [\r\n            { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n        ]\r\n        let selectedSpec = this.props.Login.selectedSpec;\r\n        \r\n        if(selectedSpec.nallottedspeccode !== \"\") {\r\n        selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\r\n        selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\r\n        selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedSpec,\r\n                openModal:true,\r\n                openSpecModal:false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    } else {\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n    }\r\n\r\n    }\r\n\r\n    render() {\r\n        let reportActionList = [];\r\n        let batchMandatoryFields = [];\r\n\r\nif (this.props.Login.operation === \"update\") {\r\n    batchMandatoryFields.push(\r\n        \r\n        { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n    );\r\n    \r\n}\r\nelse {\r\n    batchMandatoryFields.push(\r\n        { idsName: \"IDS_SECTION\", dataField: \"ssectionname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_TEST\", dataField: \"stestname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n    );\r\n}\r\n        const getBatch = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            operation: \"get\", \r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"Batchcreation\", keyName: \"batchcreation\"\r\n        };\r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || this.props.Login.masterData && this.props.Login.masterData.realFromDate ? rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.realFromDate):undefined;\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || this.props.Login.masterData && this.props.Login.masterData.realToDate ? rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.realToDate):undefined;\r\n        const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\r\n        const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\r\n        const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\r\n        const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\r\n        const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            primaryeyField: \"nreleasebatchcode\",\r\n            primaryKeyValue: undefined, \r\n            operation: \"create\", \r\n            //inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, \r\n            ncontrolCode: addId,\r\n            nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate ,\r\n            masterData:this.props.Login.masterData,\r\n            fromdate:this.props.Login.masterData.fromDate,\r\n            todate:this.props.Login.masterData.toDate,\r\n            nregtypecode : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n            napprovalconfigcode : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            ntranscode  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus:transactionStatus.NA,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n        };\r\n\r\n        const viewInfoFields = [\r\n        { \"fieldName\": \"sbatcharno\", \"label\": \"IDS_BATCHARNO\"},\r\n        { \"fieldName\": \"ssectionname\", \"label\": \"IDS_SECTION\"},\r\n        { \"fieldName\": \"stestname\", \"label\": \"IDS_TESTNAME\"},\r\n        { \"fieldName\": \"sinstrumentcatname\", \"label\": \"IDS_INSTRUMENTCATEGORY\" },\r\n        { \"fieldName\": \"sinstrumentid\", \"label\": \"IDS_INSTRUMENTID\" },\r\n        { \"fieldName\": \"sinstrumentname\", \"label\": \"IDS_INSTRUMENTNAME\" },\r\n        { \"fieldName\": \"sproductname\", \"label\": \"IDS_SAMPLETYPE\" },\r\n        { \"fieldName\": \"stransdisplaystatus\", \"label\": \"IDS_STATUS\" },\r\n        { \"fieldName\": \"username\", \"label\":\r\n        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\":\r\n        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\"\r\n        :\"IDS_BATCHCREATEDBY\"}\r\n      ];\r\n\r\n        let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\r\n\r\n        if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\r\n            stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\r\n        }\r\n\r\n      \r\n         let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, \r\n            this.props.Login.userInfo);\r\n            \r\n        const editParam = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            operation: \"update\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            naddcontrolCode:addId,\r\n            nsampletypecode:this.props.Login.masterData.realSampleTypeValue ? \r\n                            this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\r\n            nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n                           this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n            this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\r\n        };\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Batchmaster\", \r\n            selectedObject: \"SelectedBatchmaster\", \r\n            primaryKeyField: \"nbatchmastercode\",\r\n            fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n           \r\n            fecthInputObject: {\r\n                fromDate : obj.fromDate,\r\n                toDate : obj.toDate,\r\n                userInfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                napprovalconfigcode:this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\r\n                ntranscode:this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\r\n                nsampletypecode:this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA,\r\n                //fromDate, toDate, \r\n                //stransactionstatuscode,\r\n                //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\r\n            },\r\n            masterData: this.props.Login.masterData, \r\n            //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\r\n            searchFieldList: this.searchFieldList\r\n        }\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_BATCHSTATUS\",\r\n                \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\r\n            }\r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // }\r\n        ]\r\n\r\n        return (\r\n        <>\r\n            {/* Start of get display*/}\r\n            {/* <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\"> */}\r\n            {/* <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\"> */}\r\n            {/* <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\"> */}\r\n            {/* <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"> */}\r\n            {/* //</><div className=\"client-listing-wrap mtop-4\"> */}\r\n            <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \">\r\n            <Affix top={53}>\r\n            <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n            </Affix>\r\n            \r\n                <Row noGutters={true}>\r\n                    <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                        <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                            {!this.state.sidebarview ?\r\n                                <i class=\"fa fa-less-than\"></i> :\r\n                                <i class=\"fa fa-greater-than\"></i> \r\n                            }\r\n                        </span>\r\n                            <ListMaster\r\n                                masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.Batchmaster || [])}\r\n                                selectedMaster={this.props.Login.masterData.SelectedBatchmaster}\r\n                                primaryKeyField=\"nbatchmastercode\"\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterData={this.props.Login.masterData}\r\n                                //getMasterDetail={this.props.getSelectedBatchCreationDetail}\r\n                                getMasterDetail={(batch) => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                inputParam = {getBatch}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_BATCHCREATION\" })}\r\n                                //mainField=\"stestname\"\r\n                                mainField=\"sbatcharno\"\r\n                                firstField=\"stestname\"\r\n                                secondField=\"sinstrumentname\"\r\n                                selectedListName=\"SelectedBatchmaster\"\r\n                                objectName=\"BatchCreation\"\r\n                                listName=\"IDS_BATCHCREATION\"\r\n                                needValidation={false}\r\n                                hidePaging={false}\r\n                                // subFields={\r\n                                //     [\r\n                                //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\r\n                                //         { [designProperties.VALUE]: \"sinstrumentname\" },\r\n                                //         // { [designProperties.VALUE]: \"smahname\" },\r\n                                //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\r\n                                //     ]\r\n                                // }\r\n                                needFilter={true}\r\n                                needMultiSelect={false}\r\n                                subFieldsLabel={true}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                searchListName=\"searchedData\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                isClearSearch={this.props.Login.isClearSearch}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                               // handlePageChange={this.handlePageChange}\r\n                                addId={addId}\r\n                                showFilterIcon={true}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getBatchSection(addParam)}\r\n                               // openModal={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                commonActions={\r\n                                    // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Button>\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            //onClick={() => this.reloadData(false)} \r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                        </Button>\r\n\r\n                                    </ProductList>\r\n                                    // </Tooltip>\r\n                                }\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":<BatchCreationFilter\r\n                                        fromDate={this.state.selectedFilter[\"fromDate\"] !=undefined ?\r\n                                        rearrangeDateFormat(this.props.Login.userInfo,this.state.selectedFilter[\"fromDate\"])  : this.fromDate}\r\n                                        toDate={this.state.selectedFilter[\"toDate\"] !=undefined  ? \r\n                                        rearrangeDateFormat(this.props.Login.userInfo,this.state.selectedFilter[\"toDate\"]) :  this.toDate}\r\n                                        SampleType={this.state.SampleType || []}\r\n                                        SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                        RegType={this.state.RegistrationType || []}\r\n                                        RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                        RegSubType={this.state.RegistrationSubType || []}\r\n                                        RegSubTypeValue={this.state.nregsubtypecode || []}\r\n                                        DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                        FilterStatus={this.state.BCFilterStatus || []}\r\n                                        FilterStatusValue={this.state.FilterStatusValue || []}\r\n                                        ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                        ApprovalVersionValue={this.state.ApprovalVersionValue || []}\r\n                                        REJobStatus={this.state.REJobStatus || []}\r\n                                        JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                        Test={this.state.Testvalues || []}\r\n                                        TestValue={this.props.Login.masterData.selectedTestSynonym || []}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        handleFilterDateChange={this.handleFilterDateChange}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                        DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                    />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                                {/* <Row> */}\r\n                                    {/* <Col md={12}> */}\r\n                                        <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                                {this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0\r\n                                                    && this.props.Login.masterData.SelectedBatchmaster ?\r\n                                                    <>\r\n                                                        <Card.Header>\r\n                                                            <Card.Title className=\"product-title-main\">\r\n                                                                {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n                                                            </Card.Title>\r\n                                                            <Card.Subtitle>\r\n                                                                <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {\r\n                                                                    this.props.Login.masterData.SelectedBatchTestTAT&&this.props.Login.masterData.SelectedBatchTestTAT.Deviation&&this.props.intl.formatMessage({ id: \"IDS_DEVIATION\" })+\" : \"+this.props.Login.masterData.SelectedBatchTestTAT.Deviation\r\n                                                                    }\r\n                                                                              \r\n                                                                            <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED  ? \"outline-initiate\"\r\n                                                                            : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" \r\n                                                                            : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" \r\n                                                                            : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                                                {this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus}\r\n                                                                            </MediaLabel>\r\n                                                                        </h2>              \r\n                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                    <div className=\"d-inline\">\r\n\r\n                                                                        {/* <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHTAT\" })}\r\n                                                                            // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                            onClick={() => this.props.batchTAT(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>      */}\r\n\r\n                                                                        <Nav.Link name=\"openelnsheet\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(elnSheetId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" })}\r\n                                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                                        >\r\n                                                                          <Image src={elnimage} alt=\"filer-icon action-icons-wrap\" \r\n                                                                           width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                           onClick={() => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster,cancelId)} \r\n                                                                           data-place=\"left\" \r\n                                                                         />                                                           \r\n                                                                        </Nav.Link>\r\n\r\n                                                                        <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWINFO\" })}\r\n                                                                        // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                        onClick={() => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                        >\r\n                                                                        <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>        \r\n\r\n                                                                        <Nav.Link name=\"editBatchCreation\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            onClick={() => this.fetchEditData(editParam)}\r\n                                                                            // onClick={() => this.props.getActiveBatchCreationService(editParam,\r\n                                                                            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                            //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\r\n                                                                            />\r\n                                                                        </Nav.Link>\r\n                                                                       { \r\n                                                                      // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\r\n                                                                        <Nav.Link name=\"initiateBatchCreation\"                                                        //  data-for=\"tooltip-common-wrap\" \r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHINITIATE\" })} \r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            //role=\"button\"\r\n                                                                            onClick={() => this.testPopUpStartActions(testStartId)}\r\n                                                                             >\r\n                                                                            <FontAwesomeIcon icon={faPlay} \r\n                                                                            />\r\n                                                                        {/* </FontIconWrap>  */}\r\n                                                                        </Nav.Link>\r\n                                                                       // :\"\"\r\n                                                                        }\r\n\r\n                                                                        <Nav.Link name=\"completeBatchCreation\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                            onClick={() => this.completePopUpStartActions(completeId)}\r\n                                                                            //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\r\n                                                                            // onClick={() => this.props.validateBatchComplete({\r\n                                                                            //     masterData: this.props.Login.masterData,\r\n                                                                            //     userInfo: this.props.Login.userInfo,\r\n                                                                            //     userRoleControlRights: this.props.Login.userRoleControlRights,\r\n                                                                            //     ncontrolCode: completeId,\r\n                                                                            //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n                                                                            // })}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faCheckCircle}\r\n                                                                            // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\r\n                                                                            />\r\n                                                                        </Nav.Link>\r\n\r\n                                                                        <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}\r\n                                                                               \r\n                                                                        >\r\n                                                                          <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                        </Nav.Link>\r\n\r\n\r\n                                                                        <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                                        >\r\n                                                                          <Image src={reject} alt=\"filer-icon action-icons-wrap\" \r\n                                                                           width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                           onClick={() => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster,cancelId)} \r\n                                                                           data-place=\"left\" \r\n                                                                         />                                                           \r\n                                                                        </Nav.Link>\r\n                                                                   \r\n                                                                        {reportActionList.length>0?\r\n                                                                            <CustomPopover\r\n                                                                                nav={true}\r\n                                                                                data={reportActionList}\r\n                                                                                Button={true}\r\n                                                                                hideIcon={true}\r\n                                                                                btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                                textKey=\"value\"\r\n                                                                                dynamicButton={(value) => this.reportMethod(value)}\r\n                                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                            />\r\n                                                                            :\r\n                                                                        \"\"}\r\n\r\n                                                                    </div>\r\n                                                                    {/* </Tooltip> */}\r\n                                                                </div>\r\n\r\n                                                            </Card.Subtitle>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <Row className=\"no-gutters\">\r\n                                                               <Col md={12}>\r\n                                                                  <Card className=\"at-tabs\">\r\n                                                                    <CustomTab\r\n                                                                     activeKey={this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\"}\r\n                                                                     tabDetail={this.tabDetail()} onTabChange={this.onTabChange} \r\n                                                                     />\r\n                                                                   </Card>\r\n                                                               </Col>\r\n                                                            </Row>\r\n                                                            {/* <CustomTab \r\n                                                            activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_SAMPLE\"}\r\n                                                            tabDetail={this.tabDetail()} onTabChange={this.onTabChange} /> */}\r\n                                                        </Card.Body>\r\n                                                    </>\r\n                                                    : \"\"\r\n                                                }\r\n                                        </Card>\r\n                                        </ContentPanel>\r\n                                    {/* </Col> */}\r\n                                {/* </Row> */}\r\n                         </Col>                  \r\n                  </Row>\r\n              </div>\r\n\r\n              <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            // show={this.state.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    {/* <Iframe url={this.state.enlLink} */}\r\n                                    <Iframe \r\n                                      // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\r\n                                        url={this.props.Login.masterData.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n              </PortalModal>\r\n            {/* </ListWrapper> */}\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for User Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {\r\n                this.props.Login.openModal ?\r\n                    <SlideOutModal \r\n                        show={this.props.Login.openModal}\r\n                        size={\"lg\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.operation===\"createSample\" ? this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" }) \r\n                        : this.props.Login.operation===\"initiate\" || this.props.Login.operation===\"view\" || this.props.Login.operation===\"complete\"? this.props.intl.formatMessage({ id: \"IDS_BATCH\" })\r\n                        : this.props.Login.operation===\"createiqcsample\" ? this.props.intl.formatMessage({ id: \"IDS_BATCHIQCSAMPLE\" })\r\n                        : this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === \"create\" || this.props.Login.operation ===\"update\"  ? \r\n                         batchMandatoryFields \r\n                        //  : this.props.Login.operation === \"initiate\"  ?\r\n                        //    this.initiateMandatoryFields \r\n                        //  : this.props.Login.operation === \"complete\" ?\r\n                        //    this.completeMandatoryFields\r\n                         : this.props.Login.operation === \"createiqcsample\" ? \r\n                           this.materialIqcMandatory \r\n                         :  []\r\n                        }\r\n                        showSaveContinue={this.state.showSaveContinue}\r\n                        noSave={this.props.Login.operation === \"view\" ? true : false}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                           : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                            <AddBatchCreation\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                Test={this.state.Testvalues || []}\r\n                                selectedInstrumentCategory={this.state.selectedInstCategory}\r\n                                InstrumentCategory={this.state.InstrumentCategory}\r\n                                Instrument={this.state.Instrument}\r\n                                selectedInstrument={this.state.selectedInstrument}\r\n                                productCategory={this.state.ProductCategory}\r\n                                selectedProductCategory={this.state.selectedProductCategory}\r\n                                TestValue={this.state.selectedTestSynonym || []}\r\n                                product={this.state.Product || []}\r\n                                instrumentID={this.state.InstrumentID || []}\r\n                                selectedProduct={this.state.selectedProduct || []}\r\n                                studyPlanList={this.props.Login.studyPlanList || []}\r\n                                manufacturerList={this.props.Login.productManufacturerList || []}\r\n                                maHolderList={this.props.Login.maHolderList || []}\r\n                                timeZoneList={this.props.Login.timeZoneList || []}\r\n                                selectedBacthCreation={this.props.Login.masterData.SelectedBatchmaster || {}}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                selectedInstrumentId={this.state.selectedInstrumentId}\r\n                                onMultiColumnValue={this.onMultiColumnValue}\r\n                                onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                batchCreationEditStatusList={this.props.Login.batchCreationEditStatusList}\r\n                                Section={this.state.Section}\r\n                                selectedSection={this.state.selectedSection}\r\n                            />\r\n                            :this.props.Login.operation === \"createSample\" ?\r\n                            <AddSample\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                getProductByCategory={this.getProductByCategory}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                productCategoryList={this.props.productCategoryList}\r\n                                productList={this.props.productList}\r\n                                componentList={this.props.componentList}\r\n                                getDataForAddComponent={this.getDataForAddComponent}\r\n                                clearComponentInput={this.props.clearComponentInput}\r\n                                samples={this.state.samples || []}\r\n                                headerSelectionChange={this.headerSelectionChange}\r\n                                selectionChange={this.selectionChange}\r\n                                addedComponentList={this.state.addedComponentList || []}\r\n                                addedHeaderSelectionChange={this.addedHeaderSelectionChange}\r\n                                addedSelectionChange={this.addedSelectionChange}\r\n                                //dataStateChange={this.dataStateChange} \r\n                                userRoleControlRights={this.props.userRoleControlRights}\r\n                                controlMap={this.props.controlMap}\r\n                                inputParam={this.props.inputParam}\r\n                                screenName={this.props.screenName}\r\n                                addSelectAll={this.state.addSelectAll}\r\n                                deleteSelectAll={this.state.deleteSelectAll}\r\n                                onDeleteSelectedComponent={this.onDeleteSelectedComponent}\r\n                                componentPopupSkip={this.props.componentPopupSkip}\r\n                                componentPopupTake={this.props.componentPopupTake}\r\n                                componentPageSizes={this.props.componentPageSizes}\r\n                                nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                           />\r\n                           :this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ?\r\n                           <AddBatchinitiate\r\n                                userInfo={this.props.Login.userInfo}\r\n                                operation={this.props.Login.operation}\r\n                                handleDateChange={this.handleDateChange}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                           />\r\n                           :this.props.Login.operation === \"view\" ?\r\n                           <Card className='one' >\r\n                           <Card.Body>\r\n                           <ViewInfo\r\n                              userInfo={this.props.Login.userInfo}\r\n                              selectedRecordView={this.props.Login.masterData.selectedRecordView}\r\n                              viewInfoFields={viewInfoFields}\r\n                           />\r\n                           </Card.Body>\r\n                                </Card>\r\n                           : this.props.Login.operation === \"createiqcsample\" ?\r\n                           <AddMaterialIqc\r\n                                userInfo={this.props.Login.userInfo}\r\n                                operation={this.props.Login.operation}\r\n                                materialCategory={this.state.MaterialCategory}\r\n                                selectedMaterialType={this.state.selectedMaterialType}\r\n                                selectedMaterialCategory={this.state.selectedMaterialCategory}\r\n                                onComboChange={this.onComboChange}\r\n                                selectedMaterial={this.state.selectedMaterial}\r\n                                screenName = {this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                handleSaveClick ={this.handleSaveClick}\r\n                                material={this.state.Material}\r\n                                materialInventory={this.state.MaterialInventory}\r\n                                AddSpec={this.AddSpec}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                                loadSpec = {this.props.Login.loadSpec}\r\n                                selectedMaterialInventory={this.state.selectedMaterialInventory}\r\n                                selectedInventoryUnit={this.props.Login.masterData.selectedInventoryUnit}\r\n                                AgaramTree={this.props.Login.AgaramTree}\r\n                                openNodes={this.props.Login.OpenNodes}\r\n                                onTreeClick={this.onTreeClick}\r\n                                focusKey={this.props.Login.FocusKey}\r\n                                activeKey={this.props.Login.batchactiveKey}\r\n                                Specification={this.props.Login.Specification}\r\n                                selectedSpec={this.props.Login.selectedSpec}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onSpecChange={this.onspecChange}  \r\n                                openSpecModal={this.props.Login.openSpecModal}   \r\n                                closeModal={this.closeModal}             \r\n                         /> : \"\"\r\n                        }\r\n                    /> \r\n                    : \"\"\r\n            }\r\n            {/* End of Modal Sideout for Creation */}\r\n            {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    ConfirmDelete = (selectedBatch, deleteId,operation) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteBatchCreation(selectedBatch,deleteId,operation));\r\n    };\r\n\r\n\r\n    completePopUpStartActions = (completeId) => {\r\n    // if(this.props.Login.masterData.nneedtestinitiate === true){\r\n      if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || \r\n        this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT ||\r\n        this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED\r\n        ){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }\r\n    //    }else \r\n      else if (this.props.Login.masterData.Samples.length==0){\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n       }else{\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         openModal: true, \r\n                //         completeId : completeId,\r\n                //         masterData: this.props.Login.masterData,\r\n                //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                //         operation: \"complete\"\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n\r\n                let inputData = {};\r\n                inputData[\"openModal\"] = true;\r\n                inputData[\"completeId\"]= completeId;\r\n                inputData[\"selectedRecord\"]= this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"operation\"] = \"complete\";\r\n                this.props.batchCompleteDatePopup(inputData,this.props.Login.masterData);\r\n            }\r\n       }\r\n      \r\n    AddSpec = (e) => {\r\n        if(this.state.selectedMaterial !== undefined && \r\n            this.state.selectedMaterialCategory !== undefined ){\r\n                let inputData = {};\r\n                inputData[\"nmaterialcode\"] =  this.state.selectedMaterial.value;\r\n                inputData[\"nmaterialcatcode\"]= this.state.selectedMaterialCategory.value;\r\n                inputData[\"ncategorybasedflow\"]= this.state.selectedMaterialCategory.item.ncategorybasedflow;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n                // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n                // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n                // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                this.props.getTreeByMaterial(inputData,this.state.selectedRecord,this.props.Login.masterData);\r\n            }else{\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLALLDETAILSTOADDSPEC\" }));\r\n            }\r\n    }\r\n\r\n\r\n    testPopUpStartActions = (testStartId) => {\r\n            if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n            }else if (this.props.Login.masterData.Samples.length==0){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n            }\r\n            // else if (this.props.Login.masterData.iqcsample.length==0){\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n            // }\r\n            else{\r\n                let inputData = {};\r\n                inputData[\"openModal\"] = true;\r\n                inputData[\"testStartId\"]= testStartId;\r\n                inputData[\"selectedRecord\"]= this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"operation\"] = \"initiate\";\r\n                this.props.batchInitiateDatePopup(inputData,this.props.Login.masterData);\r\n                \r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 openModal: true, \r\n            //                 testStartId : testStartId,\r\n            //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\r\n            //                 masterData: this.props.Login.masterData,\r\n            //                 operation: \"initiate\"\r\n            //             }\r\n            //         }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n           \r\n     }\r\n\r\n    testStartActions = (selectedmaster,testStartId) =>{\r\n        if(selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else if (this.props.Login.masterData.Samples.length==0){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n             }\r\n            //else if (this.props.Login.masterData.iqcsample.length==0){\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n            // }\r\n            else{\r\n                let inputData = {};\r\n                let jsonuidata=[];\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/initiateBatchcreation\",\r\n                    isSingleGet: true,\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                                                        return {jsonuidata:item}});\r\n                if(this.props.Login.masterData.iqcsample.length > 0){\r\n                    let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\r\n                    inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"ntransactiontestcode\"] = totalSample.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"nneedjoballocationiqc\"] =true\r\n                    inputData[\"isiqcdata\"] =true\r\n                }else{\r\n                    inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"isiqcdata\"] =false\r\n                    inputData[\"nneedjoballocationiqc\"] =false\r\n                }\r\n                    inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactionsamplecode).join(\",\");\r\n                    inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                   // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                    //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"batchsample\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n                    inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                        this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                    inputData[\"napproveconfversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] =  transactionStatus.INITIATED ||  transactionStatus.DRAFT;\r\n                    inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                    inputData[\"Batchhistory\"] ={\r\n                                            dtransactiondate : formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] !=undefined ? \r\n                                            this.state.selectedRecord[\"dtransactiondate\"]:this.props.Login.currentTime,false),\r\n                                            scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                                            };\r\n                    inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                    inputData[\"testStartId\"] = testStartId;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\r\n                    inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample :\"\";\r\n                    inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample :\"\";\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"initiate\"\r\n                    }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam,  \r\n                                masterData:{\r\n                                    ...masterData,\r\n                                    defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                    && this.props.Login.masterData.BCFilterStatus[1],\r\n                                    realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                    && this.props.Login.masterData.BCFilterStatus[1],\r\n\r\n                                }  \r\n                             },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchInitiateAction(inputData, this.props.Login.masterData,this.confirmMessage);\r\n                    }\r\n         }\r\n    }\r\n\r\nbatchSaveIQCActions =(selectedmaster)=>{\r\nif(this.state.selectedRecord.savailablequatity!==\"0.00\"){\r\n   if(parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)){\r\n     if(this.props.Login.selectedSpec.nallottedspeccode !== undefined &&  this.props.Login.selectedSpec.nallottedspeccode !== \"\" ){\r\n        let userInfo = {};\r\n        let inputRegistrationData = {};\r\n        let inputMaterialInventoryData = {};\r\n        let inputBatchData ={};\r\n        const map = {}\r\n        let batchCreationSampleData = {}; \r\n        let batchCreationTestData = {}; \r\n        let batchCreationSampleArray = [];\r\n        let batchCreationTestArray = [];\r\n        let samplecombinationuniqueArray=[];\r\n        let inputMaterialInventoryArrData=[];\r\n\r\n        batchCreationSampleData[\"nspecsampletypecode\"] =  this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? \r\n                this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\r\n        batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\r\n        batchCreationSampleData[\"slno\"] = 1;\r\n        batchCreationSampleArray.push(batchCreationSampleData);\r\n\r\n        inputRegistrationData[\"nallottedspeccode\"]= this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? \r\n                           this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\r\n        inputRegistrationData[\"ntemplatemanipulationcode\"]=this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\r\n        inputRegistrationData[\"nregsubtypeversioncode\"]=this.props.Login.masterData.nregsubtypeversioncode;\r\n        inputRegistrationData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode;\r\n        // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n        // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n        // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && \r\n                this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputRegistrationData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                 this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"nproductcatcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"nproductcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"ninstrumentcatcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"ninstrumentcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"nmaterialcatcode\"]=this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n        inputRegistrationData[\"nmaterialcode\"]=this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"jsondata\"] = {\r\n            nmaterialcode : this.state.selectedMaterial.value,\r\n            nmaterialcatcode:this.state.selectedMaterialCategory.value,\r\n            smaterialcatname :this.state.selectedMaterialCategory.label,\r\n            sinventoryid:this.state.selectedMaterialInventory.item.sinventoryid,\r\n            nmaterialinventorycode:this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n            smaterial:this.state.selectedMaterial.item.smaterialname,\r\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n            nmaterialtypecode: this.state.selectedMaterialType.value,\r\n            susedquantity:this.state.selectedRecord.susedquantity,\r\n            sunitname:this.props.Login.masterData.inventoryTransaction.sunitname,\r\n            savailablequatity:this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n            //materialtype:this.state.selectedMaterialType.label,\r\n            sremarks:this.state.selectedRecord.sremarks,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n        };\r\n        inputRegistrationData[\"jsonuidata\"] = {\r\n            nmaterialcode : this.state.selectedMaterial.value,\r\n            nmaterialcatcode:this.state.selectedMaterialCategory.value,\r\n            smaterialcatname :this.state.selectedMaterialCategory.label,\r\n            sinventoryid:this.state.selectedMaterialInventory.item.sinventoryid,\r\n            nmaterialinventorycode:this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n            smaterial:this.state.selectedMaterial.item.smaterialname,\r\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n            nmaterialtypecode: this.state.selectedMaterialType.value,\r\n            susedquantity:this.state.selectedRecord.susedquantity,\r\n            sunitname:this.props.Login.masterData.inventoryTransaction.sunitname,\r\n            savailablequatity:this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n            //materialtype:this.state.selectedMaterialType.label,\r\n            sremarks:this.state.selectedRecord.sremarks,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n            \r\n        };\r\n\r\n        // inputMaterialInventoryData = {\r\n        //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\r\n        // }\r\n        //  inputMaterialInventoryData = {\r\n        //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n        //         jsondata : {\r\n        //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n        //             nqtyused: this.state.selectedRecord.susedquantity\r\n        //         },\r\n        //         jsonuidata : {\r\n        //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n        //             nqtyused: this.state.selectedRecord.susedquantity\r\n        //         },\r\n        //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n        //  };\r\n\r\n         inputMaterialInventoryData[\"nmaterialinventorycode\"]= this.state.selectedMaterialInventory.item.nmaterialinventorycode;\r\n         inputMaterialInventoryData[\"jsondata\"] = {\r\n            ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n            nqtyused : this.state.selectedRecord.susedquantity,\r\n            savailablequatity:this.state.selectedRecord.savailablequatity,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n         }\r\n         //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\r\n         inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\r\n         inputMaterialInventoryData[\"jsonuidata\"]= {\r\n            ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n            nqtyused : this.state.selectedRecord.susedquantity,\r\n            savailablequatity:this.state.selectedRecord.savailablequatity,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n         }\r\n     \r\n\r\n        //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\r\n\r\n        batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA;\r\n //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n        batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n        batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n        batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode:transactionStatus.NA;\r\n   //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\r\n        batchCreationTestData[\"nrepeatcountno\"]=1 ;//--\r\n  //    batchCreationTestData[\"ntestretestno\"]=0;\r\n        batchCreationTestData[\"nparametercount\"]=1; //--\r\n        batchCreationTestData[\"slno\"]=1; //--\r\n           \r\n        batchCreationTestArray.push(batchCreationTestData);\r\n      \r\n   \r\n        map[\"nfilterstatus\"]=transactionStatus.PREREGISTER;\r\n        map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n        userInfo= this.props.Login.userInfo;\r\n        map[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n        map[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n        map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n        map[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;       \r\n        map[\"nmaterialcatcode\"]=this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n        map[\"nmaterialcode\"]=this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n        map[\"nmaterialtypecode\"]=this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\r\n\r\n        inputBatchData = this.props.Login.masterData.SelectedBatchmaster ;\r\n          \r\n        map['Registration'] = inputRegistrationData;\r\n        map['Batchsampleiqc'] = inputBatchData;\r\n        map['RegistrationSample'] = batchCreationSampleArray;\r\n        map['testgrouptest'] = batchCreationTestArray;\r\n        map['userInfo'] = userInfo; \r\n        map['samplecombinationunique'] =samplecombinationuniqueArray;\r\n        map['inputMaterialInventoryArrData']=inputMaterialInventoryData;\r\n        \r\n        const inputParam = {\r\n                        inputData: map,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHIQCSAVE\",\r\n                        operation:\"createiqc\"\r\n                    }\r\n\r\n        this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\r\n\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATIONS\" }));\r\n      }\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\" }));\r\n    }\r\n   }else{\r\n    toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOAVAILABLEQUANTITY\" }));\r\n   }\r\n }\r\n \r\n    cancelBatch = (selectedmaster,cancelId) =>{\r\n         if(selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED ){\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHINITIATEDRECORD\" }));\r\n                }else{\r\n                let inputData = {};\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/cancelBatch\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                        return {jsonuidata:item}});\r\n\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && \r\n                    this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                      this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                     this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                   // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"samples\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n                    this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT;\r\n                    // inputData[\"Batchhistory\"] ={\r\n                    //     dtransactiondate : formatInputDate(new Date(),true),\r\n                    //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                    //     };\r\n                    //inputData[\"completeId\"] = completeId;\r\n                    inputData[\"nneedtestinitiate\"]= this.props.Login.masterData &&  this.props.Login.masterData.nneedtestinitiate;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                    transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus \r\n                                                                                        && this.props.Login.masterData.BCFilterStatus[3];\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batch\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"cancel\"\r\n                    }\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, \r\n                                screenData: { inputParam, \r\n                                    masterData:{\r\n                                        ...masterData,\r\n                                        defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n                                        realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                                    } \r\n                                },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchCancelAction(inputData, this.props.Login.masterData);\r\n                    }\r\n                  \r\n         }\r\n    }\r\n\r\n    batchCompleteActions = (selectedmaster,completeId) =>{\r\n            if(selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT ){\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }else{\r\n                let inputData = {};\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/completeBatchcreation\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                        return {jsonuidata:item}});\r\n\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                              this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                               this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                   // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n                    inputData[\"samples\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\r\n                    inputData[\"Batchhistory\"] ={\r\n                        dtransactiondate : formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] !=undefined ?\r\n                            this.state.selectedRecord[\"dtransactiondate\"]:this.props.Login.currentTime,false),\r\n                        scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                        };\r\n                    inputData[\"completeId\"] = completeId;\r\n                    inputData[\"nneedtestinitiate\"]= this.props.Login.masterData &&  this.props.Login.masterData.nneedtestinitiate;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                    transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus \r\n                                                                                        && this.props.Login.masterData.BCFilterStatus[2];\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"complete\"\r\n                    }\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, \r\n                                    masterData:{\r\n                                        ...masterData,\r\n                                        defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n                                        realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                                    } \r\n                                },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchCompleteAction(inputData, this.props.Login.masterData);\r\n                    }\r\n                  \r\n         }\r\n    }\r\n\r\n    // completeBatchCreation = () => {\r\n    //     const postParam = {\r\n    //         inputListName: \"Batchmaster\", selectedObject: \"SelectedBatchCreation\",\r\n    //         primaryKeyField: \"nreleasebatchcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode,\r\n    //         fetchUrl: \"batchcreation/getBatchCreation\",\r\n    //         fecthInputObject: this.props.Login.userInfo,\r\n    //     }\r\n    //     const inputParam = {\r\n    //         classUrl: \"batchcreation\",\r\n    //         methodUrl: \"BatchCreation\", postParam,\r\n    //         inputData: {\r\n    //             ncontrolcode: this.props.Login.ncontrolCode,\r\n    //             \"userinfo\": this.props.Login.userInfo,\r\n    //             nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n    //         },\r\n    //         operation: \"complete\", showConfirmAlert: false\r\n    //     }\r\n    //     //this.props.updateStore({ typeName: DEFAULT_RETURN, data: { showConfirmAlert: false } });  \r\n\r\n    //     const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n\r\n    //     if (esignNeeded) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n    //                 openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n    //                 operation: this.props.Login.operation,\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n\r\n    //         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n    //     }\r\n\r\n    // }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false, loading: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let {userRoleControlRights, controlMap, selectedRecord,  filterData,\r\n             addedComponentList,\r\n             filterStatusList, dataState, sahDataState, bahDataState,\r\n             chDataState,testCommentDataState, SampleType, RegistrationType, \r\n             RegistrationSubType,BCFilterStatus, REJobStatus, Testvalues, \r\n             ApprovalConfigVersion,skip, take,\r\n             testskip, testtake,selectedFilter,InstrumentCategory,selectedInstCategory,\r\n             ProductCategory,Instrument,selectedInstrument,selectedTestSynonym,nregsubtypecode,\r\n             selectedProductCategory,Product,selectedProduct,samples,addSelectAll,\r\n             deleteSelectAll,ApprovalVersionValue,FilterStatusValue,Section,\r\n             selectedSection,sampleGridItem,subsampleGridItem,testGridItem = [],\r\n             DynamicGridItem,samplegridmoreitem,DynamicGridMoreItem,MaterialCategory,\r\n             selectedMaterialType,Material,selectedMaterial,selectedMaterialCategory,\r\n             MaterialInventory,selectedMaterialInventory,Specification,\r\n             selectedSpec,addedSamplesList,testGridArnoItems,InstrumentID,selectedInstrumentId,sinstrumentid} = this.state;\r\n        let isStateChanged = false;\r\n        let bool = false;\r\n        addedSamplesList=[];\r\n        samples =[];\r\n       \r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            isStateChanged = true;\r\n           \r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\",\"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            InstrumentCategory=constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname',\r\n            'ascending', 'ninstrumentcatcode', false);\r\n            Instrument=constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname',\r\n            'ascending', 'ninstrumentcode', false);\r\n            ProductCategory=constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname',\r\n            'ascending', 'nproductcatcode', false);\r\n            Product=constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname',\r\n            'ascending', 'nproductcode', false);\r\n            Section=constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname',\r\n            'ascending', 'nsectioncode', false);\r\n            MaterialCategory=constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n            'ascending', 'nmaterialcatcode', false);\r\n            Material=constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname',\r\n            'ascending', 'nmaterialcode', false);\r\n            MaterialInventory=constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid',\r\n            'ascending', 'nmaterialinventtranscode', false);\r\n            InstrumentID=constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid',\r\n            'ascending', 'ninstrumentcode', false);\r\n\r\n\r\n           \r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, \r\n                sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), \r\n                scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n\r\n            selectedFilter = selectedFiltersNew;\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            BCFilterStatus = BCFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n            InstrumentCategory = InstrumentCategory.get(\"OptionList\")\r\n            Instrument=Instrument.get(\"OptionList\")\r\n            ProductCategory=ProductCategory.get(\"OptionList\")\r\n            Product=Product.get(\"OptionList\")\r\n            Section=Section.get(\"OptionList\")\r\n            MaterialCategory=MaterialCategory.get(\"OptionList\")\r\n            Material=Material.get(\"OptionList\")\r\n            MaterialInventory=MaterialInventory.get(\"OptionList\")\r\n            InstrumentID = InstrumentID.get(\"OptionList\")\r\n            //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\r\n            samples=this.props.Login.masterData.samples;\r\n            addSelectAll=false;\r\n            deleteSelectAll=true;\r\n            nregsubtypecode=this.props.Login.masterData.defaultRegistrationSubType ?\r\n                {\r\n                    label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\r\n                    value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n                    item: this.props.Login.masterData.defaultRegistrationSubType\r\n                } : \"\"\r\n\r\n            if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\r\n                    selectedTestSynonym=this.props.Login.masterData.selectedTestSynonym ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedTestSynonym.stestname,\r\n                        value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\r\n                        item: this.props.Login.masterData.selectedTestSynonym\r\n                    } : \"\"\r\n                    let stestname = selectedTestSynonym.item;\r\n                    selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\r\n                    isStateChanged = true;\r\n            }\r\n        \r\n            if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\r\n                        selectedProductCategory=this.props.Login.masterData.selectedProductcategory ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\r\n                            value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\r\n                            item: this.props.Login.masterData.selectedProductcategory\r\n                        } : \"\"\r\n                     isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\r\n                    selectedProduct=this.props.Login.masterData.selectedProduct ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProduct.sproductname,\r\n                        value: this.props.Login.masterData.selectedProduct.nproductcode,\r\n                        item: this.props.Login.masterData.selectedProduct\r\n                    } : \"\"\r\n                    let sproductname = selectedProduct.item;\r\n                    selectedRecord = {...this.state.selectedRecord,sproductname,...selectedRecord};\r\n                    isStateChanged = true;\r\n             }\r\n                \r\n              if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\r\n                        selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\r\n                            value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\r\n                            item: this.props.Login.masterData.selectedInstrumentCategory\r\n                        } : \"\"\r\n                    let sinstrumentcatname = selectedInstCategory.item;\r\n                    selectedRecord = {...this.state.selectedRecord,sinstrumentcatname,...selectedRecord};\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\r\n                        selectedInstrument=this.props.Login.masterData.selectedInstrument ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\r\n                            value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\r\n                            item: this.props.Login.masterData.selectedInstrument\r\n                        } : \"\"\r\n                        let sinstrumentname = selectedInstrument.item;\r\n                        selectedRecord = {...this.state.selectedRecord,sinstrumentname,...selectedRecord};\r\n                        isStateChanged = true;\r\n        \r\n        \r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\r\n                    selectedInstrumentId=this.props.Login.masterData.selectedInstrumentId ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\r\n                        value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentId\r\n                    } : \"\"\r\n                    let sinstrumentid = selectedInstrumentId.item;\r\n                    selectedRecord = {...this.state.selectedRecord,sinstrumentid,...selectedRecord};\r\n                    isStateChanged = true;\r\n    \r\n    \r\n            }\r\n    \r\n        \r\n                if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                    userRoleControlRights = [];\r\n                    if (this.props.Login.userRoleControlRights) {\r\n                        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                            userRoleControlRights.push(item.ncontrolcode))\r\n                    }\r\n                    controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                    this.setState({ userRoleControlRights, controlMap });\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\r\n                    addedComponentList = this.props.Login.selectedComponentList;\r\n                    isStateChanged = true;\r\n                   // this.setState({ addedComponentList });\r\n                }\r\n        \r\n        \r\n                if(this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\r\n                    ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\r\n                        value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\r\n                        item: this.props.Login.masterData.defaultApprovalConfigVersion\r\n                    } : \"\"\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if(this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\r\n                    FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\r\n                        value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                        item: this.props.Login.masterData.defaultFilterStatus\r\n                    } : \"\"\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if(this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\r\n                    selectedSection = this.props.Login.masterData.selectedSection ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedSection.ssectionname,\r\n                        value: this.props.Login.masterData.selectedSection.nsectioncode,\r\n                        item: this.props.Login.masterData.selectedSection\r\n                    } : \"\"\r\n                    let ssectionname = selectedSection.item;\r\n                    selectedRecord = {...this.state.selectedRecord,ssectionname,...selectedRecord};\r\n                    isStateChanged = true;\r\n\r\n                }\r\n            \r\n                if(this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\r\n                    selectedMaterialType = this.props.Login.masterData.selectedMaterialType ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\r\n                        value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\r\n                        item: this.props.Login.masterData.selectedMaterialType\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialtypename\"]=this.props.Login.masterData.selectedMaterialType.smaterialtypename;\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\r\n                    selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\r\n                        value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\r\n                        item: this.props.Login.masterData.selectedMaterialCategory\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialcatname\"]=this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\r\n                    isStateChanged = true;\r\n                    \r\n                }\r\n            \r\n                if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\r\n                    selectedMaterial = this.props.Login.masterData.selectedMaterial ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterial.smaterialname,\r\n                        value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\r\n                        item: this.props.Login.masterData.selectedMaterial\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialname\"]=this.props.Login.masterData.selectedMaterial.smaterialname;\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\r\n                    selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\r\n                        value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\r\n                        item: this.props.Login.masterData.selectedMaterialInventory\r\n                    }:\"\"\r\n                    selectedRecord[\"sinventoryid\"]=this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? \r\n                                 this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\r\n                            //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                            selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit &&\r\n                                         this.props.Login.masterData.selectedInventoryUnit.savailablequatity  != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity :\"\";\r\n                            selectedRecord[\"susedquantity\"] = \"\";\r\n                            selectedRecord[\"sremarks\"] = \"\";\r\n                            isStateChanged = true;\r\n                }\r\n        \r\n              if (this.props.Login.isselectedrecordempty) {\r\n                    selectedRecord = {};\r\n                    isStateChanged = true;\r\n                }\r\n\r\n\r\n                if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\r\n                    //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                    Specification = this.props.Login.masterData.Specification &&\r\n                                 this.props.Login.masterData.Specification  != null ? this.props.Login.masterData.Specification :\"\";\r\n                    isStateChanged = true;\r\n                 }\r\n\r\n                 if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\r\n                    selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec &&\r\n                                 this.props.Login.selectedSpec  != null ? this.props.Login.selectedSpec :\"\";\r\n                    isStateChanged = true;\r\n                 }\r\n\r\n                 if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                    selectedRecord = this.props.Login.selectedRecord\r\n                    isStateChanged = true;\r\n                }\r\n\r\n               if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                    const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.\r\n                        jsondata.value)\r\n                    testGridArnoItems=dynamicColumn.testListFields.testlistitem? dynamicColumn.testListFields.testlistitem : [];\r\n                    testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n                    sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                    subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];              \r\n                    samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                    DynamicGridMoreItem=[...samplegridmoreitem]\r\n                    DynamicGridItem=[...testGridArnoItems,...testGridItem,...sampleGridItem,...subsampleGridItem]     \r\n                    isStateChanged = true;         \r\n             }\r\n         }\r\n\r\n       \r\n        // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\r\n        //     // let selectedRecord = {};\r\n        //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n        //     'ascending', 'nmaterialcatcode', false);\r\n        //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\r\n        //     'ascending', 'nmaterialcode', false);\r\n        //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\r\n        //     'ascending', 'nmaterialinventorycode', false);\r\n        //      MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n        //      Material = Material.get(\"OptionList\")\r\n        //      MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n\r\n        //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\r\n        //      selectedRecord[\"Material\"]=Material\r\n        //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\r\n\r\n        //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\r\n        //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\r\n        //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\r\n        //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\r\n        //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \r\n        //         isStateChanged = true;\r\n        //     }\r\n        \r\n        //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\r\n        //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterial\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\r\n        //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\r\n        //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterialInventory\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\r\n        //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n            \r\n      \r\n            \r\n\r\n    \r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            isStateChanged = true;\r\n            //selectedRecord = this.props.Login.selectedRecord;\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n\r\n\r\n        if (isStateChanged)\r\n        {\r\n            this.setState({userRoleControlRights, controlMap, selectedRecord,  \r\n                filterData, addedComponentList,\r\n                filterStatusList, dataState, sahDataState, bahDataState, chDataState,\r\n                testCommentDataState,SampleType, RegistrationType, RegistrationSubType,\r\n                BCFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion,skip, take,\r\n                testskip, testtake,selectedFilter,selectedInstCategory,InstrumentCategory,\r\n                Instrument,selectedInstrument,selectedTestSynonym,nregsubtypecode,\r\n                ProductCategory,selectedProductCategory,Product,selectedProduct,samples,\r\n                addSelectAll,deleteSelectAll,ApprovalVersionValue,FilterStatusValue,Section,\r\n                selectedSection,sampleGridItem,subsampleGridItem,testGridItem,DynamicGridItem,\r\n                samplegridmoreitem,DynamicGridMoreItem,MaterialCategory,selectedMaterialType,\r\n                Material,selectedMaterial,selectedMaterialCategory,MaterialInventory,\r\n                selectedMaterialInventory,Specification,selectedSpec,addedSamplesList,\r\n                testGridArnoItems,InstrumentID,selectedInstrumentId,sinstrumentid});\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let openSpecModal=this.props.Login.openSpecModal;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\"){\r\n            //    this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n            selectedRecord[\"esigncomments\"] = \"\";\r\n            selectedRecord[\"esignpassword\"] = \"\";\r\n        }else if(this.props.Login.openSpecModal){\r\n                loadEsign = false;\r\n                openSpecModal=false\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,openSpecModal, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let inputData = {};\r\n        selectedRecord[fieldName] = comboData.item;\r\n        if (fieldName === \"sproductname\") {\r\n            selectedRecord[\"nproductcode\"]=comboData.value;\r\n            selectedRecord[\"userInfo\"]=this.props.Login.userInfo;\r\n            selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\r\n            selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\r\n            selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            selectedRecord['naddcontrolCode']=this.props.Login.naddcontrolCode;\r\n            selectedRecord[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            selectedRecord[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n           //this.setState({ selectedProduct:comboData });\r\n           this.props.getProductBasedInstrument(selectedRecord,this.props.Login.masterData);\r\n        }else if(fieldName === \"ssectionname\"){\r\n            inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData['naddcontrolCode']=this.props.Login.naddcontrolCode;\r\n            inputData['section']=selectedRecord.ssectionname;\r\n            inputData['userInfo']=this.props.Login.userInfo;\r\n            this.props.getTestInstrumentComboService(inputData,this.props.Login.masterData);\r\n            // this.setState({ selectedSection:comboData });\r\n\r\n        }else if (fieldName === \"stestname\") {\r\n            if(this.props.Login.operation === \"update\"){\r\n            selectedRecord[\"nprevioustestcode\"]=this.state.selectedTestSynonym.value \r\n            }\r\n            selectedRecord[\"ntestcode\"]=comboData.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                           this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            selectedRecord['naddcontrolCode']=this.props.Login.naddcontrolCode;\r\n            selectedRecord['sinstrumentcatname']=undefined;\r\n            selectedRecord[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            selectedRecord[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            this.props.getTestInstrumentCategory(selectedRecord,this.props.Login.masterData);\r\n        }else if (fieldName === \"sinstrumentcatname\") {\r\n            selectedRecord[\"ninstrumentcatcode\"]=comboData.value;\r\n            selectedRecord[\"ncalibrationreq\"]=comboData.item.ncalibrationreq;\r\n            selectedRecord[\"ntestcode\"]=this.state.selectedTestSynonym.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            //selectedRecord['sinstrumentid']=undefined;\r\n            selectedRecord['sinstrumentname']=undefined;\r\n            this.props.getInstrumentForInstCategory(selectedRecord,this.props.Login.masterData);\r\n            //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n        }else if(fieldName === \"smaterialcatname\"){\r\n            selectedRecord[\"nmaterialcatcode\"]=comboData.value;\r\n            selectedRecord[\"needsectionwise\"]=comboData.item.needSectionwise;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            this.setState({ selectedMaterialCategory:comboData });\r\n            this.props.getMaterialBasedOnMaterialCategory(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n        }else if(fieldName === \"smaterialname\"){\r\n            selectedRecord[\"nmaterialcode\"]=comboData.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['needsection']=comboData.item.needsection;\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            this.setState({selectedMaterial:comboData });\r\n            this.props.getMaterialInventoryBasedOnMaterial(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n            \r\n        }else if(fieldName === \"sinventoryid\"){\r\n            selectedRecord[\"nmaterialcode\"]=this.state.selectedMaterial.value;\r\n            selectedRecord[\"materialInvCode\"]=comboData.item.nmaterialinventorycode;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['needsection']=this.props.Login.masterData.selectedMaterial.needsection;\r\n            this.setState({selectedMaterialInventory:comboData });\r\n            // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\r\n            //     selectedRecord['nsectioncode']=transactionStatus.NA;\r\n            // }else{\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            //}\r\n            this.props.getMaterialAvailQtyBasedOnInv(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n        }else if(fieldName === \"sinstrumentname\"){\r\n            selectedRecord[\"ninstrumentnamecode\"]=comboData.value;\r\n            selectedRecord[\"sinstrumentname\"]=comboData.label;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            //selectedRecord['sinstrumentid']=undefined;\r\n            selectedRecord['selectedInstrument']=comboData.item;\r\n            selectedRecord['ninstrumentcatcode']=comboData.item.ninstrumentcatcode;\r\n            selectedRecord['ninstrumentcode']=comboData.item.ninstrumentcode;\r\n            this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n        } else {\r\n            this.setState({selectedInstrumentId:comboData });\r\n        }\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onMultiColumnValue = (value, key, flag, label, keys) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n            if (flag) {\r\n                keys.map((objkey, index) => {\r\n                    return selectedRecord[objkey] = { \"label\": value[0][label[index]], \"value\": value[0][objkey] }\r\n                })\r\n            }\r\n        } else {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = \"\";\r\n            });\r\n            keys.map((objkey, index) => {\r\n                return selectedRecord[objkey] = \"\"\r\n            })\r\n        }\r\n        this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\r\n    }\r\n\r\n    onMultiColumnMAHChange = (value, key) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    clearComponentInput = () => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"nproductcode\"] = undefined;\r\n        selectedRecord[\"ncomponentcode\"] = undefined;\r\n        selectedRecord[\"smanuflotno\"] = \"\";\r\n        selectedRecord[\"dateprompt\"] = transactionStatus.NO;\r\n        selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\r\n        selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    openClosePortal = () =>{\r\n    if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED){\r\n        if(this.props.Login.openELNSheet===undefined || !this.props.Login.openELNSheet)\r\n        {\r\n            this.props.Login.masterData.enlLink=\"\";   \r\n            let integrationSettings = this.props.Login.integrationSettings;\r\n            let inputParam = {\r\n                userInfo : this.props.Login.userInfo,\r\n                elnUserInfo : this.props.Login.elnUserInfo,\r\n                elnSite : this.props.Login.elnSite,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\r\n                ntestcode:this.props.Login.masterData.ntestcode\r\n            }\r\n            let link = \"\";\r\n                    \r\n            let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\r\n           \r\n            const settedId = inputParam.nbatchmastercode;\r\n           //console.log(settedId);\r\n           let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\r\n            const userObject = {\r\n                usercode: inputParam.elnUserInfo.nelncode,\r\n                username: inputParam.elnUserInfo.selnuserid,\r\n                userfullname: inputParam.elnUserInfo.selnusername,\r\n                lsusergroup: {\r\n                usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\r\n                usergroupname: inputParam.elnUserInfo.nelnusergroupcode,\r\n                },\r\n                lssitemaster:{\r\n                sitecode: inputParam.elnSite.nelnsitecode\r\n                }\r\n            }\r\n            let encrypteduser = CF_encryptionData(userObject).EncryptData;\r\n            const baseURL = integrationSettings[1].slinkname\r\n            \r\n            link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\r\n           // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \r\n           const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n             data: {\r\n                 openELNSheet: true,\r\n                 masterData: {\r\n                     ...this.props.Login.masterData,  \r\n                     enlLink:link,\r\n                     baseURL:baseURL\r\n                 }                    \r\n             }\r\n         }\r\n         this.props.updateStore(updateInfo);           \r\n        }else{\r\n            const updateInfo = {\r\n               typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openELNSheet: false,\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,  \r\n                        enlLink:\"\"\r\n                    }                    \r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n    }\r\n }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord={};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    saveSample =(addedsamplelist) =>{\r\n    if(addedsamplelist === undefined ){\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n      }else if(addedsamplelist.length > 0){\r\n        let sampleArray = [];\r\n        addedsamplelist.map(item => \r\n            sampleArray.push({\r\n                npreregno:item.npreregno, \r\n                ntransactionsamplecode:item.ntransactionsamplecode, \r\n                ntransactiontestcode : item.ntransactiontestcode,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster ? \r\n                this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\r\n                sarno:item.jsonuidata.samplelist.sarno,\r\n                ssamplearno:item.jsonuidata.samplelist.ssamplearno,\r\n                stestname:item.jsonuidata.samplelist.stestname,\r\n                jsonuidata : {\r\n                    samplelist : item.jsonuidata.samplelist,\r\n                },\r\n                jsondata : {\r\n                    samplelist : item.jsondata.samplelist,\r\n                }\r\n              }\r\n            )\r\n        )\r\n\r\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster &&\r\n        this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n        // batchSample = {\r\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\r\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\r\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\r\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\r\n        // }\r\n        //jsondata : \r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                batchSample:nbatchmastercode,\r\n                sampleArray,\r\n                userInfo : this.props.Login.userInfo,\r\n                masterData:this.props.Login.masterData,\r\n                nregtypecode : this.props.Login.masterData.defaultRegistrationType ?\r\n                this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode \r\n                                              : transactionStatus.NA,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\r\n            }\r\n        }\r\n         this.props.createSampleAction(inputParam.inputData);\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n      }\r\n    \r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        \r\n        if(this.props.Login.operation===\"createSample\"){\r\n            this.saveSample(this.state.addedSamplesList)\r\n        }else if(this.props.Login.operation===\"initiate\"){\r\n            this.testStartActions(this.props.Login.masterData.SelectedBatchmaster,this.props.Login.testStartId)\r\n        }else if(this.props.Login.operation===\"complete\"){\r\n            this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,this.props.Login.completeId)\r\n        }else if(this.props.Login.operation===\"createiqcsample\"){\r\n            this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster)\r\n        }else{\r\n        let inputData = {};\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n        this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        if(this.props.Login.operation ===\"create\"){\r\n        inputData[\"fromDate\"]= obj.fromDate;\r\n        inputData[\"toDate\"]= obj.toDate;\r\n        }\r\n       \r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nneedcombodataforFilter\"]=\"true\"\r\n        inputData[\"needFilterSubmit\"]=\"false\"\r\n        inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                 this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\r\n        inputData[\"ntestcode\"]= this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\r\n        inputData[\"nsectioncode\"]=this.state.selectedSection ? this.state.selectedSection.item.nsectioncode:transactionStatus.NA;\r\n        //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\r\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\r\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\r\n        inputData[\"ninstrumentcatcode\"]=this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\r\n        inputData[\"ninstrumentcode\"]=this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\r\n        inputData[\"nproductcode\"]=this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\r\n        inputData[\"ntransactionstatus\"]=transactionStatus.DRAFT;\r\n        inputData[\"sbatcharno\"]='-';\r\n        // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\r\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \r\n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n        inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n        inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n        inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId && this.state.selectedInstrumentId.label;\r\n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n        inputData[\"napprovalversioncode\"]= this.props.Login.masterData.realApproveConfigVersion && \r\n        this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n        inputData[\"napprovalconfigcode\"]= this.props.Login.masterData.realApproveConfigVersion && \r\n               this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n        inputData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode:transactionStatus.NA;\r\n       let postParam = undefined;\r\n            postParam = {\r\n                inputListName: \"Batchmaster\", \r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\", \r\n                unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\r\n            };\r\n        const inputParam = {\r\n            classUrl: \"batchcreation\",\r\n            methodUrl: \"Batchcreation\",\r\n            displayName: \"IDS_BATCHCREATION\",\r\n            inputData: inputData, \r\n            postParam, \r\n            searchRef: this.searchRef,\r\n            operation: this.props.Login.operation, \r\n            saveType, \r\n            formRef,\r\n        }\r\n        if(this.props.Login.operation ===\"create\"){\r\n            this.searchRef.current.value = \"\"; \r\n            this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData,inputParam[\"operation\"]);\r\n        }else{\r\n            inputData[\"nbatchmastercode\"]= this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n            inputData[\"SelectedBatchmaster\"]= this.props.Login.masterData.SelectedBatchmaster;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, \r\n                            masterData : this.props.Login.masterData\r\n                        },\r\n                        openModal: true, \r\n                        screenName: \"IDS_BATCHCREATION\",\r\n                        operation : inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }else{\r\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData,inputParam[\"operation\"]);\r\n            }\r\n        }\r\n    }\r\n        // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        // if (esignNeeded) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\r\n        //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\r\n        // }\r\n    }\r\n\r\n    deleteBatchCreation = (selectedBatch,deleteId,operation) => {\r\n        if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || \r\n            selectedBatch.ntransactionstatus === transactionStatus.INITIATED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        }\r\n        else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\", \r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedBatch.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userInfo: this.props.Login.userInfo,\r\n                                    ndesigntemplatemappingcode : this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode:transactionStatus.NA,\r\n                                    nsampletypecode : this.props.Login.masterData.defaultSampleType.nsampletypecode\r\n                                 },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n                inputData[\"fromDate\"]= obj.fromDate;\r\n                inputData[\"toDate\"]= obj.toDate;\r\n                inputData[\"currentdate\"] = formatInputDate(new Date(), true)\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType;\r\n                inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                          this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                           this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\r\n                inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n                inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n                inputData[\"selectedBatch\"]=selectedBatch;\r\n                inputData[\"samples\"]=this.props.Login.masterData.Samples;         \r\n                const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                operation,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData,\"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchEditData = (editParam) =>{\r\n    if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT){\r\n        this.props.getActiveBatchCreationService(editParam,\r\n            this.props.Login.masterData.SelectedBatchmaster)\r\n       }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n       }\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n    \r\n        if(this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined \r\n        ){\r\n            let inputData = {};\r\n            \r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"]= obj.fromDate;\r\n            inputData[\"toDate\"]= obj.toDate;\r\n            inputData[\"needFilterSubmit\"]=\"true\";\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n             inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n             this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n          //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n          //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n               this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                        transactionStatus.NA;\r\n            inputData[\"realApproveConfigVersion\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n            inputData[\"realdefaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n            \r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData, \r\n                searchRef: this.searchRef,\r\n            }\r\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"],this.props.Login.masterData);\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\"}));\r\n      }\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\r\n    if(this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA || \r\n        this.props.Login.masterData.realRegTypeValue !== null &&\r\n        this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA || \r\n        this.props.Login.masterData.realRegSubTypeValue !== null && \r\n        this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA ||\r\n        this.props.Login.masterData.realApproveConfigVersion !== null && \r\n        this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA ||\r\n        this.props.Login.masterData.defaultFilterStatus !== null) {\r\n\r\n        let inputData = {};\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n        this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        inputData[\"fromDate\"]= obj.fromDate;\r\n        inputData[\"toDate\"]= obj.toDate;\r\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue &&\r\n        this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n        inputData[\"nregtypecode\"]= this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n        this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n\r\n        inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType;\r\n        \r\n        inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n\r\n        inputData[\"defaultRegistrationSubType\"]= this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n\r\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\r\n\r\n        inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\r\n       \r\n        inputData[\"realApproveConfigVersion\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n\r\n        inputData[\"napprovalversioncode\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA;\r\n\r\n        //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n        inputData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n        const inputParam = {\r\n            classUrl: \"batchcreation\",\r\n            methodUrl: \"Batchmaster\",\r\n            displayName: \"IDS_BATCHCREATION\",\r\n            inputData: inputData, \r\n            searchRef: this.searchRef,\r\n        }\r\n\r\n      this.props.onActionFilterSubmit(inputParam[\"inputData\"],this.props.Login.masterData);\r\n    }else{\r\n        \r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\"}));\r\n    }\r\n}\r\n  \r\n\r\n    // addtest=(addParam)=>{\r\n    //     if(this.props.Login.masterData.Batchmaster == undefined ){\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" })); \r\n    //     }else{\r\n    //         this.props.getTestInstrumentComboService(addParam)\r\n    //     }\r\n    // }\r\n\r\n    // convertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n    onClickReport = (selectedRecord, flag, ncontrolcode) => {\r\n        const reportParam = {\r\n            classUrl: \"certificategeneration\",\r\n            methodUrl: \"reportGeneration\",\r\n            screenName: \"CertificateGeneration\",\r\n            operation: \"previewReport\",\r\n            primaryKeyField: \"nreleasebatchcode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: -1,\r\n            inputData: {\r\n                sprimarykeyname: 'nreleasebatchcode',\r\n                nprimarykey: selectedRecord.nreleasebatchcode,\r\n                nreleasebatchcode: selectedRecord.nreleasebatchcode,\r\n                ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\r\n                ndecisionstatus: selectedRecord.ndecision,// === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\r\n                nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\r\n                ncontrolcode,\r\n                ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\r\n                userinfo: this.props.Login.userInfo,\r\n                nflag: flag,\r\n                skipbatchvalidation: true,\r\n            }\r\n        };\r\n        this.props.onClickReport(reportParam)\r\n    }\r\n\r\n    reportMethod = (value) => {\r\n        if (value.method === 1) {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\r\n        }\r\n        else {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,updateStore,\r\n    getTestInstrumentComboService,getTestInstrumentCategory,getInstrumentForInstCategory,\r\n    getProductBasedInstrument,\r\n    getBatchCreationDetails,onActionFilterSubmit,getProductcategoryAction,\r\n    createBatchmasterAction,getSamplesForGrid,getSelectedBatchCreationDetail,\r\n    createSampleAction,deleteSampleAction,getActiveBatchCreationService,\r\n    updateBatchcreationAction,deleteBatchCreation,batchInitiateAction,\r\n    getBCRegistrationSubType,batchCompleteAction,validateEsignCredential,\r\n    filterColumnData,getBatchhistoryAction,\r\n    getBatchSection,viewInfo,getIqcSamples,getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial,batchSaveIQCActions,getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction,getBCApprovalConfigVersion,getBCRegistrationType,\r\n    getTreeByMaterial,getNewRegSpecification,cancelIQCSampleAction,batchCancelAction,\r\n    batchInitiateDatePopup,batchCompleteDatePopup,getInstrumentID,getBatchViewResultAction\r\n    //,batchTAT\r\n})(injectIntl(BatchCreation));\r\n\r\n"]},"metadata":{},"sourceType":"module"}