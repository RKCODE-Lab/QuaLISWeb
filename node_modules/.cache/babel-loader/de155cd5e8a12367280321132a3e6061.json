{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';export function getPlasmaMasterFileComboService(plasmaparam){return function(dispatch){if(plasmaparam.operation===\"create\"||plasmaparam.operation===\"update\"){var manufService=rsapi.post(\"plasmamasterfile/getManufacturer\",{userinfo:plasmaparam.userInfo});var urlArray=[];var selectedId=null;if(plasmaparam.operation===\"create\"){urlArray=[manufService];}else{var _rsapi$post;var plasmaById=rsapi.post(\"plasmamasterfile/getActivePlasmaMasterFileById\",(_rsapi$post={},_defineProperty(_rsapi$post,plasmaparam.primaryKeyField,plasmaparam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",plasmaparam.userInfo),_rsapi$post));urlArray=[manufService,plasmaById];selectedId=plasmaparam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var manufacturer=[];var selectedRecord={};if(plasmaparam.operation===\"update\"){selectedRecord=response[1].data;manufacturer.push({\"value\":response[1].data[\"nmanufcode\"],\"label\":response[1].data[\"smanufname\"]});selectedRecord[\"nmanufcode\"]=manufacturer[0];}else{selectedRecord[\"ntransactionstatus\"]=1;}dispatch({type:DEFAULT_RETURN,payload:{manufList:response[0].data||[],selectedRecord:selectedRecord,openModal:true,operation:plasmaparam.operation,screenName:plasmaparam.screenName,ncontrolCode:plasmaparam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}// else {\n//     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\n// }\n};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/PlasmaMasterFileAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","intl","getPlasmaMasterFileComboService","plasmaparam","dispatch","operation","manufService","post","userinfo","userInfo","urlArray","selectedId","plasmaById","primaryKeyField","primaryKeyValue","all","then","response","manufacturer","selectedRecord","data","push","type","payload","manufList","openModal","screenName","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\n//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function getPlasmaMasterFileComboService(plasmaparam) {\r\n    return function (dispatch) {\r\n\r\n        if (plasmaparam.operation === \"create\" || plasmaparam.operation === \"update\") {\r\n\r\n            const manufService = rsapi.post(\"plasmamasterfile/getManufacturer\", { userinfo: plasmaparam.userInfo });\r\n\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (plasmaparam.operation === \"create\") {\r\n\r\n                urlArray = [manufService];\r\n            }\r\n            else {\r\n                const plasmaById = rsapi.post(\"plasmamasterfile/getActivePlasmaMasterFileById\", { [plasmaparam.primaryKeyField]: plasmaparam.primaryKeyValue, \"userinfo\": plasmaparam.userInfo });\r\n\r\n                urlArray = [manufService, plasmaById];\r\n                selectedId = plasmaparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n\r\n                    let manufacturer = [];\r\n\r\n                    let selectedRecord = {};\r\n\r\n                    if (plasmaparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n\r\n                        manufacturer.push({ \"value\": response[1].data[\"nmanufcode\"], \"label\": response[1].data[\"smanufname\"] });\r\n\r\n\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n\r\n\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n\r\n\r\n                    }\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            manufList: response[0].data || [],\r\n\r\n                            selectedRecord, openModal: true,\r\n                            operation: plasmaparam.operation, screenName: plasmaparam.screenName,\r\n                            ncontrolCode: plasmaparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        // else {\r\n        //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\r\n        // }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}