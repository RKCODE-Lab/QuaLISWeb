{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleStorageMove.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { Lims_JSON_stringify, constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation, validateEsignCredentialStorage, crudMasterstorage } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel, ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import AddTreeview from './AddTreeview';\n// import AddTreeProperties from './AddTreeProperties';\n\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout'; //import StorageCategoryFilter from './StorageCategoryFilter';\n\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport rsapi from '../../rsapi'; //import AddSampleStorageMapping from './AddSampleStorageMapping';\n\nimport Axios from 'axios'; //import StorageMappingFilter from './StorageMappingFilter';\n\nimport Preloader from '../../components/preloader/preloader.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { groupBy, process } from '@progress/kendo-data-query';\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport MoveSample from '../storagemanagement/MoveSample';\nimport DataGridForStorage from './DataGridForStorage';\nimport { initRequest } from '../../actions/LoginAction';\nimport { bindActionCreators } from 'redux';\n\nclass SampleStorageMove extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.state.loadEsign;\n      let openModal = this.state.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (loadEsign) {\n        //  loadEsign = false;\n        openModal = true;\n        loadEsign = false;\n        selectedRecord['esignpassword'] = \"\";\n        selectedRecord['esigncomments'] = \"\";\n        selectedRecord['esignreason'] = \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            selectedRecord,\n            selectedId: null\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      this.setState({\n        selectedRecord,\n        // ismoveSample: false,\n        openModal,\n        isInitialRender: true,\n        isFilterPopup: false,\n        loadEsign: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet && !this.state.ismoveSample) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else if (this.state.ismoveSample) {\n        let destinationPathlst = [];\n        let dataResult = this.state.dataResult;\n        dataResult.data.map(item => {\n          item.items.map(item => {\n            if (item.hasOwnProperty('selected') && item.selected) {\n              destinationPathlst.push(item);\n            }\n          });\n        });\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.state.ncontrolcode)) {\n          const masterData = this.state.masterData;\n          let inputParam = {\n            methodUrl: \"SampleStorageTransaction\",\n            operation: \"update\",\n            classUrl: \"samplestoragemove\",\n            inputData: this.state.isMultiContainermove ? {\n              selectedContainers: JSON.stringify(destinationPathlst),\n              nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n              destinationPathCount: destinationPathlst.length,\n              isMultiContainermove: true,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              ...this.state.masterData,\n              userinfo: this.props.Login.userInfo\n            } : {\n              nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterprojecttypecode: this.state.selectedProjectType.value,\n              ssamplestoragelocationname: this.state.editedsheetData.ssamplestoragelocationname,\n              ssamplestoragepathname: this.state.editedsheetData.scontainerpath,\n              stosamplestoragelocationname: this.state.selectedRecord.nsamplestoragelocationcode.label,\n              stosamplestoragepathname: this.state.selectedRecord.nsamplestoragemappingcode.label,\n              sboxid: this.state.editedsheetData.sboxid,\n              stoboxid: this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\n              ...this.state.masterData,\n              userinfo: this.props.Login.userInfo\n            }\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (this.state.isMultiContainermove) {\n            this.CRUDSampleStorageTransaction({\n              selectedContainers: JSON.stringify(destinationPathlst),\n              nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n              destinationPathCount: destinationPathlst.length,\n              isMultiContainermove: true,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              // nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              // nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n              userinfo: this.props.Login.userInfo\n            }, 'update');\n          } else {\n            this.CRUDSampleStorageTransaction({\n              nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterprojecttypecode: this.state.selectedProjectType.value,\n              ssamplestoragelocationname: this.state.editedsheetData.ssamplestoragelocationname,\n              ssamplestoragepathname: this.state.editedsheetData.scontainerpath,\n              stosamplestoragelocationname: this.state.selectedRecord.nsamplestoragelocationcode.label,\n              stosamplestoragepathname: this.state.selectedRecord.nsamplestoragemappingcode.label,\n              sboxid: this.state.editedsheetData.sboxid,\n              stoboxid: this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\n              filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n              userinfo: this.props.Login.userInfo\n            }, 'update');\n          }\n        }\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        openSpreadSheet: false,\n        ismoveSample: false,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data;\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false,\n            loadEsign: false,\n            ismoveSample: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false,\n            loadEsign: false,\n            ismoveSample: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n      let selectedProjectType = this.state.selectedProjectType;\n      let masterData = this.state.masterData;\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        if (selectedProjectType.value !== comboData.value) {\n          masterData = { ...masterData,\n            sampleStoragetransaction: []\n          };\n        }\n\n        this.setState({\n          masterData,\n          selectedProjectType: {\n            label: comboData.label,\n            value: comboData.value\n          }\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = (selectedRecord, availableContainersdata) => {\n      this.setState({\n        availableContainers: availableContainersdata,\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.ConfirmMove = () => {\n      let destinationPathlst = [];\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        item.items.map(item => {\n          if (item.hasOwnProperty('selected') && item.selected) {\n            destinationPathlst.push(item);\n          }\n        });\n      });\n      const inputData = {\n        isok: true,\n        filterprojecttypecode: this.state.selectedProjectType.value,\n        selectedContainers: JSON.stringify(destinationPathlst),\n        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n        destinationPathCount: destinationPathlst.length,\n        isMultiContainermove: true,\n        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n        userinfo: this.props.Login.userInfo\n      };\n      const inputParam = {\n        methodUrl: \"SampleStorageTransaction\",\n        classUrl: 'samplestoragemove',\n        inputData: inputData,\n        operation: \"update\",\n        dataState: this.state.dataStateChange\n      };\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_MISMATCHCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), this.state.loadEsign ? () => this.props.crudMasterstorage(inputParam, this.state.masterData, \"openModal\") : () => this.CRUDSampleStorageTransaction({ ...inputData\n      }, 'update'));\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemove/\" + operation + \"SampleStorageTransaction\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        // if(this.state.isMultiContainermove){\n        //     this.ConfirmMove()\n        // }else{\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false,\n          ismoveSample: false\n        }); //} \n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n            this.ConfirmMove();\n          } else {\n            toast.warn(error.response.data);\n          }\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.isMultiContainermove ? [{\n        \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\",\n        \"dataField\": \"nsamplestoragelocationcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\",\n        \"dataField\": \"nsamplestoragelocationcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TOSAMPLESTORAGEPATH\",\n        \"dataField\": \"nsamplestoragemappingcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }]; // :\n      // this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\n      //     this.state.selectedRecord[\"nneedposition\"] === false ? [\n      //     {\n      //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\n      //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_PRODUCT\",\n      //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_AVAILABLESPACE\",\n      //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     }\n      // ] : [\n      //     {\n      //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\n      //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_PRODUCT\",\n      //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     }\n      //     ,\n      //     {\n      //         \"idsName\": \"IDS_CONTAINERTYPE\",\n      //         \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n      //         \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_DIRECTION\",\n      //         \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_AVAILABLESPACE\",\n      //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     }\n      // ]\n\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      let dataResult = this.state.dataResult;\n\n      if (this.state.masterData.sampleStoragetransaction) {\n        dataResult = this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], event.dataState ? event.dataState : {\n          take: 10,\n          skip: 0\n        }) : [];\n        dataResult.data.map(x => {\n          return x.items.map(item => {\n            item.selected = false;\n            return item;\n          });\n        });\n      }\n\n      this.setState({\n        dataResult: dataResult,\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.movemultipleContainer = () => {\n      let destinationPathlst = [];\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        item.items.map(item => {\n          if (item.hasOwnProperty('selected') && item.selected) {\n            destinationPathlst.push(item);\n          }\n        });\n      });\n\n      if (destinationPathlst.length > 0) {\n        this.setState({\n          loading: true\n        });\n        let urlArray = [];\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", {\n          isMultiContainermove: true,\n          // ncontainertypecode: 1,\n          // ncontainerstructurecode: 1,\n          isMultiContainermove: true,\n          userinfo: this.props.Login.userInfo\n        });\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          let storagemoverecords = {};\n          let selectedRecord = this.state.selectedRecord;\n          const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n          const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\n          const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", \"descending\", undefined, true);\n          const storageStructureList = storageStructureMap.get(\"OptionList\");\n          storagemoverecords = this.state.masterData.sampleStoragetransaction.filter(item => item.hasOwnProperty('selected') && item.selected);\n          selectedRecord = { ...selectedRecord,\n            nsamplestoragelocationcode: {\n              label: storageStructureList[0].label,\n              value: storageStructureList[0].value,\n              item: storageStructureList[0]\n            },\n            storageStructureOptions: storageStructureList\n          };\n          this.state.masterData.sampleStoragetransaction.map(item => selectedRecord = { ...selectedRecord,\n            mappingcodeOptions: { ...selectedRecord.mappingcodeOptions,\n              [item.nsamplestoragemappingcode]: samplestoragecontainerpathList\n            }\n          });\n          this.setState({\n            availableContainers: response[0].data['availableContainers'],\n            totalContainers: response[0].data['totalContainers'],\n            selectedRecord,\n            isMultiContainermove: true,\n            storagemoverecords: storagemoverecords,\n            ismoveSample: true,\n            openModal: true,\n            loadEsign: false,\n            loading: false,\n            ncontrolcode: this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTACONTAINERTOMOVE\"\n        }));\n      }\n    };\n\n    this.moveSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", {\n        nsamplestoragemappingcode: param.nsamplestoragemappingcode,\n        ncontainertypecode: param.ncontainertypecode,\n        ncontainerstructurecode: param.ncontainerstructurecode,\n        userinfo: this.props.Login.userInfo\n      });\n      const getProjectType = rsapi.post(\"projecttype/getProjectType\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, getProduct, getProjectType];\n      Axios.all(urlArray).then(response => {\n        const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", \"descending\", undefined, true);\n        const storageStructureList = storageStructureMap.get(\"OptionList\"); // const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\n        //     \"nsamplestoragecontainerpathcode\",\n        //     \"scontainerpath\", undefined, undefined, true);\n        // const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\n        // ALPD-3757\n\n        const sampleStorageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragemappingcode\", \"scontainerpath\", undefined, undefined, true);\n        const sampleStorageMappingList = sampleStorageMappingMap.get(\"OptionList\");\n        const sampleTypeMap = constructOptionList(response[1].data || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n        let ProjectTypelst = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n        this.setState({\n          sampleTypeList: sampleTypeList,\n          ProjectTypeOptions: ProjectTypelst,\n          sourcencontainertypecode: param.ncontainertypecode,\n          sourcencontainerstructurecode: param.ncontainerstructurecode,\n          isMultiContainermove: false,\n          selectedRecord: {\n            // nprojecttypecode:{\n            //     label: this.state.selectedProjectType.label,\n            //     value:  this.state.selectedProjectType.value \n            // },\n            nfromsamplestoragelocationcode: {\n              label: param.ssamplestoragelocationname,\n              value: param.nsamplestoragelocationcode,\n              item: param\n            },\n            nfromsamplestoragemappingcode: {\n              label: param.scontainerpath,\n              value: param.nsamplestoragemappingcode,\n              item: param\n            },\n            nsamplestoragelocationcode: storageStructureList.length > 0 ? {\n              label: storageStructureList[0].label,\n              value: storageStructureList[0].value,\n              item: storageStructureList[0].item\n            } : \"\",\n            nsamplestoragemappingcode: sampleStorageMappingList.length > 0 ? {\n              label: sampleStorageMappingList[0].label,\n              value: sampleStorageMappingList[0].value,\n              item: sampleStorageMappingList[0].item\n            } : \"\",\n            storageStructureOptions: storageStructureList,\n            samplestoragecontainerpathOptions: sampleStorageMappingList\n          },\n          editedsheetData: param,\n          ismoveSample: true,\n          openModal: true,\n          loadEsign: false,\n          loading: false,\n          ncontrolcode: this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      let tree = QbUtils.getTree(immutableTree);\n      tree = QbUtils.queryString(immutableTree, config, true);\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: { ...selectedRecord\n        }\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      const checkboxElement = event.target;\n      const checked = event.syntheticEvent.target.checked;\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        return item.items.map(item => {\n          if (item.selected === undefined) {\n            item.selected = false;\n          }\n\n          item.selected = checked;\n          return item;\n        });\n      });\n      this.setState({\n        dataResult\n      });\n    };\n\n    this.selectionChange = event => {\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(x => {\n        return x.items.map(item => {\n          if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\n            item.selected = !event.dataItem.selected;\n          }\n\n          return item;\n        });\n      });\n      this.setState({\n        dataResult\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      }; //this.props.validateEsignCredential(inputParam, \"openModal\");\n      // let destinationPathlst = [];\n      // let dataResult = this.state.dataResult;\n      // dataResult.data.map(item => {\n      //       item.items.map(item => {\n      //         if (item.hasOwnProperty('selected') && item.selected) {\n      //             destinationPathlst.push(item);\n      //         } \n      //     });\n      // });\n\n      this.props.validateEsignCredentialStorage(inputParam, \"openModal\", () => this.ConfirmMove());\n    };\n\n    this.state = {\n      extractedColumnList: [{\n        \"idsName\": \"IDS_STORAGESTRUCTURE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"450px\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"navailablespace\",\n        \"width\": \"200px\",\n        \"filterType\": \"numeric\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"scontainertype\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"scontainerstructurename\",\n        \"width\": \"200px\"\n      }],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0,\n        group: [{\n          field: \"ssamplestoragelocationname\"\n        }]\n      }\n    };\n    let fields = {};\n\n    if (this.state.extractedColumnList) {\n      this.state.extractedColumnList.map(field => {\n        if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname' && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype' && field.dataField !== 'scontainerstructurename') {\n          fields = { ...fields,\n            [field.dataField]: {\n              \"label\": this.props.intl.formatMessage({\n                id: field.idsName\n              }),\n              \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n              \"valueSources\": [\"value\", \"func\"],\n              \"mainWidgetProps\": {\n                \"valueLabel\": \"Name\",\n                \"valuePlaceholder\": this.props.intl.formatMessage({\n                  id: field.idsName\n                })\n              }\n            }\n          };\n        }\n      });\n    }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      dataResult,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      openModal,\n      loadEsign\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.openModal !== previousProps.Login.openModal) {\n      bool = true;\n      openModal = this.props.Login.openModal;\n    }\n\n    if (this.props.Login.loadEsign !== previousProps.Login.loadEsign) {\n      bool = true;\n      loadEsign = this.props.Login.loadEsign;\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nproductcode,\n        \"title\": item.sproductname\n      }));\n      fields = { ...fields,\n        'nproductcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_PRODUCT\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      masterData = this.props.Login.masterData;\n      this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nprojecttypecode,\n        \"title\": item.sprojecttypename\n      })); // fields = {\n      //     ...fields,\n      //     'nprojecttypecode': {\n      //         \"label\": this.props.intl.formatMessage({\n      //             id: \"IDS_PROJECTTYPE\",\n      //         }),\n      //         \"type\": \"select\",\n      //         \"valueSources\": [\"value\"],\n      //         \"fieldSettings\": {\n      //             \"listValues\": queryBuilderFreezer\n      //         }\n      //     }\n      // }\n\n      selectedProjectType = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\n    }\n\n    if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainertypecode,\n        \"title\": item.scontainertype\n      }));\n      fields = { ...fields,\n        'ncontainertypecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERTYPE\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainerstructurecode,\n        \"title\": item.scontainerstructurename\n      }));\n      fields = { ...fields,\n        'ncontainerstructurecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERSTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n\n      if (this.state.masterData.sampleStoragetransaction) {\n        if (this.state.masterData.sampleStoragetransaction !== previousState.masterData.sampleStoragetransaction) {\n          masterData = this.state.masterData;\n          console.log('masterData.sampleStoragetransaction', dataResult);\n          dataResult = masterData.sampleStoragetransaction ? this.processWithGroups(masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n            take: 10,\n            skip: 0\n          }) : [];\n          console.log('dataResultn', dataResult);\n        }\n      }\n\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType,\n        openModal,\n        loadEsign,\n        dataResult\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      this.setState({\n        loading: true\n      });\n      let obj = {\n        // ...inputParam.component, \n        label: 'sampleStoragetransaction',\n        valuemember: 'nsamplestoragemappingcode',\n        filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value : selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n        source: 'view_samplestoragelocation',\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestoragemove/getdynamicfilterexecutedata\", obj);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let masterData = this.state.masterData;\n        masterData = { ...masterData,\n          ...response[0].data\n        };\n        this.setState({\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false,\n          isFilterPopup: false,\n          submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n          } : { ...selectedRecord\n          },\n          selectedRecord: {},\n          displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const moveSampleId = this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode;\n    const moveMultipleSampleId = this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode;\n    const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\n    const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1874,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1875,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1879,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1880,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1881,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedProjectType ? this.state.selectedProjectType || [] : [],\n      options: this.state.masterData && this.state.masterData.projectTypeOptions || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1882,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1898,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1899,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DataGridForStorage, {\n      isDownloadPDFRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isDownloadExcelRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isRefreshRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      reloadData: e => this.getDynamicFilterExecuteData(2),\n      isCustomButton: true,\n      customButtonlist: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? [{\n        label: 'IDS_VIEWMULTIPLEBOX',\n        id: {},\n        hidden: false //this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1\n        ,\n        onClick: () => this.addSample({}, 2),\n        controlname: 'faBoxes'\n      }, {\n        label: 'IDS_MOVEMULTIPLECONTAINER',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(moveMultipleSampleId) === -1,\n        onClick: () => this.movemultipleContainer(),\n        controlname: 'faDollyFlatbed'\n      }, {\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }] : [{\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }],\n      cellRender: this.cellRender,\n      group: this.state.group || [],\n      primaryKeyField: 'nsamplestoragemappingcode' // groupable={true}\n      // groupfooter={true}\n      // aggregateLabel={'IDS_AVAILABLESPACE'}\n      // aggregatedColumn={'navailablespace'}\n      ,\n      selectionChange: this.selectionChange,\n      headerSelectionChange: this.headerSelectionChange,\n      data: this.state.masterData && this.state.masterData.sampleStoragetransaction,\n      dataResult: // this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : {\n      //         take: 10,\n      //         skip: 0\n      //     }) : []\n      this.state.dataResult ? this.state.dataResult : [],\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.state.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '900px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_MOVECONTAINER\"\n        }),\n        controlname: \"faDolly\",\n        hidden: this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\n        objectName: \"edit\",\n        onClick: this.moveSample\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEWBOX\"\n        }),\n        controlname: \"faBox\",\n        hidden: false // this.state.userRoleControlRights.indexOf(addSampleId) === -1\n        ,\n        objectName: \"add\",\n        onClick: param => this.addSample(param, 1)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1900,\n        columnNumber: 37\n      }\n    }))))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: this.state.ismoveSample ? false : true,\n      needClose: this.state.ismoveSample ? true : this.state.isFilterPopup ? false : true,\n      showSubmit: this.state.ismoveSample ? false : this.state.openSpreadSheet ? false : true,\n      size: this.state.ismoveSample ? \"\" : this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.ismoveSample ? this.props.intl.formatMessage({\n        id: \"IDS_MOVECONTAINER\"\n      }) : this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGE\"\n      }) : this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.state.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.state.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2129,\n          columnNumber: 29\n        }\n      }) : this.state.ismoveSample ? /*#__PURE__*/React.createElement(MoveSample, {\n        ProjectTypeOptions: this.state.ProjectTypeOptions,\n        sampleTypeList: this.state.sampleTypeList,\n        availableContainers: this.state.availableContainers,\n        totalContainers: this.state.totalContainers,\n        storagemoverecords: this.state.storagemoverecords,\n        isMultiContainermove: this.state.isMultiContainermove,\n        sourcencontainertypecode: this.state.sourcencontainertypecode,\n        sourcencontainerstructurecode: this.state.sourcencontainerstructurecode,\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        },\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2137,\n          columnNumber: 33\n        }\n      }) : this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.state.fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2159,\n          columnNumber: 37\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        isMoveScreen: true,\n        updateStore: this.props.updateStore,\n        intl: this.props.intl,\n        Rows: this.state.Rows || 1,\n        AdditionalFieldsComponentData: this.state.AdditionalFieldsComponentData,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        nbarcodedescription: this.props.Login.settings && parseInt(this.props.Login.settings[36]),\n        nbarcodeLength: this.props.Login.settings && parseInt(this.props.Login.settings[37]),\n        sbarcodeboxWidth: this.props.Login.settings && this.props.Login.settings[38],\n        multipleSheetData: this.state.masterData && this.state.masterData.sampleStoragetransaction && process(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2177,\n          columnNumber: 45\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null) // <AddSampleStorageMapping\n      //     operation={this.state.operation}\n      //     selectedRecordFilter={this.state.selectedRecordFilter}\n      //     onInputChange={(e) => this.onInputChange(e)}\n      //     onComboChange={this.onComboChange}\n      //     selectedRecord={this.state.selectedRecord || {}}\n      //     childDataChange={this.childDataChange}\n      //     userInfo={this.props.Login.userInfo}\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2109,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  validateEsignCredential,\n  validateEsignCredentialStorage,\n  crudMasterstorage\n})(injectIntl(SampleStorageMove));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/storagemanagement/SampleStorageMove.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faPuzzlePiece","faCalculator","toast","ListMaster","Lims_JSON_stringify","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","ReadOnlyText","ContentPanel","SearchIcon","DataGrid","BasicConfig","BasicFuncs","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","validateEsignCredentialStorage","crudMasterstorage","DEFAULT_RETURN","ListWrapper","MediaLabel","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","rsapi","Axios","Preloader","TransactionListMasterJsonView","groupBy","process","MatrixComponent","FilterQueryBuilder","Grid","GridColumn","FormSelectSearch","MoveSample","DataGridForStorage","initRequest","bindActionCreators","SampleStorageMove","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","state","selectedId","setState","isInitialRender","isFilterPopup","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","Login","onSaveProperties","openSpreadSheet","ismoveSample","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","destinationPathlst","dataResult","item","items","hasOwnProperty","selected","push","userRoleControlRights","nformcode","ncontrolcode","masterData","inputParam","methodUrl","classUrl","inputData","isMultiContainermove","selectedContainers","nsourcemappingcode","y","destinationPathCount","length","nprojecttypecode","filterprojecttypecode","selectedProjectType","ssamplestoragelocationname","ssamplestoragepathname","scontainerpath","stosamplestoragelocationname","label","stosamplestoragepathname","sboxid","stoboxid","screenData","filterquery","submittedselectedRecord","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","sampleStorageVersion","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","addSample","nflag","urlArray","groupedArray","processWithGroups","sampleStoragetransaction","dataStateChange","url1","post","groupedItem","all","then","response","parse","AdditionalFieldsComponentData","Rows","nrow","columns","ncolumn","catch","error","status","message","warn","onComboChange","comboData","fieldName","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","containerpathCodeArray","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","getsamplestoragetransaction","childDataChange","availableContainersdata","availableContainers","childSheetDataChange","getActiveSampleStorageMappingById","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","ConfirmMove","isok","dataState","confirmMessage","confirm","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","x","approveSampleStorageMapping","movemultipleContainer","storagemoverecords","samplestoragecontainerpathMap","samplestoragecontainerpathList","get","storageStructureMap","storageStructureList","filter","storageStructureOptions","mappingcodeOptions","totalContainers","controlMap","has","moveSample","getProjectType","getProduct","sampleStorageMappingMap","sampleStorageMappingList","sampleTypeMap","sampleTypeList","ProjectTypelst","ProjectTypeOptions","sourcencontainertypecode","sourcencontainerstructurecode","nfromsamplestoragelocationcode","nfromsamplestoragemappingcode","samplestoragecontainerpathOptions","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","tree","getTree","queryString","sqlFormat","headerSelectionChange","checkboxElement","syntheticEvent","selectionChange","dataItem","aggregates","field","aggregate","groups","group","newDataState","validateEsign","sreason","nreasoncode","spredefinedreason","password","extractedColumnList","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","Map","detailSkip","detailTake","settings","selectedItem","fields","dataField","idsName","createRef","dragClue","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","bool","sampleStorageLocation","queryBuilderFreezer","sampleType","projectType","sprojecttypename","filterStorageCategorylist","containerType","values","filterStorageCategory","selectedStorageCategory","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","console","log","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","containerStructureList","getDynamicFilterExecuteData","valuemember","source","displayQuery","info","rtn","shouldComponentUpdate","nextProps","nextState","render","deleteId","copyId","approveId","moveSampleId","moveMultipleSampleId","addMultipleSampleId","addSampleId","projectTypeOptions","hidden","onClick","controlname","cellRender","deleteRecord","objectName","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,IAApD,EAA0DC,MAA1D,EAAkEC,WAAlE,QAAqF,iBAArF;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,UAA1D,EAAsEC,SAAtE,EAAiFC,KAAjF,EAAwFC,eAAxF,EAAyGC,aAAzG,EAAwHC,QAAxH,EAAkIC,YAAlI,EAAgJC,YAAhJ,EAA8JC,QAA9J,EAAwKC,OAAxK,EAAiLC,WAAjL,EAA8LC,eAA9L,EAA+MC,SAA/M,EAA0NC,OAA1N,EAAmOC,aAAnO,EAAkPC,YAAlP,QAAsQ,mCAAtQ;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,aAAnD,EAAkEC,yBAAlE,EAA6FC,UAA7F,EAAyGC,cAAzG,EAAyHC,SAAzH,EAAoIC,QAApI,QAAoJ,+BAApJ;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,UAArC,QAAuD,6BAAvD,C,CACA;;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SACIC,WADJ,EACiBC,UADjB,EAEIC,KAAK,IAAIC,OAFb,QAGO,iCAHP;AAKA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,gCADnE,EACqGC,gBADrG,EACuHC,2BADvH,EAEIC,iBAFJ,EAEuBC,yBAFvB,EAEkDC,4BAFlD,EAEgFC,+BAFhF,EAEiHC,oBAFjH,EAEuIC,wBAFvI,EAGIC,yBAHJ,EAG8BC,8BAH9B,EAG6DC,iBAH7D,QAIO,eAJP;AAKA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,2BAAxC,C,CACA;;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,YAAP,MAAyB,kDAAzB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,WAA/B,QAAkD,gCAAlD;AACA,OAAOC,cAAP,MAA2B,0DAA3B,C,CACA;AACA;;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,uBAA3B,C,CACA;;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,gCAAvD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,OAAOC,6BAAP,MAA0C,gDAA1C;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,4BAAjC;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,4BAAjC;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAGA,MAAMC,iBAAN,SAAgC1G,SAAhC,CAA0C;AAUtC2G,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SATnBC,WASmB,GATL,CASK;AAAA,SARnBC,UAQmB,GARN,KAQM;AAAA,SAPnBC,SAOmB,GAPP,GAOO;AAAA,SANnBC,WAMmB,GANL,EAMK;AAAA,SALnBC,YAKmB,GALJ,CAKI;AAAA,SAJnBC,WAImB,GAJLC,SAIK;AAAA,SAHnBC,WAGmB,GAHL,EAGK;;AAAA,SAiUnBC,SAjUmB,GAiUP,MAAM;AACd,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AACFH,UAAAA,SAAS,EAAE,IADT;AACeI,UAAAA,cAAc,EAAE,EAD/B;AACmCC,UAAAA,kBAAkB,EAAE,KADvD;AAEFC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,IAAI,EAAE,MADV;AAEIC,YAAAA,QAAQ,EAAE,IAFd;AAGIC,YAAAA,QAAQ,EAAE,IAHd;AAIIC,YAAAA,IAAI,EAAE,IAJV;AAKIC,YAAAA,EAAE,EAAErD,IAAI;AALZ,WADM,CAFR;AAUCsD,UAAAA,SAAS,EAAE;AAVZ;AAFS,OAAnB;AAeA,WAAKrB,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KAlVkB;;AAAA,SAmVnBY,UAnVmB,GAmVN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B;AACA,UAAId,SAAS,GAAG,KAAKe,KAAL,CAAWf,SAA3B;AACA,UAAII,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;;AACA,UAAIU,SAAJ,EAAe;AACb;AACEd,QAAAA,SAAS,GAAG,IAAZ;AACAc,QAAAA,SAAS,GAAG,KAAZ;AACAV,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,aAAD,CAAd,GAAgC,EAAhC;AAEA,cAAMH,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEhD,cADK;AAEfiD,UAAAA,IAAI,EAAE;AAAEH,YAAAA,SAAF;AAAac,YAAAA,SAAb;AAAwBV,YAAAA,cAAxB;AAAwCY,YAAAA,UAAU,EAAE;AAApD;AAFS,SAAnB;AAIA,aAAKzB,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,OAbD,MAcK;AACDD,QAAAA,SAAS,GAAG,KAAZ;AACAI,QAAAA,cAAc,GAAG,EAAjB;AACH;;AACD,WAAKa,QAAL,CAAc;AACVb,QAAAA,cADU;AAEX;AACCJ,QAAAA,SAHU;AAGCkB,QAAAA,eAAe,EAAE,IAHlB;AAIRC,QAAAA,aAAa,EAAE,KAJP;AAKVL,QAAAA,SAAS,EAAE;AALD,OAAd;AAOH,KAhXkB;;AAAA,SAiXnBM,aAjXmB,GAiXFC,KAAD,IAAW;AACvB,YAAMjB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;;AACA,UAAIiB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCnB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAjD;AACH,OAFD,MAEO;AACHrB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKT,QAAL,CAAc;AAAEb,QAAAA;AAAF,OAAd;AACH,KA1XkB;;AAAA,SA6XnBuB,WA7XmB,GA6XL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAKtC,KAAL,CAAWuC,KAAX,CAAiBzB,kBAAjB,KAAwC,IAA5C,EAAkD;AAC9C,aAAK0B,gBAAL,CAAsBH,QAAtB,EAAgCC,OAAhC;AACH,OAFD,MAEO,IAAI,KAAKd,KAAL,CAAWiB,eAAX,IAA8B,CAAC,KAAKjB,KAAL,CAAWkB,YAA9C,EAA4D;AAC/D,aAAKC,4BAAL,CAAkC,EAC9B,GAAG,KAAKnB,KAAL,CAAWoB,eADgB;AAE9BC,UAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWsB,gBAAX,GACvBC,MAAM,CAACC,IAAP,CAAY,KAAKxB,KAAL,CAAWyB,SAAvB,EAAkCC,GAAlC,CAAsCL,yBAAyB,IAAIA,yBAAnE,EAA8FM,IAA9F,CAAmG,GAAnG,CADuB,GAErB,KAAK3B,KAAL,CAAWoB,eAAX,CAA2BC,yBAA3B,CAAqDO,QAArD,EAJwB;AAK9BC,UAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWoB,eAAX,CAA2BS,0BALzB;AAM9BJ,UAAAA,SAAS,EAAEK,IAAI,CAACC,SAAL,CAAe,KAAK/B,KAAL,CAAWyB,SAAX,GAAuB,KAAKzB,KAAL,CAAWyB,SAAlC,GAA8C,EAA7D,CANmB;AAO9BO,UAAAA,WAAW,EAAE,IAPiB;AAQ9BC,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QARG;AAS9BZ,UAAAA,gBAAgB,EAAE,KAAKtB,KAAL,CAAWsB;AATC,SAAlC,EAUG,QAVH;AAWH,OAZM,MAYA,IAAI,KAAKtB,KAAL,CAAWkB,YAAf,EAA6B;AAChC,YAAIiB,kBAAkB,GAAG,EAAzB;AACA,YAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,QAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,UAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,gBAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,cAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,WAJC;AAKL,SAND;;AAOA,YAAI7H,SAAS,CAAC,KAAKgE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,EAA8E,KAAK3C,KAAL,CAAW4C,YAAzF,CAAb,EAAqH;AACjH,gBAAMC,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA9B;AACA,cAAIC,UAAU,GAAG;AACbC,YAAAA,SAAS,EAAE,0BADE;AAEblD,YAAAA,SAAS,EAAE,QAFE;AAGbmD,YAAAA,QAAQ,EAAE,mBAHG;AAKbC,YAAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWkD,oBAAX,GAAiC;AACxCC,cAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CADoB;AAExCiB,cAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAFoB;AAGxCiC,cAAAA,oBAAoB,EAAEnB,kBAAkB,CAACoB,MAHD;AAIxCL,cAAAA,oBAAoB,EAAE,IAJkB;AAKxCrB,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KALzC;AAMxC,iBAAG,KAAKX,KAAL,CAAW6C,UAN0B;AAOxCZ,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAPa,aAAjC,GAQP;AACAkB,cAAAA,kBAAkB,EAAE,KAAKpD,KAAL,CAAWoB,eAAX,CAA2BC,yBAD/C;AAEAQ,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAFjF;AAGAU,cAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDV,KAH/E;AAIA6C,cAAAA,gBAAgB,EAAE,KAAKxD,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDmB,gBAJ3E;AAKAC,cAAAA,qBAAqB,EAAC,KAAKzD,KAAL,CAAW0D,mBAAX,CAA+B/C,KALrD;AAOAgD,cAAAA,0BAA0B,EAAC,KAAK3D,KAAL,CAAWoB,eAAX,CAA2BuC,0BAPtD;AAQAC,cAAAA,sBAAsB,EAAC,KAAK5D,KAAL,CAAWoB,eAAX,CAA2ByC,cARlD;AASAC,cAAAA,4BAA4B,EAAC,KAAK9D,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDkC,KATlF;AAUAC,cAAAA,wBAAwB,EAAC,KAAKhE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoD0C,KAV7E;AAWAE,cAAAA,MAAM,EAAC,KAAKjE,KAAL,CAAWoB,eAAX,CAA2B6C,MAXlC;AAYAC,cAAAA,QAAQ,EAAC,KAAKlE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyD4B,MAZlE;AAaA,iBAAG,KAAKjE,KAAL,CAAW6C,UAbd;AAcAZ,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAd3B;AAbS,WAAjB;AA8BA,gBAAMhD,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEhD,cADK;AAEfiD,YAAAA,IAAI,EAAE;AACFW,cAAAA,SAAS,EAAE,IADT;AACed,cAAAA,SAAS,EAAE,IAD1B;AACiCkF,cAAAA,UAAU,EAAE;AAAErB,gBAAAA,UAAF;AAAcD,gBAAAA;AAAd;AAD7C;AAFS,WAAnB;AAMA,eAAKrE,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,SAvCD,MAwCK;AACD,cAAI,KAAKc,KAAL,CAAWkD,oBAAf,EAAqC;AACjC,iBAAK/B,4BAAL,CAAkC;AAC9BgC,cAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CADU;AAE9BiB,cAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAFU;AAG9BiC,cAAAA,oBAAoB,EAAEnB,kBAAkB,CAACoB,MAHX;AAI9BL,cAAAA,oBAAoB,EAAE,IAJQ;AAK9BrB,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KALnD;AAM9B;AACA;AACAyD,cAAAA,WAAW,EAAE,KAAKpE,KAAL,CAAWqE,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAKpE,KAAL,CAAW0D,mBAAX,CAA+B/C,KAR1F;AAS9BsB,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AATG,aAAlC,EAUG,QAVH;AAWH,WAZD,MAYO;AACH,iBAAKf,4BAAL,CAAkC;AAC9BiC,cAAAA,kBAAkB,EAAE,KAAKpD,KAAL,CAAWoB,eAAX,CAA2BC,yBADjB;AAE9BQ,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAFnD;AAG9BU,cAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDV,KAHjD;AAI9B6C,cAAAA,gBAAgB,EAAE,KAAKxD,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDmB,gBAJ7C;AAK9BC,cAAAA,qBAAqB,EAAC,KAAKzD,KAAL,CAAW0D,mBAAX,CAA+B/C,KALvB;AAM9BgD,cAAAA,0BAA0B,EAAC,KAAK3D,KAAL,CAAWoB,eAAX,CAA2BuC,0BANxB;AAO9BC,cAAAA,sBAAsB,EAAC,KAAK5D,KAAL,CAAWoB,eAAX,CAA2ByC,cAPpB;AAQ9BC,cAAAA,4BAA4B,EAAC,KAAK9D,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDkC,KARpD;AAS9BC,cAAAA,wBAAwB,EAAC,KAAKhE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoD0C,KAT/C;AAU9BE,cAAAA,MAAM,EAAC,KAAKjE,KAAL,CAAWoB,eAAX,CAA2B6C,MAVJ;AAW9BC,cAAAA,QAAQ,EAAC,KAAKlE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyD4B,MAXpC;AAY9BG,cAAAA,WAAW,EAAE,KAAKpE,KAAL,CAAWqE,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAKpE,KAAL,CAAW0D,mBAAX,CAA+B/C,KAZ1F;AAa9BsB,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAbG,aAAlC,EAcG,QAdH;AAeH;AACJ;AACJ,OAjFM,MAiFA;AACH,aAAKoC,8BAAL,CAAoCzD,QAApC,EAA8CC,OAA9C;AACH;AACJ,KAhekB;;AAAA,SAmenByD,cAnemB,GAmeDC,CAAD,IAAO;AACpB,WAAKtE,QAAL,CAAc;AACVuE,QAAAA,0BAA0B,EAAED;AADlB,OAAd;AAGH,KAvekB;;AAAA,SAwenBE,gBAxemB,GAweAC,CAAC,IAAI;AACpB,WAAKzE,QAAL,CAAc;AACV0E,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KA7ekB;;AAAA,SA8enBC,sBA9emB,GA8eMH,CAAC,IAAI;AAC1B,WAAKzE,QAAL,CAAc;AACV0E,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KAnfkB;;AAAA,SA2hBnBE,UA3hBmB,GA2hBN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAKxG,KAAL,CAAWuC,KAAX,CAAiBiE,UAAnC;AACA,YAAM9F,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AAAE4F,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKxG,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KAliBkB;;AAAA,SAoiBnB+F,WApiBmB,GAoiBL,MAAM;AAEhB,YAAM/F,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AAAE4F,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAKxG,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KA3iBkB;;AAAA,SA4iBnBgG,UA5iBmB,GA4iBN,MAAM;AACf,WAAKC,cAAL;AACH,KA9iBkB;;AAAA,SA+iBnBC,2BA/iBmB,GA+iBW,CAACC,4BAAD,EAA+BnD,QAA/B,EAAyCoD,MAAzC,KAAoD;AAC9E,WAAKC,YAAL;AACA,WAAKrF,QAAL,CAAc;AAAEsF,QAAAA,gBAAgB,EAAEzG;AAApB,OAAd;;AACA,UAAI,KAAK0G,SAAL,CAAeC,OAAnB,EAA4B;AACxB,aAAKD,SAAL,CAAeC,OAAf,CAAuB/E,KAAvB,GAA+B,EAA/B;AACH;;AAED,UAAIgF,WAAW,GAAG,KAAlB;;AACA,UAAI,KAAKnH,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B+C,oBAA5B,IAAoD,KAAKpH,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B+C,oBAA5B,CAAiDrC,MAAjD,GAA0D,CAAlH,EAAqH;AACjHoC,QAAAA,WAAW,GAAG,IAAd;AACH;;AACD,WAAKnH,KAAL,CAAW7C,yBAAX,CAAqC0J,4BAArC,EAAmEnD,QAAnE,EAA6EyD,WAA7E,EAA0FL,MAA1F;AACH,KA3jBkB;;AAAA,SA4jBnBO,kBA5jBmB,GA4jBGC,KAAD,IAAW;AAC5B,WAAKC,uBAAL,CAA6B;AAAE7D,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWuC,KAAX,CAAiBmB,QAA7B;AAAuC4D,QAAAA;AAAvC,OAA7B;AACH,KA9jBkB;;AAAA,SA+jBnBE,0BA/jBmB,GA+jBWC,KAAD,IAAW;AACpC,WAAK9E,4BAAL,CAAkC;AAC9B,sCAA8B,KAAKnB,KAAL,CAAW6C,UAAX,CAAsBqD,6BAAtB,CAAoDrE,0BADpD;AAE9B,qCAA6BoE,KAAK,CAAC5E,yBAFL;AAG9BY,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAHG,OAAlC,EAIG,QAJH;AAKH,KArkBkB;;AAAA,SAskBnBiE,iBAtkBmB,GAskBEF,KAAD,IAAW;AAC3B,WAAK/F,QAAL,CAAc;AACV;AACAjB,QAAAA,SAAS,EAAE,IAFD;AAEOqC,QAAAA,gBAAgB,EAAE,IAFzB;AAE+BL,QAAAA,eAAe,EAAE,IAFhD;AAEqD;AAC/DmF,QAAAA,OAAO,EAAE;AAHC,OAAd;AAKH,KA5kBkB;;AAAA,SAilBnBC,UAjlBmB,GAilBN,MAAM;AACf,WAAKnG,QAAL,CAAc;AACVjB,QAAAA,SAAS,EAAE,IADD;AACOmB,QAAAA,aAAa,EAAE,IADtB;AAC4Ba,QAAAA,eAAe,EAAE,KAD7C;AACmDC,QAAAA,YAAY,EAAC,KADhE;AACuE7B,QAAAA,cAAc,EAAE,EAAE,GAAG,KAAKW,KAAL,CAAWqE;AAAhB,aAC7F,EAAE,GAAG,KAAKrE,KAAL,CAAWX;AAAhB;AAFM,OAAd;AAIH,KAtlBkB;;AAAA,SAulBnBiH,SAvlBmB,GAulBP,CAACL,KAAD,EAAQM,KAAR,KAAkB;AAC1B,WAAKrG,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAII,QAAQ,GAAG,EAAf;AACA,UAAIC,YAAY,GAAG,KAAKC,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACf,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD3C,EAIZxF,IAJP;AAKA,YAAMyH,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,2DAAX,EACT;AACIxF,QAAAA,gBAAgB,EAAGiF,KAAK,KAAK,CAAX,GAAgB,IAAhB,GAAuB,KAD7C;AAEIlF,QAAAA,yBAAyB,EACpBkF,KAAK,KAAK,CAAX,GAAgBE,YAAY,CAAC/E,GAAb,CAAiBqF,WAAW,IAAIA,WAAW,CAACzE,KAAZ,CAAkBZ,GAAlB,CAAsBW,IAAI,IAAIA,IAAI,CAAChB,yBAAnC,CAAhC,EAA+FM,IAA/F,CAAoG,GAApG,CAAhB,GACMsE,KAAK,CAAC5E,yBAAN,CAAgCO,QAAhC;AAJd,OADS,CAAb;AAOA4E,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,YAAIX,KAAK,KAAK,CAAd,EAAiB;AACb,eAAKrG,QAAL,CAAc;AACVuB,YAAAA,SAAS,EAAEK,IAAI,CAACqF,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBqC,SAA5B,CADD;AAEV2F,YAAAA,6BAA6B,EAAEtF,IAAI,CAACqF,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBgI,6BAA5B,CAFrB;AAGVnI,YAAAA,SAAS,EAAE,IAHD;AAGOqC,YAAAA,gBAAgB,EAAE,IAHzB;AAG+BL,YAAAA,eAAe,EAAE,IAHhD;AAGqD;AAC/DmF,YAAAA,OAAO,EAAE,KAJC;AAKVrG,YAAAA,SAAS,EAAE,KALD;AAKOmB,YAAAA,YAAY,EAAC;AALpB,WAAd;AAOH,SARD,MAQO;AACH,eAAKhB,QAAL,CAAc;AACVuB,YAAAA,SAAS,EAAEK,IAAI,CAACqF,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBqC,SAA5B,CADD;AAEV2F,YAAAA,6BAA6B,EAAEtF,IAAI,CAACqF,KAAL,CAAWD,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBgI,6BAA5B,CAFrB;AAGVnI,YAAAA,SAAS,EAAE,IAHD;AAGOqC,YAAAA,gBAAgB,EAAE,KAHzB;AAGgCL,YAAAA,eAAe,EAAE,IAHjD;AAIVG,YAAAA,eAAe,EAAE6E,KAJP;AAIcoB,YAAAA,IAAI,EAAEpB,KAAK,CAACqB,IAJ1B;AAIgCC,YAAAA,OAAO,EAAEtB,KAAK,CAACuB,OAJ/C;AAKVpB,YAAAA,OAAO,EAAE,KALC;AAKMrG,YAAAA,SAAS,EAAE,KALjB;AAKuBmB,YAAAA,YAAY,EAAC;AALpC,WAAd;AAOH;AACJ,OAnBL,EAmBOuG,KAnBP,CAmBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA5BL;AA+BH,KAtoBkB;;AAAA,SAuoBnB0B,aAvoBmB,GAuoBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAM3I,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;AACA,UAAI4I,oBAAoB,GAAG,KAAKjI,KAAL,CAAWiI,oBAAX,IAAmC,EAA9D;AACA,UAAIvE,mBAAmB,GAAG,KAAK1D,KAAL,CAAW0D,mBAArC;AACA,UAAIb,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA5B;;AACA,UAAImF,SAAS,KAAK,sBAAlB,EAA0C;AACtC,eAAO,KAAKE,wBAAL,CAA8B;AACjCjG,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADM;AAEjCiG,UAAAA,oBAAoB,EAAEJ,SAAS,CAACpH;AAFC,SAA9B,EAGJqH,SAHI,EAGOD,SAHP,CAAP;AAIH,OALD,MAKO,IAAIC,SAAS,KAAK,oBAAlB,EAAwC;AAC3C,eAAO,KAAKI,qBAAL,CAA2B;AAC9BnG,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADG;AAE9BmG,UAAAA,kBAAkB,EAAEN,SAAS,CAACpH;AAFA,SAA3B,EAGJqH,SAHI,EAGOD,SAHP,CAAP;AAKH,OANM,MAMA,IAAIC,SAAS,KAAK,kBAAlB,EAAsC;AACzC,YAAItE,mBAAmB,CAAC/C,KAApB,KAA8BoH,SAAS,CAACpH,KAA5C,EAAmD;AAC/CkC,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET8D,YAAAA,wBAAwB,EAAE;AAFjB,WAAb;AAIH;;AACD,aAAKzG,QAAL,CAAc;AAAE2C,UAAAA,UAAF;AAAca,UAAAA,mBAAmB,EAAE;AAAEK,YAAAA,KAAK,EAAEgE,SAAS,CAAChE,KAAnB;AAA0BpD,YAAAA,KAAK,EAAEoH,SAAS,CAACpH;AAA3C;AAAnC,SAAd;AAEH,OATM,MASA,IAAIqH,SAAS,KAAK,yBAAlB,EAA6C;AAChD3I,QAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB0I,SAAS,CAAC1F,IAAV,CAAeiF,IAAf,GAAsBS,SAAS,CAAC1F,IAAV,CAAeiF,IAArC,GAA4C,CAArE;AACAjI,QAAAA,cAAc,CAAC,SAAD,CAAd,GAA4B0I,SAAS,CAAC1F,IAAV,CAAemF,OAAf,GAAyBO,SAAS,CAAC1F,IAAV,CAAemF,OAAxC,GAAkD,CAA9E;AACH,OAHM,MAGA,IAAIQ,SAAS,KAAK,4BAAlB,EAAgD;AACnD,eAAO,KAAKE,wBAAL,CAA8B;AACjCjG,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADM;AAEjCiG,UAAAA,oBAAoB,EAAE,KAAKnI,KAAL,CAAWiI,oBAAX,CAAgC,sBAAhC,EAAwDtH,KAF7C;AAGjCkB,UAAAA,0BAA0B,EAAEkG,SAAS,CAACpH;AAHL,SAA9B,EAKJqH,SALI,EAKOD,SALP,CAAP;AAMH;;AACD,UAAIC,SAAS,KAAK,2BAAlB,EAA+C;AAC3CC,QAAAA,oBAAoB,CAACD,SAAD,CAApB,GAAkCD,SAAlC;AACA,aAAK7H,QAAL,CAAc;AAAE+H,UAAAA;AAAF,SAAd;AAEH,OAJD,MAIO;AACH5I,QAAAA,cAAc,CAAC2I,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAK7H,QAAL,CAAc;AAAEb,UAAAA,cAAF;AAAkB4I,UAAAA;AAAlB,SAAd;AACH;AAGJ,KArrBkB;;AAAA,SAurBnB3D,8BAvrBmB,GAurBezD,QAAD,IAAc;AAC3C,UAAIxB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,UAAIiJ,sBAAsB,GAAG,EAA7B;;AACA,UAAI,KAAKtI,KAAL,CAAWH,SAAX,KAAyB,QAA7B,EAAuC;AACnCyI,QAAAA,sBAAsB,GAAGjJ,cAAc,CAAC,iCAAD,CAAd,CAAkDqC,GAAlD,CAAsDW,IAAI,IAAIA,IAAI,CAAC1B,KAAnE,CAAzB;AACH;;AACD,YAAMmC,UAAU,GAChB;AACIyF,QAAAA,6BAA6B,EAAElJ,cAAc,CAAC,+BAAD,CAAd,GAC3BmJ,QAAQ,CAACnJ,cAAc,CAAC,+BAAD,CAAf,CADmB,GACiC,CAFpE;AAGIwC,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsBqD,6BAAtB,CAAoDrE,0BAHpF;AAIIR,QAAAA,yBAAyB,EAAEhC,cAAc,CAAC,2BAAD,CAAd,GACvBmJ,QAAQ,CAACnJ,cAAc,CAAC,2BAAD,CAAf,CADe,GACiC,CALhE;AAMIgJ,QAAAA,kBAAkB,EAAE,CAAC,CANzB;AAOII,QAAAA,YAAY,EAAEpJ,cAAc,CAAC,cAAD,CAAd,CAA+BsB,KAPjD;AAQI+H,QAAAA,oBAAoB,EAAE,CAAC,CAR3B;AASIC,QAAAA,yBAAyB,EAAE,GAT/B;AAUIC,QAAAA,+BAA+B,EAAE,KAAK5I,KAAL,CAAWH,SAAX,KAAyB,QAAzB,GAC7BiC,IAAI,CAACC,SAAL,CAAeuG,sBAAf,CAD6B,GACYE,QAAQ,CAACnJ,cAAc,CAAC,iCAAD,CAAd,CAAkDsB,KAAnD,CAXzD;AAYIkI,QAAAA,iBAAiB,EAAEP,sBAAsB,CAAC/E,MAZ9C;AAaIuF,QAAAA,aAAa,EAAE,CAbnB;AAcIC,QAAAA,uBAAuB,EAAE,CAAC,CAd9B;AAciCC,QAAAA,SAAS,EAAE3J,cAAc,CAAC,WAAD,CAAd,GACpCmJ,QAAQ,CAACnJ,cAAc,CAAC,WAAD,CAAf,CAD4B,GACI,CAfhD;AAgBI4C,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAhB/B,OADA;AAmBA,YAAMW,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAApC;;AACA,UAAIrI,SAAS,CAAC,KAAKgE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,EAA8E,KAAKnE,KAAL,CAAWuC,KAAX,CAAiB6B,YAA/F,CAAb,EAA2H;AACvH,cAAM1D,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEhD,cADK;AAEfiD,UAAAA,IAAI,EAAE;AACFW,YAAAA,SAAS,EAAE,IADT;AACeoE,YAAAA,UAAU,EAAE;AAAErB,cAAAA,UAAF;AAAcD,cAAAA;AAAd,aAD3B;AACuDhC,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKrC,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,OARD,MASK;AACD,aAAKiC,4BAAL,CAAkC2B,UAAlC,EAA8C,KAAK9C,KAAL,CAAWH,SAAzD;AACH;AACJ,KA7tBkB;;AAAA,SA8tBnBoJ,2BA9tBmB,GA8tBW,CAACnG,UAAD,EAAab,QAAb,KAA0B;AACpD,WAAK/B,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAII,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,sDAAX,EAAmE;AAC5E7E,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AADiD,OAAnE,CAAb;AAGAsE,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,aAAKhH,QAAL,CAAc;AACV2C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H;AADjC,WADF;AAIVgH,UAAAA,OAAO,EAAE;AAJC,SAAd;AAOH,OATL,EASOqB,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAoBH,KAzvBkB;;AAAA,SA2vBnB8C,eA3vBmB,GA2vBD,CAAC7J,cAAD,EAAiB8J,uBAAjB,KAA6C;AAC3D,WAAKjJ,QAAL,CAAc;AACVkJ,QAAAA,mBAAmB,EAAED,uBADX;AAEV9J,QAAAA,cAAc,EAAE,EACZ,GAAGA;AADS,SAFN;AAKVc,QAAAA,eAAe,EAAE;AALP,OAAd;AAOH,KAnwBkB;;AAAA,SAowBnBkJ,oBApwBmB,GAowBK5H,SAAD,IAAe;AAElC,WAAKvB,QAAL,CAAc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAuB,QAAAA,SAAS,EAAE,EACP,GAAGA;AADI,SARD;AAWVtB,QAAAA,eAAe,EAAE;AAXP,OAAd;AAaH,KAnxBkB;;AAAA,SAqxBnBmJ,iCArxBmB,GAqxBiB,CAACxG,UAAD,EAAab,QAAb,KAA0B;AAC1D,WAAK/B,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAII,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,4DAAX,EAAyE;AAClFjF,QAAAA,0BAA0B,EAAEiB,UAAU,CAAC,+BAAD,CAAV,CAA4C,CAA5C,EAA+CjB,0BADO;AAElFI,QAAAA,QAAQ,EAAEA;AAFwE,OAAzE,CAAb;AAIAuE,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,aAAKhH,QAAL,CAAc;AACV2C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H;AADjC,WADF,CAGT;AACD;AACA;AACA;AACA;AAPU;AASVgH,UAAAA,OAAO,EAAE;AATC,SAAd;AAYH,OAdL,EAcOqB,KAdP,CAcaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAvBL;AAyBH,KAtzBkB;;AAAA,SAuzBnB5K,gBAvzBmB,GAuzBA,CAAC+N,WAAD,EAAcC,WAAd,KAA8B;AAC7C,UAAI3G,UAAU,GAAG2G,WAAW,CAAC3G,UAA7B;AACA,UAAI4G,eAAe,GAAG,CAAtB;AACA,UAAIC,YAAY,GAAG3K,SAAnB;;AACA,UAAIwK,WAAW,KAAK,EAApB,EAAwB;AACpB,YAAI1G,UAAU,CAAC2G,WAAW,CAACG,aAAb,CAAV,IAAyC9G,UAAU,CAAC2G,WAAW,CAACG,aAAb,CAAV,CAAsCpG,MAAtC,GAA+C,CAA5F,EAA+F;AAC3FkG,UAAAA,eAAe,GAAG5G,UAAU,CAAC2G,WAAW,CAACG,aAAb,CAAV,CAAsC,CAAtC,EAAyCH,WAAW,CAACI,eAArD,CAAlB;AACH;AACJ,OAJD,MAKK;AACD,YAAIJ,WAAW,CAACK,UAAhB,EAA4B;AACxBH,UAAAA,YAAY,GAAGnP,cAAc,CAACgP,WAAD,EAAc1G,UAAU,CAAC2G,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAA7B;AACH,SAFD,MAGK;AACDJ,UAAAA,YAAY,GAAGpP,UAAU,CAACiP,WAAD,EAAc1G,UAAU,CAAC2G,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAAzB;AAEH;;AACD,YAAIJ,YAAY,CAACnG,MAAb,GAAsB,CAA1B,EAA6B;AACzBkG,UAAAA,eAAe,GAAGC,YAAY,CAAC,CAAD,CAAZ,CAAgBF,WAAW,CAACI,eAA5B,CAAlB;AACH;AACJ;;AAED,UAAIH,eAAe,KAAK,CAAxB,EAA2B;AACvB,aAAKvJ,QAAL,CAAc;AAAEkG,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,eAAO7I,KAAK,CAACuJ,IAAN,CAAW0C,WAAW,CAACO,QAAvB,EAAiC,EAAE,GAAGP,WAAW,CAACQ,gBAAjB;AAAmC,WAACR,WAAW,CAACI,eAAb,GAA+BH;AAAlE,SAAjC,EACFxC,IADE,CACGC,QAAQ,IAAI;AACdrE,UAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B6G,YAA7B;AACA7G,UAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,eAAGqE,QAAQ,CAAC9H;AAA7B,WAAb;;AAEA,cAAIoK,WAAW,CAACS,SAAhB,EAA2B;AACvBxP,YAAAA,QAAQ,CAACoI,UAAD,EAAa2G,WAAW,CAACU,SAAzB,EAAoCV,WAAW,CAACS,SAAhD,CAAR;AACH,WAFD,MAGK;AACDxP,YAAAA,QAAQ,CAACoI,UAAD,CAAR;AACH;;AACD,eAAK3C,QAAL,CAAc;AAAE2C,YAAAA,UAAF;AAAcuD,YAAAA,OAAO,EAAE,KAAvB;AAA8BxB,YAAAA,IAAI,EAAE,CAApC;AAAuCC,YAAAA,IAAI,EAAE,EAA7C;AAAiD5E,YAAAA,UAAU,EAAE;AAA7D,WAAd;AACH,SAZE,EAaFwH,KAbE,CAaIC,KAAK,IAAI;AACZ,eAAKxH,QAAL,CAAc;AAAEkG,YAAAA,OAAO,EAAE;AAAX,WAAd;;AACA,cAAIsB,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,YAAAA,KAAK,CAAC0N,KAAN,CAAY,KAAKlJ,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,cAAAA,EAAE,EAAE8H,KAAK,CAACE;AAAZ,aAA9B,CAAZ;AACH,WAFD,MAGK;AACD5N,YAAAA,KAAK,CAAC6N,IAAN,CAAW,KAAKrJ,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,cAAAA,EAAE,EAAE8H,KAAK,CAACR,QAAN,CAAe9H;AAArB,aAA9B,CAAX;AACH;AACJ,SArBE,CAAP;AAsBH,OAxBD,MAyBK;AACDyD,QAAAA,UAAU,CAAC2G,WAAW,CAACa,cAAb,CAAV,GAAyCtL,SAAzC;AACA8D,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,EAA7B;AACAtB,QAAAA,MAAM,CAACC,IAAP,CAAYqB,UAAZ,EAAwByH,OAAxB,CAAgCjI,IAAI,IAAI;AACpC,cAAIA,IAAI,KAAKmH,WAAW,CAACG,aAArB,IAAsCtH,IAAI,KAAKmH,WAAW,CAACa,cAA3D,IACGb,WAAW,CAACe,YADf,IAC+Bf,WAAW,CAACe,YAAZ,CAAyBC,OAAzB,CAAiCnI,IAAjC,MAA2C,CAAC,CAD/E,EAEIQ,UAAU,CAACR,IAAD,CAAV,GAAmB,EAAnB;AACP,SAJD;AAKA,aAAKnC,QAAL,CAAc;AACV2C,UAAAA,UADU;AACEhD,UAAAA,SAAS,EAAE,IADb;AACmB4K,UAAAA,SAAS,EAAE1L,SAD9B;AAEVqH,UAAAA,OAAO,EAAE;AAFC,SAAd;AAKH;AACJ,KAp3BkB;;AAAA,SAs3BnBsE,WAt3BmB,GAs3BL,MAAM;AAChB,UAAIvI,kBAAkB,GAAG,EAAzB;AACA,UAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,QAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,cAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,YAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,SAJC;AAKL,OAND;AAOA,YAAMY,SAAS,GAAC;AACZ0H,QAAAA,IAAI,EAAC,IADO;AAEZlH,QAAAA,qBAAqB,EAAC,KAAKzD,KAAL,CAAW0D,mBAAX,CAA+B/C,KAFzC;AAGZwC,QAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CAHR;AAIZiB,QAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAJR;AAKZiC,QAAAA,oBAAoB,EAAEnB,kBAAkB,CAACoB,MAL7B;AAMZL,QAAAA,oBAAoB,EAAE,IANV;AAOZrB,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAPrE;AAQZsB,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AARf,OAAhB;AAUA,YAAMY,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE,0BADI;AAEfC,QAAAA,QAAQ,EAAE,mBAFK;AAGfC,QAAAA,SAAS,EAAEA,SAHI;AAIfpD,QAAAA,SAAS,EAAE,QAJI;AAKf+K,QAAAA,SAAS,EAAE,KAAK5K,KAAL,CAAW4G;AALP,OAAnB;AAQA,WAAKiE,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EACA,KAAKtM,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADA,EAEC,KAAKpB,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFD,EAGI,KAAKpB,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHJ,EAIK,KAAKpB,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJL,EAKK,KAAKI,KAAL,CAAWD,SAAX,GACA,MAAI,KAAKvB,KAAL,CAAWtC,iBAAX,CAA6B4G,UAA7B,EAAyC,KAAK9C,KAAL,CAAW6C,UAApD,EAAgE,WAAhE,CADJ,GAGA,MAAI,KAAK1B,4BAAL,CAAkC,EAAC,GAAG8B;AAAJ,OAAlC,EAAkD,QAAlD,CART;AASH,KA35BkB;;AAAA,SA45BnB9B,4BA55BmB,GA45BY,CAAC2B,UAAD,EAAajD,SAAb,KAA2B;AACtD,WAAKK,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAII,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,uBAAuBjH,SAAvB,GAAmC,0BAA9C,EAA0EiD,UAA1E,CAAb;AACA0D,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd;AACA;AACA;AACI,aAAKhH,QAAL,CAAc;AACVC,UAAAA,eAAe,EAAE,IADP;AAEVd,UAAAA,cAAc,EAAE,EAFN;AAGVwD,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H;AADjC,WAHF;AAMVH,UAAAA,SAAS,EAAE,KAND;AAOVmH,UAAAA,OAAO,EAAE,KAPC;AAQVlF,UAAAA,YAAY,EAAE;AARJ,SAAd,EAJU,CAcd;AACH,OAhBL,EAgBOuG,KAhBP,CAgBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH,cAAGF,KAAK,CAACR,QAAN,CAAe9H,IAAf,KAAsB,kCAAzB,EAA4D;AACxD,iBAAKsL,WAAL;AACH,WAFD,MAEK;AACD1Q,YAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;AACJ;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA7BL;AA+BH,KAh8BkB;;AAAA,SA6/BnBjB,cA7/BmB,GA6/BF,MAAM;AACnB,WAAKjF,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAI2E,cAAc,GAAG;AACjB5C,QAAAA,oBAAoB,EAAE,KAAKnI,KAAL,CAAWiI,oBAAX,CAAgC,sBAAhC,EAAwDtH,KAD7D;AAEjB;AACA;AACAsB,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJV,OAArB;AAMA,UAAIsE,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,kDAAX,EAA+DiE,cAA/D,CAAb;AACAvE,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,YAAI8D,MAAM,GAAG;AACTC,UAAAA,2BAA2B,EAAE,KAAKjL,KAAL,CAAWiI,oBAAX,CAAgC,sBAAhC,EAAwD5F,IAAxD,CAA6D6I,oBADjF,CAET;AACA;;AAHS,SAAb;AAKA,YAAIC,UAAU,GAAG,KAAKC,qBAAL,CAA2BJ,MAA3B,CAAjB;AAEA,aAAK9K,QAAL,CAAc;AACViL,UAAAA,UADU;AAEVtI,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AAER,eAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAFP,CAGR;;AAHQ,WAFF;AAOVgH,UAAAA,OAAO,EAAE;AAPC,SAAd;AASH,OAlBL,EAkBOqB,KAlBP,CAkBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA3BL;AA4BH,KApiCkB;;AAAA,SAyqCnBiF,wBAzqCmB,GAyqCQ,MAAM;AAC7B,YAAMC,eAAe,GAChB,KAAKtL,KAAL,CAAWkD,oBAAX,GACA,CAAC;AACE,mBAAW,4BADb;AAC2C,qBAAa,4BADxD;AAEE,0BAAkB,YAFpB;AAEkC,uBAAe;AAFjD,OAAD,CADA,GAKG,CAAC;AACG,mBAAW,4BADd;AAC4C,qBAAa,4BADzD;AAEG,0BAAkB,YAFrB;AAEmC,uBAAe;AAFlD,OAAD,EAIA;AACI,mBAAW,yBADf;AAEI,qBAAa,2BAFjB;AAE8C,0BACtC,YAHR;AAGsB,uBAAe;AAHrC,OAJA,CANR,CAD6B,CAgBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACR7I,MAAAA,yBAAyB,CAAC,KAAK2F,KAAL,CAAWX,cAAZ,EAA4BiM,eAA5B,EACrB,KAAK1K,WADgB,CAAzB;AAEH,KA5uCkB;;AAAA,SA6uCnBgG,eA7uCmB,GA6uCAtG,KAAD,IAAW;AACzB,UAAI8B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;;AACA,UAAI,KAAKpC,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA1B,EAAoD;AAChDvE,QAAAA,UAAU,GAAG,KAAKpC,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,GACT,KAAKD,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACIrG,KAAK,CAACsK,SAAN,GAAkBtK,KAAK,CAACsK,SAAxB,GAAoC;AAChC/F,UAAAA,IAAI,EAAE,EAD0B;AAEhCD,UAAAA,IAAI,EAAE;AAF0B,SADxC,CADS,GAKA,EALb;AAMAxC,QAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoB6J,CAAC,IAAI;AACrB,iBAAOA,CAAC,CAACjJ,KAAF,CAAQZ,GAAR,CAAYW,IAAI,IAAI;AACvBA,YAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACA,mBAAOH,IAAP;AACH,WAHM,CAAP;AAIH,SALD;AAMH;;AACD,WAAKnC,QAAL,CAAc;AACVkC,QAAAA,UAAU,EAAEA,UADF;AAEVwE,QAAAA,eAAe,EAAEtG,KAAK,CAACsK;AAFb,OAAd;AAIH,KAjwCkB;;AAAA,SAmwCnBY,2BAnwCmB,GAmwCYlL,KAAD,IAAW;AACrC,UAAIyK,cAAc,GAAG,EAArB;AACA,WAAK7K,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA2E,MAAAA,cAAc,GAAG;AACblJ,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsBqD,6BAAtB,CAAoDrE,0BADnE;AAEbI,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAFd,OAAjB;AAIA,UAAIsE,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,sDAAX,EAAmEiE,cAAnE,CAAb;AAEAvE,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,aAAKhH,QAAL,CAAc;AACV2C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AAER,eAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H;AAFP,WADF;AAKVgH,UAAAA,OAAO,EAAE;AALC,SAAd;AAOH,OATL,EASOqB,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAmBH,KAjyCkB;;AAAA,SAq1CnBqF,qBAr1CmB,GAq1CK,MAAM;AAC1B,UAAItJ,kBAAkB,GAAG,EAAzB;AACA,UAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,QAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,cAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,YAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,SAJC;AAKL,OAND;;AAOA,UAAGF,kBAAkB,CAACoB,MAAnB,GAA0B,CAA7B,EAA+B;AAC/B,aAAKrD,QAAL,CAAc;AAAEkG,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAII,QAAQ,GAAG,EAAf;AACA,cAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,qCAAX,EACT;AACI5D,UAAAA,oBAAoB,EAAE,IAD1B;AAEI;AACA;AACAA,UAAAA,oBAAoB,EAAE,IAJ1B;AAKIjB,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAL/B,SADS,CAAb;AAQAsE,QAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,QAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,cAAIwE,kBAAkB,GAAG,EAAzB;AACA,cAAIrM,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,gBAAMsM,6BAA6B,GAAGxR,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACrD,iCADqD,EAErD,gBAFqD,EAEnCL,SAFmC,EAExBA,SAFwB,EAEb,IAFa,CAAzD;AAGA,gBAAM6M,8BAA8B,GAAGD,6BAA6B,CAACE,GAA9B,CAAkC,YAAlC,CAAvC;AACA,gBAAMC,mBAAmB,GAAG3R,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,uBAAjB,KAA6C,EAA9C,EAC3C,4BAD2C,EAE3C,4BAF2C,EAEb,YAFa,EAECL,SAFD,EAEY,IAFZ,CAA/C;AAGA,gBAAMgN,oBAAoB,GAAGD,mBAAmB,CAACD,GAApB,CAAwB,YAAxB,CAA7B;AAEAH,UAAAA,kBAAkB,GAAG,KAAK1L,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,CAA+CqF,MAA/C,CAAsD3J,IAAI,IAC3EA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QADvB,CAArB;AAGAnD,UAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbwC,YAAAA,0BAA0B,EAAE;AACxBkC,cAAAA,KAAK,EAAEgI,oBAAoB,CAAC,CAAD,CAApB,CAAwBhI,KADP;AAExBpD,cAAAA,KAAK,EAAEoL,oBAAoB,CAAC,CAAD,CAApB,CAAwBpL,KAFP;AAGxB0B,cAAAA,IAAI,EAAE0J,oBAAoB,CAAC,CAAD;AAHF,aAFf;AAObE,YAAAA,uBAAuB,EAAEF;AAPZ,WAAjB;AASA,eAAK/L,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,CAA+CjF,GAA/C,CAAmDW,IAAI,IACnDhD,cAAc,GAAG,EACb,GAAGA,cADU;AAEb6M,YAAAA,kBAAkB,EAAE,EAChB,GAAG7M,cAAc,CAAC6M,kBADF;AAEhB,eAAC7J,IAAI,CAAChB,yBAAN,GAAkCuK;AAFlB;AAFP,WADrB;AASA,eAAK1L,QAAL,CAAc;AACVkJ,YAAAA,mBAAmB,EAAElC,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,qBAAjB,CADX;AAEV+M,YAAAA,eAAe,EAAEjF,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,iBAAjB,CAFP;AAGVC,YAAAA,cAHU;AAIV6D,YAAAA,oBAAoB,EAAE,IAJZ;AAKVwI,YAAAA,kBAAkB,EAAEA,kBALV;AAMVxK,YAAAA,YAAY,EAAE,IANJ;AAOVjC,YAAAA,SAAS,EAAE,IAPD;AAQVc,YAAAA,SAAS,EAAE,KARD;AASVqG,YAAAA,OAAO,EAAE,KATC;AAUVxD,YAAAA,YAAY,EAAE,KAAK5C,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,yBAA1B,KAAwD,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,yBAA1B,EAAqDjJ;AAVjH,WAAd;AAYH,SA9CL,EA8CO6E,KA9CP,CA8CaC,KAAK,IAAI;AACd,cAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,YAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAEO;AACH5N,YAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,eAAKc,QAAL,CAAc;AACVkG,YAAAA,OAAO,EAAE;AADC,WAAd;AAGH,SAvDL;AAwDC,OApED,MAoEO;AACHpM,QAAAA,KAAK,CAAC6N,IAAN,CAAW,KAAKrJ,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AAEH;AACJ,KAv6CkB;;AAAA,SAw6CnB0M,UAx6CmB,GAw6CN,CAACrG,KAAD,EAAQM,KAAR,KAAkB;AAC3B,WAAKrG,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAII,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,qCAAX,EACT;AACIzF,QAAAA,yBAAyB,EAAE4E,KAAK,CAAC5E,yBADrC;AAEIgH,QAAAA,kBAAkB,EAAEpC,KAAK,CAACoC,kBAF9B;AAGIU,QAAAA,uBAAuB,EAAE9C,KAAK,CAAC8C,uBAHnC;AAII9G,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJ/B,OADS,CAAb;AAOD,YAAMqK,cAAc,GAAGhP,KAAK,CAACuJ,IAAN,CAAW,4BAAX,EAAyC;AAC/D,oBAAY,KAAKtI,KAAL,CAAWuC,KAAX,CAAiBmB;AADkC,OAAzC,CAAvB;AAGC,YAAMsK,UAAU,GAAGjP,KAAK,CAACuJ,IAAN,CAAW,mCAAX,EACf;AAAE,oBAAY,KAAKtI,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,OADe,CAAnB;AAEAsE,MAAAA,QAAQ,GAAG,CAACK,IAAD,EAAM2F,UAAN,EAAiBD,cAAjB,CAAX;AACA/O,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,cAAM4E,mBAAmB,GAAG3R,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,uBAAjB,KAA6C,EAA9C,EAC3C,4BAD2C,EAE3C,4BAF2C,EAEb,YAFa,EAECL,SAFD,EAEY,IAFZ,CAA/C;AAGA,cAAMgN,oBAAoB,GAAGD,mBAAmB,CAACD,GAApB,CAAwB,YAAxB,CAA7B,CAJc,CAMd;AACA;AACA;AACA;AACD;;AACC,cAAMY,uBAAuB,GAAGtS,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EAC/C,2BAD+C,EACnB,gBADmB,EACFL,SADE,EACQA,SADR,EACmB,IADnB,CAAnD;AAGA,cAAM2N,wBAAwB,GAAGD,uBAAuB,CAACZ,GAAxB,CAA4B,YAA5B,CAAjC;AAEA,cAAMc,aAAa,GAAGxS,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,IAAqB,EAAtB,EAA0B,cAA1B,EAAyC,cAAzC,EAAyDL,SAAzD,EAAoEA,SAApE,EAA+E,IAA/E,CAAzC;AAEA,cAAM6N,cAAc,GAAGD,aAAa,CAACd,GAAd,CAAkB,YAAlB,CAAvB;AACA,YAAIgB,cAAc,GAAG1S,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,IAAoB,EAArB,EAAyB,kBAAzB,EAA6C,kBAA7C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAnB,CAAwGyM,GAAxG,CAA4G,YAA5G,CAArB;AAEA,aAAK3L,QAAL,CAAc;AACV0M,UAAAA,cAAc,EAACA,cADL;AAEVE,UAAAA,kBAAkB,EAACD,cAFT;AAGVE,UAAAA,wBAAwB,EAAE9G,KAAK,CAACoC,kBAHtB;AAIV2E,UAAAA,6BAA6B,EAAE/G,KAAK,CAAC8C,uBAJ3B;AAKV7F,UAAAA,oBAAoB,EAAE,KALZ;AAMV7D,UAAAA,cAAc,EAAE;AACZ;AACA;AACA;AACA;AACA4N,YAAAA,8BAA8B,EAAE;AAC5BlJ,cAAAA,KAAK,EAAEkC,KAAK,CAACtC,0BADe;AAE5BhD,cAAAA,KAAK,EAAEsF,KAAK,CAACpE,0BAFe;AAG5BQ,cAAAA,IAAI,EAAE4D;AAHsB,aALpB;AAUZiH,YAAAA,6BAA6B,EAAE;AAC3BnJ,cAAAA,KAAK,EAAEkC,KAAK,CAACpC,cADc;AAE3BlD,cAAAA,KAAK,EAAEsF,KAAK,CAAC5E,yBAFc;AAG3BgB,cAAAA,IAAI,EAAE4D;AAHqB,aAVnB;AAeZpE,YAAAA,0BAA0B,EAAEkK,oBAAoB,CAACxI,MAArB,GAA8B,CAA9B,GAAkC;AAC1DQ,cAAAA,KAAK,EAAEgI,oBAAoB,CAAC,CAAD,CAApB,CAAwBhI,KAD2B;AAE1DpD,cAAAA,KAAK,EAAEoL,oBAAoB,CAAC,CAAD,CAApB,CAAwBpL,KAF2B;AAG1D0B,cAAAA,IAAI,EAAE0J,oBAAoB,CAAC,CAAD,CAApB,CAAwB1J;AAH4B,aAAlC,GAIxB,EAnBQ;AAoBZhB,YAAAA,yBAAyB,EAAEqL,wBAAwB,CAACnJ,MAAzB,GAAkC,CAAlC,GAAsC;AAC7DQ,cAAAA,KAAK,EAAE2I,wBAAwB,CAAC,CAAD,CAAxB,CAA4B3I,KAD0B;AAE7DpD,cAAAA,KAAK,EAAE+L,wBAAwB,CAAC,CAAD,CAAxB,CAA4B/L,KAF0B;AAG7D0B,cAAAA,IAAI,EAAEqK,wBAAwB,CAAC,CAAD,CAAxB,CAA4BrK;AAH2B,aAAtC,GAItB,EAxBO;AA0BZ4J,YAAAA,uBAAuB,EAAEF,oBA1Bb;AA2BZoB,YAAAA,iCAAiC,EAAET;AA3BvB,WANN;AAmCVtL,UAAAA,eAAe,EAAE6E,KAnCP;AAoCV/E,UAAAA,YAAY,EAAE,IApCJ;AAqCVjC,UAAAA,SAAS,EAAE,IArCD;AAsCVc,UAAAA,SAAS,EAAE,KAtCD;AAuCVqG,UAAAA,OAAO,EAAE,KAvCC;AAwCVxD,UAAAA,YAAY,EAAE,KAAK5C,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,KAA+C,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,gBAA1B,EAA4CjJ;AAxC/F,SAAd;AA0CH,OAhEL,EAgEO6E,KAhEP,CAgEaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAzEL;AA0EH,KAlgDkB;;AAAA,SAmgDnBgH,WAngDmB,GAmgDJhO,IAAD,IAAU;AACpB,WAAKc,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAI/G,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,UAAI0L,cAAc,GAAG;AACjBlJ,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsBqD,6BAAtB,CAAoDrE,0BAD/D;AAEjBI,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAFV,OAArB;AAIA,UAAIsE,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,kDAAX,EAA+DiE,cAA/D,CAAb;AAEA,YAAMsC,IAAI,GAAG9P,KAAK,CAACuJ,IAAN,CAAW,oBAAX,EACT;AAAE,oBAAY,KAAKtI,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,OADS,CAAb;AAGA,YAAMoL,IAAI,GAAG/P,KAAK,CAACuJ,IAAN,CAAW,sDAAX,EACT;AAAE,qCAA6B1H,IAAI,CAACiC,yBAApC;AAA+D,oBAAY,KAAK7C,KAAL,CAAWuC,KAAX,CAAiBmB;AAA5F,OADS,CAAb;AAGAsE,MAAAA,QAAQ,GAAG,CAACK,IAAD,EAAOwG,IAAP,EAAaC,IAAb,CAAX;AACA9P,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,cAAMqG,iBAAiB,GAAGpT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,cAAMyO,qBAAqB,GAAGD,iBAAiB,CAAC1B,GAAlB,CAAsB,YAAtB,CAA9B;AACA,YAAI4B,kBAAkB,GAAGvG,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,cAAMsO,gBAAgB,GAAGvT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,cAAM4O,iBAAiB,GAAGD,gBAAgB,CAAC7B,GAAjB,CAAqB,YAArB,CAA1B;AAEA,cAAM+B,kBAAkB,GAAGzT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,cAAM8O,mBAAmB,GAAGD,kBAAkB,CAAC/B,GAAnB,CAAuB,YAAvB,CAA5B;AAGA,cAAMiC,qBAAqB,GAAG3T,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,cAAMgP,sBAAsB,GAAGD,qBAAqB,CAACjC,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,cAAMmC,UAAU,GAAG7T,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,cAAMkP,WAAW,GAAGD,UAAU,CAACnC,GAAX,CAAe,YAAf,CAApB;AAEA,cAAMqC,YAAY,GAAGhH,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB+O,wBAAtC;AAEAX,QAAAA,qBAAqB,CAACY,OAAtB,CAA8B;AAAErK,UAAAA,KAAK,EAAEmK,YAAY,CAACrK,cAAtB;AAAsClD,UAAAA,KAAK,EAAEuN,YAAY,CAACtF;AAA1D,SAA9B;AACAvJ,QAAAA,cAAc,GAAG;AACbqJ,UAAAA,oBAAoB,EAAE;AAAE3E,YAAAA,KAAK,EAAEmK,YAAY,CAACG,UAAtB;AAAkC1N,YAAAA,KAAK,EAAEuN,YAAY,CAACxF;AAAtD,WADT;AAEbE,UAAAA,+BAA+B,EAAE;AAAE7E,YAAAA,KAAK,EAAEmK,YAAY,CAACrK,cAAtB;AAAsClD,YAAAA,KAAK,EAAEuN,YAAY,CAACtF;AAA1D,WAFpB;AAGbH,UAAAA,YAAY,EAAE;AAAE1E,YAAAA,KAAK,EAAEmK,YAAY,CAACI,YAAtB;AAAoC3N,YAAAA,KAAK,EAAEuN,YAAY,CAACzF;AAAxD,WAHD;AAIbJ,UAAAA,kBAAkB,EAAE;AAAEtE,YAAAA,KAAK,EAAEmK,YAAY,CAACK,cAAtB;AAAsC5N,YAAAA,KAAK,EAAEuN,YAAY,CAAC7F;AAA1D,WAJP;AAKbU,UAAAA,uBAAuB,EAAE;AAAEhF,YAAAA,KAAK,EAAEmK,YAAY,CAACM,uBAAtB;AAA+C7N,YAAAA,KAAK,EAAEuN,YAAY,CAACnF;AAAnE,WALZ;AAMbD,UAAAA,aAAa,EAAEoF,YAAY,CAACpF,aAAb,KAA+B,CAA/B,GAAmC,IAAnC,GAA0C,KAN5C;AAOb2F,UAAAA,sBAAsB,EAAEZ,mBAPX;AAQb7E,UAAAA,SAAS,EAAEkF,YAAY,CAAClF,SARX;AASb1B,UAAAA,IAAI,EAAE4G,YAAY,CAAC5G,IATN;AAUbE,UAAAA,OAAO,EAAE0G,YAAY,CAAC1G,OAVT;AAWbnG,UAAAA,yBAAyB,EAAE6M,YAAY,CAAC7M;AAX3B,SAAjB;AAaA,aAAKnB,QAAL,CAAc;AACVe,UAAAA,eAAe,EAAE,KADP;AAEVhC,UAAAA,SAAS,EAAE,IAFD;AAGVI,UAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZqP,YAAAA,wBAAwB,EAAElB,qBAFd;AAGZmB,YAAAA,cAAc,EAAEV,WAHJ;AAIZW,YAAAA,oBAAoB,EAAEjB,iBAJV;AAKZkB,YAAAA,yBAAyB,EAAEd,sBALf;AAMZ5N,YAAAA,eAAe,EAAE;AANL,WAHN;AAWVN,UAAAA,SAAS,EAAE,QAXD;AAYVuG,UAAAA,OAAO,EAAE;AAZC,SAAd;AAcH,OA5DL,EA4DOqB,KA5DP,CA4DaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH5N,UAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,aAAKc,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OArEL;AAsEH,KA1lDkB;;AAAA,SA6lDnB0I,eA7lDmB,GA6lDAxO,KAAD,IAAW;AAEzB,YAAMjB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;;AACA,UAAIiB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIF,KAAK,CAACC,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AAC/BpB,UAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH;AACJ,OAJD,MAKK,IAAIJ,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AAEzCnB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AAEH,OAJI,MAKA;AACDtB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKT,QAAL,CAAc;AAAEb,QAAAA;AAAF,OAAd;AAGH,KAjnDkB;;AAAA,SA8nDnB0P,sBA9nDmB,GA8nDOzO,KAAD,IAAW;AAChC,WAAKJ,QAAL,CAAc;AAAE8O,QAAAA,SAAS,EAAE1O,KAAK,CAACsE,IAAnB;AAAyBqK,QAAAA,SAAS,EAAE3O,KAAK,CAACuE;AAA1C,OAAd;AACH,KAhoDkB;;AAAA,SAioDnBqK,QAjoDmB,GAioDR,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AAClC,UAAI/P,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB8P,aAAzB;AACA9P,MAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B+P,MAA3B;AACA,UAAIC,IAAI,GAAGpU,OAAO,CAACqU,OAAR,CAAgBH,aAAhB,CAAX;AACAE,MAAAA,IAAI,GAAGpU,OAAO,CAACsU,WAAR,CAAoBJ,aAApB,EAAmCC,MAAnC,EAA2C,IAA3C,CAAP;AACA/P,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCpE,OAAO,CAACuU,SAAR,CAAkBL,aAAlB,EAAiCC,MAAjC,CAAhC;AACA,WAAKlP,QAAL,CAAc;AAAEmP,QAAAA,IAAI,EAAEF,aAAR;AAAuBC,QAAAA,MAAM,EAAEA,MAA/B;AAAuC/P,QAAAA,cAAc,EAAE,EAAE,GAAGA;AAAL;AAAvD,OAAd;AAEH,KA1oDkB;;AAAA,SAorDnBoQ,qBAprDmB,GAorDMnP,KAAD,IAAW;AAC/B,YAAMoP,eAAe,GAAGpP,KAAK,CAACC,MAA9B;AACA,YAAMG,OAAO,GAAGJ,KAAK,CAACqP,cAAN,CAAqBpP,MAArB,CAA4BG,OAA5C;AACA,UAAI0B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACxB,eAAOA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AAC1B,cAAIA,IAAI,CAACG,QAAL,KAAkBzD,SAAtB,EAAiC;AAC7BsD,YAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACH;;AACDH,UAAAA,IAAI,CAACG,QAAL,GAAgB9B,OAAhB;AACA,iBAAO2B,IAAP;AACH,SANM,CAAP;AAOH,OARD;AASA,WAAKnC,QAAL,CAAc;AAAEkC,QAAAA;AAAF,OAAd;AACH,KAlsDkB;;AAAA,SAmsDnBwN,eAnsDmB,GAmsDAtP,KAAD,IAAW;AACzB,UAAI8B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoB6J,CAAC,IAAI;AACrB,eAAOA,CAAC,CAACjJ,KAAF,CAAQZ,GAAR,CAAYW,IAAI,IAAI;AACvB,cAAIA,IAAI,CAAC,2BAAD,CAAJ,KAAsC/B,KAAK,CAACuP,QAAN,CAAe,2BAAf,CAA1C,EAAuF;AACnFxN,YAAAA,IAAI,CAACG,QAAL,GAAgB,CAAClC,KAAK,CAACuP,QAAN,CAAerN,QAAhC;AACH;;AACD,iBAAOH,IAAP;AACH,SALM,CAAP;AAMH,OAPD;AAQA,WAAKnC,QAAL,CAAc;AAAEkC,QAAAA;AAAF,OAAd;AACH,KA9sDkB;;AAAA,SA2tDnBsE,iBA3tDmB,GA2tDC,CAACtH,IAAD,EAAOwL,SAAP,KAAqB;AACrC,YAAMkF,UAAU,GAAG,CACf;AACIC,QAAAA,KAAK,EAAE,iBADX;AAEIC,QAAAA,SAAS,EAAE;AAFf,OADe,CAAnB;AAMA,YAAMC,MAAM,GAAGrF,SAAS,CAACsF,KAAzB;;AACA,UAAID,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACvO,GAAP,CAAYwO,KAAD,IAAYA,KAAK,CAACJ,UAAN,GAAmBA,UAA1C;AACH;;AACDlF,MAAAA,SAAS,CAACsF,KAAV,GAAkBD,MAAlB;AACA,YAAME,YAAY,GAAGvS,OAAO,CAACwB,IAAD,EAAOwL,SAAP,CAA5B,CAZqC,CAarC;AACA;AACA;AACA;;AACA,aAAOuF,YAAP;AACH,KA7uDkB;;AAAA,SAgmEnBC,aAhmEmB,GAgmEH,MAAM;AAClB,YAAMtN,UAAU,GAAG;AACfG,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKzE,KAAL,CAAWuC,KAAX,CAAiBmB,QADZ;AAERmO,YAAAA,OAAO,EAAE,KAAKrQ,KAAL,CAAWX,cAAX,CAA0B,eAA1B,CAFD;AAGRiR,YAAAA,WAAW,EAAE,KAAKtQ,KAAL,CAAWX,cAAX,CAA0B,aAA1B,KAA4C,KAAKW,KAAL,CAAWX,cAAX,CAA0B,aAA1B,EAAyCsB,KAH1F;AAIR4P,YAAAA,iBAAiB,EAAE,KAAKvQ,KAAL,CAAWX,cAAX,CAA0B,aAA1B,KAA4C,KAAKW,KAAL,CAAWX,cAAX,CAA0B,aAA1B,EAAyC0E;AAJhG,WADL;AAQPyM,UAAAA,QAAQ,EAAE,KAAKxQ,KAAL,CAAWX,cAAX,CAA0B,eAA1B;AARH,SADI;AAWf8E,QAAAA,UAAU,EAAE,KAAK3F,KAAL,CAAWuC,KAAX,CAAiBoD;AAXd,OAAnB,CADkB,CAclB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAK3F,KAAL,CAAWvC,8BAAX,CAA0C6G,UAA1C,EAAsD,WAAtD,EAAkE,MAAM,KAAK4H,WAAL,EAAxE;AACH,KA1nEkB;;AAEf,SAAK1K,KAAL,GAAa;AACTyQ,MAAAA,mBAAmB,EAAE,CACjB;AAAE,mBAAW,sBAAb;AAAqC,qBAAa,4BAAlD;AAAgF,iBAAS;AAAzF,OADiB,EAEjB;AAAE,mBAAW,uBAAb;AAAsC,qBAAa,gBAAnD;AAAqE,iBAAS;AAA9E,OAFiB,EAGjB;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,iBAAhD;AAAmE,iBAAS,OAA5E;AAAqF,sBAAc;AAAnG,OAHiB,EAIjB;AAAE,mBAAW,aAAb;AAA4B,qBAAa,cAAzC;AAAyD,iBAAS;AAAlE,OAJiB,EAKjB;AAAE,mBAAW,iBAAb;AAAgC,qBAAa,kBAA7C;AAAiE,iBAAS;AAA1E,OALiB,EAMjB;AAAE,mBAAW,4BAAb;AAA2C,qBAAa,qBAAxD;AAA+E,iBAAS;AAAxF,OANiB,EAOjB;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,gBAA/C;AAAiE,iBAAS;AAA1E,OAPiB,EAQjB;AAAE,mBAAW,4BAAb;AAA2C,qBAAa,yBAAxD;AAAmF,iBAAS;AAA5F,OARiB,CADZ;AAYThP,MAAAA,SAAS,EAAE,EAZF;AAaTwG,MAAAA,oBAAoB,EAAE,EAbb;AAcT1I,MAAAA,QAAQ,EAAE,CAAC;AAAEmR,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,QAAQ,EAAE,CAAC;AAAED,UAAAA,KAAK,EAAE;AAAT,SAAD;AAA9B,OAAD,CAdD;AAeTE,MAAAA,YAAY,EAAE,KAfL;AAgBTC,MAAAA,YAAY,EAAE9R,SAhBL;AAiBT+R,MAAAA,gBAAgB,EAAE,KAjBT;AAkBTvR,MAAAA,QAAQ,EAAE,CACN;AACI;AACAC,QAAAA,IAAI,EAAE,KAAKhB,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFV;AAGIH,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,QAAQ,EAAE,IAJd;AAKIC,QAAAA,IAAI,EAAE,IALV;AAMIC,QAAAA,EAAE,EAAErD,IAAI;AANZ,OADM,CAlBD;AA2BTwU,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,KADF;AAEJC,QAAAA,UAAU,EAAE;AAFR,OAAD,CA3BE;AA+BT5R,MAAAA,cAAc,EAAE,EA/BP;AAgCTqD,MAAAA,qBAAqB,EAAE,EAhCd;AAiCT0J,MAAAA,UAAU,EAAE,IAAI8E,GAAJ,EAjCH;AAkCTtM,MAAAA,IAAI,EAAE,CAlCG;AAmCTuM,MAAAA,UAAU,EAAE,CAnCH;AAoCTC,MAAAA,UAAU,EAAE,EApCH;AAqCTvM,MAAAA,IAAI,EAAE,KAAKrG,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,GACF,KAAK7S,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,CAA0B,CAA1B,CADE,GAC6B,EAtC1B;AAuCT5M,MAAAA,0BAA0B,EAAE,EAvCnB;AAwCT6M,MAAAA,YAAY,EAAEvS,SAxCL;AAyCTqH,MAAAA,OAAO,EAAE,KAzCA;AA0CTQ,MAAAA,eAAe,EAAE;AACb/B,QAAAA,IAAI,EAAE,EADO;AAEbD,QAAAA,IAAI,EAAE,CAFO;AAGbsL,QAAAA,KAAK,EAAE,CACH;AACIH,UAAAA,KAAK,EAAE;AADX,SADG;AAHM;AA1CR,KAAb;AAoDA,QAAIwB,MAAM,GAAG,EAAb;;AACA,QAAI,KAAKvR,KAAL,CAAWyQ,mBAAf,EAAoC;AAChC,WAAKzQ,KAAL,CAAWyQ,mBAAX,CAA+B/O,GAA/B,CAAmCqO,KAAK,IAAI;AACxC,YAAIA,KAAK,CAACyB,SAAN,KAAoB,4BAApB,IAAoDzB,KAAK,CAACyB,SAAN,KAAoB,cAAxE,IACGzB,KAAK,CAACyB,SAAN,KAAoB,kBADvB,IAC6CzB,KAAK,CAACyB,SAAN,KAAoB,gBADjE,IAEGzB,KAAK,CAACyB,SAAN,KAAoB,yBAF3B,EAEsD;AAClDD,UAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,aAACxB,KAAK,CAACyB,SAAP,GAAmB;AACf,uBACI,KAAKhT,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAC1BxK,gBAAAA,EAAE,EAAEmQ,KAAK,CAAC0B;AADgB,eAA9B,CAFW;AAMf,sBAAQ1B,KAAK,CAACyB,SAAN,KAAoB,iBAApB,GAAwC,QAAxC,GAAmD,MAN5C;AAOf,8BAAgB,CAAC,OAAD,EAAU,MAAV,CAPD;AASf,iCAAmB;AACf,8BAAc,MADC;AAEf,oCAAoB,KAAKhT,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAC9CxK,kBAAAA,EAAE,EAAEmQ,KAAK,CAAC0B;AADoC,iBAA9B;AAFL;AATJ;AAFd,WAAT;AAmBH;AACJ,OAxBD;AAyBH;;AACD,SAAKzR,KAAL,GAAa,EAAE,GAAI,KAAKA,KAAX;AAAkB,gBAAUuR;AAA5B,KAAb;AACA,SAAK9L,SAAL,GAAiB9N,KAAK,CAAC+Z,SAAN,EAAjB;AACA,SAAKC,QAAL,GAAgBha,KAAK,CAAC+Z,SAAN,EAAhB;AACA,SAAK7G,cAAL,GAAsB,IAAIhO,cAAJ,EAAtB;AACH;;AAC8B,SAAxB+U,wBAAwB,CAACpT,KAAD,EAAQwB,KAAR,EAAe;AAE1C,QAAIxB,KAAK,CAACuC,KAAN,CAAY8Q,YAAZ,KAA6B,EAA7B,IAAmCrT,KAAK,CAACuC,KAAN,CAAY8Q,YAAZ,KAA6B7R,KAAK,CAAC6R,YAA1E,EAAwF;AACpF7X,MAAAA,KAAK,CAAC6N,IAAN,CAAWrJ,KAAK,CAACuC,KAAN,CAAY8Q,YAAvB;AACArT,MAAAA,KAAK,CAACuC,KAAN,CAAY8Q,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIrT,KAAK,CAACuC,KAAN,CAAY2G,KAAZ,KAAsB,EAAtB,IAA4BlJ,KAAK,CAACuC,KAAN,CAAY2G,KAAZ,KAAsB1H,KAAK,CAAC0H,KAA5D,EAAmE;AAC/D1N,MAAAA,KAAK,CAAC0N,KAAN,CAAYlJ,KAAK,CAACuC,KAAN,CAAY2G,KAAxB;AACAlJ,MAAAA,KAAK,CAACuC,KAAN,CAAY2G,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AACDoK,EAAAA,kBAAkB,CAACC,aAAD,EAAgBC,aAAhB,EAA+B;AAC7C,QAAI;AAAE7G,MAAAA,UAAF;AAAc8G,MAAAA,sBAAd;AACA5S,MAAAA,cADA;AACgB+M,MAAAA,UADhB;AAEA1J,MAAAA,qBAFA;AAEuBwP,MAAAA,sBAFvB;AAGAC,MAAAA,2BAHA;AAG6BtP,MAAAA,UAH7B;AAGyCT,MAAAA,UAHzC;AAGqD6F,MAAAA,oBAHrD;AAG2EsJ,MAAAA,MAH3E;AAGmF7N,MAAAA,mBAHnF;AAGwGzE,MAAAA,SAHxG;AAGmHc,MAAAA;AAHnH,QAGiI,KAAKC,KAH1I;AAIA,QAAIoS,IAAI,GAAG,KAAX,CAL6C,CAM7C;;AACA,QAAI,KAAK5T,KAAL,CAAWuC,KAAX,CAAiB9B,SAAjB,KAA+B8S,aAAa,CAAChR,KAAd,CAAoB9B,SAAvD,EAAkE;AAC9DmT,MAAAA,IAAI,GAAG,IAAP;AACAnT,MAAAA,SAAS,GAAG,KAAKT,KAAL,CAAWuC,KAAX,CAAiB9B,SAA7B;AACH;;AACD,QAAI,KAAKT,KAAL,CAAWuC,KAAX,CAAiBhB,SAAjB,KAA+BgS,aAAa,CAAChR,KAAd,CAAoBhB,SAAvD,EAAkE;AAC9DqS,MAAAA,IAAI,GAAG,IAAP;AACArS,MAAAA,SAAS,GAAG,KAAKvB,KAAL,CAAWuC,KAAX,CAAiBhB,SAA7B;AACH;;AACD,QAAI,KAAKvB,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwP,qBAA5B,KAAsDN,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+BwP,qBAAzF,EAAgH;AAC5G,UAAIC,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAK5T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwP,qBAA5B,IAAqD,KAAK7T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwP,qBAA5B,CAAkD3Q,GAAlD,CAChDW,IAAD,IAAUiQ,mBAAmB,CAAC7P,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACR,0BAAhB;AAA4C,iBAASQ,IAAI,CAACsB;AAA1D,OAAzB,CADuC,CAArD;AAGA4N,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,sCAA8B;AAC1B,mBAAS,KAAK/S,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AACnCxK,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADiB;AAI1B,kBAAQ,QAJkB;AAK1B,0BAAgB,CAAC,OAAD,CALU;AAM1B,2BAAiB;AACb,0BAAc0S;AADD;AANS;AAFzB,OAAT;AAcH;;AACD,QAAI,KAAK9T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B0P,UAA5B,KAA2CR,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+B0P,UAA9E,EAA0F;AACtF,UAAID,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAK5T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B0P,UAA5B,IAA0C,KAAK/T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B0P,UAA5B,CAAuC7Q,GAAvC,CACrCW,IAAD,IAAUiQ,mBAAmB,CAAC7P,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACoG,YAAhB;AAA8B,iBAASpG,IAAI,CAACiM;AAA5C,OAAzB,CAD4B,CAA1C;AAGAiD,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,wBAAgB;AACZ,mBAAS,KAAK/S,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AACnCxK,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADG;AAIZ,kBAAQ,QAJI;AAKZ,0BAAgB,CAAC,OAAD,CALJ;AAMZ,2BAAiB;AACb,0BAAc0S;AADD;AANL;AAFX,OAAT;AAcH;;AACD,QAAI,KAAK9T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2P,WAA5B,KAA4CT,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+B2P,WAA/E,EAA4F;AACxF,UAAIF,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACAvP,MAAAA,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAA9B;AACA,WAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2P,WAA5B,IAA2C,KAAKhU,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2P,WAA5B,CAAwC9Q,GAAxC,CACtCW,IAAD,IAAUiQ,mBAAmB,CAAC7P,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACmB,gBAAhB;AAAkC,iBAASnB,IAAI,CAACoQ;AAAhD,OAAzB,CAD6B,CAA3C,CAJwF,CAOxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA/O,MAAAA,mBAAmB,GAAG;AAClBK,QAAAA,KAAK,EAAE,KAAKvF,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4Ba,mBAA5B,IACH,KAAKlF,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4Ba,mBAA5B,CAAgD+O,gBAFlC;AAEoD9R,QAAAA,KAAK,EACvE,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4Ba,mBAA5B,IACA,KAAKlF,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4Ba,mBAA5B,CAAgDF;AAJlC,OAAtB;AAMA,YAAMkP,yBAAyB,GAAGvY,mBAAmB,CAAC,KAAKqE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2P,WAA5B,IAA2C,EAA5C,EAAgD,kBAAhD,EACjD,kBADiD,EAC7BzT,SAD6B,EAClBA,SADkB,EACPA,SADO,CAArD;AAEA8D,MAAAA,UAAU,CAAC,oBAAD,CAAV,GAAmC6P,yBAAyB,CAAC7G,GAA1B,CAA8B,YAA9B,CAAnC;AACH;;AACD,QAAI,KAAKrN,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B8P,aAA5B,KAA8CZ,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+B8P,aAAjF,EAAgG;AAC5F,UAAIL,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAK5T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B8P,aAA5B,IAA6C,KAAKnU,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B8P,aAA5B,CAA0CjR,GAA1C,CACxCW,IAAD,IAAUiQ,mBAAmB,CAAC7P,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACgG,kBAAhB;AAAoC,iBAAShG,IAAI,CAACkM;AAAlD,OAAzB,CAD+B,CAA7C;AAGAgD,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,8BAAsB;AAClB,mBAAS,KAAK/S,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AACnCxK,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADS;AAIlB,kBAAQ,QAJU;AAKlB,0BAAgB,CAAC,OAAD,CALE;AAMlB,2BAAiB;AACb,0BAAc0S;AADD;AANC;AAFjB,OAAT;AAcH;;AAAC,QAAI,KAAK9T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B4K,kBAA5B,KAAmDsE,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+B4K,kBAAtF,EAA0G;AACxG,UAAI6E,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAK5T,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B4K,kBAA5B,IAAkD,KAAKjP,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B4K,kBAA5B,CAA+C/L,GAA/C,CAC7CW,IAAD,IAAUiQ,mBAAmB,CAAC7P,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAAC0G,uBAAhB;AAAyC,iBAAS1G,IAAI,CAACmM;AAAvD,OAAzB,CADoC,CAAlD;AAGA+C,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,mCAA2B;AACvB,mBAAS,KAAK/S,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AACnCxK,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADc;AAIvB,kBAAQ,QAJe;AAKvB,0BAAgB,CAAC,OAAD,CALO;AAMvB,2BAAiB;AACb,0BAAc0S;AADD;AANM;AAFtB,OAAT;AAcH,KA/H4C,CAgI7C;;;AACA,QAAI,KAAK9T,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAA1B,KAAwCoP,aAAa,CAAChR,KAAd,CAAoBmB,QAApB,CAA6BS,SAAzE,EAAoF;AAChFyP,MAAAA,IAAI,GAAG,IAAP;AACA1P,MAAAA,qBAAqB,GAAG,EAAxB;;AACA,UAAI,KAAKlE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAArB,EAA4C;AACxC,aAAKlE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAjB,CAAuC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAjE,KAA+EpB,MAAM,CAACqR,MAAP,CAAc,KAAKpU,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAjB,CAAuC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAjE,CAAd,EAA2FjB,GAA3F,CAA+FW,IAAI,IAC9KK,qBAAqB,CAACD,IAAtB,CAA2BJ,IAAI,CAACO,YAAhC,CAD2E,CAA/E;AAEH;;AACDwJ,MAAAA,UAAU,GAAGhS,aAAa,CAAC,KAAKoE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,CAA1B;AAEH;;AAED,QAAI,KAAKnE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BgQ,qBAA5B,KAAsDd,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+BgQ,qBAAzF,EAAgH;AAC5GT,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMM,yBAAyB,GAAGvY,mBAAmB,CAAC,KAAKqE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BgQ,qBAA5B,IAAqD,EAAtD,EAA0D,sBAA1D,EACjD,sBADiD,EACzB9T,SADyB,EACdA,SADc,EACHA,SADG,CAArD;AAEAkT,MAAAA,sBAAsB,GAAGS,yBAAyB,CAAC7G,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKrN,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiQ,uBAAhC,EAAyD;AACrD7K,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBE,UAAAA,oBAAoB,EAAE8J,sBAAsB,CAACjG,MAAvB,CAA8B3J,IAAI,IACpDA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiQ,uBAA5B,CAAoD3K,oBADjD,EACuE,CADvE;AAFH,SAAvB;AAKH;AAEJ;;AACD,QAAI,KAAK3J,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwP,qBAA5B,KAAsDN,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+BwP,qBAAzF,EAAgH;AAC5GD,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMW,yBAAyB,GAAG5Y,mBAAmB,CAAC,KAAKqE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwP,qBAA5B,IAAqD,EAAtD,EAA0D,4BAA1D,EACjD,4BADiD,EACnBtT,SADmB,EACRA,SADQ,EACGA,SADH,CAArD;AAEAmT,MAAAA,sBAAsB,GAAGa,yBAAyB,CAAClH,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKrN,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqD,6BAAhC,EAA+D;AAC3D+B,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBpG,UAAAA,0BAA0B,EAAEqQ,sBAAsB,CAAClG,MAAvB,CAA8B3J,IAAI,IAC1DA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqD,6BAA5B,CAA0DrE,0BADjD,EAC6E,CAD7E;AAFT,SAAvB;AAKH;AAGJ;;AAED,QAAI,KAAKrD,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B+C,oBAA5B,KAAqDmM,aAAa,CAAChR,KAAd,CAAoB8B,UAApB,CAA+B+C,oBAAxF,EAA8G;AAC1GwM,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMY,wBAAwB,GAAG7Y,mBAAmB,CAAC,KAAKqE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B+C,oBAA5B,IAAoD,EAArD,EAAyD,2BAAzD,EAChD,YADgD,EAClC7G,SADkC,EACvBA,SADuB,EACZA,SADY,CAApD;AAEAoT,MAAAA,2BAA2B,GAAGa,wBAAwB,CAACnH,GAAzB,CAA6B,YAA7B,CAA9B;;AACA,UAAI,KAAKrN,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwC,4BAAhC,EAA8D;AAC1D4C,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBgL,UAAAA,yBAAyB,EAAEd,2BAA2B,CAACnG,MAA5B,CAAmC3J,IAAI,IAC9DA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwC,4BAA5B,CAAyD4N,yBADjD,EAC4E,CAD5E;AAFR,SAAvB;AAKH;AACJ;;AAED,QAAI,KAAKzU,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,KAAgCkP,aAAa,CAAChR,KAAd,CAAoB8B,UAAxD,EAAoE;AAChEuP,MAAAA,IAAI,GAAG,IAAP;AACAvP,MAAAA,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAA9B;AACAsI,MAAAA,UAAU,GAAG,KAAKC,qBAAL,CAA2B,KAAK5M,KAAL,CAAWuC,KAAX,CAAiB8B,UAA5C,CAAb;AAEH;;AACD,QAAI,KAAK7C,KAAL,CAAW6C,UAAX,KAA0BmP,aAAa,CAACnP,UAA5C,EAAwD;AACpDuP,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI,KAAKpS,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA1B,EAAoD;AAChD,YAAI,KAAK3G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,KAAmDqL,aAAa,CAACnP,UAAd,CAAyB8D,wBAAhF,EAA0G;AACtG9D,UAAAA,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAAxB;AACAqQ,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmD/Q,UAAnD;AACAA,UAAAA,UAAU,GAAGS,UAAU,CAAC8D,wBAAX,GACT,KAAKD,iBAAL,CAAuB7D,UAAU,CAAC8D,wBAAX,IAAuC,EAA9D,EACI,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,YAAAA,IAAI,EAAE,EADgD;AAEtDD,YAAAA,IAAI,EAAE;AAFgD,WAD9D,CADS,GAKA,EALb;AAMAsO,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B/Q,UAA3B;AACH;AACJ;;AAED+I,MAAAA,UAAU,GAAG,KAAKC,qBAAL,CAA2B,KAAKpL,KAAL,CAAW6C,UAAtC,CAAb;AAEH;;AACD,QAAIuP,IAAJ,EAAU;AACN,WAAKlS,QAAL,CAAc;AACV+R,QAAAA,sBADU;AACc9G,QAAAA,UADd;AAEV9L,QAAAA,cAFU;AAEM+M,QAAAA,UAFN;AAGV1J,QAAAA,qBAHU;AAGawP,QAAAA,sBAHb;AAIVC,QAAAA,2BAJU;AAImBtP,QAAAA,UAJnB;AAI+BoF,QAAAA,oBAJ/B;AAIqDsJ,QAAAA,MAJrD;AAI6D7N,QAAAA,mBAJ7D;AAIkFzE,QAAAA,SAJlF;AAI6Fc,QAAAA,SAJ7F;AAIwGqC,QAAAA;AAJxG,OAAd;AAMH;AAEJ;;AAsLDgR,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAKrT,QAAL,CAAc;AACVsT,QAAAA,SAAS,EAAEF,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC,MAAM,GAAG;AAFb,OAAd;AAIH;AACJ;;AACDlI,EAAAA,qBAAqB,CAACqI,GAAD,EAAM;AACvB,UAAMC,cAAc,GAAG,EAAvB;;AACA,QAAI,KAAK1T,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBgQ,qBAAnD,EAA0E;AAEtEa,MAAAA,cAAc,CAACjR,IAAf,CACI;AACI,iBAAS,qBADb;AAEI,iBAASgR,GAAG,CAACxI,2BAAJ,IACLwI,GAAG,CAACxI,2BAAJ,KAAoC,IAD/B,GAELwI,GAAG,CAACxI,2BAFC,GAE6B;AAJ1C,OADJ,CAQI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBJ;AAsBH;;AACD,WAAOyI,cAAP;AACH;;AAyaDxL,EAAAA,wBAAwB,CAACjF,SAAD,EAAY+E,SAAZ,EAAuBD,SAAvB,EAAkC;AACtD,QAAIE,oBAAoB,GAAG,KAAKjI,KAAL,CAAWiI,oBAAX,IAAmC,EAA9D;AACA,QAAI8C,cAAc,GAAG,EAArB;AACA,SAAK7K,QAAL,CAAc;AAAEkG,MAAAA,OAAO,EAAE;AAAX,KAAd;;AACA,QAAI4B,SAAS,KAAK,4BAAlB,EAAgD;AAC5C+C,MAAAA,cAAc,GAAG;AACb5C,QAAAA,oBAAoB,EAAEF,oBAAoB,CAAC,sBAAD,CAApB,CAA6CtH,KADtD;AAEbkB,QAAAA,0BAA0B,EAAEkG,SAAS,CAACpH,KAFzB;AAGbsB,QAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAHP,OAAjB;AAKH,KAND,MAMO;AACH8I,MAAAA,cAAc,GAAG;AACb5C,QAAAA,oBAAoB,EAAEJ,SAAS,CAACpH,KADnB;AAEbsB,QAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAFP,OAAjB;AAIH;;AACD,QAAIuE,QAAQ,GAAG,EAAf;AACA,UAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,kDAAX,EAA+DiE,cAA/D,CAAb;AAEAvE,IAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,IAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAEgL,QAAAA,sBAAF;AACAC,QAAAA;AADA,UACgC,KAAKnS,KADzC;AAGA,UAAI+S,yBAAyB,GAAG5Y,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBiT,qBAAjB,IAA0C,EAA3C,EAA+C,4BAA/C,EAC/C,4BAD+C,EACjBtT,SADiB,EACNA,SADM,EACKA,SADL,CAAnD;AAEAmT,MAAAA,sBAAsB,GAAGa,yBAAyB,CAAClH,GAA1B,CAA8B,YAA9B,CAAzB;AACA,UAAImH,wBAAwB,GAAG7Y,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBwG,oBAAjB,IAAyC,EAA1C,EAA8C,2BAA9C,EAC9C,YAD8C,EAChC7G,SADgC,EACrBA,SADqB,EACVA,SADU,CAAlD;AAEAoT,MAAAA,2BAA2B,GAAGa,wBAAwB,CAACnH,GAAzB,CAA6B,YAA7B,CAA9B;AACA5D,MAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBpG,QAAAA,0BAA0B,EAAEqQ,sBAAsB,CAAC3O,MAAvB,GAAgC,CAAhC,GACxB2O,sBAAsB,CAAC,CAAD,CADE,GACI,EAHb;AAInBe,QAAAA,yBAAyB,EAAEd,2BAA2B,CAAC5O,MAA5B,GAAqC,CAArC,GACvB4O,2BAA2B,CAAC,CAAD,CADJ,GACU;AALlB,OAAvB;AAQA,WAAKjS,QAAL,CAAc;AACVgS,QAAAA,sBADU;AACcC,QAAAA,2BADd;AAEVlK,QAAAA,oBAAoB,EAAE,EAClB,GAAGA,oBADe;AAElB,WAACD,SAAD,GAAaD;AAFK,SAFZ;AAMV3B,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOqB,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,QAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH5N,QAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,WAAKc,QAAL,CAAc;AACVkG,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA0CDL,EAAAA,uBAAuB,GAAG;AACtB,SAAK7F,QAAL,CAAc;AAAEkG,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAI/G,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,QAAI0L,cAAc,GAAG;AACjB;AACAlJ,MAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsBqD,6BAAtB,CAAoDrE,0BAF/D;AAGjB;AACAI,MAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJV,KAArB;AAOA,QAAIsE,QAAQ,GAAG,EAAf;AACA,UAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,kDAAX,EAA+DiE,cAA/D,CAAb;AAEA,UAAMsC,IAAI,GAAG9P,KAAK,CAACuJ,IAAN,CAAW,oBAAX,EACT;AAAE,kBAAY,KAAKtI,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,KADS,CAAb;AAGA,UAAMoL,IAAI,GAAG/P,KAAK,CAACuJ,IAAN,CAAW,gCAAX,EACT;AAAE,kBAAY,KAAKtI,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,KADS,CAAb;AAGAsE,IAAAA,QAAQ,GAAG,CAACK,IAAD,EAAOwG,IAAP,CAAX;AACA7P,IAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,YAAMqG,iBAAiB,GAAGpT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,YAAMyO,qBAAqB,GAAGD,iBAAiB,CAAC1B,GAAlB,CAAsB,YAAtB,CAA9B;AACA,UAAI4B,kBAAkB,GAAGvG,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,YAAMsO,gBAAgB,GAAGvT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,YAAM4O,iBAAiB,GAAGD,gBAAgB,CAAC7B,GAAjB,CAAqB,YAArB,CAA1B;AAGA,YAAM+B,kBAAkB,GAAGzT,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,YAAM8O,mBAAmB,GAAGD,kBAAkB,CAAC/B,GAAnB,CAAuB,YAAvB,CAA5B;AAEA,YAAMiC,qBAAqB,GAAG3T,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,YAAMgP,sBAAsB,GAAGD,qBAAqB,CAACjC,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,YAAMmC,UAAU,GAAG7T,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,YAAMkP,WAAW,GAAGD,UAAU,CAACnC,GAAX,CAAe,YAAf,CAApB;AAEA,WAAK3L,QAAL,CAAc;AACVjB,QAAAA,SAAS,EAAE,IADD;AAEVI,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZqP,UAAAA,wBAAwB,EAAElB,qBAFd;AAGZmB,UAAAA,cAAc,EAAEV,WAHJ;AAIZW,UAAAA,oBAAoB,EAAEjB,iBAJV;AAKZc,UAAAA,sBAAsB,EAAEZ,mBALZ;AAMZ;AACA;AACA;AACAvG,UAAAA,IAAI,EAAEmG,kBAAkB,CAAClK,MAAnB,GAA4B,CAA5B,GAAgCkK,kBAAkB,CAAC,CAAD,CAAlB,CAAsBnG,IAAtD,GAA6D,CATvD;AAUZE,UAAAA,OAAO,EAAEiG,kBAAkB,CAAClK,MAAnB,GAA4B,CAA5B,GAAgCkK,kBAAkB,CAAC,CAAD,CAAlB,CAAsBjG,OAAtD,GAAgE,CAV7D;AAWZrH,UAAAA,eAAe,EAAE;AAXL,SAFN;AAgBVc,QAAAA,eAAe,EAAE,KAhBP;AAiBVpB,QAAAA,SAAS,EAAE,QAjBD;AAkBVuG,QAAAA,OAAO,EAAE;AAlBC,OAAd;AAoBH,KAlDL,EAkDOqB,KAlDP,CAkDaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,QAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH5N,QAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,WAAKc,QAAL,CAAc;AACVkG,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KA3DL;AA4DH;;AAGDgC,EAAAA,qBAAqB,CAACnF,SAAD,EAAY+E,SAAZ,EAAuBD,SAAvB,EAAkC;AACnD,QAAIgD,cAAc,GAAG,EAArB;AACA,SAAK7K,QAAL,CAAc;AAAEkG,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA2E,IAAAA,cAAc,GAAG;AACb1C,MAAAA,kBAAkB,EAAEN,SAAS,CAACpH,KADjB;AAEbsB,MAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAFP,KAAjB;AAIA,QAAIuE,QAAQ,GAAG,EAAf;AACA,UAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,gDAAX,EAA6DiE,cAA7D,CAAb;AAEAvE,IAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,IAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAE2H,QAAAA,yBAAF;AAA6BxP,QAAAA;AAA7B,UAAgD,KAAKW,KAAzD;AAEA,UAAI2T,sBAAsB,GAAGxZ,mBAAmB,CAAC+M,QAAQ,CAAC,CAAD,CAAR,CAAY9H,IAAZ,CAAiBqO,kBAAjB,IAAuC,EAAxC,EAA4C,yBAA5C,EAC5C,yBAD4C,EACjB1O,SADiB,EACNA,SADM,EACKA,SADL,CAAhD;AAEA8P,MAAAA,yBAAyB,GAAG8E,sBAAsB,CAAC9H,GAAvB,CAA2B,YAA3B,CAA5B;AACAxM,MAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbiI,QAAAA,IAAI,EAAEuH,yBAAyB,CAACtL,MAA1B,GAAmC,CAAnC,GACFsL,yBAAyB,CAAC,CAAD,CAAzB,CAA6BxM,IAA7B,CAAkCiF,IADhC,GACuC,CAHhC;AAIbE,QAAAA,OAAO,EAAEqH,yBAAyB,CAACtL,MAA1B,GAAmC,CAAnC,GACLsL,yBAAyB,CAAC,CAAD,CAAzB,CAA6BxM,IAA7B,CAAkCmF,OAD7B,GACuC,CALnC;AAMbuB,QAAAA,uBAAuB,EAAE8F,yBAAyB,CAACtL,MAA1B,GAAmC,CAAnC,GACrBsL,yBAAyB,CAAC,CAAD,CADJ,GACU,EAPtB;AAQbA,QAAAA,yBAAyB,EAAEA,yBAAyB,CAACtL,MAA1B,GAAmC,CAAnC,GACvB,CAAC,GAAGsL,yBAAJ,CADuB,GACU;AATxB,OAAjB;AAYA,WAAK3O,QAAL,CAAc;AAEVb,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ,WAAC2I,SAAD,GAAaD;AAFD,SAFN;AAMV3B,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOqB,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,QAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH5N,QAAAA,KAAK,CAAC6N,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe9H,IAA1B;AACH;;AACD,WAAKc,QAAL,CAAc;AACVkG,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA2HDwN,EAAAA,2BAA2B,CAACrN,KAAD,EAAQ;AAC/B,QAAIlH,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAAlD;;AACA,QAAIkH,KAAK,KAAK,CAAV,GAAc,IAAd,GAAsBlH,cAAc,CAAC+E,WAAf,IAA8B/E,cAAc,CAAC+E,WAAf,KAA+B,EAAvF,EAA4F;AACxF,WAAKlE,QAAL,CAAc;AAAEkG,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIqN,GAAG,GAAG;AAAC;AACP1P,QAAAA,KAAK,EAAE,0BADD;AAC6B8P,QAAAA,WAAW,EAAE,2BAD1C;AAENzP,QAAAA,WAAW,EAAEmC,KAAK,KAAK,CAAV,GACT,KAAKvG,KAAL,CAAWqE,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAKpE,KAAL,CAAW0D,mBAAX,CAA+B/C,KADlG,GAGTtB,cAAc,CAAC+E,WAAf,GAA6B,wBAA7B,GAAwD,KAAKpE,KAAL,CAAW0D,mBAAX,CAA+B/C,KALrF;AAMJmT,QAAAA,MAAM,EAAE,4BANJ;AAMkC7R,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAN7D,OAAV;AAQA,UAAIsE,QAAQ,GAAG,EAAf;AACA,YAAMK,IAAI,GAAGtJ,KAAK,CAACuJ,IAAN,CAAW,gDAAX,EAA6D2M,GAA7D,CAAb;AACAjN,MAAAA,QAAQ,GAAG,CAACK,IAAD,CAAX;AACArJ,MAAAA,KAAK,CAACwJ,GAAN,CAAUR,QAAV,EACKS,IADL,CACUC,QAAQ,IAAI;AACd,YAAIrE,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA5B;AACAA,QAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,aAAGqE,QAAQ,CAAC,CAAD,CAAR,CAAY9H;AAAhC,SAAb;AACA,aAAKc,QAAL,CAAc;AACV2C,UAAAA,UAAU,EAAE,EAAE,GAAGA;AAAL,WADF;AAEVuD,UAAAA,OAAO,EAAE,KAFC;AAGVnH,UAAAA,SAAS,EAAE,KAHD;AAIVmB,UAAAA,aAAa,EAAE,KAJL;AAKViE,UAAAA,uBAAuB,EAAEkC,KAAK,KAAK,CAAV,GACrB,EAAE,GAAG,KAAKvG,KAAL,CAAWqE;AAAhB,WADqB,GAGrB,EAAE,GAAGhF;AAAL,WARM;AAUVA,UAAAA,cAAc,EAAE,EAVN;AAWV0U,UAAAA,YAAY,EAAE,KAAK/T,KAAL,CAAWqP,IAAX,GAAkBpU,OAAO,CAACsU,WAAR,CAAoB,KAAKvP,KAAL,CAAWqP,IAA/B,EAAqC,KAAKrP,KAAL,CAAWoP,MAAhD,EAAwD,IAAxD,CAAlB,GAAkF;AAXtF,SAAd;AAaH,OAjBL,EAkBK3H,KAlBL,CAkBWC,KAAK,IAAI;AACZ,aAAKxH,QAAL,CAAc;AACVkG,UAAAA,OAAO,EAAE;AADC,SAAd;;AAGA,YAAIsB,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/B3N,UAAAA,KAAK,CAAC0N,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACD5N,UAAAA,KAAK,CAACga,IAAN,CAAWtM,KAAK,CAACR,QAAN,CAAe9H,IAAf,CAAoB6U,GAA/B;AACH;AAEJ,OA7BL;AA8BH,KA3CD,MA2CO;AACHja,MAAAA,KAAK,CAAC6N,IAAN,CAAW,KAAKrJ,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAX;AAEH;AACJ;;AA+RDsU,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAI,KAAKpU,KAAL,CAAWf,SAAX,IAAwBmV,SAAS,CAACjU,eAAV,KAA8B,KAAtD,IACCiU,SAAS,CAAC/U,cAAV,KAA6B,KAAKW,KAAL,CAAWX,cAD7C,EAC8D;AAC1D,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,KAAKW,KAAL,CAAWf,SAAX,IAAwBmV,SAAS,CAACjU,eAAV,KAA8B,KAAtD,IACNiU,SAAS,CAAC3S,SAAV,KAAwB,KAAKzB,KAAL,CAAWyB,SADjC,EAC6C;AAChD,aAAO,KAAP;AACH,KAHM,MAGA;AACH,aAAO,IAAP;AACH;AACJ;;AAiHD4S,EAAAA,MAAM,GAAG;AAGL,UAAMvO,KAAK,GAAG,KAAK9F,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,8BAA1B,EAA0DjJ,YAArI;AACA,UAAM0C,MAAM,GAAG,KAAKtF,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,4BAA1B,EAAwDjJ,YAAlI;AACA,UAAM0R,QAAQ,GAAG,KAAKtU,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,8BAA1B,EAA0DjJ,YAAxI;AACA,UAAM2R,MAAM,GAAG,KAAKvU,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,4BAA1B,EAAwDjJ,YAAlI;AACA,UAAM4R,SAAS,GAAG,KAAKxU,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,+BAA1B,KAA8D,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,+BAA1B,EAA2DjJ,YAA3I;AACA,UAAM6R,YAAY,GAAG,KAAKzU,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,KAA+C,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,gBAA1B,EAA4CjJ,YAAhH;AACA,UAAM8R,oBAAoB,GAAI,KAAK1U,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,yBAA1B,KAAwD,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,yBAA1B,EAAqDjJ,YAA3I;AAEA,UAAM+R,mBAAmB,GAAG,KAAK3U,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,mBAA1B,KAAkD,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,mBAA1B,EAA+CjJ,YAA7H;AACA,UAAMgS,WAAW,GAAG,KAAK5U,KAAL,CAAWoM,UAAX,CAAsBC,GAAtB,CAA0B,WAA1B,KAA0C,KAAKrM,KAAL,CAAWoM,UAAX,CAAsBP,GAAtB,CAA0B,WAA1B,EAAuCjJ,YAArG;AAEA,UAAM4G,WAAW,GAAG;AAChBG,MAAAA,aAAa,EAAE,uBADC;AACwBU,MAAAA,cAAc,EAAE,+BADxC;AACyET,MAAAA,eAAe,EAAE,4BAD1F;AAEhBG,MAAAA,QAAQ,EAAE,4DAFM;AAGhBC,MAAAA,gBAAgB,EAAE;AAAE/H,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAA7B,OAHF;AAIhBW,MAAAA,UAAU,EAAE,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAJb;AAKhBiH,MAAAA,eAAe,EAAE,CAAC,4BAAD;AALD,KAApB;AAQA,UAAM4J,cAAc,GAAG,KAAK1T,KAAL,CAAWmL,UAAX,IAAyB,EAAhD;AAEA,UAAMN,cAAc,GAAG,IAAIhO,cAAJ,EAAvB;AACA,wBACI,uDACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKmD,KAAL,CAAWoG,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIQ,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,kBADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAG9F,KAAD,IAAW,KAAKwH,aAAL,CAAmBxH,KAAnB,EAA0B,kBAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK9B,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf;AAKI,MAAA,WAAW,EAAE,KALjB;AAMI,MAAA,KAAK,EAAE,KAAKI,KAAL,CAAW0D,mBAAX,GAAiC,KAAK1D,KAAL,CAAW0D,mBAAX,IAAkC,EAAnE,GAAwE,EANnF;AAOI,MAAA,OAAO,EAAE,KAAK1D,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBgS,kBAA/C,IAAqE,EAPlF;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,KAXhB;AAYI,MAAA,YAAY,EAAE,KAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,eAmBU,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,kBAAD;AACI,MAAA,qBAAqB,EAAE,KAAK7U,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA/C,IACnB,KAAKD,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACI,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIOxF,IAJP,CAIYmE,MAJZ,GAIqB,CALF,GAMnB,IANmB,GAMZ,KAPf;AAQI,MAAA,uBAAuB,EAAE,KAAKvD,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA/C,IACrB,KAAKD,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACI,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIOxF,IAJP,CAIYmE,MAJZ,GAIqB,CALA,GAMrB,IANqB,GAMd,KAdf;AAeI,MAAA,iBAAiB,EAAE,KAAKvD,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA/C,IACf,KAAKD,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACI,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIOxF,IAJP,CAIYmE,MAJZ,GAIqB,CALN,GAMf,IANe,GAMR,KArBf;AAsBI,MAAA,UAAU,EAAGoB,CAAD,IAAO,KAAKiP,2BAAL,CAAiC,CAAjC,CAtBvB;AAuBI,MAAA,cAAc,EAAE,IAvBpB;AAwBI,MAAA,gBAAgB,EACZ,KAAK5T,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBAA/C,IACI,KAAKD,iBAAL,CAAuB,KAAK1G,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAzE,EACI,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AACtD/B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIOxF,IAJP,CAIYmE,MAJZ,GAIqB,CALzB,GAMI,CAAC;AACGQ,QAAAA,KAAK,EAAE,qBADV;AAEGnE,QAAAA,EAAE,EAAE,EAFP;AAGGkV,QAAAA,MAAM,EAAE,KAHX,CAGgB;AAHhB;AAKGC,QAAAA,OAAO,EAAE,MAAM,KAAKzO,SAAL,CAAe,EAAf,EAAmB,CAAnB,CALlB;AAMG0O,QAAAA,WAAW,EAAE;AANhB,OAAD,EAQA;AACIjR,QAAAA,KAAK,EAAE,2BADX;AAEInE,QAAAA,EAAE,EAAE,EAFR;AAGIkV,QAAAA,MAAM,EAAE,KAAK9U,KAAL,CAAW0C,qBAAX,CAAiC8H,OAAjC,CAAyCkK,oBAAzC,MAAmE,CAAC,CAHhF;AAIIK,QAAAA,OAAO,EAAE,MAAM,KAAKtJ,qBAAL,EAJnB;AAKIuJ,QAAAA,WAAW,EAAE;AALjB,OARA,EAeA;AACIjR,QAAAA,KAAK,EAAE,YADX;AAEInE,QAAAA,EAAE,EAAE,EAFR;AAGImV,QAAAA,OAAO,EAAE,MAAM,KAAK1O,UAAL,EAHnB;AAII2O,QAAAA,WAAW,EAAE;AAJjB,OAfA,CANJ,GA0BS,CAAC;AACFjR,QAAAA,KAAK,EAAE,YADL;AAEFnE,QAAAA,EAAE,EAAE,EAFF;AAGFmV,QAAAA,OAAO,EAAE,MAAM,KAAK1O,UAAL,EAHb;AAIF2O,QAAAA,WAAW,EAAE;AAJX,OAAD,CAnDjB;AAyDI,MAAA,UAAU,EAAE,KAAKC,UAzDrB;AA0DI,MAAA,KAAK,EAAE,KAAKjV,KAAL,CAAWkQ,KAAX,IAAoB,EA1D/B;AA2DI,MAAA,eAAe,EAAE,2BA3DrB,CA4DI;AACA;AACA;AACA;AA/DJ;AAgEI,MAAA,eAAe,EAAE,KAAKN,eAhE1B;AAiEI,MAAA,qBAAqB,EAAE,KAAKH,qBAjEhC;AAkEI,MAAA,IAAI,EAAE,KAAKzP,KAAL,CAAW6C,UAAX,IACF,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBAnE9B;AAoEI,MAAA,UAAU,EACN;AACA;AACA;AACA;AACA;AACA,WAAK3G,KAAL,CAAWoC,UAAX,GAAwB,KAAKpC,KAAL,CAAWoC,UAAnC,GAAgD,EA1ExD;AA4EI,MAAA,SAAS,EAAE,KAAKpC,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AAAEhC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OA5EzE;AA6EI,MAAA,eAAe,EAAE,KAAK+B,eA7E1B;AA8EI,MAAA,mBAAmB,EAAE,KAAK5G,KAAL,CAAWyQ,mBA9EpC;AA+EI,MAAA,UAAU,EAAE,KAAKzQ,KAAL,CAAWoM,UA/E3B;AAgFI,MAAA,qBAAqB,EAAE,KAAKpM,KAAL,CAAW0C,qBAhFtC;AAiFI,MAAA,QAAQ,EAAE,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAjF/B;AAkFI,MAAA,YAAY,EAAE,KAAKgT,YAlFvB;AAmFI,MAAA,QAAQ,EAAE,IAnFd;AAoFI,MAAA,UAAU,EAAE,YApFhB;AAqFI,MAAA,UAAU,EAAE,OArFhB;AAsFI,MAAA,gBAAgB,EAAE,IAtFtB;AAuFI,MAAA,iBAAiB,EAAE,IAvFvB;AAwFI,MAAA,WAAW,EACP,CACI;AACIxE,QAAAA,KAAK,EAAE,KAAKlS,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEIoV,QAAAA,WAAW,EAAE,SAFjB;AAGIF,QAAAA,MAAM,EAAG,KAAK9U,KAAL,CAAW0C,qBAAX,CAAiC8H,OAAjC,CAAyCiK,YAAzC,MAA2D,CAAC,CAHzE;AAIIU,QAAAA,UAAU,EAAE,MAJhB;AAKIJ,QAAAA,OAAO,EAAE,KAAKzI;AALlB,OADJ,EAQI;AACIoE,QAAAA,KAAK,EAAE,KAAKlS,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEIoV,QAAAA,WAAW,EAAE,OAFjB;AAGIF,QAAAA,MAAM,EAAE,KAHZ,CAGiB;AAHjB;AAKIK,QAAAA,UAAU,EAAE,KALhB;AAMIJ,QAAAA,OAAO,EAAG9O,KAAD,IAAW,KAAKK,SAAL,CAAeL,KAAf,EAAsB,CAAtB;AANxB,OARJ,CAzFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADE,CAnBV,CAJR,CAFJ,EA2OQ,KAAKjG,KAAL,CAAWf,SAAX,iBACA,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKe,KAAL,CAAWf,SAAhC;AACI,MAAA,UAAU,EAAE,KAAKa,UADrB;AAEI,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWkB,YAAX,GAA0B,KAA1B,GAAkC,IAFhD;AAGI,MAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWkB,YAAX,GAA0B,IAA1B,GAAiC,KAAKlB,KAAL,CAAWI,aAAX,GAA2B,KAA3B,GAAmC,IAHnF;AAII,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWkB,YAAX,GAA0B,KAA1B,GAAkC,KAAKlB,KAAL,CAAWiB,eAAX,GAA6B,KAA7B,GAAqC,IAJvF;AAKI,MAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWkB,YAAX,GAA0B,EAA1B,GAAgC,KAAKlB,KAAL,CAAWiB,eAAX,IAA8B,KAAKjB,KAAL,CAAWI,aAA1C,GAA2D,IAA3D,GAAkE,EAL3G;AAMI,MAAA,SAAS,EAAE,EANf;AAOI,MAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWuC,KAAX,CAAiB+B,UAPjC;AAQI,MAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWkB,YAAX,GAA0B,KAAK1C,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA1B,GAAuF,KAAKI,KAAL,CAAWI,aAAX,GAA2B,EAA3B,GAC/F,KAAKJ,KAAL,CAAWsB,gBAAX,GAA8B,KAAK9C,KAAL,CAAW2L,IAAX,CAAgBC,aAAhB,CAA8B;AAAExK,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA9B,GACM,KAAKI,KAAL,CAAWoB,eAAX,CAA2ByC,cAVzC;AAWI,MAAA,WAAW,EAAE,KAAK7D,KAAL,CAAWI,aAAX,GAA2B,KAAKwT,2BAAL,CAAiCwB,IAAjC,CAAsC,IAAtC,CAA3B,GAAyE,KAAK/J,wBAX/F;AAYI,MAAA,KAAK,EAAE,KAAKrL,KAAL,CAAWD,SAZtB,CAaI;AAbJ;AAeI,MAAA,aAAa,EAAE,KAAKqQ,aAfxB;AAgBI,MAAA,YAAY,EAAE,KAAK5R,KAAL,CAAWuC,KAAX,CAAiB8Q,YAhBnC;AAiBI,MAAA,WAAW,EAAE,KAAKrT,KAAL,CAAWlD,WAjB5B;AAkBI,MAAA,cAAc,EAAE,KAAK0E,KAAL,CAAWX,cAAX,IAA6B,EAlBjD;AAmBI,MAAA,YAAY,EAAE,KAAKW,KAAL,CAAWD,SAAX,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWuC,KAAX,CAAiBlB,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKrB,KAAL,CAAW2L,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAK0E,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAKtQ,KAAL,CAAWuC,KAAX,CAAiB+B,UAHjC;AAII,QAAA,cAAc,EAAE,KAAK9C,KAAL,CAAWX,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAQV,KAAKW,KAAL,CAAWkB,YAAX,gBACI,oBAAC,UAAD;AACI,QAAA,kBAAkB,EAAE,KAAKlB,KAAL,CAAW8M,kBADnC;AAEI,QAAA,cAAc,EAAE,KAAK9M,KAAL,CAAW4M,cAF/B;AAGI,QAAA,mBAAmB,EAAE,KAAK5M,KAAL,CAAWoJ,mBAHpC;AAII,QAAA,eAAe,EAAE,KAAKpJ,KAAL,CAAWmM,eAJhC;AAKI,QAAA,kBAAkB,EAAE,KAAKnM,KAAL,CAAW0L,kBALnC;AAMI,QAAA,oBAAoB,EAAE,KAAK1L,KAAL,CAAWkD,oBANrC;AAOI,QAAA,wBAAwB,EAAE,KAAKlD,KAAL,CAAW+M,wBAPzC;AAQI,QAAA,6BAA6B,EAAE,KAAK/M,KAAL,CAAWgN,6BAR9C;AASI,QAAA,SAAS,EAAE,KAAKhN,KAAL,CAAWH,SAT1B;AAUI,QAAA,oBAAoB,EAAE,KAAKG,KAAL,CAAWiI,oBAVrC;AAWI,QAAA,aAAa,EAAGtD,CAAD,IAAO,KAAKtE,aAAL,CAAmBsE,CAAnB,CAX1B;AAYI,QAAA,aAAa,EAAE,KAAKmD,aAZxB;AAaI,QAAA,cAAc,EAAE,KAAK9H,KAAL,CAAWX,cAAX,IAA6B,EAbjD;AAcI,QAAA,eAAe,EAAE,KAAK6J,eAd1B;AAeI,QAAA,QAAQ,EAAE,KAAK1K,KAAL,CAAWuC,KAAX,CAAiBmB,QAf/B;AAgBI,QAAA,SAAS,EAAE,KAAKlC,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AAAEhC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAhBzE;AAiBI,QAAA,UAAU,EAAE,KAAK7E,KAAL,CAAWoM,UAjB3B;AAkBI,QAAA,qBAAqB,EAAE,KAAKpM,KAAL,CAAW0C,qBAlBtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAsBI,KAAK1C,KAAL,CAAWI,aAAX,gBACI,oBAAC,kBAAD;AACI,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWuR,MADvB;AAEI,QAAA,eAAe,EAAE,IAFrB;AAGI,QAAA,UAAU,EAAE,KAAKvR,KAAL,CAAWqV,UAH3B;AAII,QAAA,IAAI,EAAE,KAAKrV,KAAL,CAAWgP,SAJrB;AAKI,QAAA,IAAI,EAAE,KAAKhP,KAAL,CAAWiP,SALrB;AAMI,QAAA,QAAQ,EAAE,KAAKC,QANnB;AAOI,QAAA,IAAI,EAAE,KAAK1Q,KAAL,CAAWuC,KAAX,CAAiBsO,IAAjB,KAA0BtQ,SAA1B,GAAsC,KAAKP,KAAL,CAAWuC,KAAX,CAAiBsO,IAAvD,GAA8D,KAAKrP,KAAL,CAAWX,cAAX,CAA0BgQ,IAPlG;AAQI,QAAA,WAAW,EAAE,KAAKiG,SARtB;AASI,QAAA,UAAU,EAAE,KAAK9W,KAAL,CAAWuC,KAAX,CAAiBwU,WAAjB,IAAgC,EAThD;AAUI,QAAA,gBAAgB,EAAE,KAAKxG,sBAV3B;AAWI,QAAA,MAAM,EAAE,IAXZ;AAYI,QAAA,QAAQ,EAAE,KAAKvQ,KAAL,CAAWuC,KAAX,CAAiBmB,QAZ/B;AAaI,QAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWlD,WAb5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAiBI,KAAK0E,KAAL,CAAWiB,eAAX,gBAA6B,uDACzB,uDACI,oBAAC,eAAD;AACI,QAAA,YAAY,EAAE,IADlB;AAEI,QAAA,WAAW,EAAE,KAAKzC,KAAL,CAAWlD,WAF5B;AAGI,QAAA,IAAI,EAAE,KAAKkD,KAAL,CAAW2L,IAHrB;AAII,QAAA,IAAI,EAAE,KAAKnK,KAAL,CAAWqH,IAAX,IAAmB,CAJ7B;AAKI,QAAA,6BAA6B,EAAE,KAAKrH,KAAL,CAAWoH,6BAL9C;AAMI,QAAA,QAAQ,EAAE,KAAK5I,KAAL,CAAWuC,KAAX,CAAiBmB,QAN/B;AAOI,QAAA,OAAO,EAAE,KAAKlC,KAAL,CAAWuH,OAAX,IAAsB,CAPnC;AAQI,QAAA,cAAc,EAAE,KAAKvH,KAAL,CAAWX,cAAX,CAA0BoC,SAA1B,IAAuC,EAR3D;AASI,QAAA,SAAS,EAAE,KAAKzB,KAAL,CAAWyB,SAAX,IAAwB,EATvC;AAUI,QAAA,gBAAgB,EAAE,KAAKzB,KAAL,CAAWsB,gBAVjC;AAWI,QAAA,oBAAoB,EAAE,KAAK+H,oBAX/B;AAYI,QAAA,eAAe,EAAE,KAAKrJ,KAAL,CAAWoB,eAZhC;AAaI,QAAA,mBAAmB,EAAE,KAAK5C,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,IAA6B7I,QAAQ,CAAC,KAAKhK,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,CAA0B,EAA1B,CAAD,CAb9D;AAcI,QAAA,cAAc,EAAE,KAAK7S,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,IAA6B7I,QAAQ,CAAC,KAAKhK,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,CAA0B,EAA1B,CAAD,CAdzD;AAeI,QAAA,gBAAgB,EAAE,KAAK7S,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,IAA6B,KAAK7S,KAAL,CAAWuC,KAAX,CAAiBsQ,QAAjB,CAA0B,EAA1B,CAfnD;AAgBI,QAAA,iBAAiB,EAAE,KAAKrR,KAAL,CAAW6C,UAAX,IACf,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB8D,wBADP,IAEf/I,OAAO,CAAC,KAAKoC,KAAL,CAAW6C,UAAX,CAAsB8D,wBAAtB,IAAkD,EAAnD,EACH,KAAK3G,KAAL,CAAW4G,eAAX,GAA6B,KAAK5G,KAAL,CAAW4G,eAAxC,GAA0D;AAAEhC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SADvD,CAAP,CACqFzF,IAnB7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADyB,CAA7B,gBAyBI,yCAxEJ,CAyER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5OR,CADJ;AAuVH;;AAxmEqC;;AAuoE1C,MAAMoW,eAAe,GAAIxV,KAAD,IAAW;AAC/B,SAAO;AACHe,IAAAA,KAAK,EAAEf,KAAK,CAACe;AADV,GAAP;AAGH,CAJD;;AAOA,eAAelJ,OAAO,CAAC2d,eAAD,EAAkB;AACpCra,EAAAA,WADoC;AACvBG,EAAAA,WADuB;AACVD,EAAAA,uBADU;AACeY,EAAAA,8BADf;AAC8CC,EAAAA;AAD9C,CAAlB,CAAP,CAEZpE,UAAU,CAACwG,iBAAD,CAFE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { Lims_JSON_stringify, constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    BasicConfig, BasicFuncs,\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation,validateEsignCredentialStorage,crudMasterstorage\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import AddTreeview from './AddTreeview';\r\n// import AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n//import StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport rsapi from '../../rsapi';\r\n//import AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\n//import StorageMappingFilter from './StorageMappingFilter';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n\r\nimport { groupBy, process } from '@progress/kendo-data-query';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport MoveSample from '../storagemanagement/MoveSample';\r\nimport DataGridForStorage from './DataGridForStorage';\r\nimport { initRequest } from '../../actions/LoginAction';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\nclass SampleStorageMove extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            extractedColumnList: [\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n                { \"idsName\": \"IDS_AVAILABLESPACE\", \"dataField\": \"navailablespace\", \"width\": \"200px\", \"filterType\": \"numeric\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"scontainertype\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\", \"dataField\": \"scontainerstructurename\", \"width\": \"200px\" },\r\n\r\n            ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                group: [\r\n                    {\r\n                        field: \"ssamplestoragelocationname\",\r\n                    },\r\n                ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        if (this.state.extractedColumnList) {\r\n            this.state.extractedColumnList.map(field => {\r\n                if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n                    && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype'\r\n                    && field.dataField !== 'scontainerstructurename') {\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\":\r\n                                this.props.intl.formatMessage({\r\n                                    id: field.idsName,\r\n                                })\r\n                            ,\r\n                            \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, dataResult, selectedRecordFilter, fields, selectedProjectType, openModal, loadEsign } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.openModal !== previousProps.Login.openModal) {\r\n            bool = true;\r\n            openModal = this.props.Login.openModal;\r\n        }\r\n        if (this.props.Login.loadEsign !== previousProps.Login.loadEsign) {\r\n            bool = true;\r\n            loadEsign = this.props.Login.loadEsign;\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nproductcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_PRODUCT\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n            )\r\n            // fields = {\r\n            //     ...fields,\r\n            //     'nprojecttypecode': {\r\n            //         \"label\": this.props.intl.formatMessage({\r\n            //             id: \"IDS_PROJECTTYPE\",\r\n            //         }),\r\n            //         \"type\": \"select\",\r\n            //         \"valueSources\": [\"value\"],\r\n            //         \"fieldSettings\": {\r\n            //             \"listValues\": queryBuilderFreezer\r\n            //         }\r\n            //     }\r\n            // }\r\n            selectedProjectType = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename, value:\r\n                    this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\r\n        }\r\n        if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainertypecode, \"title\": item.scontainertype })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainertypecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERTYPE\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        } if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainerstructurecode, \"title\": item.scontainerstructurename })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainerstructurecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERSTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            if (this.state.masterData.sampleStoragetransaction) {\r\n                if (this.state.masterData.sampleStoragetransaction !== previousState.masterData.sampleStoragetransaction) {\r\n                    masterData = this.state.masterData;\r\n                    console.log('masterData.sampleStoragetransaction', dataResult)\r\n                    dataResult = masterData.sampleStoragetransaction ?\r\n                        this.processWithGroups(masterData.sampleStoragetransaction || [],\r\n                            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                take: 10,\r\n                                skip: 0\r\n                            }) : []\r\n                    console.log('dataResultn', dataResult)\r\n                }\r\n            }\r\n\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, openModal, loadEsign, dataResult\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.state.loadEsign;\r\n        let openModal = this.state.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (loadEsign) {\r\n          //  loadEsign = false;\r\n            openModal = true;\r\n            loadEsign = false;\r\n            selectedRecord['esignpassword'] = \"\"\r\n            selectedRecord['esigncomments'] = \"\"\r\n            selectedRecord['esignreason'] = \"\"\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        this.setState({\r\n            selectedRecord,\r\n           // ismoveSample: false,\r\n            openModal, isInitialRender: true\r\n            , isFilterPopup: false,\r\n            loadEsign: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n \r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet && !this.state.ismoveSample) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else if (this.state.ismoveSample) {\r\n            let destinationPathlst = [];\r\n            let dataResult = this.state.dataResult;\r\n            dataResult.data.map(item => {\r\n                  item.items.map(item => {\r\n                    if (item.hasOwnProperty('selected') && item.selected) {\r\n                        destinationPathlst.push(item);\r\n                    } \r\n                });\r\n            });\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.state.ncontrolcode)) {\r\n                const masterData = this.state.masterData;\r\n                let inputParam = {\r\n                    methodUrl: \"SampleStorageTransaction\",\r\n                    operation: \"update\",\r\n                    classUrl: \"samplestoragemove\",\r\n\r\n                    inputData: this.state.isMultiContainermove? {\r\n                        selectedContainers: JSON.stringify(destinationPathlst),\r\n                        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n                        destinationPathCount: destinationPathlst.length,\r\n                        isMultiContainermove: true,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value, \r\n                        ...this.state.masterData,\r\n                        userinfo: this.props.Login.userInfo\r\n                    } : {\r\n                        nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterprojecttypecode:this.state.selectedProjectType.value,\r\n\r\n                        ssamplestoragelocationname:this.state.editedsheetData.ssamplestoragelocationname,\r\n                        ssamplestoragepathname:this.state.editedsheetData.scontainerpath,\r\n                        stosamplestoragelocationname:this.state.selectedRecord.nsamplestoragelocationcode.label,\r\n                        stosamplestoragepathname:this.state.selectedRecord.nsamplestoragemappingcode.label,\r\n                        sboxid:this.state.editedsheetData.sboxid,\r\n                        stoboxid:this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\r\n                        ...this.state.masterData,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, openModal: true,  screenData: { inputParam, masterData }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                if (this.state.isMultiContainermove) { \r\n                    this.CRUDSampleStorageTransaction({\r\n                        selectedContainers: JSON.stringify(destinationPathlst),\r\n                        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n                        destinationPathCount: destinationPathlst.length,\r\n                        isMultiContainermove: true,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        // nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        // nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }, 'update');\r\n                } else {\r\n                    this.CRUDSampleStorageTransaction({\r\n                        nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterprojecttypecode:this.state.selectedProjectType.value,\r\n                        ssamplestoragelocationname:this.state.editedsheetData.ssamplestoragelocationname,\r\n                        ssamplestoragepathname:this.state.editedsheetData.scontainerpath,\r\n                        stosamplestoragelocationname:this.state.selectedRecord.nsamplestoragelocationcode.label,\r\n                        stosamplestoragepathname:this.state.selectedRecord.nsamplestoragemappingcode.label,\r\n                        sboxid:this.state.editedsheetData.sboxid,\r\n                        stoboxid:this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\r\n                        filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }, 'update');\r\n                }\r\n            }\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    // opensearch=()={\r\n\r\n    // }\r\n\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, openSpreadSheet: false,ismoveSample:false, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                take: 10,\r\n                skip: 0\r\n            }).data;\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false,\r\n                        loadEsign: false,ismoveSample:false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false, loadEsign: false,ismoveSample:false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let selectedProjectType = this.state.selectedProjectType;\r\n        let masterData = this.state.masterData;\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nprojecttypecode') {\r\n            if (selectedProjectType.value !== comboData.value) {\r\n                masterData = {\r\n                    ...masterData,\r\n                    sampleStoragetransaction: []\r\n                }\r\n            }\r\n            this.setState({ masterData, selectedProjectType: { label: comboData.label, value: comboData.value } })\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord, availableContainersdata) => {\r\n        this.setState({\r\n            availableContainers: availableContainersdata,\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    ConfirmMove = () => { \r\n        let destinationPathlst = [];\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n              item.items.map(item => {\r\n                if (item.hasOwnProperty('selected') && item.selected) {\r\n                    destinationPathlst.push(item);\r\n                } \r\n            });\r\n        });\r\n        const inputData={\r\n            isok:true,\r\n            filterprojecttypecode:this.state.selectedProjectType.value,\r\n            selectedContainers: JSON.stringify(destinationPathlst),\r\n            nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n            destinationPathCount: destinationPathlst.length,\r\n            isMultiContainermove: true,\r\n            nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value, \r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageTransaction\",\r\n            classUrl: 'samplestoragemove',\r\n            inputData: inputData,\r\n            operation: \"update\",\r\n            dataState: this.state.dataStateChange,\r\n          };\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\", \r\n        this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n         this.props.intl.formatMessage({ id: \"IDS_MISMATCHCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n             this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n             this.state.loadEsign?\r\n             ()=>this.props.crudMasterstorage(inputParam, this.state.masterData, \"openModal\" )\r\n             :\r\n             ()=>this.CRUDSampleStorageTransaction({...inputData}, 'update'));\r\n    }\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/\" + operation + \"SampleStorageTransaction\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // if(this.state.isMultiContainermove){\r\n                //     this.ConfirmMove()\r\n                // }else{\r\n                    this.setState({\r\n                        isInitialRender: true,\r\n                        selectedRecord: {},\r\n                        masterData: {\r\n                            ...this.state.masterData, ...response[0].data\r\n                        },\r\n                        openModal: false,\r\n                        loading: false,\r\n                        ismoveSample: false\r\n                    });\r\n                //} \r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else { \r\n                    if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                        this.ConfirmMove()\r\n                    }else{\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                        //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields =\r\n             this.state.isMultiContainermove ? \r\n             [{\r\n                \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\", \"dataField\": \"nsamplestoragelocationcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            } ] :\r\n                [{\r\n                    \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\", \"dataField\": \"nsamplestoragelocationcode\",\r\n                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                },\r\n                {\r\n                    \"idsName\": \"IDS_TOSAMPLESTORAGEPATH\",\r\n                    \"dataField\": \"nsamplestoragemappingcode\", \"mandatoryLabel\":\r\n                        \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                }] \r\n                // :\r\n                // this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n                //     this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n                //     {\r\n                //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_PRODUCT\",\r\n                //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                // ] : [\r\n                //     {\r\n                //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_PRODUCT\",\r\n                //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                //     ,\r\n                //     {\r\n                //         \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                //         \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                //         \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_DIRECTION\",\r\n                //         \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                // ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        let dataResult = this.state.dataResult;\r\n        if (this.state.masterData.sampleStoragetransaction) {\r\n            dataResult = this.state.masterData.sampleStoragetransaction ?\r\n                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                    event.dataState ? event.dataState : {\r\n                        take: 10,\r\n                        skip: 0\r\n                    }) : []\r\n            dataResult.data.map(x => {\r\n                return x.items.map(item => {\r\n                    item.selected = false;\r\n                    return item;\r\n                });\r\n            });\r\n        }\r\n        this.setState({\r\n            dataResult: dataResult,\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'sampleStoragetransaction', valuemember: 'nsamplestoragemappingcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                    :\r\n                    selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                , source: 'view_samplestoragelocation', userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestoragemove/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n    movemultipleContainer = () => {\r\n        let destinationPathlst = [];\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n              item.items.map(item => {\r\n                if (item.hasOwnProperty('selected') && item.selected) {\r\n                    destinationPathlst.push(item);\r\n                } \r\n            });\r\n        }); \r\n        if(destinationPathlst.length>0){\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\",\r\n            {\r\n                isMultiContainermove: true,\r\n                // ncontainertypecode: 1,\r\n                // ncontainerstructurecode: 1,\r\n                isMultiContainermove: true,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let storagemoverecords = {};\r\n                let selectedRecord = this.state.selectedRecord;\r\n                const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\r\n                const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [],\r\n                    \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", \"descending\", undefined, true);\r\n                const storageStructureList = storageStructureMap.get(\"OptionList\");\r\n\r\n                storagemoverecords = this.state.masterData.sampleStoragetransaction.filter(item =>\r\n                    item.hasOwnProperty('selected') && item.selected\r\n                )\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nsamplestoragelocationcode: {\r\n                        label: storageStructureList[0].label,\r\n                        value: storageStructureList[0].value,\r\n                        item: storageStructureList[0]\r\n                    },\r\n                    storageStructureOptions: storageStructureList,\r\n                };\r\n                this.state.masterData.sampleStoragetransaction.map(item =>\r\n                    selectedRecord = {\r\n                        ...selectedRecord,\r\n                        mappingcodeOptions: {\r\n                            ...selectedRecord.mappingcodeOptions,\r\n                            [item.nsamplestoragemappingcode]: samplestoragecontainerpathList\r\n                        }\r\n                    }\r\n                )\r\n                this.setState({\r\n                    availableContainers: response[0].data['availableContainers'],\r\n                    totalContainers: response[0].data['totalContainers'],\r\n                    selectedRecord,\r\n                    isMultiContainermove: true,\r\n                    storagemoverecords: storagemoverecords,\r\n                    ismoveSample: true,\r\n                    openModal: true,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    ncontrolcode: this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode\r\n                })\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTACONTAINERTOMOVE\" }));\r\n\r\n        }\r\n    }\r\n    moveSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\",\r\n            {\r\n                nsamplestoragemappingcode: param.nsamplestoragemappingcode,\r\n                ncontainertypecode: param.ncontainertypecode,\r\n                ncontainerstructurecode: param.ncontainerstructurecode,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n       const getProjectType = rsapi.post(\"projecttype/getProjectType\", {\r\n        \"userinfo\": this.props.Login.userInfo\r\n       }) ;\r\n        const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n        urlArray = [url1,getProduct,getProjectType];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [],\r\n                    \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", \"descending\", undefined, true);\r\n                const storageStructureList = storageStructureMap.get(\"OptionList\");\r\n\r\n                // const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                //     \"nsamplestoragecontainerpathcode\",\r\n                //     \"scontainerpath\", undefined, undefined, true);\r\n                // const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\r\n               // ALPD-3757\r\n                const sampleStorageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragemappingcode\",\"scontainerpath\",undefined,undefined, true\r\n                    );\r\n                const sampleStorageMappingList = sampleStorageMappingMap.get(\"OptionList\");\r\n\r\n                const sampleTypeMap = constructOptionList(response[1].data  || [], \"nproductcode\",\"sproductname\", undefined, undefined, true);\r\n\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                let ProjectTypelst = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    sampleTypeList:sampleTypeList,\r\n                    ProjectTypeOptions:ProjectTypelst,\r\n                    sourcencontainertypecode: param.ncontainertypecode,\r\n                    sourcencontainerstructurecode: param.ncontainerstructurecode,\r\n                    isMultiContainermove: false,\r\n                    selectedRecord: {\r\n                        // nprojecttypecode:{\r\n                        //     label: this.state.selectedProjectType.label,\r\n                        //     value:  this.state.selectedProjectType.value \r\n                        // },\r\n                        nfromsamplestoragelocationcode: {\r\n                            label: param.ssamplestoragelocationname,\r\n                            value: param.nsamplestoragelocationcode,\r\n                            item: param\r\n                        },\r\n                        nfromsamplestoragemappingcode: {\r\n                            label: param.scontainerpath,\r\n                            value: param.nsamplestoragemappingcode,\r\n                            item: param\r\n                        },\r\n                        nsamplestoragelocationcode: storageStructureList.length > 0 ? {\r\n                            label: storageStructureList[0].label,\r\n                            value: storageStructureList[0].value,\r\n                            item: storageStructureList[0].item\r\n                        } : \"\",\r\n                        nsamplestoragemappingcode: sampleStorageMappingList.length > 0 ? {\r\n                            label: sampleStorageMappingList[0].label,\r\n                            value: sampleStorageMappingList[0].value,\r\n                            item: sampleStorageMappingList[0].item\r\n                        }  : \"\"\r\n                        ,\r\n                        storageStructureOptions: storageStructureList,\r\n                        samplestoragecontainerpathOptions: sampleStorageMappingList,\r\n                    },\r\n                    editedsheetData: param,\r\n                    ismoveSample: true,\r\n                    openModal: true,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    ncontrolcode: this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode\r\n                })\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        let tree = QbUtils.getTree(immutableTree);\r\n        tree = QbUtils.queryString(immutableTree, config, true);\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: { ...selectedRecord } });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, sampleStoragetransaction: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    // headerSelectionChange = (event) => {\r\n    //     const checkboxElement = event.target;\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let sampleStoragetransaction=this.state.masterData.sampleStoragetransaction;\r\n    //     let masterData=this.state.masterData\r\n    //     sampleStoragetransaction.map(item => { \r\n    //             if (item.selected === undefined) {\r\n    //                 item.selected = false;\r\n    //             }\r\n    //             item.selected = checked;\r\n    //             return item; \r\n    //     });\r\n    //     masterData[sampleStoragetransaction]=sampleStoragetransaction\r\n    //     this.setState({ masterData })\r\n    // }\r\n    headerSelectionChange = (event) => {\r\n        const checkboxElement = event.target;\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n            return item.items.map(item => {\r\n                if (item.selected === undefined) {\r\n                    item.selected = false;\r\n                }\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n        });\r\n        this.setState({ dataResult })\r\n    }\r\n    selectionChange = (event) => {\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(x => {\r\n            return x.items.map(item => {\r\n                if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\r\n                    item.selected = !event.dataItem.selected;\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n        this.setState({ dataResult })\r\n    }\r\n    // selectionChange = (event) => {\r\n    //     let sampleStoragetransaction=this.state.masterData.sampleStoragetransaction;\r\n    //     let masterData=this.state.masterData\r\n    //     sampleStoragetransaction.map(item => {\r\n    //             if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\r\n    //                 item.selected = !event.dataItem.selected;\r\n    //             }\r\n    //             return item; \r\n    //     });\r\n    //     masterData[sampleStoragetransaction]=sampleStoragetransaction\r\n    //     this.setState({ masterData })\r\n    // }\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    render() {\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n        const moveSampleId = this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode;\r\n        const moveMultipleSampleId  = this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode;\r\n\r\n        const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\r\n        const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {\r\n\r\n\r\n                        <Col md={12}>\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nprojecttypecode\"}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isMandatory={false}\r\n                                        value={this.state.selectedProjectType ? this.state.selectedProjectType || [] : []}\r\n                                        options={this.state.masterData && this.state.masterData.projectTypeOptions || []}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row><Row>\r\n                                <Col md={12}>\r\n                                    <DataGridForStorage\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [{\r\n                                                    label: 'IDS_VIEWMULTIPLEBOX',\r\n                                                    id: {},\r\n                                                    hidden: false//this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1\r\n                                                    ,\r\n                                                    onClick: () => this.addSample({}, 2),\r\n                                                    controlname: 'faBoxes'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_MOVEMULTIPLECONTAINER',\r\n                                                    id: {},\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(moveMultipleSampleId) === -1,\r\n                                                    onClick: () => this.movemultipleContainer(),\r\n                                                    controlname: 'faDollyFlatbed'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }] : [{\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []}\r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        // groupable={true}\r\n                                        // groupfooter={true}\r\n                                        // aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        // aggregatedColumn={'navailablespace'}\r\n                                        selectionChange={this.selectionChange}\r\n                                        headerSelectionChange={this.headerSelectionChange}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={\r\n                                            // this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                            //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                            //         take: 10,\r\n                                            //         skip: 0\r\n                                            //     }) : []\r\n                                            this.state.dataResult ? this.state.dataResult : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        gridHeight={'900px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }),\r\n                                                    controlname: \"faDolly\",\r\n                                                    hidden:  this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\r\n                                                    objectName: \"edit\",\r\n                                                    onClick: this.moveSample\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_VIEWBOX\" }),\r\n                                                    controlname: \"faBox\",\r\n                                                    hidden: false// this.state.userRoleControlRights.indexOf(addSampleId) === -1\r\n                                                    ,\r\n                                                    objectName: \"add\",\r\n                                                    onClick: (param) => this.addSample(param, 1)\r\n                                                }]}\r\n                                    />\r\n                                    {/* <DataGrid\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [{\r\n                                                    label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\r\n                                                    id: {},\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\r\n                                                    onClick: () => this.addSample({}, 2),\r\n                                                    controlname: 'faBoxes'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }] : [{\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []} \r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        groupable={true}\r\n                                        groupfooter={true}\r\n                                        aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        aggregatedColumn={'navailablespace'}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={ \r\n                                               this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }) : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord} \r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'} \r\n                                        gridHeight={'600px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [\r\n                                                 {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    hidden: false, //this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\r\n                                                    objectName: \"edit\",\r\n                                                    onClick: this.moveSample\r\n                                                },\r\n                                                {\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLETOABOX\" }),\r\n                                                controlname: \"faBox\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\r\n                                                objectName: \"add\",\r\n                                                onClick: (param) => this.addSample(param, 1)\r\n                                            }]}\r\n                                    /> */}\r\n                                </Col></Row>\r\n                        </Col>\r\n\r\n                    }\r\n\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={this.state.ismoveSample ? false : true}\r\n                        needClose={this.state.ismoveSample ? true : this.state.isFilterPopup ? false : true}\r\n                        showSubmit={this.state.ismoveSample ? false : this.state.openSpreadSheet ? false : true}\r\n                        size={this.state.ismoveSample ? \"\" : (this.state.openSpreadSheet || this.state.isFilterPopup) ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.ismoveSample ? this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }) : this.state.isFilterPopup ? \"\" :\r\n                            this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGE\" })\r\n                                : this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick}\r\n                        esign={this.state.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.state.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.state.ismoveSample ?\r\n                                <MoveSample\r\n                                    ProjectTypeOptions={this.state.ProjectTypeOptions}\r\n                                    sampleTypeList={this.state.sampleTypeList}\r\n                                    availableContainers={this.state.availableContainers}\r\n                                    totalContainers={this.state.totalContainers}\r\n                                    storagemoverecords={this.state.storagemoverecords}\r\n                                    isMultiContainermove={this.state.isMultiContainermove}\r\n                                    sourcencontainertypecode={this.state.sourcencontainertypecode}\r\n                                    sourcencontainerstructurecode={this.state.sourcencontainerstructurecode}\r\n                                    operation={this.state.operation}\r\n                                    selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    onComboChange={this.onComboChange}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    childDataChange={this.childDataChange}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                />\r\n                                :\r\n                                this.state.isFilterPopup ?\r\n                                    <FilterQueryBuilder\r\n                                        fields={this.state.fields}\r\n                                        isSampleStorage={true}\r\n                                        queryArray={this.state.queryArray}\r\n                                        skip={this.state.kendoSkip}\r\n                                        take={this.state.kendoTake}\r\n                                        onChange={this.onChange}\r\n                                        tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                        gridColumns={this.slideList}\r\n                                        filterData={this.props.Login.slideResult || []}\r\n                                        handlePageChange={this.handlePageChangeFilter}\r\n                                        static={true}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        updateStore={this.props.updateStore}\r\n                                    />\r\n                                    :\r\n                                    this.state.openSpreadSheet ? <>\r\n                                        <>\r\n                                            <MatrixComponent\r\n                                                isMoveScreen={true}\r\n                                                updateStore={this.props.updateStore}\r\n                                                intl={this.props.intl}\r\n                                                Rows={this.state.Rows || 1}\r\n                                                AdditionalFieldsComponentData={this.state.AdditionalFieldsComponentData}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                columns={this.state.columns || 1}\r\n                                                selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                sheetData={this.state.sheetData || {}}\r\n                                                isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                childSheetDataChange={this.childSheetDataChange}\r\n                                                editedsheetData={this.state.editedsheetData}\r\n                                                nbarcodedescription={this.props.Login.settings && parseInt(this.props.Login.settings[36])}\r\n                                                nbarcodeLength={this.props.Login.settings && parseInt(this.props.Login.settings[37])}\r\n                                                sbarcodeboxWidth={this.props.Login.settings && this.props.Login.settings[38]}\r\n                                                multipleSheetData={this.state.masterData &&\r\n                                                    this.state.masterData.sampleStoragetransaction &&\r\n                                                    process(this.state.masterData.sampleStoragetransaction || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} /></>\r\n\r\n                                    </>\r\n                                        :\r\n                                        <></>\r\n                            // <AddSampleStorageMapping\r\n                            //     operation={this.state.operation}\r\n                            //     selectedRecordFilter={this.state.selectedRecordFilter}\r\n                            //     onInputChange={(e) => this.onInputChange(e)}\r\n                            //     onComboChange={this.onComboChange}\r\n                            //     selectedRecord={this.state.selectedRecord || {}}\r\n                            //     childDataChange={this.childDataChange}\r\n                            //     userInfo={this.props.Login.userInfo}\r\n                            // />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    } \r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        //this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        // let destinationPathlst = [];\r\n        // let dataResult = this.state.dataResult;\r\n        // dataResult.data.map(item => {\r\n        //       item.items.map(item => {\r\n        //         if (item.hasOwnProperty('selected') && item.selected) {\r\n        //             destinationPathlst.push(item);\r\n        //         } \r\n        //     });\r\n        // });\r\n \r\n        this.props.validateEsignCredentialStorage(inputParam, \"openModal\",() => this.ConfirmMove())\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n \r\n \r\nexport default connect(mapStateToProps, {\r\n    callService, updateStore, validateEsignCredential, validateEsignCredentialStorage,crudMasterstorage,\r\n})(injectIntl(SampleStorageMove));"]},"metadata":{},"sourceType":"module"}