{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\AddTestContainerType.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { Col, Form } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { CONTAINERTYPE, transactionStatus } from '../../components/Enumeration';\n\nconst AddTestContainerType = props => {\n  //   const { nresourecode,disabled } = props.selectedRecord;\n  return /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTAINERTYPE\"\n    }),\n    name: \"ncontainertypecode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    showOption: props.isMulti,\n    options: props.containertype,\n    optionId: \"ncontainertypecode\",\n    optionValue: \"scontainertype\",\n    defaultValue: props.selectedRecord[\"ncontainertypecode\"],\n    onChange: value => props.onComboChange(value, props.isMulti ? \"availableData\" : \"ncontainertypecode\", 1),\n    value: props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"ncontainertypecode\"] || [] : [],\n    isMulti: props.isMulti,\n    isSearchable: true,\n    closeMenuOnSelect: !props.isMulti,\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"nquantity\",\n    label: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 4),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    value: props.selectedRecord && props.selectedRecord[\"nquantity\"] ? props.selectedRecord[\"nquantity\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"noutsourcecode\",\n    type: \"checkbox\",\n    id: \"AddFiles\",\n    label: props.intl.formatMessage({\n      id: \"IDS_OUTSOURCE\"\n    }),\n    inline: true,\n    onChange: event => props.onInputOnChange(event, 1, CONTAINERTYPE),\n    checked: props.selectedRecord ? props.selectedRecord[\"noutsourcecode\"] === CONTAINERTYPE.YES ? true : false : false // disabled={disabled}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 1\n    }\n  }));\n};\n\nexport default injectIntl(AddTestContainerType);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/AddTestContainerType.jsx"],"names":["React","FormSelectSearch","FormInput","Col","Form","injectIntl","CONTAINERTYPE","transactionStatus","AddTestContainerType","props","intl","formatMessage","id","isMulti","containertype","selectedRecord","value","onComboChange","event","onInputOnChange","YES"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { Col, Form } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { CONTAINERTYPE,transactionStatus } from '../../components/Enumeration';\r\n\r\n\r\n\r\nconst AddTestContainerType = (props) => {\r\n //   const { nresourecode,disabled } = props.selectedRecord;\r\n    return (\r\n        <Col md=\"12\">\r\n            <FormSelectSearch\r\n                formLabel={props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                name={\"ncontainertypecode\"}\r\n                isDisabled={false}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                isMandatory={true}\r\n                showOption={props.isMulti}\r\n                options={props.containertype}\r\n                optionId='ncontainertypecode'\r\n                optionValue='scontainertype'\r\n                defaultValue={props.selectedRecord[\"ncontainertypecode\"]}\r\n                onChange={value => props.onComboChange(value, props.isMulti?\"availableData\":\"ncontainertypecode\", 1)}\r\n                value={props.selectedRecord[\"ncontainertypecode\"] ? props.selectedRecord[\"ncontainertypecode\"] || [] : []}\r\n                isMulti={props.isMulti}\r\n                isSearchable={true}\r\n                closeMenuOnSelect={!props.isMulti}\r\n                alphabeticalSort={true}\r\n                isClearable={true}\r\n            >\r\n            </FormSelectSearch>\r\n\r\n            <FormInput\r\n                    name={\"nquantity\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 4)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                    value={props.selectedRecord && props.selectedRecord[\"nquantity\"] ? props.selectedRecord[\"nquantity\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={5}\r\n                />\r\n\r\n<Form.Check \r\n                        name=\"noutsourcecode\" \r\n                        type=\"checkbox\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_OUTSOURCE\" })}\r\n                        inline={true}\r\n                        onChange={(event)=>props.onInputOnChange(event, 1,CONTAINERTYPE)}\r\n                        checked={props.selectedRecord ? props.selectedRecord[\"noutsourcecode\"] === CONTAINERTYPE.YES ? true : false : false}\r\n                       // disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestContainerType);"]},"metadata":{},"sourceType":"module"}