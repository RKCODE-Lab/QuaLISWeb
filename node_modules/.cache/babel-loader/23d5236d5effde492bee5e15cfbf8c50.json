{"ast":null,"code":"import _objectSpread from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _createForOfIteratorHelper from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{connect}from'react-redux';import{injectIntl,FormattedMessage}from'react-intl';import{Row,Col,Card,Nav,FormGroup,FormLabel}from'react-bootstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faTrashAlt,faPencilAlt,faTasks}from'@fortawesome/free-solid-svg-icons';import{toast}from'react-toastify';import ListMaster from'../../components/list-master/list-master.component';import SlideOutModal from'../../components/slide-out-modal/SlideOutModal';import Esign from'../audittrail/Esign';import AddQuery from'./AddQuery';import AddParameter from'./AddParameter';import QueryTypeFilter from'./QueryTypeFilter';import{callService,crudMaster,validateEsignCredential,updateStore,getSQLQueryDetail,getSQLQueryComboService,filterColumnData,comboChangeQueryType,executeUserQuery,comboColumnValues,getColumnNamesByTableName,getTablesName,getModuleFormName}from'../../actions';import{DEFAULT_RETURN}from'../../actions/LoginTypes';import{transactionStatus,queryTypeFilter,tableType}from'../../components/Enumeration';import{constructOptionList,getControlMap,showEsign}from'../../components/CommonScript';import{ReadOnlyText,ContentPanel}from'../../components/App.styles';import rsapi from'../../rsapi';import ConfirmMessage from'../../components/confirm-alert/confirm-message.component';import{Affix}from'rsuite';import BreadcrumbComponent from'../../components/Breadcrumb.Component';import{ListWrapper}from'../../components/client-group.styles';import ReactTooltip from'react-tooltip';var SQLBuilder=/*#__PURE__*/function(_Component){_inherits(SQLBuilder,_Component);var _super=_createSuper(SQLBuilder);function SQLBuilder(props){var _this;_classCallCheck(this,SQLBuilder);_this=_super.call(this,props);_this.userQueryDataStateChange=function(event){_this.setState({dataStateUserQuery:event.dataState});};_this.ConfirmDelete=function(deleteId){_this.confirmMessage.confirm(\"deleteMessage\",_this.props.intl.formatMessage({id:\"IDS_DELETE\"}),_this.props.intl.formatMessage({id:\"IDS_DEFAULTCONFIRMMSG\"}),_this.props.intl.formatMessage({id:\"IDS_OK\"}),_this.props.intl.formatMessage({id:\"IDS_CANCEL\"}),function(){return _this.deleteRecord(\"SQLQuery\",_this.props.Login.masterData.SelectedSQLQuery,\"delete\",deleteId);});};_this.getValidationForEdit=function(screenName,operation,primaryKeyName,primaryKeyValue,masterData,userInfo,queryTypeCode,ncontrolCode){var _rsapi$post;rsapi.post(\"sqlquery/getValidationForEdit\",(_rsapi$post={},_defineProperty(_rsapi$post,primaryKeyName,primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",userInfo),_rsapi$post)).then(function(response){if(response.data===\"IDS_SUCCESS\"){_this.props.getSQLQueryComboService(screenName,operation,primaryKeyName,primaryKeyValue,masterData,userInfo,queryTypeCode,ncontrolCode);}else if(response.data===\"IDS_QUERYUSEDINDASHBOARD\"){_this.confirmAlertForEdit(ncontrolCode);}else{toast.warn(_this.props.intl.formatMessage({id:response.data}));}}).catch(function(error){if(error.response.status===500){toast.error(_this.props.intl.formatMessage({id:error.message}));}else{toast.warn(_this.props.intl.formatMessage({id:error.response.data}));}});};_this.confirmAlertForEdit=function(editId){_this.confirmMessage.confirm(_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_QUERYUSEDINDASHBOARD\"}),_this.props.intl.formatMessage({id:\"IDS_OK\"}),_this.props.intl.formatMessage({id:\"IDS_CANCEL\"}),// () => this.performBatchAction(), \nfunction(){return _this.props.getSQLQueryComboService(_this.state.queryTypeName,\"update\",\"nsqlquerycode\",_this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,_this.props.Login.masterData,_this.props.Login.userInfo,//this.state.selectedcombo[\"nquerytypecode\"].value, \n_this.props.Login.masterData.SelectedQueryType.nquerytypecode,editId);},undefined,function(){return _this.closeAlert();});};_this.closeAlert=function(){var updateInfo={typeName:DEFAULT_RETURN,data:{showConfirmAlertForEdit:false}};_this.props.updateStore(updateInfo);};_this.openFilter=function(){var showFilter=!_this.props.Login.showFilter;var updateInfo={typeName:DEFAULT_RETURN,data:{showFilter:showFilter}};_this.props.updateStore(updateInfo);};_this.closeFilter=function(){var updateInfo={typeName:DEFAULT_RETURN,data:{showFilter:false}};_this.props.updateStore(updateInfo);};_this.onFilterSubmit=function(){_this.searchRef.current.value=\"\";//    const inputParam = {\n//        inputData: { \"userinfo\": this.props.Login.userInfo, \n//                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \n//                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\n//                 },        \n//        userInfo: this.props.Login.userInfo,\n//        classUrl: \"sqlquery\",\n//        methodUrl: \"SQLQuery\",\n//        displayName: \"IDS_SQLBUILDER\",\n//    };\n//this.props.callService(inputParam);\nvar nquerytypecode=_this.state.selectedRecord[\"nquerytypecode\"]?_this.state.selectedRecord[\"nquerytypecode\"].value:_this.props.Login.masterData.SelectedQueryType.nquerytypecode;_this.props.comboChangeQueryType(nquerytypecode,_this.props.Login.masterData,_this.props.Login.userInfo);};_this.handlePageChange=function(event){_this.setState({skip:event.skip,take:event.take});};_this.onComboChange=function(comboData,fieldName){if(comboData!=null){if(fieldName===\"ncharttypecode\"){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[fieldName]=comboData;_this.setState({selectedRecord:selectedRecord});}if(fieldName===\"ntabletypecode\"||fieldName===\"nformcode\"){var selectedTableType=_this.state.selectedTableType||{};selectedTableType[fieldName]=comboData;_this.setState({selectedTableType:selectedTableType});var _selectedRecord=_this.state.selectedRecord||{};//  this.state.ntableTypeCode=comboData.value;\nif(fieldName===\"ntabletypecode\"){if(comboData.value===tableType.ALL){_selectedRecord[\"nformcode\"]=\"\";_this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value,0);}else{var updateInfor={typeName:DEFAULT_RETURN,data:{tableName:[]}};_this.props.updateStore(updateInfor);_this.setState({moduleFormName:[]});_selectedRecord[\"nformcode\"]=\"\";_this.props.getModuleFormName(comboData.value,_this.props.Login.userInfo);}}if(fieldName===\"nformcode\"){_selectedRecord[fieldName]=comboData;_this.setState({selectedRecord:_selectedRecord});//this.state.nFormCode=comboData.value;\n//this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\n_this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value,_selectedRecord[\"nformcode\"].value);}}else{var selectedcombo=_this.state.selectedcombo||{};selectedcombo[fieldName]=comboData;_this.setState({selectedcombo:selectedcombo});}if(fieldName===\"nquerytypecode\"){_this.searchRef.current.value=\"\";// this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\nvar _selectedRecord2=_this.state.selectedRecord||{};_selectedRecord2[fieldName]=comboData;var updateInfo={typeName:DEFAULT_RETURN,data:{selectedRecord:_selectedRecord2}};_this.props.updateStore(updateInfo);}}};_this.onEsignInputOnChange=function(event){var selectedRecord=_this.state.selectedRecord||{};if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.YES:transactionStatus.NO;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});};_this.onInputOnChange=function(event){// const selectedRecord = this.state.selectedRecord || {};\nvar selectedRecord=_this.state.selectedRecord||{};if(event.target.type==='checkbox'){if(event.target.name===\"ntransactionstatus\")selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.ACTIVE:transactionStatus.DEACTIVE;else selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.YES:transactionStatus.NO;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});};_this.onNumericInputChange=function(value,name){var selectedRecord=_this.state.selectedRecord||{};selectedRecord[name]=value;_this.setState({selectedRecord:selectedRecord});};_this.closeModal=function(){var loadEsign=_this.props.Login.loadEsign;var openModal=_this.props.Login.openModal;var selectedRecord=_this.props.Login.selectedRecord;var showExecute=_this.props.Login.showExecute;var showParam=_this.props.Login.showParam;var showValidate=_this.props.Login.showValidate;var showSave=_this.props.Login.showSave;var screenName=_this.props.Login.screenName;var operation=_this.props.Login.operation;var slideOperation=_this.props.Login.slideOperation;var parentPopUpSize=_this.props.Login.parentPopUpSize;var resultStatus=_this.props.Login.resultStatus;if(_this.props.Login.loadEsign){if(_this.props.Login.operation===\"delete\"){loadEsign=false;openModal=false;selectedRecord={};}else{loadEsign=false;selectedRecord[\"agree\"]=transactionStatus.NO;if(_this.state.param.size>0){showExecute=true;showSave=true;}else{showExecute=false;showSave=false;}parentPopUpSize=\"xl\";}}else{if(_this.props.Login.screenName===\"Parameter for Results\"||_this.props.Login.screenName===\"Results\"){if(_this.props.Login.screenFlag===\"showQuery\"){openModal=true;var queryTypeCode=_this.props.Login.masterData.SelectedQueryType.nquerytypecode;if(queryTypeCode===queryTypeFilter.LIMSDASHBOARDQUERY){screenName=_this.props.intl.formatMessage({id:\"IDS_LIMSDASHBOARDQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSALERTQUERY){screenName=_this.props.intl.formatMessage({id:\"IDS_LIMSALERTQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSBARCODEQUERY){screenName=_this.props.intl.formatMessage({id:\"IDS_LIMSBARCODEQUERY\"});}else if(queryTypeCode===queryTypeFilter.LIMSGENERALQUERY){screenName=_this.props.intl.formatMessage({id:\"IDS_LIMSGENERALQUERY\"});}else{screenName=_this.props.intl.formatMessage({id:\"IDS_LIMSFILTERQUERY\"});}showSave=false;}else{selectedRecord={};openModal=false;showExecute=false;}showParam=false;showValidate=true;operation=slideOperation;slideOperation=\"\";resultStatus=\"\";}else{openModal=false;selectedRecord={};showExecute=false;}}var updateInfo={typeName:DEFAULT_RETURN,data:{openModal:openModal,loadEsign:loadEsign,selectedRecord:selectedRecord,showExecute:showExecute,showParam:showParam,operation:operation,screenName:screenName,showSave:showSave,showValidate:showValidate,parentPopUpSize:parentPopUpSize,resultStatus:resultStatus,showConfirmAlertForEdit:false}};_this.props.updateStore(updateInfo);};_this.upDateComboboxValue=function(i){return function(Value){if(Value!=null){// let parameters = [...this.state.parameters]\n// parameters[i].textValue = Value\n// this.setState({\n//     parameters: parameters\n// })\nvar paramMap=_this.state.param||new Map();paramMap.get(i).textValue=Value;_this.setState({param:paramMap});}};};_this.handleDateChange=function(i){return function(date){// let parameters = [...this.state.parameters]\n// parameters[i].Datetime = date\n// this.setState({\n//     parameters: parameters\n// })\nvar paramMap=_this.state.param||new Map();paramMap.get(i).Datetime=date;_this.setState({param:paramMap});};};_this.handleText=function(i){return function(event){//let parameters = [...this.state.parameters];\n//parameters[i].textValue = e.target.value;\n//this.setState({parameters: parameters});\n// console.log(parameters)\nvar paramMap=_this.state.param||new Map();paramMap.get(event.target.name).textValue=event.target.value;_this.setState({param:paramMap});};};_this.executeQuery=function(methodUrl,selectedRecord,operation,ncontrolCode){var sqlQuery=selectedRecord.ssqlquery;if(sqlQuery.length>10){if(sqlQuery.toUpperCase().indexOf('INSERT')>=0||sqlQuery.toUpperCase().indexOf('UPDATE')>=0||sqlQuery.toUpperCase().indexOf('DELETE')>=0||sqlQuery.toUpperCase().indexOf('TRUNCATE')>=0||sqlQuery.toUpperCase().indexOf('CREATE')>=0||sqlQuery.toUpperCase().indexOf('ALTER')>=0||sqlQuery.toUpperCase().indexOf('DROP')>=0){toast.warn(_this.props.intl.formatMessage({id:\"IDS_CANNOTDATAMANIPULATION\"}));}else{if(sqlQuery.indexOf('P$')>0){var newQuery=sqlQuery;var paramMap=new Map();while(newQuery.indexOf(\"P$\")!==-1){var paramLabelStartIndex=newQuery.indexOf(\"P$\");var paramLabelEndIndex=newQuery.indexOf(\"$P\");var paramLabel=newQuery.substring(paramLabelStartIndex+2,paramLabelEndIndex);if(paramLabel.indexOf(\"T$\")!==-1){var displayName=\"\";var localParam=\"\";var tableName=\"\";newQuery=newQuery.substring(paramLabelEndIndex+2,newQuery.length);if(paramLabel.indexOf(\"D$\")!==-1){localParam=paramLabel.substring(0,paramLabel.indexOf('D$'));displayName=paramLabel.substring(paramLabel.indexOf('D$')+2,paramLabel.indexOf('T$'));//tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\ntableName=paramLabel.substring(paramLabel.indexOf('T$')+2,paramLabel.length);}else{localParam=paramLabel.substring(0,paramLabel.indexOf('T$'));// tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\ntableName=paramLabel.substring(paramLabel.indexOf('T$')+2,paramLabel.length);}if(localParam.startsWith('d')||localParam.startsWith('D')){paramMap.set(\"P$\"+localParam+\"$P\",{value:'DateTimePicker',lableName:localParam,//ID: param.length, \nDatetime:new Date(),textValue:'',TableName:tableName,DisplayParam:displayName,actuallableName:localParam.substring(1,localParam.length)});}else{paramMap.set(\"P$\"+localParam+\"$P\",{value:'TextBox1',lableName:localParam,//ID: param.length, \ntextValue:'',TableName:tableName,DisplayParam:displayName,actuallableName:localParam.substring(1,localParam.length)});}}else{newQuery=newQuery.substring(paramLabelEndIndex+2,newQuery.length);if(paramLabel.startsWith('d')||paramLabel.startsWith('D')){paramMap.set(\"P$\"+paramLabel+\"$P\",{value:'DateTimePicker',lableName:paramLabel,actuallableName:paramLabel.substring(1,paramLabel.length),//ID: param.length, \nDatetime:new Date()});}else{paramMap.set(\"P$\"+paramLabel+\"$P\",{value:'TextBox1',lableName:paramLabel,//ID: param.length, \ntextValue:'',TableName:\"\",DisplayParam:\"\",actuallableName:paramLabel.substring(1,paramLabel.length)});}}}var updateInfo={typeName:DEFAULT_RETURN,data:{screenName:\"Parameter for Results\",openModal:true,showExecute:true,showParam:true,showValidate:false,showSave:false,operation:\"create\",slideOperation:\"\",slideResult:[],slideList:[],screenFlag:\"showParam\",param:paramMap,//param: param, Dparam: Dparam, TBLName: TBLName,\nparentPopUpSize:\"xl\"}};_this.props.updateStore(updateInfo);}else{//query without parameters      \nvar inputParam={query:selectedRecord.ssqlquery.trim(),screenName:\"Results\",openModal:true,showExecute:false,showParam:true,showValidate:false,showSave:false,noSave:true,operation:\"view\",slideOperation:\"\",slideResult:[],slideList:[],//screenFlag: \"showParam\",\nscreenFlag:\"NoParam\",parentPopUpSize:\"xl\",param:new Map()};_this.props.executeUserQuery(inputParam);}}}};_this.deleteRecord=function(methodUrl,selectedRecord,operation,ncontrolCode){var _inputData;var postParam={inputListName:\"SQLQuery\",selectedObject:\"SelectedSQLQuery\",primaryKeyField:\"nsqlquerycode\",primaryKeyValue:_this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,fetchUrl:\"sqlquery/getSQLQuery\",fecthInputObject:{userInfo:_this.props.Login.userInfo}};var inputParam={classUrl:_this.props.Login.inputParam.classUrl,methodUrl:methodUrl,postParam:postParam,inputData:(_inputData={},_defineProperty(_inputData,methodUrl.toLowerCase(),selectedRecord),_defineProperty(_inputData,\"userinfo\",_this.props.Login.userInfo),_defineProperty(_inputData,\"sqlquery\",_this.props.Login.masterData.SelectedSQLQuery),_inputData),operation:operation};var masterData=_this.props.Login.masterData;if(showEsign(_this.props.Login.userRoleControlRights,_this.props.Login.userInfo.nformcode,ncontrolCode)){var updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData},openModal:true,screenName:\"sqlquery\",operation:operation}};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,masterData,\"openModal\");}};_this.onExecuteClick=function(){// let paramVal;\nvar tempQuery=\"\";var paramFlag=true;var selectedRecord=_this.state.selectedRecord||{};if(_this.props.Login.screenName===\"Parameter for Results\"&&_this.state.param.size>0){if(selectedRecord!=null&&selectedRecord.ssqlquery!=null&&selectedRecord.ssqlquery.length>0){tempQuery=selectedRecord.ssqlquery;}else{tempQuery=_this.props.Login.masterData.SelectedSQLQuery.ssqlquery;}var paramMap=_this.state.param||new Map();var _iterator=_createForOfIteratorHelper(paramMap.entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var parameterMap=_step.value;var parameter=parameterMap[0];var parameterDetail=parameterMap[1];var paramVal=\"\";//console.log(\"para detail:\", parameterDetail);\nif(parameterDetail.lableName.toUpperCase().startsWith('D')){if(parameterDetail.Datetime!==null){paramVal=parameterDetail.Datetime.getFullYear()+\"-\";if(parameterDetail.Datetime.getMonth().toString().length>1){paramVal=paramVal+parseInt(parameterDetail.Datetime.getMonth()+1)+\"-\";}else{paramVal=paramVal+\"0\"+parseInt(parameterDetail.Datetime.getMonth()+1)+\"-\";}if(parameterDetail.Datetime.getDate().toString().length>1){paramVal=paramVal+parameterDetail.Datetime.getDate();}else{paramVal=paramVal+\"0\"+parameterDetail.Datetime.getDate();}}if(paramVal===undefined){paramFlag=false;tempQuery=tempQuery.replaceAll(parameter,null);}else if(paramVal.trim().length>0){//tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\ntempQuery=tempQuery.replaceAll(parameter,\"'\"+paramVal+\"'\");}else{paramFlag=false;}}else{paramVal=parameterDetail.textValue;if(paramVal!==\"\"){if(parameterDetail.lableName.toUpperCase().startsWith('S')){if(tempQuery.indexOf(parameterDetail.lableName.trim()+'D$')>0){tempQuery=tempQuery.replaceAll('P$'+parameterDetail.lableName.trim()+'D$'+parameterDetail.DisplayParam+'T$'+parameterDetail.TableName+'$P',\"'\"+paramVal+\"'\");}else if(tempQuery.indexOf(parameterDetail.lableName.trim()+'T$')>0){tempQuery=tempQuery.replaceAll('P$'+parameterDetail.lableName.trim()+'T$'+parameterDetail.TableName+'$P',\"'\"+paramVal+\"'\");}else{tempQuery=tempQuery.replaceAll(parameter,\"'\"+paramVal+\"'\");}}else{if(tempQuery.indexOf(parameterDetail.lableName.trim()+'D$')>0){tempQuery=tempQuery.replaceAll('P$'+parameterDetail.lableName.trim()+'D$'+parameterDetail.DisplayParam.trim()+'T$'+parameterDetail.TableName+'$P',paramVal);}else if(tempQuery.indexOf(parameterDetail.lableName.trim()+'T$')>0){tempQuery=tempQuery.replaceAll('P$'+parameterDetail.lableName.trim()+'T$'+parameterDetail.TableName+'$P',paramVal);}else{tempQuery=tempQuery.replaceAll(parameter,paramVal);}}}else{paramFlag=false;}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(paramFlag===true){//console.log(\"temp:\", tempQuery);\nvar inputParam={slideOperation:_this.props.Login.slideOperation,screenFlag:_this.props.Login.screenFlag,query:tempQuery.trim(),userInfo:_this.props.Login.userInfo,data:{}};_this.props.executeUserQuery(inputParam);//this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\n}else{toast.info(_this.props.intl.formatMessage({id:\"IDS_ENTERPAREMETRS\"}));}}else{if(selectedRecord.ssqlquery!==null&&selectedRecord.ssqlquery.length>0){var sqlQuery=selectedRecord.ssqlquery;if(sqlQuery.toUpperCase().indexOf('INSERT')>=0||sqlQuery.toUpperCase().indexOf('UPDATE')>=0||sqlQuery.toUpperCase().indexOf('DELETE')>=0||sqlQuery.toUpperCase().indexOf('TRUNCATE')>=0||sqlQuery.toUpperCase().indexOf('CREATE')>=0||sqlQuery.toUpperCase().indexOf('ALTER')>=0||sqlQuery.toUpperCase().indexOf('DROP')>=0){toast.warn(_this.props.intl.formatMessage({id:\"IDS_CANNOTDATAMANIPULATION\"}));}else{if(sqlQuery.indexOf('P$')>0){var newQuery=sqlQuery;var _paramMap=new Map();while(newQuery.indexOf(\"P$\")!==-1){var paramLabelStartIndex=newQuery.indexOf(\"P$\");var paramLabelEndIndex=newQuery.indexOf(\"$P\");var paramLabel=newQuery.substring(paramLabelStartIndex+2,paramLabelEndIndex);if(paramLabel.indexOf(\"T$\")!==-1){var displayName=\"\";var localParam=\"\";var tableName=\"\";newQuery=newQuery.substring(paramLabelEndIndex+2,newQuery.length);if(paramLabel.indexOf(\"D$\")!==-1){localParam=paramLabel.substring(0,paramLabel.indexOf('D$'));displayName=paramLabel.substring(paramLabel.indexOf('D$')+2,paramLabel.indexOf('T$'));//tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\ntableName=paramLabel.substring(paramLabel.indexOf('T$')+2,paramLabel.length);}else{localParam=paramLabel.substring(0,paramLabel.indexOf('T$'));//tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\ntableName=paramLabel.substring(paramLabel.indexOf('T$')+2,paramLabel.length);}if(localParam.startsWith('d')||localParam.startsWith('D')){_paramMap.set(\"P$\"+localParam+\"$P\",{value:'DateTimePicker',lableName:localParam,//ID: param.length, \nDatetime:new Date(),textValue:'',TableName:tableName,DisplayParam:displayName,actuallableName:localParam.substring(1,localParam.length)});}else{_paramMap.set(\"P$\"+localParam+\"$P\",{value:'TextBox1',lableName:localParam,//ID: param.length, \ntextValue:'',TableName:tableName,DisplayParam:displayName,actuallableName:localParam.substring(1,localParam.length)});}}else{newQuery=newQuery.substring(paramLabelEndIndex+2,newQuery.length);if(paramLabel.startsWith('d')||paramLabel.startsWith('D')){_paramMap.set(\"P$\"+paramLabel+\"$P\",{value:'DateTimePicker',lableName:paramLabel,actuallableName:paramLabel.substring(1,paramLabel.length),//ID: param.length, \nDatetime:new Date()});}else{_paramMap.set(\"P$\"+paramLabel+\"$P\",{value:'TextBox1',lableName:paramLabel,//ID: param.length, \ntextValue:'',TableName:\"\",DisplayParam:\"\",actuallableName:paramLabel.substring(1,paramLabel.length)});}}}var updateInfo={typeName:DEFAULT_RETURN,data:{screenName:\"Parameter for Results\",showExecute:true,showSave:true,showParam:true,showValidate:false,slideOperation:_this.props.Login.operation,slideResult:[],slideList:[],screenFlag:\"showQuery\",param:_paramMap// Dparam: Dparam, TBLName: TBLName\n}};_this.props.updateStore(updateInfo);}else{//query without parameters      \nvar _inputParam={screenName:\"Results\",query:selectedRecord.ssqlquery.trim(),userInfo:_this.props.Login.userInfo,slideOperation:_this.props.Login.operation,screenFlag:\"showQuery\",data:{showExecute:false,showSave:false,showParam:true,showValidate:false,noSave:false,operation:\"view\",param:new Map(),screenName:\"Results\",slideOperation:_this.props.Login.operation,screenFlag:\"showQuery\"}};_this.props.executeUserQuery(_inputParam);}}}}};_this.onSaveClick=function(saveType,formRef){if(_this.props.Login.resultStatus===\"Success\"){var operation=_this.props.Login.operation;var inputData=[];inputData[\"userinfo\"]=_this.props.Login.userInfo;var postParam=undefined;if(operation===\"update\"||operation===\"view\"&&_this.props.Login.slideOperation!==\"create\"){// edit\noperation=\"update\";postParam={inputListName:\"SQLQuery\",selectedObject:\"SelectedSQLQuery\",primaryKeyField:\"nsqlquerycode\"};var selectedRecord=_objectSpread({},_this.state.selectedRecord);delete selectedRecord.nformcode;inputData[\"sqlquery\"]=selectedRecord;_this.queryFieldList.map(function(item){return inputData[\"sqlquery\"][item]=_this.state.selectedRecord[item]?_this.state.selectedRecord[item]:\"\";});}else{//add               \ninputData[\"sqlquery\"]={\"nsitecode\":_this.props.Login.userInfo.nmastersitecode};operation=\"create\";_this.queryFieldList.map(function(item){return inputData[\"sqlquery\"][item]=_this.state.selectedRecord[item];});}inputData[\"sqlquery\"][\"ncharttypecode\"]=_this.state.selectedRecord[\"ncharttypecode\"]?_this.state.selectedRecord[\"ncharttypecode\"].value:\"-1\";inputData[\"sqlquery\"][\"nquerytypecode\"]=_this.props.Login.masterData.SelectedQueryType.nquerytypecode;///code removed\nvar inputParam={classUrl:\"sqlquery\",methodUrl:\"SQLQuery\",inputData:inputData,operation:operation,saveType:saveType,formRef:formRef,postParam:postParam,searchRef:_this.searchRef};var masterData=_this.props.Login.masterData;if(showEsign(_this.props.Login.userRoleControlRights,_this.props.Login.userInfo.nformcode,_this.props.Login.ncontrolCode)){var updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData},saveType:saveType,parentPopUpSize:\"lg\"}};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,masterData,\"openModal\");}}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_INAVLIDDATA\"}));}};_this.validateEsign=function(){var inputParam={inputData:{\"userinfo\":_objectSpread(_objectSpread({},_this.props.Login.userInfo),{},{sreason:_this.state.selectedRecord[\"esigncomments\"]}),password:_this.state.selectedRecord[\"esignpassword\"]},screenData:_this.props.Login.screenData};_this.props.validateEsignCredential(inputParam,\"openModal\");};_this.reloadData=function(){_this.searchRef.current.value=\"\";// const inputParam = {\n//     inputData: { \"userinfo\": this.props.Login.userInfo },\n//     classUrl: \"sqlquery\",\n//     methodUrl: \"SQLQuery\",\n//     displayName: \"IDS_SQLBUILDER\",\n//     userInfo: this.props.Login.userInfo\n// };\n// this.props.callService(inputParam);\nvar nquerytypecode=_this.props.Login.masterData.SelectedQueryType?_this.props.Login.masterData.SelectedQueryType.nquerytypecode:0;_this.props.comboChangeQueryType(nquerytypecode,_this.props.Login.masterData,_this.props.Login.userInfo);};var dataStateUserQuery={skip:0,take:10};_this.state={selectedRecord:{},error:\"\",modalIsOpen:false,parameters:[],objparam:[],objDparam:[],queryName:'',queryResult:[],userRoleControlRights:[],controlMap:new Map(),dataStateUserQuery:dataStateUserQuery,queryTypeName:'',selectedcombo:[],selectedTableType:[],moduleFormName:[],ntableTypeCode:-1,nFormCode:-1,queryType:[],tableType:[],chartList:[],skip:0,take:_this.props.Login.settings?_this.props.Login.settings[3]:25//tableName : undefined,tableList:[]\n};_this.searchRef=React.createRef();_this.confirmMessage=new ConfirmMessage();// this.dropItemRef = React.createRef(); \n_this.queryFieldList=['nquerytypecode','ssqlqueryname','ssqlquery','sscreenrecordquery','sscreenheader','svaluemember','sdisplaymember','ncharttypecode'];_this.queryList=[];_this.searchFieldList=[\"ssqlqueryname\",\"ssqlquery\",\"sscreenheader\",\"svaluemember\",\"sdisplaymember\",\"squerytypename\",\"schartname\"];return _this;}_createClass(SQLBuilder,[{key:\"render\",value:function render(){var _this2=this;var _this$props$Login=this.props.Login,masterData=_this$props$Login.masterData,userInfo=_this$props$Login.userInfo;var addId=this.state.controlMap.has(\"AddSQLQuery\")&&this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;var editId=this.state.controlMap.has(\"EditSQLQuery\")&&this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;var deleteId=this.state.controlMap.has(\"DeleteSQLQuery\")&&this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;var executeId=this.state.controlMap.has(\"ExecuteSQLQuery\")&&this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;var filterParam={inputListName:\"SQLQuery\",selectedObject:\"SelectedSQLQuery\",primaryKeyField:\"nsqlquerycode\",fetchUrl:\"sqlquery/getSQLQuery\",fecthInputObject:{userinfo:this.props.Login.userInfo},masterData:this.props.Login.masterData,searchFieldList:this.searchFieldList};this.validationColumnList=[{\"idsName\":\"IDS_SQLQUERYNAME\",\"dataField\":\"ssqlqueryname\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SQLQUERY\",\"dataField\":\"ssqlquery\",\"width\":\"200px\",\"mandatory\":true}// { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \n// { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\n// { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\n// { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\n];if(this.state.selectedcombo.nquerytypecode&&this.state.selectedcombo.nquerytypecode.value===2){this.validationColumnList=[{\"idsName\":\"IDS_SQLQUERYNAME\",\"dataField\":\"ssqlqueryname\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SQLQUERY\",\"dataField\":\"ssqlquery\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SCREENHEADER\",\"dataField\":\"sscreenheader\",\"width\":\"200px\",\"mandatory\":true}];}if(this.state.selectedcombo.nquerytypecode&&this.state.selectedcombo.nquerytypecode.value===5){this.validationColumnList=[{\"idsName\":\"IDS_SQLQUERYNAME\",\"dataField\":\"ssqlqueryname\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SQLQUERY\",\"dataField\":\"ssqlquery\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SVALUEMEMBER\",\"dataField\":\"svaluemember\",\"width\":\"200px\",\"mandatory\":true},{\"idsName\":\"IDS_SDISPLAYMEMBER\",\"dataField\":\"sdisplaymember\",\"width\":\"200px\",\"mandatory\":true}];}if(this.state.selectedcombo.nquerytypecode&&this.state.selectedcombo.nquerytypecode.value===1){this.validationColumnList=[{\"idsName\":\"IDS_SQLQUERYNAME\",\"dataField\":\"ssqlqueryname\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_SQLQUERY\",\"dataField\":\"ssqlquery\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_CHARTTYPE\",\"dataField\":\"ncharttypecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"}];}var mandatoryFields=[];this.validationColumnList.forEach(function(item){return item.mandatory===true?mandatoryFields.push(item):\"\";});var breadCrumbData=this.state.filterData||[];return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ListWrapper,{className:\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"},breadCrumbData.length>0?/*#__PURE__*/React.createElement(Affix,{top:53},/*#__PURE__*/React.createElement(BreadcrumbComponent,{breadCrumbItem:breadCrumbData})):\"\",/*#__PURE__*/React.createElement(Row,{noGutters:true},/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(ListMaster,{masterData:this.props.Login.masterData,screenName:this.props.intl.formatMessage({id:\"IDS_SQLBUILDER\"}),masterList:this.props.Login.masterData.searchedData||this.props.Login.masterData.SQLQuery,getMasterDetail:function getMasterDetail(sqlQuery){return _this2.props.getSQLQueryDetail(sqlQuery,userInfo,masterData);},selectedMaster:this.props.Login.masterData.SelectedSQLQuery,primaryKeyField:\"nsqlquerycode\",mainField:\"ssqlqueryname\",firstField:\"squerytypename\",secondField:this.state.selectedcombo[\"nquerytypecode\"]&&this.state.selectedcombo[\"nquerytypecode\"].value===queryTypeFilter.LIMSDASHBOARDQUERY?\"schartname\":\"\",filterColumnData:this.props.filterColumnData,filterParam:filterParam,userRoleControlRights:this.state.userRoleControlRights,addId:addId,searchRef:this.searchRef,reloadData:this.reloadData,openModal:function openModal(){return _this2.props.getSQLQueryComboService(\"\",\"create\",\"nsqlquerycode\",null,_this2.props.Login.masterData,_this2.props.Login.userInfo,_this2.props.Login.masterData.SelectedQueryType.nquerytypecode,//this.state.selectedcombo[\"nquerytypecode\"].value, \naddId);}//{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\n,needAccordianFilter:false// skip={this.state.skip}\n// take={this.state.take}\n,handlePageChange:this.handlePageChange,showFilterIcon:true,showFilter:this.props.Login.showFilter,openFilter:this.openFilter,closeFilter:this.closeFilter,onFilterSubmit:this.onFilterSubmit,filterComponent:[{\"IDS_QUERYTYPEFILTER\":/*#__PURE__*/React.createElement(QueryTypeFilter,{queryType:this.state.queryType||[]//{this.props.Login.masterData.QueryType || []}\n,selectedRecord:this.state.selectedcombo||{},onComboChange:this.onComboChange,filterQueryType:this.props.Login.masterData.SelectedQueryType})}]})),/*#__PURE__*/React.createElement(Col,{md:\"8\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(ContentPanel,{className:\"panel-main-content\"},/*#__PURE__*/React.createElement(Card,{className:\"border-0\"},this.props.Login.masterData.SQLQuery&&this.props.Login.masterData.SQLQuery.length>0&&this.props.Login.masterData.SelectedSQLQuery&&Object.values(this.props.Login.masterData.SelectedSQLQuery).length>0?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(Card.Title,{className:\"product-title-main\"},this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname),/*#__PURE__*/React.createElement(Card.Subtitle,null,/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex product-category\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"product-title-sub flex-grow-1\"},/*#__PURE__*/React.createElement(\"span\",{className:\"btn btn-outlined outline-secondary btn-sm ml-3\"},/*#__PURE__*/React.createElement(FormattedMessage,{id:this.props.Login.masterData.SelectedSQLQuery.squerytypename}))),/*#__PURE__*/React.createElement(ReactTooltip,{place:\"bottom\",globalEventOff:\"click\",id:\"tooltip_list_wrap\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"d-inline\"},/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2 action-icons-wrap\",name:\"editsqlqueryname\",hidden:this.state.userRoleControlRights.indexOf(editId)===-1,onClick:function onClick(){return _this2.getValidationForEdit(_this2.state.queryTypeName,\"update\",\"nsqlquerycode\",_this2.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,_this2.props.Login.masterData,_this2.props.Login.userInfo,//this.state.selectedcombo[\"nquerytypecode\"].value, \n_this2.props.Login.masterData.SelectedQueryType.nquerytypecode,editId);},\"data-for\":\"tooltip_list_wrap\",\"data-tip\":this.props.intl.formatMessage({id:\"IDS_EDIT\"})},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faPencilAlt})),/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2 action-icons-wrap\",name:\"deletesqlqueryname\",\"data-tip\":this.props.intl.formatMessage({id:\"IDS_DELETE\"}),\"data-for\":\"tooltip_list_wrap\",hidden:this.state.userRoleControlRights.indexOf(deleteId)===-1,onClick:function onClick(){return _this2.ConfirmDelete(deleteId);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faTrashAlt})),/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2 action-icons-wrap\",name:\"executequery\",hidden:this.state.userRoleControlRights.indexOf(executeId)===-1,onClick:function onClick(){return _this2.executeQuery(\"SQLQuery\",_this2.props.Login.masterData.SelectedSQLQuery,\"execute\",executeId);},\"data-for\":\"tooltip_list_wrap\",\"data-tip\":this.props.intl.formatMessage({id:\"IDS_EXECUTEQUERY\"})},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faTasks})))))),/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Row,null,this.props.Login.masterData.SelectedSQLQuery.nquerytypecode===queryTypeFilter.LIMSALERTQUERY&&/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_SCREENHEADER\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,this.props.Login.masterData.SelectedSQLQuery.sscreenheader))),this.props.Login.masterData.SelectedSQLQuery.nquerytypecode===queryTypeFilter.LIMSFILTERQUERY&&/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_SVALUEMEMBER\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,this.props.Login.masterData.SelectedSQLQuery.svaluemember))),this.props.Login.masterData.SelectedSQLQuery.nquerytypecode===queryTypeFilter.LIMSFILTERQUERY&&/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_SDISPLAYMEMBER\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,this.props.Login.masterData.SelectedSQLQuery.sdisplaymember))),/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_SQLQUERY\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,this.props.Login.masterData.SelectedSQLQuery.ssqlquery)))))):\"\"))))))),this.props.Login.openModal&&/*#__PURE__*/React.createElement(SlideOutModal,{show:this.props.Login.openModal,closeModal:this.closeModal//size={this.props.Login.parentPopUpSize}\n,size:this.props.Login.loadEsign?\"lg\":\"xl\",operation:this.props.Login.operation,inputParam:this.props.Login.inputParam,screenName:this.props.Login.screenName,onSaveClick:this.onSaveClick,onExecuteClick:this.onExecuteClick,esign:this.props.Login.loadEsign,validateEsign:this.validateEsign,masterStatus:this.props.Login.masterStatus,updateStore:this.props.updateStore,showExecute:this.props.Login.showExecute,showParam:this.props.Login.showParam,noSave:this.props.Login.noSave,showValidate:this.props.Login.showValidate//graphView={this.props.Login.graphView}\n,showSave:this.props.Login.showSave,selectedRecord:this.state.selectedRecord||{},mandatoryFields:this.props.Login.screenName===\"Parameter for Results\"?[]:mandatoryFields,addComponent:this.props.Login.loadEsign?/*#__PURE__*/React.createElement(Esign,{operation:this.props.Login.operation,onInputOnChange:this.onInputOnChange,inputParam:this.props.Login.inputParam,selectedRecord:this.state.selectedRecord||{}}):(this.props.Login.screenName===\"Parameter for Results\"||this.props.Login.screenName===\"Results\")&&this.props.Login.showParam?/*#__PURE__*/React.createElement(AddParameter,{selectedRecord:this.state.selectedRecord||{},onInputOnChange:this.handleText,onComboChange:this.upDateComboboxValue,onChange:this.handleDateChange//parameters={this.state.parameters || []}\n,parameters:this.state.param||new Map(),queryTypeCode:this.props.Login.masterData.SelectedQueryType.nquerytypecode// queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n,sscreenheader:this.props.Login.masterData.SelectedSQLQuery===null?\"\":this.props.Login.masterData.SelectedSQLQuery.sscreenheader,slideResult:this.props.Login.slideResult,slideList:this.props.Login.slideList,resultStatus:this.props.Login.resultStatus,dataStateUserQuery:this.state.dataStateUserQuery,userQueryDataStateChange:this.userQueryDataStateChange,controlMap:this.state.controlMap}):/*#__PURE__*/React.createElement(AddQuery,{selectedRecord:this.state.selectedRecord||{},selectedTableType:this.state.selectedTableType||{},onInputOnChange:this.onInputOnChange,onComboChange:this.onComboChange,chartList:this.state.chartList||[],tableList:this.props.Login.tableList||[],tableName:this.props.Login.tableName||[]//tableList={}\n,tableType:this.state.tableType||[],moduleFormName:this.state.moduleFormName||[],tableTypeCode:this.state.selectedTableType[\"ntabletypecode\"]?this.state.selectedTableType[\"ntabletypecode\"].value:0// onColumnNameDrop={this.onColumnNameDrop}\n,onDrop:this.onDrop.bind(this)//queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n,queryTypeCode:this.props.Login.masterData.SelectedQueryType.nquerytypecode})}));}},{key:\"getTablesName\",value:function getTablesName(selectedRecord){return function(dispatch){var url=\"sqlquery/getTablesFromSchema\";rsapi.post(url,{\"tabletypecode\":parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\":parseInt(selectedRecord[\"nformcode\"].value),\"userinfo\":this.props.Login.userInfo}).then(function(response){var tableName=undefined;var tableNameOnly=[];Object.values(response[1].data[0]).forEach(function(p){if(p.stable!==tableName){tableName=p.stable;tableNameOnly.push({tableName:tableName});}});dispatch({type:DEFAULT_RETURN,payload:{tableList:response[0].data[0]||[],tableName:tableNameOnly||[]}});//this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\n}).catch(function(error){if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}},{key:\"getModuleFormName\",value:function getModuleFormName(TableTypeCode){var _this3=this;var url=\"sqlquery/getModuleFormName\";rsapi.post(url,{\"tabletypecode\":parseInt(TableTypeCode),\"userinfo\":this.props.Login.userInfo}).then(function(response){_this3.setState({moduleFormName:response.data[0]});}).catch(function(error){if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}},{key:\"onDrop\",value:function onDrop(data){var selectedRecord=this.state.selectedRecord;var sqlquery=selectedRecord.ssqlquery?selectedRecord.ssqlquery:\"\";selectedRecord.ssqlquery=data.dragtable?\"\".concat(sqlquery,\" \").concat(data.dragtable):\"\".concat(sqlquery,\" \").concat(data.dragcolumn);this.setState({selectedRecord:selectedRecord});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps){var _this$state=this.state,selectedRecord=_this$state.selectedRecord,dataStateUserQuery=_this$state.dataStateUserQuery,userRoleControlRights=_this$state.userRoleControlRights,controlMap=_this$state.controlMap,filterData=_this$state.filterData,queryType=_this$state.queryType,chartList=_this$state.chartList,moduleFormName=_this$state.moduleFormName,tableType=_this$state.tableType,selectedTableType=_this$state.selectedTableType,param=_this$state.param;var updateState=false;// const masterData = this.props.Login.masterData;\nif(this.props.Login.selectedRecord!==previousProps.Login.selectedRecord){updateState=true;selectedRecord=this.props.Login.selectedRecord;}if(this.props.Login.slideResult!==previousProps.Login.slideResult){dataStateUserQuery={skip:0,take:10};updateState=true;}if(this.props.Login.userInfo.nformcode!==previousProps.Login.userInfo.nformcode){var userRoleControlRight=[];if(this.props.Login.userRoleControlRights){this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]&&Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(function(item){return userRoleControlRight.push(item.ncontrolcode);});}var controlMap1=getControlMap(this.props.Login.userRoleControlRights,this.props.Login.userInfo.nformcode);// if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\nvar queryTypeMap=constructOptionList(this.props.Login.masterData.QueryType||[],\"nquerytypecode\",\"squerytypename\",\"nsorter\",\"ascending\",false);var QueryTypeList=queryTypeMap.get(\"OptionList\");// const selectedcombo = {\n//     nquerytypecode: QueryTypeList.length > 0 ? {\n//         \"value\": QueryTypeList[0].item.nquerytypecode,\n//         \"label\": QueryTypeList[0].item.squerytypename\n//     } : this.state.selectedcombo[\"nquerytypecode\"]\n// }\n// }\nupdateState=true;userRoleControlRights=userRoleControlRight;controlMap=controlMap1;filterData=this.generateBreadCrumData();queryType=QueryTypeList;}else{filterData=this.generateBreadCrumData();if(this.props.Login.chartList!==previousProps.Login.chartList||this.props.Login.moduleFormName!==previousProps.Login.moduleFormName){var chartListMap=constructOptionList(this.props.Login.chartList||[],\"ncharttypecode\",\"schartname\",undefined,undefined,undefined);var chartTypeList=chartListMap.get(\"OptionList\");var moduleFormNameMap=constructOptionList(this.props.Login.moduleFormName||[],\"nformcode\",\"sformname\",undefined,undefined,undefined);var moduleFormNameList=moduleFormNameMap.get(\"OptionList\");updateState=true;chartList=chartTypeList;moduleFormName=moduleFormNameList;}if(this.props.Login.masterData.QueryType!==previousProps.Login.masterData.QueryType){var _queryTypeMap=constructOptionList(this.props.Login.masterData.QueryType||[],\"nquerytypecode\",\"squerytypename\",\"nsorter\",\"ascending\",false);var _QueryTypeList=_queryTypeMap.get(\"OptionList\");// const selectedcombo = {\n//                         nquerytypecode: QueryTypeList.length > 0 ? {\n//                             \"value\": QueryTypeList[0].item.nquerytypecode,\n//                             \"label\": QueryTypeList[0].item.squerytypename\n//                         } : this.state.selectedcombo[\"nquerytypecode\"]\n//}\nupdateState=true;queryType=_QueryTypeList;//selectedcombo , \n}if(this.props.Login.tableType!==previousProps.Login.tableType){var tableTypeMap=constructOptionList(this.props.Login.tableType||[],\"ntabletypecode\",\"stabletype\",undefined,undefined,undefined);var tableTypeList=tableTypeMap.get(\"OptionList\");selectedTableType={ntabletypecode:tableTypeList.length>0?{\"value\":tableTypeList[0].item.ntabletypecode,\"label\":tableTypeList[0].item.stabletype}:this.state.selectedTableType[\"ntabletypecode\"]};updateState=true;tableType=tableTypeList;}if(this.props.Login.masterData.SelectedQueryType!==previousProps.Login.masterData.SelectedQueryType){updateState=true;}if(this.props.Login.param!==previousProps.Login.param){updateState=true;param=this.props.Login.param;}}if(updateState){this.setState({selectedRecord:selectedRecord,dataStateUserQuery:dataStateUserQuery,userRoleControlRights:userRoleControlRights,controlMap:controlMap,filterData:filterData,queryType:queryType,chartList:chartList,moduleFormName:moduleFormName,tableType:tableType,selectedTableType:selectedTableType,param:param});}}},{key:\"generateBreadCrumData\",value:function generateBreadCrumData(){var breadCrumbData=[];if(this.props.Login.masterData&&this.props.Login.masterData.SelectedQueryType){breadCrumbData.push({\"label\":\"IDS_QUERYTYPE\",\"value\":this.props.Login.masterData.SelectedQueryType?this.props.Login.masterData.SelectedQueryType.squerytypename:\"\"//this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\n});}return breadCrumbData;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var updateInfo={typeName:DEFAULT_RETURN,data:{masterData:[],inputParam:undefined,operation:null,modalName:undefined,testData:{},parameterData:{},otherTestData:{},formulaData:{}}};this.props.updateStore(updateInfo);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.Login.masterStatus!==\"\"){if(props.Login.errorCode===417||props.Login.errorCode===409){toast.warn(props.Login.masterStatus);props.Login.masterStatus=\"\";}}if(props.Login.error!==state.error){toast.error(props.Login.error);props.Login.error=\"\";}if(props.Login.selectedRecord===undefined){return{selectedRecord:{}};}return null;}}]);return SQLBuilder;}(Component);var mapStateToProps=function mapStateToProps(state){return{Login:state.Login};};export default connect(mapStateToProps,{callService:callService,crudMaster:crudMaster,updateStore:updateStore,filterColumnData:filterColumnData,validateEsignCredential:validateEsignCredential,getSQLQueryDetail:getSQLQueryDetail,getSQLQueryComboService:getSQLQueryComboService,comboChangeQueryType:comboChangeQueryType,executeUserQuery:executeUserQuery,comboColumnValues:comboColumnValues,getColumnNamesByTableName:getColumnNamesByTableName,getTablesName:getTablesName,getModuleFormName:getModuleFormName})(injectIntl(SQLBuilder));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dashboard/SqlBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faPencilAlt","faTasks","toast","ListMaster","SlideOutModal","Esign","AddQuery","AddParameter","QueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","getTablesName","getModuleFormName","DEFAULT_RETURN","transactionStatus","queryTypeFilter","tableType","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","rsapi","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","ReactTooltip","SQLBuilder","props","userQueryDataStateChange","event","setState","dataStateUserQuery","dataState","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","Login","masterData","SelectedSQLQuery","getValidationForEdit","screenName","operation","primaryKeyName","primaryKeyValue","userInfo","queryTypeCode","ncontrolCode","post","then","response","data","confirmAlertForEdit","warn","catch","error","status","message","editId","state","queryTypeName","nsqlquerycode","SelectedQueryType","nquerytypecode","undefined","closeAlert","updateInfo","typeName","showConfirmAlertForEdit","openFilter","showFilter","closeFilter","onFilterSubmit","searchRef","current","value","selectedRecord","handlePageChange","skip","take","onComboChange","comboData","fieldName","selectedTableType","ALL","updateInfor","tableName","moduleFormName","selectedcombo","onEsignInputOnChange","target","type","name","checked","YES","NO","onInputOnChange","ACTIVE","DEACTIVE","onNumericInputChange","closeModal","loadEsign","openModal","showExecute","showParam","showValidate","showSave","slideOperation","parentPopUpSize","resultStatus","param","size","screenFlag","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","upDateComboboxValue","i","Value","paramMap","Map","get","textValue","handleDateChange","date","Datetime","handleText","executeQuery","methodUrl","sqlQuery","ssqlquery","length","toUpperCase","indexOf","newQuery","paramLabelStartIndex","paramLabelEndIndex","paramLabel","substring","displayName","localParam","startsWith","set","lableName","Date","TableName","DisplayParam","actuallableName","slideResult","slideList","inputParam","query","trim","noSave","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","classUrl","inputData","toLowerCase","userRoleControlRights","nformcode","screenData","onExecuteClick","tempQuery","paramFlag","entries","parameterMap","parameter","parameterDetail","paramVal","getFullYear","getMonth","toString","parseInt","getDate","replaceAll","info","onSaveClick","saveType","formRef","queryFieldList","map","item","nmastersitecode","validateEsign","sreason","password","reloadData","modalIsOpen","parameters","objparam","objDparam","queryName","queryResult","controlMap","ntableTypeCode","nFormCode","queryType","chartList","settings","createRef","queryList","searchFieldList","addId","has","ncontrolcode","executeId","filterParam","userinfo","validationColumnList","mandatoryFields","forEach","mandatory","push","breadCrumbData","filterData","searchedData","SQLQuery","Object","values","ssqlqueryname","squerytypename","sscreenheader","LIMSFILTERQUERY","svaluemember","sdisplaymember","masterStatus","tableList","onDrop","bind","dispatch","url","tableNameOnly","p","stable","payload","TableTypeCode","sqlquery","dragtable","dragcolumn","previousProps","updateState","userRoleControlRight","controlMap1","queryTypeMap","QueryType","QueryTypeList","generateBreadCrumData","chartListMap","chartTypeList","moduleFormNameMap","moduleFormNameList","tableTypeMap","tableTypeList","ntabletypecode","stabletype","modalName","testData","parameterData","otherTestData","formulaData","errorCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTasks } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddQuery from './AddQuery';\r\nimport AddParameter from './AddParameter';\r\nimport QueryTypeFilter from './QueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, \r\n    comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, queryTypeFilter, tableType } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nclass SQLBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            modalIsOpen: false,\r\n            parameters: [],\r\n            objparam: [],\r\n            objDparam: [],\r\n            queryName: '',\r\n            queryResult: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [], \r\n            selectedTableType: [],\r\n            moduleFormName: [], \r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            queryType: [], \r\n            tableType: [], \r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ? \r\n            this.props.Login.settings[3] : 25 //tableName : undefined,tableList:[]\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    userQueryDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateUserQuery: event.dataState\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), \r\n        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n        this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n        () => this.deleteRecord(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"delete\", deleteId));\r\n    }\r\n\r\n\r\n    render() {\r\n        const { masterData, userInfo } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddSQLQuery\") && this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSQLQuery\") && this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSQLQuery\") && this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;\r\n        const executeId = this.state.controlMap.has(\"ExecuteSQLQuery\") && this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\",\r\n            fetchUrl: \"sqlquery/getSQLQuery\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \r\n            // { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\r\n        ]\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 2) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 5) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 1) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n\r\n            ]\r\n        }\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_SQLBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SQLQuery}\r\n                                getMasterDetail={(sqlQuery) => this.props.getSQLQueryDetail(sqlQuery, userInfo, masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedSQLQuery}\r\n                                primaryKeyField=\"nsqlquerycode\"\r\n                                mainField=\"ssqlqueryname\"\r\n                                firstField=\"squerytypename\"\r\n                                secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                    this.props.Login.masterData, this.props.Login.userInfo,\r\n                                    this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                    //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                    addId)} //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <QueryTypeFilter\r\n                                                queryType={this.state.queryType || []}//{this.props.Login.masterData.QueryType || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={this.props.Login.masterData.SelectedQueryType}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            {this.props.Login.masterData.SQLQuery && this.props.Login.masterData.SQLQuery.length > 0 && this.props.Login.masterData.SelectedSQLQuery && Object.values(this.props.Login.masterData.SelectedSQLQuery).length > 0 ?\r\n                                                <>\r\n                                                    <Card.Header>\r\n                                                        <Card.Title className=\"product-title-main\">\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname}\r\n                                                        </Card.Title>\r\n                                                        <Card.Subtitle>\r\n                                                            <div className=\"d-flex product-category\">\r\n                                                                <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                    <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\r\n                                                                        <FormattedMessage id={this.props.Login.masterData.SelectedSQLQuery.squerytypename} />\r\n                                                                    </span>\r\n                                                                </h2>\r\n                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                                <div className=\"d-inline\">\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"editsqlqueryname\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                        onClick={() => this.getValidationForEdit(this.state.queryTypeName,\r\n                                                                            \"update\", \"nsqlquerycode\",\r\n                                                                            this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                                                                            this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                            //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                                                            this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                                                            editId)}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}>\r\n\r\n                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletesqlqueryname\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"executequery\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(executeId) === -1}\r\n                                                                        onClick={() => this.executeQuery(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"execute\", executeId)}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EXECUTEQUERY\" })}>\r\n                                                                        <FontAwesomeIcon icon={faTasks} />\r\n                                                                    </Nav.Link>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Card.Subtitle>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body>\r\n                                                        <Row>\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSALERTQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sscreenheader}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.svaluemember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sdisplaymember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            <Col md=\"12\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.ssqlquery}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </>\r\n                                               : \"\"\r\n                                            }\r\n                                        </Card>\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* </div> */}\r\n                {/* End of get display */}\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        //size={this.props.Login.parentPopUpSize}\r\n                        size={this.props.Login.loadEsign ? \"lg\" : \"xl\"}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        showExecute={this.props.Login.showExecute}\r\n                        showParam={this.props.Login.showParam}\r\n                        noSave={this.props.Login.noSave}\r\n                        showValidate={this.props.Login.showValidate}\r\n                        //graphView={this.props.Login.graphView}\r\n                        showSave={this.props.Login.showSave}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName === \"Parameter for Results\" ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") && this.props.Login.showParam ?\r\n                                <AddParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.handleText}\r\n                                    onComboChange={this.upDateComboboxValue}\r\n                                    onChange={this.handleDateChange}\r\n                                    //parameters={this.state.parameters || []}\r\n                                    parameters={this.state.param || new Map()}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                    // queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    sscreenheader={this.props.Login.masterData.SelectedSQLQuery === null ? \"\" : this.props.Login.masterData.SelectedSQLQuery.sscreenheader}\r\n                                    slideResult={this.props.Login.slideResult}\r\n                                    slideList={this.props.Login.slideList}\r\n                                    resultStatus={this.props.Login.resultStatus}\r\n                                    dataStateUserQuery={this.state.dataStateUserQuery}\r\n                                    userQueryDataStateChange={this.userQueryDataStateChange}\r\n                                    controlMap={this.state.controlMap}\r\n                                />\r\n\r\n                                :\r\n                                <AddQuery\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    selectedTableType={this.state.selectedTableType || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    chartList={this.state.chartList || []}\r\n                                    tableList={this.props.Login.tableList || []}\r\n                                    tableName={this.props.Login.tableName || []}\r\n                                    //tableList={}\r\n                                    tableType={this.state.tableType || []}\r\n                                    moduleFormName={this.state.moduleFormName || []}\r\n                                    tableTypeCode={this.state.selectedTableType[\"ntabletypecode\"] ? this.state.selectedTableType[\"ntabletypecode\"].value : 0}\r\n                                    // onColumnNameDrop={this.onColumnNameDrop}\r\n                                    onDrop={this.onDrop.bind(this)}\r\n                                    //queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                />\r\n                        }\r\n\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    getValidationForEdit=(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode)=>{\r\n    rsapi.post(\"sqlquery/getValidationForEdit\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo })\r\n    .then(response => {\r\n         if(response.data===\"IDS_SUCCESS\"){\r\n            this.props.getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode)\r\n         }\r\n         else if(response.data===\"IDS_QUERYUSEDINDASHBOARD\" )  {\r\n            this.confirmAlertForEdit(ncontrolCode) \r\n          }\r\n         else{\r\n            toast.warn(this.props.intl.formatMessage({ id: response.data }));\r\n         }\r\n    })\r\n     .catch(error => {\r\n            if (error.response.status === 500) {\r\n                toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n\r\n    confirmAlertForEdit = (editId) => {\r\n            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_QUERYUSEDINDASHBOARD\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                // () => this.performBatchAction(), \r\n                () => this.props.getSQLQueryComboService(this.state.queryTypeName,\r\n                    \"update\", \"nsqlquerycode\",\r\n                    this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                    this.props.Login.masterData, this.props.Login.userInfo,\r\n                    //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                    this.props.Login.masterData.SelectedQueryType.nquerytypecode,editId),\r\n                undefined,\r\n                () => this.closeAlert()\r\n            );\r\n    }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlertForEdit: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        //    const inputParam = {\r\n        //        inputData: { \"userinfo\": this.props.Login.userInfo, \r\n        //                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \r\n        //                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\r\n        //                 },        \r\n        //        userInfo: this.props.Login.userInfo,\r\n        //        classUrl: \"sqlquery\",\r\n        //        methodUrl: \"SQLQuery\",\r\n        //        displayName: \"IDS_SQLBUILDER\",\r\n        //    };\r\n        //this.props.callService(inputParam);\r\n        const nquerytypecode = this.state.selectedRecord[\"nquerytypecode\"] ?\r\n            this.state.selectedRecord[\"nquerytypecode\"].value : this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"ncharttypecode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            if (fieldName === \"ntabletypecode\" || fieldName === \"nformcode\") {\r\n                const selectedTableType = this.state.selectedTableType || {};\r\n                selectedTableType[fieldName] = comboData;\r\n\r\n                this.setState({ selectedTableType });\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                //  this.state.ntableTypeCode=comboData.value;\r\n                if (fieldName === \"ntabletypecode\") {\r\n                    if (comboData.value === tableType.ALL) {\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, 0)\r\n                    }\r\n                    else {\r\n                        const updateInfor = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                tableName: []\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfor);\r\n                        this.setState({ moduleFormName: [] })\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getModuleFormName(comboData.value, this.props.Login.userInfo)\r\n                    }\r\n\r\n                }\r\n                if (fieldName === \"nformcode\") {\r\n\r\n                    selectedRecord[fieldName] = comboData;\r\n\r\n                    this.setState({ selectedRecord });\r\n                    //this.state.nFormCode=comboData.value;\r\n                    //this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\r\n                    this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, selectedRecord[\"nformcode\"].value)\r\n                }\r\n            }\r\n            else {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n\r\n                this.setState({ selectedcombo });\r\n            }\r\n            if (fieldName === \"nquerytypecode\") {\r\n                this.searchRef.current.value = \"\";\r\n                // this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord: selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getTablesName(selectedRecord) {\r\n        return function (dispatch) {\r\n            const url = \"sqlquery/getTablesFromSchema\";\r\n\r\n            rsapi.post(url, { \"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value), \"moduleformcode\": parseInt(selectedRecord[\"nformcode\"].value), \"userinfo\": this.props.Login.userInfo })\r\n                .then(response => {\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            tableList: response[0].data[0] || [],\r\n                            tableName: tableNameOnly || []\r\n\r\n                        }\r\n                    });\r\n                    //this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\r\n\r\n                })\r\n                .catch(error => {\r\n\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    getModuleFormName(TableTypeCode) {\r\n\r\n        const url = \"sqlquery/getModuleFormName\";\r\n\r\n        rsapi.post(url, { \"tabletypecode\": parseInt(TableTypeCode), \"userinfo\": this.props.Login.userInfo })\r\n            .then(response => {\r\n                this.setState({ moduleFormName: response.data[0] });\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange=(event)=> {\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        let  selectedRecord  = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showExecute = this.props.Login.showExecute;\r\n        let showParam = this.props.Login.showParam;\r\n        let showValidate = this.props.Login.showValidate;\r\n        let showSave = this.props.Login.showSave;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let slideOperation = this.props.Login.slideOperation;\r\n        let parentPopUpSize = this.props.Login.parentPopUpSize;\r\n        let resultStatus = this.props.Login.resultStatus;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                if (this.state.param.size > 0) {\r\n                    showExecute = true;\r\n                    showSave = true;\r\n                }\r\n                else {\r\n                    showExecute = false;\r\n                    showSave = false;\r\n                }\r\n                parentPopUpSize = \"xl\"\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") {\r\n                if (this.props.Login.screenFlag === \"showQuery\") {\r\n                    openModal = true;\r\n\r\n                    let queryTypeCode = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n                    if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSDASHBOARDQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSALERTQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSBARCODEQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSGENERALQUERY\" });\r\n                    }\r\n                    else {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSFILTERQUERY\" });\r\n                    }\r\n                    showSave = false;\r\n                }\r\n                else {\r\n                    selectedRecord = {};\r\n                    openModal = false;\r\n                    showExecute = false;\r\n                }\r\n\r\n                showParam = false;\r\n                showValidate = true;\r\n                operation = slideOperation;\r\n                slideOperation = \"\";\r\n                resultStatus = \"\";\r\n            }\r\n            else {\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                showExecute = false;\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, showExecute,\r\n                 showParam, operation, screenName, showSave, showValidate,\r\n                  parentPopUpSize, resultStatus ,showConfirmAlertForEdit:false}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    upDateComboboxValue = i => Value => {\r\n        if (Value != null) {\r\n\r\n            // let parameters = [...this.state.parameters]\r\n            // parameters[i].textValue = Value\r\n            // this.setState({\r\n            //     parameters: parameters\r\n            // })\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            paramMap.get(i).textValue = Value;\r\n            this.setState({ param: paramMap })\r\n\r\n        }\r\n    }\r\n\r\n    handleDateChange = i => date => {\r\n\r\n        // let parameters = [...this.state.parameters]\r\n        // parameters[i].Datetime = date\r\n\r\n        // this.setState({\r\n        //     parameters: parameters\r\n        // })\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(i).Datetime = date;\r\n        this.setState({ param: paramMap })\r\n    }\r\n\r\n    handleText = i => event => {\r\n        //let parameters = [...this.state.parameters];\r\n        //parameters[i].textValue = e.target.value;\r\n        //this.setState({parameters: parameters});\r\n        // console.log(parameters)\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(event.target.name).textValue = event.target.value;\r\n        this.setState({ param: paramMap })\r\n\r\n    }\r\n\r\n    onDrop(data) {\r\n        let { selectedRecord } = this.state;\r\n        let sqlquery = selectedRecord.ssqlquery ? selectedRecord.ssqlquery : \"\";\r\n\r\n        selectedRecord.ssqlquery = data.dragtable ? `${sqlquery} ${data.dragtable}` : `${sqlquery} ${data.dragcolumn}`\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    executeQuery = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const sqlQuery = selectedRecord.ssqlquery;\r\n        if (sqlQuery.length > 10) {\r\n            if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DELETE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('CREATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n            }\r\n            else {\r\n                if (sqlQuery.indexOf('P$') > 0) {\r\n                    let newQuery = sqlQuery;\r\n\r\n                    const paramMap = new Map();\r\n                    while (newQuery.indexOf(\"P$\") !== -1) {\r\n                        const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                        const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                        const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                        if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                            let displayName = \"\";\r\n                            let localParam = \"\";\r\n                            let tableName = \"\";\r\n\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n                            else {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                // tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n\r\n                            if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date(),\r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'TextBox1', lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: paramLabel,\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date()\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'TextBox1', lableName: paramLabel,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: \"\",\r\n                                    DisplayParam: \"\",\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN, data: {\r\n\r\n                            screenName: \"Parameter for Results\",\r\n                            openModal: true,\r\n                            showExecute: true,\r\n                            showParam: true,\r\n                            showValidate: false,\r\n                            showSave: false,\r\n                            operation: \"create\",\r\n                            slideOperation: \"\",\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            screenFlag: \"showParam\",\r\n                            param: paramMap,\r\n                            //param: param, Dparam: Dparam, TBLName: TBLName,\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    //query without parameters      \r\n                    const inputParam = {\r\n\r\n                        query: selectedRecord.ssqlquery.trim(),\r\n                        screenName: \"Results\",\r\n                        openModal: true,\r\n                        showExecute: false,\r\n                        showParam: true,\r\n                        showValidate: false,\r\n                        showSave: false,\r\n                        noSave: true,\r\n                        operation: \"view\",\r\n                        slideOperation: \"\",\r\n                        slideResult: [],\r\n                        slideList: [],\r\n                        //screenFlag: \"showParam\",\r\n                        screenFlag: \"NoParam\",\r\n                        parentPopUpSize: \"xl\",\r\n\r\n                        param: new Map(),\r\n\r\n                    }\r\n                    this.props.executeUserQuery(inputParam);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\",\r\n            primaryKeyField: \"nsqlquerycode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n            fetchUrl: \"sqlquery/getSQLQuery\",\r\n            fecthInputObject: { userInfo: this.props.Login.userInfo },\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl, postParam,\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"sqlquery\": this.props.Login.masterData.SelectedSQLQuery\r\n            },\r\n            operation\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"sqlquery\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onExecuteClick = () => {\r\n        // let paramVal;\r\n        let tempQuery = \"\";\r\n        let paramFlag = true;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenName === \"Parameter for Results\" && this.state.param.size > 0) {\r\n            if (selectedRecord != null && selectedRecord.ssqlquery != null && selectedRecord.ssqlquery.length > 0) {\r\n                tempQuery = selectedRecord.ssqlquery;\r\n            }\r\n            else {\r\n                tempQuery = this.props.Login.masterData.SelectedSQLQuery.ssqlquery;\r\n            }\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            for (let parameterMap of paramMap.entries()) {\r\n                const parameter = parameterMap[0];\r\n                const parameterDetail = parameterMap[1];\r\n                let paramVal = \"\";\r\n                //console.log(\"para detail:\", parameterDetail);\r\n\r\n                if (parameterDetail.lableName.toUpperCase().startsWith('D')) {\r\n                    if (parameterDetail.Datetime !== null){\r\n                        paramVal = parameterDetail.Datetime.getFullYear() + \"-\";\r\n                        if (parameterDetail.Datetime.getMonth().toString().length > 1) {\r\n                            paramVal = paramVal + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        if (parameterDetail.Datetime.getDate().toString().length > 1) {\r\n                            paramVal = paramVal + parameterDetail.Datetime.getDate();\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parameterDetail.Datetime.getDate();\r\n                        }\r\n                    }\r\n                    if (paramVal === undefined ){\r\n                        paramFlag = false;\r\n                        tempQuery = tempQuery.replaceAll(parameter,  null);\r\n                    }\r\n                    else if(paramVal.trim().length > 0) {\r\n                        //tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\r\n                        tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n                  \r\n                }\r\n                else {\r\n                    paramVal = parameterDetail.textValue;\r\n                    if (paramVal !== \"\") {\r\n                        if (parameterDetail.lableName.toUpperCase().startsWith('S')) {\r\n\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, paramVal);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (paramFlag === true) {\r\n                //console.log(\"temp:\", tempQuery);\r\n                const inputParam = {\r\n                    slideOperation: this.props.Login.slideOperation,\r\n                    screenFlag: this.props.Login.screenFlag,\r\n                    query: tempQuery.trim(),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    data: {}\r\n                }\r\n                this.props.executeUserQuery(inputParam);\r\n\r\n                //this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERPAREMETRS\" }));\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (selectedRecord.ssqlquery !== null && selectedRecord.ssqlquery.length > 0) {\r\n                const sqlQuery = selectedRecord.ssqlquery;\r\n                if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n                }\r\n                else {\r\n                    if (sqlQuery.indexOf('P$') > 0) {\r\n                        let newQuery = sqlQuery;\r\n\r\n                        const paramMap = new Map();\r\n                        while (newQuery.indexOf(\"P$\") !== -1) {\r\n                            const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                            const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                            const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                            if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                                let displayName = \"\";\r\n                                let localParam = \"\";\r\n                                let tableName = \"\";\r\n\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                    displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n                                else {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n\r\n                                if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date(),\r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'TextBox1', lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: paramLabel,\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date()\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'TextBox1', lableName: paramLabel,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: \"\",\r\n                                        DisplayParam: \"\",\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN, data: {\r\n                                screenName: \"Parameter for Results\",\r\n                                showExecute: true,\r\n                                showSave: true,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                slideOperation: this.props.Login.operation,\r\n                                slideResult: [],\r\n                                slideList: [],\r\n                                screenFlag: \"showQuery\",\r\n                                param: paramMap,\r\n                                // Dparam: Dparam, TBLName: TBLName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        //query without parameters      \r\n                        const inputParam = {\r\n                            screenName: \"Results\",\r\n                            query: selectedRecord.ssqlquery.trim(),\r\n                            userInfo: this.props.Login.userInfo,\r\n                            slideOperation: this.props.Login.operation,\r\n                            screenFlag: \"showQuery\",\r\n                            data: {\r\n                                showExecute: false,\r\n                                showSave: false,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                noSave: false,\r\n                                operation: \"view\",\r\n                                param: new Map(),\r\n                                screenName: \"Results\",\r\n                                slideOperation: this.props.Login.operation,\r\n                                screenFlag: \"showQuery\"\r\n                            }\r\n\r\n                        }\r\n                        this.props.executeUserQuery(inputParam);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.resultStatus === \"Success\") {\r\n            let operation = this.props.Login.operation;\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let postParam = undefined;\r\n            if (operation === \"update\"\r\n                || (operation === \"view\" && this.props.Login.slideOperation !== \"create\")) {\r\n                // edit\r\n                operation = \"update\";\r\n                postParam = { inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\" };\r\n                let  selectedRecord = {...this.state.selectedRecord};\r\n                delete selectedRecord.nformcode;\r\n                 inputData[\"sqlquery\"] = selectedRecord\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                })\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"sqlquery\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                operation = \"create\";\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item]\r\n                });\r\n            }\r\n            inputData[\"sqlquery\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : \"-1\";\r\n            inputData[\"sqlquery\"][\"nquerytypecode\"] = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n            ///code removed\r\n            const inputParam = {\r\n                classUrl: \"sqlquery\",\r\n                methodUrl: \"SQLQuery\",\r\n                inputData: inputData,\r\n                operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, parentPopUpSize: \"lg\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_INAVLIDDATA\" }));\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"sqlquery\",\r\n        //     methodUrl: \"SQLQuery\",\r\n        //     displayName: \"IDS_SQLBUILDER\",\r\n        //     userInfo: this.props.Login.userInfo\r\n        // };\r\n        // this.props.callService(inputParam);\r\n\r\n        let nquerytypecode = this.props.Login.masterData.SelectedQueryType ?\r\n            this.props.Login.masterData.SelectedQueryType.nquerytypecode : 0;\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let {selectedRecord,dataStateUserQuery,userRoleControlRights, controlMap, filterData, queryType,\r\n            chartList, moduleFormName, tableType, selectedTableType, param} =this.state;\r\n        let updateState = false;\r\n        // const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.slideResult !== previousProps.Login.slideResult) { \r\n            dataStateUserQuery = {\r\n                skip: 0,\r\n                take: 10,\r\n            };\r\n            updateState = true;\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRight = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRight.push(item.ncontrolcode))\r\n            }\r\n            const controlMap1 = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            // if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n            const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n            const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n            // const selectedcombo = {\r\n            //     nquerytypecode: QueryTypeList.length > 0 ? {\r\n            //         \"value\": QueryTypeList[0].item.nquerytypecode,\r\n            //         \"label\": QueryTypeList[0].item.squerytypename\r\n            //     } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n            // }\r\n\r\n            // }\r\n            updateState = true;\r\n            userRoleControlRights = userRoleControlRight ;\r\n            controlMap = controlMap1;\r\n            filterData = this.generateBreadCrumData();\r\n            queryType = QueryTypeList;\r\n        }\r\n        else {\r\n            filterData = this.generateBreadCrumData();\r\n            if (this.props.Login.chartList !== previousProps.Login.chartList || this.props.Login.moduleFormName !== previousProps.Login.moduleFormName) {\r\n\r\n                const chartListMap = constructOptionList(this.props.Login.chartList || [], \"ncharttypecode\",\r\n                    \"schartname\", undefined, undefined, undefined);\r\n                const chartTypeList = chartListMap.get(\"OptionList\");\r\n\r\n                const moduleFormNameMap = constructOptionList(this.props.Login.moduleFormName || [], \"nformcode\",\r\n                    \"sformname\", undefined, undefined, undefined);\r\n                const moduleFormNameList = moduleFormNameMap.get(\"OptionList\");\r\n                updateState = true;\r\n                chartList = chartTypeList\r\n                moduleFormName = moduleFormNameList\r\n            }\r\n            if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n                const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                    \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n                const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n                // const selectedcombo = {\r\n                //                         nquerytypecode: QueryTypeList.length > 0 ? {\r\n                //                             \"value\": QueryTypeList[0].item.nquerytypecode,\r\n                //                             \"label\": QueryTypeList[0].item.squerytypename\r\n                //                         } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n                //}\r\n\r\n                updateState = true;\r\n                queryType = QueryTypeList //selectedcombo , \r\n                \r\n                \r\n            }\r\n            if (this.props.Login.tableType !== previousProps.Login.tableType) {\r\n                const tableTypeMap = constructOptionList(this.props.Login.tableType || [], \"ntabletypecode\",\r\n                    \"stabletype\", undefined, undefined, undefined);\r\n                const tableTypeList = tableTypeMap.get(\"OptionList\");\r\n\r\n                selectedTableType = {\r\n                    ntabletypecode: tableTypeList.length > 0 ? {\r\n                        \"value\": tableTypeList[0].item.ntabletypecode,\r\n                        \"label\": tableTypeList[0].item.stabletype\r\n                    } : this.state.selectedTableType[\"ntabletypecode\"]\r\n\r\n                }\r\n                updateState = true;\r\n                tableType = tableTypeList\r\n                \r\n            }\r\n            if (this.props.Login.masterData.SelectedQueryType !== previousProps.Login.masterData.SelectedQueryType) {\r\n                updateState = true;\r\n            }\r\n            if (this.props.Login.param !== previousProps.Login.param) {\r\n                updateState = true;\r\n                param = this.props.Login.param\r\n            }\r\n        }\r\n        if(updateState){\r\n            this.setState({\r\n                selectedRecord,dataStateUserQuery,userRoleControlRights, controlMap, filterData, queryType,\r\n                chartList, moduleFormName, tableType, selectedTableType, param\r\n            })\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryType) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedQueryType ?\r\n                        this.props.Login.masterData.SelectedQueryType.squerytypename : \"\"\r\n                    //this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType,\r\n    executeUserQuery, comboColumnValues, getColumnNamesByTableName,\r\n    getTablesName, getModuleFormName\r\n})(injectIntl(SQLBuilder));"]},"metadata":{},"sourceType":"module"}