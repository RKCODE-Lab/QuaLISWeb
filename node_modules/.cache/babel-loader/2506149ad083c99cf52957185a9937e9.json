{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\AddReportDetail.js\";\nimport React from 'react';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus, attachmentType, REPORTTYPE } from '../../../components/Enumeration';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport DropZone from '../../../components/dropzone/dropzone.component';\n\nconst AddReportDetail = props => {\n  const {\n    sreportformatdetail,\n    disabled\n  } = props.selectedRecord;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nisplsqlquery\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    value: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }), props.reportMaster.nreporttypecode && props.reportMaster.nreporttypecode === REPORTTYPE.CONTROLBASED //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\n  ? /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"Addviewer\",\n    label: props.intl.formatMessage({\n      id: \"IDS_VIEWER\"\n    }),\n    inline: true,\n    value: \"viewer\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"viewer\" ? true : false,\n    disabled: props.operation == \"update\" ? ' ' : disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddPDF\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PDF\"\n    }),\n    inline: true,\n    value: \"pdf\",\n    defaultChecked: true,\n    onChange: event => props.onInputOnChange(event) //checked={sreportformat === \"pdf\" ? true : false}\n    ,\n    checked: sreportformatdetail === \"pdf\" ? true : sreportformatdetail === undefined ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"Addhtml\",\n    label: props.intl.formatMessage({\n      id: \"IDS_HTML\"\n    }),\n    inline: true,\n    value: \"html\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"html\" ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddXLS\",\n    label: props.intl.formatMessage({\n      id: \"IDS_XLS\"\n    }),\n    inline: true,\n    value: \"xls\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"xls\" ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"sreportformatdetail\",\n    type: \"radio\",\n    id: \"AddDOC\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DOC\"\n    }),\n    inline: true,\n    value: \"doc\",\n    onChange: event => props.onInputOnChange(event),\n    checked: sreportformatdetail === \"doc\" ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 41\n    }\n  })) : \"\", /*#__PURE__*/React.createElement(React.Fragment, null), Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(DropZone, {\n    label: props.intl.formatMessage({\n      id: \"IDS_FILE\"\n    }),\n    maxFiles: 1,\n    accept: \".jrxml,.mrt\",\n    minSize: 0,\n    maxSize: 10,\n    fileNameLength: 150,\n    onDrop: event => props.onDropImage(event, \"sfilename\"),\n    multiple: false,\n    isMandatory: true,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    attachmentTypeCode: props.operation === \"update\" ? attachmentType.OTHERS : \"\",\n    fileName: \"sfilename\",\n    deleteAttachment: () => props.deleteFile(\"sfilename\"),\n    actionType: props.actionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 41\n    }\n  })));\n};\n\nexport default injectIntl(AddReportDetail);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/reports/reportsconfig/AddReportDetail.js"],"names":["React","Row","Col","Form","injectIntl","transactionStatus","attachmentType","REPORTTYPE","CustomSwitch","DropZone","AddReportDetail","props","sreportformatdetail","disabled","selectedRecord","intl","formatMessage","id","YES","event","onInputOnChange","reportMaster","nreporttypecode","CONTROLBASED","operation","undefined","Object","keys","length","onDropImage","OTHERS","deleteFile","actionType"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus, attachmentType ,REPORTTYPE} from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\n\r\nconst AddReportDetail = (props) => {\r\n\r\n        const { sreportformatdetail, disabled } = props.selectedRecord;\r\n        return (\r\n                <Row>\r\n                        <Col md={12}>\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS && props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE ? <>             \r\n                                            \r\n                            <FormSelectSearch\r\n                                        name={\"ncoareporttypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_COAREPORTTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.coaReportTypeList || []}\r\n                                        optionId={\"ncoareporttypecode\"}\r\n                                        optionValue={\"scoareporttypename\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"ncoareporttypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncoareporttypecode\")}                               \r\n                                />                             */}\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?<>\r\n                                <FormSelectSearch\r\n                                        name={\"nreportdecisiontypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_DECISIONTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.decisionTypeList || []}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nreportdecisiontypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nreportdecisiontypecode\")}                               \r\n                                />   */}\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"].isneedsection === transactionStatus.YES ? \r\n                                <FormSelectSearch\r\n                                        name={\"nsectioncode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_LAB\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                        options={ props.sectionList || []}\r\n                                        optionId={\"nsectioncode\"}\r\n                                        optionValue={\"ssectionname\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nsectioncode\"]:\"\"}\r\n                                        isMandatory={false}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nsectioncode\")}                               \r\n                                />  \r\n                                : \"\"}  */}\r\n                                {/* </> \r\n                                 :\"\"}      */}\r\n\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ? \r\n                            <><FormSelectSearch\r\n                                                name={\"ncertificatetypecode\"}\r\n                                                formLabel={ props.intl.formatMessage({ id:\"IDS_CERTIFICATETYPE\"})}                              \r\n                                                placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                                options={ props.certificateTypeList || []}\r\n                                                value = { props.selectedRecord ? props.selectedRecord[\"ncertificatetypecode\"]:\"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}                                \r\n                                                isDisabled={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange = {(event)=> props.onComboChange(event, \"ncertificatetypecode\")}                               \r\n                                        /> \r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                        name={\"sbatchdisplayname\"}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id:\"sbatchdisplayname\"})}\r\n                                        value ={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                        isMandatory = {false}\r\n                                        required={false}\r\n                                        readOnly={true}\r\n                                        onChange={(event)=> props.onInputOnChange(event)}\r\n                                />  </>  \r\n                                         :\"\"}                   \r\n                       \r\n                       </>\r\n                    :\"\"} */}\r\n\r\n\r\n                                <CustomSwitch\r\n                                        name={\"nisplsqlquery\"}\r\n                                        type=\"switch\"\r\n                                        label={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                        value={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                />\r\n                                 {props.reportMaster.nreporttypecode &&\r\n                                        (props.reportMaster.nreporttypecode === REPORTTYPE.CONTROLBASED\r\n                                                //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\r\n                                        ) ?\r\n\r\n                                <Col md={12}>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"Addviewer\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_VIEWER\" })}\r\n                                                inline={true}\r\n                                                value='viewer'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"viewer\" ? true : false}\r\n                                                disabled={props.operation == \"update\" ? ' ' : disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddPDF\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_PDF\" })}\r\n                                                inline={true}\r\n                                                value='pdf'\r\n                                                defaultChecked\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                //checked={sreportformat === \"pdf\" ? true : false}\r\n                                                checked={sreportformatdetail === \"pdf\" ? true : sreportformatdetail === undefined ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"Addhtml\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_HTML\" })}\r\n                                                inline={true}\r\n                                                value='html'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"html\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddXLS\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_XLS\" })}\r\n                                                inline={true}\r\n                                                value='xls'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"xls\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddDOC\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_DOC\" })}\r\n                                                inline={true}\r\n                                                value='doc'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"doc\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                </Col>\r\n                                : \"\"}\r\n\r\n                                <></>\r\n                                {Object.keys(props.selectedRecord).length > 0 &&\r\n                                        <DropZone\r\n                                                label={props.intl.formatMessage({ id: \"IDS_FILE\" })}\r\n                                                maxFiles={1}\r\n                                                accept=\".jrxml,.mrt\"\r\n                                                minSize={0}\r\n                                                maxSize={10}\r\n                                                fileNameLength={150}\r\n                                                onDrop={(event) => props.onDropImage(event, \"sfilename\")}\r\n                                                multiple={false}\r\n                                                isMandatory={true}\r\n                                                editFiles={props.selectedRecord ? props.selectedRecord : {}}\r\n                                                attachmentTypeCode={props.operation === \"update\" ? attachmentType.OTHERS : \"\"}\r\n                                                fileName=\"sfilename\"\r\n                                                deleteAttachment={() => props.deleteFile(\"sfilename\")}\r\n                                                actionType={props.actionType}\r\n                                        />\r\n\r\n                                }\r\n                        </Col>\r\n\r\n\r\n                </Row>\r\n        )\r\n}\r\n\r\nexport default injectIntl(AddReportDetail);"]},"metadata":{},"sourceType":"module"}