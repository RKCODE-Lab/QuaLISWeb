{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { sortData } from \"../components/CommonScript\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSubSampleBySample(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getSubSampleBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n      let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\n      releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseSubSample,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseSubSample,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\n  let npreregno = \"\";\n  selectedSampleData.map((item, i) => {\n    let s = \"\";\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSampleData.length) {\n      if (i < selectedSampleData.length - 1) {\n        s = \",\";\n      }\n\n      npreregno = npreregno + s;\n    } else {\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSample\", {\n      npreregno: npreregno,\n      nregtypecode: selectedSampleData[0].nregtypecode,\n      nregsubtypecode: selectedSampleData[0].nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  selectedSubSampleData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSubSampleData.length) {\n      if (i < selectedSubSampleData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSubSample\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBySample(methodParam, kjkj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getTestBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.viewRow.npreregno,\n      ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let releaseTest = methodParam.masterData.releaseTest || new Map();\n      releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseTest,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseTest,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  let ntransactiontestcode = \"\";\n  selectedTestData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n    ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\n\n    if (i < selectedTestData.length) {\n      if (i < selectedTestData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n      ntransactiontestcode = ntransactiontestcode + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n      ntransactiontestcode = item.ntransactiontestcode;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedTest\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      ntransactiontestcode: ntransactiontestcode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \n//    let ntransactionsamplecode = \"\"\n//    let npreregno = \"\"\n//     let ntransactiontestcode = \"\" \n//     let bFlag = \"\" \n//     if (TestArray !== undefined) {\n//         TestArray.map(test => {\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\n//             npreregno += test.npreregno + ',';\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\n//         })\n//         TestArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"3\"\n//         }\n//     }   \n//     if (SubSampleArray !== undefined) {\n//         SubSampleArray.map(SubSample => {\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\n//             npreregno += SubSample.npreregno + ',';\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\n//             SubSampleArray = {\n//                 ntransactionsamplecode: ntransactionsamplecode,\n//                 npreregno: npreregno,\n//                 ntransactiontestcode: ntransactiontestcode,\n//                 bFlag:\"2\"\n//             }\n//         })\n//     }\n//     if (SampleArray !== undefined) {\n//         SampleArray.map(Sample => {\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\n//             npreregno += Sample.npreregno + ',';\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\n//         })\n//         SampleArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"1\"\n//         }\n//     }\n//     let allNpreregno = []\n//     if (SampleArray1 !== undefined) {\n//         SampleArray1.map(temp => {\n//             allNpreregno += temp + ','\n//         })\n//     }\n//     let allNtransactionsamplecode = []\n//     if (SubSampleArray1 !== undefined) {\n//         SubSampleArray1.map(temp => {\n//             allNtransactionsamplecode += temp + ','\n//         })\n//     }\n//     let allNtransactiontestcode = []\n//     if (TestArray1 !== undefined) {\n//         TestArray1.map(temp => {\n//             allNtransactiontestcode += temp + ','\n//         })\n//     }\n//     return function (dispatch) {  \n//     dispatch(initRequest(true));\n//     return rsapi.post(\"coarelease/updateStatus\", \n//         {\n//             SampleArray:SampleArray,\n//             SubSampleArray:SubSampleArray,\n//             TestArray: TestArray,\n//             userinfo: userInfo,\n//             allNtransactionsamplecode: allNtransactionsamplecode,\n//             allNtransactiontestcode: allNtransactiontestcode,\n//             allNpreregno:allNpreregno\n//         })\n//     .then(response=>{ \n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \n//        let releaseTest = Data1.releaseTest || new Map();           \n//        releaseSubSample = Data1.releaseSubSample || new Map();           \n//              releaseTest = Data1.releaseTest || new Map();\n// if(response.data.body[\"cFlag\"]===\"3\"){\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n//        }\n//       //  else {\n//         if(response.data.body[\"cFlag\"]===\"2\"){\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n//         }\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\n//             sortData(masterData);\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\n//                 data:releaseSubSample,releaseTest,\n//                       //  dataState:dataState,\n//                         loading:false\n//                     }});\n//         })\n//         .catch(error=>{\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })        \n//     }\n// }\n\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1, SampleArray, SubSampleArray, TestArray, Data1, k) {\n  let ntransactionsamplecode = \"\";\n  let ntransactiontestcode = \"\";\n  let npreregno = \"\";\n  let bFlag = \"\";\n\n  if (TestArray !== undefined) {\n    let sample = SampleArray1.filter((c, index) => {\n      return SampleArray1.indexOf(c) === index;\n    });\n    let subsample = SubSampleArray1.filter((c, index) => {\n      return SubSampleArray1.indexOf(c) === index;\n    });\n    let test = TestArray1.filter((c, index) => {\n      return TestArray1.indexOf(c) === index;\n    });\n    npreregno = sample.map(x => x).join(\",\");\n    ntransactionsamplecode = subsample.map(x => x).join(\",\");\n    ntransactiontestcode = test.map(x => x).join(\",\");\n    TestArray = {\n      ntransactionsamplecode: ntransactionsamplecode,\n      npreregno: npreregno,\n      ntransactiontestcode: ntransactiontestcode,\n      bFlag: \"3\"\n    };\n  }\n\n  return function (dispatch) {\n    if (TestArray !== undefined || TestArray.length && TestArray.length !== 0) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"coarelease/updateStatus\", {\n        TestArray: TestArray,\n        userinfo: userInfo\n      }).then(response => {\n        if (response.data.statusCodeValue !== 200) {\n          toast.warn(intl.formatMessage({\n            id: response.data.body\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        } else {\n          // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n          let releaseSubSample = Data1.releaseSubSample || new Map();\n          let releaseTest = Data1.releaseTest || new Map();\n          releaseSubSample = Data1.releaseSubSample || new Map();\n          releaseTest = Data1.releaseTest || new Map();\n          releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n          releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n          let masterData = { ...Data1,\n            releaseSubSample,\n            releaseTest,\n            ...response.data.body\n          };\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              data: releaseSubSample,\n              releaseTest,\n              //  dataState:dataState,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\n      }));\n    }\n  };\n}\nexport function getReleaseRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"coarelease/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //toast.warn(\"PleaseF Select All the Values in Filter\");\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleaseApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/COAReleaseAction.js"],"names":["toast","intl","sortData","rsapi","initRequest","DEFAULT_RETURN","getSubSampleBySample","methodParam","dispatch","post","nsitecode","npreregno","primaryKeyValue","userinfo","userInfo","then","response","releaseSubSample","masterData","Map","set","parseInt","Object","keys","data","values","type","payload","dataState","loading","catch","error","status","message","warn","getReleaseSelectedSamples","controlId","selectedSampleData","flag","map","item","i","s","length","nregtypecode","nregsubtypecode","console","log","getReleaseSelectedSubSamples","selectedSubSampleData","ntransactionsamplecode","getTestBySample","kjkj","viewRow","releaseTest","getReleaseSelectedTest","selectedTestData","ntransactiontestcode","getReleaseSelectedSampleSubSampleTest","control","SampleArray1","SubSampleArray1","TestArray1","SampleArray","SubSampleArray","TestArray","Data1","k","bFlag","undefined","sample","filter","c","index","indexOf","subsample","test","x","join","statusCodeValue","formatMessage","id","body","getReleaseRegistrationType","inputData","responseData","SampleTypeValue","getReleaseRegistrationSubType","RegTypeValue","getReleaseFilterStatus","RegSubTypeValue","getReleaseFilterBasedTest","napprovalversioncode","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","getReleaseApprovalVersion","inputParam","getReleaseSample","searchSampleRef","current","value","searchSubSampleRef","searchTestRef","showFilter","skip","take","testskip","testtake","resultDataState","sort","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { sortData } from \"../components/CommonScript\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSubSampleBySample(methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getSubSampleBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.primaryKeyValue,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n                let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\r\n\r\n                releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseSubSample, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data, releaseSubSample,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\r\n    let npreregno = \"\"\r\n    selectedSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        npreregno = npreregno + item.npreregno;\r\n        if (i < selectedSampleData.length) {\r\n            if (i < selectedSampleData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            npreregno = npreregno + s;\r\n        }\r\n        else {\r\n            npreregno = item.npreregno;\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSample\",\r\n            {\r\n                npreregno: npreregno,\r\n                nregtypecode: selectedSampleData[0].nregtypecode,\r\n                nregsubtypecode: selectedSampleData[0].nregsubtypecode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n\r\n    selectedSubSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n\r\n        if (i < selectedSubSampleData.length) {\r\n            if (i < selectedSubSampleData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSubSample\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestBySample(methodParam, kjkj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getTestBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.viewRow.npreregno,\r\n                ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let releaseTest = methodParam.masterData.releaseTest || new Map();\r\n                releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseTest, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data,\r\n                        releaseTest,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n    let ntransactiontestcode = \"\"\r\n\r\n    selectedTestData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n        ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\r\n\r\n        if (i < selectedTestData.length) {\r\n            if (i < selectedTestData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n            ntransactiontestcode = ntransactiontestcode + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n            ntransactiontestcode = item.ntransactiontestcode;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedTest\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n                ntransactiontestcode: ntransactiontestcode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \r\n//    let ntransactionsamplecode = \"\"\r\n//    let npreregno = \"\"\r\n//     let ntransactiontestcode = \"\" \r\n//     let bFlag = \"\" \r\n//     if (TestArray !== undefined) {\r\n//         TestArray.map(test => {\r\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\r\n//             npreregno += test.npreregno + ',';\r\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\r\n//         })\r\n//         TestArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"3\"\r\n\r\n//         }\r\n//     }   \r\n//     if (SubSampleArray !== undefined) {\r\n//         SubSampleArray.map(SubSample => {\r\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\r\n//             npreregno += SubSample.npreregno + ',';\r\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\r\n//             SubSampleArray = {\r\n//                 ntransactionsamplecode: ntransactionsamplecode,\r\n//                 npreregno: npreregno,\r\n//                 ntransactiontestcode: ntransactiontestcode,\r\n//                 bFlag:\"2\"\r\n\r\n//             }\r\n//         })\r\n//     }\r\n//     if (SampleArray !== undefined) {\r\n\r\n//         SampleArray.map(Sample => {\r\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\r\n//             npreregno += Sample.npreregno + ',';\r\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\r\n\r\n//         })\r\n//         SampleArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"1\"\r\n\r\n//         }\r\n//     }\r\n//     let allNpreregno = []\r\n//     if (SampleArray1 !== undefined) {\r\n\r\n//         SampleArray1.map(temp => {\r\n//             allNpreregno += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactionsamplecode = []\r\n//     if (SubSampleArray1 !== undefined) {\r\n\r\n//         SubSampleArray1.map(temp => {\r\n//             allNtransactionsamplecode += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactiontestcode = []\r\n//     if (TestArray1 !== undefined) {\r\n\r\n//         TestArray1.map(temp => {\r\n//             allNtransactiontestcode += temp + ','\r\n//         })\r\n//     }\r\n\r\n//     return function (dispatch) {  \r\n//     dispatch(initRequest(true));\r\n//     return rsapi.post(\"coarelease/updateStatus\", \r\n//         {\r\n//             SampleArray:SampleArray,\r\n//             SubSampleArray:SubSampleArray,\r\n//             TestArray: TestArray,\r\n//             userinfo: userInfo,\r\n//             allNtransactionsamplecode: allNtransactionsamplecode,\r\n//             allNtransactiontestcode: allNtransactiontestcode,\r\n//             allNpreregno:allNpreregno\r\n//         })\r\n//     .then(response=>{ \r\n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \r\n//        let releaseTest = Data1.releaseTest || new Map();           \r\n//        releaseSubSample = Data1.releaseSubSample || new Map();           \r\n\r\n//              releaseTest = Data1.releaseTest || new Map();\r\n// if(response.data.body[\"cFlag\"]===\"3\"){\r\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n//        }\r\n//       //  else {\r\n//         if(response.data.body[\"cFlag\"]===\"2\"){\r\n\r\n\r\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n\r\n//         }\r\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\r\n\r\n//             sortData(masterData);\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n//                 data:releaseSubSample,releaseTest,\r\n//                       //  dataState:dataState,\r\n//                         loading:false\r\n//                     }});\r\n//         })\r\n//         .catch(error=>{\r\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n//         })        \r\n//     }\r\n// }\r\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1, SampleArray, SubSampleArray, TestArray, Data1, k) {\r\n    let ntransactionsamplecode = \"\"\r\n    let ntransactiontestcode = \"\"\r\n    let npreregno = \"\"\r\n\r\n    let bFlag = \"\"\r\n    if (TestArray !== undefined) {\r\n        let sample = SampleArray1.filter((c, index) => {\r\n            return SampleArray1.indexOf(c) === index;\r\n        });\r\n        let subsample = SubSampleArray1.filter((c, index) => {\r\n            return SubSampleArray1.indexOf(c) === index;\r\n        });\r\n        let test = TestArray1.filter((c, index) => {\r\n            return TestArray1.indexOf(c) === index;\r\n        });\r\n        npreregno = sample.map(x => x).join(\",\")\r\n        ntransactionsamplecode = subsample.map(x => x).join(\",\")\r\n        ntransactiontestcode = test.map(x => x).join(\",\")\r\n\r\n        TestArray = {\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            npreregno: npreregno,\r\n            ntransactiontestcode: ntransactiontestcode,\r\n            bFlag: \"3\"\r\n\r\n        }\r\n    }\r\n\r\n    return function (dispatch) {\r\n        if (TestArray !== undefined || TestArray.length&&TestArray.length!==0) {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"coarelease/updateStatus\",\r\n                {\r\n                    TestArray: TestArray,\r\n                    userinfo: userInfo,\r\n                })\r\n                .then(response => {\r\n                    if (response.data.statusCodeValue !== 200) {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response.data.body\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n        \r\n                        \r\n                    }\r\n                    else {\r\n                        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n                        let releaseSubSample = Data1.releaseSubSample || new Map();\r\n                        let releaseTest = Data1.releaseTest || new Map();\r\n                        releaseSubSample = Data1.releaseSubSample || new Map();\r\n\r\n                        releaseTest = Data1.releaseTest || new Map();\r\n                        releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n\r\n\r\n\r\n                        releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n\r\n\r\n                        let masterData = { ...Data1, releaseSubSample, releaseTest, ...response.data.body };\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                data: releaseSubSample, releaseTest,\r\n                                //  dataState:dataState,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                    })\r\n        \r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getReleaseRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"coarelease/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            //toast.warn(\"PleaseF Select All the Values in Filter\");\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleaseApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}