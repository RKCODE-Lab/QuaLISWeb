{"ast":null,"code":"import { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport rsapi from '../rsapi';\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat, ageCalculate, formatInputDate } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nimport { getLeftPosition } from '@progress/kendo-react-tooltip/dist/npm/utils';\nexport function getPatientDetail(patient, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/getPatient\", {\n      spatientid: patient.spatientid,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientComboService(inputParam) {\n  return function (dispatch) {\n    const genderService = rsapi.post(\"patient/getGender\", {\n      userinfo: inputParam.userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.userInfo\n    }); // const cityService = rsapi.post(\"patient/getCity\", {userinfo:inputParam.userInfo});\n\n    const countryService = rsapi.post(\"patient/getCountry\", {\n      userinfo: inputParam.userInfo\n    });\n    const regionService = rsapi.post(\"patient/getRegion\", {\n      userinfo: inputParam.userInfo\n    });\n    let urlArray = [];\n\n    if (inputParam.operation === \"create\") {\n      urlArray = [genderService, UTCtimeZoneService, countryService, regionService];\n    } else {\n      const patientById = rsapi.post(\"patient/getActivePatientById\", {\n        [inputParam.primaryKeyName]: inputParam.masterData.SelectedPatient[inputParam.primaryKeyName],\n        \"userinfo\": inputParam.userInfo\n      });\n      const citySer = rsapi.post(\"/patient/getCity\", {\n        \"userinfo\": inputParam.userInfo,\n        \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcode\n      });\n      const districtSer = rsapi.post(\"/patient/getDistrict\", {\n        \"userinfo\": inputParam.userInfo,\n        \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncode\n      });\n      const citySertemp = rsapi.post(\"/patient/getCity\", {\n        \"userinfo\": inputParam.userInfo,\n        \"ndistrictcode\": inputParam.masterData.SelectedPatient.ndistrictcodetemp\n      });\n      const districtSertemp = rsapi.post(\"/patient/getDistrict\", {\n        \"userinfo\": inputParam.userInfo,\n        \"nregioncode\": inputParam.masterData.SelectedPatient.nregioncodetemp\n      });\n      urlArray = [genderService, UTCtimeZoneService, countryService, regionService, patientById, citySer, districtSer, citySertemp, districtSertemp];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let gender = [];\n      let city = [];\n      let country = [];\n      let region = [];\n      let regionTemp = [];\n      let districtTemp = [];\n      let district = [];\n      let cityTemp = [];\n      let districtList = [];\n      let cityList = [];\n      let cityListTemp = [];\n      let districtListTemp = [];\n      const genderMap = constructOptionList(response[0].data['genderList'] || [], \"ngendercode\", \"sgendername\", undefined, undefined, false);\n      const genderList = genderMap.get(\"OptionList\");\n      const countryMap = constructOptionList(response[2].data['countryList'] || [], \"ncountrycode\", \"scountryname\", undefined, undefined, false);\n      const countryList = countryMap.get(\"OptionList\");\n      const regionMap = constructOptionList(response[3].data['regionList'] || [], \"nregioncode\", \"sregionname\", undefined, undefined, false);\n      const regionList = regionMap.get(\"OptionList\");\n\n      if (inputParam.operation === \"update\") {\n        const cityserMap = constructOptionList(response[5].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n        cityList = cityserMap.get(\"OptionList\");\n        const distMap = constructOptionList(response[6].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n        districtList = distMap.get(\"OptionList\");\n        const cityserTempMap = constructOptionList(response[7].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n        cityListTemp = cityserTempMap.get(\"OptionList\");\n        const distTempMap = constructOptionList(response[8].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n        districtListTemp = distTempMap.get(\"OptionList\");\n      }\n\n      let selectedRecord = {};\n      const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n\n      if (inputParam.operation === \"update\") {\n        selectedRecord = response[4].data;\n        gender.push({\n          \"value\": response[4].data[\"ngendercode\"],\n          \"label\": response[4].data[\"sgendername\"]\n        });\n        city.push({\n          \"value\": response[4].data[\"ncitycode\"],\n          \"label\": response[4].data[\"scityname\"]\n        });\n        country.push({\n          \"value\": response[4].data[\"ncountrycode\"],\n          \"label\": response[4].data[\"scountryname\"]\n        });\n        region.push({\n          \"value\": response[4].data[\"nregioncode\"],\n          \"label\": response[4].data[\"sregionname\"]\n        });\n        regionTemp.push({\n          \"value\": response[4].data[\"nregioncodetemp\"],\n          \"label\": response[4].data[\"sregionnametemp\"]\n        });\n        districtTemp.push({\n          \"value\": response[4].data[\"ndistrictcodetemp\"],\n          \"label\": response[4].data[\"sdistrictnametemp\"]\n        });\n        district.push({\n          \"value\": response[4].data[\"ndistrictcode\"],\n          \"label\": response[4].data[\"sdistrictname\"]\n        });\n        cityTemp.push({\n          \"value\": response[4].data[\"ncitycodetemp\"],\n          \"label\": response[4].data[\"scitynametemp\"]\n        });\n        selectedRecord[\"ngendercode\"] = gender[0];\n        selectedRecord[\"ncitycode\"] = city[0];\n        selectedRecord[\"ncountrycode\"] = country[0];\n        selectedRecord[\"nregioncode\"] = region[0];\n        selectedRecord[\"nregioncodetemp\"] = regionTemp[0];\n        selectedRecord[\"ndistrictcodetemp\"] = districtTemp[0];\n        selectedRecord[\"ndistrictcode\"] = district[0];\n        selectedRecord[\"ncitycodetemp\"] = cityTemp[0];\n\n        if (selectedRecord[\"ddob\"] !== null) {\n          selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\n        }\n      } else {\n        selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\");\n        selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n        selectedRecord[\"sage\"] = ageCalculate(selectedRecord[\"ddob\"]);\n        selectedRecord[\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedRecord[\"today\"] = inputParam.userInfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          genderList,\n          cityListTemp,\n          districtListTemp,\n          districtList,\n          cityList,\n          countryList,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false,\n          currentTime,\n          regionList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientReport(patient, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/patientReportGenerate\", {\n      patient,\n      userinfo: userInfo,\n      ncontrolcode: ncontrolCode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientDetailsByFilterQuery(inputParam, masterData, SelectedPatientCaseType) {\n  return function (dispatch) {\n    let URL = [];\n    let filterData;\n\n    if (inputParam.displayname === \"Filter\") {\n      filterData = rsapi.post(\"/patient/getFilterByDate\", {\n        \"userinfo\": inputParam.inputData.userinfo,\n        \"formdate\": inputParam.inputData.formdate,\n        \"todate\": inputParam.inputData.todate,\n        \"casetype\": inputParam.inputData.casetype\n      });\n    } else {\n      filterData = rsapi.post(\"/patient/filterByPatient\", {\n        \"filterquery\": inputParam.inputData.filterquery,\n        \"userinfo\": inputParam.inputData.userinfo\n      });\n    }\n\n    URL = [filterData];\n    dispatch(initRequest(true));\n    Axios.all(URL).then(response => {\n      let slideResult = response[0].data.PatientList;\n      let selectedRecord = response[0].data.PatientList;\n      selectedRecord[\"fromdate\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterFromdate);\n      selectedRecord[\"ToDay\"] = rearrangeDateFormat(inputParam.inputData.userinfo, response[0].data.filterToDay);\n      masterData = { ...masterData,\n        SelectedPatientCaseType: SelectedPatientCaseType,\n        ...response[0].data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20,\n          slideResult: false,\n          openModal: false,\n          openSolidAdvFilter: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getDistrictComboServices(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/patient/getDistrict\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nregioncode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let districtList;\n      const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n      districtList = districtMap.get(\"OptionList\");\n      let districtListTemp;\n      const districtMapTemp = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\", \"sdistrictname\", undefined, undefined, false);\n      districtListTemp = districtMapTemp.get(\"OptionList\");\n      const cityList = undefined;\n      const cityListTemp = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [methodParam.inputData.optionlistname]: districtList,\n          [methodParam.inputData.optionlistname]: districtListTemp,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          cityList,\n          cityListTemp\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCityComboServices(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/patient/getCity\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"ndistrictcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      const cityMap = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n      const cityList = cityMap.get(\"OptionList\");\n      const cityMapTemp = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\", \"scityname\", undefined, undefined, false);\n      const cityListTemp = cityMapTemp.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [methodParam.inputData.optionlistname]: cityList,\n          [methodParam.inputData.optionlistname]: cityListTemp,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/PatientAction.js"],"names":["toast","Axios","rsapi","initRequest","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","ageCalculate","formatInputDate","intl","transactionStatus","getLeftPosition","getPatientDetail","patient","userInfo","masterData","dispatch","post","spatientid","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getPatientComboService","inputParam","genderService","UTCtimeZoneService","countryService","regionService","urlArray","patientById","primaryKeyName","SelectedPatient","citySer","ndistrictcode","districtSer","nregioncode","citySertemp","ndistrictcodetemp","districtSertemp","nregioncodetemp","all","gender","city","country","region","regionTemp","districtTemp","district","cityTemp","districtList","cityList","cityListTemp","districtListTemp","genderMap","genderList","get","countryMap","countryList","regionMap","regionList","cityserMap","distMap","cityserTempMap","distTempMap","selectedRecord","currentTime","push","NO","screenName","openModal","ncontrolCode","ncontrolcode","getPatientReport","loadEsign","document","getElementById","setAttribute","filepath","click","getPatientDetailsByFilterQuery","SelectedPatientCaseType","URL","filterData","displayname","inputData","formdate","todate","casetype","filterquery","slideResult","PatientList","filterFromdate","filterToDay","searchedData","skip","take","openSolidAdvFilter","formatMessage","id","getDistrictComboServices","methodParam","primarykey","districtMap","districtMapTemp","optionlistname","dataState","getCityComboServices","cityMap","cityMapTemp"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, constructOptionList, rearrangeDateFormat, ageCalculate,formatInputDate} from '../components/CommonScript';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { getLeftPosition } from '@progress/kendo-react-tooltip/dist/npm/utils';\r\n\r\nexport function getPatientDetail (patient, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"patient/getPatient\", {spatientid:patient.spatientid, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function getPatientComboService(inputParam){ \r\n    return function (dispatch) {    \r\n  \r\n            const genderService = rsapi.post(\"patient/getGender\", {userinfo:inputParam.userInfo});\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });\r\n           // const cityService = rsapi.post(\"patient/getCity\", {userinfo:inputParam.userInfo});\r\n            const countryService = rsapi.post(\"patient/getCountry\", { userinfo: inputParam.userInfo });\r\n            const regionService = rsapi.post(\"patient/getRegion\", { userinfo: inputParam.userInfo });\r\n                 \r\n            let urlArray = [];\r\n            if (inputParam.operation === \"create\"){\r\n               urlArray = [genderService, UTCtimeZoneService,countryService,regionService];\r\n            }\r\n            else{                    \r\n                const patientById =  rsapi.post(\"patient/getActivePatientById\", \r\n                                { [inputParam.primaryKeyName] :inputParam.masterData.SelectedPatient[inputParam.primaryKeyName] , \r\n                                    \"userinfo\": inputParam.userInfo} );\r\n                const citySer = rsapi.post(\"/patient/getCity\", { \"userinfo\":inputParam.userInfo, \"ndistrictcode\":  inputParam.masterData.SelectedPatient.ndistrictcode  });\r\n                const districtSer=rsapi.post(\"/patient/getDistrict\", { \"userinfo\": inputParam.userInfo, \"nregioncode\":inputParam.masterData.SelectedPatient.nregioncode  })\r\n                const citySertemp = rsapi.post(\"/patient/getCity\", { \"userinfo\":inputParam.userInfo, \"ndistrictcode\":  inputParam.masterData.SelectedPatient.ndistrictcodetemp  });\r\n                const districtSertemp=rsapi.post(\"/patient/getDistrict\", { \"userinfo\": inputParam.userInfo, \"nregioncode\":inputParam.masterData.SelectedPatient.nregioncodetemp  });         \r\n                urlArray = [genderService,UTCtimeZoneService,countryService,regionService, patientById,citySer,districtSer,citySertemp,districtSertemp];\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response=>{                   \r\n                    let gender =[];\r\n                    let city =[];\r\n                    let country =[];\r\n                    let region =[];\r\n                    let regionTemp =[];\r\n                    let districtTemp=[];\r\n                    let district=[];\r\n                    let cityTemp=[];\r\n                   let districtList=[];\r\n                   let cityList=[];\r\n                   let cityListTemp=[];\r\n                   let districtListTemp=[];\r\n                    const genderMap = constructOptionList(response[0].data['genderList'] || [], \"ngendercode\",\r\n                                          \"sgendername\", undefined, undefined, false);               \r\n                    const genderList = genderMap.get(\"OptionList\");      \r\n                    \r\n                    const countryMap = constructOptionList(response[2].data['countryList'] || [], \"ncountrycode\",\r\n                                          \"scountryname\", undefined, undefined, false);               \r\n                    const countryList = countryMap.get(\"OptionList\");  \r\n                    \r\n                    const regionMap = constructOptionList(response[3].data['regionList'] || [], \"nregioncode\",\r\n                                             \"sregionname\", undefined, undefined, false);               \r\n                    const regionList = regionMap.get(\"OptionList\"); \r\n                    if (inputParam.operation === \"update\"){\r\n                        const cityserMap = constructOptionList(response[5].data['cityList'] || [], \"ncitycode\",\r\n                        \"scityname\", undefined, undefined, false);               \r\n                               cityList = cityserMap.get(\"OptionList\");  \r\n  \r\n                        const distMap = constructOptionList(response[6].data['districtList'] || [], \"ndistrictcode\",\r\n                           \"sdistrictname\", undefined, undefined, false); \r\n                            districtList = distMap.get(\"OptionList\"); \r\n\r\n                        const cityserTempMap = constructOptionList(response[7].data['cityList'] || [], \"ncitycode\",\r\n                        \"scityname\", undefined, undefined, false);               \r\n                        cityListTemp = cityserTempMap.get(\"OptionList\");  \r\n  \r\n                        const distTempMap = constructOptionList(response[8].data['districtList'] || [], \"ndistrictcode\",\r\n                           \"sdistrictname\", undefined, undefined, false); \r\n                           districtListTemp = distTempMap.get(\"OptionList\"); \r\n                    }\r\n\r\n                    let selectedRecord =  {};\r\n                    const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                   \r\n                    if (inputParam.operation === \"update\"){\r\n                        selectedRecord = response[4].data;\r\n                       \r\n                        gender.push({\"value\" : response[4].data[\"ngendercode\"], \"label\" : response[4].data[\"sgendername\"]});\r\n                        city.push({\"value\" : response[4].data[\"ncitycode\"], \"label\" : response[4].data[\"scityname\"]});  \r\n                        country.push({\"value\" : response[4].data[\"ncountrycode\"], \"label\" : response[4].data[\"scountryname\"]});   \r\n                        region.push({\"value\" : response[4].data[\"nregioncode\"], \"label\" : response[4].data[\"sregionname\"]}); \r\n                        regionTemp.push({\"value\" : response[4].data[\"nregioncodetemp\"], \"label\" : response[4].data[\"sregionnametemp\"]});    \r\n                        districtTemp.push({\"value\" : response[4].data[\"ndistrictcodetemp\"], \"label\" : response[4].data[\"sdistrictnametemp\"]});  \r\n                        district.push({\"value\" : response[4].data[\"ndistrictcode\"], \"label\" : response[4].data[\"sdistrictname\"]}); \r\n                        cityTemp.push({\"value\" : response[4].data[\"ncitycodetemp\"], \"label\" : response[4].data[\"scitynametemp\"]});                                   \r\n                        selectedRecord[\"ngendercode\"] = gender[0];\r\n                        selectedRecord[\"ncitycode\"] = city[0];\r\n                        selectedRecord[\"ncountrycode\"] = country[0];\r\n                        selectedRecord[\"nregioncode\"] = region[0];\r\n                        selectedRecord[\"nregioncodetemp\"] = regionTemp[0];\r\n                        selectedRecord[\"ndistrictcodetemp\"] = districtTemp[0];\r\n                        selectedRecord[\"ndistrictcode\"] = district[0];\r\n                        selectedRecord[\"ncitycodetemp\"] = cityTemp[0];\r\n\r\n                        if (selectedRecord[\"ddob\"] !== null){\r\n                            selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\r\n                        }                                          \r\n                    }\r\n                    else{        \r\n                      \r\n                        selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\");  \r\n                        selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                        selectedRecord[\"sage\"]  = ageCalculate(selectedRecord[\"ddob\"])\r\n                        selectedRecord[\"nneedcurrentaddress\"]  =transactionStatus.NO;\r\n                        selectedRecord[\"today\"]  =inputParam.userInfo;\r\n                    }\r\n                  \r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                                                            genderList,  \r\n                                                            cityListTemp,\r\n                                                            districtListTemp,\r\n                                                            districtList,\r\n                                                            cityList,\r\n                                                            countryList,                         \r\n                                                            operation:inputParam.operation, \r\n                                                            screenName:inputParam.screenName,   \r\n                                                            selectedRecord,\r\n                                                            openModal : true,\r\n                                                            ncontrolCode:inputParam.ncontrolcode,\r\n                                                            loading:false,\r\n                                                            currentTime,\r\n                                                            regionList\r\n                                                            }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n  \r\n}}\r\n\r\n\r\nexport function getPatientReport (patient, userInfo, ncontrolCode) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"patient/patientReportGenerate\", {patient, userinfo:userInfo, \r\n                                                        ncontrolcode:ncontrolCode})\r\n    .then(response => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false, \r\n            loadEsign: false, openModal: false } })\r\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n        document.getElementById(\"download_data\").click();\r\n    })\r\n    .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n            toast.error(error.message);\r\n        }\r\n        else {\r\n            toast.warn(error.response.data);\r\n        }\r\n    }) \r\n}}\r\n  \r\nexport function getPatientDetailsByFilterQuery(inputParam,masterData,SelectedPatientCaseType) {\r\n    return function (dispatch) {   \r\n        let URL = [];\r\n        let filterData;\r\n        if(inputParam.displayname===\"Filter\"){\r\n            filterData= rsapi.post(\"/patient/getFilterByDate\",{ \"userinfo\": inputParam.inputData.userinfo, \r\n            \"formdate\":inputParam.inputData.formdate, \"todate\":inputParam.inputData.todate,\"casetype\":inputParam.inputData.casetype})\r\n        }else{\r\n            filterData=  rsapi.post(\"/patient/filterByPatient\",{\"filterquery\":inputParam.inputData.filterquery \r\n            , \"userinfo\": inputParam.inputData.userinfo})\r\n        }\r\n\r\n        URL=[filterData];\r\n        dispatch(initRequest(true));\r\n        Axios.all(URL)\r\n            .then(response => {\r\n               let slideResult=response[0].data.PatientList;\r\n               let selectedRecord =response[0].data.PatientList;\r\n                 selectedRecord[\"fromdate\"]=rearrangeDateFormat(inputParam.inputData.userinfo,response[0].data.filterFromdate);\r\n                selectedRecord[\"ToDay\"]=rearrangeDateFormat(inputParam.inputData.userinfo,response[0].data.filterToDay);\r\n                masterData = {\r\n                    ...masterData,SelectedPatientCaseType:SelectedPatientCaseType,\r\n                    ...response[0].data,searchedData: undefined \r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {masterData,\r\n                         loading: false, skip: 0, take: 20,slideResult:false,\r\n                        openModal:false,openSolidAdvFilter:false,selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getDistrictComboServices(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = []; \r\n            URL=rsapi.post(\"/patient/getDistrict\", { \"userinfo\": methodParam.inputData.userinfo, \"nregioncode\":  methodParam.inputData.primarykey  })\r\n         dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                let districtList; \r\n                const districtMap = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\",\r\n                \"sdistrictname\", undefined, undefined, false);               \r\n\r\n                  districtList = districtMap.get(\"OptionList\"); \r\n                  let districtListTemp;      \r\n                  const districtMapTemp = constructOptionList(response[0].data['districtList'] || [], \"ndistrictcode\",\r\n                  \"sdistrictname\", undefined, undefined, false);               \r\n  \r\n                    districtListTemp = districtMapTemp.get(\"OptionList\"); \r\n               \r\n                    const  cityList=undefined;\r\n                    const  cityListTemp=undefined;\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n                     {[methodParam.inputData.optionlistname]: districtList, [methodParam.inputData.optionlistname]: districtListTemp,\r\n                        loading: false, data: undefined, dataState: undefined ,cityList,cityListTemp} })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCityComboServices(methodParam) {\r\n    return function (dispatch) {\r\n        let URL=[];\r\n            URL = rsapi.post(\"/patient/getCity\", { \"userinfo\": methodParam.inputData.userinfo, \"ndistrictcode\":  methodParam.inputData.primarykey  })\r\n         dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                 const cityMap = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\",\r\n                 \"scityname\", undefined, undefined, false);               \r\n \r\n                 const  cityList = cityMap.get(\"OptionList\"); \r\n                 const cityMapTemp = constructOptionList(response[0].data['cityList'] || [], \"ncitycode\",\r\n                 \"scityname\", undefined, undefined, false);               \r\n \r\n                 const  cityListTemp = cityMapTemp.get(\"OptionList\"); \r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n                     { [methodParam.inputData.optionlistname]: cityList, [methodParam.inputData.optionlistname]: cityListTemp,loading: false, data: undefined, dataState: undefined } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}