{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\DashBoardHomeConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport AddDashBoardHomeConfig from '../dashboardtypes/AddDashBoardHomeConfig';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, crudMaster, getDashBoardHomePagesandTemplates, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DashBoardHomeConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleChange = (value, valueParam) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onDrop = (value, index) => {\n      if (value !== null) {\n        const data = JSON.parse(value[\"dashboardtype\"]);\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"dashboardtype\" + index] = {\n          sdashboardtypename: data.sdashboardtypename,\n          ndashboardtypecode: data.ndashboardtypecode\n        };\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.templateClick = value => {\n      if (value !== undefined) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"ndashboardhometemplatecode\"] = value;\n\n        for (let i = 1; i <= 4; i++) {\n          if (selectedRecord[\"dashboardtype\" + i] && selectedRecord[\"dashboardtype\" + i] !== undefined) {\n            selectedRecord[\"dashboardtype\" + i] = undefined;\n          }\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          \"dashboardhomepriority\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let dataState = undefined;\n      let operation = \"\";\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let data = []; // inputData[\"dashboardtype\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\n\n      inputData[\"dashboardhomepriority\"] = {\n        \"ndashboardhometemplatecode\": this.state.selectedRecord[\"ndashboardhometemplatecode\"] ? this.state.selectedRecord[\"ndashboardhometemplatecode\"] : -1\n      };\n      inputData[\"dashboardhomepriority\"][\"ndashboardhomepagecode\"] = this.state.selectedRecord[\"ndashboardhomepagecode\"] ? this.state.selectedRecord[\"ndashboardhomepagecode\"].value : -1;\n      inputData[\"dashboardhomepriority\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : -1;\n\n      if (this.props.Login.operation !== \"create\") {\n        inputData[\"dashboardhomepriority\"][\"ndashboardhomeprioritycode\"] = this.state.selectedRecord[\"ndashboardhomeprioritycode\"] ? this.state.selectedRecord[\"ndashboardhomeprioritycode\"] : -1;\n      }\n\n      for (let i = 1; i <= 4; i++) {\n        if (this.state.selectedRecord[\"dashboardtype\" + i] && this.state.selectedRecord[\"dashboardtype\" + i] !== undefined) {\n          data.push({\n            \"ndashboardtypecode\": this.state.selectedRecord[\"dashboardtype\" + i] ? this.state.selectedRecord[\"dashboardtype\" + i].ndashboardtypecode : -1,\n            \"nsorter\": i\n          });\n        }\n      }\n\n      inputData[\"dashboardhometypes\"] = data;\n\n      if (this.props.Login.operation === \"update\") {\n        operation = \"update\";\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } else {\n        operation = \"create\";\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      // addScreen: false, \n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      testCategory: [],\n      testMaster: [],\n      ntestcode: [],\n      isOpen: false,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      childTemplate: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null; //{ addScreen: props.Login.showScreen }\n  }\n\n  render() {\n    //console.log(\"this.props.Login.masterData.DashBoardHomeConfig:\", this.props.Login.masterData.DashBoardHomeConfig);\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    let primaryKeyField = \"ndashboardhomeprioritycode\"; //\"ndashboardhomepagecode\";\n\n    const addParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField,\n      undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      addId,\n      data: this.state.data\n    };\n    this.mandatoryColumnList = [{\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"nuserrolecode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PAGES\",\n      \"dataField\": \"ndashboardhomepagecode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"ndashboardhometemplatecode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_PAGES\",\n      \"dataField\": \"sdashboardhomepagename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"300px\"\n    }];\n    const editParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField: \"ndashboardhomeprioritycode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.mandatoryColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ndashboardhomeprioritycode\",\n      data: this.props.Login.masterData.DashBoardHomeConfig,\n      dataResult: process(this.props.Login.masterData.DashBoardHomeConfig || [], this.state.dataState),\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam // detailedFieldList={this.detailedFieldList}\n      // expandField=\"expanded\"\n      ,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getDashBoardHomePagesandTemplates,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.getDashBoardHomePagesandTemplates(addParam),\n      gridHeight: \"600px\",\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddDashBoardHomeConfig, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        onDrop: this.onDrop,\n        dashBoardHomePages: this.props.Login.dashBoardHomePages || [],\n        dashBoardHomeTemplate: this.props.Login.dashBoardHomeTemplate || [],\n        dashBoardType: this.props.Login.dashBoardType || [],\n        userRoleList: this.props.Login.userRoleList || [],\n        templateClick: this.templateClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.Login.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        };\n      }\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n      } else {\n        // let { dataState } = this.state;\n        // if (this.props.Login.dataState === undefined) {\n        //     dataState = { skip: 0, take: 10 }\n        // }\n        this.setState({\n          isOpen: false,\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getDashBoardHomePagesandTemplates,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(DashBoardHomeConfig));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/dashboardtypes/DashBoardHomeConfig.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","SlideOutModal","Esign","AddDashBoardHomeConfig","DataGrid","ListWrapper","callService","crudMaster","getDashBoardHomePagesandTemplates","updateStore","validateEsignCredential","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","mapStateToProps","state","Login","DashBoardHomeConfig","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","handleChange","value","valueParam","onDrop","index","JSON","parse","sdashboardtypename","ndashboardtypecode","templateClick","undefined","i","onInputOnChange","target","type","name","checked","YES","NO","deleteRecord","deleteParam","expanded","inputParam","classUrl","methodUrl","displayName","inputData","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","userinfo","onSaveClick","saveType","formRef","push","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","testCategory","testMaster","ntestcode","isOpen","controlMap","Map","childTemplate","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","editId","primaryKeyField","addParam","mandatoryColumnList","editParam","mandatoryFields","forEach","item","mandatory","dashBoardHomePages","dashBoardHomeTemplate","dashBoardType","userRoleList","componentDidUpdate","previousProps","Object","values","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport AddDashBoardHomeConfig from '../dashboardtypes/AddDashBoardHomeConfig';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { callService, crudMaster, getDashBoardHomePagesandTemplates, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DashBoardHomeConfig extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            // addScreen: false, \r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            testCategory: [], testMaster: [], ntestcode: [],\r\n            isOpen: false, controlMap: new Map(), userRoleControlRights: [],\r\n            childTemplate: []\r\n        }\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;//{ addScreen: props.Login.showScreen }\r\n    }\r\n\r\n    handleChange = (value, valueParam) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[valueParam] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onDrop = (value, index) => {\r\n\r\n        if (value !== null) {\r\n            const data = JSON.parse(value[\"dashboardtype\"]);\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[\"dashboardtype\" + index] = { sdashboardtypename: data.sdashboardtypename, ndashboardtypecode: data.ndashboardtypecode };\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    templateClick = (value) => {\r\n\r\n        if (value !== undefined) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[\"ndashboardhometemplatecode\"] = value;\r\n\r\n            for (let i = 1; i <= 4; i++) {\r\n                if (selectedRecord[\"dashboardtype\" + i] && selectedRecord[\"dashboardtype\" + i] !== undefined) {\r\n                    selectedRecord[\"dashboardtype\" + i] = undefined;\r\n                }\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    render() {\r\n\r\n        //console.log(\"this.props.Login.masterData.DashBoardHomeConfig:\", this.props.Login.masterData.DashBoardHomeConfig);\r\n        \r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        let primaryKeyField = \"ndashboardhomeprioritycode\";//\"ndashboardhomepagecode\";\r\n        \r\n        const addParam = {screenName: this.props.Login.screenName, primaryKeyField, undefined, \r\n                            operation: \"create\", inputParam: this.props.Login.inputParam, \r\n                            userInfo: this.props.Login.userInfo, addId, data: this.state.data\r\n                        }\r\n\r\n        this.mandatoryColumnList = [\r\n            { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"nuserrolecode\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_PAGES\", \"dataField\": \"ndashboardhomepagecode\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"ndashboardhometemplatecode\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n           \r\n        ];\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_PAGES\", \"dataField\": \"sdashboardhomepagename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"300px\" }\r\n        ];       \r\n        const editParam = {\r\n            screenName: this.props.Login.screenName, primaryKeyField: \"ndashboardhomeprioritycode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        const mandatoryFields = [];\r\n        this.mandatoryColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"ndashboardhomeprioritycode\"}\r\n                                    data={this.props.Login.masterData.DashBoardHomeConfig}\r\n                                    dataResult={process(this.props.Login.masterData.DashBoardHomeConfig || [], this.state.dataState)}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    // detailedFieldList={this.detailedFieldList}\r\n                                    // expandField=\"expanded\"\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getDashBoardHomePagesandTemplates}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.props.getDashBoardHomePagesandTemplates(addParam)}\r\n\r\n                                    gridHeight={\"600px\"}\r\n                                    scrollable={\"scrollable\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    pageable={true}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                //formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddDashBoardHomeConfig\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                handleChange={this.handleChange}\r\n                                onDrop={this.onDrop}\r\n                                dashBoardHomePages={this.props.Login.dashBoardHomePages || []}\r\n                                dashBoardHomeTemplate={this.props.Login.dashBoardHomeTemplate || []}\r\n                                dashBoardType={this.props.Login.dashBoardType || []}\r\n                                userRoleList={this.props.Login.userRoleList || []}\r\n                                templateClick={this.templateClick}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.Login.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            }\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({  userRoleControlRights, controlMap,});\r\n            }\r\n            else {\r\n                // let { dataState } = this.state;\r\n                // if (this.props.Login.dataState === undefined) {\r\n                //     dataState = { skip: 0, take: 10 }\r\n                // }\r\n                this.setState({ isOpen: false,dataState});\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded;\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                \"dashboardhomepriority\": deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n        let dataState = undefined;\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        let selectedId = null;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let data = [];\r\n\r\n        // inputData[\"dashboardtype\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n        inputData[\"dashboardhomepriority\"] = {\"ndashboardhometemplatecode\": this.state.selectedRecord[\"ndashboardhometemplatecode\"] ? this.state.selectedRecord[\"ndashboardhometemplatecode\"] : -1};\r\n        inputData[\"dashboardhomepriority\"][\"ndashboardhomepagecode\"] = this.state.selectedRecord[\"ndashboardhomepagecode\"] ? this.state.selectedRecord[\"ndashboardhomepagecode\"].value : -1;\r\n        inputData[\"dashboardhomepriority\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : -1;\r\n        if (this.props.Login.operation !== \"create\") {\r\n            inputData[\"dashboardhomepriority\"][\"ndashboardhomeprioritycode\"] = this.state.selectedRecord[\"ndashboardhomeprioritycode\"] ? this.state.selectedRecord[\"ndashboardhomeprioritycode\"] : -1;\r\n        }\r\n        for (let i = 1; i <= 4; i++) {\r\n\r\n            if (this.state.selectedRecord[\"dashboardtype\" + i] && this.state.selectedRecord[\"dashboardtype\" + i] !== undefined) {\r\n\r\n                data.push({\r\n                    \"ndashboardtypecode\": this.state.selectedRecord[\"dashboardtype\" + i] ? this.state.selectedRecord[\"dashboardtype\" + i].ndashboardtypecode : -1,\r\n                    \"nsorter\": i                  \r\n                });\r\n            }\r\n        }\r\n        inputData[\"dashboardhometypes\"] = data;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n\r\n            operation = \"update\";\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n        }\r\n        else {\r\n\r\n            operation = \"create\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, dataState, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, getDashBoardHomePagesandTemplates, updateStore, validateEsignCredential })(injectIntl(DashBoardHomeConfig));"]},"metadata":{},"sourceType":"module"}