{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { transactionStatus, attachmentType } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nimport { modalSave } from './ServiceAction';\nexport const changeProjectTypeFilter = (inputParam, filterProjectType) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/projectmaster/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterProjectType,\n            nfilterProjectType: inputParam.inputData.nfilterProjectType\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getuserComboServices(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getUsers\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nuserrolecode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let userList;\n      const userMap = constructOptionList(response[0].data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      userList = userMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userList,\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //Add Project Master\n\nexport const addProjectMaster = (operation, nfilterProjectMaster, userInfo, ncontrolCode, selectedRecordvalue, SelectedProjectType) => {\n  return function (dispatch) {\n    // if (nfilterProjectMaster && Object.values(nfilterProjectMaster).length > 0) {\n    if (selectedRecordvalue && selectedRecordvalue.nprojecttypecodevalue !== undefined) {\n      if (Object.values(selectedRecordvalue.nprojecttypecodevalue).length > 0 && selectedRecordvalue.nprojecttypecodevalue !== undefined && operation === 'create' || nfilterProjectMaster && nfilterProjectMaster.nprojecttypecode > 0 && operation === 'update' && nfilterProjectMaster.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        const urlArray = [];\n        let selectedRecord = {}; // selectedRecord = selectedRecordvalue ;\n\n        if (operation === \"create\" || operation === \"update\") {\n          urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\n            \"userinfo\": userInfo\n          }));\n          /*       urlArray.push(rsapi.post(\"projectmaster/getStudyDirector\", {\r\n                     \"userinfo\": userInfo\r\n                 })); */\n\n          urlArray.push(rsapi.post(\"projectmaster/getUserrole\", {\n            \"userinfo\": userInfo\n          })); // urlArray.push(rsapi.post(\"projectmaster/getUsers\", {\n          //     \"userinfo\": userInfo //,\n          //     // \"nuserrolecode\" : nfilterProjectMaster.nuserrolecode\n          // })); \n\n          urlArray.push(rsapi.post(\"projectmaster/getTeammembers\", {\n            \"userinfo\": userInfo\n          }));\n          urlArray.push(rsapi.post(\"projectmaster/getPeriodByControl\", {\n            \"userinfo\": userInfo,\n            \"ncontrolcode\": ncontrolCode\n          }));\n          urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", {\n            \"userinfo\": userInfo\n          }));\n        }\n\n        if (operation === \"update\") {\n          urlArray.push(rsapi.post(\"projectmaster/getActiveProjectMasterById\", {\n            \"userinfo\": userInfo,\n            \"nprojectmastercode\": nfilterProjectMaster.nprojectmastercode\n          }));\n          urlArray.push(rsapi.post(\"projectmaster/getUsers\", {\n            \"userinfo\": userInfo,\n            \"nuserrolecode\": nfilterProjectMaster.nuserrolecode\n          }));\n          urlArray.push(rsapi.post(\"client/getClientByCategory\", {\n            \"nclientcatcode\": nfilterProjectMaster.nclientcatcode,\n            \"userinfo\": userInfo\n          }));\n          urlArray.push(rsapi.post(\"projectmaster/getQuotaionNoByClient\", {\n            \"nclientcatcode\": nfilterProjectMaster.nclientcatcode,\n            \"nclientcode\": nfilterProjectMaster.nclientcode,\n            \"userinfo\": userInfo\n          }));\n        }\n\n        Axios.all(urlArray).then(response => {\n          let testData = {};\n          let {\n            ProjectType,\n            Userrole,\n            userList,\n            TeamMembers,\n            PeriodByControl,\n            ClientCategory,\n            Client,\n            QuotationNo\n          } = [];\n\n          if (operation === \"create\") {\n            ProjectType = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n            Userrole = constructOptionList(response[1].data || [], \"nuserrolecode\", \"suserrolename\", false, false, true).get(\"OptionList\"); //                Users = constructOptionList(response[2].data || [], \"nusercode\", \"susername\", false, false, true).get(\"OptionList\");\n\n            TeamMembers = constructOptionList(response[2].data || [], \"nusercode\", \"steammembername\", false, false, true).get(\"OptionList\");\n            PeriodByControl = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true).get(\"OptionList\");\n            ClientCategory = constructOptionList(response[4].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\n            selectedRecord = {\n              \"nprojecttypecode\": {\n                \"value\": SelectedProjectType.nprojecttypecode,\n                \"label\": SelectedProjectType.sprojecttypename\n              }\n            };\n          } else if (operation === \"update\") {\n            const editData = response[5].data.SelectedProjectMaster;\n            selectedRecord[\"sprojectcode\"] = editData.sprojectcode;\n            selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\n            selectedRecord[\"sprojectdescription\"] = editData.sprojectdescription;\n            selectedRecord[\"nprojectduration\"] = editData.nprojectduration;\n            selectedRecord[\"sprojectname\"] = editData.sprojectname;\n            selectedRecord[\"srfwid\"] = editData.srfwid;\n            selectedRecord = { ...selectedRecord\n            };\n            ProjectType = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n            Userrole = constructOptionList(response[1].data || [], \"nuserrolecode\", \"suserrolename\", false, false, true).get(\"OptionList\");\n            userList = constructOptionList(response[6].data || [], \"nusercode\", \"susername\", false, false, true).get(\"OptionList\");\n            TeamMembers = constructOptionList(response[2].data || [], \"nusercode\", \"steammembername\", false, false, true).get(\"OptionList\");\n            PeriodByControl = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true).get(\"OptionList\");\n            ClientCategory = constructOptionList(response[4].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\n            Client = constructOptionList(response[7].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\n            QuotationNo = constructOptionList(response[8].data || [], \"nquotationcode\", \"squotationno\", false, false, true).get(\"OptionList\");\n            selectedRecord[\"nprojecttypecode\"] = {\n              \"value\": editData[\"nprojecttypecode\"],\n              \"label\": editData[\"sprojecttypename\"]\n            };\n            selectedRecord[\"nuserrolecode\"] = {\n              \"value\": editData[\"nuserrolecode\"],\n              \"label\": editData[\"suserrolename\"]\n            };\n            selectedRecord[\"nusercode\"] = {\n              \"value\": editData[\"nusercode\"],\n              \"label\": editData[\"susername\"]\n            };\n            selectedRecord[\"nteammembercode\"] = {\n              \"value\": editData[\"nteammembercode\"],\n              \"label\": editData[\"steammembername\"]\n            };\n            selectedRecord[\"nperiodcode\"] = {\n              \"value\": editData[\"nperiodcode\"],\n              \"label\": editData[\"speriodname\"]\n            };\n            selectedRecord[\"nclientcatcode\"] = {\n              \"value\": editData[\"nclientcatcode\"],\n              \"label\": editData[\"sclientcatname\"]\n            };\n            selectedRecord[\"nclientcode\"] = {\n              \"value\": editData[\"nclientcode\"],\n              \"label\": editData[\"sclientname\"]\n            };\n            if (editData[\"nquotationcode\"] != -1) selectedRecord[\"nquotationcode\"] = {\n              \"value\": editData[\"nquotationcode\"],\n              \"label\": editData[\"squotationno\"]\n            }; // selectedRecord[\"nstudydirectorcode\"] = response[1].data;\n            // selectedRecord[\"nteammembercode\"] = response[2].data;\n            //  selectedRecord[\"nperiodcode\"] = response[3].data;\n            // selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\n            // selectedRecord[\"sprojectcode\"] = editData.sprojectcode;\n\n            if (editData.srfwdate != \"-\") {\n              selectedRecord[\"drfwdate\"] = rearrangeDateFormat(userInfo, editData.srfwdate);\n            }\n\n            if (editData.sexpectcompletiondate != \"-\") {\n              selectedRecord[\"dexpectcompletiondate\"] = rearrangeDateFormat(userInfo, editData.sexpectcompletiondate);\n            }\n\n            selectedRecord[\"dprojectstartdate\"] = rearrangeDateFormat(userInfo, editData.sprojectstartdate);\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              ProjectType,\n              Userrole,\n              userList,\n              TeamMembers,\n              PeriodByControl,\n              ClientCategory,\n              Client,\n              QuotationNo,\n              operation: operation,\n              screenName: \"IDS_PROJECTMASTER\",\n              selectedRecord,\n              ncontrolCode,\n              testData,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      }\n    } else {\n      //  if(nfilterProjectMaster.ntransactionstatus !== transactionStatus.DRAFT){ nfilterProjectMaster\n      if (nfilterProjectMaster !== null && operation === \"update\") {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_PROJECTTYPENOTAVAILABLE\"\n        }));\n      }\n    }\n  };\n};\nexport const addProjectMasterFile = inputParam => {\n  return dispatch => {\n    if (inputParam.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n        userinfo: inputParam.userInfo\n      })];\n\n      if (inputParam.operation === \"update\") {\n        urlArray.push(rsapi.post(\"/projectmaster/editProjectMasterFile\", {\n          userinfo: inputParam.userInfo,\n          projectmasterfile: inputParam.selectedRecord\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n        const linkmaster = linkMap.get(\"OptionList\");\n        let selectedRecord = {};\n        const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n        let disabled = false;\n        let editObject = {};\n\n        if (inputParam.operation === \"update\") {\n          editObject = response[1].data;\n          let nlinkcode = {};\n          let link = {};\n\n          if (editObject.nattachmenttypecode === attachmentType.LINK) {\n            nlinkcode = {\n              \"label\": editObject.slinkname,\n              \"value\": editObject.nlinkcode\n            };\n            link = {\n              slinkfilename: editObject.sfilename,\n              slinkdescription: editObject.sdescription,\n              nlinkdefaultstatus: editObject.ndefaultstatus,\n              sfilesize: '',\n              nfilesize: 0,\n              ndefaultstatus: 4,\n              sfilename: ''\n            };\n          } else {\n            nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n            link = {\n              slinkfilename: '',\n              slinkdescription: '',\n              nlinkdefaultstatus: 4,\n              sfilesize: editObject.sfilesize,\n              nfilesize: editObject.nfilesize,\n              ndefaultstatus: editObject.ndefaultstatus,\n              sfilename: editObject.sfilename\n            };\n          }\n\n          selectedRecord = { ...link,\n            nprojectmasterfilecode: editObject.nprojectmasterfilecode,\n            nattachmenttypecode: editObject.nattachmenttypecode,\n            //...editObject,\n            nlinkcode // disabled: true\n\n          };\n        } else {\n          selectedRecord = {\n            nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n            nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n            //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n            disabled\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [inputParam.modalName]: true,\n            operation: inputParam.operation,\n            screenName: inputParam.screenName,\n            ncontrolCode: inputParam.ncontrolCode,\n            selectedRecord,\n            loading: false,\n            linkMaster: linkmaster,\n            showSaveContinue: false,\n            editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n}; //ProjectMaster Click\n\nexport const getProjectMaster = (projectmasterItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/projectmaster/getActiveProjectMasterById\", {\n      nprojectmastercode: projectmasterItem.nprojectmastercode,\n      nprojecttypecode: projectmasterItem.nprojecttypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      }; // ...masterData,\n      // ...response.data\n\n      masterData = masterData1;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          dataState: undefined,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); // toast.error(error.message);\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //status 417\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getProjectmasterAddMemberService(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    // if (masterData.SelectedProjectMaster.ntransactionstatus !== transactionStatus.RETIRED) {\n    dispatch(initRequest(true));\n    rsapi.post(\"projectmaster/getProjectUnmappedTeammember\", {\n      \"nprojectmastercode\": masterData.SelectedProjectMaster[\"nprojectmastercode\"],\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      };\n      masterData = masterData1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          MembersList: response.data,\n          masterData,\n          openChildModal: true,\n          operation,\n          screenName,\n          ncontrolCode,\n          //selectedRecord, \n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n    // else {\n    //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTNONRETIEDPROJECTMASTERVERSION\" }));\n    // }\n  };\n}\nexport function ReportInfo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode, needjsontemplate) {\n  return function (dispatch) {\n    const Status = masterData.SelectedProjectMaster.ntransactionstatus;\n\n    if (Status === transactionStatus.DRAFT || Status === transactionStatus.APPROVED) {\n      let urlArray = []; // const Submitter = rsapi.post(\"/projectmaster/getEditReportInfoProject\", {\n      //                                   [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],needjsontemplate:needjsontemplate!=4?3:4,\n      //                                   \"userinfo\": userInfo\n      //                 });\n\n      urlArray.push(rsapi.post(\"/projectmaster/getEditReportInfoProject\", {\n        [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],\n        \"userinfo\": userInfo\n      }));\n      if (needjsontemplate != 4) urlArray.push(rsapi.post(\"/projectmaster/getReportTemplate\", {\n        \"userinfo\": userInfo\n      }));\n      urlArray.push(rsapi.post(\"/projectmaster/getActiveReportTemplate\", {\n        [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],\n        \"userinfo\": userInfo\n      })); // const ReportTemplate=rsapi.post(\"/projectmaster/getReportTemplate\", {\n      //     \"userinfo\": userInfo});\n      //urlArray = [Submitter,ReportTemplate];\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        let reportTemplateList = [];\n\n        if (needjsontemplate != 4) {\n          reportTemplateList = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"stemplatename\", undefined, undefined, false).get(\"OptionList\");\n        }\n\n        selectedRecord[\"sreporttemplateversion\"] = response[0].data.ReportInfoProject.sreporttemplateversion;\n        selectedRecord[\"srevision\"] = response[0].data.ReportInfoProject.srevision;\n        selectedRecord[\"srevisionauthor\"] = response[0].data.ReportInfoProject.srevisionauthor;\n        selectedRecord[\"sintroduction\"] = response[0].data.ReportInfoProject.sintroduction;\n        selectedRecord[\"stestproductheadercomments\"] = response[0].data.ReportInfoProject.stestproductheadercomments;\n        selectedRecord[\"stestproductfootercomments1\"] = response[0].data.ReportInfoProject.stestproductfootercomments1;\n        selectedRecord[\"stestproductfootercomments2\"] = response[0].data.ReportInfoProject.stestproductfootercomments2;\n        selectedRecord[\"stestproductfootercomments3\"] = response[0].data.ReportInfoProject.stestproductfootercomments3;\n        selectedRecord[\"stestproductfootercomments4\"] = response[0].data.ReportInfoProject.stestproductfootercomments4;\n        selectedRecord[\"ssamplingdetails\"] = response[0].data.ReportInfoProject.ssamplingdetails;\n        selectedRecord[\"suncertainitymeasurement\"] = response[0].data.ReportInfoProject.suncertainitymeasurement;\n\n        if (needjsontemplate != 4) {\n          if (response[2].data.ReportTemplate != null) {\n            selectedRecord[\"nreporttemplatecode\"] = {\n              \"value\": response[2].data.ReportTemplate[\"nreporttemplatecode\"],\n              \"label\": response[2].data.ReportTemplate[\"stemplatename\"]\n            };\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            masterData: masterData,\n            selectedRecord,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            reportTemplateList\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORD\"\n      }));\n    }\n  };\n}\nexport function getClientByCategory(methodParam, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/client/getClientByCategory\", {\n      \"nclientcatcode\": methodParam.inputData.primarykey,\n      \"userinfo\": methodParam.inputData.userinfo\n    }).then(response => {\n      let Client = [];\n      Client = constructOptionList(response.data.Client || [], \"nclientcode\", \"sclientname\", undefined, undefined, false).get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          Client,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQuotationByClient(methodParam, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/projectmaster/getQuotaionNoByClient\", {\n      \"nclientcatcode\": methodParam.inputData.nclientcatcode,\n      \"nclientcode\": methodParam.inputData.nclientcode,\n      \"userinfo\": methodParam.inputData.userinfo\n    }).then(response => {\n      let QuotationNo = [];\n      QuotationNo = constructOptionList(response.data || [], \"nquotationcode\", \"squotationno\", undefined, undefined, false).get(\"OptionList\");\n      QuotationNo.map(key => {});\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          QuotationNo,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function closureProjectMaster(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const formData = inputParam.formData;\n    formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n    rsapi.post(inputParam.classUrl + \"/\" + \"closure\" + inputParam.methodUrl, formData).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      }; // const foundIndex = masterData[\"ProjectMaster\"].findIndex(\n      //     x => x[\"nprojectmastercode\"] === masterData[\"SelectedProjectMaster\"][\"nprojectmastercode\"]\n      //   );\n\n      if (masterData[\"searchedData\"]) {\n        const foundIndex1 = masterData[\"searchedData\"].findIndex(x => x[\"nprojectmastercode\"] === masterData[\"SelectedProjectMaster\"][\"nprojectmastercode\"]); // masterData[\"ProjectMaster\"][foundIndex] = masterData[\"SelectedProjectMaster\"];\n      }\n\n      masterData = sortData(masterData); //  })             \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          openModal: false,\n          operation: inputParam.operation,\n          ncontrolCode: inputParam.ncontrolCode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforModal(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\n\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\n        }\n\n        dispatch(modalSave(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function projectMasterModal(selectedProjecmaster, operation, screenName, ncontrolcode, sdate, userInfo) {\n  return dispatch => {\n    let alertMsg;\n    let check;\n\n    if (operation === \"complete\" || operation === \"retire\") {\n      check = selectedProjecmaster.ntransactionstatus === transactionStatus.APPROVED;\n      alertMsg = \"IDS_SELECTAPPROVEVERSION\";\n    }\n\n    if (operation === \"closure\") {\n      alertMsg = \"IDS_SELECTCOMPLETEORRETIREACTION\";\n      check = selectedProjecmaster.ntransactionstatus === transactionStatus.COMPLETED || selectedProjecmaster.ntransactionstatus === transactionStatus.RETIRED;\n    }\n\n    if (check) {\n      dispatch(initRequest(true));\n      let selectedRecord = {};\n      let ntimezonedate;\n      let stimezonedate;\n      let openModal = false;\n      let modalShow = false;\n\n      if (operation === \"complete\") {\n        ntimezonedate = \"ntzprojectcompletiondate\";\n        stimezonedate = \"stzprojectcompletiondate\";\n        modalShow = true;\n      }\n\n      if (operation === \"retire\") {\n        ntimezonedate = \"ntzprojectretiredate\";\n        stimezonedate = \"stzprojectretiredate\";\n        modalShow = true;\n      }\n\n      if (operation === \"closure\") {\n        ntimezonedate = \"ntzprojectclosuredate\";\n        stimezonedate = \"stzprojectclosuredate\";\n        openModal = true;\n      }\n\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      urlArray = [timeZoneService, UTCtimeZoneService];\n      Axios.all(urlArray).then(response => {\n        const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        let date = rearrangeDateFormat(userInfo, response[1].data);\n        selectedRecord = {\n          ntimezonedate: {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          stimezonedate: userInfo.stimezoneid\n        };\n        selectedRecord[sdate] = date;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            selectedRecord,\n            modalShow: modalShow,\n            operation: operation,\n            screenName: screenName,\n            TimeZoneList,\n            ncontrolcode: ncontrolcode,\n            openModal: openModal\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: alertMsg\n      }));\n    }\n  };\n}\nexport const getAvailableQuotation = (Item, screenName, userInfo, ncontrolCode) => {\n  return dispatch => {\n    if (Item.ntransactionstatus === transactionStatus.DRAFT || Item.ntransactionstatus === transactionStatus.APPROVED) {\n      const inputParam = {\n        nprojectmastercode: Item.nprojectmastercode,\n        \"userinfo\": userInfo\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"projectmaster/getAvailableProjectQuotation\", inputParam).then(response => {\n        const availableDataMap = constructOptionList(response.data, \"nquotationcode\", \"squotationno\", false, false, true);\n        const ProjectQuotationList = availableDataMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            showSaveContinue: false,\n            ProjectQuotationList: ProjectQuotationList,\n            screenName: screenName,\n            operation: \"create\",\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 417) {\n          toast.info(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTAPPROVEDRECORD\"\n      }));\n    }\n  };\n};\nexport const getActiveProjectQuotationById = quotationParam => {\n  return function (dispatch) {\n    if (quotationParam.SelectedProjectMaster.ntransactionstatus === transactionStatus.DRAFT || quotationParam.SelectedProjectMaster.ntransactionstatus === transactionStatus.APPROVED) {\n      let urlArray = [];\n      const quotationById = rsapi.post(\"projectmaster/getQuotation\", {\n        \"userinfo\": quotationParam.userInfo\n      });\n      const activeQuotationById = rsapi.post(\"projectmaster/getActiveProjectQuotationById\", {\n        [quotationParam.primaryKeyField]: quotationParam.primaryKeyValue,\n        \"userinfo\": quotationParam.userInfo\n      });\n      urlArray = [quotationById, activeQuotationById];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        let quotationData = [];\n        const quotationOptions = constructOptionList(response[0].data.Quotation || [], \"nquotationcode\", \"squotationno\", false, false, true);\n        const ProjectQuotationList = quotationOptions.get(\"OptionList\");\n        quotationData.push({\n          \"value\": response[1].data[\"nquotationcode\"],\n          \"label\": response[1].data[\"squotationno\"]\n        });\n        selectedRecord = response[1].data;\n        selectedRecord[\"nquotationcode\"] = quotationData[0];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ProjectQuotationList: ProjectQuotationList,\n            selectedRecord: selectedRecord,\n            operation: quotationParam.operation,\n            screenName: \"IDS_QUOTATION\",\n            openChildModal: true,\n            ncontrolCode: quotationParam.ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTAPPROVEDRECORD\"\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/ProjectMasterAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","sortData","constructOptionList","rearrangeDateFormat","transactionStatus","attachmentType","intl","modalSave","changeProjectTypeFilter","inputParam","filterProjectType","dispatch","post","methodUrl","inputData","then","response","masterData","data","type","payload","loading","dataState","undefined","nfilterProjectType","catch","error","message","getuserComboServices","methodParam","selectedRecord","URL","userinfo","primarykey","all","userList","userMap","get","status","warn","addProjectMaster","operation","nfilterProjectMaster","userInfo","ncontrolCode","selectedRecordvalue","SelectedProjectType","nprojecttypecodevalue","Object","values","length","nprojecttypecode","ntransactionstatus","DRAFT","urlArray","push","nprojectmastercode","nuserrolecode","nclientcatcode","nclientcode","testData","ProjectType","Userrole","TeamMembers","PeriodByControl","ClientCategory","Client","QuotationNo","sprojecttypename","editData","SelectedProjectMaster","sprojectcode","sprojecttitle","sprojectdescription","nprojectduration","sprojectname","srfwid","srfwdate","sexpectcompletiondate","sprojectstartdate","openModal","screenName","formatMessage","id","addProjectMasterFile","projectmasterfile","linkMap","LinkMaster","linkmaster","defaultLink","filter","items","item","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sdescription","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","nprojectmasterfilecode","AttachmentType","FTP","modalName","linkMaster","showSaveContinue","editFiles","getProjectMaster","projectmasterItem","masterData1","getProjectmasterAddMemberService","MembersList","openChildModal","ReportInfo","primaryKeyName","needjsontemplate","Status","APPROVED","reportTemplateList","ReportInfoProject","sreporttemplateversion","srevision","srevisionauthor","sintroduction","stestproductheadercomments","stestproductfootercomments1","stestproductfootercomments2","stestproductfootercomments3","stestproductfootercomments4","ssamplingdetails","suncertainitymeasurement","ReportTemplate","isOpen","info","getClientByCategory","getQuotationByClient","map","key","closureProjectMaster","formData","append","JSON","stringify","classUrl","foundIndex1","findIndex","x","validateEsignforModal","toLowerCase","projectMasterModal","selectedProjecmaster","ncontrolcode","sdate","alertMsg","check","COMPLETED","RETIRED","ntimezonedate","stimezonedate","modalShow","timeZoneService","UTCtimeZoneService","timezoneMap","TimeZoneList","date","ntimezonecode","stimezoneid","getAvailableQuotation","Item","availableDataMap","ProjectQuotationList","getActiveProjectQuotationById","quotationParam","quotationById","activeQuotationById","primaryKeyField","primaryKeyValue","quotationData","quotationOptions","Quotation"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { transactionStatus, attachmentType } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\nimport { modalSave } from './ServiceAction';\r\n\r\nexport const changeProjectTypeFilter = (inputParam, filterProjectType) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/projectmaster/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterProjectType,\r\n                            nfilterProjectType: inputParam.inputData.nfilterProjectType\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getuserComboServices(methodParam, selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n        URL = rsapi.post(\"/projectmaster/getUsers\", { \"userinfo\": methodParam.inputData.userinfo, \"nuserrolecode\": methodParam.inputData.primarykey })\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let userList;\r\n\r\n                const userMap = constructOptionList(response[0].data || [], \"nusercode\",\r\n\r\n                    \"susername\", undefined, undefined, false);\r\n\r\n                userList = userMap.get(\"OptionList\");\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n\r\n                        { userList, selectedRecord, loading: false, data: undefined, dataState: undefined }\r\n                })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//Add Project Master\r\nexport const addProjectMaster = (operation, nfilterProjectMaster, userInfo, ncontrolCode, selectedRecordvalue, SelectedProjectType) => {\r\n    return function (dispatch) {\r\n        // if (nfilterProjectMaster && Object.values(nfilterProjectMaster).length > 0) {\r\n        if (selectedRecordvalue && selectedRecordvalue.nprojecttypecodevalue !== undefined) {\r\n            if ((Object.values(selectedRecordvalue.nprojecttypecodevalue).length > 0 && selectedRecordvalue.nprojecttypecodevalue !== undefined && operation === 'create') || (nfilterProjectMaster && nfilterProjectMaster.nprojecttypecode > 0 && operation === 'update' && nfilterProjectMaster.ntransactionstatus === transactionStatus.DRAFT)) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                ];\r\n                let selectedRecord = {};\r\n                // selectedRecord = selectedRecordvalue ;\r\n                if (operation === \"create\" || operation === \"update\") {\r\n\r\n                    urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\r\n                        \"userinfo\": userInfo\r\n                    }));\r\n\r\n                    /*       urlArray.push(rsapi.post(\"projectmaster/getStudyDirector\", {\r\n                               \"userinfo\": userInfo\r\n                           })); */\r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getUserrole\", {\r\n                        \"userinfo\": userInfo\r\n                    }));\r\n\r\n                    // urlArray.push(rsapi.post(\"projectmaster/getUsers\", {\r\n                    //     \"userinfo\": userInfo //,\r\n                    //     // \"nuserrolecode\" : nfilterProjectMaster.nuserrolecode\r\n                    // })); \r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getTeammembers\", {\r\n                        \"userinfo\": userInfo\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getPeriodByControl\", {\r\n                        \"userinfo\": userInfo,\r\n                        \"ncontrolcode\": ncontrolCode\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", { \"userinfo\": userInfo }));\r\n\r\n                }\r\n                if (operation === \"update\") {\r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getActiveProjectMasterById\", {\r\n                        \"userinfo\": userInfo,\r\n                        \"nprojectmastercode\": nfilterProjectMaster.nprojectmastercode\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getUsers\", {\r\n                        \"userinfo\": userInfo,\r\n                        \"nuserrolecode\": nfilterProjectMaster.nuserrolecode\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"client/getClientByCategory\", {\r\n                        \"nclientcatcode\": nfilterProjectMaster.nclientcatcode,\r\n                        \"userinfo\": userInfo\r\n\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"projectmaster/getQuotaionNoByClient\", {\r\n                        \"nclientcatcode\": nfilterProjectMaster.nclientcatcode,\r\n                        \"nclientcode\": nfilterProjectMaster.nclientcode,\r\n                        \"userinfo\": userInfo\r\n                    }));\r\n\r\n\r\n                }\r\n\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n\r\n\r\n                        let testData = {};\r\n\r\n                        let { ProjectType, Userrole, userList, TeamMembers, PeriodByControl, ClientCategory, Client, QuotationNo } = []\r\n\r\n\r\n                        if (operation === \"create\") {\r\n\r\n                            ProjectType = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n\r\n\r\n                            Userrole = constructOptionList(response[1].data || [], \"nuserrolecode\", \"suserrolename\", false, false, true).get(\"OptionList\");\r\n\r\n\r\n                            //                Users = constructOptionList(response[2].data || [], \"nusercode\", \"susername\", false, false, true).get(\"OptionList\");\r\n\r\n\r\n                            TeamMembers = constructOptionList(response[2].data || [], \"nusercode\", \"steammembername\", false, false, true).get(\"OptionList\");\r\n\r\n\r\n                            PeriodByControl = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true).get(\"OptionList\");\r\n\r\n                            ClientCategory = constructOptionList(response[4].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\r\n\r\n                            selectedRecord = {\r\n                                \"nprojecttypecode\": {\r\n                                    \"value\": SelectedProjectType.nprojecttypecode,\r\n                                    \"label\": SelectedProjectType.sprojecttypename\r\n                                }\r\n                            };\r\n\r\n                        } else if (operation === \"update\") {\r\n\r\n\r\n\r\n                            const editData = response[5].data.SelectedProjectMaster;\r\n\r\n                            selectedRecord[\"sprojectcode\"] = editData.sprojectcode;\r\n                            selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\r\n                            selectedRecord[\"sprojectdescription\"] = editData.sprojectdescription;\r\n                            selectedRecord[\"nprojectduration\"] = editData.nprojectduration;\r\n                            selectedRecord[\"sprojectname\"] = editData.sprojectname;\r\n                            selectedRecord[\"srfwid\"] = editData.srfwid;\r\n\r\n\r\n\r\n                            selectedRecord = { ...selectedRecord }\r\n\r\n                            ProjectType = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n                            Userrole = constructOptionList(response[1].data || [], \"nuserrolecode\", \"suserrolename\", false, false, true).get(\"OptionList\");\r\n                            userList = constructOptionList(response[6].data || [], \"nusercode\", \"susername\", false, false, true).get(\"OptionList\");\r\n                            TeamMembers = constructOptionList(response[2].data || [], \"nusercode\", \"steammembername\", false, false, true).get(\"OptionList\");\r\n                            PeriodByControl = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true).get(\"OptionList\");\r\n                            ClientCategory = constructOptionList(response[4].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\r\n                            Client = constructOptionList(response[7].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\r\n                            QuotationNo = constructOptionList(response[8].data || [], \"nquotationcode\", \"squotationno\", false, false, true).get(\"OptionList\");\r\n\r\n                            selectedRecord[\"nprojecttypecode\"] = {\r\n                                \"value\": editData[\"nprojecttypecode\"],\r\n                                \"label\": editData[\"sprojecttypename\"]\r\n                            };\r\n\r\n                            selectedRecord[\"nuserrolecode\"] = {\r\n                                \"value\": editData[\"nuserrolecode\"],\r\n                                \"label\": editData[\"suserrolename\"]\r\n                            };\r\n\r\n                            selectedRecord[\"nusercode\"] = {\r\n                                \"value\": editData[\"nusercode\"],\r\n                                \"label\": editData[\"susername\"]\r\n                            };\r\n\r\n\r\n                            selectedRecord[\"nteammembercode\"] = {\r\n                                \"value\": editData[\"nteammembercode\"],\r\n                                \"label\": editData[\"steammembername\"]\r\n                            };\r\n\r\n                            selectedRecord[\"nperiodcode\"] = {\r\n                                \"value\": editData[\"nperiodcode\"],\r\n                                \"label\": editData[\"speriodname\"]\r\n                            };\r\n                            selectedRecord[\"nclientcatcode\"] = {\r\n                                \"value\": editData[\"nclientcatcode\"],\r\n                                \"label\": editData[\"sclientcatname\"]\r\n                            };\r\n\r\n                            selectedRecord[\"nclientcode\"] = {\r\n                                \"value\": editData[\"nclientcode\"],\r\n                                \"label\": editData[\"sclientname\"]\r\n                            };\r\n                            if (editData[\"nquotationcode\"] != -1)\r\n                                selectedRecord[\"nquotationcode\"] = {\r\n                                    \"value\": editData[\"nquotationcode\"],\r\n                                    \"label\": editData[\"squotationno\"]\r\n                                };\r\n\r\n\r\n                            // selectedRecord[\"nstudydirectorcode\"] = response[1].data;\r\n                            // selectedRecord[\"nteammembercode\"] = response[2].data;\r\n                            //  selectedRecord[\"nperiodcode\"] = response[3].data;\r\n                            // selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\r\n                            // selectedRecord[\"sprojectcode\"] = editData.sprojectcode;\r\n\r\n                            if (editData.srfwdate != \"-\") {\r\n                                selectedRecord[\"drfwdate\"] = rearrangeDateFormat(userInfo, editData.srfwdate);\r\n\r\n                            }\r\n                            if (editData.sexpectcompletiondate != \"-\") {\r\n                                selectedRecord[\"dexpectcompletiondate\"] = rearrangeDateFormat(userInfo, editData.sexpectcompletiondate);\r\n\r\n                            }\r\n                            selectedRecord[\"dprojectstartdate\"] = rearrangeDateFormat(userInfo, editData.sprojectstartdate);\r\n\r\n                        }\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n\r\n                                openModal: true,\r\n                                ProjectType, Userrole, userList, TeamMembers, PeriodByControl, ClientCategory, Client, QuotationNo,\r\n                                operation: operation,\r\n                                screenName: \"IDS_PROJECTMASTER\",\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                testData,\r\n\r\n\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }));\r\n            }\r\n        } else {\r\n            //  if(nfilterProjectMaster.ntransactionstatus !== transactionStatus.DRAFT){ nfilterProjectMaster\r\n            if (nfilterProjectMaster !== null && operation === \"update\") {\r\n\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }));\r\n\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\" }))\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const addProjectMasterFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        if (inputParam.ntransactionstatus === transactionStatus.DRAFT) {\r\n            dispatch(initRequest(true));\r\n            let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n                userinfo: inputParam.userInfo\r\n            })];\r\n            if (inputParam.operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"/projectmaster/editProjectMasterFile\", {\r\n                    userinfo: inputParam.userInfo,\r\n                    projectmasterfile: inputParam.selectedRecord\r\n                }))\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                    const linkmaster = linkMap.get(\"OptionList\");\r\n                    let selectedRecord = {};\r\n                    const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                    let disabled = false;\r\n                    let editObject = {};\r\n                    if (inputParam.operation === \"update\") {\r\n                        editObject = response[1].data;\r\n                        let nlinkcode = {};\r\n                        let link = {};\r\n                        if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                            nlinkcode = {\r\n                                \"label\": editObject.slinkname,\r\n                                \"value\": editObject.nlinkcode\r\n                            }\r\n\r\n                            link = {\r\n                                slinkfilename: editObject.sfilename,\r\n                                slinkdescription: editObject.sdescription,\r\n                                nlinkdefaultstatus: editObject.ndefaultstatus,\r\n                                sfilesize: '',\r\n                                nfilesize: 0,\r\n                                ndefaultstatus: 4,\r\n                                sfilename: '',\r\n                            }\r\n\r\n                        } else {\r\n                            nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                            link = {\r\n                                slinkfilename: '',\r\n                                slinkdescription: '',\r\n                                nlinkdefaultstatus: 4,\r\n                                sfilesize: editObject.sfilesize,\r\n                                nfilesize: editObject.nfilesize,\r\n                                ndefaultstatus: editObject.ndefaultstatus,\r\n                                sfilename: editObject.sfilename,\r\n                            }\r\n                        }\r\n                        selectedRecord = {\r\n                            ...link,\r\n                            nprojectmasterfilecode: editObject.nprojectmasterfilecode,\r\n                            nattachmenttypecode: editObject.nattachmenttypecode,\r\n                            //...editObject,\r\n                            nlinkcode,\r\n\r\n                            // disabled: true\r\n                        };\r\n                    } else {\r\n                        selectedRecord = {\r\n                            nattachmenttypecode: response[0].data.AttachmentType.length > 0 ?\r\n                                response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\r\n                            nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                            disabled\r\n                        };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            [inputParam.modalName]: true,\r\n                            operation: inputParam.operation,\r\n                            screenName: inputParam.screenName,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            selectedRecord,\r\n                            loading: false,\r\n                            linkMaster: linkmaster,\r\n                            showSaveContinue: false,\r\n\r\n                            editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }));\r\n        }\r\n    }\r\n}\r\n\r\n//ProjectMaster Click\r\nexport const getProjectMaster = (projectmasterItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/projectmaster/getActiveProjectMasterById\", {\r\n            nprojectmastercode: projectmasterItem.nprojectmastercode,\r\n            nprojecttypecode: projectmasterItem.nprojecttypecode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n\r\n\r\n                let masterData1 = {\r\n                    ...masterData,\r\n\r\n                    ...response.data\r\n                }\r\n\r\n                // ...masterData,\r\n                // ...response.data\r\n                masterData = masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                // toast.error(error.message);\r\n                if (error.response.status === 500) {\r\n \r\n                    toast.error(error.message);\r\n          \r\n                  } else {\r\n                    //status 417\r\n                    toast.warn(intl.formatMessage({\r\n          \r\n                      id: error.response.data\r\n          \r\n                    }));\r\n          \r\n                  }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getProjectmasterAddMemberService(screenName, operation, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        // if (masterData.SelectedProjectMaster.ntransactionstatus !== transactionStatus.RETIRED) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"projectmaster/getProjectUnmappedTeammember\", {\r\n            \"nprojectmastercode\": masterData.SelectedProjectMaster[\"nprojectmastercode\"],\r\n            userinfo: userInfo\r\n        })\r\n\r\n            .then(response => {\r\n\r\n                let masterData1 = {\r\n                    ...masterData,\r\n\r\n                    ...response.data\r\n                }\r\n                masterData = masterData1\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        MembersList: response.data,\r\n                        masterData,\r\n                        openChildModal: true,\r\n                        operation, screenName, ncontrolCode,\r\n                        //selectedRecord, \r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTNONRETIEDPROJECTMASTERVERSION\" }));\r\n        // }\r\n    }\r\n}\r\n\r\n\r\nexport function ReportInfo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode, needjsontemplate) {\r\n    return function (dispatch) {\r\n\r\n        const Status = masterData.SelectedProjectMaster.ntransactionstatus;\r\n        if (Status === transactionStatus.DRAFT || Status === transactionStatus.APPROVED) {\r\n            let urlArray = [];\r\n            // const Submitter = rsapi.post(\"/projectmaster/getEditReportInfoProject\", {\r\n            //                                   [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],needjsontemplate:needjsontemplate!=4?3:4,\r\n            //                                   \"userinfo\": userInfo\r\n            //                 });\r\n\r\n            urlArray.push(rsapi.post(\"/projectmaster/getEditReportInfoProject\", {\r\n                [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            }));\r\n\r\n\r\n            if (needjsontemplate != 4)\r\n                urlArray.push(rsapi.post(\"/projectmaster/getReportTemplate\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n                );\r\n            urlArray.push(rsapi.post(\"/projectmaster/getActiveReportTemplate\", {\r\n                [primaryKeyName]: masterData.SelectedProjectMaster[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            }));\r\n\r\n\r\n            // const ReportTemplate=rsapi.post(\"/projectmaster/getReportTemplate\", {\r\n            //     \"userinfo\": userInfo});\r\n            //urlArray = [Submitter,ReportTemplate];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    let reportTemplateList = [];\r\n                    if (needjsontemplate != 4) {\r\n                        reportTemplateList = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"stemplatename\", undefined, undefined, false).get(\"OptionList\");\r\n\r\n                    }\r\n\r\n                    selectedRecord[\"sreporttemplateversion\"] = response[0].data.ReportInfoProject.sreporttemplateversion;\r\n                    selectedRecord[\"srevision\"] = response[0].data.ReportInfoProject.srevision;\r\n                    selectedRecord[\"srevisionauthor\"] = response[0].data.ReportInfoProject.srevisionauthor;\r\n                    selectedRecord[\"sintroduction\"] = response[0].data.ReportInfoProject.sintroduction;\r\n                    selectedRecord[\"stestproductheadercomments\"] = response[0].data.ReportInfoProject.stestproductheadercomments;\r\n                    selectedRecord[\"stestproductfootercomments1\"] = response[0].data.ReportInfoProject.stestproductfootercomments1;\r\n                    selectedRecord[\"stestproductfootercomments2\"] = response[0].data.ReportInfoProject.stestproductfootercomments2;\r\n                    selectedRecord[\"stestproductfootercomments3\"] = response[0].data.ReportInfoProject.stestproductfootercomments3;\r\n                    selectedRecord[\"stestproductfootercomments4\"] = response[0].data.ReportInfoProject.stestproductfootercomments4;\r\n                    selectedRecord[\"ssamplingdetails\"] = response[0].data.ReportInfoProject.ssamplingdetails;\r\n                    selectedRecord[\"suncertainitymeasurement\"] = response[0].data.ReportInfoProject.suncertainitymeasurement;\r\n                    if (needjsontemplate != 4) {\r\n                        if (response[2].data.ReportTemplate != null) {\r\n                            selectedRecord[\"nreporttemplatecode\"] = {\r\n                                \"value\": response[2].data.ReportTemplate[\"nreporttemplatecode\"],\r\n                                \"label\": response[2].data.ReportTemplate[\"stemplatename\"]\r\n                            };\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            masterData: masterData,\r\n                            selectedRecord,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            reportTemplateList\r\n\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function getClientByCategory(methodParam, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/client/getClientByCategory\", { \"nclientcatcode\": methodParam.inputData.primarykey, \"userinfo\": methodParam.inputData.userinfo }).then(response => {\r\n            let Client = [];\r\n            Client = constructOptionList(response.data.Client || [], \"nclientcode\", \"sclientname\", undefined, undefined, false).get(\"OptionList\");\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false, Client, selectedRecord\r\n                }\r\n            }\r\n\r\n\r\n            );\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getQuotationByClient(methodParam, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/projectmaster/getQuotaionNoByClient\", { \"nclientcatcode\": methodParam.inputData.nclientcatcode, \"nclientcode\": methodParam.inputData.nclientcode, \"userinfo\": methodParam.inputData.userinfo }).then(response => {\r\n            let QuotationNo = [];\r\n            QuotationNo = constructOptionList(response.data || [], \"nquotationcode\", \"squotationno\", undefined, undefined, false).get(\"OptionList\");\r\n            QuotationNo.map(key => {\r\n\r\n            })\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false, QuotationNo, selectedRecord\r\n                }\r\n            }\r\n\r\n\r\n            )\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function closureProjectMaster(inputParam, masterData) {\r\n\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        const formData = inputParam.formData;\r\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n        rsapi.post(inputParam.classUrl + \"/\" + \"closure\" + inputParam.methodUrl, formData).then(response => {\r\n            masterData = {\r\n                ...masterData,\r\n                ...response.data\r\n            }\r\n            \r\n            // const foundIndex = masterData[\"ProjectMaster\"].findIndex(\r\n            //     x => x[\"nprojectmastercode\"] === masterData[\"SelectedProjectMaster\"][\"nprojectmastercode\"]\r\n            //   );\r\n            if (masterData[\"searchedData\"]) {\r\n                const foundIndex1 = masterData[\"searchedData\"].findIndex(\r\n                    x => x[\"nprojectmastercode\"] === masterData[\"SelectedProjectMaster\"][\"nprojectmastercode\"]\r\n                );\r\n             // masterData[\"ProjectMaster\"][foundIndex] = masterData[\"SelectedProjectMaster\"];\r\n\r\n            }\r\n            masterData = sortData(masterData);\r\n\r\n            //  })             \r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    loading: false, masterData, openModal: false, operation: inputParam.operation,\r\n                    ncontrolCode: inputParam.ncontrolCode,\r\n                }\r\n            }\r\n\r\n\r\n            )\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\nexport function validateEsignforModal(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n                    const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\r\n\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\r\n                    }\r\n                    dispatch(modalSave(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function projectMasterModal(selectedProjecmaster, operation, screenName, ncontrolcode, sdate, userInfo) {\r\n    return (dispatch) => {\r\n        let alertMsg;\r\n        let check;\r\n        if (operation === \"complete\" || operation === \"retire\") {\r\n            check = selectedProjecmaster.ntransactionstatus === transactionStatus.APPROVED;\r\n            alertMsg = \"IDS_SELECTAPPROVEVERSION\";\r\n        }\r\n        if (operation === \"closure\") {\r\n            alertMsg = \"IDS_SELECTCOMPLETEORRETIREACTION\";\r\n            check = selectedProjecmaster.ntransactionstatus === transactionStatus.COMPLETED || selectedProjecmaster.ntransactionstatus === transactionStatus.RETIRED;\r\n\r\n        }\r\n\r\n\r\n        if (check) {\r\n            dispatch(initRequest(true));\r\n            let selectedRecord = {};\r\n            let ntimezonedate;\r\n            let stimezonedate;\r\n            let openModal = false;\r\n            let modalShow = false;\r\n            if (operation === \"complete\") {\r\n                ntimezonedate = \"ntzprojectcompletiondate\";\r\n                stimezonedate = \"stzprojectcompletiondate\";\r\n                modalShow = true;\r\n            }\r\n            if (operation === \"retire\") {\r\n                ntimezonedate = \"ntzprojectretiredate\";\r\n                stimezonedate = \"stzprojectretiredate\";\r\n                modalShow = true;\r\n\r\n            }\r\n            if (operation === \"closure\") {\r\n\r\n                ntimezonedate = \"ntzprojectclosuredate\";\r\n                stimezonedate = \"stzprojectclosuredate\";\r\n                openModal = true;\r\n            }\r\n            let urlArray = [];\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                userinfo: userInfo\r\n            });\r\n            urlArray = [timeZoneService, UTCtimeZoneService]\r\n            Axios.all(urlArray).then(response => {\r\n                const timezoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                let date = rearrangeDateFormat(userInfo, response[1].data);\r\n\r\n                selectedRecord = {\r\n                    ntimezonedate: {\r\n                        \"value\": userInfo.ntimezonecode,\r\n                        \"label\": userInfo.stimezoneid\r\n                    },\r\n                    stimezonedate: userInfo.stimezoneid,\r\n                };\r\n\r\n                selectedRecord[sdate] = date;\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, selectedRecord, modalShow: modalShow, operation: operation,\r\n                        screenName: screenName, TimeZoneList,\r\n                        ncontrolcode: ncontrolcode,\r\n                        openModal: openModal\r\n                    }\r\n                }\r\n\r\n\r\n                )\r\n            })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: alertMsg }));\r\n\r\n        }\r\n\r\n    };\r\n}\r\nexport const getAvailableQuotation = (Item,screenName, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        if (Item.ntransactionstatus === transactionStatus.DRAFT|| Item.ntransactionstatus === transactionStatus.APPROVED) {\r\n            const inputParam = {\r\n                nprojectmastercode: Item.nprojectmastercode,\r\n                \"userinfo\": userInfo\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"projectmaster/getAvailableProjectQuotation\", inputParam)\r\n                .then(response => {\r\n                    const availableDataMap = constructOptionList(response.data, \"nquotationcode\", \"squotationno\", false, false, true);\r\n                    const ProjectQuotationList = availableDataMap.get(\"OptionList\");\r\n                    dispatch({\r\n                    \r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openChildModal: true,\r\n                            showSaveContinue: false,\r\n                            ProjectQuotationList: ProjectQuotationList,\r\n                            screenName: screenName,\r\n                            operation: \"create\",\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 417) {\r\n                        toast.info(error.response.data)\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTAPPROVEDRECORD\"}));\r\n\r\n        }\r\n    }\r\n}\r\nexport const getActiveProjectQuotationById = (quotationParam) => {\r\n    return function (dispatch) {\r\n        if (quotationParam.SelectedProjectMaster.ntransactionstatus === transactionStatus.DRAFT\r\n            || quotationParam.SelectedProjectMaster.ntransactionstatus === transactionStatus.APPROVED) {\r\n            let urlArray = [];\r\n\r\n            const quotationById = rsapi.post(\"projectmaster/getQuotation\", {\r\n                \"userinfo\": quotationParam.userInfo\r\n            });\r\n          \r\n            const activeQuotationById = rsapi.post(\"projectmaster/getActiveProjectQuotationById\", {\r\n                [quotationParam.primaryKeyField]: quotationParam.primaryKeyValue,\r\n                \"userinfo\": quotationParam.userInfo\r\n            });\r\n              \r\n            urlArray = [quotationById, activeQuotationById];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    let quotationData = [];\r\n\r\n                    const quotationOptions = constructOptionList(response[0].data.Quotation || [], \"nquotationcode\", \"squotationno\", false, false, true);\r\n\r\n                    const ProjectQuotationList = quotationOptions.get(\"OptionList\");\r\n\r\n                    quotationData.push({\r\n                        \"value\": response[1].data[\"nquotationcode\"],\r\n                        \"label\": response[1].data[\"squotationno\"]\r\n                    });\r\n                    selectedRecord = response[1].data;\r\n\r\n                    selectedRecord[\"nquotationcode\"] = quotationData[0];\r\n               \r\n                \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ProjectQuotationList: ProjectQuotationList,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: quotationParam.operation,\r\n                            screenName: \"IDS_QUOTATION\",\r\n                            openChildModal: true,\r\n                            ncontrolCode: quotationParam.ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTAPPROVEDRECORD\"}));\r\n\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}