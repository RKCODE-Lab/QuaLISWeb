{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList } from '../components/CommonScript';\nexport function showChecklistQBAddScreen(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('checklistqb/getAddEditData', {\n      \"userinfo\": userInfo\n    }).then(response => {\n      // let optionsQBCategory =[];\n      // let optionsChecklistComponent = [];\n      const optionsQBCategoryMap = constructOptionList(response.data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\n      const optionsChecklistComponentMap = constructOptionList(response.data.checklistcomponent || [], \"nchecklistcomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const optionsQBCategory = optionsQBCategoryMap.get(\"OptionList\");\n      const optionsChecklistComponent = optionsChecklistComponentMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // optionsQBCategory:response.data.qbcategory,\n          // optionsChecklistComponent:response.data.checklistcomponent,\n          optionsQBCategory,\n          optionsChecklistComponent,\n          openModal: true,\n          operation: \"create\",\n          selectedRecord: {},\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchChecklistQBById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('checklistqb/getAddEditData', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post(\"checklistqb/getActiveChecklistQBById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      const optionsQBCategoryMap = constructOptionList(response[0].data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\n      const optionsChecklistComponentMap = constructOptionList(response[0].data.checklistcomponent || [], \"nchecklistcomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const optionsQBCategory = optionsQBCategoryMap.get(\"OptionList\");\n      const optionsChecklistComponent = optionsChecklistComponentMap.get(\"OptionList\");\n      selectedRecord = response[1].data;\n      selectedRecord['valueQBCategory'] = {\n        value: response[1].data.nchecklistqbcategorycode,\n        label: response[1].data.schecklistqbcategoryname\n      };\n      selectedRecord['valueChecklistComponent'] = {\n        value: response[1].data.nchecklistcomponentcode,\n        label: response[1].data.scomponentname\n      };\n      let mandatoryFields = [{\n        \"idsName\": \"IDS_QBCATEGORYNAME\",\n        \"dataField\": \"valueQBCategory\"\n      }, {\n        \"idsName\": \"IDS_QUESTION\",\n        \"dataField\": \"squestion\"\n      }, {\n        \"idsName\": \"IDS_COMPONENT\",\n        \"dataField\": \"valueChecklistComponent\"\n      }];\n\n      if (parseInt(response[1].data.nchecklistcomponentcode) === 1 || parseInt(response[1].data.nchecklistcomponentcode) === 4 || parseInt(response[1].data.nchecklistcomponentcode) === 8) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_QUESTIONDATA\",\n          \"dataField\": \"squestiondata\"\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: response[1].data,\n          operation: editParam.operation,\n          // optionsQBCategory:response[0].data.qbcategory,\n          // optionsChecklistComponent:response[0].data.checklistcomponent,\n          optionsQBCategory,\n          optionsChecklistComponent,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          mandatoryFields\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/ChecklistQBAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","showChecklistQBAddScreen","userInfo","ncontrolcode","dispatch","post","then","response","optionsQBCategoryMap","data","qbcategory","undefined","optionsChecklistComponentMap","checklistcomponent","optionsQBCategory","get","optionsChecklistComponent","type","payload","openModal","operation","selectedRecord","loading","catch","error","status","message","warn","fetchChecklistQBById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","all","selectedId","value","nchecklistqbcategorycode","label","schecklistqbcategoryname","nchecklistcomponentcode","scomponentname","mandatoryFields","parseInt","push","screenName","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function showChecklistQBAddScreen (userInfo, ncontrolcode){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post('checklistqb/getAddEditData',{\"userinfo\":userInfo}) \r\n        .then(response=> { \r\n            // let optionsQBCategory =[];\r\n            // let optionsChecklistComponent = [];\r\n\r\n            const optionsQBCategoryMap = constructOptionList(response.data.qbcategory || [], \"nchecklistqbcategorycode\",\"schecklistqbcategoryname\", undefined, undefined, true);\r\n            const optionsChecklistComponentMap  = constructOptionList(response.data.checklistcomponent  || [], \"nchecklistcomponentcode\",\"scomponentname\" , undefined, undefined, true);\r\n\r\n            const optionsQBCategory = optionsQBCategoryMap.get(\"OptionList\");\r\n            const optionsChecklistComponent = optionsChecklistComponentMap.get(\"OptionList\");\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload:{\r\n                    // optionsQBCategory:response.data.qbcategory,\r\n                    // optionsChecklistComponent:response.data.checklistcomponent,\r\n                    optionsQBCategory,\r\n                    optionsChecklistComponent,\r\n                    openModal:true,\r\n                    operation:\"create\",\r\n                    selectedRecord:{}\r\n                    , ncontrolcode,loading:false\r\n                }\r\n            });         \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchChecklistQBById (editParam){  \r\n    return function(dispatch){\r\n        const URL1= rsapi.post('checklistqb/getAddEditData',{\"userinfo\":editParam.userInfo})\r\n        const URL2=rsapi.post(\"checklistqb/getActiveChecklistQBById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1,URL2])\r\n        .then(response=> { \r\n            let selectedRecord={}\r\n            let selectedId = editParam.primaryKeyValue;\r\n            const optionsQBCategoryMap = constructOptionList(response[0].data.qbcategory || [], \"nchecklistqbcategorycode\",\"schecklistqbcategoryname\", undefined, undefined, true);\r\n            const optionsChecklistComponentMap  = constructOptionList(response[0].data.checklistcomponent  || [], \"nchecklistcomponentcode\",\"scomponentname\" , undefined, undefined, true);\r\n            const optionsQBCategory = optionsQBCategoryMap.get(\"OptionList\");\r\n            const optionsChecklistComponent = optionsChecklistComponentMap.get(\"OptionList\");\r\n            selectedRecord=response[1].data\r\n            selectedRecord['valueQBCategory']={value:response[1].data.nchecklistqbcategorycode,label:response[1].data.schecklistqbcategoryname}\r\n            selectedRecord['valueChecklistComponent']={value:response[1].data.nchecklistcomponentcode,label:response[1].data.scomponentname}\r\n            let mandatoryFields=[\r\n                {\"idsName\":\"IDS_QBCATEGORYNAME\",\"dataField\":\"valueQBCategory\"},\r\n                {\"idsName\":\"IDS_QUESTION\",\"dataField\":\"squestion\"},\r\n                {\"idsName\":\"IDS_COMPONENT\",\"dataField\":\"valueChecklistComponent\"},\r\n            ];\r\n            if(parseInt(response[1].data.nchecklistcomponentcode)===1||parseInt(response[1].data.nchecklistcomponentcode)===4||parseInt(response[1].data.nchecklistcomponentcode)===8){\r\n                mandatoryFields.push({\"idsName\":\"IDS_QUESTIONDATA\",\"dataField\":\"squestiondata\"})\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload:{\r\n                selectedRecord : response[1].data,\r\n                operation:editParam.operation,\r\n                // optionsQBCategory:response[0].data.qbcategory,\r\n                // optionsChecklistComponent:response[0].data.checklistcomponent,\r\n                optionsQBCategory,\r\n                optionsChecklistComponent,\r\n                openModal: true,\r\n                screenName:editParam.screenName,\r\n                ncontrolcode:editParam.ncontrolCode,\r\n                loading:false,selectedId,\r\n                mandatoryFields\r\n            }\r\n            }); \r\n            \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n }"]},"metadata":{},"sourceType":"module"}