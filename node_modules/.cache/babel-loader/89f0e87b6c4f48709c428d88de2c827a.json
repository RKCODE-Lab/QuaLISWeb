{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\certificatetype\\\\CertificateType.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, fetchRecordCertificateType, getCertificateTypeVersion, getReportMasterByCertificateType, getReportDetailByReport, fetchCertificateTypeVersionById } from '../../../actions';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport AddCertificateType from './AddCertificateType';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport AddCertificateTypeVersion from './AddCertificateTypeVersion';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass CertificateType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onInputOnChange = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputChangeVersion = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nreportcode' || fieldName === 'npreviewreportcode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getReportDetailByReport(comboData.value, this.props.Login.masterData.selectedCertificateType.ncertificatetypecode, selectedRecord, this.props.Login.userInfo, fieldName);\n      } else if (fieldName === 'nreportdetailcode') {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord['sdisplaystatus'] = comboData.item.sdisplaystatus;\n        selectedRecord['nversionno'] = comboData.item.nversionno;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === 'npreviewreportdetailcode') {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord['spreviewdisplaystatus'] = comboData.item.sdisplaystatus;\n        selectedRecord['npreviewversionno'] = comboData.item.nversionno;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let dataState = undefined;\n      let operation = \"\";\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = {\n        selectedObject: \"selectedCertificateType\",\n        primaryKeyField: \"ncertificatetypecode\",\n        inputListName: \"certificatetype\",\n        fetchUrl: \"certificatetype/getCertificateTypeByClick\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        // edit    \n        postParam['primaryKeyValue'] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\n        let selectedRecord = this.state.selectedRecord ? this.state.selectedRecord : {};\n        inputData[\"certificatetype\"] = {\n          'ncertificatetypecode': selectedRecord.ncertificatetypecode\n        };\n        inputData[\"certificatetype\"]['nedqm'] = selectedRecord['nedqm'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['naccredited'] = selectedRecord['naccredited'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['ntransactionstatus'] = selectedRecord['ntransactionstatus'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['scertificatetype'] = selectedRecord['scertificatetype'];\n        inputData[\"certificatetype\"]['sdescription'] = selectedRecord['sdescription'] || \"\";\n        inputData[\"certificatetype\"][\"ncertificatereporttypecode\"] = selectedRecord[\"ncertificatereporttypecode\"].value;\n        operation = \"update\";\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add             \n        inputData[\"certificatetype\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"certificatetype\"]['nedqm'] = this.state.selectedRecord['nedqm'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['naccredited'] = this.state.selectedRecord['naccredited'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['ntransactionstatus'] = this.state.selectedRecord['ntransactionstatus'] || transactionStatus.YES;\n        inputData[\"certificatetype\"]['scertificatetype'] = this.state.selectedRecord['scertificatetype'];\n        inputData[\"certificatetype\"]['sdescription'] = this.state.selectedRecord['sdescription'] || \"\";\n        inputData[\"certificatetype\"][\"ncertificatereporttypecode\"] = this.state.selectedRecord[\"ncertificatereporttypecode\"].value;\n        operation = \"create\";\n      }\n\n      const inputParam = {\n        classUrl: \"certificatetype\",\n        methodUrl: \"CertificateType\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        postParam,\n        searchRef: this.searchRef,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveVersion = (saveType, formRef) => {\n      let dataState = undefined;\n      let operation = \"\";\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit    \n        selectedId = this.props.Login.selectedId;\n        inputData[\"certificatetypeversion\"] = {};\n        inputData[\"certificatetypeversion\"][\"ncertificatetypeversioncode\"] = selectedId;\n        inputData[\"certificatetypeversion\"][\"ncertificatetypecode\"] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\n        inputData[\"certificatetypeversion\"][\"nreportdetailcode\"] = this.state.selectedRecord[\"nreportdetailcode\"].value;\n        inputData[\"certificatetypeversion\"][\"npreviewreportdetailcode\"] = this.state.selectedRecord[\"npreviewreportdetailcode\"].value;\n        inputData[\"certificatetypeversion\"][\"ncertificatetypeversionno\"] = this.state.selectedRecord[\"ncertificatetypeversionno\"];\n        inputData[\"certificatetypeversion\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\n        inputData[\"certificatetypeversion\"][\"nversionno\"] = this.state.selectedRecord[\"nversionno\"];\n        inputData[\"certificatetypeversion\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        operation = \"update\";\n        dataState = this.state.dataState;\n      } else {\n        //add             \n        inputData[\"certificatetypeversion\"] = {};\n        inputData[\"certificatetypeversion\"][\"ncertificatetypecode\"] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\n        inputData[\"certificatetypeversion\"][\"nreportdetailcode\"] = this.state.selectedRecord[\"nreportdetailcode\"].value;\n        inputData[\"certificatetypeversion\"][\"npreviewreportdetailcode\"] = this.state.selectedRecord[\"npreviewreportdetailcode\"].value;\n        inputData[\"certificatetypeversion\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] || transactionStatus.DEACTIVE;\n        inputData[\"certificatetypeversion\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        inputData[\"certificatetypeversion\"][\"nversionno\"] = this.state.selectedRecord[\"nversionno\"];\n        operation = \"create\";\n      }\n\n      const inputParam = {\n        classUrl: 'certificatetype',\n        methodUrl: 'CertificateTypeVersion',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openChildModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openChildModal\");\n      }\n    };\n\n    this.ConfirmDelete = deleteParam => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord({ ...deleteParam,\n        selectedRecord: this.props.Login.masterData.selectedCertificateType\n      }));\n    };\n\n    this.deleteRecord = deleteParam => {\n      //deleteRecord = (selectedRecord, operation, ncontrolCode) => {       \n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"CertificateType\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          certificatetype: deleteParam.selectedRecord,\n          userinfo: this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.openModal ? 'openModal' : 'openChildModal';\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"certificatetype\",\n        methodUrl: \"CertificateType\",\n        displayName: \"IDS_CERTIFICATETYPE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.searchRef = React.createRef();\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const addCTId = this.state.controlMap.has(\"AddCertificateType\") && this.state.controlMap.get(\"AddCertificateType\").ncontrolcode;\n    const editID = this.state.controlMap.has(\"EditCertificateType\") && this.state.controlMap.get(\"EditCertificateType\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteCertificateType\") && this.state.controlMap.get(\"DeleteCertificateType\").ncontrolcode;\n    const createVersionId = this.state.controlMap.has(\"AddCertificateTypeVersion\") && this.state.controlMap.get(\"AddCertificateTypeVersion\").ncontrolcode;\n    const editVersionId = this.state.controlMap.has(\"EditCertificateTypeVersion\") && this.state.controlMap.get(\"EditCertificateTypeVersion\").ncontrolcode;\n    let extractedColumnList = [{\n      \"idsName\": \"IDS_CERTIFICATETYPEVERSION\",\n      \"dataField\": \"ncertificatetypeversionno\",\n      \"width\": \"180px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"180px\"\n    }, {\n      \"idsName\": \"IDS_REPORTNAME\",\n      \"dataField\": \"sreportname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_REPORTVERSIONNO\",\n      \"dataField\": \"nversionno\",\n      \"width\": \"180px\"\n    }];\n    const AddCertificateType1 = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField: \"ncertificatetypecode\",\n      undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addCTId\n    };\n    const editParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField: \"ncertificatetypecode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    };\n    const editVersionParam = {\n      userInfo: this.props.Login.userInfo,\n      primaryKeyField: \"ncertificatetypeversioncode\",\n      ncontrolCode: editVersionId\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_CERTIFICATETYPE\",\n      \"dataField\": \"scertificatetype\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, // { \"idsName\": \"IDS_VERSIONNO\", \"dataField\": \"sversionno\" },\n    {\n      \"idsName\": \"IDS_REPORTBATCHTYPE\",\n      \"dataField\": \"ncertificatereporttypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryVersionFields = [{\n      \"idsName\": \"IDS_REPORTNAME\",\n      \"dataField\": \"nreportcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_REPORTVERSIONNO\",\n      \"dataField\": \"nreportdetailcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PREVIEWREPORTNAME\",\n      \"dataField\": \"npreviewreportcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PREVIEWREPORTVERSIONNO\",\n      \"dataField\": \"npreviewreportdetailcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const filterParam = {\n      inputListName: \"certificatetype\",\n      selectedObject: \"selectedCertificateType\",\n      primaryKeyField: \"ncertificatetypecode\",\n      fetchUrl: \"certificatetype/getCertificateTypeByClick\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"scertificatetype\", \"sdescription\", \"sbatchdisplayname\", \"saccreditedCertificate\", \"sdisplaystatus\"]\n    };\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedCertificateType && this.props.Login.masterData.selectedCertificateType.ntransactionstatus === transactionStatus.YES) {\n      userStatusCSS = \"outline-success\";\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_CERTIFICATETYPE\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.certificatetype || [],\n      getMasterDetail: certificatetype => this.props.getCertificateTypeVersion(certificatetype, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedCertificateType,\n      primaryKeyField: \"ncertificatetypecode\",\n      mainField: \"scertificatetype\",\n      firstField: \"saccreditedCertificate\",\n      filterColumnData: this.props.filterColumnData,\n      openModal: () => this.props.fetchRecordCertificateType(AddCertificateType1),\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addCTId,\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      hidePaging: true,\n      reloadData: this.reloadData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.certificatetype && this.props.Login.masterData.certificatetype.length > 0 && this.props.Login.masterData.selectedCertificateType ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedCertificateType.scertificatetype), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedCertificateType.sdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editUser\",\n      hidden: this.state.userRoleControlRights.indexOf(editID) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.props.fetchRecordCertificateType({ ...editParam,\n        primaryKeyValue: this.props.Login.masterData.selectedCertificateType.ncertificatetypecode\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteUser\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTBATCHTYPE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedCertificateType.sbatchdisplayname))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EDQM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedCertificateType.sedqmCertificate))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Report Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedCertificateType.sdescription ? this.props.Login.masterData.selectedCertificateType.sdescription === \"\" ? \"-\" : this.props.Login.masterData.selectedCertificateType.sdescription : \"-\")))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      id: \"certificateversion\",\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 81\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADDVERSION\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(createVersionId) === -1,\n      onClick: () => this.props.getReportMasterByCertificateType(this.props.Login.masterData.selectedCertificateType.ncertificatetypecode, this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 85\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 85\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ncertificatetypeversioncode\",\n      data: this.props.Login.masterData.cerificateTypeVersion || [],\n      dataResult: process(this.props.Login.masterData.cerificateTypeVersion, this.state.dataState),\n      dataState: this.state.dataState,\n      dataStateChange: event => this.setState({\n        dataState: event.dataState\n      }),\n      extractedColumnList: extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"CertificateTypeVersion\",\n      gridHeight: \"450px\",\n      pageable: true,\n      fetchRecord: this.props.fetchCertificateTypeVersionById,\n      editParam: editVersionParam,\n      selectedId: this.props.Login.selectedId,\n      isComponent: true,\n      isActionRequired: true,\n      isToolBarRequired: false,\n      scrollable: \"scrollable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 77\n      }\n    })))))))) : \"\"))))))), (this.props.Login.openModal || this.props.Login.openChildModal) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.openModal ? this.onSaveClick : this.onSaveVersion,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.openModal ? mandatoryFields : mandatoryVersionFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 29\n        }\n      }) : this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(AddCertificateTypeVersion, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputChangeVersion,\n        onComboChange: this.onComboChange,\n        reportMasterList: this.props.Login.reportMasterList || [],\n        reportDetailsList: this.props.Login.reportDetailsList || [],\n        previewReportMasterList: this.props.Login.previewReportMasterList || [],\n        previewReportDetailsList: this.props.Login.previewReportDetailsList || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddCertificateType, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        reportBatchTypeList: this.props.Login.reportBatchTypeList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      controlMap,\n      selectedRecord,\n      userRoleControlRights,\n      dataState\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      }\n\n      dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      };\n      updateState = true;\n    } else if (this.props.Login.selectedRecord !== this.state.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        dataState\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecordCertificateType,\n  updateStore,\n  getReportDetailByReport,\n  fetchCertificateTypeVersionById,\n  validateEsignCredential,\n  filterColumnData,\n  getCertificateTypeVersion,\n  getReportMasterByCertificateType\n})(injectIntl(CertificateType));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/certificatetype/CertificateType.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPlus","faPencilAlt","faTrashAlt","connect","injectIntl","FormattedMessage","callService","crudMaster","validateEsignCredential","updateStore","filterColumnData","fetchRecordCertificateType","getCertificateTypeVersion","getReportMasterByCertificateType","getReportDetailByReport","fetchCertificateTypeVersionById","process","toast","ListMaster","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","ContentPanel","ReadOnlyText","ConfirmMessage","SlideOutModal","Esign","AddCertificateType","DataGrid","AddCertificateTypeVersion","ReactTooltip","mapStateToProps","state","Login","CertificateType","Component","constructor","props","onInputOnChange","event","selectedRecord","target","type","name","checked","YES","NO","value","setState","onInputChangeVersion","ACTIVE","DEACTIVE","onComboChange","comboData","fieldName","masterData","selectedCertificateType","ncertificatetypecode","userInfo","item","sdisplaystatus","nversionno","closeModal","loadEsign","openModal","openChildModal","operation","updateInfo","typeName","data","selectedId","onSaveClick","saveType","formRef","dataState","undefined","inputData","postParam","selectedObject","primaryKeyField","inputListName","fetchUrl","fecthInputObject","userinfo","nmastersitecode","inputParam","classUrl","methodUrl","displayName","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","intl","formatMessage","id","onSaveVersion","ConfirmDelete","deleteParam","confirmMessage","confirm","deleteRecord","expanded","certificatetype","validateEsign","modalName","sreason","password","reloadData","current","createRef","masterStatus","error","skip","take","settings","parseInt","controlMap","Map","getDerivedStateFromProps","warn","render","addCTId","has","get","ncontrolcode","editID","deleteId","createVersionId","editVersionId","extractedColumnList","AddCertificateType1","editParam","editVersionParam","mandatoryFields","mandatoryVersionFields","filterParam","searchFieldList","userStatusCSS","ntransactionstatus","searchedData","length","scertificatetype","indexOf","primaryKeyValue","sbatchdisplayname","sedqmCertificate","sdescription","cerificateTypeVersion","reportMasterList","reportDetailsList","previewReportMasterList","previewReportDetailsList","reportBatchTypeList","componentDidUpdate","previousProps","updateState","Object","values","map","push"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, fetchRecordCertificateType,\r\n    getCertificateTypeVersion, getReportMasterByCertificateType, getReportDetailByReport, fetchCertificateTypeVersionById\r\n} from '../../../actions';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddCertificateType from './AddCertificateType';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport AddCertificateTypeVersion from './AddCertificateTypeVersion';\r\nimport ReactTooltip from 'react-tooltip';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass CertificateType extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.searchRef = React.createRef();\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const addCTId = this.state.controlMap.has(\"AddCertificateType\") && this.state.controlMap.get(\"AddCertificateType\").ncontrolcode\r\n        const editID = this.state.controlMap.has(\"EditCertificateType\") && this.state.controlMap.get(\"EditCertificateType\").ncontrolcode\r\n        const deleteId = this.state.controlMap.has(\"DeleteCertificateType\") && this.state.controlMap.get(\"DeleteCertificateType\").ncontrolcode\r\n        const createVersionId = this.state.controlMap.has(\"AddCertificateTypeVersion\") && this.state.controlMap.get(\"AddCertificateTypeVersion\").ncontrolcode\r\n        const editVersionId = this.state.controlMap.has(\"EditCertificateTypeVersion\") && this.state.controlMap.get(\"EditCertificateTypeVersion\").ncontrolcode\r\n        let extractedColumnList = [\r\n            { \"idsName\": \"IDS_CERTIFICATETYPEVERSION\", \"dataField\": \"ncertificatetypeversionno\", \"width\": \"180px\" },\r\n            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"180px\" },\r\n            { \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"sreportname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_REPORTVERSIONNO\", \"dataField\": \"nversionno\", \"width\": \"180px\" }\r\n        ];\r\n\r\n        const AddCertificateType1 = {\r\n            screenName: this.props.Login.screenName, primaryKeyField: \"ncertificatetypecode\", undefined, operation: \"create\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addCTId\r\n        };\r\n        const editParam = {\r\n            screenName: this.props.Login.screenName, primaryKeyField: \"ncertificatetypecode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\", ncontrolCode: deleteId };\r\n        const editVersionParam = {\r\n            userInfo: this.props.Login.userInfo,\r\n            primaryKeyField: \"ncertificatetypeversioncode\",\r\n            ncontrolCode: editVersionId\r\n        };\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_CERTIFICATETYPE\", \"dataField\": \"scertificatetype\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            // { \"idsName\": \"IDS_VERSIONNO\", \"dataField\": \"sversionno\" },\r\n            { \"idsName\": \"IDS_REPORTBATCHTYPE\", \"dataField\": \"ncertificatereporttypecode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ];\r\n        const mandatoryVersionFields = [\r\n            { \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"nreportcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_REPORTVERSIONNO\", \"dataField\": \"nreportdetailcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_PREVIEWREPORTNAME\", \"dataField\": \"npreviewreportcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_PREVIEWREPORTVERSIONNO\", \"dataField\": \"npreviewreportdetailcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n\r\n        const filterParam = {\r\n            inputListName: \"certificatetype\",\r\n            selectedObject: \"selectedCertificateType\",\r\n            primaryKeyField: \"ncertificatetypecode\",\r\n            fetchUrl: \"certificatetype/getCertificateTypeByClick\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"scertificatetype\", \"sdescription\", \"sbatchdisplayname\", \"saccreditedCertificate\", \"sdisplaystatus\"]\r\n        }\r\n\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedCertificateType && this.props.Login.masterData.selectedCertificateType.ntransactionstatus === transactionStatus.YES) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-4\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_CERTIFICATETYPE\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.certificatetype || []}\r\n                                getMasterDetail={(certificatetype) => this.props.getCertificateTypeVersion(certificatetype, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedCertificateType}\r\n                                primaryKeyField={\"ncertificatetypecode\"}\r\n                                mainField=\"scertificatetype\"\r\n                                firstField=\"saccreditedCertificate\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                openModal={() => this.props.fetchRecordCertificateType(AddCertificateType1)}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addCTId}\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                hidePaging={true}\r\n                                reloadData={this.reloadData}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            {this.props.Login.masterData.certificatetype && this.props.Login.masterData.certificatetype.length > 0 && this.props.Login.masterData.selectedCertificateType ?\r\n                                                <>\r\n                                                    <Card.Header>\r\n                                                        <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                                                        <Card.Title className=\"product-title-main\">\r\n                                                            {this.props.Login.masterData.selectedCertificateType.scertificatetype}\r\n                                                        </Card.Title>\r\n                                                        <Card.Subtitle>\r\n                                                            <div className=\"d-flex product-category justify-content-end\">\r\n                                                                <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                    <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.sdisplaystatus}\r\n                                                                    </span>\r\n                                                                </h2>\r\n                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                <div className=\"d-inline\">\r\n                                                                    <Nav.Link name=\"editUser\" hidden={this.state.userRoleControlRights.indexOf(editID) === -1}\r\n                                                                        className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.props.fetchRecordCertificateType({ ...editParam, primaryKeyValue: this.props.Login.masterData.selectedCertificateType.ncertificatetypecode })}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                    </Nav.Link>\r\n\r\n                                                                    <Nav.Link name=\"deleteUser\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        onClick={() => this.ConfirmDelete(deleteParam)}>\r\n                                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                </div>\r\n                                                                {/* </Tooltip> */}\r\n                                                            </div>\r\n                                                        </Card.Subtitle>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body className=\"form-static-wrap\">\r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        <FormattedMessage id=\"IDS_REPORTBATCHTYPE\" />\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.sbatchdisplayname}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        <FormattedMessage id=\"IDS_EDQM\" />\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.sedqmCertificate}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            {/* <Col md={3}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        <FormattedMessage id=\"IDS_ACCREDITED\" />\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.saccreditedCertificate}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                            <Col md={3}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        <FormattedMessage id=\"IDS_ACTIVE\" />\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.sdisplaystatus}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col> */}\r\n                                                            <Col md={12}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        <FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Report Type\" />\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>\r\n                                                                        {this.props.Login.masterData.selectedCertificateType.sdescription ?\r\n                                                                            this.props.Login.masterData.selectedCertificateType.sdescription === \"\" ?\r\n                                                                                \"-\"\r\n                                                                                : this.props.Login.masterData.selectedCertificateType.sdescription\r\n                                                                            : \"-\"}\r\n                                                                    </ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <Card id=\"certificateversion\" className=\"at-tabs border-0\">\r\n                                                                    <Row>\r\n                                                                        <Col md={12}>\r\n                                                                            <div className=\"d-flex justify-content-end\">\r\n                                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                                                                                <Nav.Link className=\"add-txt-btn\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDVERSION\" })}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(createVersionId) === -1}\r\n                                                                                    onClick={() => this.props.getReportMasterByCertificateType(this.props.Login.masterData.selectedCertificateType.ncertificatetypecode, this.props.Login.userInfo)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                                                    <FormattedMessage id='IDS_VERSION' />\r\n                                                                                </Nav.Link>\r\n                                                                            </div>\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                    <Row>\r\n                                                                        <Col md={12}>\r\n                                                                            <DataGrid\r\n                                                                                primaryKeyField={\"ncertificatetypeversioncode\"}\r\n                                                                                data={this.props.Login.masterData.cerificateTypeVersion || []}\r\n                                                                                dataResult={process(this.props.Login.masterData.cerificateTypeVersion, this.state.dataState)}\r\n                                                                                dataState={this.state.dataState}\r\n                                                                                dataStateChange={(event) => this.setState({ dataState: event.dataState })}\r\n                                                                                extractedColumnList={extractedColumnList}\r\n                                                                                controlMap={this.state.controlMap}\r\n                                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                methodUrl=\"CertificateTypeVersion\"\r\n                                                                                gridHeight={\"450px\"}\r\n                                                                                pageable={true}\r\n                                                                                fetchRecord={this.props.fetchCertificateTypeVersionById}\r\n                                                                                editParam={editVersionParam}\r\n                                                                                selectedId={this.props.Login.selectedId}\r\n                                                                                isComponent={true}\r\n                                                                                isActionRequired={true}\r\n                                                                                isToolBarRequired={false}\r\n                                                                                scrollable={\"scrollable\"}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </>\r\n                                                : \"\"}\r\n                                        </Card>\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    (this.props.Login.openModal || this.props.Login.openChildModal) &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal || this.props.Login.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.Login.openModal ? this.onSaveClick : this.onSaveVersion}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.openModal ? mandatoryFields : mandatoryVersionFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.openChildModal ?\r\n                                <AddCertificateTypeVersion\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputChangeVersion}\r\n                                    onComboChange={this.onComboChange}\r\n                                    reportMasterList={this.props.Login.reportMasterList || []}\r\n                                    reportDetailsList={this.props.Login.reportDetailsList || []}\r\n                                    previewReportMasterList={this.props.Login.previewReportMasterList || []}\r\n                                    previewReportDetailsList={this.props.Login.previewReportDetailsList || []}\r\n                                />\r\n                                : <AddCertificateType\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    reportBatchTypeList={this.props.Login.reportBatchTypeList}\r\n                                />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { controlMap, selectedRecord, userRoleControlRights,dataState } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                \r\n            }\r\n            dataState = {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            updateState = true;\r\n        }\r\n        else if (this.props.Login.selectedRecord !== this.state.selectedRecord) {\r\n\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n\r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, selectedRecord,dataState\r\n            });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChangeVersion = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === 'nreportcode' || fieldName === 'npreviewreportcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getReportDetailByReport(comboData.value,\r\n                this.props.Login.masterData.selectedCertificateType.ncertificatetypecode,\r\n                selectedRecord, this.props.Login.userInfo, fieldName)\r\n\r\n        } else if (fieldName === 'nreportdetailcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord['sdisplaystatus'] = comboData.item.sdisplaystatus\r\n            selectedRecord['nversionno'] = comboData.item.nversionno\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === 'npreviewreportdetailcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord['spreviewdisplaystatus'] = comboData.item.sdisplaystatus\r\n            selectedRecord['npreviewversionno'] = comboData.item.nversionno\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //add / edit  \r\n        let dataState = undefined;\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = {\r\n            selectedObject: \"selectedCertificateType\",\r\n            primaryKeyField: \"ncertificatetypecode\",\r\n            inputListName: \"certificatetype\",\r\n            fetchUrl: \"certificatetype/getCertificateTypeByClick\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit    \r\n            postParam['primaryKeyValue'] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\r\n            let selectedRecord = this.state.selectedRecord ? this.state.selectedRecord : {};\r\n            inputData[\"certificatetype\"] ={'ncertificatetypecode':selectedRecord.ncertificatetypecode};\r\n            inputData[\"certificatetype\"]['nedqm'] =  selectedRecord['nedqm']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['naccredited'] =  selectedRecord['naccredited']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['ntransactionstatus'] =  selectedRecord['ntransactionstatus']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['scertificatetype'] =  selectedRecord['scertificatetype']\r\n            inputData[\"certificatetype\"]['sdescription'] =  selectedRecord['sdescription']||\"\"\r\n            inputData[\"certificatetype\"][\"ncertificatereporttypecode\"] = selectedRecord[\"ncertificatereporttypecode\"].value;\r\n\r\n            operation = \"update\";\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId;\r\n        }\r\n        else {\r\n            //add             \r\n            inputData[\"certificatetype\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[\"certificatetype\"]['nedqm'] = this.state.selectedRecord['nedqm']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['naccredited'] = this.state.selectedRecord['naccredited']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['ntransactionstatus'] = this.state.selectedRecord['ntransactionstatus']||transactionStatus.YES\r\n            inputData[\"certificatetype\"]['scertificatetype'] = this.state.selectedRecord['scertificatetype']\r\n            inputData[\"certificatetype\"]['sdescription'] = this.state.selectedRecord['sdescription']||\"\"\r\n\r\n            inputData[\"certificatetype\"][\"ncertificatereporttypecode\"] = this.state.selectedRecord[\"ncertificatereporttypecode\"].value;\r\n            operation = \"create\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: \"certificatetype\",\r\n            methodUrl: \"CertificateType\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            operation: operation, saveType, formRef, dataState, selectedId\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveVersion = (saveType, formRef) => {\r\n        let dataState = undefined;\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        let selectedId = null;\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit    \r\n            selectedId = this.props.Login.selectedId;\r\n            inputData[\"certificatetypeversion\"] = {};\r\n            inputData[\"certificatetypeversion\"][\"ncertificatetypeversioncode\"] = selectedId\r\n            inputData[\"certificatetypeversion\"][\"ncertificatetypecode\"] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\r\n            inputData[\"certificatetypeversion\"][\"nreportdetailcode\"] = this.state.selectedRecord[\"nreportdetailcode\"].value;\r\n            inputData[\"certificatetypeversion\"][\"npreviewreportdetailcode\"] = this.state.selectedRecord[\"npreviewreportdetailcode\"].value;\r\n            inputData[\"certificatetypeversion\"][\"ncertificatetypeversionno\"] = this.state.selectedRecord[\"ncertificatetypeversionno\"];\r\n            inputData[\"certificatetypeversion\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\r\n            inputData[\"certificatetypeversion\"][\"nversionno\"] = this.state.selectedRecord[\"nversionno\"];\r\n            inputData[\"certificatetypeversion\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n\r\n            operation = \"update\";\r\n            dataState = this.state.dataState;\r\n\r\n        }\r\n        else {\r\n            //add             \r\n            inputData[\"certificatetypeversion\"] = {};\r\n            inputData[\"certificatetypeversion\"][\"ncertificatetypecode\"] = this.props.Login.masterData.selectedCertificateType.ncertificatetypecode;\r\n            inputData[\"certificatetypeversion\"][\"nreportdetailcode\"] = this.state.selectedRecord[\"nreportdetailcode\"].value;\r\n            inputData[\"certificatetypeversion\"][\"npreviewreportdetailcode\"] = this.state.selectedRecord[\"npreviewreportdetailcode\"].value;\r\n            inputData[\"certificatetypeversion\"][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] || transactionStatus.DEACTIVE;\r\n            inputData[\"certificatetypeversion\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            inputData[\"certificatetypeversion\"][\"nversionno\"] = this.state.selectedRecord[\"nversionno\"];\r\n            operation = \"create\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: 'certificatetype',\r\n            methodUrl: 'CertificateTypeVersion',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, dataState, selectedId\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openChildModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteParam) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord({ ...deleteParam, selectedRecord: this.props.Login.masterData.selectedCertificateType }));\r\n    }\r\n    deleteRecord = (deleteParam) => {\r\n        //deleteRecord = (selectedRecord, operation, ncontrolCode) => {       \r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded;\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"CertificateType\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                certificatetype: deleteParam.selectedRecord,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        let modalName = this.props.Login.openModal ? 'openModal' : 'openChildModal'\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"certificatetype\",\r\n            methodUrl: \"CertificateType\",\r\n            displayName: \"IDS_CERTIFICATETYPE\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, fetchRecordCertificateType, updateStore, getReportDetailByReport, fetchCertificateTypeVersionById,\r\n        validateEsignCredential, filterColumnData, getCertificateTypeVersion, getReportMasterByCertificateType\r\n    })(injectIntl(CertificateType));"]},"metadata":{},"sourceType":"module"}