{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\attachmentscomments\\\\comments\\\\AddComment.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport { MediaHeader } from '../../../components/App.styles';\nimport TestPopOver from '../../ResultEntryBySample/TestPopOver';\n\nconst AddComment = props => {\n  let nameString = props.operation === 'update' ? props.selectedRecord.jsondata && [props.selectedRecord.jsondata[props.displayName]] || [] : props.masterList ? props.masterList.map(obj => obj[props.displayName] || obj[props.jsonField][props.displayName]) : [];\n  let message = `${nameString.length} ${props.intl.formatMessage({\n    id: props.selectedListName || \"IDS_TESTS\"\n  })} ${props.intl.formatMessage({\n    id: \"IDS_SELECTED\"\n  })}`;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, props.masterList && Object.values(props.masterList).length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MediaHeader, {\n    className: `labelfont`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 33\n    }\n  }, nameString.length === 1 ? `${props.intl.formatMessage({\n    id: props.selectedListName || \"IDS_TESTS\"\n  })}: ${nameString[0]}` : /*#__PURE__*/React.createElement(TestPopOver, {\n    stringList: nameString,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 41\n    }\n  }))))) : \"\"), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, props.isTestComment ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SAMPLETESTCOMMENTS\"\n    }),\n    isSearchable: true,\n    name: \"nsamplecommentscode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: true,\n    showOption: true,\n    isClearable: false,\n    options: props.SampleTestComments || [],\n    optionId: \"nsampletestcommentcode\",\n    optionValue: \"ssampletestcommentname\",\n    value: props.selectedRecord[\"nsamplecommentscode\"],\n    onChange: value => props.onComboChange(value, \"nsamplecommentscode\"),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  }) : \"\", props.isSampleTestComment && props.isSampleTestComment === true ? /*#__PURE__*/React.createElement(React.Fragment, null, \"   \", /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_COMMENTNAME\"\n    }),\n    isSearchable: true,\n    name: \"ncommentsubtypecode\",\n    showOption: true,\n    options: props.CommentSubType || [],\n    optionId: \"ncommentsubtypecode\",\n    optionValue: \"scommentsubtype\",\n    value: props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"] || \"\",\n    onChange: value => props.onComboChange(value, 'ncommentsubtypecode'),\n    isMandatory: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 30\n    }\n  }), props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"].value === 3 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_ABBREVIATIONNAME\"\n    }),\n    isSearchable: true,\n    name: \"nsampletestcommentscode\",\n    showOption: true,\n    options: props.predefcomments || [],\n    optionId: \"nsampletestcommentscode\",\n    optionValue: \"spredefinedname\",\n    value: props.selectedRecord[\"nsampletestcommentscode\"] && props.selectedRecord[\"nsampletestcommentscode\"] || \"\",\n    onChange: value => props.onComboChange(value, 'nsampletestcommentscode'),\n    isMandatory: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(FormTextarea, {\n    formGroupClassName: \"remove-floating-label-margin\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    name: `sdescription`,\n    type: \"text\",\n    required: false,\n    isMandatory: true,\n    value: props.selectedRecord[\"sdescription\"] && props.selectedRecord[\"sdescription\"] || \"\",\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  })) : /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"scomments\",\n    label: props.intl.formatMessage({\n      id: \"IDS_COMMENT\"\n    }),\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMMENT\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\",\n    rows: \"2\",\n    required: true,\n    isMandatory: true,\n    maxLength: 1500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 37\n    }\n  }))));\n};\n\nexport default injectIntl(AddComment);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/attachmentscomments/comments/AddComment.jsx"],"names":["React","injectIntl","Row","Col","FormTextarea","FormSelectSearch","MediaHeader","TestPopOver","AddComment","props","nameString","operation","selectedRecord","jsondata","displayName","masterList","map","obj","jsonField","message","length","intl","formatMessage","id","selectedListName","Object","values","isTestComment","SampleTestComments","value","onComboChange","isSampleTestComment","CommentSubType","predefcomments","event","onInputOnChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport { MediaHeader } from '../../../components/App.styles';\r\nimport TestPopOver from '../../ResultEntryBySample/TestPopOver';\r\n\r\nconst AddComment = props => {\r\n    let nameString = props.operation === 'update' ? props.selectedRecord.jsondata && [props.selectedRecord.jsondata[props.displayName]] || [] : props.masterList ? props.masterList.map(obj => obj[props.displayName] || obj[props.jsonField][props.displayName]) : []\r\n    let message = `${nameString.length} ${props.intl.formatMessage({ id: props.selectedListName || \"IDS_TESTS\" })} ${props.intl.formatMessage({ id: \"IDS_SELECTED\" })}`\r\n    return (\r\n        <>\r\n            <Row>\r\n                {props.masterList && Object.values(props.masterList).length > 0 ?\r\n                    <div>\r\n                        <Row className=\"mb-4\">\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>\r\n                                    {nameString.length === 1 ?\r\n                                        `${props.intl.formatMessage({ id: props.selectedListName || \"IDS_TESTS\" })}: ${nameString[0]}` :\r\n                                        <TestPopOver stringList={nameString} message={message}></TestPopOver>\r\n\r\n                                    }\r\n                                </MediaHeader>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    : \"\"}\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    {props.isTestComment ?\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_SAMPLETESTCOMMENTS\" })}\r\n                            isSearchable={true}\r\n                            name={\"nsamplecommentscode\"}\r\n                            isDisabled={false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                            isMandatory={true}\r\n                            showOption={true}\r\n                            isClearable={false}\r\n                            options={props.SampleTestComments || []}\r\n                            optionId='nsampletestcommentcode'\r\n                            optionValue='ssampletestcommentname'\r\n                            value={props.selectedRecord[\"nsamplecommentscode\"]}\r\n                            onChange={value => props.onComboChange(value, \"nsamplecommentscode\")}\r\n                            alphabeticalSort={true}\r\n                        />\r\n                        : \"\"}\r\n                    {props.isSampleTestComment && props.isSampleTestComment === true ?\r\n                        <>   <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_COMMENTNAME\" })}\r\n                            isSearchable={true}\r\n                            name={\"ncommentsubtypecode\"}\r\n                            showOption={true}\r\n                            options={props.CommentSubType || []}\r\n                            optionId='ncommentsubtypecode'\r\n                            optionValue='scommentsubtype'\r\n                            value={props.selectedRecord[\"ncommentsubtypecode\"] && props.selectedRecord[\"ncommentsubtypecode\"] || \"\"}\r\n                            onChange={value => props.onComboChange(value, 'ncommentsubtypecode')}\r\n                            isMandatory={true}\r\n                        ></FormSelectSearch>\r\n                            {props.selectedRecord[\"ncommentsubtypecode\"]&&\r\n                            props.selectedRecord[\"ncommentsubtypecode\"].value === 3   ?\r\n                                <FormSelectSearch\r\n                                    formLabel={props.intl.formatMessage({ id: \"IDS_ABBREVIATIONNAME\" })}\r\n                                    isSearchable={true}\r\n                                    name={\"nsampletestcommentscode\"}\r\n                                    showOption={true}\r\n                                    options={props.predefcomments || []}\r\n                                    optionId='nsampletestcommentscode'\r\n                                    optionValue='spredefinedname'\r\n                                    value={props.selectedRecord[\"nsampletestcommentscode\"] && props.selectedRecord[\"nsampletestcommentscode\"] || \"\"}\r\n                                    onChange={value => props.onComboChange(value, 'nsampletestcommentscode')}\r\n                                    isMandatory={true}\r\n                                ></FormSelectSearch> : \"\"}\r\n\r\n                            <FormTextarea\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                name={`sdescription`}\r\n                                type=\"text\"\r\n                                required={false}\r\n                                isMandatory={true}\r\n                                value={props.selectedRecord[\"sdescription\"] && props.selectedRecord[\"sdescription\"] || \"\"}\r\n                                onChange={(event) => props.onInputOnChange(event)}\r\n                            /></> : <FormTextarea\r\n                            name={\"scomments\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\"}\r\n                            rows=\"2\"\r\n                            required={true}\r\n                            isMandatory={true}\r\n                            maxLength={1500}\r\n                        />\r\n                    }\r\n\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddComment);"]},"metadata":{},"sourceType":"module"}