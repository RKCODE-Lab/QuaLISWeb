{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\JsonExceptionLogs.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\nimport { callService, updateStore, crudMaster, ViewJsonExceptionLogs } from '../../actions';\nimport { getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DateTimePicker from '../../../src/components/date-time-picker/date-time-picker.component';\nimport { getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../src/components/CommonScript';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass JsonExceptionLogs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.JsonExceptionLogs || [], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate\n        },\n        classUrl: \"jsonexceptionlogs\",\n        methodUrl: \"JsonExceptionLogs\",\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n\n      if (dateName === \"fromdate\") {\n        dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.ToDate, this.props.Login.userInfo, true);\n      } else {\n        dateObj = convertDateValuetoString(this.props.Login.masterData.FromDate, dateValue, this.props.Login.userInfo, true);\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: dateObj.fromDate,\n          toDate: dateObj.toDate\n        },\n        classUrl: 'jsonexceptionlogs',\n        methodUrl: \"JsonExceptionLogs\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_JSONEXCEPTIONLOGS\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.viewJsonExceptionLogs = viewJsonExceptionLogs => {\n      console.log('ewe', viewJsonExceptionLogs);\n      let openModal = this.props.Login.openModal;\n      openModal = true;\n      let screenName = 'IDS_VIEWSTACKTRACE';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          dataState: this.state.dataState\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.props.ViewJsonExceptionLogs(this.props.Login.masterData, this.props.Login.userInfo, viewJsonExceptionLogs, screenName);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const viewJsonExceptionLogs = this.state.controlMap.has(\"ViewJsonExceptionLogs\") && this.state.controlMap.get(\"ViewJsonExceptionLogs\").ncontrolcode;\n    let primaryKeyField = \"\";\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    this.fieldsForGrid = [{\n      \"idsName\": \"IDS_STACKTRACE\",\n      \"dataField\": \"sstacktrace\",\n      \"width\": \"200px\"\n    }];\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_MODULENAME\",\n        \"dataField\": \"smodulename\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_FORMNAME\",\n        \"dataField\": \"sformname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_MESSAGE\",\n        \"dataField\": \"smessage\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_EXCEPTIONDATE\",\n        \"dataField\": \"sexceptiondate\",\n        \"width\": \"200px\",\n        \"componentName\": \"date\"\n      }, {\n        \"idsName\": \"IDS_SITENAME\",\n        \"dataField\": \"ssitename\",\n        \"width\": \"200px\"\n      } // { \"idsName\": \"IDS_STACKTRACE\", \"dataField\": \"sstacktrace\", \"width\": \"200px\" },\n      ];\n      primaryKeyField = \"njsonexceptioncode\";\n      this.detailedFieldList = [{\n        \"idsName\": \"IDS_STACKTRACE\",\n        \"dataField\": \"sstacktrace\",\n        \"width\": \"200px\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PrimaryHeader, {\n      className: \"d-flex justify-content-between mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }\n    }))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"njsonexceptioncode\",\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data.JsonExceptionLogs,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedFieldList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      reloadData: this.reloadData,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      isAddRequired: false,\n      isDownloadPDFRequired: false,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faEye\",\n        objectName: \"ExceptionLogs\",\n        hidden: this.state.userRoleControlRights.indexOf(viewJsonExceptionLogs) === -1,\n        onClick: viewJsonExceptionLogs => this.viewJsonExceptionLogs(viewJsonExceptionLogs)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 33\n      }\n    }) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      inputParam: this.props.Login.inputParam,\n      screenName: 'IDS_VIEWSTACKTRACE',\n      hideSave: true,\n      addComponent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 37\n        }\n      }, this.props.Login.masterData[\"JsonExceptionLogsDetails\"][0].sstacktrace))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          //ALPD-2252\n          dataResult: process(this.props.Login.masterData.JsonExceptionLogs || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.JsonExceptionLogs ? this.props.Login.masterData.JsonExceptionLogs : [], dataState),\n          //dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster,\n  ViewJsonExceptionLogs\n})(injectIntl(JsonExceptionLogs));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/credentialmanagement/JsonExceptionLogs.jsx"],"names":["React","connect","injectIntl","Row","Col","Card","process","toast","DataGrid","ListWrapper","PrimaryHeader","callService","updateStore","crudMaster","ViewJsonExceptionLogs","getControlMap","DEFAULT_RETURN","DateTimePicker","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","SlideOutModal","mapStateToProps","state","Login","JsonExceptionLogs","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","reloadData","fromDate","masterData","FromDate","toDate","ToDate","obj","userInfo","inputParam","inputData","classUrl","methodUrl","displayName","handleDateChange","dateName","dateValue","Date","dateObj","viewJsonExceptionLogs","console","log","screenName","formRef","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","userRoleControlRights","controlMap","Map","getDerivedStateFromProps","warn","render","has","get","ncontrolcode","primaryKeyField","fieldsForGrid","undefined","detailedFieldList","intl","formatMessage","id","ssitedate","date","title","controlname","objectName","hidden","indexOf","onClick","sstacktrace","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\r\nimport { callService, updateStore, crudMaster, ViewJsonExceptionLogs } from '../../actions';\r\nimport { getControlMap } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DateTimePicker from '../../../src/components/date-time-picker/date-time-picker.component';\r\nimport { getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../src/components/CommonScript';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass JsonExceptionLogs extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.JsonExceptionLogs || [], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        let obj = convertDateValuetoString(fromDate,toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo,\r\n            fromDate:obj.fromDate, \r\n            toDate:obj.toDate, },\r\n\r\n            classUrl: \"jsonexceptionlogs\",\r\n            methodUrl: \"JsonExceptionLogs\",\r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n       // this.setState({ selectedRecord });\r\n       // this.reloadData(selectedRecord, true);\r\n\r\n       let dateObj = {};\r\n       if (dateName === \"fromdate\") {\r\n            dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.ToDate, this.props.Login.userInfo, true);\r\n       }\r\n       else{\r\n            dateObj = convertDateValuetoString(this.props.Login.masterData.FromDate, dateValue, this.props.Login.userInfo, true);\r\n       }\r\n\r\n       const inputParam = {\r\n                                inputData: {\r\n                                    \"userinfo\": this.props.Login.userInfo,\r\n                                    fromDate:dateObj.fromDate, \r\n                                    toDate:dateObj.toDate,\r\n                                },\r\n                                classUrl: 'jsonexceptionlogs',\r\n                                methodUrl: \"JsonExceptionLogs\",\r\n                                userInfo: this.props.Login.userInfo,\r\n                                displayName: \"IDS_JSONEXCEPTIONLOGS\"\r\n                            };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    render() {\r\n\r\n        const viewJsonExceptionLogs = this.state.controlMap.has(\"ViewJsonExceptionLogs\") && this.state.controlMap.get(\"ViewJsonExceptionLogs\").ncontrolcode;\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\r\n        }\r\n\r\n        this.fieldsForGrid =\r\n                [\r\n                    { \"idsName\": \"IDS_STACKTRACE\", \"dataField\": \"sstacktrace\", \"width\": \"200px\" },\r\n                ];\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"smodulename\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_MESSAGE\", \"dataField\": \"smessage\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_EXCEPTIONDATE\", \"dataField\": \"sexceptiondate\", \"width\": \"200px\", \"componentName\": \"date\"},\r\n                { \"idsName\": \"IDS_SITENAME\", \"dataField\": \"ssitename\", \"width\": \"200px\"},\r\n                // { \"idsName\": \"IDS_STACKTRACE\", \"dataField\": \"sstacktrace\", \"width\": \"200px\" },\r\n            ]\r\n            primaryKeyField = \"njsonexceptioncode\";\r\n            this.detailedFieldList= [\r\n                { \"idsName\": \"IDS_STACKTRACE\", \"dataField\": \"sstacktrace\", \"width\": \"200px\" }\r\n            ]\r\n           \r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                                {/* <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                    <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                            </HeaderName> */}\r\n                                {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                 hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={() => this.props.getMaterialTypeComboService(addParam)}>\r\n                                <FontAwesomeIcon icon={faPlus} /> {}\r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add' />\r\n                            </Button> */}\r\n                            </PrimaryHeader>\r\n\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                {/* <Col></Col> */}\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"njsonexceptioncode\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data.JsonExceptionLogs}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    reloadData={this.reloadData}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    pageable={true}\r\n                                    isAddRequired={false}\r\n                                    isDownloadPDFRequired={false}\r\n                                    actionIcons={[{\r\n                                        title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                        controlname: \"faEye\",\r\n                                        objectName: \"ExceptionLogs\",\r\n                                        hidden: this.state.userRoleControlRights.indexOf(viewJsonExceptionLogs) === -1,\r\n                                        onClick: (viewJsonExceptionLogs) => this.viewJsonExceptionLogs(viewJsonExceptionLogs)\r\n                                    }]}\r\n                                />\r\n                                : \"\"}\r\n                                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={'IDS_VIEWSTACKTRACE'}\r\n                        hideSave={true}\r\n                        addComponent={\r\n                            <>\r\n                                <Card className='one' >\r\n                                    <Card.Body>\r\n                                    {this.props.Login.masterData[\"JsonExceptionLogsDetails\"][0].sstacktrace}\r\n                                </Card.Body>\r\n                                </Card>\r\n                            </>\r\n                        }\r\n                    />\r\n                }\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    viewJsonExceptionLogs = (viewJsonExceptionLogs) => {\r\n        console.log('ewe', viewJsonExceptionLogs)\r\n        let openModal = this.props.Login.openModal;\r\n        openModal = true;\r\n        let screenName = 'IDS_VIEWSTACKTRACE'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                dataState: this.state.dataState\r\n                }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.props.ViewJsonExceptionLogs(this.props.Login.masterData, this.props.Login.userInfo, viewJsonExceptionLogs, screenName);\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    //ALPD-2252\r\n                    dataResult: process(this.props.Login.masterData.JsonExceptionLogs || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.JsonExceptionLogs ? this.props.Login.masterData.JsonExceptionLogs : [], dataState),\r\n                    //dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, updateStore, crudMaster, ViewJsonExceptionLogs })(injectIntl(JsonExceptionLogs));"]},"metadata":{},"sourceType":"module"}