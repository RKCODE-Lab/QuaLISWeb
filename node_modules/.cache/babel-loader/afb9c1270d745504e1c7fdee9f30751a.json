{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { numericGrade } from '../pages/ResultEntryBySample/ResultEntryValidation';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: inputData.nflag || 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey,\n      //nneedsubsample: inputData.masterData.nneedsubsample,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.nneedtemplatebasedflow\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        // if (response.data.DynamicGetSamples) {\n        //     sortData(response.data.DynamicGetSamples, \"\", \"\");\n        // }\n        // if (response.data.DynamicGetTests) {\n        //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n        // }\n        sortData(response.data); // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\n        // responseData = sortData(responseData)\n\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample;\n        RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample\n        }; // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        //     inputData.searchSampleRef.current.value = \"\";\n        //     masterData['searchedSample'] = undefined\n        // }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let RegistrationComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          let npreregno;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n            npreregno = masterData.RESelectedSample[0].npreregno;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \" sampleChangeDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              dbData = response.data.RegistrationComment || [];\n              list = [...inputData.masterData.RegistrationComment, ...dbData];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          //getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleCommentsDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          let list = [];\n\n          if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                RESelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n            }\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleChangeDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment,\n          RegistrationComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      //let isGrandChildGetRequired = false;\n\n      let oldSelectedSubSample = inputData.masterData.RESelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSample = inputData.RESelectedSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\n        let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE;\n\n        if (inputData.masterData.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let masterData = { ...inputData.masterData,\n          RESelectedSample,\n          RESelectedSubSample,\n          RESelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          ntransactionsamplecode,\n          RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey,\n          masterData\n        };\n\n        if (RESelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]\n          };\n          dispatch(getTestChildTabREDetail(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"RE_TEST\"]\n          };\n          dispatch(getTestREDetail(inputData, true));\n        }\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          // RESelectedSample: inputData.RESelectedSample,\n          // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\n          RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  RESelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RE_TEST\"];\n                subsamplecheck = false;\n                dispatch(getTestREDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              RESelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode; // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\n        } //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSample: inputData.RESelectedSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample; // dispatch(initRequest(true));\n    // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData).then(response => {\n        // let responseData = {\n        //     ...response.data,\n        //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n        //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n        //     // RESelectedTest: inputData.masterData.RESelectedTest\n        // }\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n            // case \"IDS_SAMPLECOMMENTS\":\n            //         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\n            //         activeName = \"RegistrationComment\"\n            //         dataStateName = \"sampleChangeDataState\"\n            //         break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            RESelectedTest: [testList[0]],\n            RE_TEST: testList // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n            // case \"IDS_TESTCOMMENTS\":\n            //     dbData = response.data.RegistrationTestComment || []\n            //     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n            //     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n            //     break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      // let isGrandChildGetRequired = false;\n      // if (TestSelected.length > 0) {\n      //     isGrandChildGetRequired = true;\n      // } else {\n      //     isGrandChildGetRequired = false;\n      // }\n\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSubSample = inputData.RESelectedSubSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : []; // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\n\n        inputData = { ...inputData,\n          childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n          ntransactiontestcode,\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabREDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSubSample: inputData.RESelectedSubSample\n        };\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        } // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //     ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSubSample: inputData.RESelectedSubSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getSampleChildTabREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let url = \"\";\n\n    switch (inputData.activeSampleKey) {\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLECOMMENTS\":\n        url = \"comments/getSampleComment\";\n        break;\n\n      default:\n        url = \"attachment/getSampleAttachment\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(url, inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSample: inputData.RESelectedSample\n          },\n          loading: false,\n          showFilter: false,\n          activeSampleKey: inputData.activeSampleKey,\n          screenName: inputData.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        activeName = \"ResultUsedInstrument\";\n        dataStateName = \"instrumentDataState\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        activeName = \"ResultUsedMaterial\";\n        dataStateName = \"materialDataState\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        activeName = \"ResultUsedTasks\";\n        dataStateName = \"taskDataState\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"documentDataState\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        activeName = \"ResultChangeHistory\";\n        dataStateName = \"resultChangeDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n          RESelectedTest: inputData.RESelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RESelectedTest: inputData.RESelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestKey,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        RESelectedTest: inputData.RESelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData[dataStateName].skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function getRERegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            defaultSampleType: inputData.defaultSampleType,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRERegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\n            defaultRegistrationType: inputData.defaultRegistrationType\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREApprovalConfigVersion(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.defaultRegistrationSubType // fromDate: inputData.fromdate,\n            //  toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFilterStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultjobstatus: inputData.defaultjobstatus // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREJobStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getResultEntryDetails(inputParamData) {\n  let masterData = { ...inputParamData.masterData\n  };\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData,\n      nneedsubsample: inputParamData.masterData.nneedsubsample\n    }).then(response => {\n      //let masterData = { ...inputParamData.masterData }\n      if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\n        inputParamData.refs.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\n        inputParamData.refs.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\n        inputParamData.refs.searchTestRef.current.value = \"\"; // masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } //sortData(response.data)\n\n\n      sortData(response.data, 'ascending', 'ntransactionresultcode');\n\n      if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\n        toast.warning(intl.formatMessage({\n          id: \"IDS_USERNOTINRESULTENTRYFLOW\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            realFromDate: response.data[\"fromDate\"],\n            realToDate: response.data[\"toDate\"]\n          },\n          loading: false,\n          showTest: inputParamData.inputData.showTest,\n          showSample: inputParamData.inputData.showSample,\n          activeTestKey: inputParamData.inputData.activeTestKey,\n          skip: 0,\n          take: inputParamData.inputData.take,\n          testskip: 0,\n          testtake: inputParamData.inputData.testtake,\n          resultDataState: { ...inputParamData.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParamData.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParamData.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParamData.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParamData.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParamData.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParamData.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParamData.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response.status === 401) {\n        toast.warn(intl.formatMessage({\n          id: error.response.data.rtn\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData: { ...masterData,\n              ...error.response.data,\n              realFromDate: error.response.data[\"fromDate\"],\n              realToDate: error.response.data[\"toDate\"]\n            }\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\n  return function (dispatch) {\n    let TestList = inputData.searchedTest ? [...inputData.searchedTest] : [...inputData.RE_TEST];\n    TestList = TestList.splice(testskip, testskip + testtake);\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\n\n    if (acceptTestList && acceptTestList.length > 0) {\n      if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\n        let inputParamData = {\n          ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData).then(response => {\n          let selectedResultGrade = [];\n          let paremterResultcode = [];\n          const parameterResults = response.data.ResultParameter;\n          let predefDefaultFlag = false;\n          parameterResults.map((param, index) => {\n            selectedResultGrade[index] = {\n              ngradecode: param.ngradecode\n            };\n            paremterResultcode[index] = param.ntransactionresultcode;\n            predefDefaultFlag = false;\n            response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n              if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n                if (!predefDefaultFlag) {\n                  predefDefaultFlag = true;\n                  response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n                } // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n                //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n                //         undefined, undefined).get(\"OptionList\");\n\n\n                if (response.data.ResultParameter[index].sresult === null) {\n                  response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].editable = true;\n                  response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n                }\n              } else {\n                if (!predefDefaultFlag) {\n                  predefDefaultFlag = true;\n                  response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n                }\n              } //return null;\n\n            }); //return null;\n            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n            // undefined, undefined).get(\"OptionList\");\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData,\n                //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n                ...response.data,\n                paremterResultcode //,\n                //selectedResultGrade ,\n\n              },\n              selectedRecord: {\n                selectedResultGrade: selectedResultGrade,\n                ResultParameter: response.data.ResultParameter\n              },\n              loading: false,\n              screenName: \"IDS_RESULTENTRY\",\n              openModal: true,\n              operation: \"update\",\n              activeTestKey: \"IDS_RESULTS\",\n              ncontrolcode: ncontrolcode\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); //}\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTTESTTOENTERRESULT\"\n        }));\n      }\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTTESTTOENTERRESULT\"\n      }));\n    }\n  };\n}\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/completeTest\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.nneedsubsample) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/testInitiated\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.nneedsubsample) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode');\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { // ...inputData.masterData,\n          // //...responseData,\n          // //RE_SAMPLE,\n          // //RE_SUBSAMPLE,\n          // //RESelectedSubSample,\n          // searchedSample,\n          // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\n          // //RESelectedSample,\n          // //RESelectedTest: RESelectedTest2,\n          // //RE_TEST: responseData[\"RE_TEST\"]\n          ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n} //Compare two array and return the first array which is available in second array\n\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\n  const filterArray = firstArray.filter(function (x) {\n    return secondArray.some(function (y) {\n      return x[PrimaryKey] === y[PrimaryKey];\n    });\n  });\n  return filterArray;\n}\n\nfunction fetchSelectedData(inputParam, respObject) {\n  return dispatch => {\n    rsapi.post(inputParam.fetchUrl, { ...inputParam\n    }).then(response => {\n      const masterData = { ...respObject.masterData,\n        ...response.data,\n        RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function testMethodSourceEdit(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode,\n      ntestcode: inputData.test.ntestcode,\n      ncontrolcode: inputData.editSourceMethodId,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData).then(response => {\n      const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\", \"ssourcename\", undefined, undefined, undefined);\n      const TagListSource = TagSource.get(\"OptionList\");\n      const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\", \"smethodname\", undefined, undefined, undefined);\n      const TagListMethod = TagMethod.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            SourceData: TagListSource,\n            MethodData: TagListMethod,\n            RESelectedSubSample: inputData.masterData.RESelectedSubSample\n          },\n          selectedRecord: {\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            stestsynonym: inputData.test.jsondata.stestsynonym,\n            nsourcecode: response.data.SourceDataValue,\n            nmethodcode: response.data.MethodDataValue\n          },\n          loading: false,\n          screenName: \"IDS_TESTMETHODSOURCE\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.editSourceMethodId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateParameterComments(inputData, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      ntransactionresultcode: inputData.ntransactionresultcode,\n      sresultcomment: inputData.sresultcomment,\n      transactiontestcode: inputData.transactiontestcode,\n      userinfo: inputData.userinfo,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      ncontrolcode: inputData.ncontrolcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false,\n          loadEsign: false,\n          screenName: \"IDS_RESULT\",\n          openModal: false,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode //ncontrolcode:inputData.editSourceMethodId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREInstrument(inputData) {\n  return function (dispatch) {\n    let urlArray = [];\n    const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\n      userinfo: inputData.userInfo,\n      ntestgrouptestcode: inputData.masterData.RESelectedTest.ntestgrouptestcode\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputData.userInfo\n    });\n    urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory\n          },\n          selectedId: null,\n          selectedRecord: {\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\n            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\n            npreregno: inputData.test.npreregno,\n            //dtodate: new Date(response[2].data),//new Date(),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            //dfromdate: new Date(response[2].data),//new Date(),\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            ntzfromdate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            },\n            ntztodate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            }\n          },\n          timeZoneList: TagListTimeZone || [],\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: {\n            ntestgroupmaterial: transactionStatus.YES,\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            nsectioncode: inputData.test.nsectioncode,\n            ssectionname: inputData.test.ssectionname,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            npreregno: inputData.test.npreregno,\n            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\n            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedMaterailId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialComboGet(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode,\n      ntestgrouptestcode: inputData.ntestgrouptestcode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: {\n            ntestgroupmaterial: inputData.ntestgroupmaterial,\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            nsectioncode: inputData.test.nsectioncode,\n            ssectionname: inputData.test.ssectionname,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            npreregno: inputData.test.npreregno,\n            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\n            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"create\" //activeTestKey: \"IDS_INSTRUMENT\",\n          //ncontrolcode: inputData.addResultUsedMaterailId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialCategoryByType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcode: materialMap.get(\"DefaultValue\") || {},\n            nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || {},\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {}\n          },\n          materialCat,\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialByCategory(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcode: materialMap.get(\"OptionList\")[0],\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\n            savailablequantity: response.data.MaterialInventory[0].savailablequatity,\n            sunitname: response.data.MaterialInventory[0].sunitname\n          },\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialInvertoryByMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            sunitname: response.data.MaterialInventory[0].sunitname,\n            savailablequantity: response.data.MaterialInventory[0].savailablequatity\n          },\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAvailableMaterialQuantity(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            savailablequantity: response.data.inventory.savailablequatity,\n            sunitname: response.data.inventory.jsondata.Unit\n          },\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function deleteInstrumentRecord(inputData) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n//             userinfo: inputData.userInfo,\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\n//             .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             ...response.data\n//                         },\n//                         loading: false,\n//                         operation: \"delete\",\n//                         openModal: false,\n//                         loadEsign: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function fetchInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let urlArray = []; //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\n\n    const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\n      nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo\n    });\n    const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [timeZoneService, getResultUsedInstrument];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory,\n            // ...response[0].data,\n            ...response[1].data //...response[2].data\n\n          },\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          selectedRecord: {\n            stestsynonym: inputData.editRow.stestsynonym,\n            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            ninstrumentcatcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\n            },\n            ninstrumentcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\n            },\n            ntzfromdate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\n            },\n            ntztodate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\n            },\n            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\n          },\n          timeZoneList: TagListTimeZone || [],\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchMaterialRecord(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\n      nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          selectedRecord: { ...EditResultUsedMaterial,\n            stestsynonym: inputData.editRow.jsondata.stestsynonym,\n            npreregno: EditResultUsedMaterial.npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            nmaterialtypecode: {\n              label: EditResultUsedMaterial.jsondata.smaterialtypename,\n              value: EditResultUsedMaterial.nmaterialtypecode\n            },\n            nmaterialcatcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcategorycode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\n            },\n            nmaterialcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialname\n            },\n            nmaterialinventorycode: {\n              \"value\": EditResultUsedMaterial.ninventorycode,\n              \"label\": EditResultUsedMaterial.jsondata.sinventoryid\n            },\n            ntztodate: {\n              \"value\": EditResultUsedMaterial.ntztodate,\n              \"label\": EditResultUsedMaterial.stztodate\n            },\n            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\n            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\n            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\n            sremarks: EditResultUsedMaterial.jsondata.sremarks,\n            savailablequantity: response.data.inventory.savailablequatity,\n            sunitname: response.data.inventory.sunitname\n          },\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteTaskRecord(inputData, userInfo) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchTaskRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\n          selectedRecord: {\n            npreregno: response.data.EditResultUsedTasks[0].npreregno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\n            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\n            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\n            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\n            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\n            staskprocedure: response.data.EditResultUsedTasks[0].jsondata.staskprocedure,\n            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\n          },\n          loading: false,\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function parameterRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ncontrolcode: inputData.controlcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          selectedId: response.data.ParameterComments.ntransactionresultcode,\n          selectedRecord: {\n            sresultcomment: response.data.ParameterComments.sresultcomment,\n            stestsynonym: inputData.selectedRecord.stestsynonym,\n            sparametersynonym: inputData.selectedRecord.sparametersynonym,\n            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\n            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n            ncontrolcode: inputData.controlcode\n          },\n          loading: false,\n          screenName: \"IDS_PARAMETERCOMMENTS\",\n          openModal: true,\n          operation: \"updateParameterComments\",\n          ncontrolcode: inputData.controlcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkListRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\n      ncontrolcode: inputData.ncontrolcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let lsteditedQB = [];\n      selectedRecord = {\n        sarno: inputData.selectedRecord.sarno,\n        ssamplearno: inputData.selectedRecord.ssamplearno,\n        npreregno: inputData.selectedRecord.npreregno,\n        stestsynonym: inputData.selectedRecord.stestsynonym,\n        sparametersynonym: inputData.selectedRecord.sparametersynonym,\n        ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\n        ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n        transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\n      };\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord[checklist.nchecklistversionqbcode] = {\n          nchecklistqbcode: checklist.nchecklistqbcode,\n          nchecklistversioncode: checklist.nchecklistversioncode,\n          nchecklistversionqbcode: checklist.nchecklistversionqbcode,\n          sdefaultvalue: checklist.sdefaultvalue,\n          sarno: inputData.selectedRecord.sarno,\n          ssamplearno: inputData.selectedRecord.ssamplearno,\n          stestsynonym: inputData.selectedRecord.stestsynonym,\n          sparametersynonym: inputData.selectedRecord.sparametersynonym\n        };\n        lsteditedQB.push(checklist.nchecklistversionqbcode);\n        return null;\n      });\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n          [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\n        };\n        return null;\n      });\n      selectedRecord[\"editedQB\"] = lsteditedQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.selectedId,\n          selectedRecord: selectedRecord,\n          loading: false,\n          screenName: \"IDS_CHECKLISTRESULT\",\n          openTemplateModal: true,\n          needSaveButton: inputData.needSaveButton,\n          operation: \"create\",\n          ncontrolCode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\n  return function (dispatch) {\n    let listResultCheckList = [];\n\n    if (selectedRecord && selectedRecord.jsondata) {\n      selectedRecord.editedQB.map(qbcode => listResultCheckList.push(selectedRecord[qbcode]));\n      let inputParamData = {\n        ntransactionresultcode: selectedRecord.ntransactionresultcode,\n        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n        transactiontestcode: selectedRecord.transactiontestcode,\n        npreregno: selectedRecord.npreregno,\n        ResultCheckList: {\n          nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\n          nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\n          jsondata: selectedRecord.jsondata,\n          npreregno: selectedRecord.npreregno,\n          ntransactionresultcode: selectedRecord.ntransactionresultcode\n        },\n        //jsondata: selectedRecord.jsondata,\n        userinfo: userInfo,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n        ncontrolcode: -1\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            openModal: false,\n            loading: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }\n  };\n}\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\n  if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\n    return function (dispatch) {\n      let inputParamData = {\n        userinfo: inputData.userinfo,\n        ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\n        npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        //ndesigntemplatemappingcode:ndesigntemplatemappingcode,\n        ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n        ncontrolcode: inputData.ncontrolcode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...response.data,\n              TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\n              RESelectedSubSample: inputData.masterData.RESelectedSubSample\n            },\n            loading: false,\n            activeTestKey: \"IDS_RESULTS\",\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      nformulacode: parameterData.ntestgrouptestformulacode,\n      userinfo: userInfo,\n      npreregno: parameterData.npreregno,\n      ntransactionsamplecode: parameterData.ntransactionsamplecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData).then(response => {\n      const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\n        return {\n          \"idsName\": \"IDS_FILLALLFIELDS\",\n          \"dataField\": index,\n          \"mandatory\": true\n        };\n      });\n      let selectedForumulaInput = [];\n      let selectedForumulaInput1 = [];\n      let selectedMandatory = [];\n      selectedRecord.ResultParameter = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\n      response.data.DynamicFormulaFields.map((fields, index) => {\n        let dynamicformulafields = {};\n        let selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, fields.ndynamicformulafieldcode, \"ntestparametercode\");\n\n        if (selectedTestParameters.length > 0) {\n          selectedTestParameters = selectedTestParameters.filter(element => {\n            return element.sresult !== null && element.sresult != '';\n          });\n          const nisaverageneed = selectedTestParameters.length;\n          const maxResultCode = selectedTestParameters.length > 0 ? Math.max(...selectedTestParameters.map(o => o.ntransactionresultcode)) : -1; // const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\n          //                 return element.sresult !== null && element.sresult !='';\n          //               }).map(o => o.ntransactionresultcode)));\n\n          const paramValue = getRecordBasedOnPrimaryKeyName(selectedTestParameters, maxResultCode, \"ntransactionresultcode\");\n\n          if (paramValue.length == 0) {\n            dynamicformulafields.svalues = \"\";\n            dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; //dynamicformulafields.nisaverageneed = 0;\n\n            dynamicformulafields.senableAverage = false;\n            response.data.DynamicFormulaFields[index].nisaverageneed = 0;\n            selectedForumulaInput.push(dynamicformulafields);\n            selectedMandatory.push(\"\");\n          } else {\n            if ((maxResultCode >= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false) || (response.data.DynamicFormulaFields[index].svalue != \"\" && response.data.DynamicFormulaFields[index].svalue != null ? maxResultCode <= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false : \"\")) {\n              dynamicformulafields.svalues = paramValue[0].sresult;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; //dynamicformulafields.nisaverageneed = nisaverageneed;\n\n              dynamicformulafields.senableAverage = false;\n              response.data.DynamicFormulaFields[index].nisaverageneed = nisaverageneed;\n              selectedForumulaInput.push(dynamicformulafields);\n              selectedMandatory.push(paramValue[0].sresult);\n            } else {\n              dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\n\n              dynamicformulafields.senableAverage = false;\n              selectedForumulaInput.push(dynamicformulafields);\n              selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\n            }\n          }\n        } else {\n          dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\n          dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\n\n          selectedForumulaInput.push(dynamicformulafields);\n          selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\n        }\n\n        return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)[0]);\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            parameterData: parameterData,\n            naverageroundingdigits: parameterData.nroundingdigits,\n            sformulacalculationdetail: response.data.query,\n            formulainput: response.data.Formula,\n            resultindex: index,\n            DynamicFormulaFields: response.data.DynamicFormulaFields,\n            //selectedForumulaInput: []\n            //  DynamicFormulaFields.map((fields, index) => {\n            //     return {\n            //         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n            //     }\n            //  });\n            // response.data.DynamicFields.map((fields, index) =>\n            selectedForumulaInput,\n            selectedMandatory // selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n            // )\n\n          },\n          validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function calculateFormula(inputDataValue) {\n  return function (dispatch) {\n    const inputData = {\n      ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\n      sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\n      nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\n      userinfo: inputDataValue.userInfo,\n      dynamicformulafields: inputDataValue.lstDynamicFields\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/calculateFormula\", inputData).then(response => {\n      // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n      // {\n      //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n      //     sresult: response.data.Result,\n      //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n      //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n      //     parameter: inputDataValue.selectedRecord.parameterData\n      // }\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\n      inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\n        ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputDataValue.masterData //selectedResultData: inputDataValue.selectedResultData,\n            //selectedResultGrade: inputDataValue.selectedResultGrade,\n            //ResultParameter: inputDataValue.ResultParameter\n\n          },\n          selectedRecord: {\n            selectedResultGrade: inputDataValue.selectedResultGrade,\n            ResultParameter: inputDataValue.ResultParameter\n          },\n          loading: false,\n          screenName: \"IDS_RESULTENTRY\",\n          showFormula: false,\n          operation: \"update\",\n          showValidate: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  };\n}\nexport function getREFilterTestData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultFilterStatus: inputData.defaultFilterStatus,\n            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,\n            //inputData.defaultRegistrationSubType,\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterTemplate(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,\n            //inputData.defaultRegistrationSubType,\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateTestMethodSource(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\n          },\n          loading: false,\n          openModal: false,\n          loadEsign: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultImportFile(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n\n      if (response.data.returnStatus && response.data.returnStatus !== \"\") {\n        toast.info(response.data.returnStatus);\n      } else {\n        toast.warn(response.data.returnStatus);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialComplete(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"testinitiate\") {\n          dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\n          dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\n          dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\n          dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\n          dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\n          dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\n          dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\n          let {\n            selectedRecord,\n            userInfo,\n            nregtypecode,\n            nregsubtypecode,\n            ndesigntemplatemappingcode\n          } = inputParam[\"screenData\"];\n          delete selectedRecord.esignpassword;\n          delete selectedRecord.esigncomments;\n          delete selectedRecord.esignreason;\n          delete selectedRecord.agree;\n          delete inputParam.inputData.password;\n          userInfo = inputParam.inputData.userinfo;\n          dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMeanCalculationTestParameter(meanParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: meanParam.selectedRecord.npreregno,\n      ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\n      userinfo: meanParam.userInfo\n    };\n    return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData).then(response => {\n      const list = response.data || []; // const optionList = [];\n      // list.map(item=>{\n      //     console.log(\"item:\", item);\n      //         optionList.push({item:item, \n      //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n      //                         value:item.ntransactionresultcode})\n      //     })\n      // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          meanTestParameterList: list,\n          screenName: \"IDS_MEANPARAMETER\",\n          ncontrolcode: meanParam.ncontrolCode,\n          selectedTestParameterMean: meanParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/\n\nexport function getAverageResult(parameterData, index, selectedForumulaInput, userInfo, masterData, selectedRecord) {\n  return function (dispatch) {\n    let selectedTestParameters = selectedRecord.ResultParameter.filter(element => {\n      return element.editable == true;\n    });\n    selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, selectedRecord.parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\n    selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, parameterData.ndynamicformulafieldcode, \"ntestparametercode\");\n    let ResultParameterNew = [];\n\n    if (selectedTestParameters.length > 0) {\n      selectedTestParameters.map(Parameter => {\n        let resultParameterValues = {};\n        resultParameterValues.ntransactionresultcode = Parameter.ntransactionresultcode;\n        resultParameterValues.sresult = Parameter.sresult;\n        resultParameterValues.ntestparametercode = Parameter.ntestparametercode;\n        ResultParameterNew.push(resultParameterValues);\n      });\n    }\n\n    let inputParamData = {\n      naverageroundingdigits: selectedRecord.naverageroundingdigits,\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      ntestparametercode: parameterData.ndynamicformulafieldcode,\n      userinfo: userInfo,\n      ntransactionsamplecode: parameterData.ntransactionsamplecode,\n      ResultParameter: ResultParameterNew\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getAverageResult\", inputParamData).then(response => {\n      selectedForumulaInput[index].soldvalue = selectedForumulaInput[index].svalues;\n      selectedForumulaInput[index].svalues = response.data.AverageResult.sresult;\n      selectedForumulaInput[index].senableAverage = true; //selectedForumulaInput[index].svaluesold = \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            selectedForumulaInput\n          },\n          // selectedRecord: {\n          //     ...selectedRecord,\n          //     parameterData: parameterData,\n          //     sformulacalculationdetail: response.data.query,\n          //     formulainput: response.data.Formula,\n          //     resultindex: index,\n          //     selectedForumulaInput,\n          //     selectedMandatory\n          // },\n          // validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","nneedtemplatebasedflow","activeName","dataStateName","post","checkBoxOperation","then","response","data","oldSelectedTest","RESelectedTest","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedMaterial","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","oldSelectedSubSample","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","subSample","responseData","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","activeSubSampleTab","activeTestTab","screenName","console","log","getSampleChildTabREDetail","url","activeTabIndex","activeTabId","getRERegistrationType","defaultSampleType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","rtn","warning","formatMessage","id","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","searchedTest","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","predefDefaultFlag","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","testStart","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","jsondata","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","addREMaterial","nsectioncode","materialTypeMap","MaterialType","materialType","materialCatMap","MaterialCategory","materialCat","materialMap","Material","material","materialInventoryMap","MaterialInventory","materialInventory","ntestgroupmaterial","ssectionname","nmaterialtypecode","nmaterialcatcode","nmaterialcode","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","addResultUsedMaterailId","getREMaterialComboGet","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","inventory","Unit","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","fetchMaterialRecord","nresultusedmaterialcode","EditResultUsedMaterial","label","smaterialtypename","nmaterialcategorycode","smaterialcatname","smaterialname","ninventorycode","sinventoryid","susedquantity","nqtyused","scarriergas","smobilephase","sremarks","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","staskprocedure","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","selectedForumulaInput","selectedForumulaInput1","selectedMandatory","fields","dynamicformulafields","selectedTestParameters","ndynamicformulafieldcode","element","nisaverageneed","maxResultCode","Math","max","o","paramValue","svalues","sparameter","sdescription","senableAverage","svalue","ntestparametercode","naverageroundingdigits","nroundingdigits","sformulacalculationdetail","query","formulainput","Formula","resultindex","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","DesignTemplateMappingValue","getREFilterTemplate","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","esignreason","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean","getAverageResult","ResultParameterNew","Parameter","resultParameterValues","soldvalue","AverageResult"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            //nneedsubsample: inputData.masterData.nneedsubsample,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.nneedtemplatebasedflow\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    sortData(response.data);\r\n                    // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\r\n                    // responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n\r\n\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.RESelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \" sampleChangeDataState\"\r\n                                break;\r\n\r\n\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n\r\n                        //getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            //let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, RESelectedSample, RESelectedSubSample, RESelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey, masterData\r\n                }\r\n\r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    // RESelectedSample: inputData.RESelectedSample,\r\n                    // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\r\n                    RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode\r\n                    // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            // case \"IDS_SAMPLECOMMENTS\":\r\n                            //         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                            //         activeName = \"RegistrationComment\"\r\n                            //         dataStateName = \"sampleChangeDataState\"\r\n                            //         break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedTest: [testList[0]],\r\n                            RE_TEST: testList,\r\n                            // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            // case \"IDS_TESTCOMMENTS\":\r\n                            //     dbData = response.data.RegistrationTestComment || []\r\n                            //     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                            //     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                            //     break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            // let isGrandChildGetRequired = false;\r\n            // if (TestSelected.length > 0) {\r\n            //     isGrandChildGetRequired = true;\r\n            // } else {\r\n            //     isGrandChildGetRequired = false;\r\n            // }\r\n\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //     ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ?\r\n                    inputData[\"statusNone\"] ?\r\n                        getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') :\r\n                        filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        activeTestTab: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                url = \"comments/getSampleComment\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"ResultUsedMaterial\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            defaultSampleType: inputData.defaultSampleType,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    let masterData = { ...inputParamData.masterData }\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                //let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                //sortData(response.data)\r\n                sortData(response.data, 'ascending', 'ntransactionresultcode')\r\n                if(response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\")\r\n                {\r\n                toast.warning(intl.formatMessage({ id: \"IDS_USERNOTINRESULTENTRYFLOW\" }));\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else if(error.response.status === 401) {\r\n                    toast.warn(intl.formatMessage({id:error.response.data.rtn}));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ...error.response.data,\r\n                                realFromDate: error.response.data[\"fromDate\"],\r\n                                realToDate: error.response.data[\"toDate\"]\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else{\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = inputData.searchedTest ? [...inputData.searchedTest] : [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        let predefDefaultFlag = false;\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n                            predefDefaultFlag = false;\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        if (!predefDefaultFlag) {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                        //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                        //         undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (!predefDefaultFlag) {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n\r\n                                    }\r\n                                    //return null;\r\n\r\n                                });\r\n                            //return null;\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            // undefined, undefined).get(\"OptionList\");\r\n                        });\r\n\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/testInitiated\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n                    RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        // ...inputData.masterData,\r\n                        // //...responseData,\r\n                        // //RE_SAMPLE,\r\n                        // //RE_SUBSAMPLE,\r\n                        // //RESelectedSubSample,\r\n                        // searchedSample,\r\n                        // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n                        // //RESelectedSample,\r\n                        // //RESelectedTest: RESelectedTest2,\r\n                        // //RE_TEST: responseData[\"RE_TEST\"]\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo,ntestgrouptestcode:inputData.masterData.RESelectedTest.ntestgrouptestcode\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function addREMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode, ntestgrouptestcode: inputData.test.ntestgrouptestcode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ntestgroupmaterial : transactionStatus.YES,\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\r\n                            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREMaterialComboGet(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode, ntestgrouptestcode: inputData.ntestgrouptestcode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ntestgroupmaterial : inputData.ntestgroupmaterial,\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\r\n                            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        //ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREMaterialCategoryByType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcode:materialMap.get(\"DefaultValue\")|| {},\r\n                            nmaterialinventorycode:materialInventoryMap.get(\"DefaultValue\")|| {},\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                        },\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialByCategory(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                            savailablequantity: response.data.MaterialInventory[0].savailablequatity,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname\r\n                        },\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialInvertoryByMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname,\r\n                            savailablequantity: response.data.MaterialInventory[0].savailablequatity\r\n                        },\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAvailableMaterialQuantity(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.jsondata.Unit\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function deleteInstrumentRecord(inputData) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n//             userinfo: inputData.userInfo,\r\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n//             .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             ...response.data\r\n//                         },\r\n//                         loading: false,\r\n//                         operation: \"delete\",\r\n//                         openModal: false,\r\n//                         loadEsign: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchMaterialRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\r\n            nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        selectedRecord: {\r\n                            ...EditResultUsedMaterial,\r\n                            stestsynonym: inputData.editRow.jsondata.stestsynonym,\r\n                            npreregno: EditResultUsedMaterial.npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            nmaterialtypecode: {\r\n                                label: EditResultUsedMaterial.jsondata.smaterialtypename,\r\n                                value: EditResultUsedMaterial.nmaterialtypecode\r\n                            },\r\n                            nmaterialcatcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcategorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\r\n                            },\r\n                            nmaterialcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialname,\r\n                            },\r\n                            nmaterialinventorycode: {\r\n                                \"value\": EditResultUsedMaterial.ninventorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.sinventoryid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": EditResultUsedMaterial.ntztodate,\r\n                                \"label\": EditResultUsedMaterial.stztodate\r\n                            },\r\n                            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\r\n                            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\r\n                            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\r\n                            sremarks: EditResultUsedMaterial.jsondata.sremarks,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.sunitname\r\n                        },\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\r\n                            staskprocedure: response.data.EditResultUsedTasks[0].jsondata.staskprocedure,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    sarno: inputData.selectedRecord.sarno,\r\n                    ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue,\r\n                        sarno: inputData.selectedRecord.sarno,\r\n                        ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                        stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                        sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata'] = {\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.jsondata) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: {\r\n                    nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: selectedRecord.jsondata,\r\n                    npreregno: selectedRecord.npreregno,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                },\r\n                //jsondata: selectedRecord.jsondata,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                //ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n            npreregno: parameterData.npreregno,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode\r\n        }\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n\r\n                let selectedForumulaInput = [];\r\n                let selectedForumulaInput1 = [];\r\n                let selectedMandatory = [];\r\n                selectedRecord.ResultParameter = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n\r\n                response.data.DynamicFormulaFields.map((fields, index) => {\r\n                    let dynamicformulafields = {};\r\n                    let selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, fields.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n                    if (selectedTestParameters.length > 0) {\r\n\r\n                        selectedTestParameters = selectedTestParameters.filter(element => {\r\n                            return element.sresult !== null && element.sresult != ''\r\n                        });\r\n\r\n                        const nisaverageneed = selectedTestParameters.length;\r\n\r\n                        const maxResultCode = selectedTestParameters.length > 0 ? Math.max(...selectedTestParameters.map(o => o.ntransactionresultcode)) : -1;\r\n\r\n\r\n                        // const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\r\n                        //                 return element.sresult !== null && element.sresult !='';\r\n                        //               }).map(o => o.ntransactionresultcode)));\r\n\r\n                        const paramValue = getRecordBasedOnPrimaryKeyName(selectedTestParameters, maxResultCode, \"ntransactionresultcode\");\r\n                        if (paramValue.length == 0) {\r\n                            dynamicformulafields.svalues = \"\";\r\n                            dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                            //dynamicformulafields.nisaverageneed = 0;\r\n                            dynamicformulafields.senableAverage = false;\r\n                            response.data.DynamicFormulaFields[index].nisaverageneed = 0; \r\n                            selectedForumulaInput.push(dynamicformulafields);\r\n                            selectedMandatory.push(\"\");\r\n\r\n                        }\r\n                        else {\r\n                            if ((maxResultCode >= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false)\r\n                                || (response.data.DynamicFormulaFields[index].svalue != \"\" && response.data.DynamicFormulaFields[index].svalue != null\r\n                                    ? maxResultCode <= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false : \"\")) {\r\n                                dynamicformulafields.svalues = paramValue[0].sresult;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                //dynamicformulafields.nisaverageneed = nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                response.data.DynamicFormulaFields[index].nisaverageneed = nisaverageneed; \r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(paramValue[0].sresult);\r\n                            }\r\n                            else {\r\n                                dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                        dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                        // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                        selectedForumulaInput.push(dynamicformulafields);\r\n                        selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                    }\r\n                    return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)[0])\r\n\r\n\r\n                });\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            naverageroundingdigits: parameterData.nroundingdigits,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            DynamicFormulaFields: response.data.DynamicFormulaFields,\r\n                            //selectedForumulaInput: []\r\n                            //  DynamicFormulaFields.map((fields, index) => {\r\n                            //     return {\r\n                            //         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n\r\n                            //     }\r\n\r\n                            //  });\r\n                            // response.data.DynamicFields.map((fields, index) =>\r\n                            selectedForumulaInput,\r\n                            selectedMandatory\r\n                            // selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n                            // )\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getREFilterTemplate(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"testinitiate\") {\r\n                        dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    }\r\n                    else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.esignreason;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport function getAverageResult(parameterData, index, selectedForumulaInput, userInfo, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n    \r\n        let selectedTestParameters = selectedRecord.ResultParameter.filter(element => {\r\n            return element.editable == true;\r\n        });\r\n\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, selectedRecord.parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, parameterData.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n        let ResultParameterNew = [];\r\n        if (selectedTestParameters.length > 0) {\r\n            selectedTestParameters.map(Parameter => {\r\n                let resultParameterValues = {};\r\n                resultParameterValues.ntransactionresultcode = Parameter.ntransactionresultcode;\r\n                resultParameterValues.sresult = Parameter.sresult;\r\n                resultParameterValues.ntestparametercode = Parameter.ntestparametercode;\r\n                ResultParameterNew.push(resultParameterValues);\r\n            })\r\n\r\n        }\r\n\r\n        let inputParamData = {\r\n            naverageroundingdigits: selectedRecord.naverageroundingdigits,\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            ntestparametercode: parameterData.ndynamicformulafieldcode,\r\n            userinfo: userInfo,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode,\r\n            ResultParameter: ResultParameterNew\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAverageResult\", inputParamData)\r\n            .then(response => {\r\n                selectedForumulaInput[index].soldvalue =  selectedForumulaInput[index].svalues;\r\n                selectedForumulaInput[index].svalues = response.data.AverageResult.sresult;\r\n                selectedForumulaInput[index].senableAverage = true;\r\n                //selectedForumulaInput[index].svaluesold = \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            selectedForumulaInput\r\n                        },\r\n                        // selectedRecord: {\r\n                        //     ...selectedRecord,\r\n                        //     parameterData: parameterData,\r\n                        //     sformulacalculationdetail: response.data.query,\r\n                        //     formulainput: response.data.Formula,\r\n                        //     resultindex: index,\r\n                        //     selectedForumulaInput,\r\n                        //     selectedMandatory\r\n                        // },\r\n                        // validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}