{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\BatchCreation.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport reject from \"../../assets/image/reject.svg\";\nimport { callService, crudMaster, updateStore, getTestInstrumentComboService, getTestInstrumentCategory, getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction, createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction, getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation, batchInitiateAction, getBCRegistrationSubType, batchCompleteAction, validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory, getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv, getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction //,batchTAT\n} from '../../actions';\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport Esign from '../audittrail/Esign';\nimport { ProductList } from '../product/product.styled';\nimport CustomPopover from '../../components/customPopover';\nimport BatchCreationFilter from './BatchCreationFilter';\nimport AddBatchCreation from './AddBatchCreation';\nimport AddBatchinitiate from './AddBatchinitiate';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport SampleTab from './SampleTab';\nimport BatchhistoryTab from './BatchhistoryTab';\nimport { process } from '@progress/kendo-data-query';\nimport AddSample from './AddSample';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ViewInfo from './ViewInfo';\nimport { Affix } from 'rsuite';\nimport AddMaterialIqc from './AddMaterialIqc';\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\nimport BatchResultTab from './BatchResultTab';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BatchCreation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.batchMandatoryFields = [{\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"sinstrumentname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTID\",\n      \"dataField\": \"sinstrumentid\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PRODUCT\",\n      \"dataField\": \"sproductname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.completeMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.initiateMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHINITIATEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.materialIqcMandatory = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"smaterialtypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"smaterialname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"sinventoryid\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    {\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    this.getSamples = selectedbatchmaster => {\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n\n      if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else {\n        this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID);\n      }\n    };\n\n    this.getIqcSamples = SelectedBatchmaster => {\n      if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED || SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDIQC\"\n        }));\n      } else {\n        let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n        let inputData = {};\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData['naddcontrolCode'] = addcontrolcode; // inputData['section']={\n        //         nsectioncode: SelectedBatchmaster.nsectioncode\n        // };\n\n        inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\n        this.props.getIqcSamples(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\n          fetchUrl: \"batchcreation/getSampleTabDetails\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let jsondata = inputData.selectedRecord;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Sample\",\n          postParam,\n          inputData: {\n            Sample: {\n              \"sarno\": inputData.selectedRecord.sarno,\n              \"ssamplearno\": inputData.selectedRecord.ssamplearno,\n              \"stestname\": inputData.selectedRecord.stestname,\n              \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode\n            },\n            \"userInfo\": this.props.Login.userInfo,\n            nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\n            masterData: { ...this.props.Login.masterData,\n              \"samples\": []\n            },\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.deleteSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.cancelRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.nbatchsampleiqccode,\n          fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"IQCSample\",\n          postParam,\n          inputData: {\n            iqcSample: inputData.selectedRecord,\n            nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\n            masterData: this.props.Login.masterData,\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.cancelIQCSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_BATCHHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchhistoryAction(inputData, true);\n      } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchIqcSampleAction(inputData, true);\n      } else if (screenName == \"IDS_RESULTS\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchViewResultAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            batchactiveKey: screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Samples, event.dataState),\n        sampleState: event.dataState\n      });\n    };\n\n    this.dataStateBatchHistoryChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\n        histortState: event.dataState\n      });\n    };\n\n    this.dataStateBatchIqcChangeChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\n        iqcsampleState: event.dataState\n      });\n    };\n\n    this.dataStateViewChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\n        viewstate: event.dataState\n      });\n    };\n\n    this.getApprovalVersion = data => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      inputData = {\n        needFilterSubmit: \"false\",\n        nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n        fromDate: obj.fromDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n        toDate: obj.toDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n        nregtypecode: data.item.nregtypecode,\n        userInfo: this.props.Login.userInfo,\n        nregsubtypecode: data.item.nregsubtypecode,\n        masterData: this.props.Login.masterData,\n        isneedapprovalfilter: true,\n        defaultRegistrationSubType: data.item,\n        isneedrealFilterStatus: \"false\",\n        realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n        realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n        realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n        realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n      };\n      this.props.getBCApprovalConfigVersion(inputData);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_SAMPLE\", /*#__PURE__*/React.createElement(SampleTab, {\n        sample: this.props.Login.masterData.Samples || [],\n        dataResult: process(this.props.Login.masterData.Samples || [], this.state.sampleState),\n        dataState: this.state.sampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        deleteRecord: this.deleteRecord,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreItem) || [],\n        methodUrl: \"Samples\",\n        getSamples: () => this.getSamples(this.props.Login.masterData.SelectedBatchmaster) // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\n        //inputParam={this.props.Login.inputParam}\n        ,\n        screenName: \"IDS_SAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 9\n        }\n      }));\n      tabMap.set(\"IDS_BATCHIQCSAMPLE\", /*#__PURE__*/React.createElement(BatchIqcSampleTab, {\n        iqcsample: this.props.Login.masterData.iqcsample || [],\n        dataResult: process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState),\n        dataState: this.state.iqcsampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateBatchIqcChangeChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        cancelRecord: this.cancelRecord,\n        methodUrl: \"IQCSample\",\n        getIqcSamples: () => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster),\n        screenName: \"IDS_BATCHIQCSAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 9\n        }\n      }));\n\n      if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED) {\n        tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(BatchResultTab, {\n          ELNTest: this.props.Login.masterData.ELNTest || [],\n          resultview: this.props.Login.masterData.Resultview || [],\n          dataResult: process(this.props.Login.masterData.Resultview || [], this.state.viewstate),\n          dataState: this.state.viewstate,\n          dataStateChange: this.dataStateViewChange,\n          userInfo: this.props.Login.userInfo,\n          methodUrl: \"BatchViewResult\",\n          screenName: \"IDS_RESULTS\",\n          intl: this.props.intl,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          selectedfilename: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      tabMap.set(\"IDS_BATCHHISTORY\", /*#__PURE__*/React.createElement(BatchhistoryTab, {\n        batchhistory: this.props.Login.masterData.Batchhistory || [],\n        dataResult: process(this.props.Login.masterData.Batchhistory || [], this.state.histortState),\n        dataState: this.state.histortState,\n        dataStateChange: this.dataStateBatchHistoryChange,\n        userInfo: this.props.Login.userInfo,\n        methodUrl: \"Batchhistory\",\n        screenName: \"IDS_BATCHHISTORY\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 9\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            toDate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            toDate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(event.value),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCRegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userInfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          const nregsubtypecode = this.state; //this.setState({ nregsubtypecode:event });\n\n          this.getApprovalVersion(event);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getBCFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\n          //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          // inputData = {\n          //     nflag: 4,\n          //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\n          //     todate: obj.toDate,//this.props.Login.masterData.toDate,\n          //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n          //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n          //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n          //     napprovalversioncode: event.value,\n          //     userinfo: this.props.Login.userInfo,\n          //     defaultApprovalConfigVersion: event.item,\n          //     masterData: this.props.Login.masterData,\n          //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          // }\n          // this.props.getBCJobStatus(inputData)\n          const ApprovalVersionValue = this.state;\n          this.setState({\n            ApprovalVersionValue: event\n          });\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else if (fieldname === \"test\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else {\n          const selectedRecord = this.state;\n          this.setState({\n            selectedRecord: event\n          });\n        }\n      }\n    };\n\n    this.handleFilterDateChange = (dateValue, dateName) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let sampleList = this.state.samples || [];\n      let addedSamplesList = [];\n\n      if (checked) {\n        //const data = event.dataItems.map(item => {\n        const data = event.target.props.data.map(item => {\n          if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            sampleList.push({ ...item,\n              selected: false\n            });\n            item.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = olditem;\n            newItem[\"jsonuidata\"]['samplelist'] = olditem;\n            addedSamplesList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          sampleList,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        // let sampleListData = this.state.sampleList || [];\n        // let deletedListdData = this.state.sampleList || [];\n        let sampleListData = this.state.samples || [];\n        let deletedListdData = this.state.samples || [];\n        const data = this.state.samples.map(item => {\n          sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          samples: data,\n          addedSamplesList: sampleListData,\n          deletedList: deletedListdData,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } // const data = this.state.addComponentDataList.map(item=>{\n      //     if (checked){\n      //         addedComponentList.push({...item, selected:false});\n      //     }\n      //     else{\n      //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\n      //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \n      //     }  \n      //     item.selected = checked;\n      //     return item;\n      // });\n\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedSamplesList = this.state.addedSamplesList || []; //let addedSamplesList= [];\n\n      let samples = this.state.samples || [];\n      const samplesList = this.state.samples.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n          } else {\n            // if(addedSamplesList.length === 0){\n            addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode); //   }else{\n            //     this.state.samples.map((item1,index) => { \n            //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\n            //             if(this.state.samples.length == 1){\n            //                 addedSamplesList=[];\n            //             }else{\n            //                 const newItem = JSON.parse(JSON.stringify(item1));\n            //                 newItem.selected = false;\n            //                 newItem[\"jsondata\"]={};\n            //                 newItem[\"jsonuidata\"]={};\n            //                 newItem[\"jsondata\"]['samplelist'] = item1\n            //                 newItem[\"jsonuidata\"]['samplelist'] = item1\n            //                 //addedSamplesList.push(newItem);\n            //                 addedSamplesList = item1;\n            //             }  \n            //         }\n            //     } \n            //   )\n          }\n        }\n\n        return item;\n      }); ///samplesList = addedSamplesList;\n\n      this.setState({\n        samplesList,\n        addedSamplesList,\n        samples,\n        initialList: addedSamplesList,\n        addSelectAll: this.valiateCheckAll(samplesList),\n        deleteSelectAll: this.valiateCheckAll(samplesList)\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n      console.log(\"handle save:\", selectedRecord);\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SPECIFICATION\",\n        \"dataField\": \"nallottedspeccode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n      let selectedSpec = this.props.Login.selectedSpec;\n      selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n      selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n      selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedSpec,\n          openModal: true,\n          openSpecModal: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.ConfirmDelete = (selectedBatch, deleteId, operation) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\n    };\n\n    this.completePopUpStartActions = completeId => {\n      // if(this.props.Login.masterData.nneedtestinitiate === true){\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } //    }else \n      else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } else {\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         openModal: true, \n        //         completeId : completeId,\n        //         masterData: this.props.Login.masterData,\n        //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n        //         operation: \"complete\"\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"completeId\"] = completeId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"complete\";\n        this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.AddSpec = e => {\n      if (this.state.selectedMaterial !== undefined && this.state.selectedMaterialCategory !== undefined) {\n        let inputData = {};\n        inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\n        inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode; // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \n        // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \n        // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n\n        this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_FILLALLDETAILSTOADDSPEC\"\n        }));\n      }\n    };\n\n    this.testPopUpStartActions = testStartId => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } // else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"initiate\";\n        this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData); //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 openModal: true, \n        //                 testStartId : testStartId,\n        //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\n        //                 masterData: this.props.Login.masterData,\n        //                 operation: \"initiate\"\n        //             }\n        //         }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.testStartActions = (selectedmaster, testStartId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } //else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        let jsonuidata = [];\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/initiateBatchcreation\",\n          isSingleGet: true,\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n\n        if (this.props.Login.masterData.iqcsample.length > 0) {\n          let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\n          inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"nneedjoballocationiqc\"] = true;\n          inputData[\"isiqcdata\"] = true;\n        } else {\n          inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"isiqcdata\"] = false;\n          inputData[\"nneedjoballocationiqc\"] = false;\n        }\n\n        inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n        inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\n        inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"batchsample\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\n        inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\n        inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\n        inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\n        inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"initiate\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\n        }\n      }\n    };\n\n    this.batchSaveIQCActions = selectedmaster => {\n      if (parseFloat(this.state.selectedRecord.susedquantity) < parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\n        if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\n          let userInfo = {};\n          let inputRegistrationData = {};\n          let inputMaterialInventoryData = {};\n          let inputBatchData = {};\n          const map = {};\n          let batchCreationSampleData = {};\n          let batchCreationTestData = {};\n          let batchCreationSampleArray = [];\n          let batchCreationTestArray = [];\n          let samplecombinationuniqueArray = [];\n          let inputMaterialInventoryArrData = [];\n          batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\n          batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\n          batchCreationSampleData[\"slno\"] = 1;\n          batchCreationSampleArray.push(batchCreationSampleData);\n          inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\n          inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\n          inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\n          inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode; // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n          // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n          // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n          inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n          inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n          inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\n          inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\n          inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\n          inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\n          inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n          inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n          inputRegistrationData[\"jsondata\"] = {\n            nmaterialcode: this.state.selectedMaterial.value,\n            nmaterialcatcode: this.state.selectedMaterialCategory.value,\n            smaterialcatname: this.state.selectedMaterialCategory.label,\n            sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n            nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n            smaterial: this.state.selectedMaterial.item.smaterialname,\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n            nmaterialtypecode: this.state.selectedMaterialType.value,\n            susedquantity: this.state.selectedRecord.susedquantity,\n            sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n            savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n            //materialtype:this.state.selectedMaterialType.label,\n            sremarks: this.state.selectedRecord.sremarks,\n            nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n          };\n          inputRegistrationData[\"jsonuidata\"] = {\n            nmaterialcode: this.state.selectedMaterial.value,\n            nmaterialcatcode: this.state.selectedMaterialCategory.value,\n            smaterialcatname: this.state.selectedMaterialCategory.label,\n            sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n            nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n            smaterial: this.state.selectedMaterial.item.smaterialname,\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n            nmaterialtypecode: this.state.selectedMaterialType.value,\n            susedquantity: this.state.selectedRecord.susedquantity,\n            sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n            savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n            //materialtype:this.state.selectedMaterialType.label,\n            sremarks: this.state.selectedRecord.sremarks,\n            nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n          }; // inputMaterialInventoryData = {\n          //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\n          // }\n          //  inputMaterialInventoryData = {\n          //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n          //         jsondata : {\n          //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n          //             nqtyused: this.state.selectedRecord.susedquantity\n          //         },\n          //         jsonuidata : {\n          //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n          //             nqtyused: this.state.selectedRecord.susedquantity\n          //         },\n          //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n          //  };\n\n          inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\n          inputMaterialInventoryData[\"jsondata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n            nqtyused: this.state.selectedRecord.susedquantity,\n            nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n          }; //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\n\n          inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\n          inputMaterialInventoryData[\"jsonuidata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n            nqtyused: this.state.selectedRecord.susedquantity,\n            nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n          }; //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\n\n          batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA; //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\n\n          batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n          batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n          batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA; //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\n\n          batchCreationTestData[\"nrepeatcountno\"] = 1; //--\n          //    batchCreationTestData[\"ntestretestno\"]=0;\n\n          batchCreationTestData[\"nparametercount\"] = 1; //--\n\n          batchCreationTestData[\"slno\"] = 1; //--\n\n          batchCreationTestArray.push(batchCreationTestData);\n          map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n          map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n          userInfo = this.props.Login.userInfo;\n          map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n          map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n          map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n          map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n          map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n          map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n          map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\n          inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\n          map['Registration'] = inputRegistrationData;\n          map['Batchsampleiqc'] = inputBatchData;\n          map['RegistrationSample'] = batchCreationSampleArray;\n          map['testgrouptest'] = batchCreationTestArray;\n          map['userInfo'] = userInfo;\n          map['samplecombinationunique'] = samplecombinationuniqueArray;\n          map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\n          const inputParam = {\n            inputData: map,\n            classUrl: \"batchcreation\",\n            methodUrl: \"Batchcreation\",\n            displayName: \"IDS_BATCHIQCSAVE\",\n            operation: \"createiqc\"\n          };\n          this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ADDSPECIFICATIONS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\"\n        }));\n      }\n    };\n\n    this.cancelBatch = (selectedmaster, cancelId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHINITIATEDRECORD\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/cancelBatch\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT; // inputData[\"Batchhistory\"] ={\n        //     dtransactiondate : formatInputDate(new Date(),true),\n        //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\n        //     };\n        //inputData[\"completeId\"] = completeId;\n\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[3];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batch\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"cancel\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCancelAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.batchCompleteActions = (selectedmaster, completeId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/completeBatchcreation\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"completeId\"] = completeId;\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"complete\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCompleteAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openSpecModal = this.props.Login.openSpecModal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\n          //    this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n\n        selectedRecord[\"esigncomments\"] = \"\";\n        selectedRecord[\"esignpassword\"] = \"\";\n      } else if (this.props.Login.openSpecModal) {\n        loadEsign = false;\n        openSpecModal = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          openSpecModal,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let inputData = {};\n      selectedRecord[fieldName] = comboData.item;\n\n      if (fieldName === \"sproductname\") {\n        selectedRecord[\"nproductcode\"] = comboData.value;\n        this.setState({\n          selectedProduct: comboData\n        });\n      } else if (fieldName === \"ssectionname\") {\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n        inputData['section'] = selectedRecord.ssectionname;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData); // this.setState({ selectedSection:comboData });\n      } else if (fieldName === \"stestname\") {\n        if (this.props.Login.operation === \"update\") {\n          selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value;\n        }\n\n        selectedRecord[\"ntestcode\"] = comboData.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n        selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n        selectedRecord['sinstrumentcatname'] = undefined;\n        selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\n      } else if (fieldName === \"sinstrumentcatname\") {\n        selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\n        selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\n        selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n        selectedRecord['sinstrumentname'] = undefined;\n        this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData); //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\n      } else if (fieldName === \"smaterialcatname\") {\n        selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n        selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n        this.setState({\n          selectedMaterialCategory: comboData\n        });\n        this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"smaterialname\") {\n        selectedRecord[\"nmaterialcode\"] = comboData.value;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['needsection'] = comboData.item.needsection;\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n        this.setState({\n          selectedMaterial: comboData\n        });\n        this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"sinventoryid\") {\n        selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\n        selectedRecord['userInfo'] = this.props.Login.userInfo;\n        selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\n        this.setState({\n          selectedMaterialInventory: comboData\n        }); // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\n        //     selectedRecord['nsectioncode']=transactionStatus.NA;\n        // }else{\n\n        selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode; //}\n\n        this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n      } else if (fieldName === \"sinstrumentname\") {\n        selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\n        selectedRecord[\"sinstrumentname\"] = comboData.label;\n        selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n        selectedRecord['selectedInstrument'] = comboData.item;\n        this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\n      } else {\n        this.setState({\n          selectedInstrumentId: comboData\n        });\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onMultiColumnValue = (value, key, flag, label, keys) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n\n        if (flag) {\n          keys.map((objkey, index) => {\n            return selectedRecord[objkey] = {\n              \"label\": value[0][label[index]],\n              \"value\": value[0][objkey]\n            };\n          });\n        }\n      } else {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = \"\";\n        });\n        keys.map((objkey, index) => {\n          return selectedRecord[objkey] = \"\";\n        });\n      }\n\n      this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\n    };\n\n    this.onMultiColumnMAHChange = (value, key) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.clearComponentInput = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"nproductcode\"] = undefined;\n      selectedRecord[\"ncomponentcode\"] = undefined;\n      selectedRecord[\"smanuflotno\"] = \"\";\n      selectedRecord[\"dateprompt\"] = transactionStatus.NO;\n      selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\n      selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.saveSample = addedsamplelist => {\n      if (addedsamplelist === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      } else if (addedsamplelist.length > 0) {\n        let sampleArray = [];\n        addedsamplelist.map(item => sampleArray.push({\n          npreregno: item.npreregno,\n          ntransactionsamplecode: item.ntransactionsamplecode,\n          ntransactiontestcode: item.ntransactiontestcode,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ? this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\n          sarno: item.jsonuidata.samplelist.sarno,\n          ssamplearno: item.jsonuidata.samplelist.ssamplearno,\n          stestname: item.jsonuidata.samplelist.stestname,\n          jsonuidata: {\n            samplelist: item.jsonuidata.samplelist\n          },\n          jsondata: {\n            samplelist: item.jsondata.samplelist\n          }\n        }));\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode; // batchSample = {\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\n        // }\n        //jsondata : \n\n        const inputParam = {\n          inputData: {\n            batchSample: nbatchmastercode,\n            sampleArray,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\n          }\n        };\n        this.props.createSampleAction(inputParam.inputData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"createSample\") {\n        this.saveSample(this.state.addedSamplesList);\n      } else if (this.props.Login.operation === \"initiate\") {\n        this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId);\n      } else if (this.props.Login.operation === \"complete\") {\n        this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId);\n      } else if (this.props.Login.operation === \"createiqcsample\") {\n        this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n\n        if (this.props.Login.operation === \"create\") {\n          inputData[\"fromDate\"] = obj.fromDate;\n          inputData[\"toDate\"] = obj.toDate;\n        }\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedcombodataforFilter\"] = \"true\";\n        inputData[\"needFilterSubmit\"] = \"false\";\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\n        inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\n        inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\n\n        inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\n        inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\n        inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\n        inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\n        inputData[\"sbatcharno\"] = '-'; // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId && this.state.selectedInstrumentId.label; // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\n        let postParam = undefined;\n        postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          unchangeList: [\"FromDate\", \"ToDate\"],\n          isSingleGet: true,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef\n        };\n\n        if (this.props.Login.operation === \"create\") {\n          this.searchRef.current.value = \"\";\n          this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n        } else {\n          inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\n          inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_BATCHCREATION\",\n                operation: inputParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n          }\n        }\n      } // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n      // if (esignNeeded) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: \"IDS_BATCHCREATION\",\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\n      //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\n      // }\n\n    };\n\n    this.deleteBatchCreation = (selectedBatch, deleteId, operation) => {\n      if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || selectedBatch.ntransactionstatus === transactionStatus.INITIATED || selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedBatch.nbatchmastercode,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userInfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"currentdate\"] = formatInputDate(new Date(), true);\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT; // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"selectedBatch\"] = selectedBatch;\n        inputData[\"samples\"] = this.props.Login.masterData.Samples;\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          operation,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.fetchEditData = editParam => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        this.props.getActiveBatchCreationService(editParam, this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"needFilterSubmit\"] = \"true\";\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT; // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\n\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\n\n      if (this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegSubTypeValue !== null && this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA || this.props.Login.masterData.realApproveConfigVersion !== null && this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA || this.props.Login.masterData.defaultFilterStatus !== null) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA; //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onClickReport = (selectedRecord, flag, ncontrolcode) => {\n      const reportParam = {\n        classUrl: \"certificategeneration\",\n        methodUrl: \"reportGeneration\",\n        screenName: \"CertificateGeneration\",\n        operation: \"previewReport\",\n        primaryKeyField: \"nreleasebatchcode\",\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: -1,\n        inputData: {\n          sprimarykeyname: 'nreleasebatchcode',\n          nprimarykey: selectedRecord.nreleasebatchcode,\n          nreleasebatchcode: selectedRecord.nreleasebatchcode,\n          ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\n          ndecisionstatus: selectedRecord.ndecision,\n          // === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\n          nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\n          ncontrolcode,\n          ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\n          userinfo: this.props.Login.userInfo,\n          nflag: flag,\n          skipbatchvalidation: true\n        }\n      };\n      this.props.onClickReport(reportParam);\n    };\n\n    this.reportMethod = value => {\n      if (value.method === 1) {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\n      } else {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\n      }\n    };\n\n    const sampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const histortState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const iqcsampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const viewstate = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedFilter: {},\n      sampleState,\n      histortState,\n      iqcsampleState,\n      viewstate,\n      selectedRecord: {},\n      //confirmmsg:this.ConfirmMessage.bind(this),\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      }\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\", \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\n    this.sampleMandatoryFields = [];\n    this.copyMandatoryFields = [];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (props.Login.masterStatus !== \"\") {\n    //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n    //        if(props.Login.operation == \"initiate\"){\n    //         toast.warn(props.Login.masterStatus);\n    //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\n    //        }\n    //     }\n    // }\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null; // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\n        \"width\": \"150px\",\n        \"columnSize\": \"4\"\n      };\n    });\n    return temparray;\n  }\n\n  // headerSelectionChange = (event) => {\n  //     const checked = event.syntheticEvent.target.checked;\n  //     let addedComponentList = this.state.addedComponentList || [];\n  //     if (checked) {\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n  //                 addedComponentList.push({ ...item, selected: false });\n  //                 item.selected = checked;\n  //                 return item;\n  //             } else {\n  //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n  //                 olditem.selected = checked;\n  //                 return olditem;\n  //             }\n  //         });\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  //     else {\n  //         let addedComponentData = this.state.addedComponentList || [];\n  //         let deletedListdData = this.state.deletedList || [];\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             item.selected = checked;\n  //             return item;\n  //         });\n  //         // console.log(\"data:\",data1, data2);\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  render() {\n    let reportActionList = [];\n    const getBatch = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"Batchcreation\",\n      keyName: \"batchcreation\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.realFromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.realFromDate) : undefined;\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.realToDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.realToDate) : undefined;\n    const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\n    const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\n    const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\n    const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\n    const addParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      primaryeyField: \"nreleasebatchcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      //inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\n      masterData: this.props.Login.masterData,\n      fromdate: this.props.Login.masterData.fromDate,\n      todate: this.props.Login.masterData.toDate,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n      napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n      ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    const viewInfoFields = [{\n      \"fieldName\": \"sbatcharno\",\n      \"label\": \"IDS_BATCHARNO\"\n    }, {\n      \"fieldName\": \"ssectionname\",\n      \"label\": \"IDS_SECTION\"\n    }, {\n      \"fieldName\": \"stestname\",\n      \"label\": \"IDS_TESTNAME\"\n    }, {\n      \"fieldName\": \"sinstrumentcatname\",\n      \"label\": \"IDS_INSTRUMENTCATEGORY\"\n    }, {\n      \"fieldName\": \"sinstrumentid\",\n      \"label\": \"IDS_INSTRUMENTID\"\n    }, {\n      \"fieldName\": \"sinstrumentname\",\n      \"label\": \"IDS_INSTRUMENTNAME\"\n    }, {\n      \"fieldName\": \"sproductname\",\n      \"label\": \"IDS_SAMPLETYPE\"\n    }, {\n      \"fieldName\": \"stransdisplaystatus\",\n      \"label\": \"IDS_STATUS\"\n    }, {\n      \"fieldName\": \"username\",\n      \"label\": this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" : this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\" : \"IDS_BATCHCREATEDBY\"\n    }];\n    let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\n\n    if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\n      stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\n    }\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const editParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"update\",\n      primaryKeyField: \"nbatchmastercode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      naddcontrolCode: addId,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n    };\n    const filterParam = {\n      inputListName: \"Batchmaster\",\n      selectedObject: \"SelectedBatchmaster\",\n      primaryKeyField: \"nbatchmastercode\",\n      fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n      fecthInputObject: {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userInfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\n        ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\n        nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA //fromDate, toDate, \n        //stransactionstatuscode,\n        //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\n\n      },\n      masterData: this.props.Login.masterData,\n      //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_BATCHSTATUS\",\n      \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\n    } // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // }\n    ];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Batchmaster || [],\n      selectedMaster: this.props.Login.masterData.SelectedBatchmaster,\n      primaryKeyField: \"nbatchmastercode\",\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData //getMasterDetail={this.props.getSelectedBatchCreationDetail}\n      ,\n      getMasterDetail: batch => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: getBatch,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_BATCHCREATION\"\n      }) //mainField=\"stestname\"\n      ,\n      mainField: \"sbatcharno\",\n      firstField: \"stestname\",\n      secondField: \"sinstrumentname\",\n      selectedListName: \"SelectedBatchmaster\",\n      objectName: \"BatchCreation\",\n      listName: \"IDS_BATCHCREATION\",\n      needValidation: false,\n      hidePaging: false // subFields={\n      //     [\n      //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\n      //         { [designProperties.VALUE]: \"sinstrumentname\" },\n      //         // { [designProperties.VALUE]: \"smahname\" },\n      //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\n      //     ]\n      // }\n      ,\n      needFilter: true,\n      needMultiSelect: false,\n      subFieldsLabel: true,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      isClearSearch: this.props.Login.isClearSearch // skip={this.state.skip}\n      // take={this.state.take}\n      // handlePageChange={this.handlePageChange}\n      ,\n      addId: addId,\n      showFilterIcon: true,\n      userRoleControlRights: this.state.userRoleControlRights,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getBatchSection(addParam) // openModal={() => this.props.getTestInstrumentComboService(addParam)}\n      ,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1198,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getTestInstrumentComboService(addParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1200,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\" //onClick={() => this.reloadData(false)} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1208,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 45\n        }\n      }))) // </Tooltip>\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(BatchCreationFilter, {\n          fromDate: this.state.selectedFilter[\"fromDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n          toDate: this.state.selectedFilter[\"toDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.state.nregsubtypecode || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.BCFilterStatus || [],\n          FilterStatusValue: this.state.FilterStatusValue || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.state.ApprovalVersionValue || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.selectedTestSynonym || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1221,\n            columnNumber: 54\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1252,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1255,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0 && this.props.Login.masterData.SelectedBatchmaster ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.sbatcharno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"view\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWINFO\"\n      }) // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\n      ,\n      onClick: () => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.fetchEditData(editParam) // onClick={() => this.props.getActiveBatchCreationService(editParam,\n      //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 77\n      }\n    })),\n    /*#__PURE__*/\n    // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\n    React.createElement(Nav.Link, {\n      name: \"initiateBatchCreation\" //  data-for=\"tooltip-common-wrap\" \n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BATCHINITIATE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\" //role=\"button\"\n      ,\n      onClick: () => this.testPopUpStartActions(testStartId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1307,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314,\n        columnNumber: 77\n      }\n    })) // :\"\"\n    , /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"completeBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETE\"\n      }),\n      onClick: () => this.completePopUpStartActions(completeId) //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\n      // onClick={() => this.props.validateBatchComplete({\n      //     masterData: this.props.Login.masterData,\n      //     userInfo: this.props.Login.userInfo,\n      //     userRoleControlRights: this.props.Login.userRoleControlRights,\n      //     ncontrolCode: completeId,\n      //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\n      // })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 75\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1350,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: reject,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 75\n      }\n    })), reportActionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: reportActionList,\n      Button: true,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      dynamicButton: value => this.reportMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 77\n      }\n    }) : \"\")))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384,\n        columnNumber: 64\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 67\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 69\n      }\n    })))))) : \"\"))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLE\"\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCH\"\n      }) : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCHIQCSAMPLE\"\n      }) : this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? this.batchMandatoryFields //  : this.props.Login.operation === \"initiate\"  ?\n      //    this.initiateMandatoryFields \n      //  : this.props.Login.operation === \"complete\" ?\n      //    this.completeMandatoryFields\n      : this.props.Login.operation === \"createiqcsample\" ? this.materialIqcMandatory : [],\n      showSaveContinue: this.state.showSaveContinue,\n      noSave: this.props.Login.operation === \"view\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(AddBatchCreation, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        handleDateChange: this.handleDateChange,\n        Test: this.state.Testvalues || [],\n        selectedInstrumentCategory: this.state.selectedInstCategory,\n        InstrumentCategory: this.state.InstrumentCategory,\n        Instrument: this.state.Instrument,\n        selectedInstrument: this.state.selectedInstrument,\n        productCategory: this.state.ProductCategory,\n        selectedProductCategory: this.state.selectedProductCategory,\n        TestValue: this.state.selectedTestSynonym || [],\n        product: this.state.Product || [],\n        instrumentID: this.state.InstrumentID || [],\n        selectedProduct: this.state.selectedProduct || [],\n        studyPlanList: this.props.Login.studyPlanList || [],\n        manufacturerList: this.props.Login.productManufacturerList || [],\n        maHolderList: this.props.Login.maHolderList || [],\n        timeZoneList: this.props.Login.timeZoneList || [],\n        selectedBacthCreation: this.props.Login.masterData.SelectedBatchmaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        selectedInstrumentId: this.state.selectedInstrumentId,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        batchCreationEditStatusList: this.props.Login.batchCreationEditStatusList,\n        Section: this.state.Section,\n        selectedSection: this.state.selectedSection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1450,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"createSample\" ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputOnChange: this.onInputOnChange,\n        getProductByCategory: this.getProductByCategory,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.userInfo,\n        productCategoryList: this.props.productCategoryList,\n        productList: this.props.productList,\n        componentList: this.props.componentList,\n        getDataForAddComponent: this.getDataForAddComponent,\n        clearComponentInput: this.props.clearComponentInput,\n        samples: this.state.samples || [],\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        addedComponentList: this.state.addedComponentList || [],\n        addedHeaderSelectionChange: this.addedHeaderSelectionChange,\n        addedSelectionChange: this.addedSelectionChange //dataStateChange={this.dataStateChange} \n        ,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        screenName: this.props.screenName,\n        addSelectAll: this.state.addSelectAll,\n        deleteSelectAll: this.state.deleteSelectAll,\n        onDeleteSelectedComponent: this.onDeleteSelectedComponent,\n        componentPopupSkip: this.props.componentPopupSkip,\n        componentPopupTake: this.props.componentPopupTake,\n        componentPageSizes: this.props.componentPageSizes,\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1483,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ? /*#__PURE__*/React.createElement(AddBatchinitiate, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        handleDateChange: this.handleDateChange,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1514,\n          columnNumber: 28\n        }\n      }) : this.props.Login.operation === \"view\" ? /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1523,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1524,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(ViewInfo, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecordView: this.props.Login.masterData.selectedRecordView,\n        viewInfoFields: viewInfoFields,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1525,\n          columnNumber: 28\n        }\n      }))) : this.props.Login.operation === \"createiqcsample\" ? /*#__PURE__*/React.createElement(AddMaterialIqc, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        materialCategory: this.state.MaterialCategory,\n        selectedMaterialType: this.state.selectedMaterialType,\n        selectedMaterialCategory: this.state.selectedMaterialCategory,\n        onComboChange: this.onComboChange,\n        selectedMaterial: this.state.selectedMaterial,\n        screenName: this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATION\"\n        }),\n        handleSaveClick: this.handleSaveClick,\n        material: this.state.Material,\n        materialInventory: this.state.MaterialInventory,\n        AddSpec: this.AddSpec,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        loadSpec: this.props.Login.loadSpec,\n        selectedMaterialInventory: this.state.selectedMaterialInventory,\n        selectedInventoryUnit: this.props.Login.masterData.selectedInventoryUnit,\n        AgaramTree: this.props.Login.AgaramTree,\n        openNodes: this.props.Login.OpenNodes,\n        onTreeClick: this.onTreeClick,\n        focusKey: this.props.Login.FocusKey,\n        activeKey: this.props.Login.batchactiveKey,\n        Specification: this.props.Login.Specification,\n        selectedSpec: this.props.Login.selectedSpec,\n        selectedRecord: this.state.selectedRecord,\n        onSpecChange: this.onspecChange,\n        openSpecModal: this.props.Login.openSpecModal,\n        closeModal: this.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1533,\n          columnNumber: 28\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1415,\n        columnNumber: 21\n      }\n    }) : \"\", this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      selectedRecord,\n      filterData,\n      addedComponentList,\n      filterStatusList,\n      dataState,\n      sahDataState,\n      bahDataState,\n      chDataState,\n      testCommentDataState,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      BCFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      InstrumentCategory,\n      selectedInstCategory,\n      ProductCategory,\n      Instrument,\n      selectedInstrument,\n      selectedTestSynonym,\n      nregsubtypecode,\n      selectedProductCategory,\n      Product,\n      selectedProduct,\n      samples,\n      addSelectAll,\n      deleteSelectAll,\n      ApprovalVersionValue,\n      FilterStatusValue,\n      Section,\n      selectedSection,\n      sampleGridItem,\n      subsampleGridItem,\n      testGridItem = [],\n      DynamicGridItem,\n      samplegridmoreitem,\n      DynamicGridMoreItem,\n      MaterialCategory,\n      selectedMaterialType,\n      Material,\n      selectedMaterial,\n      selectedMaterialCategory,\n      MaterialInventory,\n      selectedMaterialInventory,\n      Specification,\n      selectedSpec,\n      addedSamplesList,\n      testGridArnoItems,\n      InstrumentID,\n      selectedInstrumentId,\n      sinstrumentid\n    } = this.state;\n    let isStateChanged = false;\n    let bool = false;\n    addedSamplesList = [];\n    samples = [];\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      isStateChanged = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname', 'ascending', 'ninstrumentcatcode', false);\n      Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname', 'ascending', 'ninstrumentcode', false);\n      ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname', 'ascending', 'nproductcatcode', false);\n      Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname', 'ascending', 'nproductcode', false);\n      Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname', 'ascending', 'nsectioncode', false);\n      MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname', 'ascending', 'nmaterialcatcode', false);\n      Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname', 'ascending', 'nmaterialcode', false);\n      MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid', 'ascending', 'nmaterialinventtranscode', false);\n      InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid', 'ascending', 'ninstrumentcode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      BCFilterStatus = BCFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n      InstrumentCategory = InstrumentCategory.get(\"OptionList\");\n      Instrument = Instrument.get(\"OptionList\");\n      ProductCategory = ProductCategory.get(\"OptionList\");\n      Product = Product.get(\"OptionList\");\n      Section = Section.get(\"OptionList\");\n      MaterialCategory = MaterialCategory.get(\"OptionList\");\n      Material = Material.get(\"OptionList\");\n      MaterialInventory = MaterialInventory.get(\"OptionList\");\n      InstrumentID = InstrumentID.get(\"OptionList\"); //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\n\n      samples = this.props.Login.masterData.samples;\n      addSelectAll = false;\n      deleteSelectAll = true;\n      nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ? {\n        label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\n        value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\n        item: this.props.Login.masterData.defaultRegistrationSubType\n      } : \"\";\n\n      if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\n        selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ? {\n          label: this.props.Login.masterData.selectedTestSynonym.stestname,\n          value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\n          item: this.props.Login.masterData.selectedTestSynonym\n        } : \"\";\n        let stestname = selectedTestSynonym.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          stestname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\n        selectedProductCategory = this.props.Login.masterData.selectedProductcategory ? {\n          label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\n          value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\n          item: this.props.Login.masterData.selectedProductcategory\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\n        selectedProduct = this.props.Login.masterData.selectedProduct ? {\n          label: this.props.Login.masterData.selectedProduct.sproductname,\n          value: this.props.Login.masterData.selectedProduct.nproductcode,\n          item: this.props.Login.masterData.selectedProduct\n        } : \"\";\n        let sproductname = selectedProduct.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sproductname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\n        selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ? {\n          label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\n          value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\n          item: this.props.Login.masterData.selectedInstrumentCategory\n        } : \"\"; //  selectedRecord['sinstrumentid']={};\n        //  selectedRecord['sinstrumentname']={};\n        //  selectedRecord = {...this.state.selectedRecord,sproductname,...selectedRecord};\n\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\n        selectedInstrument = this.props.Login.masterData.selectedInstrument ? {\n          label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\n          value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrument\n        } : \"\";\n        let sinstrumentname = selectedInstrument.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sinstrumentname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\n        selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ? {\n          label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\n          value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrumentId\n        } : \"\";\n        let sinstrumentid = selectedInstrumentId.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sinstrumentid,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\n        addedComponentList = this.props.Login.selectedComponentList;\n        isStateChanged = true; // this.setState({ addedComponentList });\n      }\n\n      if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\n        ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ? {\n          label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\n          value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\n          item: this.props.Login.masterData.defaultApprovalConfigVersion\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\n        FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ? {\n          label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\n          value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n          item: this.props.Login.masterData.defaultFilterStatus\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\n        selectedSection = this.props.Login.masterData.selectedSection ? {\n          label: this.props.Login.masterData.selectedSection.ssectionname,\n          value: this.props.Login.masterData.selectedSection.nsectioncode,\n          item: this.props.Login.masterData.selectedSection\n        } : \"\";\n        let ssectionname = selectedSection.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          ssectionname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\n        selectedMaterialType = this.props.Login.masterData.selectedMaterialType ? {\n          label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\n          value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\n          item: this.props.Login.masterData.selectedMaterialType\n        } : \"\";\n        selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\n        selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ? {\n          label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\n          value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\n          item: this.props.Login.masterData.selectedMaterialCategory\n        } : \"\";\n        selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\n        selectedMaterial = this.props.Login.masterData.selectedMaterial ? {\n          label: this.props.Login.masterData.selectedMaterial.smaterialname,\n          value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\n          item: this.props.Login.masterData.selectedMaterial\n        } : \"\";\n        selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\n        selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ? {\n          label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\n          value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\n          item: this.props.Login.masterData.selectedMaterialInventory\n        } : \"\";\n        selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit && this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\n        selectedRecord[\"susedquantity\"] = \"\";\n        selectedRecord[\"sremarks\"] = \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.isselectedrecordempty) {\n        selectedRecord = {};\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        Specification = this.props.Login.masterData.Specification && this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\n        selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        selectedRecord = this.props.Login.selectedRecord;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n        sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        DynamicGridMoreItem = [...samplegridmoreitem];\n        DynamicGridItem = [...testGridArnoItems, ...testGridItem, ...sampleGridItem, ...subsampleGridItem];\n        isStateChanged = true;\n      }\n    } // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\n    //     // let selectedRecord = {};\n    //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\n    //     'ascending', 'nmaterialcatcode', false);\n    //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\n    //     'ascending', 'nmaterialcode', false);\n    //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\n    //     'ascending', 'nmaterialinventorycode', false);\n    //      MaterialCategory = MaterialCategory.get(\"OptionList\")\n    //      Material = Material.get(\"OptionList\")\n    //      MaterialInventory = MaterialInventory.get(\"OptionList\")\n    //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\n    //      selectedRecord[\"Material\"]=Material\n    //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\n    //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\n    //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\n    //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\n    //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\n    //         isStateChanged = true;\n    //     }\n    //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\n    //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\n    //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\n    //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\n    //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\n    //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\n    //             item: this.props.Login.selectedRecord.selectedMaterial\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\n    //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\n    //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\n    //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\n    //             item: this.props.Login.selectedRecord.selectedMaterialInventory\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\n    //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\n    //         isStateChanged = true;\n    //     }\n\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      isStateChanged = true; //selectedRecord = this.props.Login.selectedRecord;\n\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterData,\n        addedComponentList,\n        filterStatusList,\n        dataState,\n        sahDataState,\n        bahDataState,\n        chDataState,\n        testCommentDataState,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        BCFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        selectedInstCategory,\n        InstrumentCategory,\n        Instrument,\n        selectedInstrument,\n        selectedTestSynonym,\n        nregsubtypecode,\n        ProductCategory,\n        selectedProductCategory,\n        Product,\n        selectedProduct,\n        samples,\n        addSelectAll,\n        deleteSelectAll,\n        ApprovalVersionValue,\n        FilterStatusValue,\n        Section,\n        selectedSection,\n        sampleGridItem,\n        subsampleGridItem,\n        testGridItem,\n        DynamicGridItem,\n        samplegridmoreitem,\n        DynamicGridMoreItem,\n        MaterialCategory,\n        selectedMaterialType,\n        Material,\n        selectedMaterial,\n        selectedMaterialCategory,\n        MaterialInventory,\n        selectedMaterialInventory,\n        Specification,\n        selectedSpec,\n        addedSamplesList,\n        testGridArnoItems,\n        InstrumentID,\n        selectedInstrumentId,\n        sinstrumentid\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getTestInstrumentComboService,\n  getTestInstrumentCategory,\n  getInstrumentForInstCategory,\n  getBatchCreationDetails,\n  onActionFilterSubmit,\n  getProductcategoryAction,\n  createBatchmasterAction,\n  getSamplesForGrid,\n  getSelectedBatchCreationDetail,\n  createSampleAction,\n  deleteSampleAction,\n  getActiveBatchCreationService,\n  updateBatchcreationAction,\n  deleteBatchCreation,\n  batchInitiateAction,\n  getBCRegistrationSubType,\n  batchCompleteAction,\n  validateEsignCredential,\n  filterColumnData,\n  getBatchhistoryAction,\n  getBatchSection,\n  viewInfo,\n  getIqcSamples,\n  getMaterialBasedOnMaterialCategory,\n  getMaterialInventoryBasedOnMaterial,\n  batchSaveIQCActions,\n  getMaterialAvailQtyBasedOnInv,\n  getBatchIqcSampleAction,\n  getBCApprovalConfigVersion,\n  getBCRegistrationType,\n  getTreeByMaterial,\n  getNewRegSpecification,\n  cancelIQCSampleAction,\n  batchCancelAction,\n  batchInitiateDatePopup,\n  batchCompleteDatePopup,\n  getInstrumentID,\n  getBatchViewResultAction //,batchTAT\n\n})(injectIntl(BatchCreation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/batchruncreation/BatchCreation.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Nav","FormGroup","FormLabel","Card","Modal","Image","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faCheckCircle","faCopy","faEye","faPlay","faPlus","faSync","callService","crudMaster","updateStore","getTestInstrumentComboService","getTestInstrumentCategory","getInstrumentForInstCategory","getBatchCreationDetails","onActionFilterSubmit","getProductcategoryAction","createBatchmasterAction","getSamplesForGrid","getSelectedBatchCreationDetail","createSampleAction","deleteSampleAction","getActiveBatchCreationService","updateBatchcreationAction","deleteBatchCreation","batchInitiateAction","getBCRegistrationSubType","batchCompleteAction","validateEsignCredential","filterColumnData","getBatchhistoryAction","getBatchSection","viewInfo","getIqcSamples","getMaterialBasedOnMaterialCategory","getMaterialInventoryBasedOnMaterial","batchSaveIQCActions","getMaterialAvailQtyBasedOnInv","getBatchIqcSampleAction","getBCApprovalConfigVersion","getBCRegistrationType","getTreeByMaterial","getNewRegSpecification","cancelIQCSampleAction","batchCancelAction","batchInitiateDatePopup","batchCompleteDatePopup","getInstrumentID","getBatchViewResultAction","transactionStatus","designProperties","reportTypeEnum","reportCOAType","RegistrationSubType","DEFAULT_RETURN","showEsign","getControlMap","getStartOfDay","getEndOfDay","formatInputDate","constructOptionList","rearrangeDateFormat","convertDateValuetoString","ConfirmMessage","SlideOutModal","ReadOnlyText","ContentPanel","MediaLabel","ListWrapper","BreadcrumbComponent","Esign","ProductList","CustomPopover","BatchCreationFilter","AddBatchCreation","AddBatchinitiate","CustomTab","SampleTab","BatchhistoryTab","process","AddSample","ListMaster","ViewInfo","Affix","AddMaterialIqc","BatchIqcSampleTab","BatchResultTab","mapStateToProps","state","Login","BatchCreation","Component","constructor","props","batchMandatoryFields","completeMandatoryFields","initiateMandatoryFields","materialIqcMandatory","getSamples","selectedbatchmaster","addSampleID","controlMap","has","get","ncontrolcode","ntransactionstatus","INITIATED","COMPLETED","CANCELLED","warn","intl","formatMessage","id","masterData","SelectedBatchmaster","ntestcode","nbatchmastercode","userInfo","realRegTypeValue","nregtypecode","NA","realRegSubTypeValue","nregsubtypecode","Samples","length","addcontrolcode","inputData","realSampleTypeValue","nsampletypecode","nsectioncode","deleteRecord","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","selectedRecord","nbatchsampleCode","fetchUrl","isSingleGet","fecthInputObject","userinfo","jsondata","inputParam","classUrl","methodUrl","Sample","sarno","ssamplearno","stestname","nbatchsamplecode","ndesigntemplatemappingcode","operation","displayName","dataState","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","cancelRecord","nbatchsampleiqccode","iqcSample","nmaterialinventtranscode","onTabChange","tabProps","nneedsubsample","item","batchactiveKey","dataStateChange","event","setState","dataResult","sampleState","dataStateBatchHistoryChange","Batchhistory","histortState","dataStateBatchIqcChangeChange","iqcsample","iqcsampleState","dataStateViewChange","Resultview","viewstate","getApprovalVersion","obj","selectedFilter","fromDate","realFromDate","toDate","realToDate","needFilterSubmit","parseInt","defaultSampleType","isneedapprovalfilter","defaultRegistrationSubType","isneedrealFilterStatus","realApproveConfigVersion","ApprovalVersionValue","realdefaultFilterStatus","tabDetail","tabMap","Map","set","gridfillingColumn","DynamicGridItem","DynamicGridMoreItem","ELNTest","sbatcharno","onFilterComboChange","fieldname","dateObj","nflag","defaultRegistrationType","ntranscode","FilterStatusValue","value","inputParamData","fromdate","todate","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","String","defaultFilterStatus","DesignTemplateMappingValue","getBCFilterTemplate","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","getBCFilterStatus","handleFilterDateChange","dateValue","dateName","Date","headerSelectionChange","checked","syntheticEvent","target","sampleList","samples","addedSamplesList","map","findIndex","x","ntransactiontestcode","push","selected","newItem","JSON","parse","stringify","olditem","addSelectAll","deleteSelectAll","sampleListData","deletedListdData","filter","item1","npreregno","deletedList","onTreeClick","activeKey","key","focusKey","keyName","selectedNode","primaryKey","selectionChange","samplesList","dataItem","initialList","valiateCheckAll","handleSaveClick","saveType","failedControls","startLabel","label","mandatoryFields","console","log","selectedSpec","loadSpec","openSpecModal","handlePageChange","e","skip","take","ConfirmDelete","selectedBatch","deleteId","confirmMessage","confirm","completePopUpStartActions","completeId","DRAFT","AddSpec","selectedMaterial","undefined","selectedMaterialCategory","ncategorybasedflow","info","testPopUpStartActions","testStartId","testStartActions","selectedmaster","jsonuidata","totalSample","concat","join","ntransactionsamplecode","nneedmyjob","nneedjoballocation","napprovalconfigcode","nneedtestinitiate","dtransactiondate","currentTime","scomments","BCFilterStatus","sample","parseFloat","susedquantity","inventoryTransaction","savailablequatity","nallottedspeccode","inputRegistrationData","inputMaterialInventoryData","inputBatchData","batchCreationSampleData","batchCreationTestData","batchCreationSampleArray","batchCreationTestArray","samplecombinationuniqueArray","inputMaterialInventoryArrData","nspecsampletypecode","ntemplatemanipulationcode","nregsubtypeversioncode","nmaterialcode","nmaterialcatcode","smaterialcatname","sinventoryid","selectedMaterialInventory","nmaterialinventorycode","smaterial","smaterialname","smaterialtype","selectedMaterialType","smaterialtypename","nmaterialtypecode","sunitname","sremarks","selectedInventoryUnit","nqtyused","selectedTestDetails","ntestgrouptestcode","nmethodcode","PREREGISTER","cancelBatch","cancelId","batchCompleteActions","closeAlert","showConfirmAlert","loading","closeModal","selectedId","onComboChange","comboData","fieldName","selectedProduct","naddcontrolCode","ssectionname","selectedTestSynonym","sregsubtypename","ncalibrationreq","needSectionwise","needsection","selectedInstrumentId","onNumericInputOnChange","name","onInputOnChange","type","ACTIVE","DEACTIVE","YES","NO","onMultiColumnValue","flag","keys","forEach","objarray","objkey","index","getBatchManufacturerComboChange","onMultiColumnMAHChange","clearComponentInput","componentDefaultSearchDate","handleDateChange","onDropImage","attachedFiles","actionType","saveSample","addedsamplelist","sampleArray","samplelist","batchSample","onSaveClick","formRef","nprevioustestcode","selectedSection","selectedInstCategory","selectedInstrument","unchangeList","searchRef","current","editId","fetchEditData","editParam","validateEsign","sreason","password","onFilterSubmit","reloadData","isFilterSubmit","onClickReport","reportParam","sprimarykeyname","nprimarykey","nreleasebatchcode","ncertificatetypecode","ndecision","PASS","ndecisionstatus","nreporttypecode","SCREENWISE","BATCH","ncoareporttypecode","BATCHPREVIEW","skipbatchvalidation","reportMethod","method","SelectedBatchCreation","controlId","settings","createRef","searchFieldList","sampleMandatoryFields","copyMandatoryFields","getDerivedStateFromProps","masterStatus","error","temparray","option","LABEL","slanguagetypecode","VALUE","selectAll","render","reportActionList","getBatch","addId","addParam","primaryeyField","viewInfoFields","stransactionstatuscode","SelectedFilterStatus","filterParam","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sfilterstatus","searchedData","Batchmaster","batch","openFilter","closeFilter","isClearSearch","indexOf","SampleType","RegistrationType","REJobStatus","Testvalues","onDesignTemplateChange","stateDynamicDesign","stransdisplaystatus","reject","showSaveContinue","InstrumentCategory","Instrument","ProductCategory","selectedProductCategory","Product","InstrumentID","studyPlanList","productManufacturerList","maHolderList","timeZoneList","batchCreationEditStatusList","Section","getProductByCategory","productCategoryList","productList","componentList","getDataForAddComponent","addedComponentList","addedHeaderSelectionChange","addedSelectionChange","onDeleteSelectedComponent","componentPopupSkip","componentPopupTake","componentPageSizes","selectedRecordView","MaterialCategory","Material","MaterialInventory","AgaramTree","OpenNodes","FocusKey","Specification","onspecChange","confirmAlert","componentDidUpdate","previousProps","filterData","filterStatusList","sahDataState","bahDataState","chDataState","testCommentDataState","testskip","testtake","sampleGridItem","subsampleGridItem","testGridItem","samplegridmoreitem","testGridArnoItems","sinstrumentid","isStateChanged","bool","instrumentCategory","instrument","productcategory","product","instrumentID","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","selectedProductcategory","sproductcatname","nproductcatcode","sproductname","nproductcode","selectedInstrumentCategory","sinstrumentcatname","ninstrumentcatcode","sinstrumentname","ninstrumentcode","Object","values","selectedComponentList","sversionname","isselectedrecordempty","DynamicDesign","dynamicColumn","testListFields","testlistitem","releasetestfields","samplegriditem","subsamplelistitem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAkBC,GAAlB,EAAsBC,SAAtB,EAAiCC,SAAjC,EAA2CC,IAA3C,EAAgDC,KAAhD,EAAsDC,KAAtD,EAA4DC,MAA5D,QAAyE,iBAAzE;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,aAAlC,EAAiDC,MAAjD,EAAyDC,KAAzD,EAA+DC,MAA/D,EAAsEC,MAAtE,EAA8EC,MAA9E,QACO,mCADP;;AAGA,SACIC,WADJ,EACiBC,UADjB,EAC4BC,WAD5B,EAEIC,6BAFJ,EAEkCC,yBAFlC,EAGIC,4BAHJ,EAGiCC,uBAHjC,EAGyDC,oBAHzD,EAIIC,wBAJJ,EAI6BC,uBAJ7B,EAIqDC,iBAJrD,EAKIC,8BALJ,EAKmCC,kBALnC,EAKsDC,kBALtD,EAMIC,6BANJ,EAMkCC,yBANlC,EAM4DC,mBAN5D,EAOIC,mBAPJ,EAOwBC,wBAPxB,EAOiDC,mBAPjD,EAQIC,uBARJ,EAQ4BC,gBAR5B,EAQ6CC,qBAR7C,EAQmEC,eARnE,EASIC,QATJ,EASaC,aATb,EAS2BC,kCAT3B,EAUIC,mCAVJ,EAUwCC,mBAVxC,EAU4DC,6BAV5D,EAWIC,uBAXJ,EAW4BC,0BAX5B,EAWuDC,qBAXvD,EAW6EC,iBAX7E,EAYIC,sBAZJ,EAY2BC,qBAZ3B,EAYiDC,iBAZjD,EAYmEC,sBAZnE,EAaIC,sBAbJ,EAa2BC,eAb3B,EAa2CC,wBAb3C,CAcI;AAdJ,OAeO,eAfP;AAgBA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,cAA9C,EAA8DC,aAA9D,EACIC,mBADJ,QAC+B,8BAD/B;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,aAAnC,EAAkDC,WAAlD,EACAC,eADA,EACiBC,mBADjB,EACsCC,mBADtC,EAC2DC,wBAD3D,QAC2F,+BAD3F;AAEA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,UAArC,QAAuD,6BAAvD;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,oDAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,aAAN,SAA4BzG,KAAK,CAAC0G,SAAlC,CAA4C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAmEnBC,oBAnEmB,GAmEI,CACnB;AAAE,iBAAW,aAAb;AAA4B,mBAAa,cAAzC;AAA0D,wBAAiB,YAA3E;AAAyF,qBAAe;AAAxG,KADmB,EAEnB;AAAE,iBAAW,UAAb;AAAyB,mBAAa,WAAtC;AAAmD,wBAAiB,YAApE;AAAkF,qBAAe;AAAjG,KAFmB,EAGnB;AAAE,iBAAW,wBAAb;AAAuC,mBAAa,oBAApD;AAA0E,wBAAiB,YAA3F;AAAyG,qBAAe;AAAxH,KAHmB,EAInB;AAAE,iBAAW,gBAAb;AAA+B,mBAAa,iBAA5C;AAA+D,wBAAiB,YAAhF;AAA8F,qBAAe;AAA7G,KAJmB,EAKnB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,eAA9C;AAA+D,wBAAiB,YAAhF;AAA8F,qBAAe;AAA7G,KALmB,EAMnB;AAAE,iBAAW,aAAb;AAA4B,mBAAa,cAAzC;AAAyD,wBAAiB,YAA1E;AAAwF,qBAAe;AAAvG,KANmB,CAnEJ;AAAA,SAoFnBC,uBApFmB,GAoFO,CACtB;AACE,iBAAY,uBADd;AAEE;AACA,mBAAa,kBAHf;AAGoC,wBAAiB,YAHrD;AAGmE,qBAAe;AAHlF,KADsB,CApFP;AAAA,SA4FnBC,uBA5FmB,GA4FO,CACtB;AACE,iBAAY,uBADd;AAEE;AACA,mBAAa,kBAHf;AAGoC,wBAAiB,YAHrD;AAGmE,qBAAe;AAHlF,KADsB,CA5FP;AAAA,SAsGnBC,oBAtGmB,GAsGI,CAEnB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,mBAA9C;AAAmE,wBAAiB,YAApF;AAAkG,qBAAe;AAAjH,KAFmB,EAGnB;AAAE,iBAAW,sBAAb;AAAqC,mBAAa,kBAAlD;AAAsE,wBAAiB,YAAvF;AAAqG,qBAAe;AAApH,KAHmB,EAInB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,eAA1C;AAA2D,wBAAiB,YAA5E;AAA0F,qBAAe;AAAzG,KAJmB,EAKnB;AAAE,iBAAW,uBAAb;AAAsC,mBAAa,cAAnD;AAAmE,wBAAiB,YAApF;AAAkG,qBAAe;AAAjH,KALmB,EAMnB;AACA;AAAE,iBAAW,aAAb;AAA4B,mBAAa,eAAzC;AAA2D,wBAAiB,WAA5E;AAAyF,qBAAe;AAAxG,KAPmB,CAtGJ;;AAAA,SAgHlBC,UAhHkB,GAgHNC,mBAAD,IAAuB;AACjC,YAAMC,WAAW,GAAG,KAAKZ,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,YAA1B,KAA2C,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,YAA1B,EAAwCC,YAAvG;;AACE,UAAGL,mBAAmB,CAACM,kBAApB,IAA0CxD,iBAAiB,CAACyD,SAA5D,IACCP,mBAAmB,CAACM,kBAApB,IAA0CxD,iBAAiB,CAAC0D,SAD7D,IAECR,mBAAmB,CAACM,kBAApB,IAA0CxD,iBAAiB,CAAC2D,SAFhE,EAE0E;AACtEzH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAJD,MAIK;AACD,aAAKnB,KAAL,CAAW3E,iBAAX,CAA6B,KAAK2E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDC,SAA7E,EAAuF,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE,gBAAvI,EACI,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB4B,QADrB,EAC8B,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAD/C,EAEI,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA7F,GACT,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YADpC,GACmDtE,iBAAiB,CAACuE,EAHzE,EAII,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACT,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADvC,GACyDzE,iBAAiB,CAACuE,EAL/E,EAKkFpB,WALlF;AAMC;AACP,KA9HiB;;AAAA,SAgIlBnE,aAhIkB,GAgIDiF,mBAAD,IAAwB;AACrC,UAAGA,mBAAmB,CAACT,kBAApB,IAA0CxD,iBAAiB,CAACyD,SAA5D,IACCQ,mBAAmB,CAACT,kBAApB,KAA2CxD,iBAAiB,CAAC0D,SAD9D,IAECO,mBAAmB,CAACT,kBAApB,KAA2CxD,iBAAiB,CAAC2D,SAFjE,EAE2E;AACvEzH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAJD,MAIM,IAAI,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoCC,MAApC,IAA4C,CAAhD,EAAkD;AACpDzI,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAFK,MAED;AACL,YAAIa,cAAc,GAAC,KAAKrC,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,kBAA1B,KAAiD,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,kBAA1B,EAA8CC,YAAlH;AACA,YAAIsB,SAAS,GAAC,EAAd;AACAA,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA7F,GAC1B,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YADnB,GACkCtE,iBAAiB,CAACuE,EAD9E;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAC7B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADnB,GACqCzE,iBAAiB,CAACuE,EADpF;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GAC7B,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADnB,GACqC/E,iBAAiB,CAACuE,EADpF,CAPK,CASL;AACA;;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6BD,cAA7B,CAXK,CAYD;AACA;AACD;;AACCC,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0BZ,mBAAmB,CAACe,YAA9C;AACAH,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAsB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAvC;AACAS,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAA+BZ,mBAAmB,CAACE,gBAAnD;AACJ,aAAKvB,KAAL,CAAW5D,aAAX,CAAyB6F,SAAzB,EAAmC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAApD;AACD;AACF,KA3JkB;;AAAA,SA6JlBiB,YA7JkB,GA6JFJ,SAAD,IAAe;AAE3B,UAAG,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAACyD,SAAxF,IACC,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,KAAuExD,iBAAiB,CAAC0D,SAD7F,EACuG;AAC/FxH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAHL,MAGS;AACD,cAAMmB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAET,SAAS,CAACU,cAAV,CAAyBC,gBAJ5B;AAKdC,UAAAA,QAAQ,EAAE,mCALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOd;AACAC,UAAAA,gBAAgB,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B;AAA7B;AARJ,SAAlB;AAUA,YAAIyB,QAAQ,GAAGhB,SAAS,CAACU,cAAzB;AACA,cAAMO,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE,eADK;AAEfC,UAAAA,SAAS,EAAE,QAFI;AAGfd,UAAAA,SAHe;AAIfL,UAAAA,SAAS,EAAE;AACPoB,YAAAA,MAAM,EAAE;AACJ,uBAAQpB,SAAS,CAACU,cAAV,CAAyBW,KAD7B;AAEJ,6BAAcrB,SAAS,CAACU,cAAV,CAAyBY,WAFnC;AAGJ,2BAAYtB,SAAS,CAACU,cAAV,CAAyBa,SAHjC;AAIJ,kCAAoBvB,SAAS,CAACU,cAAV,CAAyBc;AAJzC,aADD;AAQP,wBAAY,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB4B,QARtB;AASPiC,YAAAA,gBAAgB,EAAExB,SAAS,CAACU,cAAV,CAAyBc,gBATpC;AAUPrC,YAAAA,UAAU,EAAG,EAAC,GAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAArB;AACC,yBAAU;AADX,aAVN;AAaPG,YAAAA,gBAAgB,EAAGU,SAAS,CAACU,cAAV,CAAyBpB,gBAbrC;AAcPyB,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QAdpB;AAePkC,YAAAA,0BAA0B,EAAC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAfhD;AAgBP;AACA;AACAhC,YAAAA,YAAY,EAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAlBrL;AAmBPE,YAAAA,eAAe,EAAG,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACR,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADxC,GAC0DzE,iBAAiB,CAACuE;AApBvF,WAJI;AA0BfgC,UAAAA,SAAS,EAAE1B,SAAS,CAAC0B,SA1BN;AA2BfC,UAAAA,WAAW,EAAE,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBsD,UAAjB,CAA4BU,WA3B1B;AA4BfC,UAAAA,SAAS,EAAE,KAAKlE,KAAL,CAAWkE;AA5BP,SAAnB;;AA8BF,YAAInG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E9B,SAAS,CAAC+B,YAAxF,CAAb,EAAoH;AAC9G,gBAAMC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AAAc9B,gBAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB;AAA3C,eAD3B;AAEFkD,cAAAA,SAAS,EAAE,IAFT;AAEeC,cAAAA,UAAU,EAAE,KAAKvE,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBsD,UAAjB,CAA4BU;AAAlC,eAA9B,CAF3B;AAGFD,cAAAA,SAAS,EAAE1B,SAAS,CAAC0B;AAHnB;AAFS,WAAnB;AAQA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SAVH,MAWO;AACD,eAAKjE,KAAL,CAAWxE,kBAAX,CAA8B0H,UAAU,CAACjB,SAAzC;AACH;AACJ;AACL,KA3Ne;;AAAA,SA6NlBuC,YA7NkB,GA6NFvC,SAAD,IAAe;AAE3B,UAAG,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAACyD,SAAxF,IACC,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,KAAuExD,iBAAiB,CAAC0D,SAD7F,EACuG;AAC/FxH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAHL,MAGS;AACD,cAAMmB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAET,SAAS,CAACwC,mBAJb;AAKd5B,UAAAA,QAAQ,EAAE,uCALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOd;AACAC,UAAAA,gBAAgB,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B;AAA7B;AARJ,SAAlB;AAUA,cAAM0B,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE,eADK;AAEfC,UAAAA,SAAS,EAAE,WAFI;AAGfd,UAAAA,SAHe;AAIfL,UAAAA,SAAS,EAAE;AACPyC,YAAAA,SAAS,EAACzC,SAAS,CAACU,cADb;AAEP8B,YAAAA,mBAAmB,EAAExC,SAAS,CAACU,cAAV,CAAyB8B,mBAFvC;AAGPrD,YAAAA,UAAU,EAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAHvB;AAIPG,YAAAA,gBAAgB,EAAGU,SAAS,CAACU,cAAV,CAAyBpB,gBAJrC;AAKPoD,YAAAA,wBAAwB,EAAG1C,SAAS,CAACU,cAAV,CAAyBgC,wBAL7C;AAMP3B,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QANpB;AAOPkC,YAAAA,0BAA0B,EAAC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAPhD;AAQP;AACA;AACChC,YAAAA,YAAY,EAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAVtL;AAWNE,YAAAA,eAAe,EAAG,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACT,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADvC,GACyDzE,iBAAiB,CAACuE,EAZvF;AAaNQ,YAAAA,eAAe,EAAG,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GACR,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADxC,GAC0D/E,iBAAiB,CAACuE;AAdxF,WAJI;AAoBfgC,UAAAA,SAAS,EAAE1B,SAAS,CAAC0B,SApBN;AAqBfC,UAAAA,WAAW,EAAE,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBsD,UAAjB,CAA4BU,WArB1B;AAsBfC,UAAAA,SAAS,EAAE,KAAKlE,KAAL,CAAWkE;AAtBP,SAAnB;;AAwBF,YAAInG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E9B,SAAS,CAAC+B,YAAxF,CAAb,EAAoH;AAC9G,gBAAMC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AACE9B,gBAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB;AAD/B,eAFV;AAIFkD,cAAAA,SAAS,EAAE,IAJT;AAIeC,cAAAA,UAAU,EAAE,KAAKvE,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBsD,UAAjB,CAA4BU;AAAlC,eAA9B,CAJ3B;AAKFD,cAAAA,SAAS,EAAE1B,SAAS,CAAC0B;AALnB;AAFS,WAAnB;AAUA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SAZH,MAaO;AACD,eAAKjE,KAAL,CAAWlD,qBAAX,CAAiCoG,UAAU,CAACjB,SAA5C;AACH;AACJ;AACL,KAtRe;;AAAA,SAwRnB2C,WAxRmB,GAwRJC,QAAD,IAAc;AACxB,YAAMN,UAAU,GAAGM,QAAQ,CAACN,UAA5B;;AAEA,UAAIA,UAAU,IAAI,kBAAlB,EAAsC;AAE9B,YAAItC,SAAS,GAAG;AACZb,UAAAA,UAAU,EAAC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UADhB;AAEZI,UAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAFf;AAGZD,UAAAA,gBAAgB,EAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE;AAHvD,SAAhB;AAKA,aAAKvB,KAAL,CAAW/D,qBAAX,CAAiCgG,SAAjC,EAA4C,IAA5C;AACP,OARD,MAQM,IAAIsC,UAAU,IAAI,oBAAlB,EAAwC;AAE1C,YAAItC,SAAS,GAAG;AACZb,UAAAA,UAAU,EAAC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UADhB;AAEZI,UAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAFf;AAGZD,UAAAA,gBAAgB,EAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE;AAHvD,SAAhB;AAKA,aAAKvB,KAAL,CAAWvD,uBAAX,CAAmCwF,SAAnC,EAA8C,IAA9C;AACF,OARI,MAQC,IAAGsC,UAAU,IAAI,aAAjB,EAA+B;AAClC,YAAItC,SAAS,GAAG;AACZb,UAAAA,UAAU,EAAC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UADhB;AAEZI,UAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAFf;AAGZsD,UAAAA,cAAc,EAAG,KAAKnF,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAHnE;AAIZvD,UAAAA,gBAAgB,EAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE;AAJvD,SAAhB;AAMA,aAAKvB,KAAL,CAAW7C,wBAAX,CAAoC8E,SAApC,EAA+C,IAA/C;AACF,OARK,MAQD;AACE,cAAMgC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEzG,cADK;AAEf0G,UAAAA,IAAI,EAAE;AAAEI,YAAAA,UAAF;AAAaS,YAAAA,cAAc,EAAGT;AAA9B;AAFS,SAAnB;AAIA,aAAKvE,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACN;AACL,KA1TkB;;AAAA,SA8TnBgB,eA9TmB,GA8TAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAElG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA7B,EAAsCoD,KAAK,CAACrB,SAA5C,CADT;AAEVwB,QAAAA,WAAW,EAAEH,KAAK,CAACrB;AAFT,OAAd;AAIH,KAnUkB;;AAAA,SAqUnByB,2BArUmB,GAqUYJ,KAAD,IAAW;AACrC,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAElG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmE,YAA7B,EAA2CL,KAAK,CAACrB,SAAjD,CADT;AAEV2B,QAAAA,YAAY,EAAEN,KAAK,CAACrB;AAFV,OAAd;AAIH,KA1UkB;;AAAA,SA4UnB4B,6BA5UmB,GA4UcP,KAAD,IAAW;AACvC,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAElG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA7B,EAAwCR,KAAK,CAACrB,SAA9C,CADT;AAEV8B,QAAAA,cAAc,EAAET,KAAK,CAACrB;AAFZ,OAAd;AAIH,KAjVkB;;AAAA,SAmVnB+B,mBAnVmB,GAmVIV,KAAD,IAAW;AAC7B,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAElG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByE,UAA7B,EAAyCX,KAAK,CAACrB,SAA/C,CADT;AAEViC,QAAAA,SAAS,EAAEZ,KAAK,CAACrB;AAFP,OAAd;AAIH,KAxVkB;;AAAA,SAqWjBkC,kBArWiB,GAqWK5B,IAAD,IAAU;AAC7B,UAAIlC,SAAS,GAAG,EAAhB;AAEA,UAAI+D,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAGAS,MAAAA,SAAS,GAAG;AACRqE,QAAAA,gBAAgB,EAAG,OADX;AAERnE,QAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CAFjB;AAGR+D,QAAAA,QAAQ,EAAEF,GAAG,CAACE,QAHN;AAGe;AACvBE,QAAAA,MAAM,EAAEJ,GAAG,CAACI,MAJJ;AAIW;AACnB1E,QAAAA,YAAY,EAAEyC,IAAI,CAACY,IAAL,CAAUrD,YALhB;AAMRF,QAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QANnB;AAORK,QAAAA,eAAe,EAAEsC,IAAI,CAACY,IAAL,CAAUlD,eAPnB;AAQRT,QAAAA,UAAU,EAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UARtB;AASRqF,QAAAA,oBAAoB,EAAG,IATf;AAURC,QAAAA,0BAA0B,EAACvC,IAAI,CAACY,IAVxB;AAWR4B,QAAAA,sBAAsB,EAAC,OAXf;AAYRlF,QAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAZzG;AAaRG,QAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAblH;AAcRgF,QAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAdhH;AAeRmF,QAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAf7H,OAAZ;AAiBA,WAAK9G,KAAL,CAAWtD,0BAAX,CAAsCuF,SAAtC;AAED,KA9XgB;;AAAA,SAgYpB8E,SAhYoB,GAgYR,MAAM;AACb,YAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,GAAP,CAAW,YAAX,eACA,oBAAC,SAAD;AACI,QAAA,MAAM,EAAE,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,IAAuC,EADnD;AAEI,QAAA,UAAU,EAAE5C,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,IAAuC,EAAxC,EAA4C,KAAKnC,KAAL,CAAW0F,WAAvD,CAFvB;AAGI,QAAA,SAAS,EAAE,KAAK1F,KAAL,CAAW0F,WAH1B;AAII,QAAA,UAAU,EAAE,KAAK1F,KAAL,CAAWa,UAJ3B;AAKI,QAAA,eAAe,EAAE,KAAKyE,eAL1B;AAMI,QAAA,qBAAqB,EAAE,KAAKtF,KAAL,CAAWmE,qBANtC;AAOI,QAAA,QAAQ,EAAE,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAP/B;AAQI,QAAA,YAAY,EAAE,KAAKa,YARvB;AASI,QAAA,mBAAmB,EAAE,KAAK8E,iBAAL,CAAuB,KAAKxH,KAAL,CAAWyH,eAAlC,KAAsD,EAT/E;AAUI,QAAA,iBAAiB,EAAE,KAAKD,iBAAL,CAAuB,KAAKxH,KAAL,CAAW0H,mBAAlC,KAA0D,EAVjF;AAWI,QAAA,SAAS,EAAE,SAXf;AAYI,QAAA,UAAU,EAAE,MAAM,KAAKhH,UAAL,CAAgB,KAAKL,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5C,CAZtB,CAaI;AACA;AACA;AAfJ;AAgBI,QAAA,UAAU,EAAC,YAhBf;AAiBI,QAAA,cAAc,EAAI,KAAK1B,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAjBpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAqBAkC,MAAAA,MAAM,CAACE,GAAP,CAAW,oBAAX,eACA,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAE,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA5B,IAAyC,EADxD;AAEI,QAAA,UAAU,EAAExG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA5B,IAAyC,EAA1C,EAA8C,KAAK/F,KAAL,CAAWgG,cAAzD,CAFvB;AAGI,QAAA,SAAS,EAAE,KAAKhG,KAAL,CAAWgG,cAH1B;AAII,QAAA,UAAU,EAAE,KAAKhG,KAAL,CAAWa,UAJ3B;AAKI,QAAA,eAAe,EAAE,KAAKiF,6BAL1B;AAMI,QAAA,qBAAqB,EAAE,KAAK9F,KAAL,CAAWmE,qBANtC;AAOI,QAAA,QAAQ,EAAE,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAP/B;AAQI,QAAA,YAAY,EAAE,KAAKgD,YARvB;AASI,QAAA,SAAS,EAAE,WATf;AAUI,QAAA,aAAa,EAAE,MAAM,KAAKpI,aAAL,CAAmB,KAAK4D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA/C,CAVzB;AAWI,QAAA,UAAU,EAAC,oBAXf;AAYI,QAAA,cAAc,EAAI,KAAK1B,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAZpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;;AAgBJ,UAAG,KAAK9E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,IAAuD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoDlG,kBAApD,KAAyExD,iBAAiB,CAACyD,SAAlJ,IACA,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoDlG,kBAApD,KAAyExD,iBAAiB,CAAC0D,SAD9F,EACwG;AACpGkG,QAAAA,MAAM,CAACE,GAAP,CAAW,aAAX,eACA,oBAAC,cAAD;AACG,UAAA,OAAO,EAAE,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkG,OAA5B,IAAuC,EADnD;AAEI,UAAA,UAAU,EAAE,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByE,UAA5B,IAA0C,EAF1D;AAGI,UAAA,UAAU,EAAE3G,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByE,UAA5B,IAA0C,EAA3C,EAA+C,KAAKlG,KAAL,CAAWmG,SAA1D,CAHvB;AAII,UAAA,SAAS,EAAE,KAAKnG,KAAL,CAAWmG,SAJ1B;AAKI,UAAA,eAAe,EAAE,KAAKF,mBAL1B;AAMI,UAAA,QAAQ,EAAE,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB4B,QAN/B;AAOI,UAAA,SAAS,EAAE,iBAPf;AAQI,UAAA,UAAU,EAAC,aARf;AASI,UAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWiB,IATrB;AAUI,UAAA,cAAc,EAAI,KAAKtB,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAVpF;AAWI,UAAA,gBAAgB,EAAI,KAAK9E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDkG,UAXxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAgBH;;AAEGP,MAAAA,MAAM,CAACE,GAAP,CAAW,kBAAX,eACA,oBAAC,eAAD;AACI,QAAA,YAAY,EAAE,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmE,YAA5B,IAA4C,EAD9D;AAEI,QAAA,UAAU,EAAErG,OAAO,CAAC,KAAKc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmE,YAA5B,IAA4C,EAA7C,EAAiD,KAAK5F,KAAL,CAAW6F,YAA5D,CAFvB;AAGI,QAAA,SAAS,EAAE,KAAK7F,KAAL,CAAW6F,YAH1B;AAII,QAAA,eAAe,EAAE,KAAKF,2BAJ1B;AAKI,QAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB4B,QAL/B;AAMI,QAAA,SAAS,EAAE,cANf;AAOI,QAAA,UAAU,EAAC,kBAPf;AAQI,QAAA,cAAc,EAAI,KAAK7B,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cARpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAeA,aAAOkC,MAAP;AACH,KA3ckB;;AAAA,SA8cnBQ,mBA9cmB,GA8cG,CAACtC,KAAD,EAAQuC,SAAR,KAAsB;AACxC,UAAIvC,KAAK,KAAK,IAAd,EAAoB;AAChB,YAAIjD,SAAS,GAAG,EAAhB;;AAGA,YAAIwF,SAAS,KAAK,UAAlB,EAA8B;AAC1B,cAAIC,OAAO,GAAGzJ,wBAAwB,CAACiH,KAAD,EAAQ,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgF,MAApC,EAA4C,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB4B,QAA7D,CAAtC;AACAS,UAAAA,SAAS,GAAG;AACR0F,YAAAA,KAAK,EAAE,CADC;AAERrB,YAAAA,gBAAgB,EAAG,OAFX;AAGRJ,YAAAA,QAAQ,EAAEwB,OAAO,CAACxB,QAHV;AAGmB;AAC3BE,YAAAA,MAAM,EAAEsB,OAAO,CAACtB,MAJR;AAIe;AACvBwB,YAAAA,uBAAuB,EAAG,KAAK5H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAL9C;AAMRlB,YAAAA,0BAA0B,EAAG,KAAK/G,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EANtG;AAOR6E,YAAAA,iBAAiB,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAPvC;AAQRrE,YAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CARjB;AASRT,YAAAA,YAAY,EAAE6E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YAArD,CATd;AAURG,YAAAA,eAAe,EAAG,KAAKlC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgClD,eAA7D,GAA+EzE,iBAAiB,CAACuE,EAV3G;AAWRkG,YAAAA,UAAU,EAAE,KAAKlI,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAACuE,EAX1F;AAYR;AACAH,YAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAbnB;AAcRJ,YAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAdrB;AAeRK,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAfzG;AAgBRG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAhBlH;AAiBRgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAjBhH;AAkBRmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAlB7H,WAAZ;AAoBA,eAAK9G,KAAL,CAAWtD,0BAAX,CAAsCuF,SAAtC;AACH;;AACD,YAAIwF,SAAS,KAAK,QAAlB,EAA4B;AAExB,cAAIC,OAAO,GAAGzJ,wBAAwB,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8E,QAA7B,EAAuChB,KAAvC,EAA8C,KAAKlF,KAAL,CAAWJ,KAAX,CAAiB4B,QAA/D,CAAtC;AAEAS,UAAAA,SAAS,GAAG;AACR0F,YAAAA,KAAK,EAAE,CADC;AAERrB,YAAAA,gBAAgB,EAAG,OAFX;AAGRJ,YAAAA,QAAQ,EAAEwB,OAAO,CAACxB,QAHV;AAGmB;AAC3BE,YAAAA,MAAM,EAAEsB,OAAO,CAACtB,MAJR;AAIe;AACvBwB,YAAAA,uBAAuB,EAAG,KAAK5H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAL9C;AAMRlB,YAAAA,0BAA0B,EAAG,KAAK/G,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EANtG;AAOR6E,YAAAA,iBAAiB,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAPvC;AAQRrE,YAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CARjB;AASRT,YAAAA,YAAY,EAAE6E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YAArD,CATd;AAURG,YAAAA,eAAe,EAAG,KAAKlC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgClD,eAA7D,GAA+EzE,iBAAiB,CAACuE,EAV3G;AAWRkG,YAAAA,UAAU,EAAE,KAAKlI,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAACuE,EAX1F;AAYR;AACAH,YAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAbnB;AAcRJ,YAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAdrB;AAeRK,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAfzG;AAgBRG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAhBlH;AAiBRgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAjBhH;AAkBRmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAlB7H,WAAZ;AAoBA,eAAK9G,KAAL,CAAWtD,0BAAX,CAAsCuF,SAAtC;AACH,SArDe,CAuDhB;AACA;;;AAEA,YAAIwF,SAAS,KAAK,iBAAlB,EAAqC;AAEjC,cAAIzB,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAGAS,UAAAA,SAAS,GAAG;AACR0F,YAAAA,KAAK,EAAE,CADC;AAERrB,YAAAA,gBAAgB,EAAG,OAFX;AAGRnE,YAAAA,eAAe,EAAEoE,QAAQ,CAACrB,KAAK,CAAC6C,KAAP,CAHjB;AAIR7B,YAAAA,QAAQ,EAAEF,GAAG,CAACE,QAJN;AAIe;AACvBE,YAAAA,MAAM,EAAEJ,GAAG,CAACI,MALJ;AAKW;AACnBpD,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QANnB;AAORgF,YAAAA,iBAAiB,EAAEtB,KAAK,CAACH,IAPjB;AAQR3D,YAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UARrB;AASRuF,YAAAA,sBAAsB,EAAC,OATf;AAURlF,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAVzG;AAWRG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAXlH;AAYRgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAZhH;AAaRmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAb7H,WAAZ;AAeA,eAAK9G,KAAL,CAAWrD,qBAAX,CAAiCsF,SAAjC;AACH,SArBD,MAsBK,IAAIwF,SAAS,KAAK,cAAlB,EAAkC;AAEnC,cAAIzB,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAIAS,UAAAA,SAAS,GAAG;AACR0F,YAAAA,KAAK,EAAE,CADC;AAERrB,YAAAA,gBAAgB,EAAG,OAFX;AAGRnE,YAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CAHjB;AAIR+D,YAAAA,QAAQ,EAAEF,GAAG,CAACE,QAJN;AAIe;AACvBE,YAAAA,MAAM,EAAEJ,GAAG,CAACI,MALJ;AAKW;AACnB1E,YAAAA,YAAY,EAAE6E,QAAQ,CAACrB,KAAK,CAAC6C,KAAP,CANd;AAORvG,YAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAPnB;AAQRoG,YAAAA,uBAAuB,EAAE1C,KAAK,CAACH,IARvB;AASRyB,YAAAA,iBAAiB,EAAC,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBATtC;AAURG,YAAAA,sBAAsB,EAAC,OAVf;AAWRlF,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAXzG;AAYRG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAZlH;AAaRgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAbhH;AAcRmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAd7H,WAAZ;AAgBA,eAAK9G,KAAL,CAAWnE,wBAAX,CAAoCoG,SAApC,EAA8C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAA/D;AACH,SAvBI,MAwBA,IAAIqG,SAAS,KAAK,iBAAlB,EAAqC;AACtC,gBAAM5F,eAAe,GAAG,KAAKlC,KAA7B,CADsC,CAEtC;;AACA,eAAKoG,kBAAL,CAAwBb,KAAxB;AAEH,SALI,MAOA,IAAIuC,SAAS,KAAK,4BAAlB,EAAgD;AACjD,cAAIzB,GAAG,GAAG/H,wBAAwB,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8E,QAA7B,EAC9B,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgF,MADE,EACM,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB4B,QADvB,CAAlC;AAGA,gBAAMwG,cAAc,GAAG;AACnBL,YAAAA,KAAK,EAAE,CADY;AAEnBrB,YAAAA,gBAAgB,EAAG,OAFA;AAGnB2B,YAAAA,QAAQ,EAAEjC,GAAG,CAACE,QAHK;AAGI;AACvBgC,YAAAA,MAAM,EAAElC,GAAG,CAACI,MAJO;AAKnBjE,YAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CALN;AAMnBT,YAAAA,YAAY,EAAE6E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YAArD,CANH;AAOnBG,YAAAA,eAAe,EAAE0E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAA5B,CAAuD7E,eAAxD,CAPN;AAQnBsG,YAAAA,oBAAoB,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgH,qBAA5B,CAAkD,CAAlD,EAAqDC,0BARxD;AASnBrF,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QATR;AAUnBJ,YAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAVV;AAWnB;AACAsF,YAAAA,0BAA0B,EAAE,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAZrC;AAanBmB,YAAAA,UAAU,EAAES,MAAM,CAAC,KAAKtI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,CAAgD3H,kBAAjD,CAbC;AAcnBkE,YAAAA,cAAc,EAAE,KAAK9E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0D,cAA5B,IAA8C,CAd3C;AAenB;AACA;AACApB,YAAAA,0BAA0B,EAAEwB,KAAK,CAAC6C,KAjBf;AAkBnBS,YAAAA,0BAA0B,EAAEtD,KAAK,CAACH,IAlBf;AAmBnB4B,YAAAA,sBAAsB,EAAC,OAnBJ;AAoBnBlF,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IApB9F;AAqBnBG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IArBvG;AAsBnBgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAtBrG;AAuBnBmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAvBlH,WAAvB,CAJiD,CA6BjD;;AACA,eAAK9G,KAAL,CAAWyI,mBAAX,CAA+BT,cAA/B;AAEH,SAhCI,MAkCA,IAAIP,SAAS,KAAK,SAAlB,EAA6B;AAE9B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAMZ,oBAAoB,GAAG,KAAKlH,KAAlC;AACA,eAAKwF,QAAL,CAAc;AAAE0B,YAAAA,oBAAoB,EAAC3B;AAAvB,WAAd;AACH,SArBI,MAsBA,IAAIuC,SAAS,KAAK,WAAlB,EAA+B;AAEhC,cAAIzB,GAAG,GAAG/H,wBAAwB,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8E,QAA7B,EAC9B,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgF,MADE,EACM,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB4B,QADvB,CAAlC;AAGAS,UAAAA,SAAS,GAAG;AACR0F,YAAAA,KAAK,EAAE,CADC;AAERrB,YAAAA,gBAAgB,EAAG,OAFX;AAGR2B,YAAAA,QAAQ,EAAEjC,GAAG,CAACE,QAHN;AAGe;AACvBgC,YAAAA,MAAM,EAAElC,GAAG,CAACI,MAJJ;AAIW;AACnBjE,YAAAA,eAAe,EAAEoE,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA/C,CALjB;AAMRT,YAAAA,YAAY,EAAE6E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YAArD,CANd;AAORG,YAAAA,eAAe,EAAE0E,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAA5B,CAAuD7E,eAAxD,CAPjB;AAQRsG,YAAAA,oBAAoB,EAAE5B,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH,4BAA5B,CAAyDL,0BAA1D,CARtB;AASRM,YAAAA,cAAc,EAAEzD,KAAK,CAAC6C,KATd;AAUR/E,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QAVnB;AAWRoH,YAAAA,gBAAgB,EAAE1D,KAAK,CAACH,IAXhB;AAYR3D,YAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAZrB;AAaRK,YAAAA,gBAAgB,EAAG,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8F,IAbzG;AAcRG,YAAAA,mBAAmB,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA/E,GAAqG,IAdlH;AAeRgF,YAAAA,wBAAwB,EAAG,KAAKjH,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAfhH;AAgBRmF,YAAAA,uBAAuB,EAAI,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAlF,GAA0G;AAhB7H,WAAZ;AAkBA,eAAK9G,KAAL,CAAW6I,iBAAX,CAA6B5G,SAA7B;AACH,SAxBI,MAyBA,IAAIwF,SAAS,KAAK,QAAlB,EAA4B;AAC7B,gBAAMK,iBAAiB,GAAG,KAAKnI,KAA/B;AACA,eAAKwF,QAAL,CAAc;AAAE2C,YAAAA,iBAAiB,EAAC5C;AAApB,WAAd;AAEH,SAJI,MAKA,IAAGuC,SAAS,KAAK,MAAjB,EAAyB;AAE1B,gBAAMK,iBAAiB,GAAG,KAAKnI,KAA/B;AACA,eAAKwF,QAAL,CAAc;AAAE2C,YAAAA,iBAAiB,EAAC5C;AAApB,WAAd;AACH,SAJI,MAIA;AACD,gBAAMvC,cAAc,GAAG,KAAKhD,KAA5B;AACA,eAAKwF,QAAL,CAAc;AAAExC,YAAAA,cAAc,EAACuC;AAAjB,WAAd;AACH;AACJ;AACJ,KA7pBkB;;AAAA,SA+pBnB4D,sBA/pBmB,GA+pBM,CAACC,SAAD,EAAWC,QAAX,KAAwB;AACzC,YAAM;AAAE/C,QAAAA;AAAF,UAAqB,KAAKtG,KAAhC;;AACA,UAAIoJ,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIE,IAAJ,EAAZ;AACH;;AACDhD,MAAAA,cAAc,CAAC+C,QAAD,CAAd,GAA2BD,SAA3B;AACA,WAAK5D,QAAL,CAAc;AAAEc,QAAAA;AAAF,OAAd;AAEP,KAvqBkB;;AAAA,SAovBnBiD,qBApvBmB,GAovBMhE,KAAD,IAAW;AAC/B,YAAMiE,OAAO,GAAGjE,KAAK,CAACkE,cAAN,CAAqBC,MAArB,CAA4BF,OAA5C;AACA,UAAIG,UAAU,GAAG,KAAK3J,KAAL,CAAW4J,OAAX,IAAsB,EAAvC;AACA,UAAIC,gBAAgB,GAAC,EAArB;;AACA,UAAIL,OAAJ,EAAa;AACT;AACA,cAAMhF,IAAI,GAAGe,KAAK,CAACmE,MAAN,CAAarJ,KAAb,CAAmBmE,IAAnB,CAAwBsF,GAAxB,CAA4B1E,IAAI,IAAI;AAC7C,cAAIuE,UAAU,CAACI,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACC,oBAAF,KAA2B7E,IAAI,CAAC6E,oBAA1D,MAAoF,CAAC,CAAzF,EAA4F;AACxFN,YAAAA,UAAU,CAACO,IAAX,CAAgB,EAAE,GAAG9E,IAAL;AAAW+E,cAAAA,QAAQ,EAAE;AAArB,aAAhB;AACA/E,YAAAA,IAAI,CAAC+E,QAAL,GAAgBX,OAAhB;AACA,gBAAIY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAenF,IAAf,CAAX,CAAd,CAHwF,CAIxF;;AACA,mBAAOgF,OAAO,CAAC,UAAD,CAAd;AACAA,YAAAA,OAAO,CAAC,UAAD,CAAP,GAAoB,EAApB;AACAA,YAAAA,OAAO,CAAC,YAAD,CAAP,GAAsB,EAAtB;AACAA,YAAAA,OAAO,CAAC,UAAD,CAAP,CAAoB,YAApB,IAAoChF,IAApC;AACAgF,YAAAA,OAAO,CAAC,YAAD,CAAP,CAAsB,YAAtB,IAAsChF,IAAtC;AACAyE,YAAAA,gBAAgB,CAACK,IAAjB,CAAsBE,OAAtB;AACA,mBAAOhF,IAAP;AACH,WAZD,MAYO;AACH,gBAAIoF,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,UAAU,CAACA,UAAU,CAACI,SAAX,CAAqBC,CAAC,IAAIA,CAAC,CAACC,oBAAF,KAA2B7E,IAAI,CAAC6E,oBAA1D,CAAD,CAAzB,CAAX,CAAd;AACAO,YAAAA,OAAO,CAACL,QAAR,GAAmBX,OAAnB;AACA,gBAAIY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeC,OAAf,CAAX,CAAd;AACAJ,YAAAA,OAAO,CAACD,QAAR,GAAmB,KAAnB;AACAC,YAAAA,OAAO,CAAC,UAAD,CAAP,GAAoB,EAApB;AACAA,YAAAA,OAAO,CAAC,YAAD,CAAP,GAAsB,EAAtB;AACAA,YAAAA,OAAO,CAAC,UAAD,CAAP,CAAoB,YAApB,IAAoCI,OAApC;AACAJ,YAAAA,OAAO,CAAC,YAAD,CAAP,CAAsB,YAAtB,IAAsCI,OAAtC;AACAX,YAAAA,gBAAgB,CAACK,IAAjB,CAAsBE,OAAtB;AACA,mBAAOI,OAAP;AAEH;AAEJ,SA3BY,CAAb;AA8BA,aAAKhF,QAAL,CAAc;AACVoE,UAAAA,OAAO,EAAEpF,IADC;AAEVqF,UAAAA,gBAAgB,EAACA,gBAFP;AAGVF,UAAAA,UAHU;AAIVc,UAAAA,YAAY,EAAEjB,OAJJ;AAKVkB,UAAAA,eAAe,EAAE;AALP,SAAd;AAOH,OAvCD,MAwCK;AACD;AACA;AAEA,YAAIC,cAAc,GAAG,KAAK3K,KAAL,CAAW4J,OAAX,IAAsB,EAA3C;AACA,YAAIgB,gBAAgB,GAAG,KAAK5K,KAAL,CAAW4J,OAAX,IAAsB,EAA7C;AAEA,cAAMpF,IAAI,GAAG,KAAKxE,KAAL,CAAW4J,OAAX,CAAmBE,GAAnB,CAAuB1E,IAAI,IAAI;AACxCuF,UAAAA,cAAc,GAAGA,cAAc,CAACE,MAAf,CAAsBC,KAAK,IAAIA,KAAK,CAACC,SAAN,KAAoB3F,IAAI,CAAC2F,SAAxD,CAAjB;AACAH,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACC,MAAjB,CAAwBC,KAAK,IAAIA,KAAK,CAACC,SAAN,KAAoB3F,IAAI,CAAC2F,SAA1D,CAAnB;AACA3F,UAAAA,IAAI,CAAC+E,QAAL,GAAgBX,OAAhB;AACA,iBAAOpE,IAAP;AACH,SALY,CAAb,CAPC,CAcD;;AACA,aAAKI,QAAL,CAAc;AACVoE,UAAAA,OAAO,EAAEpF,IADC;AAEVqF,UAAAA,gBAAgB,EAAEc,cAFR;AAGVK,UAAAA,WAAW,EAAEJ,gBAHH;AAIVH,UAAAA,YAAY,EAAEjB,OAJJ;AAKVkB,UAAAA,eAAe,EAAE;AALP,SAAd;AAOH,OAlE8B,CAoE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH,KAp0BkB;;AAAA,SAs0BnBO,WAt0BmB,GAs0BJ1F,KAAD,IAAW;AACrB,YAAMhC,UAAU,GAAG;AACfE,QAAAA,SAAS,EAAE,wBADI;AAEfmB,QAAAA,UAAU,EAAE,kBAFG;AAGfZ,QAAAA,SAAS,EAAE,KAHI;AAIfkH,QAAAA,SAAS,EAAE3F,KAAK,CAAC4F,GAJF;AAKfC,QAAAA,QAAQ,EAAE7F,KAAK,CAAC4F,GALD;AAMfE,QAAAA,OAAO,EAAE,0BANM;AAOfhI,QAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QAPZ;AAQfyJ,QAAAA,YAAY,EAAE/F,KAAK,CAACH,IARL;AASfpC,QAAAA,cAAc,EAAE,KAAKhD,KAAL,CAAWgD,cATZ;AAWfuI,QAAAA,UAAU,EAAEhG,KAAK,CAACgG;AAXH,OAAnB;;AAaA,UAAIhG,KAAK,CAACgG,UAAN,KAAqB,KAAKvL,KAAL,CAAWgD,cAAX,CAA0B,2BAA1B,CAAzB,EAAiF;AAC7E,aAAK3C,KAAL,CAAWnD,sBAAX,CAAkCqG,UAAlC,EAA8C,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBwB,UAA/D;AACH;AACJ,KAv1BkB;;AAAA,SA01BnB+J,eA11BmB,GA01BAjG,KAAD,IAAW;AACzB,UAAIsE,gBAAgB,GAAC,KAAK7J,KAAL,CAAW6J,gBAAX,IAA+B,EAApD,CADyB,CAEzB;;AACA,UAAID,OAAO,GAAG,KAAK5J,KAAL,CAAW4J,OAAX,IAAsB,EAApC;AACA,YAAM6B,WAAW,GAAG,KAAKzL,KAAL,CAAW4J,OAAX,CAAmBE,GAAnB,CAAuB1E,IAAI,IAAI;AAC/C,YAAIA,IAAI,CAAC6E,oBAAL,KAA8B1E,KAAK,CAACmG,QAAN,CAAezB,oBAAjD,EAAuE;AACnE7E,UAAAA,IAAI,CAAC+E,QAAL,GAAgB,CAAC5E,KAAK,CAACmG,QAAN,CAAevB,QAAhC;;AACA,cAAI/E,IAAI,CAAC+E,QAAT,EAAmB;AACf,kBAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAenF,IAAf,CAAX,CAAhB,CADe,CAEf;;AACA,mBAAOgF,OAAO,CAAC,UAAD,CAAd;AACAA,YAAAA,OAAO,CAAC,UAAD,CAAP,GAAoB,EAApB;AACAA,YAAAA,OAAO,CAAC,YAAD,CAAP,GAAsB,EAAtB;AACAA,YAAAA,OAAO,CAAC,UAAD,CAAP,CAAoB,YAApB,IAAoChF,IAApC;AACAgF,YAAAA,OAAO,CAAC,YAAD,CAAP,CAAsB,YAAtB,IAAsChF,IAAtC;AACAyE,YAAAA,gBAAgB,CAACK,IAAjB,CAAsBE,OAAtB;AACH,WATD,MAUK;AACD;AACEP,YAAAA,gBAAgB,GAAGA,gBAAgB,CAACgB,MAAjB,CAAwBC,KAAK,IAAIA,KAAK,CAACb,oBAAN,KAA+B7E,IAAI,CAAC6E,oBAArE,CAAnB,CAFD,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACL;;AACD,eAAO7E,IAAP;AACH,OArCmB,CAApB,CAJyB,CA0CzB;;AACA,WAAKI,QAAL,CAAc;AACViG,QAAAA,WADU;AAEV5B,QAAAA,gBAFU;AAGVD,QAAAA,OAHU;AAIV+B,QAAAA,WAAW,EAAE9B,gBAJH;AAKVY,QAAAA,YAAY,EAAE,KAAKmB,eAAL,CAAqBH,WAArB,CALJ;AAMVf,QAAAA,eAAe,EAAE,KAAKkB,eAAL,CAAqBH,WAArB;AANP,OAAd;AAQH,KA74BkB;;AAAA,SA+4BnBI,eA/4BmB,GA+4BAC,QAAD,IAAc;AAC5B,YAAMC,cAAc,GAAG,EAAvB;AACA,YAAMC,UAAU,GAAG,EAAnB;AACA,UAAIC,KAAK,GAAG,WAAZ;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIlJ,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAhC;AACAmJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BpJ,cAA5B;AACAkJ,MAAAA,eAAe,GAAG,CACd;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,mBAA/C;AAAoE,0BAAkB,YAAtF;AAAoG,uBAAe;AAAnH,OADc,CAAlB;AAGA,UAAIG,YAAY,GAAG,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,YAApC;AACAA,MAAAA,YAAY,CAAC,mBAAD,CAAZ,GAAoC,KAAKrM,KAAL,CAAWgD,cAAX,CAA0B,mBAA1B,CAApC;AACAqJ,MAAAA,YAAY,CAAC,UAAD,CAAZ,GAA2B,KAAKrM,KAAL,CAAWgD,cAAX,CAA0B,UAA1B,CAA3B;AACAqJ,MAAAA,YAAY,CAAC,2BAAD,CAAZ,GAA4C,KAAKrM,KAAL,CAAWgD,cAAX,CAA0B,2BAA1B,CAA5C;AAEA,YAAMsB,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEzG,cADK;AAEf0G,QAAAA,IAAI,EAAE;AACF8H,UAAAA,QAAQ,EAAE,KADR;AAEFD,UAAAA,YAFE;AAGF1H,UAAAA,SAAS,EAAC,IAHR;AAIF4H,UAAAA,aAAa,EAAC;AAJZ;AAFS,OAAnB;AASA,WAAKlM,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AAEH,KAz6BkB;;AAAA,SAw+CnBkI,gBAx+CmB,GAw+CAC,CAAC,IAAI;AACpB,WAAKjH,QAAL,CAAc;AACVkH,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KA7+CkB;;AAAA,SAg/CnBC,aAh/CmB,GAg/CH,CAACC,aAAD,EAAgBC,QAAhB,EAAyB9I,SAAzB,KAAuC;AACnD,WAAK+I,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAK3M,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAKnB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAKnB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAKnB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKxF,mBAAL,CAAyB6Q,aAAzB,EAAuCC,QAAvC,EAAgD9I,SAAhD,CAFV;AAGH,KAp/CkB;;AAAA,SAu/CnBiJ,yBAv/CmB,GAu/CUC,UAAD,IAAgB;AAC5C;AACE,UAAG,KAAK7M,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC0D,SAAxF,IACD,KAAKd,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC0P,KADvF,IAED,KAAK9M,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC2D,SAF1F,EAGG;AACOzH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OALP,CAMF;AANE,WAOK,IAAI,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoCC,MAApC,IAA4C,CAAhD,EAAkD;AACrDzI,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACA,OAFG,MAEC;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,YAAIc,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,IAAzB;AACAA,QAAAA,SAAS,CAAC,YAAD,CAAT,GAAyB4K,UAAzB;AACA5K,QAAAA,SAAS,CAAC,gBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,CAA7B,GAA6E,EAA7E,GAAkF,KAAKhD,KAAL,CAAWgD,cAA1H;AACAV,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,UAAzB;AACA,aAAKjC,KAAL,CAAW/C,sBAAX,CAAkCgF,SAAlC,EAA4C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAA7D;AACH;AACL,KAvhDe;;AAAA,SAyhDnB2L,OAzhDmB,GAyhDRX,CAAD,IAAO;AACb,UAAG,KAAKzM,KAAL,CAAWqN,gBAAX,KAAgCC,SAAhC,IACC,KAAKtN,KAAL,CAAWuN,wBAAX,KAAwCD,SAD5C,EACuD;AAC/C,YAAIhL,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA8B,KAAKtC,KAAL,CAAWqN,gBAAX,CAA4BjF,KAA1D;AACA9F,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAA+B,KAAKtC,KAAL,CAAWuN,wBAAX,CAAoCnF,KAAnE;AACA9F,QAAAA,SAAS,CAAC,oBAAD,CAAT,GAAiC,KAAKtC,KAAL,CAAWuN,wBAAX,CAAoCnI,IAApC,CAAyCoI,kBAA1E;AACAlL,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDC,SAAzE,CAN+C,CAO/C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAKtB,KAAL,CAAWpD,iBAAX,CAA6BqF,SAA7B,EAAuC,KAAKtC,KAAL,CAAWgD,cAAlD,EAAiE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAlF;AACH,OAhBL,MAgBS;AACD9H,QAAAA,KAAK,CAAC8T,IAAN,CAAW,KAAKpN,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACR,KA7iDkB;;AAAA,SAgjDnBkM,qBAhjDmB,GAgjDMC,WAAD,IAAiB;AACjC,UAAG,KAAKtN,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAACyD,SAAxF,IAAqG,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,KAAuExD,iBAAiB,CAAC0D,SAAjM,EAA2M;AACvMxH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAFD,MAEM,IAAI,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoCC,MAApC,IAA4C,CAAhD,EAAkD;AACpDzI,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAFK,CAGN;AACA;AACA;AALM,WAMF;AACA,YAAIc,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,IAAzB;AACAA,QAAAA,SAAS,CAAC,aAAD,CAAT,GAA0BqL,WAA1B;AACArL,QAAAA,SAAS,CAAC,gBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,CAA7B,GAA6E,EAA7E,GAAkF,KAAKhD,KAAL,CAAWgD,cAA1H;AACAV,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,UAAzB;AACA,aAAKjC,KAAL,CAAWhD,sBAAX,CAAkCiF,SAAlC,EAA4C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAA7D,EAPA,CAUJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAEH,KAhlDiB;;AAAA,SAklDnBmM,gBAllDmB,GAklDA,CAACC,cAAD,EAAgBF,WAAhB,KAA+B;AAC9C,UAAGE,cAAc,CAAC5M,kBAAf,IAAqCxD,iBAAiB,CAACyD,SAAvD,IAAoE2M,cAAc,CAAC5M,kBAAf,KAAsCxD,iBAAiB,CAAC0D,SAA/H,EAAyI;AACjIxH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAFL,MAEU,IAAI,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoCC,MAApC,IAA4C,CAAhD,EAAkD;AACpDzI,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACF,OAFI,CAGN;AACA;AACA;AALM,WAMF;AACA,YAAIc,SAAS,GAAG,EAAhB;AACA,YAAIwL,UAAU,GAAC,EAAf;AACA,cAAMrM,UAAU,GAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAApC;AACA,cAAMkB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAE8K,cAAc,CAACjM,gBAJlB;AAKdsB,UAAAA,QAAQ,EAAE,qCALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOdC,UAAAA,gBAAgB,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B;AAA7B;AAPJ,SAAlB;AASA,YAAIwE,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAEI,YAAIyB,QAAQ,GAAG,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwC1E,IAAI,IAAG;AAC1B,iBAAO;AAAC0I,YAAAA,UAAU,EAAC1I;AAAZ,WAAP;AAAyB,SAD9C,CAAf;;AAEJ,YAAG,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA5B,CAAsC3D,MAAtC,GAA+C,CAAlD,EAAoD;AAChD,cAAI2L,WAAW,GAAG,KAAK1N,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC6L,MAApC,CAA2C,KAAK3N,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAAvE,CAAlB;AACAzD,UAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA5B,CAAsC+D,GAAtC,CAA0CF,OAAO,IAAGA,OAAO,CAACmB,SAA5D,EAAuEkD,IAAvE,CAA4E,GAA5E,CAAzB;AACA3L,UAAAA,SAAS,CAAC,sBAAD,CAAT,GAAoCyL,WAAW,CAACjE,GAAZ,CAAgBF,OAAO,IAAGA,OAAO,CAACK,oBAAlC,EAAwDgE,IAAxD,CAA6D,GAA7D,CAApC;AACA3L,UAAAA,SAAS,CAAC,uBAAD,CAAT,GAAoC,IAApC;AACAA,UAAAA,SAAS,CAAC,WAAD,CAAT,GAAwB,IAAxB;AACH,SAND,MAMK;AACDA,UAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwCF,OAAO,IAAGA,OAAO,CAACmB,SAA1D,EAAqEkD,IAArE,CAA0E,GAA1E,CAAzB;AACA3L,UAAAA,SAAS,CAAC,sBAAD,CAAT,GAAoC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwCF,OAAO,IAAGA,OAAO,CAACK,oBAA1D,EAAgFgE,IAAhF,CAAqF,GAArF,CAApC;AACA3L,UAAAA,SAAS,CAAC,WAAD,CAAT,GAAwB,KAAxB;AACAA,UAAAA,SAAS,CAAC,uBAAD,CAAT,GAAoC,KAApC;AACH;;AACGA,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwCF,OAAO,IAAGA,OAAO,CAACmB,SAA1D,EAAqEkD,IAArE,CAA0E,GAA1E,CAA/B;AACA3L,QAAAA,SAAS,CAAC,8BAAD,CAAT,GAA4C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwCF,OAAO,IAAGA,OAAO,CAACsE,sBAA1D,EAAkFD,IAAlF,CAAuF,GAAvF,CAA5C;AACA3L,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwCF,OAAO,IAAGA,OAAO,CAACK,oBAA1D,EAAgFgE,IAAhF,CAAqF,GAArF,CAA1C;AACA3L,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAAvM;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAAqH,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAArK,GAAuLzE,iBAAiB,CAACuE,EAAtO;AACAM,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D;AACAvE,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,IAAmD,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAAnG,GAAqH,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAArK,GAAuL/E,iBAAiB,CAACuE,EAAxO,CArCJ,CAsCG;AACC;;AACAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH,CAzCJ,CA0CI;;AACAM,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgCuL,cAAc,CAACjM,gBAA/C;AACAU,QAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BgB,QAA3B;AACAhB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,gBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAA3F;AACA7C,QAAAA,SAAS,CAAC,YAAD,CAAT,GAAyB,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgC+I,UAAvF;AACA7L,QAAAA,SAAS,CAAC,oBAAD,CAAT,GAAiC,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCgJ,kBAA/F;AACA9L,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAkC,KAAKtC,KAAL,CAAWkH,oBAAX,GAClC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BADH,GACgCjL,iBAAiB,CAACuE,EADpF;AAEAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IAC7B,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADxB,GAC8C,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADnG,GACwH5Q,iBAAiB,CAACuE,EAD3K;AAEAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IACrC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BADhB,GAC6C,KAAKrI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BADlG,GAC8HjL,iBAAiB,CAACuE,EADrL;AAEAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA2B7E,iBAAiB,CAACyD,SAAlB,IAAgCzD,iBAAiB,CAAC0P,KAA7E;AACA7K,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAkC,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCkJ,iBAAhG;AACAhM,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA2B;AACHiM,UAAAA,gBAAgB,EAAGpQ,eAAe,CAAC,KAAK6B,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,KAAgDsK,SAAhD,GACnC,KAAKtN,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,CADmC,GACW,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBuO,WAD7B,EACyC,KADzC,CAD/B;AAGHC,UAAAA,SAAS,EAAG,KAAKzO,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0ByL;AAHhE,SAA3B;AAKAnM,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDC,SAAzE;AACAW,QAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BqL,WAA3B;AACArL,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IAA0DtG,iBAAiB,CAACuE,EAAtH;AACAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IAA8C,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CAA/E;AACApM,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,GAA8B,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkN,MAA1D,GAAkE,EAAxF;AACArM,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,GAA8B,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsE,SAA1D,GAAqE,EAA9F;AACA,cAAMxC,UAAU,GAAG;AACfZ,UAAAA,SADe;AAEfL,UAAAA,SAAS,EAAEA,SAFI;AAGfkB,UAAAA,QAAQ,EAAE,eAHK;AAIfC,UAAAA,SAAS,EAAE,eAJI;AAKfQ,UAAAA,WAAW,EAAE,mBALE;AAMfD,UAAAA,SAAS,EAAC;AANK,SAAnB;;AASR,YAAIjG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8EuJ,WAA9E,CAAb,EAAyG;AAC7F,gBAAMrJ,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AAC7B9B,gBAAAA,UAAU,EAAC,EACP,GAAGA,UADI;AAEPmH,kBAAAA,mBAAmB,EAAC,KAAKvI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACjB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CAHI;AAIPvH,kBAAAA,uBAAuB,EAAG,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACvB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C;AALI;AADkB,eAD3B;AAWF/J,cAAAA,SAAS,EAAE,IAXT;AAWeC,cAAAA,UAAU,EAAE,mBAX3B;AAYFZ,cAAAA,SAAS,EAACT,UAAU,CAACS;AAZnB;AAFS,WAAnB;AAiBA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SAnBT,MAmBa;AACD,eAAKjE,KAAL,CAAWpE,mBAAX,CAA+BqG,SAA/B,EAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAA3D,EAAsE,KAAKsL,cAA3E;AACH;AACX;AACL,KA/rDkB;;AAAA,SAisDvBnQ,mBAjsDuB,GAisDDiR,cAAD,IAAkB;AAEpC,UAAGe,UAAU,CAAC,KAAK5O,KAAL,CAAWgD,cAAX,CAA0B6L,aAA3B,CAAV,GAAsDD,UAAU,CAAC,KAAKvO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqN,oBAA5B,CAAiDC,iBAAlD,CAAnE,EAAwI;AACtI,YAAG,KAAK1O,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA9B,KAAoD1B,SAApD,IAAkE,KAAKjN,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA9B,KAAoD,EAAzH,EAA6H;AAC1H,cAAInN,QAAQ,GAAG,EAAf;AACA,cAAIoN,qBAAqB,GAAG,EAA5B;AACA,cAAIC,0BAA0B,GAAG,EAAjC;AACA,cAAIC,cAAc,GAAE,EAApB;AACA,gBAAMrF,GAAG,GAAG,EAAZ;AACA,cAAIsF,uBAAuB,GAAG,EAA9B;AACA,cAAIC,qBAAqB,GAAG,EAA5B;AACA,cAAIC,wBAAwB,GAAG,EAA/B;AACA,cAAIC,sBAAsB,GAAG,EAA7B;AACA,cAAIC,4BAA4B,GAAC,EAAjC;AACA,cAAIC,6BAA6B,GAAC,EAAlC;AAEAL,UAAAA,uBAAuB,CAAC,qBAAD,CAAvB,GAAkD,KAAK/O,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,IAAiC,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA/D,GAC1C,KAAK3O,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA9B,CAAgDU,mBADN,GAC4BjS,iBAAiB,CAACuE,EADhG;AAEAoN,UAAAA,uBAAuB,CAAC,gBAAD,CAAvB,GAA4C3R,iBAAiB,CAACuE,EAA9D;AACAoN,UAAAA,uBAAuB,CAAC,MAAD,CAAvB,GAAkC,CAAlC;AACAE,UAAAA,wBAAwB,CAACpF,IAAzB,CAA8BkF,uBAA9B;AAEAH,UAAAA,qBAAqB,CAAC,mBAAD,CAArB,GAA4C,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,IAAiC,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA/D,GACzB,KAAK3O,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,CAA8B2C,iBAA9B,CAAgD5G,KADvB,GAC+B3K,iBAAiB,CAACuE,EAD7F;AAEAiN,UAAAA,qBAAqB,CAAC,2BAAD,CAArB,GAAmD,KAAK5O,KAAL,CAAWJ,KAAX,CAAiB0P,yBAAjB,IAA8ClS,iBAAiB,CAACuE,EAAnH;AACAiN,UAAAA,qBAAqB,CAAC,wBAAD,CAArB,GAAgD,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmO,sBAA5E;AACAX,UAAAA,qBAAqB,CAAC,4BAAD,CAArB,GAAoD,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAAhF,CAvB0H,CAwB1H;AACA;AACA;;AAEAkL,UAAAA,qBAAqB,CAAC,cAAD,CAArB,GAAsC,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAC9B,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBADE,GACiB,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAD9D,GAC6EtE,iBAAiB,CAACuE,EADrI;AAEAiN,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAAyC,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAC/B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADjB,GACmCzE,iBAAiB,CAACuE,EAD9F;AAEAiN,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAAyC,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GAChB,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADhC,GACkD/E,iBAAiB,CAACuE,EAD7G;AAGAiN,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAA0CxR,iBAAiB,CAACuE,EAA5D;AACAiN,UAAAA,qBAAqB,CAAC,cAAD,CAArB,GAAuCxR,iBAAiB,CAACuE,EAAzD;AACAiN,UAAAA,qBAAqB,CAAC,oBAAD,CAArB,GAA6CxR,iBAAiB,CAACuE,EAA/D;AACAiN,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAA0CxR,iBAAiB,CAACuE,EAA5D;AACAiN,UAAAA,qBAAqB,CAAC,kBAAD,CAArB,GAA0C,KAAKjP,KAAL,CAAWuN,wBAAX,GAAsC,KAAKvN,KAAL,CAAWuN,wBAAX,CAAoCnF,KAA1E,GAAkF3K,iBAAiB,CAACuE,EAA9I;AACAiN,UAAAA,qBAAqB,CAAC,eAAD,CAArB,GAAuC,KAAKjP,KAAL,CAAWqN,gBAAX,GAA8B,KAAKrN,KAAL,CAAWqN,gBAAX,CAA4BjF,KAA1D,GAAkE3K,iBAAiB,CAACuE,EAA3H;AAEAiN,UAAAA,qBAAqB,CAAC,UAAD,CAArB,GAAoC;AAChCY,YAAAA,aAAa,EAAG,KAAK7P,KAAL,CAAWqN,gBAAX,CAA4BjF,KADZ;AAEhC0H,YAAAA,gBAAgB,EAAC,KAAK9P,KAAL,CAAWuN,wBAAX,CAAoCnF,KAFrB;AAGhC2H,YAAAA,gBAAgB,EAAE,KAAK/P,KAAL,CAAWuN,wBAAX,CAAoCtB,KAHtB;AAIhC+D,YAAAA,YAAY,EAAC,KAAKhQ,KAAL,CAAWiQ,yBAAX,CAAqC7K,IAArC,CAA0C4K,YAJvB;AAKhCE,YAAAA,sBAAsB,EAAC,KAAKlQ,KAAL,CAAWiQ,yBAAX,CAAqC7K,IAArC,CAA0C8K,sBALjC;AAMhCC,YAAAA,SAAS,EAAC,KAAKnQ,KAAL,CAAWqN,gBAAX,CAA4BjI,IAA5B,CAAiCgL,aANX;AAOhCC,YAAAA,aAAa,EAAE,KAAKrQ,KAAL,CAAWsQ,oBAAX,CAAgClL,IAAhC,CAAqCmL,iBAPpB;AAQhCC,YAAAA,iBAAiB,EAAE,KAAKxQ,KAAL,CAAWsQ,oBAAX,CAAgClI,KARnB;AAShCyG,YAAAA,aAAa,EAAC,KAAK7O,KAAL,CAAWgD,cAAX,CAA0B6L,aATR;AAUhC4B,YAAAA,SAAS,EAAC,KAAKpQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqN,oBAA5B,CAAiD2B,SAV3B;AAWhC1B,YAAAA,iBAAiB,EAAC,KAAK1O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqN,oBAA5B,CAAiDC,iBAXnC;AAYhC;AACA2B,YAAAA,QAAQ,EAAC,KAAK1Q,KAAL,CAAWgD,cAAX,CAA0B0N,QAbH;AAchCjO,YAAAA,YAAY,EAAC,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,cAAlD;AAdmB,WAApC;AAgBA1B,UAAAA,qBAAqB,CAAC,YAAD,CAArB,GAAsC;AAClCY,YAAAA,aAAa,EAAG,KAAK7P,KAAL,CAAWqN,gBAAX,CAA4BjF,KADV;AAElC0H,YAAAA,gBAAgB,EAAC,KAAK9P,KAAL,CAAWuN,wBAAX,CAAoCnF,KAFnB;AAGlC2H,YAAAA,gBAAgB,EAAE,KAAK/P,KAAL,CAAWuN,wBAAX,CAAoCtB,KAHpB;AAIlC+D,YAAAA,YAAY,EAAC,KAAKhQ,KAAL,CAAWiQ,yBAAX,CAAqC7K,IAArC,CAA0C4K,YAJrB;AAKlCE,YAAAA,sBAAsB,EAAC,KAAKlQ,KAAL,CAAWiQ,yBAAX,CAAqC7K,IAArC,CAA0C8K,sBAL/B;AAMlCC,YAAAA,SAAS,EAAC,KAAKnQ,KAAL,CAAWqN,gBAAX,CAA4BjI,IAA5B,CAAiCgL,aANT;AAOlCC,YAAAA,aAAa,EAAE,KAAKrQ,KAAL,CAAWsQ,oBAAX,CAAgClL,IAAhC,CAAqCmL,iBAPlB;AAQlCC,YAAAA,iBAAiB,EAAE,KAAKxQ,KAAL,CAAWsQ,oBAAX,CAAgClI,KARjB;AASlCyG,YAAAA,aAAa,EAAC,KAAK7O,KAAL,CAAWgD,cAAX,CAA0B6L,aATN;AAUlC4B,YAAAA,SAAS,EAAC,KAAKpQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqN,oBAA5B,CAAiD2B,SAVzB;AAWlC1B,YAAAA,iBAAiB,EAAC,KAAK1O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqN,oBAA5B,CAAiDC,iBAXjC;AAYlC;AACA2B,YAAAA,QAAQ,EAAC,KAAK1Q,KAAL,CAAWgD,cAAX,CAA0B0N,QAbD;AAclCjO,YAAAA,YAAY,EAAC,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,cAAlD;AAdqB,WAAtC,CA1D0H,CA4E1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAECzB,UAAAA,0BAA0B,CAAC,wBAAD,CAA1B,GAAsD,KAAKlP,KAAL,CAAWiQ,yBAAX,CAAqC7K,IAArC,CAA0C8K,sBAAhG;AACAhB,UAAAA,0BAA0B,CAAC,UAAD,CAA1B,GAAyC,EACtC,GAAG,KAAK7O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,UAAlD,CADmC;AAEtCC,YAAAA,QAAQ,EAAG,KAAK5Q,KAAL,CAAWgD,cAAX,CAA0B6L,aAFC;AAGtCpM,YAAAA,YAAY,EAAC,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,cAAlD;AAHyB,WAAzC,CA7FyH,CAkGzH;;AACAzB,UAAAA,0BAA0B,CAAC,cAAD,CAA1B,GAA6C,KAAK7O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,cAAlD,CAA7C;AACAzB,UAAAA,0BAA0B,CAAC,YAAD,CAA1B,GAA0C,EACvC,GAAG,KAAK7O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,YAAlD,CADoC;AAEvCC,YAAAA,QAAQ,EAAG,KAAK5Q,KAAL,CAAWgD,cAAX,CAA0B6L,aAFE;AAGvCpM,YAAAA,YAAY,EAAC,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD,cAAlD;AAH0B,WAA1C,CApGyH,CA2G1H;;AAEAtB,UAAAA,qBAAqB,CAAC,oBAAD,CAArB,GAA8C,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoP,mBAA5B,GAAkD,KAAKxQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoP,mBAA5B,CAAgDC,kBAAlG,GAAuHrT,iBAAiB,CAACuE,EAAvL,CA7G0H,CA8GjI;;AACOqN,UAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDC,SAArF;AACA0N,UAAAA,qBAAqB,CAAC,cAAD,CAArB,GAAwC,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDe,YAAxF;AACA4M,UAAAA,qBAAqB,CAAC,aAAD,CAArB,GAAuC,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoP,mBAA5B,GAAkD,KAAKxQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoP,mBAA5B,CAAgDE,WAAlG,GAA8GtT,iBAAiB,CAACuE,EAAvK,CAjH0H,CAkH/H;;AACKqN,UAAAA,qBAAqB,CAAC,gBAAD,CAArB,GAAwC,CAAxC,CAnH0H,CAmH/E;AACjD;;AACMA,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAAyC,CAAzC,CArH0H,CAqH9E;;AAC5CA,UAAAA,qBAAqB,CAAC,MAAD,CAArB,GAA8B,CAA9B,CAtH0H,CAsHzF;;AAEjCE,UAAAA,sBAAsB,CAACrF,IAAvB,CAA4BmF,qBAA5B;AAGAvF,UAAAA,GAAG,CAAC,eAAD,CAAH,GAAqBrM,iBAAiB,CAACuT,WAAvC;AACAlH,UAAAA,GAAG,CAAC,kBAAD,CAAH,GAA0B+D,cAAc,CAACjM,gBAAzC;AACAC,UAAAA,QAAQ,GAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAA3B;AACAiI,UAAAA,GAAG,CAAC,gBAAD,CAAH,GAAuB,KAAK9J,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAArF;AACA2E,UAAAA,GAAG,CAAC,yBAAD,CAAH,GAA+B,KAAK9J,KAAL,CAAWkH,oBAAX,GAAkC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BAAvE,GAAoGjL,iBAAiB,CAACuE,EAArJ;AACA8H,UAAAA,GAAG,CAAC,YAAD,CAAH,GAAoB,KAAK9J,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAAC0P,KAA1G;AACArD,UAAAA,GAAG,CAAC,mBAAD,CAAH,GAA4B,KAAK9J,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCkJ,iBAA1F;AACAxE,UAAAA,GAAG,CAAC,kBAAD,CAAH,GAAwB,KAAK9J,KAAL,CAAWuN,wBAAX,GAAsC,KAAKvN,KAAL,CAAWuN,wBAAX,CAAoCnF,KAA1E,GAAkF3K,iBAAiB,CAACuE,EAA5H;AACA8H,UAAAA,GAAG,CAAC,eAAD,CAAH,GAAqB,KAAK9J,KAAL,CAAWqN,gBAAX,GAA8B,KAAKrN,KAAL,CAAWqN,gBAAX,CAA4BjF,KAA1D,GAAkE3K,iBAAiB,CAACuE,EAAzG;AACA8H,UAAAA,GAAG,CAAC,mBAAD,CAAH,GAAyB,KAAK9J,KAAL,CAAWsQ,oBAAX,GAAkC,KAAKtQ,KAAL,CAAWsQ,oBAAX,CAAgClI,KAAlE,GAA0E3K,iBAAiB,CAACuE,EAArH;AAEAmN,UAAAA,cAAc,GAAG,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA7C;AAEAoI,UAAAA,GAAG,CAAC,cAAD,CAAH,GAAsBmF,qBAAtB;AACAnF,UAAAA,GAAG,CAAC,gBAAD,CAAH,GAAwBqF,cAAxB;AACArF,UAAAA,GAAG,CAAC,oBAAD,CAAH,GAA4BwF,wBAA5B;AACAxF,UAAAA,GAAG,CAAC,eAAD,CAAH,GAAuByF,sBAAvB;AACAzF,UAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBjI,QAAlB;AACAiI,UAAAA,GAAG,CAAC,yBAAD,CAAH,GAAgC0F,4BAAhC;AACA1F,UAAAA,GAAG,CAAC,+BAAD,CAAH,GAAqCoF,0BAArC;AAEA,gBAAM3L,UAAU,GAAG;AACHjB,YAAAA,SAAS,EAAEwH,GADR;AAEHtG,YAAAA,QAAQ,EAAE,eAFP;AAGHC,YAAAA,SAAS,EAAE,eAHR;AAIHQ,YAAAA,WAAW,EAAE,kBAJV;AAKHD,YAAAA,SAAS,EAAC;AALP,WAAnB;AAQA,eAAK3D,KAAL,CAAWzD,mBAAX,CAA+B2G,UAAU,CAACjB,SAA1C,EAAqD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAtE;AAED,SA1JF,MA0JM;AACH9H,UAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACD;AACF,OA9JF,MA8JM;AACD7H,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACH,KAp2DqB;;AAAA,SAs2DnByP,WAt2DmB,GAs2DL,CAACpD,cAAD,EAAgBqD,QAAhB,KAA4B;AACrC,UAAGrD,cAAc,CAAC5M,kBAAf,IAAqCxD,iBAAiB,CAAC0P,KAA1D,EAAiE;AACtDxT,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAFR,MAEY;AACL,YAAIc,SAAS,GAAG,EAAhB;AACA,cAAMb,UAAU,GAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAApC;AACA,cAAMkB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAE8K,cAAc,CAACjM,gBAJlB;AAKdsB,UAAAA,QAAQ,EAAE,2BALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOd;AACAC,UAAAA,gBAAgB,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B;AAA7B;AARJ,SAAlB;AAUA,YAAIwE,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAGI,YAAIyB,QAAQ,GAAG,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwC1E,IAAI,IAAG;AAC1D,iBAAO;AAAC0I,YAAAA,UAAU,EAAC1I;AAAZ,WAAP;AAAyB,SADd,CAAf;AAGA9C,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAC1B,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBADF,GACqB,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YADlE,GACiFtE,iBAAiB,CAACuE,EAD7H;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAC3B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADrB,GACuCzE,iBAAiB,CAACuE,EADtF;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GACZ,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADpC,GACsD/E,iBAAiB,CAACuE,EADrG;AAEAM,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D,CA3BC,CA4BD;AACA;;AACAvE,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH,CA/BC,CAgCF;;AACCM,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgCuL,cAAc,CAACjM,gBAA/C;AACAU,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAuBgB,QAAvB;AACAhB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0BuL,cAAc,CAACjG,UAAzC;AACAtF,QAAAA,SAAS,CAAC,gBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAA3F;AACA7C,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKtC,KAAL,CAAWkH,oBAAX,GACjC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCiJ,mBADJ,GAC0B5Q,iBAAiB,CAACuE,EAD7E;AAEAM,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAkC,KAAKtC,KAAL,CAAWkH,oBAAX,GAClC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BADH,GACgCjL,iBAAiB,CAACuE,EADpF;AAEAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B7E,iBAAiB,CAAC2D,SAAlB,IAA+B3D,iBAAiB,CAAC0P,KAA3E,CA1CC,CA2CD;AACA;AACA;AACA;AACA;;AACA7K,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,IAAgC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6M,iBAA5F;AACAhM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IACsBtG,iBAAiB,CAACuE,EADlF;AAEAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACsC,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CADvE;AAEA,cAAMnL,UAAU,GAAG;AACfZ,UAAAA,SADe;AAEfL,UAAAA,SAAS,EAAEA,SAFI;AAGfkB,UAAAA,QAAQ,EAAE,eAHK;AAIfC,UAAAA,SAAS,EAAE,OAJI;AAKfQ,UAAAA,WAAW,EAAE,mBALE;AAMfD,UAAAA,SAAS,EAAC;AANK,SAAnB;;AASA,YAAIjG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E8M,QAA9E,CAAb,EAAsG;AAClG,gBAAM5M,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AACR9B,gBAAAA,UAAU,EAAC,EACP,GAAGA,UADI;AAEPmH,kBAAAA,mBAAmB,EAAC,KAAKvI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACjB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CAHI;AAIPvH,kBAAAA,uBAAuB,EAAG,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACvB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C;AALI;AADH,eAFV;AAYF/J,cAAAA,SAAS,EAAE,IAZT;AAYeC,cAAAA,UAAU,EAAE,mBAZ3B;AAaFZ,cAAAA,SAAS,EAACT,UAAU,CAACS;AAbnB;AAFS,WAAnB;AAkBA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SApBD,MAoBK;AACD,eAAKjE,KAAL,CAAWjD,iBAAX,CAA6BkF,SAA7B,EAAwC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAzD;AACH;AAEX;AACL,KAh8DkB;;AAAA,SAk8DnB0P,oBAl8DmB,GAk8DI,CAACtD,cAAD,EAAgBX,UAAhB,KAA8B;AAC7C,UAAGW,cAAc,CAAC5M,kBAAf,IAAqCxD,iBAAiB,CAAC0D,SAAvD,IAAoE0M,cAAc,CAAC5M,kBAAf,IAAqCxD,iBAAiB,CAAC0P,KAA9H,EAAqI;AAC7HxT,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACP,OAFD,MAEK;AACD,YAAIc,SAAS,GAAG,EAAhB;AACA,cAAMb,UAAU,GAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAApC;AACA,cAAMkB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAE8K,cAAc,CAACjM,gBAJlB;AAKdsB,UAAAA,QAAQ,EAAE,qCALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOd;AACAC,UAAAA,gBAAgB,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B;AAA7B;AARJ,SAAlB;AAUA,YAAIwE,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAGI,YAAIyB,QAAQ,GAAG,KAAKjD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwC1E,IAAI,IAAG;AAC1D,iBAAO;AAAC0I,YAAAA,UAAU,EAAC1I;AAAZ,WAAP;AAAyB,SADd,CAAf;AAGA9C,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAAvM;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACnB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAD7B,GAC+CzE,iBAAiB,CAACuE,EAD9F;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GAClB,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAD9B,GACgD/E,iBAAiB,CAACuE,EAD/F;AAEAM,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D,CA1BH,CA2BG;AACA;;AACAvE,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH,CA9BH,CA+BE;;AACCM,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgCuL,cAAc,CAACjM,gBAA/C;AACAU,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAoC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAA5B,CAAoC2H,GAApC,CAAwC6E,MAAM,IAAGA,MAAM,CAAC1E,oBAAxD,EAA8EgE,IAA9E,CAAmF,GAAnF,CAApC;AACA3L,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAuBgB,QAAvB;AACAhB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0BuL,cAAc,CAACjG,UAAzC;AACAtF,QAAAA,SAAS,CAAC,gBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cAA3F;AACA7C,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IACjC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADpB,GAC0C,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBAD/F,GACoH5Q,iBAAiB,CAACuE,EADvK;AAEAM,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAkC,KAAKtC,KAAL,CAAWkH,oBAAX,GAClC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BADH,GACgCjL,iBAAiB,CAACuE,EADpF;AAEAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B7E,iBAAiB,CAAC0D,SAAlB,IAA+B1D,iBAAiB,CAAC0P,KAA3E;AACA7K,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA2B;AACvBiM,UAAAA,gBAAgB,EAAGpQ,eAAe,CAAC,KAAK6B,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,KAAgDsK,SAAhD,GAC/B,KAAKtN,KAAL,CAAWgD,cAAX,CAA0B,kBAA1B,CAD+B,GACe,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBuO,WADjC,EAC6C,KAD7C,CADX;AAGvBC,UAAAA,SAAS,EAAG,KAAKzO,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0ByL;AAH5C,SAA3B;AAKAnM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B4K,UAA1B;AACA5K,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,IAAgC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6M,iBAA5F;AACAhM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IACsBtG,iBAAiB,CAACuE,EADlF;AAEAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACsC,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CADvE;AAEA,cAAMnL,UAAU,GAAG;AACfZ,UAAAA,SADe;AAEfL,UAAAA,SAAS,EAAEA,SAFI;AAGfkB,UAAAA,QAAQ,EAAE,eAHK;AAIfC,UAAAA,SAAS,EAAE,eAJI;AAKfQ,UAAAA,WAAW,EAAE,mBALE;AAMfD,UAAAA,SAAS,EAAC;AANK,SAAnB;;AASA,YAAIjG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E8I,UAA9E,CAAb,EAAwG;AACpG,gBAAM5I,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AACzB9B,gBAAAA,UAAU,EAAC,EACP,GAAGA,UADI;AAEPmH,kBAAAA,mBAAmB,EAAC,KAAKvI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACjB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C,CAHI;AAIPvH,kBAAAA,uBAAuB,EAAG,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IACvB,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,CAA2C,CAA3C;AALI;AADc,eAD3B;AAWF/J,cAAAA,SAAS,EAAE,IAXT;AAWeC,cAAAA,UAAU,EAAE,mBAX3B;AAYFZ,cAAAA,SAAS,EAACT,UAAU,CAACS;AAZnB;AAFS,WAAnB;AAiBA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SAnBD,MAmBK;AACD,eAAKjE,KAAL,CAAWlE,mBAAX,CAA+BmG,SAA/B,EAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAA3D;AACH;AAEX;AACL,KA5hEkB;;AAAA,SAskEnB2P,UAtkEmB,GAskEN,MAAM;AACf,YAAM9M,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEzG,cADK;AAEf0G,QAAAA,IAAI,EAAE;AAAE6M,UAAAA,gBAAgB,EAAE,KAApB;AAA2BC,UAAAA,OAAO,EAAE;AAApC;AAFS,OAAnB;AAIA,WAAKjR,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,KA5kEkB;;AAAA,SAy/EnBiN,UAz/EmB,GAy/EN,MAAM;AACf,UAAI9M,SAAS,GAAG,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBwE,SAAjC;AACA,UAAIE,SAAS,GAAG,KAAKtE,KAAL,CAAWJ,KAAX,CAAiB0E,SAAjC;AACA,UAAI3B,cAAc,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+C,cAAtC;AACA,UAAIuJ,aAAa,GAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBsM,aAAnC;;AAEA,UAAI,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBwE,SAArB,EAAgC;AAC5B,YAAI,KAAKpE,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAA/B,IAA2C,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAA9E,EAAuF;AACvF;AACIS,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,SAAS,GAAG,KAAZ;AACH,SAJD,MAKK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AACH;;AACDzB,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACH,OAXD,MAWM,IAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBsM,aAApB,EAAkC;AAChC9H,QAAAA,SAAS,GAAG,KAAZ;AACA8H,QAAAA,aAAa,GAAC,KAAd;AACP,OAHK,MAID;AACD5H,QAAAA,SAAS,GAAG,KAAZ;AACA3B,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAMsB,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEzG,cADK;AAEf0G,QAAAA,IAAI,EAAE;AAAEG,UAAAA,SAAF;AAAaF,UAAAA,SAAb;AAAwBzB,UAAAA,cAAxB;AAAuCuJ,UAAAA,aAAvC;AAAsDiF,UAAAA,UAAU,EAAE;AAAlE;AAFS,OAAnB;AAIA,WAAKnR,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AAEH,KAzhFkB;;AAAA,SA2hFnBmN,aA3hFmB,GA2hFH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAM3O,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;AACA,UAAIV,SAAS,GAAG,EAAhB;AACAU,MAAAA,cAAc,CAAC2O,SAAD,CAAd,GAA4BD,SAAS,CAACtM,IAAtC;;AACA,UAAIuM,SAAS,KAAK,cAAlB,EAAkC;AAC9B3O,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B0O,SAAS,CAACtJ,KAAzC;AACA,aAAK5C,QAAL,CAAc;AAAEoM,UAAAA,eAAe,EAACF;AAAlB,SAAd;AACH,OAHD,MAGM,IAAGC,SAAS,KAAK,cAAjB,EAAgC;AAClCrP,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAAvM;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAAqH,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAArK,GAAuLzE,iBAAiB,CAACuE,EAAtO;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4R,eAA9C;AACAvP,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAqBU,cAAc,CAAC8O,YAApC;AACAxP,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAsB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAvC;AACA,aAAKxB,KAAL,CAAWlF,6BAAX,CAAyCmH,SAAzC,EAAmD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAApE,EANkC,CAOlC;AAEH,OATK,MASA,IAAIkQ,SAAS,KAAK,WAAlB,EAA+B;AACjC,YAAG,KAAKtR,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAAlC,EAA2C;AAC3ChB,UAAAA,cAAc,CAAC,mBAAD,CAAd,GAAoC,KAAKhD,KAAL,CAAW+R,mBAAX,CAA+B3J,KAAnE;AACC;;AACDpF,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4B0O,SAAS,CAACtJ,KAAtC;AACApF,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C;AACAmB,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GACnB,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAD7B,GAC+C/E,iBAAiB,CAACuE,EADnG,CANiC,CAQjC;;AACAgB,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4R,eAAnD;AACA7O,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAqCsK,SAArC;AACAtK,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAA5M;AACAgB,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgD+P,eAAnG,GAAqH,KAAK3R,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAArK,GAAuLzE,iBAAiB,CAACuE,EAA3O;AACA,aAAK3B,KAAL,CAAWjF,yBAAX,CAAqC4H,cAArC,EAAoD,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAArE;AACH,OAdK,MAcA,IAAIkQ,SAAS,KAAK,oBAAlB,EAAwC;AAC1C3O,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAqC0O,SAAS,CAACtJ,KAA/C;AACApF,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC0O,SAAS,CAACtM,IAAV,CAAe6M,eAAjD;AACAjP,QAAAA,cAAc,CAAC,WAAD,CAAd,GAA4B,KAAKhD,KAAL,CAAW+R,mBAAX,CAA+B3J,KAA3D;AACApF,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C,CAJ0C,CAK1C;;AACAmB,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkCsK,SAAlC;AACA,aAAKjN,KAAL,CAAWhF,4BAAX,CAAwC2H,cAAxC,EAAuD,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAxE,EAP0C,CAQ1C;AACH,OATK,MASA,IAAGkQ,SAAS,KAAK,kBAAjB,EAAoC;AACtC3O,QAAAA,cAAc,CAAC,kBAAD,CAAd,GAAmC0O,SAAS,CAACtJ,KAA7C;AACApF,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC0O,SAAS,CAACtM,IAAV,CAAe8M,eAAjD;AACAlP,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C;AACAmB,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDe,YAA/E;AACA,aAAK+C,QAAL,CAAc;AAAE+H,UAAAA,wBAAwB,EAACmE;AAA3B,SAAd;AACA,aAAKrR,KAAL,CAAW3D,kCAAX,CAA8CsG,cAA9C,EAA6D,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAA9E,EAAyF,KAAKzB,KAAL,CAAWuN,wBAApG;AACH,OAPK,MAOA,IAAGoE,SAAS,KAAK,eAAjB,EAAiC;AACnC3O,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAgC0O,SAAS,CAACtJ,KAA1C;AACApF,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C;AACAmB,QAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B0O,SAAS,CAACtM,IAAV,CAAe+M,WAA7C;AACAnP,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDe,YAA/E;AACA,aAAK+C,QAAL,CAAc;AAAC6H,UAAAA,gBAAgB,EAACqE;AAAlB,SAAd;AACA,aAAKrR,KAAL,CAAW1D,mCAAX,CAA+CqG,cAA/C,EAA8D,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAA/E,EAA0F,KAAKzB,KAAL,CAAWuN,wBAArG;AAEH,OARK,MAQA,IAAGoE,SAAS,KAAK,cAAjB,EAAgC;AAClC3O,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAgC,KAAKhD,KAAL,CAAWqN,gBAAX,CAA4BjF,KAA5D;AACApF,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC0O,SAAS,CAACtM,IAAV,CAAe8K,sBAAjD;AACAlN,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C;AACAmB,QAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,CAA6C8E,WAA3E;AACA,aAAK3M,QAAL,CAAc;AAACyK,UAAAA,yBAAyB,EAACyB;AAA3B,SAAd,EALkC,CAMlC;AACA;AACA;;AACA1O,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDe,YAA/E,CATkC,CAUlC;;AACA,aAAKpC,KAAL,CAAWxD,6BAAX,CAAyCmG,cAAzC,EAAwD,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAzE,EAAoF,KAAKzB,KAAL,CAAWuN,wBAA/F;AACH,OAZK,MAYA,IAAGoE,SAAS,KAAK,iBAAjB,EAAmC;AACrC3O,QAAAA,cAAc,CAAC,qBAAD,CAAd,GAAsC0O,SAAS,CAACtJ,KAAhD;AACApF,QAAAA,cAAc,CAAC,iBAAD,CAAd,GAAkC0O,SAAS,CAACzF,KAA5C;AACAjJ,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA2B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5C,CAHqC,CAIrC;;AACAmB,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAqC0O,SAAS,CAACtM,IAA/C;AACA,aAAK/E,KAAL,CAAW9C,eAAX,CAA2ByF,cAA3B,EAA0C,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAA3D;AACH,OAPK,MAOC;AACH,aAAK+D,QAAL,CAAc;AAAC4M,UAAAA,oBAAoB,EAACV;AAAtB,SAAd;AACH;AACJ,KAvmFkB;;AAAA,SAymFnBW,sBAzmFmB,GAymFM,CAACjK,KAAD,EAAQkK,IAAR,KAAiB;AACtC,YAAMtP,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACsP,IAAD,CAAd,GAAuBlK,KAAvB;AACA,WAAK5C,QAAL,CAAc;AAAExC,QAAAA;AAAF,OAAd;AACH,KA7mFkB;;AAAA,SA+mFnBuP,eA/mFmB,GA+mFAhN,KAAD,IAAW;AACzB,YAAMvC,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;;AAEA,UAAIuC,KAAK,CAACmE,MAAN,CAAa8I,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIjN,KAAK,CAACmE,MAAN,CAAa4I,IAAb,KAAsB,oBAA1B,EACItP,cAAc,CAACuC,KAAK,CAACmE,MAAN,CAAa4I,IAAd,CAAd,GAAoC/M,KAAK,CAACmE,MAAN,CAAaF,OAAb,KAAyB,IAAzB,GAAgC/L,iBAAiB,CAACgV,MAAlD,GAA2DhV,iBAAiB,CAACiV,QAAjH,CADJ,KAGI1P,cAAc,CAACuC,KAAK,CAACmE,MAAN,CAAa4I,IAAd,CAAd,GAAoC/M,KAAK,CAACmE,MAAN,CAAaF,OAAb,KAAyB,IAAzB,GAAgC/L,iBAAiB,CAACkV,GAAlD,GAAwDlV,iBAAiB,CAACmV,EAA9G;AAEP,OAND,MAOK;AACD5P,QAAAA,cAAc,CAACuC,KAAK,CAACmE,MAAN,CAAa4I,IAAd,CAAd,GAAoC/M,KAAK,CAACmE,MAAN,CAAatB,KAAjD;AAEH;;AACD,WAAK5C,QAAL,CAAc;AAAExC,QAAAA;AAAF,OAAd;AACH,KA9nFkB;;AAAA,SAgoFnB6P,kBAhoFmB,GAgoFE,CAACzK,KAAD,EAAQ+C,GAAR,EAAa2H,IAAb,EAAmB7G,KAAnB,EAA0B8G,IAA1B,KAAmC;AACpD,YAAM/P,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;;AACA,UAAIoF,KAAK,CAAChG,MAAN,GAAe,CAAnB,EAAsB;AAClB+I,QAAAA,GAAG,CAAC6H,OAAJ,CAAYC,QAAQ,IAAI;AACpBjQ,UAAAA,cAAc,CAACiQ,QAAD,CAAd,GAA2B7K,KAAK,CAAC,CAAD,CAAL,CAAS6K,QAAT,CAA3B;AACH,SAFD;;AAGA,YAAIH,IAAJ,EAAU;AACNC,UAAAA,IAAI,CAACjJ,GAAL,CAAS,CAACoJ,MAAD,EAASC,KAAT,KAAmB;AACxB,mBAAOnQ,cAAc,CAACkQ,MAAD,CAAd,GAAyB;AAAE,uBAAS9K,KAAK,CAAC,CAAD,CAAL,CAAS6D,KAAK,CAACkH,KAAD,CAAd,CAAX;AAAmC,uBAAS/K,KAAK,CAAC,CAAD,CAAL,CAAS8K,MAAT;AAA5C,aAAhC;AACH,WAFD;AAGH;AACJ,OATD,MASO;AACH/H,QAAAA,GAAG,CAAC6H,OAAJ,CAAYC,QAAQ,IAAI;AACpBjQ,UAAAA,cAAc,CAACiQ,QAAD,CAAd,GAA2B,EAA3B;AACH,SAFD;AAGAF,QAAAA,IAAI,CAACjJ,GAAL,CAAS,CAACoJ,MAAD,EAASC,KAAT,KAAmB;AACxB,iBAAOnQ,cAAc,CAACkQ,MAAD,CAAd,GAAyB,EAAhC;AACH,SAFD;AAGH;;AACD,WAAK7S,KAAL,CAAW+S,+BAAX,CAA2CpQ,cAA3C,EAA2D,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB4B,QAA5E;AACH,KAppFkB;;AAAA,SAspFnBwR,sBAtpFmB,GAspFM,CAACjL,KAAD,EAAQ+C,GAAR,KAAgB;AACrC,YAAMnI,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;;AACA,UAAIoF,KAAK,CAAChG,MAAN,GAAe,CAAnB,EAAsB;AAClB+I,QAAAA,GAAG,CAAC6H,OAAJ,CAAYC,QAAQ,IAAI;AACpBjQ,UAAAA,cAAc,CAACiQ,QAAD,CAAd,GAA2B7K,KAAK,CAAC,CAAD,CAAL,CAAS6K,QAAT,CAA3B;AACH,SAFD;AAGH;;AACD,WAAKzN,QAAL,CAAc;AAAExC,QAAAA;AAAF,OAAd;AACH,KA9pFkB;;AAAA,SAgqFnBsQ,mBAhqFmB,GAgqFG,MAAM;AACxB,YAAMtQ,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCsK,SAAjC;AACAtK,MAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCsK,SAAnC;AACAtK,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgC,EAAhC;AACAA,MAAAA,cAAc,CAAC,YAAD,CAAd,GAA+BvF,iBAAiB,CAACmV,EAAjD;AACA5P,MAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBsT,0BAAnD;AACAvQ,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBsT,0BAAjD;AACA,WAAK/N,QAAL,CAAc;AAAExC,QAAAA;AAAF,OAAd;AACH,KAzqFkB;;AAAA,SA2qFnBwQ,gBA3qFmB,GA2qFA,CAACnK,QAAD,EAAWD,SAAX,KAAyB;AACxC,UAAIpG,cAAc,GAAC,EAAnB;;AACA,UAAIoG,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIE,IAAJ,EAAZ;AACH;;AACDtG,MAAAA,cAAc,CAACqG,QAAD,CAAd,GAA2BD,SAA3B;AACA,WAAK5D,QAAL,CAAc;AAAExC,QAAAA;AAAF,OAAd;AACH,KAlrFkB;;AAAA,SAorFnByQ,WAprFmB,GAorFL,CAACC,aAAD,EAAgB/B,SAAhB,KAA8B;AACxC,UAAI3O,cAAc,GAAG,KAAKhD,KAAL,CAAWgD,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC2O,SAAD,CAAd,GAA4B+B,aAA5B;AACA,WAAKlO,QAAL,CAAc;AAAExC,QAAAA,cAAF;AAAkB2Q,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KAxrFkB;;AAAA,SA0rFnBC,UA1rFmB,GA0rFNC,eAAD,IAAoB;AAChC,UAAGA,eAAe,KAAKvG,SAAvB,EAAkC;AAC9B3T,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACD,OAFH,MAEQ,IAAGqS,eAAe,CAACzR,MAAhB,GAAyB,CAA5B,EAA8B;AAClC,YAAI0R,WAAW,GAAG,EAAlB;AACAD,QAAAA,eAAe,CAAC/J,GAAhB,CAAoB1E,IAAI,IACpB0O,WAAW,CAAC5J,IAAZ,CAAiB;AACba,UAAAA,SAAS,EAAC3F,IAAI,CAAC2F,SADF;AAEbmD,UAAAA,sBAAsB,EAAC9I,IAAI,CAAC8I,sBAFf;AAGbjE,UAAAA,oBAAoB,EAAG7E,IAAI,CAAC6E,oBAHf;AAIbrI,UAAAA,gBAAgB,EAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,GACnB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE,gBAD7B,GACgDnE,iBAAiB,CAACuE,EALxE;AAMb2B,UAAAA,KAAK,EAACyB,IAAI,CAAC0I,UAAL,CAAgBiG,UAAhB,CAA2BpQ,KANpB;AAObC,UAAAA,WAAW,EAACwB,IAAI,CAAC0I,UAAL,CAAgBiG,UAAhB,CAA2BnQ,WAP1B;AAQbC,UAAAA,SAAS,EAACuB,IAAI,CAAC0I,UAAL,CAAgBiG,UAAhB,CAA2BlQ,SARxB;AASbiK,UAAAA,UAAU,EAAG;AACTiG,YAAAA,UAAU,EAAG3O,IAAI,CAAC0I,UAAL,CAAgBiG;AADpB,WATA;AAYbzQ,UAAAA,QAAQ,EAAG;AACPyQ,YAAAA,UAAU,EAAG3O,IAAI,CAAC9B,QAAL,CAAcyQ;AADpB;AAZE,SAAjB,CADJ;AAoBA,YAAInS,gBAAgB,GAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,IACvB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE,gBADhD,CAtBkC,CAwBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAM2B,UAAU,GAAG;AACfjB,UAAAA,SAAS,EAAE;AACP0R,YAAAA,WAAW,EAACpS,gBADL;AAEPkS,YAAAA,WAFO;AAGPjS,YAAAA,QAAQ,EAAG,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAHrB;AAIPJ,YAAAA,UAAU,EAAC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAJrB;AAKPM,YAAAA,YAAY,EAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,GACf,KAAK5H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YADrC,GACoDtE,iBAAiB,CAACuE,EAN9E;AAOPE,YAAAA,eAAe,EAAG,KAAKlC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgClD,eAA7D,GACczE,iBAAiB,CAACuE,EAR3C;AASP+B,YAAAA,0BAA0B,EAAC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IAA0DtG,iBAAiB,CAACuE;AAThG;AADI,SAAnB;AAaC,aAAK3B,KAAL,CAAWzE,kBAAX,CAA8B2H,UAAU,CAACjB,SAAzC;AACF,OAlDK,MAkDD;AACH3I,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACD;AAEF,KAnvFkB;;AAAA,SAqvFnByS,WArvFmB,GAqvFL,CAACnI,QAAD,EAAWoI,OAAX,KAAuB;AAEjC,UAAG,KAAK7T,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,cAAhC,EAA+C;AAC3C,aAAK4P,UAAL,CAAgB,KAAK5T,KAAL,CAAW6J,gBAA3B;AACH,OAFD,MAEM,IAAG,KAAKxJ,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,UAAhC,EAA2C;AAC7C,aAAK4J,gBAAL,CAAsB,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAAlD,EAAsE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiB0N,WAAvF;AACH,OAFK,MAEA,IAAG,KAAKtN,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,UAAhC,EAA2C;AAC7C,aAAKmN,oBAAL,CAA0B,KAAK9Q,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAAtD,EAA0E,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBiN,UAA3F;AACH,OAFK,MAEA,IAAG,KAAK7M,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,iBAAhC,EAAkD;AACpD,aAAKpH,mBAAL,CAAyB,KAAKyD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAArD;AACH,OAFK,MAED;AACL,YAAIY,SAAS,GAAG,EAAhB;AACA,YAAI+D,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAClC,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAD9B,EAC0C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD3D,CAAlC;;AAEA,YAAG,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA8B,QAAjC,EAA0C;AAC1C1B,UAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,UAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACC;;AAEDnE,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,MAArC;AACAA,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAA8B,OAA9B;AACAA,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAAvM;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACnB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAD7B,GAC+CzE,iBAAiB,CAACuE,EAD9F;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GACJ,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAD5C,GAC8D/E,iBAAiB,CAACuE,EAD7G;AAEAM,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiC,KAAKtC,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0BmR,iBAA1B,IAA+C7G,SAA5E,GAAwF,KAAKtN,KAAL,CAAWgD,cAAX,CAA0BmR,iBAAlH,GAAsI,KAAKnU,KAAL,CAAW+R,mBAAX,CAA+B3J,KAAtM;AACA9F,QAAAA,SAAS,CAAC,WAAD,CAAT,GAAwB,KAAKtC,KAAL,CAAW+R,mBAAX,GAAiC,KAAK/R,KAAL,CAAW+R,mBAAX,CAA+B3J,KAAhE,GAAwE3K,iBAAiB,CAACuE,EAAlH;AACAM,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKtC,KAAL,CAAWoU,eAAX,GAA6B,KAAKpU,KAAL,CAAWoU,eAAX,CAA2BhP,IAA3B,CAAgC3C,YAA7D,GAA0EhF,iBAAiB,CAACuE,EAAtH,CAnBK,CAoBL;AACA;AACA;;AACAM,QAAAA,SAAS,CAAC,oBAAD,CAAT,GAAgC,KAAKtC,KAAL,CAAWqU,oBAAX,GAAkC,KAAKrU,KAAL,CAAWqU,oBAAX,CAAgCjM,KAAlE,GAA0E3K,iBAAiB,CAACuE,EAA5H;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWsU,kBAAX,GAAgC,KAAKtU,KAAL,CAAWsU,kBAAX,CAA8BlM,KAA9D,GAAsE3K,iBAAiB,CAACuE,EAArH;AACAM,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKtC,KAAL,CAAW4R,eAAX,GAA6B,KAAK5R,KAAL,CAAW4R,eAAX,CAA2BxJ,KAAxD,GAAgE3K,iBAAiB,CAACuE,EAA5G;AACAM,QAAAA,SAAS,CAAC,oBAAD,CAAT,GAAgC7E,iBAAiB,CAAC0P,KAAlD;AACA7K,QAAAA,SAAS,CAAC,YAAD,CAAT,GAAwB,GAAxB,CA3BK,CA4BL;AACA;AACA;AACA;AACA;AACA;;AACAA,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D;AACAvE,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH;AACAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,KAAKtC,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAAC0P,KAAhH;AACA7K,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWoS,oBAAX,IAAmC,KAAKpS,KAAL,CAAWoS,oBAAX,CAAgCnG,KAAhG,CAtCK,CAuCL;AACA;AACA;AACA;;AACA3J,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAmC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IACnC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BADlB,GAC+C,KAAKrI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BADpG,GACgIjL,iBAAiB,CAACuE,EADrL;AAEAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAkC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IAC3B,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBAD1B,GACgD,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADrG,GAC0H5Q,iBAAiB,CAACuE,EAD9K;AAEAM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,GAAyD,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAArF,GAAgHtG,iBAAiB,CAACuE,EAA1K;AACD,YAAIW,SAAS,GAAG2K,SAAhB;AACK3K,QAAAA,SAAS,GAAG;AACRC,UAAAA,aAAa,EAAE,aADP;AAERC,UAAAA,cAAc,EAAE,qBAFR;AAGRC,UAAAA,eAAe,EAAE,kBAHT;AAIRyR,UAAAA,YAAY,EAAE,CAAC,UAAD,EAAa,QAAb,CAJN;AAI8BpR,UAAAA,WAAW,EAAE,IAJ3C;AAKRD,UAAAA,QAAQ,EAAE;AALF,SAAZ;AAOJ,cAAMK,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE,eADK;AAEfC,UAAAA,SAAS,EAAE,eAFI;AAGfQ,UAAAA,WAAW,EAAE,mBAHE;AAIf3B,UAAAA,SAAS,EAAEA,SAJI;AAKfK,UAAAA,SALe;AAMf6R,UAAAA,SAAS,EAAE,KAAKA,SAND;AAOfxQ,UAAAA,SAAS,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAPb;AAQf8H,UAAAA,QARe;AASfoI,UAAAA;AATe,SAAnB;;AAWA,YAAG,KAAK7T,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA8B,QAAjC,EAA0C;AACtC,eAAKwQ,SAAL,CAAeC,OAAf,CAAuBrM,KAAvB,GAA+B,EAA/B;AACA,eAAK/H,KAAL,CAAW5E,uBAAX,CAAmC8H,UAAU,CAAC,WAAD,CAA7C,EAA4D,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBwB,UAA7E,EAAwF8B,UAAU,CAAC,WAAD,CAAlG;AACH,SAHD,MAGK;AACDjB,UAAAA,SAAS,CAAC,kBAAD,CAAT,GAA+B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE,gBAA/E;AACAU,UAAAA,SAAS,CAAC,qBAAD,CAAT,GAAkC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA9D;;AACA,cAAI3D,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E,KAAK/D,KAAL,CAAWJ,KAAX,CAAiByU,MAA/F,CAAb,EAAqH;AACjH,kBAAMpQ,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAEzG,cADK;AAEf0G,cAAAA,IAAI,EAAE;AACFC,gBAAAA,SAAS,EAAE,IADT;AACeC,gBAAAA,UAAU,EAAE;AAAEnB,kBAAAA,UAAF;AACzB9B,kBAAAA,UAAU,EAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB;AADL,iBAD3B;AAIFkD,gBAAAA,SAAS,EAAE,IAJT;AAKFC,gBAAAA,UAAU,EAAE,mBALV;AAMFZ,gBAAAA,SAAS,EAAGT,UAAU,CAACS;AANrB;AAFS,aAAnB;AAWA,iBAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,WAbD,MAaK;AACL,iBAAKjE,KAAL,CAAWtE,yBAAX,CAAqCwH,UAAU,CAAC,WAAD,CAA/C,EAA8D,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBwB,UAA/E,EAA0F8B,UAAU,CAAC,WAAD,CAApG;AACC;AACJ;AACJ,OApGoC,CAqGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,KA12FkB;;AAAA,SA42FnBvH,mBA52FmB,GA42FG,CAAC6Q,aAAD,EAAeC,QAAf,EAAwB9I,SAAxB,KAAsC;AACxD,UAAI6I,aAAa,CAAC5L,kBAAd,KAAqCxD,iBAAiB,CAAC0D,SAAvD,IACA0L,aAAa,CAAC5L,kBAAd,KAAqCxD,iBAAiB,CAACyD,SADvD,IAEA2L,aAAa,CAAC5L,kBAAd,KAAqCxD,iBAAiB,CAAC2D,SAF3D,EAEsE;AAClEzH,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH,OAJD,MAKK;AACD,YAAIc,SAAS,GAAG,EAAhB;AACA,cAAMb,UAAU,GAAG,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAApC;AACA,cAAMkB,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,aADD;AAEdC,UAAAA,cAAc,EAAE,qBAFF;AAGdC,UAAAA,eAAe,EAAE,kBAHH;AAIdC,UAAAA,eAAe,EAAE8J,aAAa,CAACjL,gBAJjB;AAKdsB,UAAAA,QAAQ,EAAE,4CALI;AAMdC,UAAAA,WAAW,EAAE,IANC;AAOd;AACAC,UAAAA,gBAAgB,EAAE;AAAEvB,YAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAA7B;AACEkC,YAAAA,0BAA0B,EAAG,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,GAAyD,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAArF,GAAgHtG,iBAAiB,CAACuE,EADjK;AAEEQ,YAAAA,eAAe,EAAG,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE;AAFlE;AARJ,SAAlB;AAaA,YAAI6D,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAC9B,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UADlC,EAC8C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD/D,CAAlC;AAEIS,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,aAAD,CAAT,GAA2BnE,eAAe,CAAC,IAAImL,IAAJ,EAAD,EAAa,IAAb,CAA1C;AACAhH,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D;AACAvE,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GAA+F,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5I,GAA2JtE,iBAAiB,CAACuE,EAAvM;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GACnB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAD7B,GAC+CzE,iBAAiB,CAACuE,EAD9F;AAEAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GAClB,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eAD9B,GACgD/E,iBAAiB,CAACuE,EAD/F,CA1BH,CA4BG;AACA;;AACAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH,CA/BH,CAgCG;;AACAM,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgCuK,aAAa,CAACjL,gBAA9C;AACAU,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,KAAKtC,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAAC0P,KAAhH,CAlCH,CAmCG;AACA;;AACA7K,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAkC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IAClC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BADnB,GAElC,KAAKrI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDyB,0BAFnB,GAE+CjL,iBAAiB,CAACuE,EAFnG;AAGAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IACjC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADpB,GAC0C,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBAD/F,GACoH5Q,iBAAiB,CAACuE,EADvK;AAEAM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IAA0DtG,iBAAiB,CAACuE,EAAtH;AACAM,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA2BuK,aAA3B;AACAvK,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAqB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BU,OAAjD;AACA,cAAMoB,UAAU,GAAG;AACnBZ,UAAAA,SADmB;AAEnBL,UAAAA,SAAS,EAAEA,SAFQ;AAGnB0B,UAAAA,SAHmB;AAInBR,UAAAA,QAAQ,EAAE,eAJS;AAKnBC,UAAAA,SAAS,EAAE,eALQ;AAMnBQ,UAAAA,WAAW,EAAE;AANM,SAAnB;;AASJ,YAAIlG,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,EAA8E0I,QAA9E,CAAb,EAAsG;AAClG,gBAAMxI,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEzG,cADK;AAEf0G,YAAAA,IAAI,EAAE;AACFC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAEnB,gBAAAA,UAAF;AAAc9B,gBAAAA;AAAd,eAD3B;AAEFkD,cAAAA,SAAS,EAAE,IAFT;AAEeC,cAAAA,UAAU,EAAE,mBAF3B;AAEgDZ,cAAAA;AAFhD;AAFS,WAAnB;AAOA,eAAK3D,KAAL,CAAWnF,WAAX,CAAuBoJ,UAAvB;AACH,SATD,MAUK;AACD,eAAKjE,KAAL,CAAWpF,UAAX,CAAsBsI,UAAtB,EAAkC9B,UAAlC,EAA6C,WAA7C;AACH;AACJ;AACJ,KAt7FkB;;AAAA,SAw7FnBkT,aAx7FmB,GAw7FFC,SAAD,IAAc;AAC9B,UAAG,KAAKvU,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC0P,KAA3F,EAAiG;AAC7F,aAAK9M,KAAL,CAAWvE,6BAAX,CAAyC8Y,SAAzC,EACI,KAAKvU,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBADhC;AAEA,OAHJ,MAGQ;AACJ/H,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACA;AACH,KA/7FkB;;AAAA,SAk8FnBqT,aAl8FmB,GAk8FH,MAAM;AAClB,YAAMtR,UAAU,GAAG;AACfjB,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QADZ;AAERiT,YAAAA,OAAO,EAAE,KAAK9U,KAAL,CAAWgD,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKP+R,UAAAA,QAAQ,EAAE,KAAK/U,KAAL,CAAWgD,cAAX,CAA0B,eAA1B;AALH,SADI;AAQf0B,QAAAA,UAAU,EAAE,KAAKrE,KAAL,CAAWJ,KAAX,CAAiByE;AARd,OAAnB;AAUA,WAAKrE,KAAL,CAAWjE,uBAAX,CAAmCmH,UAAnC,EAA+C,WAA/C;AACH,KA98FkB;;AAAA,SAg9FnByR,cAh9FmB,GAg9FF,MAAM;AAEnB,UAAG,KAAK3U,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,IAAuDqF,SAAvD,IAAoE,KAAKtN,KAAL,CAAWmI,iBAAX,CAA6B/C,IAA7B,IAAqCkI,SAAzG,IAAsH,KAAKtN,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,IAAmCkI,SAAzJ,IACC,KAAKtN,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,IAAwCkI,SAD5C,EAEC;AACG,YAAIhL,SAAS,GAAG,EAAhB;AAEA,YAAI+D,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAClC,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAD9B,EAC0C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD3D,CAAlC;AAEAS,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAA8B,MAA9B;AACAA,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AACAS,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D;AACAvE,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,GAAgD,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA9F,GAAgH/E,iBAAiB,CAACuE,EAA/J;AACAM,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,GAAsD,KAAK5H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,CAAoDlG,YAA1G,GAAyHtE,iBAAiB,CAACuE,EAArK;AACAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAAjE;AACA3F,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAAxD,GAA+D3H,iBAAiB,CAACuE,EAAzH;AACAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKtC,KAAL,CAAWkC,eAAX,GAA6B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgClD,eAA7D,GAA+EzE,iBAAiB,CAACuE,EAA9H;AACAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,KAAKtC,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAAC0P,KAAhH,CAfH,CAgBG;AACA;;AACA7K,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IACjC,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBADpB,GAC0C,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBAD/F,GACoH5Q,iBAAiB,CAACuE,EADvK;AAEAM,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAkC,KAAKtC,KAAL,CAAWkH,oBAAX,GAC/B,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BADN,GACmCjL,iBAAiB,CAACuE,EADvF,CApBH,CAsBG;AACA;AACA;;AACAM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IACkCtG,iBAAiB,CAACuE,EAD9F;AAEAM,QAAAA,SAAS,CAAC,0BAAD,CAAT,GAAuC,KAAKtC,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAApI;AACAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKtC,KAAL,CAAWmI,iBAAX,IAAgC,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6B/C,IAA7D,IAAqE3H,iBAAiB,CAACuE,EAA5H;AAEA,cAAMuB,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE,eADK;AAEfC,UAAAA,SAAS,EAAE,aAFI;AAGfQ,UAAAA,WAAW,EAAE,mBAHE;AAIf3B,UAAAA,SAAS,EAAEA,SAJI;AAKfkS,UAAAA,SAAS,EAAE,KAAKA;AALD,SAAnB;AAOJ,aAAKnU,KAAL,CAAW9E,oBAAX,CAAgCgI,UAAU,CAAC,WAAD,CAA1C,EAAwD,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAzE;AACH,OAxCG,MAwCC;AACD9H,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACD;AACF,KA7/FkB;;AAAA,SA+/FnByT,UA//FmB,GA+/FLC,cAAD,IAAoB;AAC7B,WAAKV,SAAL,CAAeC,OAAf,CAAuBrM,KAAvB,GAA+B,EAA/B,CAD6B,CAE7B;;AACJ,UAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,KAAiDrE,iBAAiB,CAACuE,EAAnE,IACC,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,KAAiD,IAAjD,IACA,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,KAAoDxE,iBAAiB,CAACuE,EAFvE,IAGC,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,KAAoD,IAApD,IACA,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,KAAyDxJ,iBAAiB,CAACuE,EAJ5E,IAKC,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,KAAyD,IAAzD,IACA,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,KAAoDnL,iBAAiB,CAACuE,EANvE,IAOC,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,KAAoD,IAPxD,EAO8D;AAE1D,YAAItG,SAAS,GAAG,EAAhB;AACA,YAAI+D,GAAG,GAAG/H,wBAAwB,CAAC,KAAK0B,KAAL,CAAWsG,cAAX,CAA0BC,QAA1B,IAAsC,KAAKlG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAnE,EAClC,KAAKxG,KAAL,CAAWsG,cAAX,CAA0BG,MAA1B,IAAoC,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAD9B,EAC0C,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QAD3D,CAAlC;AAEAS,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAuB+D,GAAG,CAACE,QAA3B;AACAjE,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAqB+D,GAAG,CAACI,MAAzB;AACAnE,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAzC;AAEAS,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,IAC7B,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADnB,GACqC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADrF,GACuG/E,iBAAiB,CAACuE,EADtJ;AAGAM,QAAAA,SAAS,CAAC,cAAD,CAAT,GAA2B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA7F,GAC3B,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YADlB,GACiCtE,iBAAiB,CAACuE,EAD9E;AAGAM,QAAAA,SAAS,CAAC,iBAAD,CAAT,GAA6B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAC7B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eADnB,GACqCzE,iBAAiB,CAACuE,EADpF;AAGAM,QAAAA,SAAS,CAAC,mBAAD,CAAT,GAAgC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5D;AAEAvE,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAqC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA3E,GAA8FrE,iBAAiB,CAACuE,EAArJ;AAEAM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAyC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAkD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA9E,GAAoGxE,iBAAiB,CAACuE,EAA/J;AAEAM,QAAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,IAAuD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoDlG,kBAA3G,IAAiIxD,iBAAiB,CAACuE,EAA7K;AAEAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAiC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,IAAwD,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwF,wBAA5B,CAAqDoH,mBAA7G,IAAoI5Q,iBAAiB,CAACuE,EAAvL;AAEAM,QAAAA,SAAS,CAAC,0BAAD,CAAT,GAAuC,KAAKtC,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAApI;AAEAM,QAAAA,SAAS,CAAC,sBAAD,CAAT,GAAmC,KAAKtC,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCsD,0BAAxE,IAAsGjL,iBAAiB,CAACuE,EAA3J,CA9B0D,CAgC1D;;AACAM,QAAAA,SAAS,CAAC,qBAAD,CAAT,GAAmC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,IAAuD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAnF,IAA8G1J,iBAAiB,CAACuE,EAAnK;AACAM,QAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,IAAuD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAAnF,IAA8G1J,iBAAiB,CAACuE,EAAvK;AACAM,QAAAA,SAAS,CAAC,4BAAD,CAAT,GAAwC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAA5B,IAA0DtG,iBAAiB,CAACuE,EAApH;AACA,cAAMuB,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE,eADK;AAEfC,UAAAA,SAAS,EAAE,aAFI;AAGfQ,UAAAA,WAAW,EAAE,mBAHE;AAIf3B,UAAAA,SAAS,EAAEA,SAJI;AAKfkS,UAAAA,SAAS,EAAE,KAAKA;AALD,SAAnB;AAQF,aAAKnU,KAAL,CAAW9E,oBAAX,CAAgCgI,UAAU,CAAC,WAAD,CAA1C,EAAwD,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBwB,UAAzE;AACD,OApDD,MAoDK;AAED9H,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA1jGsB;;AAAA,SAqlGnB2T,aArlGmB,GAqlGH,CAACnS,cAAD,EAAiB8P,IAAjB,EAAuB9R,YAAvB,KAAwC;AACpD,YAAMoU,WAAW,GAAG;AAChB5R,QAAAA,QAAQ,EAAE,uBADM;AAEhBC,QAAAA,SAAS,EAAE,kBAFK;AAGhBmB,QAAAA,UAAU,EAAE,uBAHI;AAIhBZ,QAAAA,SAAS,EAAE,eAJK;AAKhBlB,QAAAA,eAAe,EAAE,mBALD;AAMhBS,QAAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBsD,UANb;AAOhB1B,QAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAPX;AAQhBwC,QAAAA,YAAY,EAAE,CAAC,CARC;AAShB/B,QAAAA,SAAS,EAAE;AACP+S,UAAAA,eAAe,EAAE,mBADV;AAEPC,UAAAA,WAAW,EAAEtS,cAAc,CAACuS,iBAFrB;AAGPA,UAAAA,iBAAiB,EAAEvS,cAAc,CAACuS,iBAH3B;AAIPC,UAAAA,oBAAoB,EAAExS,cAAc,CAACyS,SAAf,KAA6BhY,iBAAiB,CAACiY,IAA/C,IAAuD5C,IAAI,KAAK,CAAhE,GAAoE9P,cAAc,CAACwS,oBAAnF,GAA0G,CAAC,CAJ1H;AAKPG,UAAAA,eAAe,EAAE3S,cAAc,CAACyS,SALzB;AAKmC;AAC1CG,UAAAA,eAAe,EAAE9C,IAAI,KAAK,CAAT,GAAanV,cAAc,CAACkY,UAA5B,GAAyClY,cAAc,CAACmY,KANlE;AAOP9U,UAAAA,YAPO;AAQP+U,UAAAA,kBAAkB,EAAEjD,IAAI,KAAK,CAAT,GAAa,CAAC,CAAd,GAAkBlV,aAAa,CAACoY,YAR7C;AASP3S,UAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiB4B,QATpB;AAUPmG,UAAAA,KAAK,EAAE8K,IAVA;AAWPmD,UAAAA,mBAAmB,EAAE;AAXd;AATK,OAApB;AAuBA,WAAK5V,KAAL,CAAW8U,aAAX,CAAyBC,WAAzB;AACH,KA9mGkB;;AAAA,SAgnGnBc,YAhnGmB,GAgnGH9N,KAAD,IAAW;AACtB,UAAIA,KAAK,CAAC+N,MAAN,KAAiB,CAArB,EAAwB;AACpB,aAAKhB,aAAL,CAAmB,KAAK9U,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2U,qBAA/C,EAAsE,CAAtE,EAAyEhO,KAAK,CAACiO,SAA/E;AACH,OAFD,MAGK;AACD,aAAKlB,aAAL,CAAmB,KAAK9U,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2U,qBAA/C,EAAsE,CAAtE,EAAyEhO,KAAK,CAACiO,SAA/E;AACH;AACJ,KAvnGkB;;AAEf,UAAM3Q,WAAW,GAAG;AAAEgH,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAChC1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CADwB,GACU;AAD3B,KAApB;AAGA,UAAMzQ,YAAY,GAAG;AAAE6G,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAC9B1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CADsB,GACY;AAD7B,KAArB;AAGA,UAAMtQ,cAAc,GAAG;AAAE0G,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAC5B1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CADoB,GACc;AAD/B,KAAvB;AAGA,UAAMnQ,SAAS,GAAE;AAACuG,MAAAA,IAAI,EAAE,CAAP;AAAUC,MAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAC7B1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CADqB,GACa;AAD7B,KAAjB;AAGA,SAAKtW,KAAL,GAAa;AACT0M,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,IAA6B,KAAKjW,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,CAA1B,CAF1B;AAGTnS,MAAAA,qBAAqB,EAAE,EAHd;AAITtD,MAAAA,UAAU,EAAE,IAAIyG,GAAJ,EAJH;AAKThB,MAAAA,cAAc,EAAE,EALP;AAMTZ,MAAAA,WANS;AAOTG,MAAAA,YAPS;AAQTG,MAAAA,cARS;AASTG,MAAAA,SATS;AAUTnD,MAAAA,cAAc,EAAE,EAVP;AAWT;AACAkB,MAAAA,SAAS,EAAE;AAAEwI,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAA4B1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF;AAZF,KAAb;AAeA,SAAK9B,SAAL,GAAiB/a,KAAK,CAAC8c,SAAN,EAAjB;AACA,SAAKxJ,cAAL,GAAsB,IAAIxO,cAAJ,EAAtB;AAEA,SAAKiY,eAAL,GAAuB,CAAC,WAAD,EAAa,oBAAb,EAAmC,iBAAnC,EAAsD,cAAtD,EAAsE,YAAtE,EAAoF,kBAApF,EAAwG,UAAxG,EACvB,oBADuB,EACD,WADC,EACW,YADX,EACwB,qBADxB,CAAvB;AAGA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACH;;AAE8B,SAAxBC,wBAAwB,CAACtW,KAAD,EAAQL,KAAR,EAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIK,KAAK,CAACJ,KAAN,CAAY2W,YAAZ,KAA6B,EAA7B,IAAmCvW,KAAK,CAACJ,KAAN,CAAY2W,YAAZ,KAA6B5W,KAAK,CAAC4W,YAA1E,EAAwF;AACpFjd,MAAAA,KAAK,CAAC0H,IAAN,CAAWhB,KAAK,CAACJ,KAAN,CAAY2W,YAAvB;AACAvW,MAAAA,KAAK,CAACJ,KAAN,CAAY2W,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIvW,KAAK,CAACJ,KAAN,CAAY4W,KAAZ,KAAsB,EAAtB,IAA4BxW,KAAK,CAACJ,KAAN,CAAY4W,KAAZ,KAAsB7W,KAAK,CAAC6W,KAA5D,EAAmE;AAC/Dld,MAAAA,KAAK,CAACkd,KAAN,CAAYxW,KAAK,CAACJ,KAAN,CAAY4W,KAAxB;AACAxW,MAAAA,KAAK,CAACJ,KAAN,CAAY4W,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAIxW,KAAK,CAACJ,KAAN,CAAY+C,cAAZ,KAA+BsK,SAAnC,EAA8C;AAC1C,aAAO;AAAEtK,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACH;;AACD,WAAO,IAAP,CArBsC,CAsBtC;AACA;AACA;AACH;;AA0RLwE,EAAAA,iBAAiB,CAAChD,IAAD,EAAO;AACpB,UAAMsS,SAAS,GAAGtS,IAAI,IAAIA,IAAI,CAACsF,GAAL,CAAUiN,MAAD,IAAY;AAC7C,aAAO;AAAE,mBAAWA,MAAM,CAACrZ,gBAAgB,CAACsZ,KAAlB,CAAN,CAA+B,KAAK3W,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BoV,iBAAzD,CAAb;AACE,qBAAaF,MAAM,CAACrZ,gBAAgB,CAACwZ,KAAlB,CAAN,IAAkC,MAAlC,GAA2C,GAA3C,GAAiDH,MAAM,CAACrZ,gBAAgB,CAACwZ,KAAlB,CADtE;AAEG,iBAAS,OAFZ;AAEqB,sBAAc;AAFnC,OAAP;AAID,KALyB,CAA1B;AAMA,WAAOJ,SAAP;AAED;;AAsUH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAlL,EAAAA,eAAe,CAACpH,IAAD,EAAO;AAClB,QAAI2S,SAAS,GAAG,IAAhB,CADkB,CAElB;AACA;;AACA,QAAI3S,IAAI,IAAIA,IAAI,CAACpC,MAAL,GAAc,CAA1B,EAA6B;AACzBoC,MAAAA,IAAI,CAACwO,OAAL,CAAatH,QAAQ,IAAI;AACrB,YAAIA,QAAQ,CAACvB,QAAb,EAAuB;AACnB,cAAIuB,QAAQ,CAACvB,QAAT,KAAsB,KAA1B,EAAiC;AAC7BgN,YAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,SAJD,MAKK;AACDA,UAAAA,SAAS,GAAG,KAAZ,CADC,CAED;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,OAfD;AAgBH,KAjBD,MAkBK;AACD;AACAA,MAAAA,SAAS,GAAG,KAAZ,CAFC,CAGD;AACH;;AACD,WAAOA,SAAP;AACH;;AA2LDC,EAAAA,MAAM,GAAG;AACL,QAAIC,gBAAgB,GAAC,EAArB;AACA,UAAMC,QAAQ,GAAG;AACb1S,MAAAA,UAAU,EAAE,mBADC;AAEbZ,MAAAA,SAAS,EAAE,KAFE;AAGbvC,MAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAHhB;AAIbI,MAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAJd;AAIwB4B,MAAAA,SAAS,EAAE,eAJnC;AAIoD4H,MAAAA,OAAO,EAAE;AAJ7D,KAAjB;AAMA,SAAK9E,QAAL,GAAiB,KAAKvG,KAAL,CAAWsG,cAAX,CAA0B,UAA1B,KAAyC,KAAKtG,KAAL,CAAWsG,cAAX,CAA0B,UAA1B,CAA1C,IAAoF,KAAKjG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,IAA+B,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAA/I,GAA8JnI,mBAAmB,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAlB,EAA2B,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAAvD,CAAjL,GAAsP8G,SAAtQ;AACA,SAAK7G,MAAL,GAAe,KAAKzG,KAAL,CAAWsG,cAAX,CAA0B,QAA1B,KAAuC,KAAKtG,KAAL,CAAWsG,cAAX,CAA0B,QAA1B,CAAxC,IAAgF,KAAKjG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,IAA+B,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAA3I,GAAwJrI,mBAAmB,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAlB,EAA2B,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAAvD,CAA3K,GAA8O4G,SAA5P;AACA,UAAMiK,KAAK,GAAG,KAAKvX,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,kBAA1B,KAAiD,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,kBAA1B,EAA8CC,YAA7G;AACA,UAAM0T,MAAM,GAAG,KAAK1U,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,mBAA1B,KAAkD,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,mBAA1B,EAA+CC,YAAhH;AACA,UAAM8L,QAAQ,GAAG,KAAK9M,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,qBAA1B,KAAoD,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,qBAA1B,EAAiDC,YAAtH;AACA,UAAM2M,WAAW,GAAG,KAAK3N,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,eAA1B,KAA8C,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,eAA1B,EAA2CC,YAA7G;AACA,UAAMkM,UAAU,GAAG,KAAKlN,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,eAA1B,KAA8C,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,eAA1B,EAA2CC,YAA5G;AACA,UAAMkQ,QAAQ,GAAG,KAAKlR,KAAL,CAAWa,UAAX,CAAsBC,GAAtB,CAA0B,aAA1B,KAA4C,KAAKd,KAAL,CAAWa,UAAX,CAAsBE,GAAtB,CAA0B,aAA1B,EAAyCC,YAAtG;AAEA,UAAMwW,QAAQ,GAAG;AACb5S,MAAAA,UAAU,EAAE,mBADC;AAEb6S,MAAAA,cAAc,EAAE,mBAFH;AAGb1U,MAAAA,eAAe,EAAEuK,SAHJ;AAIbtJ,MAAAA,SAAS,EAAE,QAJE;AAKb;AACAnC,MAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QANd;AAObwC,MAAAA,YAAY,EAAEkT,KAPD;AAQbjJ,MAAAA,iBAAiB,EAAE,KAAKtO,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCkJ,iBARpE;AASb7M,MAAAA,UAAU,EAAC,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UATf;AAUb6G,MAAAA,QAAQ,EAAC,KAAKjI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8E,QAVxB;AAWbgC,MAAAA,MAAM,EAAC,KAAKlI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgF,MAXtB;AAYb1E,MAAAA,YAAY,EAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,GAA+C,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAA5F,GAA2GtE,iBAAiB,CAACuE,EAZ/H;AAabE,MAAAA,eAAe,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,GAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAAqHzE,iBAAiB,CAACuE,EAb3I;AAcbqM,MAAAA,mBAAmB,EAAG,KAAKrO,KAAL,CAAWkH,oBAAX,IAAmC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAnE,IAA2E3H,iBAAiB,CAACuE,EAdtG;AAebkG,MAAAA,UAAU,EAAI,KAAK7H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,GAAsD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoDlG,kBAA1G,GAA6HxD,iBAAiB,CAACuE,EAfhJ;AAgBb+B,MAAAA,0BAA0B,EAAC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC;AAhB1C,KAAjB;AAmBA,UAAM2T,cAAc,GAAG,CACvB;AAAE,mBAAa,YAAf;AAA6B,eAAS;AAAtC,KADuB,EAEvB;AAAE,mBAAa,cAAf;AAA+B,eAAS;AAAxC,KAFuB,EAGvB;AAAE,mBAAa,WAAf;AAA4B,eAAS;AAArC,KAHuB,EAIvB;AAAE,mBAAa,oBAAf;AAAqC,eAAS;AAA9C,KAJuB,EAKvB;AAAE,mBAAa,eAAf;AAAgC,eAAS;AAAzC,KALuB,EAMvB;AAAE,mBAAa,iBAAf;AAAkC,eAAS;AAA3C,KANuB,EAOvB;AAAE,mBAAa,cAAf;AAA+B,eAAS;AAAxC,KAPuB,EAQvB;AAAE,mBAAa,qBAAf;AAAsC,eAAS;AAA/C,KARuB,EASvB;AAAE,mBAAa,UAAf;AAA2B,eAC3B,KAAKrX,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,IAAmD,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,KAAuExD,iBAAiB,CAACyD,SAA5I,GAAwJ,sBAAxJ,GACA,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,IAAmD,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,KAAuExD,iBAAiB,CAAC0D,SAA5I,GAAwJ,sBAAxJ,GACC;AAHD,KATuB,CAAvB;AAeA,QAAIwW,sBAAsB,GAAG,KAAKtX,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmW,oBAA5B,GAAmDjP,MAAM,CAAC,KAAKtI,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmW,oBAA5B,CAAiD3W,kBAAlD,CAAzD,GAAiI,IAA9J;;AAEA,QAAI,KAAKjB,KAAL,CAAWgD,cAAX,IAA6B,KAAKhD,KAAL,CAAWgD,cAAX,CAA0B,oBAA1B,MAAoDsK,SAArF,EAAgG;AAC5FqK,MAAAA,sBAAsB,GAAG,KAAK3X,KAAL,CAAWgD,cAAX,CAA0B,oBAA1B,EAAgDoF,KAAhD,KAA0DO,MAAM,CAAC,CAAD,CAAhE,GAAsE,IAAtE,GAA6EA,MAAM,CAAC,KAAK3I,KAAL,CAAWgD,cAAX,CAA0B,oBAA1B,EAAgDoF,KAAjD,CAA5G;AACH;;AAGA,QAAI/B,GAAG,GAAG/H,wBAAwB,CAAC,KAAK+B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+E,YAA7B,EAA2C,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiF,UAAvE,EAC/B,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB4B,QADc,CAAlC;AAGD,UAAM+S,SAAS,GAAG;AACdhQ,MAAAA,UAAU,EAAE,mBADE;AAEdZ,MAAAA,SAAS,EAAE,QAFG;AAGdlB,MAAAA,eAAe,EAAE,kBAHH;AAIdS,MAAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBsD,UAJf;AAKd1B,MAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QALb;AAMdwC,MAAAA,YAAY,EAAEqQ,MANA;AAOdjT,MAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAPf;AAQdoQ,MAAAA,eAAe,EAAC0F,KARF;AASd/U,MAAAA,eAAe,EAAC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,GACA,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bc,mBAA5B,CAAgDC,eADhD,GACkE/E,iBAAiB,CAACuE,EAVtF;AAWdD,MAAAA,YAAY,EAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5E,GACA,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CC,YAD7C,GAC4DtE,iBAAiB,CAACuE,EAZ/E;AAadE,MAAAA,eAAe,EAAG,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAAnG,GAClB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgDC,eAD9B,GACgDzE,iBAAiB,CAACuE;AAdtE,KAAlB;AAkBA,UAAM6V,WAAW,GAAG;AAChBjV,MAAAA,aAAa,EAAE,aADC;AAEhBC,MAAAA,cAAc,EAAE,qBAFA;AAGhBC,MAAAA,eAAe,EAAE,kBAHD;AAIhBI,MAAAA,QAAQ,EAAE,4CAJM;AAMhBE,MAAAA,gBAAgB,EAAE;AACdmD,QAAAA,QAAQ,EAAGF,GAAG,CAACE,QADD;AAEdE,QAAAA,MAAM,EAAGJ,GAAG,CAACI,MAFC;AAGd5E,QAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B,QAHb;AAIdkC,QAAAA,0BAA0B,EAAC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsC,0BAJzC;AAKdsK,QAAAA,mBAAmB,EAAC,KAAKrO,KAAL,CAAWkH,oBAAX,GAAkC,KAAKlH,KAAL,CAAWkH,oBAAX,CAAgC9B,IAAhC,CAAqCiJ,mBAAvE,GAA6F5Q,iBAAiB,CAACuE,EALrH;AAMdkG,QAAAA,UAAU,EAAC,KAAKlI,KAAL,CAAWmI,iBAAX,GAA+B,KAAKnI,KAAL,CAAWmI,iBAAX,CAA6BC,KAA5D,GAAoE3K,iBAAiB,CAAC0P,KANnF;AAOd3K,QAAAA,eAAe,EAAC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,GAAgD,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,CAA8CrE,eAA9F,GAAgH/E,iBAAiB,CAACuE,EAPpI,CAQd;AACA;AACA;;AAVc,OANF;AAkBhBP,MAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBwB,UAlBb;AAmBhB;AACA+U,MAAAA,eAAe,EAAE,KAAKA;AApBN,KAApB;AAuBA,SAAKsB,cAAL,GAAsB,CAClB;AACI,eAAS,UADb;AAEI,eAASzR,GAAG,CAAC0R;AAFjB,KADkB,EAIf;AACC,eAAS,QADV;AAEC,eAAS1R,GAAG,CAAC2R;AAFd,KAJe,EAQlB;AACA;AACA;AACA;AACA;AACI,eAAS,sBADb;AAEI,eAAS,KAAK3X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,IAAgD,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CmW,YAA7F,GAA4G,KAAK5X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BK,gBAA5B,CAA6CmW,YAAzJ,GAAwK,IAFrL,CAGI;AACA;;AAJJ,KAZkB,EAkBlB;AACI,eAAS,yBADb;AAEI,eAAS,KAAK5X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,IAAmD,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgD+P,eAAnG,GAAqH,KAAK3R,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BQ,mBAA5B,CAAgD+P,eAArK,GAAuL;AAFpM,KAlBkB,EAsBlB;AACI,eAAS,iBADb;AAEI,eAAS,KAAK3R,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,IAAuD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoD+Q,aAA3G,GAA2H,KAAK7X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0F,uBAA5B,CAAoD+Q,aAA/K,GAA+L;AAF5M,KAtBkB,CA0BlB;AACA;AACA;AACA;AA7BkB,KAAtB;AAgCA,wBACA,uDAOI;AAAK,MAAA,SAAS,EAAC,6DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAE,KAAKJ,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADA,eAKI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ,oBAAC,UAAD;AACI,MAAA,UAAU,EAAE,KAAKzX,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B0W,YAA5B,IAA6C,KAAK9X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2W,WAA5B,IAA2C,EADxG;AAEI,MAAA,cAAc,EAAE,KAAK/X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAFhD;AAGI,MAAA,eAAe,EAAC,kBAHpB;AAII,MAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiB4B,QAJ/B;AAKI,MAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UALjC,CAMI;AANJ;AAOI,MAAA,eAAe,EAAG4W,KAAD,IAAW,KAAKhY,KAAL,CAAW1E,8BAAX,CAA0C0c,KAA1C,EAAiD,KAAKhY,KAAL,CAAWJ,KAAX,CAAiB4B,QAAlE,EAA4E,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAA7F,CAPhC;AAQI,MAAA,UAAU,EAAI6V,QARlB;AASI,MAAA,UAAU,EAAE,KAAKjX,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAThB,CAUI;AAVJ;AAWI,MAAA,SAAS,EAAC,YAXd;AAYI,MAAA,UAAU,EAAC,WAZf;AAaI,MAAA,WAAW,EAAC,iBAbhB;AAcI,MAAA,gBAAgB,EAAC,qBAdrB;AAeI,MAAA,UAAU,EAAC,eAff;AAgBI,MAAA,QAAQ,EAAC,mBAhBb;AAiBI,MAAA,cAAc,EAAE,KAjBpB;AAkBI,MAAA,UAAU,EAAE,KAlBhB,CAmBI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BJ;AA2BI,MAAA,UAAU,EAAE,IA3BhB;AA4BI,MAAA,eAAe,EAAE,KA5BrB;AA6BI,MAAA,cAAc,EAAE,IA7BpB;AA8BI,MAAA,UAAU,EAAE,KAAK8W,UA9BrB;AA+BI,MAAA,WAAW,EAAE,KAAKC,WA/BtB;AAgCI,MAAA,cAAc,EAAE,KAAKvD,cAhCzB;AAiCI,MAAA,gBAAgB,EAAE,KAAK3U,KAAL,CAAWhE,gBAjCjC;AAkCI,MAAA,cAAc,EAAC,cAlCnB;AAmCI,MAAA,SAAS,EAAE,KAAKmY,SAnCpB;AAoCI,MAAA,WAAW,EAAEqD,WApCjB;AAqCI,MAAA,aAAa,EAAE,KAAKxX,KAAL,CAAWJ,KAAX,CAAiBuY,aArCpC,CAsCI;AACA;AACD;AAxCH;AAyCI,MAAA,KAAK,EAAEjB,KAzCX;AA0CI,MAAA,cAAc,EAAE,IA1CpB;AA2CI,MAAA,qBAAqB,EAAE,KAAKvX,KAAL,CAAWmE,qBA3CtC;AA4CI,MAAA,UAAU,EAAE,KAAK8Q,UA5CrB;AA6CI,MAAA,SAAS,EAAE,MAAM,KAAK5U,KAAL,CAAW9D,eAAX,CAA2Bib,QAA3B,CA7CrB,CA8CG;AA9CH;AA+CI,MAAA,aAAa;AAAA;AACT;AACA,0BAAC,WAAD;AAAa,QAAA,SAAS,EAAC,qCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,4CAAlB;AAA+D,QAAA,IAAI,EAAC,QAApE;AACI,oBAAU,KAAKnX,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADd;AAEI,oBAAS,qBAFb;AAGI,QAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyClB,KAAzC,MAAoD,CAAC,CAHjE;AAII,QAAA,OAAO,EAAE,MAAM,KAAKlX,KAAL,CAAWlF,6BAAX,CAAyCqc,QAAzC,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE1c,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CAFJ,eAUI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,kCAAlB;AAAqD,QAAA,OAAO,EAAC,MAA7D;AACI,oBAAU,KAAKuF,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADd;AAEI,oBAAS,qBAFb,CAGI;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEzG,MAAvB;AAA+B,QAAA,KAAK,EAAE;AAAE,mBAAS;AAAX,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CAVJ,CAFS,CAqBT;AApER;AAsEI,MAAA,eAAe,EAAE,CACb;AACI,mCAAa,oBAAC,mBAAD;AACb,UAAA,QAAQ,EAAE,KAAKiF,KAAL,CAAWsG,cAAX,CAA0B,UAA1B,KAAwCgH,SAAxC,GACVjP,mBAAmB,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAlB,EAA2B,KAAK7B,KAAL,CAAWsG,cAAX,CAA0B,UAA1B,CAA3B,CADT,GAC8E,KAAKC,QAFhF;AAGb,UAAA,MAAM,EAAE,KAAKvG,KAAL,CAAWsG,cAAX,CAA0B,QAA1B,KAAsCgH,SAAtC,GACRjP,mBAAmB,CAAC,KAAKgC,KAAL,CAAWJ,KAAX,CAAiB4B,QAAlB,EAA2B,KAAK7B,KAAL,CAAWsG,cAAX,CAA0B,QAA1B,CAA3B,CADX,GAC8E,KAAKG,MAJ9E;AAKb,UAAA,UAAU,EAAE,KAAKzG,KAAL,CAAW0Y,UAAX,IAAyB,EALxB;AAMb,UAAA,eAAe,EAAE,KAAKrY,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoF,iBAA5B,IAAiD,EANrD;AAOb,UAAA,OAAO,EAAE,KAAK7G,KAAL,CAAW2Y,gBAAX,IAA+B,EAP3B;AAQb,UAAA,YAAY,EAAE,KAAKtY,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwG,uBAA5B,IAAuD,EARxD;AASb,UAAA,UAAU,EAAE,KAAKjI,KAAL,CAAWnC,mBAAX,IAAkC,EATjC;AAUb,UAAA,eAAe,EAAE,KAAKmC,KAAL,CAAWkC,eAAX,IAA8B,EAVlC;AAWb,UAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoH,0BAA5B,IAA0D,EAXzE;AAYb,UAAA,YAAY,EAAE,KAAK7I,KAAL,CAAW0O,cAAX,IAA6B,EAZ9B;AAab,UAAA,iBAAiB,EAAE,KAAK1O,KAAL,CAAWmI,iBAAX,IAAgC,EAbtC;AAcb,UAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWyI,qBAAX,IAAoC,EAdxC;AAeb,UAAA,oBAAoB,EAAE,KAAKzI,KAAL,CAAWkH,oBAAX,IAAmC,EAf5C;AAgBb,UAAA,WAAW,EAAE,KAAKlH,KAAL,CAAW4Y,WAAX,IAA0B,EAhB1B;AAiBb,UAAA,cAAc,EAAE,KAAKvY,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwH,gBAA5B,IAAgD,EAjBnD;AAkBb,UAAA,IAAI,EAAE,KAAKjJ,KAAL,CAAW6Y,UAAX,IAAyB,EAlBlB;AAmBb,UAAA,SAAS,EAAE,KAAKxY,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ,mBAA5B,IAAmD,EAnBjD;AAoBb,UAAA,mBAAmB,EAAE,KAAKlK,mBApBb;AAqBb,UAAA,gBAAgB,EAAE,KAAK2L,gBArBV;AAsBb,UAAA,sBAAsB,EAAE,KAAKrK,sBAtBhB;AAuBb,UAAA,QAAQ,EAAE,KAAK9I,KAAL,CAAWJ,KAAX,CAAiB4B,QAvBd;AAwBb,UAAA,sBAAsB,EAAE,KAAKiX,sBAxBhB;AAyBb,UAAA,oBAAoB,EAAE,KAAK9Y,KAAL,CAAW+Y,kBAAX,IAAiC,EAzB1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADjB,OADa,CAtErB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR,CADJ,eAyGa,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGW,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAK1Y,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2W,WAA5B,IAA2C,KAAK/X,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2W,WAA5B,CAAwChW,MAAxC,GAAiD,CAA5F,IACM,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBADlC,gBAEG,uDACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDkG,UADrD,CADJ,eAII,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAG,oBAAmB,KAAKvH,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAACyD,SAAxF,GAAqG,kBAArG,GACzC,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC0D,SAAxF,GAAoG,iBAApG,GACA,KAAKd,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDT,kBAAhD,IAAsExD,iBAAiB,CAAC2D,SAAxF,GAAoG,gBAApG,GACA,mBAAoB,cAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIK,KAAKf,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDsX,mBAJrD,CADR,CADJ,eAUI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,MAAf;AAAsB,MAAA,SAAS,EAAC,oDAAhC;AACA,kBAAU,KAAK3Y,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADV,CAEA;AAFA;AAGA,MAAA,OAAO,EAAE,MAAM,KAAKnB,KAAL,CAAW7D,QAAX,CAAoB,KAAK6D,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,CAAgDE,gBAApE,EAAqF,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB4B,QAAtG,EAA+G,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAhI,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKA,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE7G,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,CAVJ,eAkBI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,mBAAf;AACI,MAAA,MAAM,EAAE,KAAKoF,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyC/D,MAAzC,MAAqD,CAAC,CADlE;AAEI,MAAA,SAAS,EAAC,kCAFd;AAGI,kBAAU,KAAKrU,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHd;AAII,MAAA,OAAO,EAAE,MAAM,KAAKmT,aAAL,CAAmBC,SAAnB,CAJnB,CAKI;AACA;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEpa,WAAvB,CACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CAlBJ;AAAA;AA+BE;AACE,wBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,uBAAf,CAA8F;AAA9F;AACI,kBAAU,KAAK6F,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADd;AAEI,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyC9K,WAAzC,MAA0D,CAAC,CAFvE;AAGI,MAAA,SAAS,EAAC,kCAHd,CAII;AAJJ;AAKI,MAAA,OAAO,EAAE,MAAM,KAAKD,qBAAL,CAA2BC,WAA3B,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9S,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CAhCJ,CA2CG;AA3CH,mBA8CI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,uBAAf;AACI,MAAA,MAAM,EAAE,KAAKmF,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyCvL,UAAzC,MAAyD,CAAC,CADtE;AAEI,MAAA,SAAS,EAAC,kCAFd;AAGI,kBAAU,KAAK7M,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHd;AAII,MAAA,OAAO,EAAE,MAAM,KAAKyL,yBAAL,CAA+BC,UAA/B,CAJnB,CAKI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAcI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAExS,aAAvB,CACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,CA9CJ,eAiEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,qBAAf;AAAqC,MAAA,SAAS,EAAC,kCAA/C;AACI,MAAA,MAAM,EAAE,KAAKsF,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyC3L,QAAzC,MAAuD,CAAC,CADpE;AAEI,kBAAU,KAAKzM,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,MAAA,OAAO,EAAE,MAAM,KAAKoL,aAAL,CAAoB,KAAKvM,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAAhD,EAAoEoL,QAApE,EAA6E,QAA7E,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAErS,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAjEJ,eA2EI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,qBAAf;AAAqC,MAAA,SAAS,EAAC,kCAA/C;AACI,MAAA,MAAM,EAAE,KAAKuF,KAAL,CAAWmE,qBAAX,CAAiCsU,OAAjC,CAAyCvH,QAAzC,MAAuD,CAAC,CADpE;AAEI,kBAAU,KAAK7Q,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd,CAGI;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEyX,MAAZ;AAAoB,MAAA,GAAG,EAAC,8BAAxB;AACC,MAAA,KAAK,EAAC,IADP;AACY,MAAA,MAAM,EAAC,IADnB;AACwB,MAAA,SAAS,EAAC,+BADlC;AAEC,MAAA,OAAO,EAAE,MAAM,KAAKhI,WAAL,CAAiB,KAAK5Q,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA7C,EAAiEwP,QAAjE,CAFhB;AAGC,oBAAW,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CA3EJ,EAuFKmG,gBAAgB,CAACjV,MAAjB,GAAwB,CAAxB,gBACG,oBAAC,aAAD;AACI,MAAA,GAAG,EAAE,IADT;AAEI,MAAA,IAAI,EAAEiV,gBAFV;AAGI,MAAA,MAAM,EAAE,IAHZ;AAII,MAAA,QAAQ,EAAE,IAJd;AAKI,MAAA,UAAU,EAAC,0BALf;AAMI,MAAA,OAAO,EAAC,OANZ;AAOI,MAAA,aAAa,EAAGjP,KAAD,IAAW,KAAK8N,YAAL,CAAkB9N,KAAlB,CAP9B;AAQI,MAAA,qBAAqB,EAAE,KAAKpI,KAAL,CAAWmE,qBARtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAYD,EAnGJ,CAVJ,CADJ,CAJJ,CADJ,eA2HI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACC,MAAA,SAAS,EAAE,KAAK9D,KAAL,CAAWJ,KAAX,CAAiBoF,cAAjB,GAAkC,KAAKhF,KAAL,CAAWJ,KAAX,CAAiBoF,cAAnD,GAAoE,YADhF;AAEC,MAAA,SAAS,EAAE,KAAK+B,SAAL,EAFZ;AAE8B,MAAA,WAAW,EAAE,KAAKnC,WAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADH,CADH,CADJ,CA3HJ,CAFH,GA6IK,EA9Id,CADA,CAHX,CAzGb,CALJ,CAPJ,EAuRQ,KAAK5E,KAAL,CAAWJ,KAAX,CAAiB0E,SAAjB,gBACI,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKtE,KAAL,CAAWJ,KAAX,CAAiB0E,SAD3B;AAEI,MAAA,IAAI,EAAE,IAFV;AAGI,MAAA,UAAU,EAAE,KAAK4M,UAHrB;AAII,MAAA,SAAS,EAAE,KAAKlR,KAAL,CAAWJ,KAAX,CAAiB+D,SAJhC;AAKI,MAAA,UAAU,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBsD,UALjC;AAMI,MAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,cAA7B,GAA8C,KAAK3D,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA9C,GACV,KAAKnB,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,UAA7B,IAA2C,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,MAAxE,IAAkF,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,UAA/G,GAA2H,KAAK3D,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA3H,GACA,KAAKnB,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA6B,iBAA7B,GAAiD,KAAK3D,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAjD,GACA,KAAKnB,KAAL,CAAWJ,KAAX,CAAiB2E,UATvB;AAUI,MAAA,WAAW,EAAE,KAAKqP,WAVtB;AAWI,MAAA,KAAK,EAAE,KAAK5T,KAAL,CAAWJ,KAAX,CAAiBwE,SAX5B;AAYI,MAAA,aAAa,EAAE,KAAKoQ,aAZxB;AAaI,MAAA,YAAY,EAAE,KAAKxU,KAAL,CAAWJ,KAAX,CAAiB2W,YAbnC;AAcI,MAAA,WAAW,EAAE,KAAKvW,KAAL,CAAWnF,WAd5B;AAeI,MAAA,cAAc,EAAE,KAAK8E,KAAL,CAAWgD,cAAX,IAA6B,EAfjD;AAgBI,MAAA,eAAe,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAA/B,IAA2C,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA8B,QAAzE,GAChB,KAAK1D,oBADW,CAEjB;AACA;AACA;AACA;AALiB,QAMd,KAAKD,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,iBAA/B,GACA,KAAKvD,oBADL,GAEC,EAxBR;AA0BI,MAAA,gBAAgB,EAAE,KAAKT,KAAL,CAAWkZ,gBA1BjC;AA2BI,MAAA,MAAM,EAAE,KAAK7Y,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,MAA/B,GAAwC,IAAxC,GAA+C,KA3B3D;AA4BI,MAAA,YAAY,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBwE,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKpE,KAAL,CAAWJ,KAAX,CAAiB+D,SAAnC;AACI,QAAA,eAAe,EAAE,KAAKuO,eAD1B;AAEI,QAAA,UAAU,EAAE,KAAKlS,KAAL,CAAWJ,KAAX,CAAiBsD,UAFjC;AAGI,QAAA,cAAc,EAAE,KAAKvD,KAAL,CAAWgD,cAAX,IAA6B,EAHjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAMT,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAA/B,IAA2C,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,QAA1E,gBACD,oBAAC,gBAAD;AACI,QAAA,cAAc,EAAE,KAAKhE,KAAL,CAAWgD,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAKuP,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKd,aAHxB;AAII,QAAA,sBAAsB,EAAE,KAAKY,sBAJjC;AAKI,QAAA,gBAAgB,EAAE,KAAKmB,gBAL3B;AAMI,QAAA,IAAI,EAAE,KAAKxT,KAAL,CAAW6Y,UAAX,IAAyB,EANnC;AAOI,QAAA,0BAA0B,EAAE,KAAK7Y,KAAL,CAAWqU,oBAP3C;AAQI,QAAA,kBAAkB,EAAE,KAAKrU,KAAL,CAAWmZ,kBARnC;AASI,QAAA,UAAU,EAAE,KAAKnZ,KAAL,CAAWoZ,UAT3B;AAUI,QAAA,kBAAkB,EAAE,KAAKpZ,KAAL,CAAWsU,kBAVnC;AAWI,QAAA,eAAe,EAAE,KAAKtU,KAAL,CAAWqZ,eAXhC;AAYI,QAAA,uBAAuB,EAAE,KAAKrZ,KAAL,CAAWsZ,uBAZxC;AAaI,QAAA,SAAS,EAAE,KAAKtZ,KAAL,CAAW+R,mBAAX,IAAkC,EAbjD;AAcI,QAAA,OAAO,EAAE,KAAK/R,KAAL,CAAWuZ,OAAX,IAAsB,EAdnC;AAeI,QAAA,YAAY,EAAE,KAAKvZ,KAAL,CAAWwZ,YAAX,IAA2B,EAf7C;AAgBI,QAAA,eAAe,EAAE,KAAKxZ,KAAL,CAAW4R,eAAX,IAA8B,EAhBnD;AAiBI,QAAA,aAAa,EAAE,KAAKvR,KAAL,CAAWJ,KAAX,CAAiBwZ,aAAjB,IAAkC,EAjBrD;AAkBI,QAAA,gBAAgB,EAAE,KAAKpZ,KAAL,CAAWJ,KAAX,CAAiByZ,uBAAjB,IAA4C,EAlBlE;AAmBI,QAAA,YAAY,EAAE,KAAKrZ,KAAL,CAAWJ,KAAX,CAAiB0Z,YAAjB,IAAiC,EAnBnD;AAoBI,QAAA,YAAY,EAAE,KAAKtZ,KAAL,CAAWJ,KAAX,CAAiB2Z,YAAjB,IAAiC,EApBnD;AAqBI,QAAA,qBAAqB,EAAE,KAAKvZ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BC,mBAA5B,IAAmD,EArB9E;AAsBI,QAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiB+D,SAtBhC;AAuBI,QAAA,UAAU,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBsD,UAvBjC;AAwBI,QAAA,QAAQ,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiB4B,QAxB/B;AAyBI,QAAA,oBAAoB,EAAE,KAAK7B,KAAL,CAAWoS,oBAzBrC;AA0BI,QAAA,kBAAkB,EAAE,KAAKS,kBA1B7B;AA2BI,QAAA,sBAAsB,EAAE,KAAKQ,sBA3BjC;AA4BI,QAAA,2BAA2B,EAAE,KAAKhT,KAAL,CAAWJ,KAAX,CAAiB4Z,2BA5BlD;AA6BI,QAAA,OAAO,EAAE,KAAK7Z,KAAL,CAAW8Z,OA7BxB;AA8BI,QAAA,eAAe,EAAE,KAAK9Z,KAAL,CAAWoU,eA9BhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GAiCA,KAAK/T,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,cAA/B,gBACD,oBAAC,SAAD;AACI,QAAA,eAAe,EAAE,KAAKuO,eAD1B;AAEI,QAAA,oBAAoB,EAAE,KAAKwH,oBAF/B;AAGI,QAAA,aAAa,EAAE,KAAKtI,aAHxB;AAII,QAAA,gBAAgB,EAAE,KAAK+B,gBAJ3B;AAKI,QAAA,QAAQ,EAAE,KAAKnT,KAAL,CAAWwB,QALzB;AAMI,QAAA,mBAAmB,EAAE,KAAKxB,KAAL,CAAW2Z,mBANpC;AAOI,QAAA,WAAW,EAAE,KAAK3Z,KAAL,CAAW4Z,WAP5B;AAQI,QAAA,aAAa,EAAE,KAAK5Z,KAAL,CAAW6Z,aAR9B;AASI,QAAA,sBAAsB,EAAE,KAAKC,sBATjC;AAUI,QAAA,mBAAmB,EAAE,KAAK9Z,KAAL,CAAWiT,mBAVpC;AAWI,QAAA,OAAO,EAAE,KAAKtT,KAAL,CAAW4J,OAAX,IAAsB,EAXnC;AAYI,QAAA,qBAAqB,EAAE,KAAKL,qBAZhC;AAaI,QAAA,eAAe,EAAE,KAAKiC,eAb1B;AAcI,QAAA,kBAAkB,EAAE,KAAKxL,KAAL,CAAWoa,kBAAX,IAAiC,EAdzD;AAeI,QAAA,0BAA0B,EAAE,KAAKC,0BAfrC;AAgBI,QAAA,oBAAoB,EAAE,KAAKC,oBAhB/B,CAiBI;AAjBJ;AAkBI,QAAA,qBAAqB,EAAE,KAAKja,KAAL,CAAW8D,qBAlBtC;AAmBI,QAAA,UAAU,EAAE,KAAK9D,KAAL,CAAWQ,UAnB3B;AAoBI,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAWkD,UApB3B;AAqBI,QAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWuE,UArB3B;AAsBI,QAAA,YAAY,EAAE,KAAK5E,KAAL,CAAWyK,YAtB7B;AAuBI,QAAA,eAAe,EAAE,KAAKzK,KAAL,CAAW0K,eAvBhC;AAwBI,QAAA,yBAAyB,EAAE,KAAK6P,yBAxBpC;AAyBI,QAAA,kBAAkB,EAAE,KAAKla,KAAL,CAAWma,kBAzBnC;AA0BI,QAAA,kBAAkB,EAAE,KAAKna,KAAL,CAAWoa,kBA1BnC;AA2BI,QAAA,kBAAkB,EAAE,KAAKpa,KAAL,CAAWqa,kBA3BnC;AA4BI,QAAA,cAAc,EAAI,KAAK1a,KAAL,CAAWkC,eAAX,IAA8B,KAAKlC,KAAL,CAAWkC,eAAX,CAA2BkD,IAA3B,CAAgCD,cA5BpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GA+BD,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,UAA/B,IAA6C,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,UAA5E,gBACD,oBAAC,gBAAD;AACK,QAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB4B,QADhC;AAEK,QAAA,SAAS,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB+D,SAFjC;AAGK,QAAA,gBAAgB,EAAE,KAAKwP,gBAH5B;AAIK,QAAA,cAAc,EAAE,KAAKxT,KAAL,CAAWgD,cAJhC;AAKK,QAAA,eAAe,EAAE,KAAKuP,eAL3B;AAMK,QAAA,WAAW,EAAE,KAAKlS,KAAL,CAAWJ,KAAX,CAAiBuO,WAAjB,IAAgC,EANlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GASA,KAAKnO,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,MAA/B,gBACD,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,oBAAC,QAAD;AACG,QAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB4B,QAD9B;AAEG,QAAA,kBAAkB,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkZ,kBAFnD;AAGG,QAAA,cAAc,EAAEjD,cAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADA,CADC,GAUC,KAAKrX,KAAL,CAAWJ,KAAX,CAAiB+D,SAAjB,KAA+B,iBAA/B,gBACF,oBAAC,cAAD;AACK,QAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB4B,QADhC;AAEK,QAAA,SAAS,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB+D,SAFjC;AAGK,QAAA,gBAAgB,EAAE,KAAKhE,KAAL,CAAW4a,gBAHlC;AAIK,QAAA,oBAAoB,EAAE,KAAK5a,KAAL,CAAWsQ,oBAJtC;AAKK,QAAA,wBAAwB,EAAE,KAAKtQ,KAAL,CAAWuN,wBAL1C;AAMK,QAAA,aAAa,EAAE,KAAKkE,aANzB;AAOK,QAAA,gBAAgB,EAAE,KAAKzR,KAAL,CAAWqN,gBAPlC;AAQK,QAAA,UAAU,EAAI,KAAKhN,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CARnB;AASK,QAAA,eAAe,EAAG,KAAKqK,eAT5B;AAUK,QAAA,QAAQ,EAAE,KAAK7L,KAAL,CAAW6a,QAV1B;AAWK,QAAA,iBAAiB,EAAE,KAAK7a,KAAL,CAAW8a,iBAXnC;AAYK,QAAA,OAAO,EAAE,KAAK1N,OAZnB;AAaK,QAAA,eAAe,EAAE,KAAKmF,eAb3B;AAcK,QAAA,WAAW,EAAE,KAAKlS,KAAL,CAAWJ,KAAX,CAAiBuO,WAAjB,IAAgC,EAdlD;AAeK,QAAA,QAAQ,EAAI,KAAKnO,KAAL,CAAWJ,KAAX,CAAiBqM,QAflC;AAgBK,QAAA,yBAAyB,EAAE,KAAKtM,KAAL,CAAWiQ,yBAhB3C;AAiBK,QAAA,qBAAqB,EAAE,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAjBxD;AAkBK,QAAA,UAAU,EAAE,KAAKtQ,KAAL,CAAWJ,KAAX,CAAiB8a,UAlBlC;AAmBK,QAAA,SAAS,EAAE,KAAK1a,KAAL,CAAWJ,KAAX,CAAiB+a,SAnBjC;AAoBK,QAAA,WAAW,EAAE,KAAK/P,WApBvB;AAqBK,QAAA,QAAQ,EAAE,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBgb,QArBhC;AAsBK,QAAA,SAAS,EAAE,KAAK5a,KAAL,CAAWJ,KAAX,CAAiBoF,cAtBjC;AAuBK,QAAA,aAAa,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiBib,aAvBrC;AAwBK,QAAA,YAAY,EAAE,KAAK7a,KAAL,CAAWJ,KAAX,CAAiBoM,YAxBpC;AAyBK,QAAA,cAAc,EAAE,KAAKrM,KAAL,CAAWgD,cAzBhC;AA0BK,QAAA,YAAY,EAAE,KAAKmY,YA1BxB;AA2BK,QAAA,aAAa,EAAE,KAAK9a,KAAL,CAAWJ,KAAX,CAAiBsM,aA3BrC;AA4BK,QAAA,UAAU,EAAE,KAAKgF,UA5BtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADE,GA8BC,EAnJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAuJM,EA9ad,EAibK,KAAKvR,KAAL,CAAWqR,gBAAX,GAA8B,KAAK+J,YAAL,EAA9B,GAAoD,EAjbzD,CADA;AAqbH;;AAymBDC,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAE9B,QAAI;AAACnX,MAAAA,qBAAD;AAAwBtD,MAAAA,UAAxB;AAAoCmC,MAAAA,cAApC;AAAqDuY,MAAAA,UAArD;AACCnB,MAAAA,kBADD;AAECoB,MAAAA,gBAFD;AAEmBtX,MAAAA,SAFnB;AAE8BuX,MAAAA,YAF9B;AAE4CC,MAAAA,YAF5C;AAGCC,MAAAA,WAHD;AAGaC,MAAAA,oBAHb;AAGmClD,MAAAA,UAHnC;AAG+CC,MAAAA,gBAH/C;AAIC9a,MAAAA,mBAJD;AAIqB6Q,MAAAA,cAJrB;AAIqCkK,MAAAA,WAJrC;AAIkDC,MAAAA,UAJlD;AAKCpQ,MAAAA,qBALD;AAKuBiE,MAAAA,IALvB;AAK6BC,MAAAA,IAL7B;AAMCkP,MAAAA,QAND;AAMWC,MAAAA,QANX;AAMoBxV,MAAAA,cANpB;AAMmC6S,MAAAA,kBANnC;AAMsD9E,MAAAA,oBANtD;AAOCgF,MAAAA,eAPD;AAOiBD,MAAAA,UAPjB;AAO4B9E,MAAAA,kBAP5B;AAO+CvC,MAAAA,mBAP/C;AAOmE7P,MAAAA,eAPnE;AAQCoX,MAAAA,uBARD;AAQyBC,MAAAA,OARzB;AAQiC3H,MAAAA,eARjC;AAQiDhI,MAAAA,OARjD;AAQyDa,MAAAA,YARzD;AASCC,MAAAA,eATD;AASiBxD,MAAAA,oBATjB;AASsCiB,MAAAA,iBATtC;AASwD2R,MAAAA,OATxD;AAUC1F,MAAAA,eAVD;AAUiB2H,MAAAA,cAVjB;AAUgCC,MAAAA,iBAVhC;AAUkDC,MAAAA,YAAY,GAAG,EAVjE;AAWCxU,MAAAA,eAXD;AAWiByU,MAAAA,kBAXjB;AAWoCxU,MAAAA,mBAXpC;AAWwDkT,MAAAA,gBAXxD;AAYCtK,MAAAA,oBAZD;AAYsBuK,MAAAA,QAZtB;AAY+BxN,MAAAA,gBAZ/B;AAYgDE,MAAAA,wBAZhD;AAaCuN,MAAAA,iBAbD;AAamB7K,MAAAA,yBAbnB;AAa6CiL,MAAAA,aAb7C;AAcC7O,MAAAA,YAdD;AAccxC,MAAAA,gBAdd;AAc+BsS,MAAAA,iBAd/B;AAciD3C,MAAAA,YAdjD;AAc8DpH,MAAAA,oBAd9D;AAcmFgK,MAAAA;AAdnF,QAcoG,KAAKpc,KAd7G;AAeA,QAAIqc,cAAc,GAAG,KAArB;AACA,QAAIC,IAAI,GAAG,KAAX;AACAzS,IAAAA,gBAAgB,GAAC,EAAjB;AACAD,IAAAA,OAAO,GAAE,EAAT;;AAEA,QAAI,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B5D,mBAA5B,IACA,KAAKwC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B5D,mBAA5B,KAAoDyd,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B5D,mBADvF,EAC4G;AACxG,UAAIqG,SAAS,GAAG;AACZwI,QAAAA,IAAI,EAAE,CADM;AACHC,QAAAA,IAAI,EAAE,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,GAA4B1P,QAAQ,CAAC,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBqW,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CADzE,CAEZ;;AAFY,OAAhB;AAIAgG,MAAAA,IAAI,GAAG,IAAP;AACH;;AAED,QAAI,KAAKjc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,KAAgC6Z,aAAa,CAACrb,KAAd,CAAoBwB,UAAxD,EAAoE;AAChE6a,MAAAA,IAAI,GAAG,IAAP;AACAD,MAAAA,cAAc,GAAG,IAAjB;AAEA3D,MAAAA,UAAU,GAAGta,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiX,UAA5B,IAA0C,EAA3C,EAA+C,iBAA/C,EAAkE,iBAAlE,EAAqF,iBAArF,EAAwG,WAAxG,EAAqH,iBAArH,EAAwI,KAAxI,CAAhC;AACAC,MAAAA,gBAAgB,GAAGva,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkX,gBAA5B,IAAgD,EAAjD,EAAqD,cAArD,EAAqE,cAArE,EAAqF,SAArF,EAAgG,WAAhG,EAA6G,cAA7G,EAA6H,KAA7H,CAAtC;AACA9a,MAAAA,mBAAmB,GAAGO,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B5D,mBAA5B,IAAmD,EAApD,EAAwD,iBAAxD,EAA2E,iBAA3E,EAA8F,SAA9F,EAAyG,WAAzG,EAAsH,iBAAtH,EAAyI,KAAzI,CAAzC;AACA6Q,MAAAA,cAAc,GAAGtQ,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IAA8C,EAA/C,EAAmD,oBAAnD,EAAyE,eAAzE,EAAyF,SAAzF,EAAoG,WAApG,EAAiH,oBAAjH,EAAuI,KAAvI,CAApC;AACAkK,MAAAA,WAAW,GAAGxa,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmX,WAA5B,IAA2C,EAA5C,EAAgD,gBAAhD,EAAkE,mBAAlE,EAAuF,WAAvF,EAAoG,gBAApG,EAAsH,KAAtH,CAAjC;AACAC,MAAAA,UAAU,GAAGza,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoX,UAA5B,IAA0C,EAA3C,EAA+C,WAA/C,EAA4D,WAA5D,EAAyE,WAAzE,EAAsF,WAAtF,EAAmG,KAAnG,CAAhC;AACApQ,MAAAA,qBAAqB,GAAGrK,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BgH,qBAA5B,IAAqD,EAAtD,EAA0D,4BAA1D,EAAwF,cAAxF,EACvC,WADuC,EAC1B,4BAD0B,EACI,KADJ,CAA3C;AAEA0Q,MAAAA,kBAAkB,GAAC/a,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8a,kBAA5B,IAAkD,EAAnD,EAAuD,oBAAvD,EAA6E,oBAA7E,EACtC,WADsC,EACzB,oBADyB,EACH,KADG,CAAtC;AAEAnD,MAAAA,UAAU,GAAChb,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B+a,UAA5B,IAA0C,EAA3C,EAA+C,qBAA/C,EAAsE,iBAAtE,EAC9B,WAD8B,EACjB,iBADiB,EACE,KADF,CAA9B;AAEAnD,MAAAA,eAAe,GAACjb,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bgb,eAA5B,IAA+C,EAAhD,EAAoD,iBAApD,EAAuE,iBAAvE,EACnC,WADmC,EACtB,iBADsB,EACH,KADG,CAAnC;AAEAlD,MAAAA,OAAO,GAACnb,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bib,OAA5B,IAAuC,EAAxC,EAA4C,cAA5C,EAA4D,cAA5D,EAC3B,WAD2B,EACd,cADc,EACE,KADF,CAA3B;AAEA5C,MAAAA,OAAO,GAAC1b,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqY,OAA5B,IAAuC,EAAxC,EAA4C,cAA5C,EAA4D,cAA5D,EAC3B,WAD2B,EACd,cADc,EACE,KADF,CAA3B;AAEAc,MAAAA,gBAAgB,GAACxc,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmZ,gBAA5B,IAAgD,EAAjD,EAAqD,kBAArD,EAAyE,kBAAzE,EACpC,WADoC,EACvB,kBADuB,EACH,KADG,CAApC;AAEAC,MAAAA,QAAQ,GAACzc,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BoZ,QAA5B,IAAwC,EAAzC,EAA6C,eAA7C,EAA8D,eAA9D,EAC5B,WAD4B,EACf,eADe,EACE,KADF,CAA5B;AAEAC,MAAAA,iBAAiB,GAAC1c,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BqZ,iBAA5B,IAAiD,EAAlD,EAAsD,0BAAtD,EAAkF,cAAlF,EACrC,WADqC,EACxB,0BADwB,EACI,KADJ,CAArC;AAEAtB,MAAAA,YAAY,GAACpb,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bkb,YAA5B,IAA4C,EAA7C,EAAiD,iBAAjD,EAAoE,eAApE,EAChC,WADgC,EACnB,iBADmB,EACA,KADA,CAAhC;AAKAjQ,MAAAA,IAAI,GAAG,KAAKrM,KAAL,CAAWJ,KAAX,CAAiByM,IAAjB,KAA0BY,SAA1B,GAAsCZ,IAAtC,GAA6C,KAAKrM,KAAL,CAAWJ,KAAX,CAAiByM,IAArE;AACAC,MAAAA,IAAI,GAAG,KAAKtM,KAAL,CAAWJ,KAAX,CAAiB0M,IAAjB,IAAyBA,IAAhC;AACAkP,MAAAA,QAAQ,GAAG,KAAKxb,KAAL,CAAWJ,KAAX,CAAiB4b,QAAjB,KAA8BvO,SAA9B,GAA0CuO,QAA1C,GAAqD,KAAKxb,KAAL,CAAWJ,KAAX,CAAiB4b,QAAjF;AACAC,MAAAA,QAAQ,GAAG,KAAKzb,KAAL,CAAWJ,KAAX,CAAiB6b,QAAjB,IAA6BA,QAAxC;AACA,UAAIc,kBAAkB,GAAG;AAAE3b,QAAAA,kBAAkB,EAAExD,iBAAiB,CAACof,OAAxC;AACrB3E,QAAAA,aAAa,EAAE,KAAK7X,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADM;AAErBsb,QAAAA,aAAa,EAAE;AAFM,OAAzB;AAGA,YAAMC,eAAe,GAAG,KAAK1c,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BiN,cAA5B,IAA8C,EAAtE;AAEA,YAAMsO,kBAAkB,GAAG3S,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAewS,eAAf,CAAX,CAA3B;AAEA,YAAM5J,KAAK,GAAG6J,kBAAkB,CAACjT,SAAnB,CAA6B3E,IAAI,IAAIA,IAAI,CAACnE,kBAAL,KAA4BxD,iBAAiB,CAACof,OAAnF,CAAd;;AACA,UAAIG,kBAAkB,CAAC5a,MAAnB,GAA4B,CAA5B,IAAiC+Q,KAAK,KAAK,CAAC,CAAhD,EAAmD;AAC/C6J,QAAAA,kBAAkB,CAAC9S,IAAnB,CAAwB0S,kBAAxB;AACH;;AAEDtW,MAAAA,cAAc,GAAG0W,kBAAjB;AACAtE,MAAAA,UAAU,GAAGA,UAAU,CAAC3X,GAAX,CAAe,YAAf,CAAb;AACA4X,MAAAA,gBAAgB,GAAGA,gBAAgB,CAAC5X,GAAjB,CAAqB,YAArB,CAAnB;AACAlD,MAAAA,mBAAmB,GAAGA,mBAAmB,CAACkD,GAApB,CAAwB,YAAxB,CAAtB;AACA2N,MAAAA,cAAc,GAAGA,cAAc,CAAC3N,GAAf,CAAmB,YAAnB,CAAjB;AACA6X,MAAAA,WAAW,GAAGA,WAAW,CAAC7X,GAAZ,CAAgB,YAAhB,CAAd;AACA8X,MAAAA,UAAU,GAAGA,UAAU,CAAC9X,GAAX,CAAe,YAAf,CAAb;AACA0H,MAAAA,qBAAqB,GAAGA,qBAAqB,CAAC1H,GAAtB,CAA0B,YAA1B,CAAxB;AACAoY,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACpY,GAAnB,CAAuB,YAAvB,CAArB;AACAqY,MAAAA,UAAU,GAACA,UAAU,CAACrY,GAAX,CAAe,YAAf,CAAX;AACAsY,MAAAA,eAAe,GAACA,eAAe,CAACtY,GAAhB,CAAoB,YAApB,CAAhB;AACAwY,MAAAA,OAAO,GAACA,OAAO,CAACxY,GAAR,CAAY,YAAZ,CAAR;AACA+Y,MAAAA,OAAO,GAACA,OAAO,CAAC/Y,GAAR,CAAY,YAAZ,CAAR;AACA6Z,MAAAA,gBAAgB,GAACA,gBAAgB,CAAC7Z,GAAjB,CAAqB,YAArB,CAAjB;AACA8Z,MAAAA,QAAQ,GAACA,QAAQ,CAAC9Z,GAAT,CAAa,YAAb,CAAT;AACA+Z,MAAAA,iBAAiB,GAACA,iBAAiB,CAAC/Z,GAAlB,CAAsB,YAAtB,CAAlB;AACAyY,MAAAA,YAAY,GAAGA,YAAY,CAACzY,GAAb,CAAiB,YAAjB,CAAf,CAjEgE,CAkEhE;;AACA6I,MAAAA,OAAO,GAAC,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmI,OAApC;AACAa,MAAAA,YAAY,GAAC,KAAb;AACAC,MAAAA,eAAe,GAAC,IAAhB;AACAxI,MAAAA,eAAe,GAAC,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAA5B,GACZ;AACIkF,QAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAA5B,CAAuDiL,eADlE;AAEI5J,QAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF,0BAA5B,CAAuD7E,eAFlE;AAGIkD,QAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsF;AAHtC,OADY,GAKR,EALR;;AAOA,UAAI,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ,mBAA5B,KAAoDuJ,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BsQ,mBAAvF,EAA4G;AACpGA,QAAAA,mBAAmB,GAAC,KAAK1R,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ,mBAA5B,GACpB;AACI9F,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ,mBAA5B,CAAgDlO,SAD3D;AAEIuE,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ,mBAA5B,CAAgDpQ,SAF3D;AAGIyD,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsQ;AAHtC,SADoB,GAKhB,EALJ;AAMA,YAAIlO,SAAS,GAAGkO,mBAAmB,CAAC3M,IAApC;AACApC,QAAAA,cAAc,GAAG,EAAC,GAAG,KAAKhD,KAAL,CAAWgD,cAAf;AAA8Ba,UAAAA,SAA9B;AAAwC,aAAGb;AAA3C,SAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AACP;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bwb,uBAA5B,KAAwD3B,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+Bwb,uBAA3F,EAAoH;AACxG3D,QAAAA,uBAAuB,GAAC,KAAKjZ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bwb,uBAA5B,GACxB;AACIhR,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bwb,uBAA5B,CAAoDC,eAD/D;AAEI9U,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bwb,uBAA5B,CAAoDE,eAF/D;AAGI/X,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Bwb;AAHtC,SADwB,GAKpB,EALJ;AAMHZ,QAAAA,cAAc,GAAG,IAAjB;AACJ;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmQ,eAA5B,KAAgD0J,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BmQ,eAAnF,EAAoG;AAChGA,QAAAA,eAAe,GAAC,KAAKvR,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmQ,eAA5B,GAChB;AACI3F,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmQ,eAA5B,CAA4CwL,YADvD;AAEIhV,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmQ,eAA5B,CAA4CyL,YAFvD;AAGIjY,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmQ;AAHtC,SADgB,GAKZ,EALJ;AAMA,YAAIwL,YAAY,GAAGxL,eAAe,CAACxM,IAAnC;AACApC,QAAAA,cAAc,GAAG,EAAC,GAAG,KAAKhD,KAAL,CAAWgD,cAAf;AAA8Boa,UAAAA,YAA9B;AAA2C,aAAGpa;AAA9C,SAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AACN;;AAEA,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6b,0BAA5B,KAA2DhC,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B6b,0BAA9F,EAA0H;AAChHjJ,QAAAA,oBAAoB,GAAC,KAAKhU,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6b,0BAA5B,GACrB;AACIrR,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6b,0BAA5B,CAAuDC,kBADlE;AAEInV,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6b,0BAA5B,CAAuDE,kBAFlE;AAGIpY,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6b;AAHtC,SADqB,GAKjB,EALJ,CADgH,CAOpH;AACA;AACA;;AACCjB,QAAAA,cAAc,GAAG,IAAjB;AACJ;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6S,kBAA5B,KAAmDgH,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B6S,kBAAtF,EAA0G;AAClGA,QAAAA,kBAAkB,GAAC,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6S,kBAA5B,GACnB;AACIrI,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6S,kBAA5B,CAA+CmJ,eAD1D;AAEIrV,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6S,kBAA5B,CAA+CoJ,eAF1D;AAGItY,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6S;AAHtC,SADmB,GAKf,EALJ;AAMA,YAAImJ,eAAe,GAAGnJ,kBAAkB,CAAClP,IAAzC;AACApC,QAAAA,cAAc,GAAG,EAAC,GAAG,KAAKhD,KAAL,CAAWgD,cAAf;AAA8Bya,UAAAA,eAA9B;AAA8C,aAAGza;AAAjD,SAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AAGP;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2Q,oBAA5B,KAAqDkJ,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B2Q,oBAAxF,EAA8G;AAC1GA,QAAAA,oBAAoB,GAAC,KAAK/R,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2Q,oBAA5B,GACrB;AACInG,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2Q,oBAA5B,CAAiDgK,aAD5D;AAEIhU,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2Q,oBAA5B,CAAiDsL,eAF5D;AAGItY,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2Q;AAHtC,SADqB,GAKjB,EALJ;AAMA,YAAIgK,aAAa,GAAGhK,oBAAoB,CAAChN,IAAzC;AACApC,QAAAA,cAAc,GAAG,EAAC,GAAG,KAAKhD,KAAL,CAAWgD,cAAf;AAA8BoZ,UAAAA,aAA9B;AAA4C,aAAGpZ;AAA/C,SAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AAGP;;AAGG,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAA1B,KAAwCkX,aAAa,CAACrb,KAAd,CAAoB4B,QAApB,CAA6BuC,SAAzE,EAAoF;AAChFD,QAAAA,qBAAqB,GAAG,EAAxB;;AACA,YAAI,KAAK9D,KAAL,CAAWJ,KAAX,CAAiBkE,qBAArB,EAA4C;AACxC,eAAK9D,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAjB,CAAuC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAjE,KAA+EuZ,MAAM,CAACC,MAAP,CAAc,KAAKvd,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAjB,CAAuC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAjE,CAAd,EAA2F0F,GAA3F,CAA+F1E,IAAI,IAC9KjB,qBAAqB,CAAC+F,IAAtB,CAA2B9E,IAAI,CAACpE,YAAhC,CAD2E,CAA/E;AAEH;;AACDH,QAAAA,UAAU,GAAG7C,aAAa,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiBkE,qBAAlB,EAAyC,KAAK9D,KAAL,CAAWJ,KAAX,CAAiB4B,QAAjB,CAA0BuC,SAAnE,CAA1B;AACA,aAAKoB,QAAL,CAAc;AAAErB,UAAAA,qBAAF;AAAyBtD,UAAAA;AAAzB,SAAd;AACAwb,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiB4d,qBAAjB,KAA2CvC,aAAa,CAACrb,KAAd,CAAoB4d,qBAAnE,EAA0F;AACtFzD,QAAAA,kBAAkB,GAAG,KAAK/Z,KAAL,CAAWJ,KAAX,CAAiB4d,qBAAtC;AACAxB,QAAAA,cAAc,GAAG,IAAjB,CAFsF,CAGvF;AACF;;AAGD,UAAG,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH,4BAA5B,KAA6DuS,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BsH,4BAA/F,EAA6H;AACzH7B,QAAAA,oBAAoB,GAAG,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH,4BAA5B,GACvB;AACIkD,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH,4BAA5B,CAAyD+U,YADpE;AAEI1V,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH,4BAA5B,CAAyDL,0BAFpE;AAGItD,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BsH;AAHtC,SADuB,GAKnB,EALJ;AAMAsT,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAG,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,KAAoD0S,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BmH,mBAAtF,EAA2G;AACvGT,QAAAA,iBAAiB,GAAG,KAAK9H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,GACpB;AACIqD,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,CAAgDsP,aAD3D;AAEI9P,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH,mBAA5B,CAAgD3H,kBAF3D;AAGImE,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BmH;AAHtC,SADoB,GAKhB,EALJ;AAMAyT,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAG,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2S,eAA5B,KAAgDkH,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B2S,eAAlF,EAAmG;AAC/FA,QAAAA,eAAe,GAAG,KAAK/T,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2S,eAA5B,GAClB;AACInI,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2S,eAA5B,CAA4CtC,YADvD;AAEI1J,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2S,eAA5B,CAA4C3R,YAFvD;AAGI2C,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B2S;AAHtC,SADkB,GAKd,EALJ;AAMA,YAAItC,YAAY,GAAGsC,eAAe,CAAChP,IAAnC;AACApC,QAAAA,cAAc,GAAG,EAAC,GAAG,KAAKhD,KAAL,CAAWgD,cAAf;AAA8B8O,UAAAA,YAA9B;AAA2C,aAAG9O;AAA9C,SAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AAEH;;AAED,UAAG,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O,oBAA5B,KAAqDgL,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B6O,oBAAvF,EAA6G;AACzGA,QAAAA,oBAAoB,GAAG,KAAKjQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O,oBAA5B,GACvB;AACIrE,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O,oBAA5B,CAAiDC,iBAD5D;AAEInI,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O,oBAA5B,CAAiDE,iBAF5D;AAGIpL,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O;AAHtC,SADuB,GAKrB,EALF;AAMAtN,QAAAA,cAAc,CAAC,mBAAD,CAAd,GAAoC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B6O,oBAA5B,CAAiDC,iBAArF;AACA8L,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L,wBAA5B,KAAyD+N,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B8L,wBAA5F,EAAsH;AAClHA,QAAAA,wBAAwB,GAAG,KAAKlN,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L,wBAA5B,GAC3B;AACItB,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L,wBAA5B,CAAqDwC,gBADhE;AAEI3H,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L,wBAA5B,CAAqDuC,gBAFhE;AAGI1K,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L;AAHtC,SAD2B,GAKzB,EALF;AAMAvK,QAAAA,cAAc,CAAC,kBAAD,CAAd,GAAmC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B8L,wBAA5B,CAAqDwC,gBAAxF;AACAsM,QAAAA,cAAc,GAAG,IAAjB;AAEH;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,KAAiDiO,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+B4L,gBAApF,EAAsG;AAClGA,QAAAA,gBAAgB,GAAG,KAAKhN,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,GACnB;AACIpB,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,CAA6C+C,aADxD;AAEIhI,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,CAA6CwC,aAFxD;AAGIzK,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L;AAHtC,SADmB,GAKjB,EALF;AAMArK,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAgC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4B4L,gBAA5B,CAA6C+C,aAA7E;AACAiM,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,KAA0DqL,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BwO,yBAA7F,EAAwH;AACpHA,QAAAA,yBAAyB,GAAG,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,GAC5B;AACIhE,UAAAA,KAAK,EAAE,KAAK5L,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,CAAsDD,YADjE;AAEI5H,UAAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,CAAsDjL,wBAFjE;AAGII,UAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO;AAHtC,SAD4B,GAK1B,EALF;AAMAjN,QAAAA,cAAc,CAAC,cAAD,CAAd,GAA+B,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,IAAyD,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,CAAsDD,YAAtD,IAAsE,IAA/H,GAClB,KAAK3P,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BwO,yBAA5B,CAAsDD,YADpC,GACmD,EADlF;AAEAqM,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,KAAsD2K,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+BkP,qBAAzF,EAAgH;AACpG;AACA3N,QAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,IACzB,KAAKtQ,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD5B,iBAAlD,IAAwE,IAD/C,GACsD,KAAK1O,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4BkP,qBAA5B,CAAkD5B,iBADxG,GAC2H,EADjK;AAEA/L,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,EAA7B;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AACX;;AAEH,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiB8d,qBAArB,EAA4C;AACtC/a,QAAAA,cAAc,GAAG,EAAjB;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAGD,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByZ,aAA5B,KAA8CI,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+ByZ,aAAjF,EAAgG;AAC5F;AACAA,QAAAA,aAAa,GAAG,KAAK7a,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByZ,aAA5B,IACH,KAAK7a,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByZ,aAA5B,IAA8C,IAD3C,GACkD,KAAK7a,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4ByZ,aAD9E,GAC6F,EAD7G;AAEAmB,QAAAA,cAAc,GAAG,IAAjB;AACF;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,KAAkCiP,aAAa,CAACrb,KAAd,CAAoBoM,YAA1D,EAAwE;AACrErJ,QAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,IACpB,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,YAAjB,IAAkC,IADd,GACqB,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,YADtC,GACoD,EADrF;AAEAgQ,QAAAA,cAAc,GAAG,IAAjB;AACF;;AAED,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiB+C,cAAjB,KAAoCsY,aAAa,CAACrb,KAAd,CAAoB+C,cAA5D,EAA4E;AACzEA,QAAAA,cAAc,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+C,cAAlC;AACAqZ,QAAAA,cAAc,GAAG,IAAjB;AACH;;AAEF,UAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Buc,aAA5B,IAA6C,KAAK3d,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Buc,aAA5B,KAA8C1C,aAAa,CAACrb,KAAd,CAAoBwB,UAApB,CAA+Buc,aAA9H,EAA6I;AACxI,cAAMC,aAAa,GAAG5T,IAAI,CAACC,KAAL,CAAW,KAAKjK,KAAL,CAAWJ,KAAX,CAAiBwB,UAAjB,CAA4Buc,aAA5B,CAC7B1a,QAD6B,CACpB8E,KADS,CAAtB;AAEA+T,QAAAA,iBAAiB,GAAC8B,aAAa,CAACC,cAAd,CAA6BC,YAA7B,GAA2CF,aAAa,CAACC,cAAd,CAA6BC,YAAxE,GAAuF,EAAzG;AACAlC,QAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBgC,aAAa,CAACC,cAAd,CAA6BE,iBAA7B,CAA+C,CAA/C,IAAoDH,aAAa,CAACC,cAAd,CAA6BE,iBAA7B,CAA+C,CAA/C,CAApD,GAAwG,EAA1H;AACArC,QAAAA,cAAc,GAAGkC,aAAa,CAACI,cAAd,GAA+BJ,aAAa,CAACI,cAA7C,GAA8D,EAA/E;AACArC,QAAAA,iBAAiB,GAAGiC,aAAa,CAACK,iBAAd,GAAkCL,aAAa,CAACK,iBAAhD,GAAoE,EAAxF;AACApC,QAAAA,kBAAkB,GAAG+B,aAAa,CAAC/B,kBAAd,GAAmC+B,aAAa,CAAC/B,kBAAjD,GAAsE,EAA3F;AACAxU,QAAAA,mBAAmB,GAAC,CAAC,GAAGwU,kBAAJ,CAApB;AACAzU,QAAAA,eAAe,GAAC,CAAC,GAAG0U,iBAAJ,EAAsB,GAAGF,YAAzB,EAAsC,GAAGF,cAAzC,EAAwD,GAAGC,iBAA3D,CAAhB;AACAK,QAAAA,cAAc,GAAG,IAAjB;AACN;AACJ,KAtU4B,CAyU9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA,QAAI,KAAKhc,KAAL,CAAWJ,KAAX,CAAiB+C,cAAjB,KAAoCsY,aAAa,CAACrb,KAAd,CAAoB+C,cAA5D,EAA4E;AACxEqZ,MAAAA,cAAc,GAAG,IAAjB,CADwE,CAExE;;AACA,WAAK7W,QAAL,CAAc;AAAExC,QAAAA,cAAc,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+C;AAAnC,OAAd;AACH;;AAID,QAAIqZ,cAAJ,EACA;AACI,WAAK7W,QAAL,CAAc;AAACrB,QAAAA,qBAAD;AAAwBtD,QAAAA,UAAxB;AAAoCmC,QAAAA,cAApC;AACVuY,QAAAA,UADU;AACEnB,QAAAA,kBADF;AAEVoB,QAAAA,gBAFU;AAEQtX,QAAAA,SAFR;AAEmBuX,QAAAA,YAFnB;AAEiCC,QAAAA,YAFjC;AAE+CC,QAAAA,WAF/C;AAGVC,QAAAA,oBAHU;AAGWlD,QAAAA,UAHX;AAGuBC,QAAAA,gBAHvB;AAGyC9a,QAAAA,mBAHzC;AAIV6Q,QAAAA,cAJU;AAIMkK,QAAAA,WAJN;AAImBC,QAAAA,UAJnB;AAI+BpQ,QAAAA,qBAJ/B;AAIqDiE,QAAAA,IAJrD;AAI2DC,QAAAA,IAJ3D;AAKVkP,QAAAA,QALU;AAKAC,QAAAA,QALA;AAKSxV,QAAAA,cALT;AAKwB+N,QAAAA,oBALxB;AAK6C8E,QAAAA,kBAL7C;AAMVC,QAAAA,UANU;AAMC9E,QAAAA,kBAND;AAMoBvC,QAAAA,mBANpB;AAMwC7P,QAAAA,eANxC;AAOVmX,QAAAA,eAPU;AAOMC,QAAAA,uBAPN;AAO8BC,QAAAA,OAP9B;AAOsC3H,QAAAA,eAPtC;AAOsDhI,QAAAA,OAPtD;AAQVa,QAAAA,YARU;AAQGC,QAAAA,eARH;AAQmBxD,QAAAA,oBARnB;AAQwCiB,QAAAA,iBARxC;AAQ0D2R,QAAAA,OAR1D;AASV1F,QAAAA,eATU;AASM2H,QAAAA,cATN;AASqBC,QAAAA,iBATrB;AASuCC,QAAAA,YATvC;AASoDxU,QAAAA,eATpD;AAUVyU,QAAAA,kBAVU;AAUSxU,QAAAA,mBAVT;AAU6BkT,QAAAA,gBAV7B;AAU8CtK,QAAAA,oBAV9C;AAWVuK,QAAAA,QAXU;AAWDxN,QAAAA,gBAXC;AAWgBE,QAAAA,wBAXhB;AAWyCuN,QAAAA,iBAXzC;AAYV7K,QAAAA,yBAZU;AAYgBiL,QAAAA,aAZhB;AAY8B7O,QAAAA,YAZ9B;AAY2CxC,QAAAA,gBAZ3C;AAaVsS,QAAAA,iBAbU;AAaQ3C,QAAAA,YAbR;AAaqBpH,QAAAA,oBAbrB;AAa0CgK,QAAAA;AAb1C,OAAd;AAcH;AACJ;;AAx/EuC;;AA0nG5C,eAAe1iB,OAAO,CAACqG,eAAD,EAAkB;AACpC/E,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACZC,EAAAA,WADY;AAEpCC,EAAAA,6BAFoC;AAENC,EAAAA,yBAFM;AAEoBC,EAAAA,4BAFpB;AAGpCC,EAAAA,uBAHoC;AAGZC,EAAAA,oBAHY;AAGSC,EAAAA,wBAHT;AAIpCC,EAAAA,uBAJoC;AAIZC,EAAAA,iBAJY;AAIMC,EAAAA,8BAJN;AAKpCC,EAAAA,kBALoC;AAKjBC,EAAAA,kBALiB;AAKEC,EAAAA,6BALF;AAMpCC,EAAAA,yBANoC;AAMVC,EAAAA,mBANU;AAMUC,EAAAA,mBANV;AAOpCC,EAAAA,wBAPoC;AAOXC,EAAAA,mBAPW;AAOSC,EAAAA,uBAPT;AAQpCC,EAAAA,gBARoC;AAQnBC,EAAAA,qBARmB;AASpCC,EAAAA,eAToC;AASpBC,EAAAA,QAToB;AASXC,EAAAA,aATW;AASGC,EAAAA,kCATH;AAUpCC,EAAAA,mCAVoC;AAUAC,EAAAA,mBAVA;AAUoBC,EAAAA,6BAVpB;AAWpCC,EAAAA,uBAXoC;AAWZC,EAAAA,0BAXY;AAWeC,EAAAA,qBAXf;AAYpCC,EAAAA,iBAZoC;AAYlBC,EAAAA,sBAZkB;AAYKC,EAAAA,qBAZL;AAY2BC,EAAAA,iBAZ3B;AAapCC,EAAAA,sBAboC;AAabC,EAAAA,sBAba;AAaUC,EAAAA,eAbV;AAa0BC,EAAAA,wBAb1B,CAcpC;;AAdoC,CAAlB,CAAP,CAeZ5D,UAAU,CAACsG,aAAD,CAfE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col,Nav,FormGroup, FormLabel,Card,Modal,Image,Button} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye,faPlay,faPlus, faSync \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport {\r\n    callService, crudMaster,updateStore,\r\n    getTestInstrumentComboService,getTestInstrumentCategory,\r\n    getInstrumentForInstCategory,getBatchCreationDetails,onActionFilterSubmit,\r\n    getProductcategoryAction,createBatchmasterAction,getSamplesForGrid,\r\n    getSelectedBatchCreationDetail,createSampleAction,deleteSampleAction,\r\n    getActiveBatchCreationService,updateBatchcreationAction,deleteBatchCreation,\r\n    batchInitiateAction,getBCRegistrationSubType,batchCompleteAction,\r\n    validateEsignCredential,filterColumnData,getBatchhistoryAction,getBatchSection,\r\n    viewInfo,getIqcSamples,getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial,batchSaveIQCActions,getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction,getBCApprovalConfigVersion,getBCRegistrationType,getTreeByMaterial,\r\n    getNewRegSpecification,cancelIQCSampleAction,batchCancelAction,batchInitiateDatePopup,\r\n    batchCompleteDatePopup,getInstrumentID,getBatchViewResultAction\r\n    //,batchTAT\r\n} from '../../actions';\r\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, \r\n    RegistrationSubType } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, \r\nformatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport BatchCreationFilter from './BatchCreationFilter';\r\nimport AddBatchCreation from './AddBatchCreation';\r\nimport AddBatchinitiate from './AddBatchinitiate';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport SampleTab from './SampleTab';\r\nimport BatchhistoryTab from './BatchhistoryTab';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AddSample from './AddSample';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ViewInfo from './ViewInfo';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialIqc from './AddMaterialIqc';\r\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\r\nimport BatchResultTab from './BatchResultTab';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BatchCreation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sampleState = { skip: 0, take: this.props.Login.settings ?\r\n             parseInt(this.props.Login.settings[14]) : 5 };\r\n        \r\n        const histortState = { skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5 };\r\n                \r\n        const iqcsampleState = { skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5 };\r\n\r\n        const viewstate ={skip: 0, take: this.props.Login.settings ?\r\n            parseInt(this.props.Login.settings[14]) : 5};\r\n                    \r\n        this.state = {\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedFilter: {},\r\n            sampleState,\r\n            histortState,\r\n            iqcsampleState,\r\n            viewstate,\r\n            selectedRecord :{},\r\n            //confirmmsg:this.ConfirmMessage.bind(this),\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.searchFieldList = [\"stestname\",\"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\",\r\n        \"stransactionstatus\", \"sdecision\",\"sbatcharno\",\"stransdisplaystatus\"];\r\n\r\n        this.sampleMandatoryFields = [];\r\n        this.copyMandatoryFields = [];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n            // if (props.Login.masterStatus !== \"\") {\r\n            //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n            //        if(props.Login.operation == \"initiate\"){\r\n            //         toast.warn(props.Login.masterStatus);\r\n            //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\r\n            //        }\r\n            //     }\r\n            // }\r\n            if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n    \r\n            if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n                toast.error(props.Login.error)\r\n                props.Login.error = \"\";\r\n            }\r\n            if (props.Login.selectedRecord === undefined) {\r\n                return { selectedRecord: {} }\r\n            }\r\n            return null;\r\n            // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n            //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n            // }\r\n        }\r\n    \r\n\r\n    batchMandatoryFields = [\r\n        { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n    ];\r\n     // const sampleColumnList = [];\r\n    \r\n    // if (props.nneedsubsample){\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n    // }\r\n    // else{\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n    // }\r\n    \r\n    completeMandatoryFields = [\r\n        { \r\n          \"idsName\":  \"IDS_BATCHCOMPLETEDATE\",\r\n          //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n          \"dataField\": \"dtransactiondate\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n    \r\n    initiateMandatoryFields = [\r\n        { \r\n          \"idsName\":  \"IDS_BATCHINITIATEDATE\",\r\n          //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n          \"dataField\": \"dtransactiondate\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n    \r\n\r\n    materialIqcMandatory = [\r\n        \r\n        { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        { \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"smaterialname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"sinventoryid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n    ]\r\n\r\n     getSamples=(selectedbatchmaster)=>{\r\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode\r\n        if(selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || \r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }else{\r\n            this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                this.props.Login.userInfo,this.props.Login.masterData,\r\n                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? \r\n\t\t\t    this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n\t\t\t    this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,addSampleID)\r\n            }\r\n     }\r\n\r\n     getIqcSamples = (SelectedBatchmaster) =>{\r\n        if(SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }else if (this.props.Login.masterData.Samples.length==0){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDIQC\" }));\r\n        }else{\r\n        let addcontrolcode=this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        let inputData={};\r\n        inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? \r\n        this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n        // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n        inputData['naddcontrolCode']=addcontrolcode;\r\n            // inputData['section']={\r\n            //         nsectioncode: SelectedBatchmaster.nsectioncode\r\n           // };\r\n            inputData['nsectioncode']=SelectedBatchmaster.nsectioncode;\r\n            inputData['userInfo']=this.props.Login.userInfo;\r\n            inputData['nbatchmastercode']= SelectedBatchmaster.nbatchmastercode;\r\n        this.props.getIqcSamples(inputData,this.props.Login.masterData);\r\n      }\r\n    }\r\n\r\n     deleteRecord = (inputData) => {\r\n\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else{\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\r\n                    fetchUrl: \"batchcreation/getSampleTabDetails\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let jsondata = inputData.selectedRecord;\r\n                const inputParam = {\r\n                    classUrl: \"batchcreation\",\r\n                    methodUrl: \"Sample\",\r\n                    postParam,\r\n                    inputData: {\r\n                        Sample: {\r\n                            \"sarno\":inputData.selectedRecord.sarno,\r\n                            \"ssamplearno\":inputData.selectedRecord.ssamplearno,\r\n                            \"stestname\":inputData.selectedRecord.stestname,\r\n                            \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode,\r\n\r\n                        },\r\n                        \"userInfo\": this.props.Login.userInfo,\r\n                        nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\r\n                        masterData : {...this.props.Login.masterData,\r\n                                      \"samples\":[]\r\n                                    },\r\n                        nbatchmastercode : inputData.selectedRecord.nbatchmastercode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                        //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                        //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                        nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                        nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                    },\r\n                    operation: inputData.operation,\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    dataState: this.state.dataState\r\n                }\r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                            operation: inputData.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.deleteSampleAction(inputParam.inputData);\r\n                }\r\n            }\r\n       }\r\n\r\n     cancelRecord = (inputData) => {\r\n\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || \r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else{\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: inputData.nbatchsampleiqccode,\r\n                    fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                const inputParam = {\r\n                    classUrl: \"batchcreation\",\r\n                    methodUrl: \"IQCSample\",\r\n                    postParam,\r\n                    inputData: {\r\n                        iqcSample:inputData.selectedRecord,\r\n                        nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\r\n                        masterData : this.props.Login.masterData,\r\n                        nbatchmastercode : inputData.selectedRecord.nbatchmastercode,\r\n                        nmaterialinventtranscode : inputData.selectedRecord.nmaterialinventtranscode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                        //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                        //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                         nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                         nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                         nsampletypecode : this.props.Login.masterData.realSampleTypeValue ? \r\n                                   this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\r\n                    },\r\n                    operation: inputData.operation,\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    dataState: this.state.dataState\r\n                }\r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, \r\n                            screenData: { inputParam,\r\n                                          masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                            operation: inputData.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.cancelIQCSampleAction(inputParam.inputData);\r\n                }\r\n            }\r\n       }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n\r\n        if (screenName == \"IDS_BATCHHISTORY\") {\r\n         \r\n                let inputData = {\r\n                    masterData:this.props.Login.masterData,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n                }\r\n                this.props.getBatchhistoryAction(inputData, true);\r\n        }else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\r\n         \r\n            let inputData = {\r\n                masterData:this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchIqcSampleAction(inputData, true);\r\n         }else if(screenName == \"IDS_RESULTS\"){\r\n            let inputData = {\r\n                masterData:this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nneedsubsample : this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchViewResultAction(inputData, true);\r\n         }else{    \r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { screenName,batchactiveKey : screenName }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n         }\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Samples, event.dataState),\r\n            sampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchHistoryChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\r\n            histortState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchIqcChangeChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\r\n            iqcsampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateViewChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\r\n            viewstate: event.dataState\r\n        });\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n          return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \r\n                   \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\r\n                    \"width\": \"150px\", \"columnSize\": \"4\" };\r\n    \r\n        });\r\n        return temparray;\r\n    \r\n      }\r\n\r\n      getApprovalVersion = (data) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n         \r\n        inputData = {\r\n            needFilterSubmit : \"false\",\r\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n            fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n            toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n            nregtypecode: data.item.nregtypecode,\r\n            userInfo: this.props.Login.userInfo,\r\n            nregsubtypecode: data.item.nregsubtypecode,\r\n            masterData : this.props.Login.masterData,\r\n            isneedapprovalfilter : true,\r\n            defaultRegistrationSubType:data.item,\r\n            isneedrealFilterStatus:\"false\",\r\n            realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n            realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n            realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n        }\r\n        this.props.getBCApprovalConfigVersion(inputData)\r\n    \r\n      }\r\n    \r\n   tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_SAMPLE\",\r\n        <SampleTab\r\n            sample={this.props.Login.masterData.Samples || []}\r\n            dataResult={process(this.props.Login.masterData.Samples || [], this.state.sampleState)}\r\n            dataState={this.state.sampleState}\r\n            controlMap={this.state.controlMap}\r\n            dataStateChange={this.dataStateChange}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteRecord={this.deleteRecord}\r\n            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreItem) || []}\r\n            methodUrl={\"Samples\"}\r\n            getSamples={() => this.getSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n            // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n            //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\r\n            //inputParam={this.props.Login.inputParam}\r\n            screenName=\"IDS_SAMPLE\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n        />\r\n        )\r\n        tabMap.set(\"IDS_BATCHIQCSAMPLE\",\r\n        <BatchIqcSampleTab\r\n            iqcsample={this.props.Login.masterData.iqcsample || []}\r\n            dataResult={process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState)}\r\n            dataState={this.state.iqcsampleState}\r\n            controlMap={this.state.controlMap}\r\n            dataStateChange={this.dataStateBatchIqcChangeChange}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            userInfo={this.props.Login.userInfo}\r\n            cancelRecord={this.cancelRecord}\r\n            methodUrl={\"IQCSample\"}\r\n            getIqcSamples={() => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n            screenName=\"IDS_BATCHIQCSAMPLE\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n        />\r\n        )\r\n    if(this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.INITIATED\r\n    || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.COMPLETED){\r\n        tabMap.set(\"IDS_RESULTS\",\r\n        <BatchResultTab\r\n           ELNTest={this.props.Login.masterData.ELNTest || []}\r\n            resultview={this.props.Login.masterData.Resultview || []}\r\n            dataResult={process(this.props.Login.masterData.Resultview || [], this.state.viewstate)}\r\n            dataState={this.state.viewstate}\r\n            dataStateChange={this.dataStateViewChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            methodUrl={\"BatchViewResult\"}\r\n            screenName=\"IDS_RESULTS\"\r\n            intl={this.props.intl}\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            selectedfilename = {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n\r\n        />\r\n        )\r\n    }\r\n\r\n        tabMap.set(\"IDS_BATCHHISTORY\",\r\n        <BatchhistoryTab\r\n            batchhistory={this.props.Login.masterData.Batchhistory || []}\r\n            dataResult={process(this.props.Login.masterData.Batchhistory || [], this.state.histortState)}\r\n            dataState={this.state.histortState}\r\n            dataStateChange={this.dataStateBatchHistoryChange}\r\n            userInfo={this.props.Login.userInfo}\r\n            methodUrl={\"Batchhistory\"}\r\n            screenName=\"IDS_BATCHHISTORY\"\r\n            nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n\r\n        />\r\n        )\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n           \r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    fromDate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    toDate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    defaultRegistrationType : this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType : this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType :this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    fromDate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    toDate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    defaultRegistrationType : this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType : this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType :this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit : \"false\",\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCRegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit : \"false\",\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    defaultSampleType:this.props.Login.masterData.defaultSampleType,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCRegistrationSubType(inputData,this.props.Login.masterData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n                const nregsubtypecode = this.state;\r\n                //this.setState({ nregsubtypecode:event });\r\n                this.getApprovalVersion(event);\r\n                \r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit : \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    isneedrealFilterStatus:\"false\",\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getBCFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                // inputData = {\r\n                //     nflag: 4,\r\n                //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                //     todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                //     napprovalversioncode: event.value,\r\n                //     userinfo: this.props.Login.userInfo,\r\n                //     defaultApprovalConfigVersion: event.item,\r\n                //     masterData: this.props.Login.masterData,\r\n                //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                // }\r\n                // this.props.getBCJobStatus(inputData)\r\n                const ApprovalVersionValue = this.state;\r\n                this.setState({ ApprovalVersionValue:event });\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    needFilterSubmit : \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\"\r\n                }\r\n                this.props.getBCFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue:event });\r\n                \r\n            }\r\n            else if(fieldname === \"test\") {\r\n\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue:event });\r\n            }else{\r\n                const selectedRecord = this.state;\r\n                this.setState({ selectedRecord:event });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilterDateChange = (dateValue,dateName) => {\r\n            const { selectedFilter } = this.state;\r\n            if (dateValue === null) {\r\n                dateValue = new Date();\r\n            }\r\n            selectedFilter[dateName] = dateValue;\r\n            this.setState({ selectedFilter });\r\n    \r\n    }\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let addedComponentList = this.state.addedComponentList || [];\r\n    //     if (checked) {\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n    //                 addedComponentList.push({ ...item, selected: false });\r\n    //                 item.selected = checked;\r\n    //                 return item;\r\n    //             } else {\r\n    //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n    //                 olditem.selected = checked;\r\n    //                 return olditem;\r\n    //             }\r\n\r\n    //         });\r\n\r\n\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         let addedComponentData = this.state.addedComponentList || [];\r\n    //         let deletedListdData = this.state.deletedList || [];\r\n\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             item.selected = checked;\r\n    //             return item;\r\n    //         });\r\n\r\n    //         // console.log(\"data:\",data1, data2);\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    // }\r\n   \r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        // let checkRepeatComponent;\r\n        //  let addedComponentList = this.state.addedComponentList || [];\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                    // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n                    // if(checkRepeatComponent.length>0){\r\n                    //     selectAll = true;\r\n                    // }else{\r\n                    //     selectAll = false;\r\n                    // }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            //if (gridType === \"originalgrid\"){\r\n            selectAll = false;\r\n            // }\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n\r\n    \r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let sampleList = this.state.samples || [];\r\n        let addedSamplesList=[];\r\n        if (checked) {\r\n            //const data = event.dataItems.map(item => {\r\n            const data = event.target.props.data.map(item => {\r\n                if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n                    sampleList.push({ ...item, selected: false });\r\n                    item.selected = checked;   \r\n                    let newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item    \r\n                    addedSamplesList.push(newItem);\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = olditem\r\n                    newItem[\"jsonuidata\"]['samplelist'] = olditem\r\n                    addedSamplesList.push(newItem);\r\n                    return olditem;\r\n                    \r\n                }\r\n\r\n            });\r\n\r\n\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList:addedSamplesList,\r\n                sampleList,\r\n                addSelectAll: checked, \r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n        else {\r\n            // let sampleListData = this.state.sampleList || [];\r\n            // let deletedListdData = this.state.sampleList || [];\r\n\r\n            let sampleListData = this.state.samples || [];\r\n            let deletedListdData = this.state.samples || [];\r\n\r\n            const data = this.state.samples.map(item => {\r\n                sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            // console.log(\"data:\",data1, data2);\r\n            this.setState({\r\n                samples: data, \r\n                addedSamplesList: sampleListData,\r\n                deletedList: deletedListdData,\r\n                addSelectAll: checked, \r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n\r\n        // const data = this.state.addComponentDataList.map(item=>{\r\n        //     if (checked){\r\n        //         addedComponentList.push({...item, selected:false});\r\n        //     }\r\n        //     else{\r\n        //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\r\n        //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \r\n        //     }  \r\n        //     item.selected = checked;\r\n        //     return item;\r\n        // });\r\n\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n\r\n    selectionChange = (event) => {\r\n        let addedSamplesList=this.state.addedSamplesList || [];\r\n        //let addedSamplesList= [];\r\n        let samples = this.state.samples || [];\r\n        const samplesList = this.state.samples.map(item => {\r\n            if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n                item.selected = !event.dataItem.selected;\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                }\r\n                else {\r\n                    // if(addedSamplesList.length === 0){\r\n                      addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                    //   }else{\r\n                    //     this.state.samples.map((item1,index) => { \r\n                    //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\r\n                    //             if(this.state.samples.length == 1){\r\n                    //                 addedSamplesList=[];\r\n                    //             }else{\r\n                    //                 const newItem = JSON.parse(JSON.stringify(item1));\r\n                    //                 newItem.selected = false;\r\n                    //                 newItem[\"jsondata\"]={};\r\n                    //                 newItem[\"jsonuidata\"]={};\r\n                    //                 newItem[\"jsondata\"]['samplelist'] = item1\r\n                    //                 newItem[\"jsonuidata\"]['samplelist'] = item1\r\n                    //                 //addedSamplesList.push(newItem);\r\n                    //                 addedSamplesList = item1;\r\n                    //             }  \r\n                    //         }\r\n                    //     } \r\n                    //   )\r\n                 }\r\n            }\r\n            return item;\r\n        });\r\n        ///samplesList = addedSamplesList;\r\n        this.setState({\r\n            samplesList,\r\n            addedSamplesList,\r\n            samples,\r\n            initialList :addedSamplesList,\r\n            addSelectAll: this.valiateCheckAll(samplesList),\r\n            deleteSelectAll: this.valiateCheckAll(samplesList)\r\n        });\r\n    }\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        console.log(\"handle save:\", selectedRecord);\r\n        mandatoryFields = [\r\n            { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n        ]\r\n        let selectedSpec = this.props.Login.selectedSpec;\r\n        selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\r\n        selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\r\n        selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedSpec,\r\n                openModal:true,\r\n                openSpecModal:false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    render() {\r\n        let reportActionList=[];\r\n        const getBatch = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            operation: \"get\", \r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"Batchcreation\", keyName: \"batchcreation\"\r\n        };\r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || this.props.Login.masterData && this.props.Login.masterData.realFromDate ? rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.realFromDate):undefined;\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || this.props.Login.masterData && this.props.Login.masterData.realToDate ? rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.realToDate):undefined;\r\n        const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\r\n        const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\r\n        const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\r\n        const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            primaryeyField: \"nreleasebatchcode\",\r\n            primaryKeyValue: undefined, \r\n            operation: \"create\", \r\n            //inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, \r\n            ncontrolCode: addId,\r\n            nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate ,\r\n            masterData:this.props.Login.masterData,\r\n            fromdate:this.props.Login.masterData.fromDate,\r\n            todate:this.props.Login.masterData.toDate,\r\n            nregtypecode : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n            napprovalconfigcode : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            ntranscode  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus:transactionStatus.NA,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n        };\r\n\r\n        const viewInfoFields = [\r\n        { \"fieldName\": \"sbatcharno\", \"label\": \"IDS_BATCHARNO\"},\r\n        { \"fieldName\": \"ssectionname\", \"label\": \"IDS_SECTION\"},\r\n        { \"fieldName\": \"stestname\", \"label\": \"IDS_TESTNAME\"},\r\n        { \"fieldName\": \"sinstrumentcatname\", \"label\": \"IDS_INSTRUMENTCATEGORY\" },\r\n        { \"fieldName\": \"sinstrumentid\", \"label\": \"IDS_INSTRUMENTID\" },\r\n        { \"fieldName\": \"sinstrumentname\", \"label\": \"IDS_INSTRUMENTNAME\" },\r\n        { \"fieldName\": \"sproductname\", \"label\": \"IDS_SAMPLETYPE\" },\r\n        { \"fieldName\": \"stransdisplaystatus\", \"label\": \"IDS_STATUS\" },\r\n        { \"fieldName\": \"username\", \"label\":\r\n        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\":\r\n        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\"\r\n        :\"IDS_BATCHCREATEDBY\"}\r\n      ];\r\n\r\n        let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\r\n\r\n        if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\r\n            stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\r\n        }\r\n\r\n      \r\n         let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, \r\n            this.props.Login.userInfo);\r\n            \r\n        const editParam = {\r\n            screenName: \"IDS_BATCHCREATION\", \r\n            operation: \"update\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            naddcontrolCode:addId,\r\n            nsampletypecode:this.props.Login.masterData.realSampleTypeValue ? \r\n                            this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\r\n            nregtypecode : this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n                           this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n            this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\r\n        };\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Batchmaster\", \r\n            selectedObject: \"SelectedBatchmaster\", \r\n            primaryKeyField: \"nbatchmastercode\",\r\n            fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n           \r\n            fecthInputObject: {\r\n                fromDate : obj.fromDate,\r\n                toDate : obj.toDate,\r\n                userInfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                napprovalconfigcode:this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\r\n                ntranscode:this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\r\n                nsampletypecode:this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA,\r\n                //fromDate, toDate, \r\n                //stransactionstatuscode,\r\n                //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\r\n            },\r\n            masterData: this.props.Login.masterData, \r\n            //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\r\n            searchFieldList: this.searchFieldList\r\n        }\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_BATCHSTATUS\",\r\n                \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\r\n            }\r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // }\r\n        ]\r\n\r\n        return (\r\n        <>\r\n            {/* Start of get display*/}\r\n            {/* <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\"> */}\r\n            {/* <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\"> */}\r\n            {/* <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\"> */}\r\n            {/* <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"> */}\r\n            {/* //</><div className=\"client-listing-wrap mtop-4\"> */}\r\n            <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \">\r\n            <Affix top={53}>\r\n            <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n            </Affix>\r\n            \r\n                <Row noGutters={true}>\r\n                    <Col md={4}>\r\n                            <ListMaster\r\n                                masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.Batchmaster || [])}\r\n                                selectedMaster={this.props.Login.masterData.SelectedBatchmaster}\r\n                                primaryKeyField=\"nbatchmastercode\"\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterData={this.props.Login.masterData}\r\n                                //getMasterDetail={this.props.getSelectedBatchCreationDetail}\r\n                                getMasterDetail={(batch) => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                inputParam = {getBatch}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_BATCHCREATION\" })}\r\n                                //mainField=\"stestname\"\r\n                                mainField=\"sbatcharno\"\r\n                                firstField=\"stestname\"\r\n                                secondField=\"sinstrumentname\"\r\n                                selectedListName=\"SelectedBatchmaster\"\r\n                                objectName=\"BatchCreation\"\r\n                                listName=\"IDS_BATCHCREATION\"\r\n                                needValidation={false}\r\n                                hidePaging={false}\r\n                                // subFields={\r\n                                //     [\r\n                                //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\r\n                                //         { [designProperties.VALUE]: \"sinstrumentname\" },\r\n                                //         // { [designProperties.VALUE]: \"smahname\" },\r\n                                //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\r\n                                //     ]\r\n                                // }\r\n                                needFilter={true}\r\n                                needMultiSelect={false}\r\n                                subFieldsLabel={true}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                searchListName=\"searchedData\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                isClearSearch={this.props.Login.isClearSearch}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                               // handlePageChange={this.handlePageChange}\r\n                                addId={addId}\r\n                                showFilterIcon={true}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getBatchSection(addParam)}\r\n                               // openModal={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                commonActions={\r\n                                    // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Button>\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            //onClick={() => this.reloadData(false)} \r\n                                        >\r\n                                            <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                        </Button>\r\n\r\n                                    </ProductList>\r\n                                    // </Tooltip>\r\n                                }\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":<BatchCreationFilter\r\n                                        fromDate={this.state.selectedFilter[\"fromDate\"] !=undefined ?\r\n                                        rearrangeDateFormat(this.props.Login.userInfo,this.state.selectedFilter[\"fromDate\"])  : this.fromDate}\r\n                                        toDate={this.state.selectedFilter[\"toDate\"] !=undefined  ? \r\n                                        rearrangeDateFormat(this.props.Login.userInfo,this.state.selectedFilter[\"toDate\"]) :  this.toDate}\r\n                                        SampleType={this.state.SampleType || []}\r\n                                        SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                        RegType={this.state.RegistrationType || []}\r\n                                        RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                        RegSubType={this.state.RegistrationSubType || []}\r\n                                        RegSubTypeValue={this.state.nregsubtypecode || []}\r\n                                        DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                        FilterStatus={this.state.BCFilterStatus || []}\r\n                                        FilterStatusValue={this.state.FilterStatusValue || []}\r\n                                        ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                        ApprovalVersionValue={this.state.ApprovalVersionValue || []}\r\n                                        REJobStatus={this.state.REJobStatus || []}\r\n                                        JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                        Test={this.state.Testvalues || []}\r\n                                        TestValue={this.props.Login.masterData.selectedTestSynonym || []}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        handleFilterDateChange={this.handleFilterDateChange}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                        DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                    />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                             <Col md='8'>\r\n                                {/* <Row> */}\r\n                                    {/* <Col md={12}> */}\r\n                                        <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                                {this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0\r\n                                                    && this.props.Login.masterData.SelectedBatchmaster ?\r\n                                                    <>\r\n                                                        <Card.Header>\r\n                                                            <Card.Title className=\"product-title-main\">\r\n                                                                {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n                                                            </Card.Title>\r\n                                                            <Card.Subtitle>\r\n                                                                <div className=\"d-flex product-category\">\r\n                                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED  ? \"outline-initiate\"\r\n                                                                            : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" \r\n                                                                            : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" \r\n                                                                            : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                                                {this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus}\r\n                                                                            </MediaLabel>\r\n                                                                        </h2>              \r\n                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                    <div className=\"d-inline\">\r\n\r\n                                                                        {/* <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHTAT\" })}\r\n                                                                            // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                            onClick={() => this.props.batchTAT(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>      */}\r\n\r\n                                                                        <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWINFO\" })}\r\n                                                                        // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                        onClick={() => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                        >\r\n                                                                        <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>        \r\n\r\n                                                                        <Nav.Link name=\"editBatchCreation\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            onClick={() => this.fetchEditData(editParam)}\r\n                                                                            // onClick={() => this.props.getActiveBatchCreationService(editParam,\r\n                                                                            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                            //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\r\n                                                                            />\r\n                                                                        </Nav.Link>\r\n                                                                       { \r\n                                                                      // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\r\n                                                                        <Nav.Link name=\"initiateBatchCreation\"                                                        //  data-for=\"tooltip-common-wrap\" \r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHINITIATE\" })} \r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            //role=\"button\"\r\n                                                                            onClick={() => this.testPopUpStartActions(testStartId)}\r\n                                                                             >\r\n                                                                            <FontAwesomeIcon icon={faPlay} \r\n                                                                            />\r\n                                                                        {/* </FontIconWrap>  */}\r\n                                                                        </Nav.Link>\r\n                                                                       // :\"\"\r\n                                                                        }\r\n\r\n                                                                        <Nav.Link name=\"completeBatchCreation\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                            onClick={() => this.completePopUpStartActions(completeId)}\r\n                                                                            //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\r\n                                                                            // onClick={() => this.props.validateBatchComplete({\r\n                                                                            //     masterData: this.props.Login.masterData,\r\n                                                                            //     userInfo: this.props.Login.userInfo,\r\n                                                                            //     userRoleControlRights: this.props.Login.userRoleControlRights,\r\n                                                                            //     ncontrolCode: completeId,\r\n                                                                            //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n                                                                            // })}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faCheckCircle}\r\n                                                                            // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\r\n                                                                            />\r\n                                                                        </Nav.Link>\r\n\r\n                                                                        <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}\r\n                                                                               \r\n                                                                        >\r\n                                                                          <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                        </Nav.Link>\r\n\r\n\r\n                                                                        <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                                        >\r\n                                                                          <Image src={reject} alt=\"filer-icon action-icons-wrap\" \r\n                                                                           width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                           onClick={() => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster,cancelId)} \r\n                                                                           data-place=\"left\" \r\n                                                                         />                                                           \r\n                                                                        </Nav.Link>\r\n                                                                   \r\n                                                                        {reportActionList.length>0?\r\n                                                                            <CustomPopover\r\n                                                                                nav={true}\r\n                                                                                data={reportActionList}\r\n                                                                                Button={true}\r\n                                                                                hideIcon={true}\r\n                                                                                btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                                textKey=\"value\"\r\n                                                                                dynamicButton={(value) => this.reportMethod(value)}\r\n                                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                            />\r\n                                                                            :\r\n                                                                        \"\"}\r\n\r\n                                                                    </div>\r\n                                                                    {/* </Tooltip> */}\r\n                                                                </div>\r\n\r\n                                                            </Card.Subtitle>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <Row className=\"no-gutters\">\r\n                                                               <Col md={12}>\r\n                                                                  <Card className=\"at-tabs\">\r\n                                                                    <CustomTab\r\n                                                                     activeKey={this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\"}\r\n                                                                     tabDetail={this.tabDetail()} onTabChange={this.onTabChange} \r\n                                                                     />\r\n                                                                   </Card>\r\n                                                               </Col>\r\n                                                            </Row>\r\n                                                            {/* <CustomTab \r\n                                                            activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_SAMPLE\"}\r\n                                                            tabDetail={this.tabDetail()} onTabChange={this.onTabChange} /> */}\r\n                                                        </Card.Body>\r\n                                                    </>\r\n                                                    : \"\"\r\n                                                }\r\n                                        </Card>\r\n                                        </ContentPanel>\r\n                                    {/* </Col> */}\r\n                                {/* </Row> */}\r\n                         </Col>                  \r\n                  </Row>\r\n              </div>\r\n            {/* </ListWrapper> */}\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for User Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {\r\n                this.props.Login.openModal ?\r\n                    <SlideOutModal \r\n                        show={this.props.Login.openModal}\r\n                        size={\"lg\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.operation===\"createSample\" ? this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" }) \r\n                        : this.props.Login.operation===\"initiate\" || this.props.Login.operation===\"view\" || this.props.Login.operation===\"complete\"? this.props.intl.formatMessage({ id: \"IDS_BATCH\" })\r\n                        : this.props.Login.operation===\"createiqcsample\" ? this.props.intl.formatMessage({ id: \"IDS_BATCHIQCSAMPLE\" })\r\n                        : this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === \"create\" || this.props.Login.operation ===\"update\"  ? \r\n                         this.batchMandatoryFields \r\n                        //  : this.props.Login.operation === \"initiate\"  ?\r\n                        //    this.initiateMandatoryFields \r\n                        //  : this.props.Login.operation === \"complete\" ?\r\n                        //    this.completeMandatoryFields\r\n                         : this.props.Login.operation === \"createiqcsample\" ? \r\n                           this.materialIqcMandatory \r\n                         :  []\r\n                        }\r\n                        showSaveContinue={this.state.showSaveContinue}\r\n                        noSave={this.props.Login.operation === \"view\" ? true : false}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                           : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                            <AddBatchCreation\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                Test={this.state.Testvalues || []}\r\n                                selectedInstrumentCategory={this.state.selectedInstCategory}\r\n                                InstrumentCategory={this.state.InstrumentCategory}\r\n                                Instrument={this.state.Instrument}\r\n                                selectedInstrument={this.state.selectedInstrument}\r\n                                productCategory={this.state.ProductCategory}\r\n                                selectedProductCategory={this.state.selectedProductCategory}\r\n                                TestValue={this.state.selectedTestSynonym || []}\r\n                                product={this.state.Product || []}\r\n                                instrumentID={this.state.InstrumentID || []}\r\n                                selectedProduct={this.state.selectedProduct || []}\r\n                                studyPlanList={this.props.Login.studyPlanList || []}\r\n                                manufacturerList={this.props.Login.productManufacturerList || []}\r\n                                maHolderList={this.props.Login.maHolderList || []}\r\n                                timeZoneList={this.props.Login.timeZoneList || []}\r\n                                selectedBacthCreation={this.props.Login.masterData.SelectedBatchmaster || {}}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                selectedInstrumentId={this.state.selectedInstrumentId}\r\n                                onMultiColumnValue={this.onMultiColumnValue}\r\n                                onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                batchCreationEditStatusList={this.props.Login.batchCreationEditStatusList}\r\n                                Section={this.state.Section}\r\n                                selectedSection={this.state.selectedSection}\r\n                            />\r\n                            :this.props.Login.operation === \"createSample\" ?\r\n                            <AddSample\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                getProductByCategory={this.getProductByCategory}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                userInfo={this.props.userInfo}\r\n                                productCategoryList={this.props.productCategoryList}\r\n                                productList={this.props.productList}\r\n                                componentList={this.props.componentList}\r\n                                getDataForAddComponent={this.getDataForAddComponent}\r\n                                clearComponentInput={this.props.clearComponentInput}\r\n                                samples={this.state.samples || []}\r\n                                headerSelectionChange={this.headerSelectionChange}\r\n                                selectionChange={this.selectionChange}\r\n                                addedComponentList={this.state.addedComponentList || []}\r\n                                addedHeaderSelectionChange={this.addedHeaderSelectionChange}\r\n                                addedSelectionChange={this.addedSelectionChange}\r\n                                //dataStateChange={this.dataStateChange} \r\n                                userRoleControlRights={this.props.userRoleControlRights}\r\n                                controlMap={this.props.controlMap}\r\n                                inputParam={this.props.inputParam}\r\n                                screenName={this.props.screenName}\r\n                                addSelectAll={this.state.addSelectAll}\r\n                                deleteSelectAll={this.state.deleteSelectAll}\r\n                                onDeleteSelectedComponent={this.onDeleteSelectedComponent}\r\n                                componentPopupSkip={this.props.componentPopupSkip}\r\n                                componentPopupTake={this.props.componentPopupTake}\r\n                                componentPageSizes={this.props.componentPageSizes}\r\n                                nneedsubsample = {this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                           />\r\n                           :this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ?\r\n                           <AddBatchinitiate\r\n                                userInfo={this.props.Login.userInfo}\r\n                                operation={this.props.Login.operation}\r\n                                handleDateChange={this.handleDateChange}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                           />\r\n                           :this.props.Login.operation === \"view\" ?\r\n                           <Card className='one' >\r\n                           <Card.Body>\r\n                           <ViewInfo\r\n                              userInfo={this.props.Login.userInfo}\r\n                              selectedRecordView={this.props.Login.masterData.selectedRecordView}\r\n                              viewInfoFields={viewInfoFields}\r\n                           />\r\n                           </Card.Body>\r\n                                </Card>\r\n                           : this.props.Login.operation === \"createiqcsample\" ?\r\n                           <AddMaterialIqc\r\n                                userInfo={this.props.Login.userInfo}\r\n                                operation={this.props.Login.operation}\r\n                                materialCategory={this.state.MaterialCategory}\r\n                                selectedMaterialType={this.state.selectedMaterialType}\r\n                                selectedMaterialCategory={this.state.selectedMaterialCategory}\r\n                                onComboChange={this.onComboChange}\r\n                                selectedMaterial={this.state.selectedMaterial}\r\n                                screenName = {this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                handleSaveClick ={this.handleSaveClick}\r\n                                material={this.state.Material}\r\n                                materialInventory={this.state.MaterialInventory}\r\n                                AddSpec={this.AddSpec}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                                loadSpec = {this.props.Login.loadSpec}\r\n                                selectedMaterialInventory={this.state.selectedMaterialInventory}\r\n                                selectedInventoryUnit={this.props.Login.masterData.selectedInventoryUnit}\r\n                                AgaramTree={this.props.Login.AgaramTree}\r\n                                openNodes={this.props.Login.OpenNodes}\r\n                                onTreeClick={this.onTreeClick}\r\n                                focusKey={this.props.Login.FocusKey}\r\n                                activeKey={this.props.Login.batchactiveKey}\r\n                                Specification={this.props.Login.Specification}\r\n                                selectedSpec={this.props.Login.selectedSpec}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                onSpecChange={this.onspecChange}  \r\n                                openSpecModal={this.props.Login.openSpecModal}   \r\n                                closeModal={this.closeModal}             \r\n                         /> : \"\"\r\n                        }\r\n                    /> \r\n                    : \"\"\r\n            }\r\n            {/* End of Modal Sideout for Creation */}\r\n            {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    ConfirmDelete = (selectedBatch, deleteId,operation) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteBatchCreation(selectedBatch,deleteId,operation));\r\n    };\r\n\r\n\r\n    completePopUpStartActions = (completeId) => {\r\n    // if(this.props.Login.masterData.nneedtestinitiate === true){\r\n      if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || \r\n        this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT ||\r\n        this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED\r\n        ){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }\r\n    //    }else \r\n      else if (this.props.Login.masterData.Samples.length==0){\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n       }else{\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         openModal: true, \r\n                //         completeId : completeId,\r\n                //         masterData: this.props.Login.masterData,\r\n                //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                //         operation: \"complete\"\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n\r\n                let inputData = {};\r\n                inputData[\"openModal\"] = true;\r\n                inputData[\"completeId\"]= completeId;\r\n                inputData[\"selectedRecord\"]= this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"operation\"] = \"complete\";\r\n                this.props.batchCompleteDatePopup(inputData,this.props.Login.masterData);\r\n            }\r\n       }\r\n      \r\n    AddSpec = (e) => {\r\n        if(this.state.selectedMaterial !== undefined && \r\n            this.state.selectedMaterialCategory !== undefined ){\r\n                let inputData = {};\r\n                inputData[\"nmaterialcode\"] =  this.state.selectedMaterial.value;\r\n                inputData[\"nmaterialcatcode\"]= this.state.selectedMaterialCategory.value;\r\n                inputData[\"ncategorybasedflow\"]= this.state.selectedMaterialCategory.item.ncategorybasedflow;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n                // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n                // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n                // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                this.props.getTreeByMaterial(inputData,this.state.selectedRecord,this.props.Login.masterData);\r\n            }else{\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLALLDETAILSTOADDSPEC\" }));\r\n            }\r\n    }\r\n\r\n\r\n    testPopUpStartActions = (testStartId) => {\r\n            if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n            }else if (this.props.Login.masterData.Samples.length==0){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n            }\r\n            // else if (this.props.Login.masterData.iqcsample.length==0){\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n            // }\r\n            else{\r\n                let inputData = {};\r\n                inputData[\"openModal\"] = true;\r\n                inputData[\"testStartId\"]= testStartId;\r\n                inputData[\"selectedRecord\"]= this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n                inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n                inputData[\"operation\"] = \"initiate\";\r\n                this.props.batchInitiateDatePopup(inputData,this.props.Login.masterData);\r\n                \r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 openModal: true, \r\n            //                 testStartId : testStartId,\r\n            //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\r\n            //                 masterData: this.props.Login.masterData,\r\n            //                 operation: \"initiate\"\r\n            //             }\r\n            //         }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n           \r\n     }\r\n\r\n    testStartActions = (selectedmaster,testStartId) =>{\r\n        if(selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n            }else if (this.props.Login.masterData.Samples.length==0){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n             }\r\n            //else if (this.props.Login.masterData.iqcsample.length==0){\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n            // }\r\n            else{\r\n                let inputData = {};\r\n                let jsonuidata=[];\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/initiateBatchcreation\",\r\n                    isSingleGet: true,\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                                                        return {jsonuidata:item}});\r\n                if(this.props.Login.masterData.iqcsample.length > 0){\r\n                    let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\r\n                    inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"ntransactiontestcode\"] = totalSample.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"nneedjoballocationiqc\"] =true\r\n                    inputData[\"isiqcdata\"] =true\r\n                }else{\r\n                    inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"isiqcdata\"] =false\r\n                    inputData[\"nneedjoballocationiqc\"] =false\r\n                }\r\n                    inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples =>samples.npreregno).join(\",\");\r\n                    inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactionsamplecode).join(\",\");\r\n                    inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples =>samples.ntransactiontestcode).join(\",\");\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                   // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                    //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"batchsample\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n                    inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                        this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                    inputData[\"napproveconfversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] =  transactionStatus.INITIATED ||  transactionStatus.DRAFT;\r\n                    inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                    inputData[\"Batchhistory\"] ={\r\n                                            dtransactiondate : formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] !=undefined ? \r\n                                            this.state.selectedRecord[\"dtransactiondate\"]:this.props.Login.currentTime,false),\r\n                                            scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                                            };\r\n                    inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                    inputData[\"testStartId\"] = testStartId;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\r\n                    inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample :\"\";\r\n                    inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample :\"\";\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"initiate\"\r\n                    }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam,  \r\n                                masterData:{\r\n                                    ...masterData,\r\n                                    defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                    && this.props.Login.masterData.BCFilterStatus[1],\r\n                                    realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                    && this.props.Login.masterData.BCFilterStatus[1],\r\n\r\n                                }  \r\n                             },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchInitiateAction(inputData, this.props.Login.masterData,this.confirmMessage);\r\n                    }\r\n         }\r\n    }\r\n\r\nbatchSaveIQCActions =(selectedmaster)=>{\r\n\r\n   if(parseFloat(this.state.selectedRecord.susedquantity) < parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)){\r\n     if(this.props.Login.selectedSpec.nallottedspeccode !== undefined &&  this.props.Login.selectedSpec.nallottedspeccode !== \"\" ){\r\n        let userInfo = {};\r\n        let inputRegistrationData = {};\r\n        let inputMaterialInventoryData = {};\r\n        let inputBatchData ={};\r\n        const map = {}\r\n        let batchCreationSampleData = {}; \r\n        let batchCreationTestData = {}; \r\n        let batchCreationSampleArray = [];\r\n        let batchCreationTestArray = [];\r\n        let samplecombinationuniqueArray=[];\r\n        let inputMaterialInventoryArrData=[];\r\n\r\n        batchCreationSampleData[\"nspecsampletypecode\"] =  this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? \r\n                this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\r\n        batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\r\n        batchCreationSampleData[\"slno\"] = 1;\r\n        batchCreationSampleArray.push(batchCreationSampleData);\r\n\r\n        inputRegistrationData[\"nallottedspeccode\"]= this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? \r\n                           this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\r\n        inputRegistrationData[\"ntemplatemanipulationcode\"]=this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\r\n        inputRegistrationData[\"nregsubtypeversioncode\"]=this.props.Login.masterData.nregsubtypeversioncode;\r\n        inputRegistrationData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode;\r\n        // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n        // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n        // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && \r\n                this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputRegistrationData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                 this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"nproductcatcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"nproductcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"ninstrumentcatcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"ninstrumentcode\"]= transactionStatus.NA;\r\n        inputRegistrationData[\"nmaterialcatcode\"]=this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n        inputRegistrationData[\"nmaterialcode\"]=this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n\r\n        inputRegistrationData[\"jsondata\"] = {\r\n            nmaterialcode : this.state.selectedMaterial.value,\r\n            nmaterialcatcode:this.state.selectedMaterialCategory.value,\r\n            smaterialcatname :this.state.selectedMaterialCategory.label,\r\n            sinventoryid:this.state.selectedMaterialInventory.item.sinventoryid,\r\n            nmaterialinventorycode:this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n            smaterial:this.state.selectedMaterial.item.smaterialname,\r\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n            nmaterialtypecode: this.state.selectedMaterialType.value,\r\n            susedquantity:this.state.selectedRecord.susedquantity,\r\n            sunitname:this.props.Login.masterData.inventoryTransaction.sunitname,\r\n            savailablequatity:this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n            //materialtype:this.state.selectedMaterialType.label,\r\n            sremarks:this.state.selectedRecord.sremarks,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n        };\r\n        inputRegistrationData[\"jsonuidata\"] = {\r\n            nmaterialcode : this.state.selectedMaterial.value,\r\n            nmaterialcatcode:this.state.selectedMaterialCategory.value,\r\n            smaterialcatname :this.state.selectedMaterialCategory.label,\r\n            sinventoryid:this.state.selectedMaterialInventory.item.sinventoryid,\r\n            nmaterialinventorycode:this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n            smaterial:this.state.selectedMaterial.item.smaterialname,\r\n            smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n            nmaterialtypecode: this.state.selectedMaterialType.value,\r\n            susedquantity:this.state.selectedRecord.susedquantity,\r\n            sunitname:this.props.Login.masterData.inventoryTransaction.sunitname,\r\n            savailablequatity:this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n            //materialtype:this.state.selectedMaterialType.label,\r\n            sremarks:this.state.selectedRecord.sremarks,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n            \r\n        };\r\n\r\n        // inputMaterialInventoryData = {\r\n        //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\r\n        // }\r\n        //  inputMaterialInventoryData = {\r\n        //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n        //         jsondata : {\r\n        //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n        //             nqtyused: this.state.selectedRecord.susedquantity\r\n        //         },\r\n        //         jsonuidata : {\r\n        //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n        //             nqtyused: this.state.selectedRecord.susedquantity\r\n        //         },\r\n        //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n        //  };\r\n\r\n         inputMaterialInventoryData[\"nmaterialinventorycode\"]= this.state.selectedMaterialInventory.item.nmaterialinventorycode;\r\n         inputMaterialInventoryData[\"jsondata\"] = {\r\n            ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n            nqtyused : this.state.selectedRecord.susedquantity,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n         }\r\n         //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\r\n         inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\r\n         inputMaterialInventoryData[\"jsonuidata\"]= {\r\n            ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n            nqtyused : this.state.selectedRecord.susedquantity,\r\n            nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n         }\r\n     \r\n\r\n        //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\r\n\r\n        batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA;\r\n //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n        batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n        batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n        batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode:transactionStatus.NA;\r\n   //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\r\n        batchCreationTestData[\"nrepeatcountno\"]=1 ;//--\r\n  //    batchCreationTestData[\"ntestretestno\"]=0;\r\n        batchCreationTestData[\"nparametercount\"]=1; //--\r\n        batchCreationTestData[\"slno\"]=1; //--\r\n           \r\n        batchCreationTestArray.push(batchCreationTestData);\r\n      \r\n   \r\n        map[\"nfilterstatus\"]=transactionStatus.PREREGISTER;\r\n        map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n        userInfo= this.props.Login.userInfo;\r\n        map[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n        map[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n        map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n        map[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;       \r\n        map[\"nmaterialcatcode\"]=this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n        map[\"nmaterialcode\"]=this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n        map[\"nmaterialtypecode\"]=this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\r\n\r\n        inputBatchData = this.props.Login.masterData.SelectedBatchmaster ;\r\n          \r\n        map['Registration'] = inputRegistrationData;\r\n        map['Batchsampleiqc'] = inputBatchData;\r\n        map['RegistrationSample'] = batchCreationSampleArray;\r\n        map['testgrouptest'] = batchCreationTestArray;\r\n        map['userInfo'] = userInfo; \r\n        map['samplecombinationunique'] =samplecombinationuniqueArray;\r\n        map['inputMaterialInventoryArrData']=inputMaterialInventoryData;\r\n        \r\n        const inputParam = {\r\n                        inputData: map,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHIQCSAVE\",\r\n                        operation:\"createiqc\"\r\n                    }\r\n\r\n        this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\r\n\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATIONS\" }));\r\n      }\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\" }));\r\n    }\r\n }\r\n \r\n    cancelBatch = (selectedmaster,cancelId) =>{\r\n         if(selectedmaster.ntransactionstatus == transactionStatus.DRAFT ){\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHINITIATEDRECORD\" }));\r\n                }else{\r\n                let inputData = {};\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/cancelBatch\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                        return {jsonuidata:item}});\r\n\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && \r\n                    this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                      this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                     this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                   // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"samples\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n                    this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT;\r\n                    // inputData[\"Batchhistory\"] ={\r\n                    //     dtransactiondate : formatInputDate(new Date(),true),\r\n                    //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                    //     };\r\n                    //inputData[\"completeId\"] = completeId;\r\n                    inputData[\"nneedtestinitiate\"]= this.props.Login.masterData &&  this.props.Login.masterData.nneedtestinitiate;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                    transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus \r\n                                                                                        && this.props.Login.masterData.BCFilterStatus[3];\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batch\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"cancel\"\r\n                    }\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, \r\n                                screenData: { inputParam, \r\n                                    masterData:{\r\n                                        ...masterData,\r\n                                        defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n                                        realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                                    } \r\n                                },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchCancelAction(inputData, this.props.Login.masterData);\r\n                    }\r\n                  \r\n         }\r\n    }\r\n\r\n    batchCompleteActions = (selectedmaster,completeId) =>{\r\n            if(selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT ){\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }else{\r\n                let inputData = {};\r\n                const masterData = this.props.Login.masterData;\r\n                const postParam = {\r\n                    inputListName: \"Batchmaster\", \r\n                    selectedObject: \"SelectedBatchmaster\",\r\n                    primaryKeyField: \"nbatchmastercode\",\r\n                    primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                    fetchUrl: \"batchcreation/completeBatchcreation\",\r\n                    isSingleGet: true,\r\n                    //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                }\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                    let jsondata = this.props.Login.masterData.Samples.map(item =>{\r\n                        return {jsonuidata:item}});\r\n\r\n                    inputData[\"fromDate\"]= obj.fromDate;\r\n                    inputData[\"toDate\"]= obj.toDate;\r\n                    inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                              this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                               this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                    inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n                    //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                    inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                   // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                    inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n                    inputData[\"samples\"] = jsondata;\r\n                    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                    inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n                    inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n                    inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                    inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                    this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\r\n                    inputData[\"Batchhistory\"] ={\r\n                        dtransactiondate : formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] !=undefined ?\r\n                            this.state.selectedRecord[\"dtransactiondate\"]:this.props.Login.currentTime,false),\r\n                        scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n                        };\r\n                    inputData[\"completeId\"] = completeId;\r\n                    inputData[\"nneedtestinitiate\"]= this.props.Login.masterData &&  this.props.Login.masterData.nneedtestinitiate;\r\n                    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                    transactionStatus.NA;\r\n                    inputData[\"defaultFilterStatus\"]=this.props.Login.masterData.BCFilterStatus \r\n                                                                                        && this.props.Login.masterData.BCFilterStatus[2];\r\n                    const inputParam = {\r\n                        postParam,\r\n                        inputData: inputData,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHCREATION\",\r\n                        operation:\"complete\"\r\n                    }\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, \r\n                                    masterData:{\r\n                                        ...masterData,\r\n                                        defaultFilterStatus:this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n                                        realdefaultFilterStatus : this.props.Login.masterData.BCFilterStatus \r\n                                        && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                                    } \r\n                                },\r\n                                openModal: true, screenName: \"IDS_BATCHCREATION\", \r\n                                operation:inputParam.operation\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }else{\r\n                        this.props.batchCompleteAction(inputData, this.props.Login.masterData);\r\n                    }\r\n                  \r\n         }\r\n    }\r\n\r\n    // completeBatchCreation = () => {\r\n    //     const postParam = {\r\n    //         inputListName: \"Batchmaster\", selectedObject: \"SelectedBatchCreation\",\r\n    //         primaryKeyField: \"nreleasebatchcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode,\r\n    //         fetchUrl: \"batchcreation/getBatchCreation\",\r\n    //         fecthInputObject: this.props.Login.userInfo,\r\n    //     }\r\n    //     const inputParam = {\r\n    //         classUrl: \"batchcreation\",\r\n    //         methodUrl: \"BatchCreation\", postParam,\r\n    //         inputData: {\r\n    //             ncontrolcode: this.props.Login.ncontrolCode,\r\n    //             \"userinfo\": this.props.Login.userInfo,\r\n    //             nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n    //         },\r\n    //         operation: \"complete\", showConfirmAlert: false\r\n    //     }\r\n    //     //this.props.updateStore({ typeName: DEFAULT_RETURN, data: { showConfirmAlert: false } });  \r\n\r\n    //     const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n\r\n    //     if (esignNeeded) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n    //                 openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n    //                 operation: this.props.Login.operation,\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n\r\n    //         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n    //     }\r\n\r\n    // }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false, loading: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let {userRoleControlRights, controlMap, selectedRecord,  filterData,\r\n             addedComponentList,\r\n             filterStatusList, dataState, sahDataState, bahDataState,\r\n             chDataState,testCommentDataState, SampleType, RegistrationType, \r\n             RegistrationSubType,BCFilterStatus, REJobStatus, Testvalues, \r\n             ApprovalConfigVersion,skip, take,\r\n             testskip, testtake,selectedFilter,InstrumentCategory,selectedInstCategory,\r\n             ProductCategory,Instrument,selectedInstrument,selectedTestSynonym,nregsubtypecode,\r\n             selectedProductCategory,Product,selectedProduct,samples,addSelectAll,\r\n             deleteSelectAll,ApprovalVersionValue,FilterStatusValue,Section,\r\n             selectedSection,sampleGridItem,subsampleGridItem,testGridItem = [],\r\n             DynamicGridItem,samplegridmoreitem,DynamicGridMoreItem,MaterialCategory,\r\n             selectedMaterialType,Material,selectedMaterial,selectedMaterialCategory,\r\n             MaterialInventory,selectedMaterialInventory,Specification,\r\n             selectedSpec,addedSamplesList,testGridArnoItems,InstrumentID,selectedInstrumentId,sinstrumentid} = this.state;\r\n        let isStateChanged = false;\r\n        let bool = false;\r\n        addedSamplesList=[];\r\n        samples =[];\r\n       \r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            isStateChanged = true;\r\n           \r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\",\"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            InstrumentCategory=constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname',\r\n            'ascending', 'ninstrumentcatcode', false);\r\n            Instrument=constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname',\r\n            'ascending', 'ninstrumentcode', false);\r\n            ProductCategory=constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname',\r\n            'ascending', 'nproductcatcode', false);\r\n            Product=constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname',\r\n            'ascending', 'nproductcode', false);\r\n            Section=constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname',\r\n            'ascending', 'nsectioncode', false);\r\n            MaterialCategory=constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n            'ascending', 'nmaterialcatcode', false);\r\n            Material=constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname',\r\n            'ascending', 'nmaterialcode', false);\r\n            MaterialInventory=constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid',\r\n            'ascending', 'nmaterialinventtranscode', false);\r\n            InstrumentID=constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid',\r\n            'ascending', 'ninstrumentcode', false);\r\n\r\n\r\n           \r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, \r\n                sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), \r\n                scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n\r\n            selectedFilter = selectedFiltersNew;\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            BCFilterStatus = BCFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n            InstrumentCategory = InstrumentCategory.get(\"OptionList\")\r\n            Instrument=Instrument.get(\"OptionList\")\r\n            ProductCategory=ProductCategory.get(\"OptionList\")\r\n            Product=Product.get(\"OptionList\")\r\n            Section=Section.get(\"OptionList\")\r\n            MaterialCategory=MaterialCategory.get(\"OptionList\")\r\n            Material=Material.get(\"OptionList\")\r\n            MaterialInventory=MaterialInventory.get(\"OptionList\")\r\n            InstrumentID = InstrumentID.get(\"OptionList\")\r\n            //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\r\n            samples=this.props.Login.masterData.samples;\r\n            addSelectAll=false;\r\n            deleteSelectAll=true;\r\n            nregsubtypecode=this.props.Login.masterData.defaultRegistrationSubType ?\r\n                {\r\n                    label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\r\n                    value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n                    item: this.props.Login.masterData.defaultRegistrationSubType\r\n                } : \"\"\r\n\r\n            if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\r\n                    selectedTestSynonym=this.props.Login.masterData.selectedTestSynonym ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedTestSynonym.stestname,\r\n                        value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\r\n                        item: this.props.Login.masterData.selectedTestSynonym\r\n                    } : \"\"\r\n                    let stestname = selectedTestSynonym.item;\r\n                    selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\r\n                    isStateChanged = true;\r\n            }\r\n        \r\n            if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\r\n                        selectedProductCategory=this.props.Login.masterData.selectedProductcategory ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\r\n                            value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\r\n                            item: this.props.Login.masterData.selectedProductcategory\r\n                        } : \"\"\r\n                     isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\r\n                    selectedProduct=this.props.Login.masterData.selectedProduct ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProduct.sproductname,\r\n                        value: this.props.Login.masterData.selectedProduct.nproductcode,\r\n                        item: this.props.Login.masterData.selectedProduct\r\n                    } : \"\"\r\n                    let sproductname = selectedProduct.item;\r\n                    selectedRecord = {...this.state.selectedRecord,sproductname,...selectedRecord};\r\n                    isStateChanged = true;\r\n             }\r\n                \r\n              if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\r\n                        selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\r\n                            value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\r\n                            item: this.props.Login.masterData.selectedInstrumentCategory\r\n                        } : \"\"\r\n                    //  selectedRecord['sinstrumentid']={};\r\n                    //  selectedRecord['sinstrumentname']={};\r\n                    //  selectedRecord = {...this.state.selectedRecord,sproductname,...selectedRecord};\r\n                     isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\r\n                        selectedInstrument=this.props.Login.masterData.selectedInstrument ?\r\n                        {\r\n                            label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\r\n                            value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\r\n                            item: this.props.Login.masterData.selectedInstrument\r\n                        } : \"\"\r\n                        let sinstrumentname = selectedInstrument.item;\r\n                        selectedRecord = {...this.state.selectedRecord,sinstrumentname,...selectedRecord};\r\n                        isStateChanged = true;\r\n        \r\n        \r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\r\n                    selectedInstrumentId=this.props.Login.masterData.selectedInstrumentId ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\r\n                        value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentId\r\n                    } : \"\"\r\n                    let sinstrumentid = selectedInstrumentId.item;\r\n                    selectedRecord = {...this.state.selectedRecord,sinstrumentid,...selectedRecord};\r\n                    isStateChanged = true;\r\n    \r\n    \r\n            }\r\n    \r\n        \r\n                if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                    userRoleControlRights = [];\r\n                    if (this.props.Login.userRoleControlRights) {\r\n                        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                            userRoleControlRights.push(item.ncontrolcode))\r\n                    }\r\n                    controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                    this.setState({ userRoleControlRights, controlMap });\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\r\n                    addedComponentList = this.props.Login.selectedComponentList;\r\n                    isStateChanged = true;\r\n                   // this.setState({ addedComponentList });\r\n                }\r\n        \r\n        \r\n                if(this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\r\n                    ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\r\n                        value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\r\n                        item: this.props.Login.masterData.defaultApprovalConfigVersion\r\n                    } : \"\"\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if(this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\r\n                    FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\r\n                        value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                        item: this.props.Login.masterData.defaultFilterStatus\r\n                    } : \"\"\r\n                    isStateChanged = true;\r\n                }\r\n        \r\n                if(this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\r\n                    selectedSection = this.props.Login.masterData.selectedSection ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedSection.ssectionname,\r\n                        value: this.props.Login.masterData.selectedSection.nsectioncode,\r\n                        item: this.props.Login.masterData.selectedSection\r\n                    } : \"\"\r\n                    let ssectionname = selectedSection.item;\r\n                    selectedRecord = {...this.state.selectedRecord,ssectionname,...selectedRecord};\r\n                    isStateChanged = true;\r\n\r\n                }\r\n            \r\n                if(this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\r\n                    selectedMaterialType = this.props.Login.masterData.selectedMaterialType ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\r\n                        value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\r\n                        item: this.props.Login.masterData.selectedMaterialType\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialtypename\"]=this.props.Login.masterData.selectedMaterialType.smaterialtypename;\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\r\n                    selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\r\n                        value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\r\n                        item: this.props.Login.masterData.selectedMaterialCategory\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialcatname\"]=this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\r\n                    isStateChanged = true;\r\n                    \r\n                }\r\n            \r\n                if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\r\n                    selectedMaterial = this.props.Login.masterData.selectedMaterial ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterial.smaterialname,\r\n                        value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\r\n                        item: this.props.Login.masterData.selectedMaterial\r\n                    }:\"\"\r\n                    selectedRecord[\"smaterialname\"]=this.props.Login.masterData.selectedMaterial.smaterialname;\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\r\n                    selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\r\n                        value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\r\n                        item: this.props.Login.masterData.selectedMaterialInventory\r\n                    }:\"\"\r\n                    selectedRecord[\"sinventoryid\"]=this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? \r\n                                 this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\r\n                    isStateChanged = true;\r\n                }\r\n\r\n                if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\r\n                            //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                            selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit &&\r\n                                         this.props.Login.masterData.selectedInventoryUnit.savailablequatity  != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity :\"\";\r\n                            selectedRecord[\"susedquantity\"] = \"\";\r\n                            selectedRecord[\"sremarks\"] = \"\";\r\n                            isStateChanged = true;\r\n                }\r\n        \r\n              if (this.props.Login.isselectedrecordempty) {\r\n                    selectedRecord = {};\r\n                    isStateChanged = true;\r\n                }\r\n\r\n\r\n                if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\r\n                    //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                    Specification = this.props.Login.masterData.Specification &&\r\n                                 this.props.Login.masterData.Specification  != null ? this.props.Login.masterData.Specification :\"\";\r\n                    isStateChanged = true;\r\n                 }\r\n\r\n                 if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\r\n                    selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec &&\r\n                                 this.props.Login.selectedSpec  != null ? this.props.Login.selectedSpec :\"\";\r\n                    isStateChanged = true;\r\n                 }\r\n\r\n                 if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                    selectedRecord = this.props.Login.selectedRecord\r\n                    isStateChanged = true;\r\n                }\r\n\r\n               if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                    const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.\r\n                        jsondata.value)\r\n                    testGridArnoItems=dynamicColumn.testListFields.testlistitem? dynamicColumn.testListFields.testlistitem : [];\r\n                    testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n                    sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                    subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];              \r\n                    samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                    DynamicGridMoreItem=[...samplegridmoreitem]\r\n                    DynamicGridItem=[...testGridArnoItems,...testGridItem,...sampleGridItem,...subsampleGridItem]     \r\n                    isStateChanged = true;         \r\n             }\r\n         }\r\n\r\n       \r\n        // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\r\n        //     // let selectedRecord = {};\r\n        //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n        //     'ascending', 'nmaterialcatcode', false);\r\n        //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\r\n        //     'ascending', 'nmaterialcode', false);\r\n        //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\r\n        //     'ascending', 'nmaterialinventorycode', false);\r\n        //      MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n        //      Material = Material.get(\"OptionList\")\r\n        //      MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n\r\n        //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\r\n        //      selectedRecord[\"Material\"]=Material\r\n        //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\r\n\r\n        //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\r\n        //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\r\n        //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\r\n        //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\r\n        //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \r\n        //         isStateChanged = true;\r\n        //     }\r\n        \r\n        //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\r\n        //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterial\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\r\n        //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\r\n        //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterialInventory\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\r\n        //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n            \r\n      \r\n            \r\n\r\n    \r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            isStateChanged = true;\r\n            //selectedRecord = this.props.Login.selectedRecord;\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n\r\n\r\n        if (isStateChanged)\r\n        {\r\n            this.setState({userRoleControlRights, controlMap, selectedRecord,  \r\n                filterData, addedComponentList,\r\n                filterStatusList, dataState, sahDataState, bahDataState, chDataState,\r\n                testCommentDataState,SampleType, RegistrationType, RegistrationSubType,\r\n                BCFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion,skip, take,\r\n                testskip, testtake,selectedFilter,selectedInstCategory,InstrumentCategory,\r\n                Instrument,selectedInstrument,selectedTestSynonym,nregsubtypecode,\r\n                ProductCategory,selectedProductCategory,Product,selectedProduct,samples,\r\n                addSelectAll,deleteSelectAll,ApprovalVersionValue,FilterStatusValue,Section,\r\n                selectedSection,sampleGridItem,subsampleGridItem,testGridItem,DynamicGridItem,\r\n                samplegridmoreitem,DynamicGridMoreItem,MaterialCategory,selectedMaterialType,\r\n                Material,selectedMaterial,selectedMaterialCategory,MaterialInventory,\r\n                selectedMaterialInventory,Specification,selectedSpec,addedSamplesList,\r\n                testGridArnoItems,InstrumentID,selectedInstrumentId,sinstrumentid});\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let openSpecModal=this.props.Login.openSpecModal;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\"){\r\n            //    this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n            selectedRecord[\"esigncomments\"] = \"\";\r\n            selectedRecord[\"esignpassword\"] = \"\";\r\n        }else if(this.props.Login.openSpecModal){\r\n                loadEsign = false;\r\n                openSpecModal=false\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,openSpecModal, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let inputData = {};\r\n        selectedRecord[fieldName] = comboData.item;\r\n        if (fieldName === \"sproductname\") {\r\n            selectedRecord[\"nproductcode\"]=comboData.value;\r\n            this.setState({ selectedProduct:comboData });\r\n        }else if(fieldName === \"ssectionname\"){\r\n            inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData['naddcontrolCode']=this.props.Login.naddcontrolCode;\r\n            inputData['section']=selectedRecord.ssectionname;\r\n            inputData['userInfo']=this.props.Login.userInfo;\r\n            this.props.getTestInstrumentComboService(inputData,this.props.Login.masterData);\r\n            // this.setState({ selectedSection:comboData });\r\n\r\n        }else if (fieldName === \"stestname\") {\r\n            if(this.props.Login.operation === \"update\"){\r\n            selectedRecord[\"nprevioustestcode\"]=this.state.selectedTestSynonym.value \r\n            }\r\n            selectedRecord[\"ntestcode\"]=comboData.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                           this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            selectedRecord['naddcontrolCode']=this.props.Login.naddcontrolCode;\r\n            selectedRecord['sinstrumentcatname']=undefined;\r\n            selectedRecord[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            selectedRecord[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            this.props.getTestInstrumentCategory(selectedRecord,this.props.Login.masterData);\r\n        }else if (fieldName === \"sinstrumentcatname\") {\r\n            selectedRecord[\"ninstrumentcatcode\"]=comboData.value;\r\n            selectedRecord[\"ncalibrationreq\"]=comboData.item.ncalibrationreq;\r\n            selectedRecord[\"ntestcode\"]=this.state.selectedTestSynonym.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            //selectedRecord['sinstrumentid']=undefined;\r\n            selectedRecord['sinstrumentname']=undefined;\r\n            this.props.getInstrumentForInstCategory(selectedRecord,this.props.Login.masterData);\r\n            //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n        }else if(fieldName === \"smaterialcatname\"){\r\n            selectedRecord[\"nmaterialcatcode\"]=comboData.value;\r\n            selectedRecord[\"needsectionwise\"]=comboData.item.needSectionwise;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            this.setState({ selectedMaterialCategory:comboData });\r\n            this.props.getMaterialBasedOnMaterialCategory(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n        }else if(fieldName === \"smaterialname\"){\r\n            selectedRecord[\"nmaterialcode\"]=comboData.value;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['needsection']=comboData.item.needsection;\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            this.setState({selectedMaterial:comboData });\r\n            this.props.getMaterialInventoryBasedOnMaterial(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n            \r\n        }else if(fieldName === \"sinventoryid\"){\r\n            selectedRecord[\"nmaterialcode\"]=this.state.selectedMaterial.value;\r\n            selectedRecord[\"materialInvCode\"]=comboData.item.nmaterialinventorycode;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            selectedRecord['needsection']=this.props.Login.masterData.selectedMaterial.needsection;\r\n            this.setState({selectedMaterialInventory:comboData });\r\n            // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\r\n            //     selectedRecord['nsectioncode']=transactionStatus.NA;\r\n            // }else{\r\n            selectedRecord['nsectioncode']=this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n            //}\r\n            this.props.getMaterialAvailQtyBasedOnInv(selectedRecord,this.props.Login.masterData,this.state.selectedMaterialCategory);\r\n        }else if(fieldName === \"sinstrumentname\"){\r\n            selectedRecord[\"ninstrumentnamecode\"]=comboData.value;\r\n            selectedRecord[\"sinstrumentname\"]=comboData.label;\r\n            selectedRecord['userInfo']=this.props.Login.userInfo;\r\n            //selectedRecord['sinstrumentid']=undefined;\r\n            selectedRecord['selectedInstrument']=comboData.item;\r\n            this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n        } else {\r\n            this.setState({selectedInstrumentId:comboData });\r\n        }\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onMultiColumnValue = (value, key, flag, label, keys) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n            if (flag) {\r\n                keys.map((objkey, index) => {\r\n                    return selectedRecord[objkey] = { \"label\": value[0][label[index]], \"value\": value[0][objkey] }\r\n                })\r\n            }\r\n        } else {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = \"\";\r\n            });\r\n            keys.map((objkey, index) => {\r\n                return selectedRecord[objkey] = \"\"\r\n            })\r\n        }\r\n        this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\r\n    }\r\n\r\n    onMultiColumnMAHChange = (value, key) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    clearComponentInput = () => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"nproductcode\"] = undefined;\r\n        selectedRecord[\"ncomponentcode\"] = undefined;\r\n        selectedRecord[\"smanuflotno\"] = \"\";\r\n        selectedRecord[\"dateprompt\"] = transactionStatus.NO;\r\n        selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\r\n        selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord={};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    saveSample =(addedsamplelist) =>{\r\n    if(addedsamplelist === undefined ){\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n      }else if(addedsamplelist.length > 0){\r\n        let sampleArray = [];\r\n        addedsamplelist.map(item => \r\n            sampleArray.push({\r\n                npreregno:item.npreregno, \r\n                ntransactionsamplecode:item.ntransactionsamplecode, \r\n                ntransactiontestcode : item.ntransactiontestcode,\r\n                nbatchmastercode : this.props.Login.masterData.SelectedBatchmaster ? \r\n                this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\r\n                sarno:item.jsonuidata.samplelist.sarno,\r\n                ssamplearno:item.jsonuidata.samplelist.ssamplearno,\r\n                stestname:item.jsonuidata.samplelist.stestname,\r\n                jsonuidata : {\r\n                    samplelist : item.jsonuidata.samplelist,\r\n                },\r\n                jsondata : {\r\n                    samplelist : item.jsondata.samplelist,\r\n                }\r\n              }\r\n            )\r\n        )\r\n\r\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster &&\r\n        this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n        // batchSample = {\r\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\r\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\r\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\r\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\r\n        // }\r\n        //jsondata : \r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                batchSample:nbatchmastercode,\r\n                sampleArray,\r\n                userInfo : this.props.Login.userInfo,\r\n                masterData:this.props.Login.masterData,\r\n                nregtypecode : this.props.Login.masterData.defaultRegistrationType ?\r\n                this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode \r\n                                              : transactionStatus.NA,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\r\n            }\r\n        }\r\n         this.props.createSampleAction(inputParam.inputData);\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n      }\r\n    \r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        \r\n        if(this.props.Login.operation===\"createSample\"){\r\n            this.saveSample(this.state.addedSamplesList)\r\n        }else if(this.props.Login.operation===\"initiate\"){\r\n            this.testStartActions(this.props.Login.masterData.SelectedBatchmaster,this.props.Login.testStartId)\r\n        }else if(this.props.Login.operation===\"complete\"){\r\n            this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,this.props.Login.completeId)\r\n        }else if(this.props.Login.operation===\"createiqcsample\"){\r\n            this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster)\r\n        }else{\r\n        let inputData = {};\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n        this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        if(this.props.Login.operation ===\"create\"){\r\n        inputData[\"fromDate\"]= obj.fromDate;\r\n        inputData[\"toDate\"]= obj.toDate;\r\n        }\r\n       \r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nneedcombodataforFilter\"]=\"true\"\r\n        inputData[\"needFilterSubmit\"]=\"false\"\r\n        inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                  this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                                 this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\r\n        inputData[\"ntestcode\"]= this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\r\n        inputData[\"nsectioncode\"]=this.state.selectedSection ? this.state.selectedSection.item.nsectioncode:transactionStatus.NA;\r\n        //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\r\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\r\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\r\n        inputData[\"ninstrumentcatcode\"]=this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\r\n        inputData[\"ninstrumentcode\"]=this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\r\n        inputData[\"nproductcode\"]=this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\r\n        inputData[\"ntransactionstatus\"]=transactionStatus.DRAFT;\r\n        inputData[\"sbatcharno\"]='-';\r\n        // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\r\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \r\n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n        inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n        inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n        inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId && this.state.selectedInstrumentId.label;\r\n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n        inputData[\"napprovalversioncode\"]= this.props.Login.masterData.realApproveConfigVersion && \r\n        this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n        inputData[\"napprovalconfigcode\"]= this.props.Login.masterData.realApproveConfigVersion && \r\n               this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n        inputData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode:transactionStatus.NA;\r\n       let postParam = undefined;\r\n            postParam = {\r\n                inputListName: \"Batchmaster\", \r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\", \r\n                unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\r\n            };\r\n        const inputParam = {\r\n            classUrl: \"batchcreation\",\r\n            methodUrl: \"Batchcreation\",\r\n            displayName: \"IDS_BATCHCREATION\",\r\n            inputData: inputData, \r\n            postParam, \r\n            searchRef: this.searchRef,\r\n            operation: this.props.Login.operation, \r\n            saveType, \r\n            formRef,\r\n        }\r\n        if(this.props.Login.operation ===\"create\"){\r\n            this.searchRef.current.value = \"\"; \r\n            this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData,inputParam[\"operation\"]);\r\n        }else{\r\n            inputData[\"nbatchmastercode\"]= this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n            inputData[\"SelectedBatchmaster\"]= this.props.Login.masterData.SelectedBatchmaster;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, \r\n                            masterData : this.props.Login.masterData\r\n                        },\r\n                        openModal: true, \r\n                        screenName: \"IDS_BATCHCREATION\",\r\n                        operation : inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }else{\r\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData,inputParam[\"operation\"]);\r\n            }\r\n        }\r\n    }\r\n        // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        // if (esignNeeded) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\r\n        //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\r\n        // }\r\n    }\r\n\r\n    deleteBatchCreation = (selectedBatch,deleteId,operation) => {\r\n        if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || \r\n            selectedBatch.ntransactionstatus === transactionStatus.INITIATED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        }\r\n        else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\", \r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedBatch.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userInfo: this.props.Login.userInfo,\r\n                                    ndesigntemplatemappingcode : this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode:transactionStatus.NA,\r\n                                    nsampletypecode : this.props.Login.masterData.defaultSampleType.nsampletypecode\r\n                                 },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n                inputData[\"fromDate\"]= obj.fromDate;\r\n                inputData[\"toDate\"]= obj.toDate;\r\n                inputData[\"currentdate\"] = formatInputDate(new Date(), true)\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType;\r\n                inputData[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? \r\n                          this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n                           this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n                inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n                //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n                inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\r\n                inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n                // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n                inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n                inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n                inputData[\"selectedBatch\"]=selectedBatch;\r\n                inputData[\"samples\"]=this.props.Login.masterData.Samples;         \r\n                const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                operation,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData,\"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchEditData = (editParam) =>{\r\n    if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT){\r\n        this.props.getActiveBatchCreationService(editParam,\r\n            this.props.Login.masterData.SelectedBatchmaster)\r\n       }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n       }\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n    \r\n        if(this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined \r\n        ){\r\n            let inputData = {};\r\n            \r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"]= obj.fromDate;\r\n            inputData[\"toDate\"]= obj.toDate;\r\n            inputData[\"needFilterSubmit\"]=\"true\";\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n            // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n            // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n               this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || \r\n                                                                                        transactionStatus.NA;\r\n            inputData[\"realApproveConfigVersion\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n            inputData[\"realdefaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n            \r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData, \r\n                searchRef: this.searchRef,\r\n            }\r\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"],this.props.Login.masterData);\r\n    }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\"}));\r\n      }\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\r\n    if(this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA || \r\n        this.props.Login.masterData.realRegTypeValue !== null &&\r\n        this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA || \r\n        this.props.Login.masterData.realRegSubTypeValue !== null && \r\n        this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA ||\r\n        this.props.Login.masterData.realApproveConfigVersion !== null && \r\n        this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA ||\r\n        this.props.Login.masterData.defaultFilterStatus !== null) {\r\n\r\n        let inputData = {};\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n        this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n        inputData[\"fromDate\"]= obj.fromDate;\r\n        inputData[\"toDate\"]= obj.toDate;\r\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n\r\n        inputData[\"nsampletypecode\"]=this.props.Login.masterData.realSampleTypeValue &&\r\n        this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n        inputData[\"nregtypecode\"]= this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n        this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n\r\n        inputData[\"nregsubtypecode\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n\r\n        inputData[\"defaultSampleType\"]= this.props.Login.masterData.defaultSampleType;\r\n        \r\n        inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n\r\n        inputData[\"defaultRegistrationSubType\"]= this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n\r\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\r\n\r\n        inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\r\n       \r\n        inputData[\"realApproveConfigVersion\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n\r\n        inputData[\"napprovalversioncode\"]= this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA;\r\n\r\n        //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n        inputData[\"ndesigntemplatemappingcode\"]=this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n        const inputParam = {\r\n            classUrl: \"batchcreation\",\r\n            methodUrl: \"Batchmaster\",\r\n            displayName: \"IDS_BATCHCREATION\",\r\n            inputData: inputData, \r\n            searchRef: this.searchRef,\r\n        }\r\n\r\n      this.props.onActionFilterSubmit(inputParam[\"inputData\"],this.props.Login.masterData);\r\n    }else{\r\n        \r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\"}));\r\n    }\r\n}\r\n  \r\n\r\n    // addtest=(addParam)=>{\r\n    //     if(this.props.Login.masterData.Batchmaster == undefined ){\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" })); \r\n    //     }else{\r\n    //         this.props.getTestInstrumentComboService(addParam)\r\n    //     }\r\n    // }\r\n\r\n    // convertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n    onClickReport = (selectedRecord, flag, ncontrolcode) => {\r\n        const reportParam = {\r\n            classUrl: \"certificategeneration\",\r\n            methodUrl: \"reportGeneration\",\r\n            screenName: \"CertificateGeneration\",\r\n            operation: \"previewReport\",\r\n            primaryKeyField: \"nreleasebatchcode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: -1,\r\n            inputData: {\r\n                sprimarykeyname: 'nreleasebatchcode',\r\n                nprimarykey: selectedRecord.nreleasebatchcode,\r\n                nreleasebatchcode: selectedRecord.nreleasebatchcode,\r\n                ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\r\n                ndecisionstatus: selectedRecord.ndecision,// === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\r\n                nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\r\n                ncontrolcode,\r\n                ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\r\n                userinfo: this.props.Login.userInfo,\r\n                nflag: flag,\r\n                skipbatchvalidation: true,\r\n            }\r\n        };\r\n        this.props.onClickReport(reportParam)\r\n    }\r\n\r\n    reportMethod = (value) => {\r\n        if (value.method === 1) {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\r\n        }\r\n        else {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,updateStore,\r\n    getTestInstrumentComboService,getTestInstrumentCategory,getInstrumentForInstCategory,\r\n    getBatchCreationDetails,onActionFilterSubmit,getProductcategoryAction,\r\n    createBatchmasterAction,getSamplesForGrid,getSelectedBatchCreationDetail,\r\n    createSampleAction,deleteSampleAction,getActiveBatchCreationService,\r\n    updateBatchcreationAction,deleteBatchCreation,batchInitiateAction,\r\n    getBCRegistrationSubType,batchCompleteAction,validateEsignCredential,\r\n    filterColumnData,getBatchhistoryAction,\r\n    getBatchSection,viewInfo,getIqcSamples,getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial,batchSaveIQCActions,getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction,getBCApprovalConfigVersion,getBCRegistrationType,\r\n    getTreeByMaterial,getNewRegSpecification,cancelIQCSampleAction,batchCancelAction,\r\n    batchInitiateDatePopup,batchCompleteDatePopup,getInstrumentID,getBatchViewResultAction\r\n    //,batchTAT\r\n})(injectIntl(BatchCreation));\r\n\r\n"]},"metadata":{},"sourceType":"module"}