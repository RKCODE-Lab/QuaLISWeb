{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicmaster\\\\DynamicMaster.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign'; //import { getFieldSpecification } from './Type1FieldSpecificationList';\n//import AddType1Component from './AddType1Component';\n\nimport { callService, crudMaster, updateStore, validateEsignCredential, fetchRecord, getDynamicMasterCombo } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, extractFieldHeader } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicMaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = () => {\n      console.log(\"props:\", this.props.Login);\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.DynamicMasterDesign.slideoutdesign;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\") {\n                data.push(componentrow);\n              } else {\n                withoutCombocomponent.push(componentrow);\n              }\n            }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = this.comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\") && this.state.controlMap.get(\"Add\").ncontrolcode;\n      this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName);\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: {\n          [\"dynamicmaster\"]: {\n            \"ndynamicmastercode\": deleteParam.selectedRecord.ndynamicmastercode\n          },\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n      let operation = \"\";\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[\"dynamicmaster\"] = {\n          ndynamicmastercode: this.state.selectedRecord[\"ndynamicmastercode\"]\n        }; //this.state.selectedRecord;\n\n        inputData[\"dynamicmaster\"][\"jsondata\"] = {};\n        this.extractedColumnList.map(item => {\n          return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n        selectedId = this.props.Login.selectedId;\n        operation = \"update\";\n      } else {\n        //add                          \n        inputData[\"dynamicmaster\"] = {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \n          nformcode: this.props.Login.userInfo.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode,\n          jsondata: {}\n        };\n        this.extractedColumnList.map(item => {\n          return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n        this.detailedColumnList.map(item => {\n          return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n        operation = \"create\";\n      }\n\n      inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n      console.log(\"input:\", inputData);\n      const inputParam = {\n        classUrl: \"dynamicmaster\",\n        methodUrl: \"DynamicMaster\",\n        displayName: this.props.Login.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.displayName,\n            operation: \"create\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.detailedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log(\"master:\", this.props, this.state);\n    let primaryKeyField = \"ndynamicmastercode\";\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\") && this.state.controlMap.get(\"Edit\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DynamicDataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedColumnList,\n      methodUrl: \"\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecord,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      addRecord: this.openModal,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation ? this.props.Login.operation : \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.slideoutdesign,\n        handleChange: this.handleChange,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.extractedColumnList = [];\n        this.detailedColumnList = [];\n        console.log(\"lang:\", this.props.Login);\n\n        if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign && this.props.Login.masterData.DynamicMasterDesign.screendesign) {\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridItem.map(row => {\n            this.extractedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n          this.props.Login.masterData.DynamicMasterDesign.screendesign.gridMoreItem.map(row => {\n            this.detailedColumnList.push({\n              \"idsName\": row[\"1\"][this.props.Login.userInfo.slanguagetypecode],\n              \"dataField\": row[\"2\"]\n            });\n          });\n        }\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          dataResult: process(this.props.Login.masterData.DynamicMasterData || [], this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData.DynamicMasterData || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.DynamicMasterData || [], dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  fetchRecord,\n  getDynamicMasterCombo\n})(injectIntl(DynamicMaster));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dynamicmaster/DynamicMaster.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DynamicDataGrid","SlideOutModal","Esign","callService","crudMaster","updateStore","validateEsignCredential","fetchRecord","getDynamicMasterCombo","DEFAULT_RETURN","showEsign","getControlMap","extractFieldHeader","ListWrapper","DynamicSlideout","mapStateToProps","state","Login","DynamicMaster","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","console","log","withoutCombocomponent","Layout","masterData","DynamicMasterDesign","slideoutdesign","map","row","children","column","component","hasOwnProperty","componentrow","inputtype","push","comboComponents","childColumnList","columnList","val","comboChild","addId","inputParam","controlMap","has","get","ncontrolcode","userInfo","Map","displayName","slice","retunObj","label","undefined","childList","child","childData","index","findIndex","x","length","y","onInputOnChange","target","name","value","type","checked","deleteRecord","deleteParam","classUrl","methodUrl","inputData","ndynamicmastercode","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","reloadData","onSaveClick","saveType","formRef","extractedColumnList","item","dataField","ndesigntemplatemappingcode","jsondata","detailedColumnList","JSON","stringify","esignNeeded","validateEsign","sreason","password","createRef","skip","take","settings","parseInt","masterStatus","error","getDerivedStateFromProps","warn","render","primaryKeyField","editId","editParam","intl","formatMessage","id","mandatoryFields","forEach","mandatory","handleChange","handleDateChange","onNumericInputChange","comboData","onComboChange","onDropFile","deleteAttachment","timeZoneList","defaultTimeZone","componentDidUpdate","previousProps","Object","values","screendesign","gridItem","slanguagetypecode","gridMoreItem","DynamicMasterData"],"mappings":"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","sourcesContent":["import React  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DynamicDataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\n//import { getFieldSpecification } from './Type1FieldSpecificationList';\r\n//import AddType1Component from './AddType1Component';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, \r\n    fetchRecord,getDynamicMasterCombo } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, extractFieldHeader } from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout.jsx'\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DynamicMaster extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.detailedColumnList= [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }         \r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"master:\", this.props, this.state);\r\n        let primaryKeyField = \"ndynamicmastercode\";\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\")\r\n               && this.state.controlMap.get(\"Edit\").ncontrolcode;\r\n    \r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName \r\n                            && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n            inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n        const mandatoryFields=[];\r\n        this.extractedColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );   \r\n        \r\n        return (<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">                           \r\n                            {this.state.data ?\r\n                                <DynamicDataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedColumnList}\r\n                                    methodUrl={\"\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecord}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {this.openModal}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight = {'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ? \r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation ? this.props.Login.operation : \"create\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                                <DynamicSlideout\r\n                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.DynamicMasterDesign &&\r\n                                        this.props.Login.masterData.DynamicMasterDesign.slideoutdesign}\r\n                                    handleChange={this.handleChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    comboData={this.props.Login.comboData}\r\n                                    onComboChange={this.onComboChange}\r\n                                    onDropFile={this.onDropFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    Login={this.props.Login}\r\n                                />\r\n                            }\r\n                          \r\n                    /> :\"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    openModal = () => {\r\n        console.log(\"props:\", this.props.Login);\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.DynamicMasterDesign.slideoutdesign\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            data.push(componentrow)\r\n                        } else {\r\n                            withoutCombocomponent.push(componentrow)\r\n                        }\r\n                    })\r\n                        : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                })\r\n            })\r\n        })\r\n        const comboComponents = data\r\n        let childColumnList = {};\r\n        data.map(columnList => {\r\n            const val = this.comboChild(data, columnList, childColumnList, true);\r\n            data = val.data;\r\n            childColumnList = val.childColumnList\r\n        })\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\")\r\n                    && this.state.controlMap.get(\"Add\").ncontrolcode;\r\n\r\n        this.props.getDynamicMasterCombo(this.props.Login.masterData, this.props.Login.userInfo, addId,\r\n                                        data, this.state.selectedRecord, childColumnList, comboComponents, \r\n                                        withoutCombocomponent, false, true, new Map(), true, \"create\", this.props.Login.displayName)\r\n\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {        \r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.extractedColumnList = [];    \r\n                this.detailedColumnList = [];            \r\n                console.log(\"lang:\", this.props.Login);\r\n                \r\n                if (this.props.Login.masterData && this.props.Login.masterData.DynamicMasterDesign &&\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign)\r\n                {\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridItem.map(row => {\r\n                        this.extractedColumnList.push({\"idsName\":row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\":row[\"2\"]}) ;                     \r\n                    })\r\n                    this.props.Login.masterData.DynamicMasterDesign.screendesign.gridMoreItem.map(row => {\r\n                        this.detailedColumnList.push({\"idsName\":row[\"1\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\":row[\"2\"]}) ;                     \r\n                    })\r\n                }\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.DynamicMasterData || [],\r\n                    dataResult: process(this.props.Login.masterData.DynamicMasterData || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {        \r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }         \r\n                this.setState({\r\n                    data: this.props.Login.masterData.DynamicMasterData || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.DynamicMasterData || [],dataState),\r\n                    dataState\r\n                });\r\n            }  \r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    //deleteRecord = (selectedRecord, operation, ncontrolCode) => {\r\n    deleteRecord = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: {\r\n                [\"dynamicmaster\"]: {\"ndynamicmastercode\":deleteParam.selectedRecord.ndynamicmastercode},//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:\"delete\",\r\n            dataState:this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation:\"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n\r\n        let inputData = [];\r\n        let dataState =undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        let operation = \"\";\r\n        if (this.props.Login.operation === \"update\") {    // edit\r\n            dataState=this.state.dataState\r\n            inputData[\"dynamicmaster\"] = {ndynamicmastercode:this.state.selectedRecord[\"ndynamicmastercode\"]};//this.state.selectedRecord;\r\n            inputData[\"dynamicmaster\"][\"jsondata\"] = {}; \r\n            this.extractedColumnList.map(item => {\r\n                return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\r\n            })\r\n            selectedId = this.props.Login.selectedId; \r\n            operation = \"update\";\r\n        }\r\n        else {\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode, \r\n                                            nformcode:this.props.Login.userInfo.nformcode, \r\n                                            ndesigntemplatemappingcode:this.props.Login.masterData.DynamicMasterDesign.ndesigntemplatemappingcode, jsondata:{} };\r\n\r\n            this.extractedColumnList.map(item => {\r\n                return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField]:\"\"\r\n            })\r\n            this.detailedColumnList.map(item => {\r\n                return inputData[\"dynamicmaster\"][\"jsondata\"][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField]:\"\"\r\n            })\r\n            operation = \"create\";\r\n           \r\n        }\r\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n        console.log(\"input:\", inputData);\r\n        const inputParam = {\r\n            classUrl: \"dynamicmaster\",\r\n            methodUrl: \"DynamicMaster\",\r\n            displayName: this.props.Login.displayName,\r\n            inputData: inputData, operation:operation,\r\n            saveType, formRef,  selectedId,dataState\r\n\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.Login.displayName,\r\n                    operation: \"create\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, updateStore, validateEsignCredential, \r\n    fetchRecord,getDynamicMasterCombo})(injectIntl(DynamicMaster));\r\n"]},"metadata":{},"sourceType":"module"}