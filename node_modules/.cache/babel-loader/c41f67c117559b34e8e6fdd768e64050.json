{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicPreRegDesign.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData, getRegistrationTemplate, getEditRegTemplate, crudMaster, getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData, rearrangeDateFormatforKendoDataTool, validateEsignCredential, validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster } from '../../actions/index';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\nimport { ageCalculate, childComboClear, constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone, extractFieldHeader, formatDate, formatInputDate, getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList, showEsign, validateEmail } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport PortalModal from '../../PortalModal';\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport DynamicSlideout from './DynamicSlideout.jsx';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { designProperties, transactionStatus, SampleType, designComponents } from '../../components/Enumeration';\nimport FormInput from '../../components/form-input/form-input.component';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"react-awesome-query-builder\";\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport AddMasterRecords from './AddMasterRecords';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DynamicPreRegDesign extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          selectedRecord: selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord['filterquery'] !== \"\" && selectedRecord['filterquery'] !== undefined) {\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: selectedRecord['filterquery']\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let selecteddata = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component.hasOwnProperty(\"child\")) {\n        const selectedRecord = this.state.selectedRecord;\n        component.child.map(y => {\n          // component.filterfields.filter(x=>x.)\n          const withoutCombocomponent = this.state.withoutCombocomponent;\n          const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\n\n          if (readonlyfields !== -1) {\n            if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\n              selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\";\n              selectedRecord[y.label + 'value'] = selectedRecord[y.label];\n\n              if (withoutCombocomponent[readonlyfields].child) {\n                const Age = withoutCombocomponent.filter(x => x.name === 'Age');\n                withoutCombocomponent[readonlyfields].child.map(k => {\n                  if (k.label === Age[0].label) {\n                    const age = ageCalculate(selectedRecord[y.label]);\n                    selectedRecord[Age[0].label] = age;\n                  }\n                });\n              }\n            } else {\n              if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              } else {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              }\n            }\n          } else {\n            const comboComponents = this.state.comboComponents;\n            const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\n\n            if (readonlyfields !== -1) {\n              if (this.props.Login.comboData[y.label]) {\n                const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK]);\n                if (val.length > 0) selectedRecord[y.label] = val[0]; //selectedRecord[y.label]=this.props.Login.comboData[y.label].filter(item=>item.value===selecteddata[y.foriegntablePK])\n              }\n            }\n          }\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            loadCustomSearchFilter: false // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n          }\n        };\n        this.props.updateStore(updateInfo); // }\n      }\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl.table.item.nformcode === 137) {\n          selectedMaster[item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      const {\n        selectedMaster\n      } = this.state;\n      selectedMaster[dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || {};\n      selectedMaster[name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl.table.item.nformcode === 137) {\n          if (selectedMaster.nneedcurrentaddress === 3) {\n            selectedMaster.sflatnotemp = selectedMaster.sflatno;\n            selectedMaster.shousenotemp = selectedMaster.shouseno;\n            selectedMaster.spostalcodetemp = selectedMaster.spostalcode;\n            selectedMaster.sstreettemp = selectedMaster.sstreet;\n            selectedMaster.scitynametemp = selectedMaster.scityname;\n            selectedMaster.sdistrictnametemp = selectedMaster.sdistrictname;\n            selectedMaster.sregionnametemp = selectedMaster.sregionname;\n          } else {\n            selectedMaster.sflatnotemp = \"\";\n            selectedMaster.shousenotemp = \"\";\n            selectedMaster.spostalcodetemp = \"\";\n            selectedMaster.sstreettemp = \"\";\n            selectedMaster.scitynametemp = \"\";\n            selectedMaster.sdistrictnametemp = \"\";\n            selectedMaster.sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: this.props.Login.selectedControl.table.item.nformcode\n      };\n      inputData[this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = this.props.Login.selectedControl.table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.selectedControl.table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: this.props.Login.selectedControl.table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = this.props.Login.masterDesign.screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = this.props.Login.masterDesign.screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = this.props.Login.masterDesign.screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: this.props.Login.selectedControl.table.item.nformcode,\n          ndesigntemplatemappingcode: this.props.Login.masterDesign.ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        this.props.Login.masterDesign && this.props.Login.masterDesign.slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[componentrow.label].value,\n                      label: selectedMaster[componentrow.label].label,\n                      pkey: selectedMaster[componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[componentrow.label] || new Date(), false) : selectedMaster[componentrow.label] ? formatDate(selectedMaster[componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[`tz${componentrow.label}`] ? {\n                        value: selectedMaster[`tz${componentrow.label}`].value,\n                        label: selectedMaster[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ? {\n                    value: selectedMaster[component.label].value,\n                    label: selectedMaster[component.label].label,\n                    pkey: selectedMaster[component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[component.label] || new Date(), false) : selectedMaster[component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[`tz${component.label}`] ? {\n                      value: selectedMaster[`tz${component.label}`].value,\n                      label: selectedMaster[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ? selectedMaster[component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (this.props.Login.selectedControl.table.item.component === 'Type3Component' && this.props.Login.selectedControl.table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = true;\n        this.props.Login.masterextractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList.map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.state.withoutCombocomponent,\n        comboComponents: this.state.comboComponents,\n        selectedRecord: this.state.selectedRecord,\n        selectedRecordName: 'selectedRecord',\n        loadSubSample: false,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.comboData,\n        comboName: 'comboData',\n        classUrl: this.props.Login.selectedControl.table.item.classUrl,\n        methodUrl: this.props.Login.selectedControl.table.item.methodUrl,\n        displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      //  }\n    };\n\n    this.mandatoryValidation = () => {\n      const mandatoryFields = [];\n      const selectedRecord = this.state.selectedRecord;\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.mandatory === true) {\n                if (componentrow.recordbasedshowhide) {\n                  if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              } else {\n                if (componentrow.inputtype === \"email\") {\n                  selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                }\n              }\n\n              return null;\n            }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"alertPreFix\": this.props.intl.formatMessage({\n                id: \"IDS_VALID\"\n              }),\n              \"validateFunction\": validateEmail,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }) : \"\" : \"\";\n          });\n        });\n      });\n      return mandatoryFields;\n    };\n\n    this.addMasterRecord = control => {\n      let fieldList = [];\n      let masterComboColumnFiled = [];\n      let extractedColumnList = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl: control,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList = extractFieldHeader(Object.values(fieldList));\n        masterComboColumnFiled = extractedColumnList.filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl: control,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl: control\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } else if (control.table.item.component === 'patient') {\n        extractedColumnList = [{\n          mandatory: true,\n          idsName: \"IDS_FIRSTNAME\",\n          dataField: \"sfirstname\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_LASTNAME\",\n          dataField: \"slastname\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_DATEOFBIRTH\",\n          dataField: \"ddob\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_GENDER\",\n          dataField: \"ngendercode\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_COUNTRY\",\n          dataField: \"ncountrycode\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_REGIONNAME\",\n          dataField: \"nregioncode\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_DISTRICTNAME\",\n          dataField: \"ndistrictcode\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CITY\",\n          dataField: \"ncitycode\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_STREET\",\n          dataField: \"sstreet\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_HOUSENO\",\n          dataField: \"shouseno\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_FLATNO\",\n          dataField: \"sflatno\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURENTREGION\",\n          dataField: \"nregioncodetemp\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURRENTDISTRICT\",\n          dataField: \"ndistrictcodetemp\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURRENTCITY\",\n          dataField: \"ncitycodetemp\",\n          mandatoryLabel: \"IDS_SELECT\",\n          controlType: \"selectbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURRENTSTREET\",\n          dataField: \"sstreettemp\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURRENTHOUSENO\",\n          dataField: \"shousenotemp\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }, {\n          mandatory: true,\n          idsName: \"IDS_CURRENTFLATNO\",\n          dataField: \"sflatnotemp\",\n          mandatoryLabel: \"IDS_ENTER\",\n          controlType: \"textbox\"\n        }];\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl: control,\n          //  masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: \"npatientcode\",\n          masterComboColumnFiled: masterComboColumnFiled\n        };\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.onExecuteClick = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const userInfo = this.props.Login.userInfo;\n      const sampleRegistration = {};\n      sampleRegistration[\"jsondata\"] = {};\n      const dateList = [];\n      const defaulttimezone = this.props.Login.defaultTimeZone;\n      console.log(\"selected in execute:\", selectedRecord);\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  } else {\n                    sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  }\n\n                  dateList.push(componentrow.label);\n                }\n              });\n              return sampleRegistration;\n            } else {\n              if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                } else {\n                  sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n                }\n\n                if (component.timezone) {\n                  sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                }\n\n                dateList.push(component.label);\n              }\n\n              return sampleRegistration;\n            }\n          });\n        });\n      });\n      const {\n        dateconstraints,\n        combinationunique\n      } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata);\n      const inputParam = {\n        Registration: sampleRegistration,\n        DateList: dateList,\n        dateconstraints: dateconstraints,\n        userinfo: userInfo,\n        combinationunique: combinationunique\n      };\n      this.props.validatePreview(inputParam);\n    };\n\n    this.getJsondata = templatedata => {\n      let dateconstraints = [];\n      let combinationunique = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n\n              if (componentRow.inputtype === 'date') {\n                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              }\n\n              return null;\n            });\n          } else {\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n\n            if (component.inputtype === 'date') {\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        combinationunique,\n        dateconstraints\n      };\n      return jsondata;\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.filterComboChange = comboData => {\n      this.setState({\n        selectedSampleType: comboData\n      });\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData();\n    };\n\n    this.closeModal = () => {\n      let updateInfo = {};\n\n      if (this.props.Login.addMaster) {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: {},\n            selectedControl: {},\n            masterextractedColumnList: [],\n            masterfieldList: {},\n            masterprimaryKeyField: \"\",\n            addMaster: false\n          }\n        };\n      } else if (!this.props.Login.loadCustomSearchFilter) {\n        let loadEsign = this.props.Login.loadEsign;\n        let openModal = this.props.Login.openModal;\n        let openPortal = this.props.Login.openPortal;\n        let selectedRecord = this.props.Login.selectedRecord;\n\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\") {\n            loadEsign = false;\n            openModal = false;\n            openPortal = false;\n            selectedRecord = {};\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n          }\n        } else {\n          openModal = false;\n          openPortal = false;\n          selectedRecord = {};\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            openPortal,\n            loadEsign,\n            selectedRecord,\n            selectedId: null,\n            design: [],\n            selectedFieldRecord: {},\n            showConfirmAlert: false\n          } // data: {openModal, loadEsign, selectedRecord}\n\n        };\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadCustomSearchFilter: false,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          } // data: {openModal, loadEsign, selectedRecord}\n\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = ncontrolCode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: \"copy\",\n          ncontrolCode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n      inputData['registrationtemplate'] = {\n        nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        sregtemplatename: this.state.selectedRecord['sregtemplatename'],\n        nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode\n      };\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteApproveTemplate(\"delete\", deleteId));\n    };\n\n    this.deleteApproveTemplate = (operation, ncontrolCode) => {\n      const masterData = this.props.Login.masterData;\n      const postParam = {\n        inputListName: \"RegistrationTemplate\",\n        selectedObject: \"selectedTemplate\",\n        primaryKeyField: \"nreactregtemplatecode\",\n        fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n        primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const data = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (this.state.breadCrumbData[0].item.value === -1) componentrow['label'] = componentrow.label + \"_child\";\n                data.push(componentrow.label);\n              });\n            } else {\n              if (this.state.breadCrumbData[0].item.value === -1) {\n                component['label'] = component.label + \"_child\";\n                data.push(component.label);\n              } else {\n                data.push(component.label);\n              }\n            }\n          });\n        });\n      });\n      const inputParam = {\n        methodUrl: \"RegistrationTemplate\",\n        classUrl: 'dynamicpreregdesign',\n        postParam,\n        searchRef: this.searchRef,\n        inputData: {\n          registrationtemplate: {\n            sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            jsonString: JSON.stringify(Layout)\n          },\n          userinfo: this.props.Login.userInfo,\n          dynamicFields: data,\n          nsampletypecode: this.state.breadCrumbData[0].item.value\n        },\n        operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedSampleType) {\n        this.props.getRegistrationTemplate(this.state.selectedSampleType, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.getPreviewTemplate = (masterData, userInfo, editId) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.selectedTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\") {\n                data.push(componentrow);\n              } else {\n                withoutCombocomponent.push(componentrow);\n              }\n            }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = this.comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true);\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedRecord = this.state.selectedRecord || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedRecord[comboName] = comboData;\n      console.log(\"selected:\", selectedRecord, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          let comboData = this.props.Login.comboData;\n          const withoutCombocomponent = this.state.withoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.state.comboComponents,\n            withoutCombocomponent,\n            selectedRecord,\n            comboData\n          };\n          const childParam = childComboClear(inputParam);\n          selectedRecord = childParam.selectedRecord;\n          comboData = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'toggle') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedRecord[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      }); // this.saveComponentProperties()\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord,\n        withoutCombocomponent\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n        const age = ageCalculate(dateValue);\n        const Age = withoutCombocomponent.filter(x => x.name === 'Age');\n        selectedRecord[Age[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent, control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.mastedataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          let comboData = this.props.Login.mastedataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents,\n            withoutCombocomponent,\n            selectedMaster,\n            comboData\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster = childParam.selectedRecord;\n          comboData = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      const selectedMaster = this.state.selectedMaster || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[event.target.name] = radiotext;\n      } else {\n        selectedMaster[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      const {\n        selectedMaster\n      } = this.state;\n      selectedMaster[dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster;\n      selectedMaster[name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster;\n\n      if (selectedMaster[control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[control.label] < parseFloat(control.max))) {\n            selectedMaster[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[control.label] > parseFloat(control.min))) {\n            selectedMaster[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDrop = (value, type, oldVlaue) => {\n      const design = this.state.design;\n      let columns = design[0].children;\n      let designData = this.props.Login.ReactInputFields;\n      value = JSON.parse(value.fields);\n      value = { ...value,\n        type: \"component\"\n      };\n      let designDataIndex = designData.findIndex(item => item.label === value.label);\n      let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\n      let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\n      if (designDataIndex >= 0) designData.splice(designDataIndex, 1);\n\n      if (firstIndex >= 0) {\n        if (type !== 1) {\n          columns[0].children.splice(firstIndex, 1); // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[0].children.findIndex(item => item.label === value.label);\n            let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\n            columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 1) {\n        if (columns[0]) {\n          columns[0].children.push(value);\n        } else {\n          columns[0] = {\n            id: \"1\",\n            type: \"column\",\n            children: []\n          };\n          columns[0].children.push(value);\n        }\n      }\n\n      if (secondIndex >= 0) {\n        if (type !== 2) {\n          columns[1].splice(secondIndex, 1);\n        } else {\n          if (oldVlaue) {\n            oldVlaue = JSON.parse(oldVlaue);\n            let from = columns[1].children.findIndex(item => item.label === value.label);\n            let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\n            columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\n          }\n        }\n      } else if (type === 2) {\n        if (columns[1]) {\n          columns[1].children.push(value);\n        } else {\n          columns[1] = {\n            id: \"2\",\n            type: \"column\",\n            children: []\n          };\n          columns[1].children.push(value);\n        }\n      } // design.push(columns)\n\n\n      this.setState({\n        designData,\n        design\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      addTemplateId: -1,\n      editId: -1,\n      deleteId: -1,\n      approveID: -1,\n      previewId: -1,\n      copyID: -1,\n      selectedRecord: {},\n      sampleTypeOptions: [],\n      selectedSampleType: {},\n      breadCrumbData: [],\n      design: [],\n      comboComponents: [],\n      withoutCombocomponent: [],\n      selectedMaster: {}\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.masterStatus\n      }));\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata;\n    const filterParam = {\n      inputListName: \"RegistrationTemplate\",\n      selectedObject: \"selectedTemplate\",\n      primaryKeyField: \"nreactregtemplatecode\",\n      fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.state.breadCrumbData[0] ? this.state.breadCrumbData[0].item.value : -1\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"realSampleType\", \"SampleTypes\"],\n      searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, this.state.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.state.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      screenName: \"Dynamic Pre-Reg Design\",\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || [],\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: template => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedTemplate,\n      primaryKeyField: \"nreactregtemplatecode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"stransdisplaystatus\" // secondField=\"stransdisplaystatus\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: this.state.addTemplateId,\n      filterParam: filterParam,\n      hidePaging: true,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getReactInputFields(this.props.Login.userInfo, 'create'),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_SAMPLETYPEFILTER\": /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nsampletypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.sampleTypeOptions,\n          value: this.state.selectedSampleType ? this.state.selectedSampleType : \"\",\n          onChange: value => this.filterComboChange(value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 53\n          }\n        })))\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.selectedTemplate ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedTemplate.sregtemplatename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-secondary\"} btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedTemplate.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREVIEW\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.getPreviewTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.previewId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"delete\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1,\n      onClick: () => this.ConfirmDelete(this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approve\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.approveID) === -1,\n      onClick: () => this.deleteApproveTemplate('approve', this.state.approveID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"copy\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\n      ,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.openModal(this.state.copyID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 41\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 57\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 69\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 89\n        }\n      }, component.children.map(componentrow => //<Col md={12 / componentrow.length}>\n      componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n        md: componentrow && componentrow.length || 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 105\n        }\n      }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 105\n        }\n      }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 93\n        }\n      }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 93\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\"))) : \"\"))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PreRegDesignPopUp, {\n      closeModal: this.closeModal,\n      nsampletypecode: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1,\n      ncategorybasedflowrequired: this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4,\n      searchRef: this.searchRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 25\n      }\n    })) : \"\", this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      size: this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\",\n      onSaveClick: this.props.Login.addMaster ? this.onSaveMasterRecord : this.props.Login.operation === 'copy' ? this.onSaveClick : this.props.Login.operation === \"preview\" ? this.onExecuteClick : this.closeModal,\n      hideSave: this.props.Login.addMaster ? false : this.props.Login.operation === 'copy' ? false : true,\n      loginoperation: this.props.Login.operation === 'copy' ? false : true,\n      operation: this.props.Login.operation,\n      showValidate: this.props.Login.addMaster ? false : this.props.Login.operation === \"preview\" ? true : false,\n      screenName: this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      onExecuteClick: this.onExecuteClick,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.props.Login.addMaster ? this.state.selectedMaster : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.addMaster ? this.props.Login.masterextractedColumnList.filter(x => x.mandatory === true) : this.props.Login.operation === 'copy' ? [{\n        \"idsName\": \"IDS_TEMPLATENAME\",\n        \"dataField\": \"sregtemplatename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'copy' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"sregtemplatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            sregtemplatename: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent && this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n        filter: this.props.Login.kendoFilter,\n        handleFilterChange: this.handleFilterChange,\n        filterData: this.props.Login.lstPatient || [],\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        fields: this.props.Login.fields || [],\n        gridColumns: this.props.Login.gridColumns || [],\n        onRowClick: this.handleKendoRowClick,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.props.Login.fields || {},\n        onChange: this.onChangeAwesomeQueryBuilder,\n        tree: this.props.Login.awesomeTree,\n        config: this.props.Login.awesomeConfig,\n        skip: this.props.Login.kendoSkip,\n        take: this.props.Login.kendoTake,\n        handlePageChange: this.handlePageChange,\n        gridColumns: this.props.Login.gridColumns || [],\n        filterData: this.props.Login.lstPatient,\n        onRowClick: this.handleKendoRowClick,\n        handleExecuteClick: this.handleExecuteClick,\n        userInfo: this.props.Login.userInfo // static={true}\n        // controlMap={this.state.controlMap}\n        // dataState={this.state.dataState}\n        // dataStateChange={this.dataStateChange}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 46\n        }\n      }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n        selectedControl: this.props.Login.selectedControl,\n        fieldList: this.props.Login.masterfieldList,\n        extractedColumnList: this.props.Login.masterextractedColumnList,\n        primaryKeyField: this.props.Login.masterprimaryKeyField,\n        selectedRecord: this.state.selectedMaster || {},\n        onInputOnChange: this.onInputOnChangeMaster,\n        onComboChange: this.onComboChangeMaster,\n        handleDateChange: this.handleDateChangeMaster,\n        dataList: this.props.Login.masterdataList,\n        onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n        masterDesign: this.props.Login.masterDesign,\n        mastertimeZoneList: this.props.Login.mastertimeZoneList,\n        masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n        onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n        handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n        onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n        onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n        onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n        userInfo: this.props.Login.userInfo,\n        Login: this.props.Login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate.jsondata //handleChange={this.handleChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        custombuttonclick: this.custombuttonclick,\n        onNumericBlur: this.onNumericBlur,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      userRoleControlRights,\n      controlMap,\n      addTemplateId,\n      sampleTypeOptions,\n      breadCrumbData,\n      selectedSampleType,\n      editId,\n      deleteId,\n      approveID,\n      copyID,\n      selectedRecord,\n      comboComponents,\n      previewId,\n      withoutCombocomponent,\n      kendoSkip,\n      kendoTake,\n      awesomeConfig,\n      awesomeTree,\n      kendoFilter,\n      selectedMaster\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n      addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\n      editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\n      deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\n      approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\n      copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\n      previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\n    }\n\n    if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      breadCrumbData = sampleTypeOptions.length > 0 ? [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": sampleTypeOptions[0].label,\n        \"item\": sampleTypeOptions[0]\n      }] : [];\n      updateState = true;\n    }\n\n    if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\n      updateState = true;\n      breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\n      updateState = true;\n      selectedMaster = this.props.Login.selectedMaster;\n    }\n\n    if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\n      updateState = true;\n      comboComponents = this.props.Login.comboComponents;\n    }\n\n    if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\n      updateState = true;\n      withoutCombocomponent = this.props.Login.withoutCombocomponent;\n    } // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\n    //     updateState = true;\n    //     kendoTake = this.props.Login.kendoTake\n    // }\n\n\n    if (updateState) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        addTemplateId,\n        sampleTypeOptions,\n        breadCrumbData,\n        selectedSampleType,\n        editId,\n        deleteId,\n        approveID,\n        copyID,\n        selectedRecord,\n        comboComponents,\n        previewId,\n        withoutCombocomponent,\n        selectedMaster\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getReactInputFields,\n  selectRegistrationTemplate,\n  filterColumnData,\n  getRegistrationTemplate,\n  getEditRegTemplate,\n  getPreviewTemplate,\n  getChildValues,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  validateEsignCredential,\n  validatePreview,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster\n})(injectIntl(DynamicPreRegDesign));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicPreRegDesign.jsx"],"names":["React","connect","injectIntl","updateStore","getReactInputFields","selectRegistrationTemplate","filterColumnData","getRegistrationTemplate","getEditRegTemplate","crudMaster","getPreviewTemplate","getChildValues","getDynamicFilter","getDynamicFilterExecuteData","rearrangeDateFormatforKendoDataTool","validateEsignCredential","validatePreview","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","DEFAULT_RETURN","Row","Col","FormGroup","FormLabel","Card","Nav","ListMaster","ContentPanel","MediaLabel","ReadOnlyText","ageCalculate","childComboClear","constructOptionList","convertDateTimetoStringDBFormat","deleteAttachmentDropZone","extractFieldHeader","formatDate","formatInputDate","getControlMap","getSameRecordFromTwoArrays","onDropAttachFileList","showEsign","validateEmail","toast","PreRegDesignPopUp","FormSelectSearch","BreadcrumbComponent","Affix","PortalModal","faCopy","faEye","faPencilAlt","faThumbsUp","faTrashAlt","FontAwesomeIcon","ConfirmMessage","DynamicSlideout","SlideOutModal","Esign","designProperties","transactionStatus","SampleType","designComponents","FormInput","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","getFieldSpecification","AddMasterRecords","getFieldSpecification1","getFieldSpecification3","mapStateToProps","state","Login","DynamicPreRegDesign","Component","constructor","props","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","selectedRecord","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","skip","kendoTake","take","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","seletedFilterComponent","filterquery","warn","intl","formatMessage","id","handleKendoRowClick","selecteddata","dataItem","hasOwnProperty","child","map","y","withoutCombocomponent","readonlyfields","findIndex","k","label","Age","x","name","age","languagetypeCode","comboComponents","comboData","val","item","value","foriegntablePK","length","loadCustomSearchFilter","onComboChangeMaster","fieldName","selectedMaster","selectedControl","table","nformcode","tableDataField","foreignDataField","childIndex","masterfieldList","masterdataList","setState","handleDateChangeMaster","dateName","dateValue","onNumericInputOnChangeMaster","onInputOnChangeMaster","target","type","checked","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","onSaveMasterRecord","saveType","formRef","inputData","methodUrl","toLowerCase","nmastersitecode","masterDesign","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","jsondata","jsonuidata","dateList","defaulttimezone","slideoutdesign","row","children","column","componentrow","inputtype","pkey","nquerybuildertablecode","source","mandatory","loadcurrentdate","Date","timezone","push","JSON","stringify","masterextractedColumnList","dataField","isJsonField","jsonObjectName","controlType","dateField","controlName","NO","inputParam","selectedRecordName","loadSubSample","comboName","classUrl","displayName","sdisplayname","operation","masterData","mandatoryValidation","mandatoryFields","selectedTemplate","recordbasedshowhide","parentLabel","recordbasedhide","control","fieldList","masterComboColumnFiled","extractedColumnList","get","Object","values","primaryKeyField","keys","addMaster","masterprimaryKeyField","ndesigncomponentcode","COMBOBOX","idsName","mandatoryLabel","onExecuteClick","sampleRegistration","defaultTimeZone","console","log","dateconstraints","combinationunique","getJsondata","Registration","DateList","templatedata","componentRow","unique","LABEL","displayname","VALUE","dateConstraintArraySQL","openFilter","showFilter","filterComboChange","selectedSampleType","closeFilter","onFilterSubmit","reloadData","closeModal","loadEsign","openModal","openPortal","selectedId","design","selectedFieldRecord","showConfirmAlert","logic","filters","ncontrolCode","screenName","onSaveClick","dataState","nreactregtemplatecode","sregtemplatename","nsampletypecode","searchRef","esignNeeded","userRoleControlRights","screenData","ConfirmDelete","deleteId","confirmMessage","confirm","deleteApproveTemplate","postParam","inputListName","selectedObject","fetchUrl","primaryKeyValue","fecthInputObject","breadCrumbData","Layout","registrationtemplate","jsonString","dynamicFields","current","editId","childColumnList","columnList","comboChild","Map","slice","retunObj","childList","childData","index","onComboChange","customName","valuemember","childComboList","parentList","inputParem","primarykeyField","childParam","onInputOnChange","radiotext","YES","test","includes","indexOf","indexcomma","validateEsign","sreason","nreasoncode","spredefinedreason","password","onNumericInputChange","onNumericBlur","max","parseFloat","precision","parseInt","min","handleDateChange","CLINICALTYPE","onComboChangeMasterDyanmic","mastercomboComponents","masterwithoutCombocomponent","getChildValuesForAddMaster","mastedataList","onInputOnChangeMasterDynamic","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDrop","oldVlaue","columns","designData","ReactInputFields","parse","fields","designDataIndex","firstIndex","secondIndex","splice","from","to","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","createRef","controlMap","addTemplateId","approveID","previewId","copyID","sampleTypeOptions","getDerivedStateFromProps","masterStatus","error","render","filterParam","unchangeList","searchFieldList","searchedData","RegistrationTemplate","template","ntransactionstatus","APPROVED","stransdisplaystatus","e","slanguagetypecode","ncategorybasedflowrequired","lstPatient","gridColumns","mastertimeZoneList","masterdefaultTimeZone","timeZoneList","componentDidUpdate","previousProps","updateState","ncontrolcode","has","SampleTypes","realSampleType","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    updateStore, getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate, crudMaster,\r\n    getPreviewTemplate, getChildValues, getDynamicFilter, getDynamicFilterExecuteData,\r\n    rearrangeDateFormatforKendoDataTool, validateEsignCredential,\r\n    validatePreview, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster\r\n} from '../../actions/index'\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { Row, Col, FormGroup, FormLabel, Card, Nav } from 'react-bootstrap';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { ContentPanel, MediaLabel, ReadOnlyText } from '../../components/App.styles';\r\nimport {\r\n    ageCalculate,\r\n    childComboClear,\r\n    constructOptionList, convertDateTimetoStringDBFormat, deleteAttachmentDropZone,\r\n    extractFieldHeader,\r\n    formatDate,\r\n    formatInputDate,\r\n    getControlMap, getSameRecordFromTwoArrays, onDropAttachFileList,\r\n    showEsign, validateEmail\r\n} from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport PreRegDesignPopUp from './PreRegDesignPopUp';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport PortalModal from '../../PortalModal';\r\nimport { faCopy, faEye, faPencilAlt, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport DynamicSlideout from './DynamicSlideout.jsx'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { designProperties, transactionStatus, SampleType, designComponents } from '../../components/Enumeration';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"react-awesome-query-builder\";\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport AddMasterRecords from './AddMasterRecords'\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass DynamicPreRegDesign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            addTemplateId: -1,\r\n            editId: -1, deleteId: -1, approveID: -1, previewId: -1, copyID: -1,\r\n            selectedRecord: {},\r\n            sampleTypeOptions: [],\r\n            selectedSampleType: {},\r\n            breadCrumbData: [],\r\n            design: [],\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            selectedMaster: {}\r\n        };\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.masterStatus }));\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord['filterquery'] !== \"\" && selectedRecord['filterquery'] !== undefined) {\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: selectedRecord['filterquery']\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTFILTER\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let selecteddata = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n        if (component.hasOwnProperty(\"child\")) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            component.child.map(y => {\r\n                // component.filterfields.filter(x=>x.)\r\n                const withoutCombocomponent = this.state.withoutCombocomponent;\r\n                const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n                if (readonlyfields !== -1) {\r\n\r\n                    if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n                        selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                            rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n                        selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n                        if (withoutCombocomponent[readonlyfields].child) {\r\n                            const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n                            withoutCombocomponent[readonlyfields].child.map(k => {\r\n                                if (k.label === Age[0].label) {\r\n                                    const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n                                    selectedRecord[Age[0].label] = age\r\n                                }\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n\r\n\r\n                    } else {\r\n                        if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                                selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n                                    selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        } else {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        }\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const comboComponents = this.state.comboComponents;\r\n                    const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n                    if (readonlyfields !== -1) {\r\n                        if (this.props.Login.comboData[y.label]) {\r\n                            const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n                            if (val.length > 0)\r\n                                selectedRecord[y.label] = val[0]\r\n                            //selectedRecord[y.label]=this.props.Login.comboData[y.label].filter(item=>item.value===selecteddata[y.foriegntablePK])\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedRecord,\r\n                    loadCustomSearchFilter: false,\r\n                    // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n            // }\r\n        }\r\n    };\r\n    render() {\r\n        const Layout = this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata\r\n\r\n        const filterParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getDynamicPreRegDesign\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, nsampletypecode: this.state.breadCrumbData[0] ?\r\n                    this.state.breadCrumbData[0].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"realSampleType\", \"SampleTypes\"],\r\n            searchFieldList: [\"sregtemplatename\", \"stransdisplaystatus\"]\r\n        };\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {this.state.breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={this.state.breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                screenName={\"Dynamic Pre-Reg Design\"}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationTemplate || []}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(template) => this.props.selectRegistrationTemplate(template, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedTemplate}\r\n                                primaryKeyField=\"nreactregtemplatecode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"stransdisplaystatus\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={this.state.addTemplateId}\r\n                                filterParam={filterParam}\r\n                                hidePaging={true}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getReactInputFields(this.props.Login.userInfo, 'create')}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLETYPEFILTER\":\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsampletypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.sampleTypeOptions}\r\n                                                        value={this.state.selectedSampleType ? this.state.selectedSampleType : \"\"}\r\n                                                        onChange={value => this.filterComboChange(value)}\r\n                                                    >\r\n                                                    </FormSelectSearch>\r\n                                                </Col>\r\n                                            </Row>\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            {this.props.Login.masterData.selectedTemplate ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.selectedTemplate.sregtemplatename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn-outlined ${this.props.Login.masterData.selectedTemplate.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\"\r\n                                                            : \"outline-secondary\"} btn-sm mr-3`}>\r\n                                                            {this.props.Login.masterData.selectedTemplate.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PREVIEW\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.getPreviewTemplate(this.props.Login.masterData,\r\n                                                                this.props.Login.userInfo, this.state.previewId\r\n                                                            )}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.editId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.props.getEditRegTemplate(this.props.Login.masterData, this.props.Login.userInfo, this.state.editId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"delete\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"approve\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.approveID) === -1}\r\n                                                            onClick={() => this.deleteApproveTemplate('approve', this.state.approveID)}>\r\n                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"copy\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.copyID) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.openModal(this.state.copyID)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            {\r\n                                                Layout ?\r\n                                                    Layout.map((item) =>\r\n                                                        <Row>\r\n                                                            {item.children.length > 0 ?\r\n                                                                item.children.map((column) =>\r\n                                                                    <Col md={12 / item.children.length}>\r\n                                                                        {\r\n                                                                            column.children.map((component) => {\r\n                                                                                return (\r\n                                                                                    component.hasOwnProperty(\"children\") ?\r\n                                                                                        <Row>\r\n                                                                                            {component.children.map(componentrow =>\r\n                                                                                                //<Col md={12 / componentrow.length}>\r\n                                                                                                componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                                <Col md={componentrow && componentrow.length || 4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                            )\r\n                                                                                            }\r\n                                                                                        </Row>\r\n                                                                                        :\r\n                                                                                        component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                                            <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                        </FormGroup>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                : \"\"}\r\n                                                        </Row>\r\n                                                    )\r\n                                                    :\r\n                                                    \"\"\r\n                                            }\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openPortal ?\r\n                    <PortalModal>\r\n                        <PreRegDesignPopUp\r\n                            closeModal={this.closeModal}\r\n                            nsampletypecode={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.value : -1}\r\n                            ncategorybasedflowrequired={this.state.breadCrumbData.length ? this.state.breadCrumbData[0].item.item.ncategorybasedflowrequired : 4}\r\n                            searchRef={this.searchRef}\r\n                        />\r\n                    </PortalModal> : \"\"}\r\n\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        size={this.props.Login.operation === 'copy' || \"approve\" ? 'lg' : \"xl\"}\r\n                        onSaveClick={this.props.Login.addMaster ? this.onSaveMasterRecord :\r\n                            this.props.Login.operation === 'copy' ? this.onSaveClick :\r\n                                this.props.Login.operation === \"preview\" ?\r\n                                    this.onExecuteClick : this.closeModal}\r\n                        hideSave={this.props.Login.addMaster ? false : this.props.Login.operation === 'copy' ? false : true}\r\n                        loginoperation={this.props.Login.operation === 'copy' ? false : true}\r\n                        operation={this.props.Login.operation}\r\n                        showValidate={\r\n                            this.props.Login.addMaster ? false : this.props.Login.operation === \"preview\" ? true : false}\r\n                        screenName={this.props.Login.operation === 'copy' ? \"IDS_TEMPLATE\" : \"IDS_PREVIEW\"}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.props.Login.addMaster ? this.state.selectedMaster : this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.addMaster ?\r\n                            this.props.Login.masterextractedColumnList.filter(x => x.mandatory === true)\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                [{ \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"sregtemplatename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }] : this.props.Login.operation === \"preview\" ? this.mandatoryValidation() : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'copy' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            name={\"sregtemplatename\"}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, sregtemplatename: event.target.value } })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                            value={this.state.selectedRecord.sregtemplatename ? this.state.selectedRecord.sregtemplatename : \"\"}\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            maxLength={\"30\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                : this.props.Login.loadCustomSearchFilter ?\r\n                                    this.props.Login.seletedFilterComponent &&\r\n                                        this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                        <KendoDatatoolFilter\r\n                                            filter={this.props.Login.kendoFilter}\r\n                                            handleFilterChange={this.handleFilterChange}\r\n                                            filterData={this.props.Login.lstPatient || []}\r\n                                            skip={this.props.Login.kendoSkip}\r\n                                            take={this.props.Login.kendoTake}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            fields={this.props.Login.fields || []}\r\n                                            gridColumns={this.props.Login.gridColumns || []}\r\n                                            onRowClick={this.handleKendoRowClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                        /> : <FilterQueryBuilder\r\n                                            fields={this.props.Login.fields || {}}\r\n                                            onChange={this.onChangeAwesomeQueryBuilder}\r\n                                            tree={this.props.Login.awesomeTree}\r\n                                            config={this.props.Login.awesomeConfig}\r\n                                            skip={this.props.Login.kendoSkip}\r\n                                            take={this.props.Login.kendoTake}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            gridColumns={this.props.Login.gridColumns || []}\r\n                                            filterData={this.props.Login.lstPatient}\r\n                                            onRowClick={this.handleKendoRowClick}\r\n                                            handleExecuteClick={this.handleExecuteClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                        // static={true}\r\n                                        // controlMap={this.state.controlMap}\r\n                                        // dataState={this.state.dataState}\r\n                                        // dataStateChange={this.dataStateChange}\r\n                                        />\r\n                                    : this.props.Login.addMaster ?\r\n                                        <AddMasterRecords\r\n                                            selectedControl={this.props.Login.selectedControl}\r\n                                            fieldList={this.props.Login.masterfieldList}\r\n                                            extractedColumnList={this.props.Login.masterextractedColumnList}\r\n                                            primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                            selectedRecord={this.state.selectedMaster || {}}\r\n                                            onInputOnChange={this.onInputOnChangeMaster}\r\n                                            onComboChange={this.onComboChangeMaster}\r\n                                            handleDateChange={this.handleDateChangeMaster}\r\n                                            dataList={this.props.Login.masterdataList}\r\n                                            onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                            masterDesign={this.props.Login.masterDesign}\r\n                                            mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                            masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                            onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                            handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                            onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                            onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                            onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            Login={this.props.Login}\r\n                                        />\r\n                                        :\r\n                                        <DynamicSlideout\r\n                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                            templateData={this.props.Login.masterData.selectedTemplate &&\r\n                                                this.props.Login.masterData.selectedTemplate.jsondata}\r\n                                            //handleChange={this.handleChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            comboData={this.props.Login.comboData}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onDropFile={this.onDropFile}\r\n                                            deleteAttachment={this.deleteAttachment}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                            Login={this.props.Login}\r\n                                            addMasterRecord={this.addMasterRecord}\r\n                                            custombuttonclick={this.custombuttonclick}\r\n                                            onNumericBlur={this.onNumericBlur}\r\n                                            userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                        />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n                selectedMaster[item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        const { selectedMaster } = this.state;\r\n        selectedMaster[dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        selectedMaster[name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n                if (selectedMaster.nneedcurrentaddress === 3) {\r\n                    selectedMaster.sflatnotemp = selectedMaster.sflatno;\r\n                    selectedMaster.shousenotemp = selectedMaster.shouseno;\r\n                    selectedMaster.spostalcodetemp = selectedMaster.spostalcode;\r\n                    selectedMaster.sstreettemp = selectedMaster.sstreet;\r\n                    selectedMaster.scitynametemp = selectedMaster.scityname;\r\n                    selectedMaster.sdistrictnametemp = selectedMaster.sdistrictname;\r\n                    selectedMaster.sregionnametemp = selectedMaster.sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster.sflatnotemp = \"\";\r\n                    selectedMaster.shousenotemp = \"\";\r\n                    selectedMaster.spostalcodetemp = \"\";\r\n                    selectedMaster.sstreettemp = \"\";\r\n                    selectedMaster.scitynametemp = \"\";\r\n                    selectedMaster.sdistrictnametemp = \"\";\r\n                    selectedMaster.sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: this.props.Login.selectedControl.table.item.nformcode };\r\n        inputData[this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = this.props.Login.selectedControl.table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (this.props.Login.selectedControl.table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: this.props.Login.selectedControl.table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = this.props.Login.masterDesign.screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = this.props.Login.masterDesign.screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = this.props.Login.masterDesign.screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: this.props.Login.selectedControl.table.item.nformcode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterDesign.ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            this.props.Login.masterDesign &&\r\n                this.props.Login.masterDesign.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[componentrow.label].value,\r\n                                                label: selectedMaster[componentrow.label].label,\r\n                                                pkey: selectedMaster[componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[componentrow.label] ? selectedMaster[componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[componentrow.label] ? formatDate(selectedMaster[componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[`tz${componentrow.label}`].value, label: selectedMaster[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            selectedMaster[componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[component.label].value,\r\n                                            label: selectedMaster[component.label].label,\r\n                                            pkey: selectedMaster[component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[component.label] || new Date(), false) :\r\n                                            selectedMaster[component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[`tz${component.label}`] ?\r\n                                            { value: selectedMaster[`tz${component.label}`].value, label: selectedMaster[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[component.label] ?\r\n                                        selectedMaster[component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (this.props.Login.selectedControl.table.item.component === 'Type3Component'\r\n            && this.props.Login.selectedControl.table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = true\r\n            this.props.Login.masterextractedColumnList.map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList.map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].value ? this.state.selectedMaster[fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[item.controlName] ? this.state.selectedMaster[item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n\r\n        const inputParam = {\r\n            withoutCombocomponent: this.state.withoutCombocomponent,\r\n            comboComponents: this.state.comboComponents,\r\n            selectedRecord: this.state.selectedRecord,\r\n            selectedRecordName: 'selectedRecord',\r\n            loadSubSample: false,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.comboData,\r\n            comboName: 'comboData',\r\n            classUrl: this.props.Login.selectedControl.table.item.classUrl,\r\n            methodUrl: this.props.Login.selectedControl.table.item.methodUrl,\r\n            displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: \"create\", saveType, formRef\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        //  }\r\n\r\n    }\r\n\r\n    mandatoryValidation = () => {\r\n        const mandatoryFields = []\r\n        const selectedRecord = this.state.selectedRecord;\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    if (componentrow.recordbasedshowhide) {\r\n                                        if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                            === componentrow.recordbasedhide) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        } else {\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n\r\n                                        selectedRecord[componentrow.label] &&\r\n                                            selectedRecord[componentrow.label] !== \"\" &&\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.mandatory === true ?\r\n                                component.recordbasedshowhide ?\r\n                                    this.state.selectedRecord[component.parentLabel]\r\n                                        === component.recordbasedhide ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            }) : \"\" :\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                : selectedRecord[component.label] ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label, \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                    })\r\n                })\r\n            })\r\n\r\n        return mandatoryFields;\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let fieldList = []\r\n        let masterComboColumnFiled = []\r\n        let extractedColumnList = []\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n\r\n            const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl: control,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList = extractFieldHeader(Object.values(fieldList));\r\n            masterComboColumnFiled = extractedColumnList.filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList).length > 0 ? fieldList[0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl: control,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl: control\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n        else if (control.table.item.component === 'patient') {\r\n\r\n            extractedColumnList = [\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_FIRSTNAME\",\r\n                    dataField: \"sfirstname\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_LASTNAME\",\r\n                    dataField: \"slastname\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n\r\n                    mandatory: true,\r\n                    idsName: \"IDS_DATEOFBIRTH\",\r\n                    dataField: \"ddob\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_GENDER\",\r\n                    dataField: \"ngendercode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_COUNTRY\",\r\n                    dataField: \"ncountrycode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_REGIONNAME\",\r\n                    dataField: \"nregioncode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_DISTRICTNAME\",\r\n                    dataField: \"ndistrictcode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CITY\",\r\n                    dataField: \"ncitycode\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_STREET\",\r\n                    dataField: \"sstreet\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_HOUSENO\",\r\n                    dataField: \"shouseno\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_FLATNO\",\r\n                    dataField: \"sflatno\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURENTREGION\",\r\n                    dataField: \"nregioncodetemp\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURRENTDISTRICT\",\r\n                    dataField: \"ndistrictcodetemp\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURRENTCITY\",\r\n                    dataField: \"ncitycodetemp\",\r\n                    mandatoryLabel: \"IDS_SELECT\",\r\n                    controlType: \"selectbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURRENTSTREET\",\r\n                    dataField: \"sstreettemp\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURRENTHOUSENO\",\r\n                    dataField: \"shousenotemp\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n                {\r\n                    mandatory: true,\r\n                    idsName: \"IDS_CURRENTFLATNO\",\r\n                    dataField: \"sflatnotemp\",\r\n                    mandatoryLabel: \"IDS_ENTER\",\r\n                    controlType: \"textbox\",\r\n                },\r\n            ];\r\n\r\n\r\n\r\n\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl: control,\r\n                //  masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: \"npatientcode\",\r\n                masterComboColumnFiled: masterComboColumnFiled\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n\r\n    onExecuteClick = () => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        const userInfo = this.props.Login.userInfo\r\n        const sampleRegistration = {}\r\n        sampleRegistration[\"jsondata\"] = {}\r\n        const dateList = []\r\n        const defaulttimezone = this.props.Login.defaultTimeZone\r\n\r\n        console.log(\"selected in execute:\", selectedRecord);\r\n\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n\r\n                                if (componentrow.inputtype === \"date\") {\r\n                                    if (componentrow.mandatory) {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\";\r\n                                    } else {\r\n                                        sampleRegistration[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                            typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" :\r\n                                            selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\" : \"\";\r\n\r\n                                    }\r\n                                    if (componentrow.timezone) {\r\n                                        sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                            { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    dateList.push(componentrow.label)\r\n                                }\r\n\r\n                            })\r\n                            return sampleRegistration;\r\n                        }\r\n                        else {\r\n\r\n                            if (component.inputtype === \"date\") {\r\n                                if (component.mandatory) {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\";\r\n                                } else {\r\n                                    sampleRegistration[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                        typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" :\r\n                                        selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" : \"\";\r\n                                }\r\n                                if (component.timezone) {\r\n                                    sampleRegistration[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                        { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                                dateList.push(component.label)\r\n                            }\r\n                            return sampleRegistration;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        const { dateconstraints, combinationunique } = this.getJsondata(this.props.Login.masterData.selectedTemplate.jsondata)\r\n\r\n        const inputParam = {\r\n            Registration: sampleRegistration,\r\n            DateList: dateList,\r\n            dateconstraints: dateconstraints,\r\n            userinfo: userInfo,\r\n            combinationunique: combinationunique,\r\n        }\r\n\r\n        this.props.validatePreview(inputParam);\r\n\r\n    }\r\n\r\n\r\n    getJsondata = (templatedata) => {\r\n\r\n        let dateconstraints = [];\r\n        let combinationunique = []\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            // componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                // sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        if (component.inputtype === 'date') {\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n                        }\r\n                        return null;\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n        let jsondata = {\r\n            combinationunique,\r\n            dateconstraints,\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { userRoleControlRights, controlMap, addTemplateId,\r\n            sampleTypeOptions, breadCrumbData, selectedSampleType,\r\n            editId, deleteId, approveID, copyID, selectedRecord, comboComponents,\r\n            previewId, withoutCombocomponent, kendoSkip, kendoTake,\r\n            awesomeConfig, awesomeTree, kendoFilter, selectedMaster\r\n        } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            updateState = true;\r\n            addTemplateId = controlMap.has(\"AddTemplate\") && controlMap.get(\"AddTemplate\").ncontrolcode;\r\n            editId = controlMap.has(\"EditTemplate\") && controlMap.get(\"EditTemplate\").ncontrolcode;\r\n            deleteId = controlMap.has(\"DeleteTemplate\") && controlMap.get(\"DeleteTemplate\").ncontrolcode;\r\n            approveID = controlMap.has(\"ApproveTemplate\") && controlMap.get(\"ApproveTemplate\").ncontrolcode;\r\n            copyID = controlMap.has(\"CopyTemplate\") && controlMap.get(\"CopyTemplate\").ncontrolcode;\r\n            previewId = controlMap.has(\"PreviewTemplate\") && controlMap.get(\"PreviewTemplate\").ncontrolcode;\r\n        }\r\n        if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            breadCrumbData = sampleTypeOptions.length > 0 ? [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": sampleTypeOptions[0].label,\r\n                    \"item\": sampleTypeOptions[0]\r\n                }\r\n            ] : [];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\r\n            updateState = true;\r\n            breadCrumbData = this.props.Login.realSampleType || this.state.breadCrumbData;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaster !== previousProps.Login.selectedMaster) {\r\n            updateState = true;\r\n            selectedMaster = this.props.Login.selectedMaster\r\n        }\r\n\r\n        if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\r\n            updateState = true;\r\n            comboComponents = this.props.Login.comboComponents\r\n        }\r\n        if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\r\n            updateState = true;\r\n            withoutCombocomponent = this.props.Login.withoutCombocomponent\r\n        }\r\n\r\n        // if (this.props.Login.kendoTake !== previousProps.Login.kendoTake) {\r\n        //     updateState = true;\r\n        //     kendoTake = this.props.Login.kendoTake\r\n        // }\r\n\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, addTemplateId, sampleTypeOptions,\r\n                breadCrumbData, selectedSampleType,\r\n                editId, deleteId, approveID, copyID, selectedRecord,\r\n                comboComponents, previewId, withoutCombocomponent, selectedMaster\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    filterComboChange = (comboData) => {\r\n        this.setState({ selectedSampleType: comboData })\r\n    }\r\n\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.reloadData()\r\n    }\r\n\r\n    closeModal = () => {\r\n        let updateInfo = {}\r\n        if (this.props.Login.addMaster) {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: {}, selectedControl: {},\r\n                    masterextractedColumnList: [], masterfieldList: {},\r\n                    masterprimaryKeyField: \"\", addMaster: false\r\n                }\r\n\r\n            }\r\n        }\r\n        else if (!this.props.Login.loadCustomSearchFilter) {\r\n            let loadEsign = this.props.Login.loadEsign;\r\n            let openModal = this.props.Login.openModal;\r\n            let openPortal = this.props.Login.openPortal;\r\n            let selectedRecord = this.props.Login.selectedRecord;\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    openPortal = false;\r\n                    selectedRecord = {};\r\n\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason'] = \"\";\r\n                }\r\n            }\r\n            else {\r\n                openModal = false;\r\n                openPortal = false;\r\n                selectedRecord = {};\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, openPortal, loadEsign, selectedRecord, selectedId: null, design: [], selectedFieldRecord: {}, showConfirmAlert: false }\r\n                // data: {openModal, loadEsign, selectedRecord}\r\n            }\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadCustomSearchFilter: false, kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    kendoFilter: {\r\n                        logic: \"and\",\r\n                        filters: []\r\n                    },\r\n                    awesomeTree: undefined,\r\n                    awesomeConfig: undefined\r\n                }\r\n                // data: {openModal, loadEsign, selectedRecord}\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    openModal = (ncontrolCode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: \"copy\", ncontrolCode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let selectedId = null;\r\n        inputData['registrationtemplate'] =\r\n        {\r\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            sregtemplatename: this.state.selectedRecord['sregtemplatename'],\r\n            nsampletypecode: this.props.Login.masterData.selectedTemplate.nsampletypecode\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, operation: this.props.Login.operation,\r\n            saveType, formRef, selectedId, dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteApproveTemplate(\"delete\", deleteId));\r\n    }\r\n\r\n    deleteApproveTemplate = (operation, ncontrolCode) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const postParam = {\r\n            inputListName: \"RegistrationTemplate\",\r\n            selectedObject: \"selectedTemplate\",\r\n            primaryKeyField: \"nreactregtemplatecode\",\r\n            fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo, nsampletypecode: this.state.breadCrumbData[0] ?\r\n                    this.state.breadCrumbData[0].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const data = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        component.children.map(componentrow => {\r\n                            if (this.state.breadCrumbData[0].item.value === -1)\r\n                                componentrow['label'] = componentrow.label + \"_child\"\r\n\r\n                            data.push(componentrow.label)\r\n\r\n                        })\r\n                    } else {\r\n                        if (this.state.breadCrumbData[0].item.value === -1) {\r\n                            component['label'] = component.label + \"_child\"\r\n                            data.push(component.label)\r\n                        } else {\r\n                            data.push(component.label)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        })\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"RegistrationTemplate\",\r\n            classUrl: 'dynamicpreregdesign',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            inputData: {\r\n                registrationtemplate: {\r\n                    sregtemplatename: this.props.Login.masterData.selectedTemplate.sregtemplatename,\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    jsonString: JSON.stringify(Layout),\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                dynamicFields: data,\r\n                nsampletypecode: this.state.breadCrumbData[0].item.value\r\n\r\n            },\r\n            operation\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openModal: true,\r\n                    operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.selectedSampleType) {\r\n            this.props.getRegistrationTemplate(this.state.selectedSampleType, this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVALIABLE\" }));\r\n        }\r\n    }\r\n\r\n    getPreviewTemplate = (masterData, userInfo, editId) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.selectedTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            data.push(componentrow)\r\n                        } else {\r\n                            withoutCombocomponent.push(componentrow)\r\n                        }\r\n                    })\r\n                        : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                })\r\n            })\r\n        })\r\n        const comboComponents = data\r\n        let childColumnList = {};\r\n        data.map(columnList => {\r\n            const val = this.comboChild(data, columnList, childColumnList, true);\r\n            data = val.data;\r\n            childColumnList = val.childColumnList\r\n        })\r\n        this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord,\r\n            childColumnList, comboComponents, withoutCombocomponent, false, true, new Map(), true)\r\n\r\n    }\r\n\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedRecord[comboName] = comboData;\r\n\r\n        console.log(\"selected:\", selectedRecord, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.state.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.state.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.state.withoutCombocomponent, control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.state.withoutCombocomponent, [...childComboList, ...parentList])\r\n            } else {\r\n                let comboData = this.props.Login.comboData\r\n                const withoutCombocomponent = this.state.withoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.state.comboComponents, withoutCombocomponent, selectedRecord, comboData }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedRecord = childParam.selectedRecord\r\n                comboData = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord, comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'toggle') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedRecord[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        // this.saveComponentProperties()\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord, withoutCombocomponent } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const age = ageCalculate(dateValue);\r\n            const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n            selectedRecord[Age[0].label] = age\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || {};\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent, control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.mastedataList,\r\n                    childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList])\r\n            } else {\r\n                let comboData = this.props.Login.mastedataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents, withoutCombocomponent, selectedMaster, comboData }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster = childParam.selectedRecord\r\n                comboData = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        const selectedMaster = this.state.selectedMaster || {};\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        const { selectedMaster } = this.state;\r\n        selectedMaster[dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster\r\n        selectedMaster[name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster\r\n        if (selectedMaster[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDrop = (value, type, oldVlaue) => {\r\n        const design = this.state.design;\r\n        let columns = design[0].children;\r\n        let designData = this.props.Login.ReactInputFields;\r\n        value = JSON.parse(value.fields);\r\n        value = { ...value, type: \"component\" }\r\n        let designDataIndex = designData.findIndex(item => item.label === value.label);\r\n        let firstIndex = columns[0] ? columns[0].children.findIndex(item => item.label === value.label) : -1;\r\n        let secondIndex = columns[1] ? columns[1].children.findIndex(item => item.label === value.label) : -1;\r\n\r\n        if (designDataIndex >= 0)\r\n            designData.splice(designDataIndex, 1);\r\n        if (firstIndex >= 0) {\r\n            if (type !== 1) {\r\n                columns[0].children.splice(firstIndex, 1);\r\n                // columns[0].splice(to, 0, columns[0].splice(from, 1)[0]);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[0].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[0].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[0].children.splice(to, 0, columns[0].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n\r\n        } else if (type === 1) {\r\n            if (columns[0]) {\r\n                columns[0].children.push(value);\r\n            } else {\r\n                columns[0] = {\r\n                    id: \"1\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n\r\n                columns[0].children.push(value);\r\n            }\r\n        }\r\n        if (secondIndex >= 0) {\r\n            if (type !== 2) {\r\n                columns[1].splice(secondIndex, 1);\r\n            } else {\r\n                if (oldVlaue) {\r\n                    oldVlaue = JSON.parse(oldVlaue);\r\n                    let from = columns[1].children.findIndex(item => item.label === value.label);\r\n                    let to = columns[1].children.findIndex(item => item.label === oldVlaue.label);\r\n                    columns[1].children.splice(to, 0, columns[1].children.splice(from, 1)[0]);\r\n                }\r\n            }\r\n        } else if (type === 2) {\r\n            if (columns[1]) {\r\n                columns[1].children.push(value);\r\n            } else {\r\n                columns[1] = {\r\n                    id: \"2\",\r\n                    type: \"column\",\r\n                    children: []\r\n                }\r\n                columns[1].children.push(value);\r\n            }\r\n        }\r\n\r\n        // design.push(columns)\r\n        this.setState({ designData, design })\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster,\r\n    getReactInputFields, selectRegistrationTemplate, filterColumnData,\r\n    getRegistrationTemplate, getEditRegTemplate,\r\n    getPreviewTemplate, getChildValues,\r\n    getDynamicFilter, getDynamicFilterExecuteData,\r\n    validateEsignCredential, validatePreview, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster\r\n})(injectIntl(DynamicPreRegDesign))"]},"metadata":{},"sourceType":"module"}