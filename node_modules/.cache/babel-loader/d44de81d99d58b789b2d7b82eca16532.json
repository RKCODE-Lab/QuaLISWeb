{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, parentChildComboLoad, constructjsonOptionList, constructjsonOptionDefault, childComboLoad, rearrangeDateFormatforUI } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nexport function getDynamicMasterCombo(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo\n    });\n    let urlArray = [timeZoneService, actualService]; //const operation = fetchRecordParam.operation;\n    // if (operation === \"update\"){\n    //     const url = \"dynamicmaster/getActiveDynamicMasterById\";\n    //     urlArray.push(rsapi.post(url, {\n    //       [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\n    //     }));\n    // }\n\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      }; // if (operation === \"update\"){\n      //     selectedRecord = response[2].data;\n      // }\n\n      const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === 1) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = newcomboData.selectedRecord[Product[0].label] && newcomboData.selectedRecord[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 2) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = newcomboData.selectedRecord[Instrument[0].label] && newcomboData.selectedRecord[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 3) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = newcomboData.selectedRecord[MaterialType[0].label] && newcomboData.selectedRecord[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = newcomboData.selectedRecord[MaterialCategory[0].label] && newcomboData.selectedRecord[MaterialCategory[0].label].value;\n                const ncategorybasedFlow = newcomboData.selectedRecord[MaterialCategory[0].label] && newcomboData.selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === 3) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = newcomboData.selectedRecord[Material[0].label] && newcomboData.selectedRecord[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                    } else {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          timeZoneList,\n                          defaultTimeZone,\n                          masterData,\n                          ncontrolcode: editId,\n                          openModal,\n                          loading: false,\n                          comboData: newcomboData.comboData,\n                          selectedRecord: newcomboData.selectedRecord,\n                          comboComponents,\n                          withoutCombocomponent,\n                          openPortal,\n                          columnList,\n                          childColumnList,\n                          operation,\n                          screenName\n                        }\n                      });\n                    }\n                  }\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              } else {\n                dispatch({\n                  type: DEFAULT_RETURN,\n                  payload: {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    loading: false,\n                    comboData: newcomboData.comboData,\n                    selectedRecord: newcomboData.selectedRecord,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    operation,\n                    screenName\n                  }\n                });\n              }\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else {}\n      }\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditDynamicMasterCombo(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    console.log(\"input:\", inputParam);\n    dispatch(initRequest(true));\n    const {\n      userInfo\n    } = { ...inputParam\n    };\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: inputParam.userInfo\n    });\n    const selectedMaster = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\n      \"userinfo\": inputParam.userInfo,\n      [inputParam.primaryKeyField]: inputParam.primaryKeyValue\n    });\n    urlArray = [timeZoneService, actualService, selectedMaster];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data\n      }; // selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\n\n      console.log(\"selectedRecord:\", selectedRecord);\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      };\n      const languagetypeCode = undefined;\n      const comboData = response[1].data;\n      let comboValues = {};\n\n      if (columnList.length > 0) {\n        columnList.map(x => {\n          if (x.inputtype === 'combo') {\n            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n              {\n                if (comboData[x.label].length > 0) {\n                  if (comboData[x.label][0].label === undefined) {\n                    const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                    comboData[x.label] = optionList.get(\"OptionList\");\n                  } else {\n                    comboData[x.label] = comboData[x.label];\n                    const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                  }\n                } else {\n                  comboData[x.label] = [];\n                }\n\n                comboValues = childComboLoad(x, comboData, selectedRecord1, childColumnList, withoutCombocomponent);\n              } else {\n              comboValues = {\n                \"comboData\": comboData\n              };\n            }\n          } else {\n            comboValues = {\n              comboData: comboData,\n              ...comboValues\n            };\n          }\n        });\n      } else {\n        comboValues = {\n          \"comboData\": comboData\n        };\n      }\n\n      if (withoutCombocomponent.length > 0) {\n        withoutCombocomponent.map(item => {\n          if (item.inputtype === \"date\") {\n            if (selectedRecord[item.label]) {\n              selectedRecord = { ...selectedRecord,\n                [item.label]: rearrangeDateFormatforUI(userInfo, selectedRecord[item.label])\n              };\n            }\n          }\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"update\",\n          screenName: inputParam.screenName,\n          timeZoneList,\n          defaultTimeZone,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          loading: false,\n          comboData: comboValues.comboData,\n          childColumnList,\n          comboComponents,\n          withoutCombocomponent,\n          columnList,\n          selectedId: inputParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DynamicMasterAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","intl","initRequest","constructOptionList","parentChildComboLoad","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","rearrangeDateFormatforUI","Axios","getTreeByProduct","getDynamicMasterCombo","masterData","userinfo","editId","columnList","selectedRecord","childColumnList","comboComponents","withoutCombocomponent","openPortal","openModal","mapOfFilterRegData","preview","operation","screenName","dispatch","timeZoneService","post","actualService","parentcolumnlist","childcolumnlist","urlArray","all","then","response","timeZoneMap","data","undefined","timeZoneList","get","defaultTimeZone","label","stimezoneid","value","ntimezonecode","newcomboData","slanguagetypecode","comboData1","comboData","selectedRecord1","map","componentrow","inputtype","mandatory","loadcurrentdate","Date","radioOptions","tags","text","type","payload","ncontrolcode","loading","nsampletypecode","ProductCategory","filter","x","name","length","nproductcatcode","ncategorybasedFlow","inputParam","Product","nproductcode","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","catch","error","console","log","status","message","warn","getEditDynamicMasterCombo","userInfo","selectedMaster","primaryKeyField","primaryKeyValue","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","item","ncontrolCode","selectedId","formatMessage","id"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, parentChildComboLoad, constructjsonOptionList,\r\n    constructjsonOptionDefault,childComboLoad, rearrangeDateFormatforUI } from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\n\r\nexport function getDynamicMasterCombo(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, \r\n    screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService];\r\n        //const operation = fetchRecordParam.operation;\r\n        // if (operation === \"update\"){\r\n        //     const url = \"dynamicmaster/getActiveDynamicMasterById\";\r\n        //     urlArray.push(rsapi.post(url, {\r\n        //       [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\r\n        //     }));\r\n        // }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                // if (operation === \"update\"){\r\n                //     selectedRecord = response[2].data;\r\n                // }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList,\r\n                     withoutCombocomponent, undefined, userinfo.slanguagetypecode,userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        }                       \r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === 1) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] &&\r\n                                newcomboData.selectedRecord[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label]\r\n                                && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = newcomboData.selectedRecord[Product[0].label]\r\n                                            && newcomboData.selectedRecord[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 2) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] &&\r\n                                newcomboData.selectedRecord[InstrumentCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label]\r\n                                && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = newcomboData.selectedRecord[Instrument[0].label]\r\n                                            && newcomboData.selectedRecord[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 3) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = newcomboData.selectedRecord[MaterialType[0].label] &&\r\n                                newcomboData.selectedRecord[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = newcomboData.selectedRecord[MaterialCategory[0].label] &&\r\n                                        newcomboData.selectedRecord[MaterialCategory[0].label].value\r\n                                    const ncategorybasedFlow = newcomboData.selectedRecord[MaterialCategory[0].label]\r\n                                        && newcomboData.selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === 3) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                newcomboData.selectedRecord,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = newcomboData.selectedRecord[Material[0].label]\r\n                                                    && newcomboData.selectedRecord[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    newcomboData.selectedRecord,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                dispatch({\r\n                                                    type: DEFAULT_RETURN,\r\n                                                    payload: {\r\n                                                        timeZoneList,\r\n                                                        defaultTimeZone,\r\n                                                        masterData,\r\n                                                        ncontrolcode: editId,\r\n                                                        openModal,\r\n                                                        loading: false,\r\n                                                        comboData: newcomboData.comboData,\r\n                                                        selectedRecord: newcomboData.selectedRecord,\r\n                                                        comboComponents,\r\n                                                        withoutCombocomponent,\r\n                                                        openPortal,\r\n                                                        columnList,\r\n                                                        childColumnList,\r\n                                                        operation,\r\n                                                        screenName\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    dispatch({\r\n                                        type: DEFAULT_RETURN,\r\n                                        payload: {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            loading: false,\r\n                                            comboData: newcomboData.comboData,\r\n                                            selectedRecord: newcomboData.selectedRecord,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                    else{\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getEditDynamicMasterCombo(inputParam, columnList, \r\n    selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        console.log(\"input:\", inputParam);\r\n        dispatch(initRequest(true));\r\n        const { userInfo } = { ...inputParam };\r\n\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n        const selectedMaster = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {  \r\n            \"userinfo\": inputParam.userInfo,\r\n            [inputParam.primaryKeyField]: inputParam.primaryKeyValue })\r\n\r\n        urlArray = [timeZoneService, actualService, selectedMaster]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let  selectedRecord = { ...response[2].data};\r\n               // selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n               console.log(\"selectedRecord:\", selectedRecord);\r\n           \r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode };            \r\n\r\n                const languagetypeCode = undefined;\r\n                const comboData = response[1].data;\r\n                let comboValues = {}\r\n                if (columnList.length > 0) {\r\n                    columnList.map(x => {\r\n                        if (x.inputtype === 'combo') {\r\n                            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                            {\r\n                                if (comboData[x.label].length > 0) {\r\n                                    if (comboData[x.label][0].label === undefined) {\r\n                                        const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                        comboData[x.label] = optionList.get(\"OptionList\");\r\n                                    } else {\r\n                                        comboData[x.label] = comboData[x.label]\r\n                                        const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                    }\r\n                                } else {\r\n                                    comboData[x.label] = []\r\n                                }\r\n                                \r\n                                comboValues = childComboLoad(x, comboData, selectedRecord1,\r\n                                    childColumnList, withoutCombocomponent)\r\n                            } else {\r\n                                comboValues = {\r\n                                    \"comboData\": comboData,\r\n                                }\r\n                            }\r\n                        } else {\r\n                            comboValues = {\r\n                                comboData: comboData,\r\n                                ...comboValues\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    comboValues = {\r\n                        \"comboData\": comboData,\r\n                    }\r\n                }\r\n\r\n                if (withoutCombocomponent.length > 0){\r\n                    withoutCombocomponent.map(item=>{                      \r\n                        if (item.inputtype === \"date\"){                         \r\n                          if (selectedRecord[item.label]){\r\n                            selectedRecord = {...selectedRecord, [item.label]: rearrangeDateFormatforUI(userInfo, selectedRecord[item.label])}\r\n                          }\r\n                        }\r\n                    })\r\n                }\r\n                 \r\n                dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {                          \r\n                            operation:\"update\",\r\n                            screenName:inputParam.screenName,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.ncontrolCode,                           \r\n                            loading: false,                            \r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList, \r\n                            selectedId:inputParam.primaryKeyValue            \r\n\r\n                        }\r\n                    })\r\n               \r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}