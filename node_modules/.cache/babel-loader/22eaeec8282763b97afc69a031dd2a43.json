{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\actions\\\\RegistrationAction.js\";\nimport React from 'react';\nimport rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nimport { Operators, TextFilter, NumericFilter, BooleanFilter, DateFilter, EnumFilter, EnumFilterProps } from \"@progress/kendo-react-data-tools\";\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.ntransactionsamplecode.length > 0) {\n      let inputParamData = {\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"comments/getSubSampleComment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSubSample: inputData.selectedSubSample // selectedTestCode: inputData.ntransactiontestcode,\n\n              },\n              loading: false,\n              showFilter: false,\n              activeSubSampleTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName,\n              activeTestTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      //toast.warn(\"Please Select a Sample\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTASAMPLE\"\n      }));\n    }\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          }\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {}\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\"); // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n        //\"stestsynonym\", undefined, undefined, true);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            screenName: \"Test\",\n            operation: \"create\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function addsubSample(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData, selectedRecord) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList ? columnList : [],\n        childcolumnlist: childColumnList ? childColumnList : [],\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent) {\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[2] = ComponentTestBySpec;\n      } else {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[2] = TestGet;\n      }\n\n      const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo\n      });\n      urlArray[3] = currentDate;\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo\n      });\n      urlArray[4] = dateService;\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList, response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n        let TestCombined = [];\n        let lstComponent = [];\n\n        if (specBasedComponent) {\n          const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n        } else {\n          TestCombined = response[2].data;\n        }\n\n        const comboData1 = newcomboData.comboData;\n        const selectedRecord1 = newcomboData.selectedRecord;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.loadcurrentdate) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n              selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n            } else if (componentrow.nperiodcode) {\n              selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n              if (componentrow.loadselecteddate) {\n                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n              } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n              //    new Date(response[2].data[componentrow.label]):null;\n\n            } else {\n              selectedRecord1[componentrow.label + \"value\"] = new Date();\n            }\n\n            if (componentrow.hidebeforedate) {\n              selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n\n            if (componentrow.hideafterdate) {\n              selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n          } else if (componentrow.inputtype === \"radio\") {\n            selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n          }\n        }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n        // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n        //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n        //     let containerType = comboData1['Container Type'] || []\n        //     comboData1['ContainerType'] = comboData1['Container Type'] || []\n        //     let containerList = []\n        //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n        //     containerType.map(x => {\n        //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n        //             containerList.push(x)\n        //         }\n        //     })\n        //     comboData1['Container Type'] = containerList\n        // }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ChildscreenName: \"SubSample\",\n            screenName: \"SubSample\",\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent,\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            SubSamplecomboData: comboData1,\n            SubSamplecomboComponents,\n            SubSamplewithoutCombocomponent,\n            TestCombined,\n            parentSubSampleColumnList: columnList,\n            childSubSampleColumnList: childColumnList,\n            timeZoneList,\n            defaultTimeZone,\n            masterData\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n    return dispatch => {\n      if (!specBasedComponent) {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          ...Map,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        Axios.all(urlArray).then(response => {\n          const TestCombined = response[0].data;\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              screenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              TestCombined: TestCombined\n            }\n          });\n        });\n      } else {\n        // Component = Component ? Component : []\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        Axios.all(urlArray).then(response => {\n          // const lstComponent =  response.data.lstComponent\n          let lstComponent = response[0].data.lstComponent; //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\n\n          const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              screenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent,\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              TestCombined: [],\n              selectedTestData: []\n            }\n          });\n        });\n      }\n    };\n  }\n}\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    Component = Component ? Component : [];\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent\n    }).then(response => {\n      let TestData = response.data; //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TestCombined: TestData,\n          ...Map,\n          loading: false,\n          selectedTestData: []\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function addSubSampleSaveContinue(Map1, Map, specBasedComponent, Component, selectedTestData, lstComponent) {\n  //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\n  //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\n  return dispatch => {\n    if (!specBasedComponent) {\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        nspecsampletypecode: Map[\"nspecsampletypecode\"],\n        slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        let TestCombined = response.data;\n        selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : [];\n        const selectedTestData1 = TestCombined.filter(function (x) {\n          return selectedTestData.some(function (y) {\n            return x[\"ntestgrouptestcode\"] === y.value;\n          });\n        }); // const selectedTestData2 = []\n        // TestCombined.map(x=>{\n        //     selectedTestData1.map(y=>{\n        //         if(x[\"ntestgrouptestcode\"] !== y[\"ntestgrouptestcode\"]){\n        //             selectedTestData2.push(x)\n        //         } \n        //     })\n        // });\n        //  let filterArray = filterRecordBasedOnTwoArrays(selectedTestData1, TestCombined, \"ntestgrouptestcode\")\n        // const filterArray = [...selectedTestData1, ...TestCombined]\n\n        selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\");\n        selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...Map1,\n            loading: false,\n            TestCombined,\n            selectedTestData,\n            masterStatus: intl.formatMessage({\n              id: \"IDS_SAVESUCCESSFULLY\"\n            })\n          }\n        });\n      });\n    } else {\n      // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\n      Map1.selectComponent[\"ncomponentcode\"] = {};\n      Map1.selectComponent[\"Sample Name\"] = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...Map1,\n          loading: false,\n          TestCombined: [],\n          selectedTestData: [],\n          lstComponent\n        }\n      });\n    }\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent, SubSamplecomboData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let Componnet = {};\n\n    if (specBasedComponent) {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", { ...Map\n      });\n    }\n\n    urlArray = [Componnet];\n    Axios.all(urlArray).then(response => {\n      let comp = [];\n\n      if (specBasedComponent) {\n        comp = response[0].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n\n      if (Map.nregsubtypecode === 6) {\n        let portalOrder = component['Container Type'] || {};\n        let containerType = SubSamplecomboData['ContainerType'] || [];\n        let containerList = [];\n        const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1;\n        containerType.map(x => {\n          if (x.item.jsondata.nportalordercode === nportalordercode) {\n            containerList.push(x);\n          }\n        });\n        SubSamplecomboData['Container Type'] = containerList;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          SubSamplecomboData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n        let selectedSample = response.data[\"selectedSample\"];\n        let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n        let selectedSubSample = RegistrationGetSubSample;\n        RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n        let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n        if (inputParam.inputData.nneedsubsample) {\n          RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc');\n          selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n          RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode);\n          selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n        } // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n\n\n        if (inputParam.multipleselectionFlag) {\n          selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n          updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n          updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n          RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n          RegistrationGetTest = masterData.RegistrationGetTest;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedSample,\n          selectedSubSample,\n          selectedTest,\n          RegistrationGetSubSample,\n          RegistrationGetTest,\n          RegistrationGetSample\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          SelectedTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          SelectedTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: []\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistrationScheduler(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData).then(response => {\n      // if (response.data.rtn === \"Success\") {\n      //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      //     let selectedSample = response.data[\"selectedSample\"];\n      //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      //     let selectedSubSample = RegistrationGetSubSample;\n      //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      //     if (inputParam.inputData.nneedsubsample) {\n      //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\n      //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n      //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\n      //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n      //     }\n      //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n      //     if (inputParam.multipleselectionFlag) {\n      //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n      //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n      //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\n      //     }\n      //     masterData = {\n      //         ...masterData, ...response.data,\n      //         selectedSample, selectedSubSample, selectedTest,\n      //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\n      //     }\n      let respObject = {\n        masterData: { ...masterData,\n          SchedulerTransaction: response[\"data\"].SchedulerTransaction\n        },\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {},\n        subSampleDataGridList: []\n      }; // inputParam.postParamList[0]['clearFilter'] = 'yes'\n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject\n        }\n      }); // } else {\n      //     toast.warn(response.data.rtn);\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\n      // }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeTestTab,\n      activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data, \"descending\", \"npreregno\");\n        sortData(response.data['RegistrationAttachment']);\n        sortData(response.data['RegistrationComment']);\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : []\n          };\n          let RegistrationTestComment = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationParameter = [];\n          let RegistrationComment = []; //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \n\n          if (inputData.checkBoxOperation === 1) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 7) {\n            // masterData = {\n            //     ...masterData,\n            //     APSelectedTest:responseData.APSelectedTest,\n            //     AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n            // }\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationComment = [];\n\n          if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n            let npreregno;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n              npreregno = inputData.masterData.RegistrationGetSample.length > 0 ? inputData.masterData.RegistrationGetSample[0].npreregno : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ? inputData.masterData.RegistrationComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\");\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n          masterData['RegistrationComment'] = RegistrationComment;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample; // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n      let isGrandChildGetRequired = false;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo,\n          masterData\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\n        };\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n                subsamplecheck = false;\n                dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n        let oldSelectedSubSample = inputData.masterData.selectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationTestAttachment = [];\n        let RegistrationParameter = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else if (inputData.checkBoxOperation === 7) {\n          let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\n            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [] //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : []; // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n\n              let RegistrationParameter1 = [...resultResponseData];\n              let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\n        masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTabIndex: inputData.activeTabIndex,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            activeTabIndex: inputData.activeTabIndex,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\n      if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\n        value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode);\n\n        if (value) {\n          return toast.warn(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n          }));\n        }\n\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\"); // const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\n\n        if (selectedsample && selectedsample.length > 0) {\n          const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n          if (findTransactionStatus.length === 1) {\n            if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n              if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\n                const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n                if (findApprovalVersion.length === 1) {\n                  const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                  if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                    {\n                      inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample && [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\");\n                      dispatch(initRequest(true));\n                      rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                      }).then(response => {\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            availableTest: response.data,\n                            loadChildTest: true,\n                            loading: false,\n                            ncontrolCode,\n                            screenName: \"IDS_TEST\",\n                            operation: \"create\",\n                            openModal: true,\n                            parentPopUpSize: \"lg\",\n                            selectedRecord: {},\n                            showSample: undefined\n                          }\n                        });\n                      }).catch(error => {\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            loading: false\n                          }\n                        });\n\n                        if (error.response.status === 500) {\n                          toast.error(error.message);\n                        } else {\n                          toast.warn(this.props.formatMessage({\n                            id: error.response.data\n                          }));\n                        }\n                      });\n                    } else {\n                    toast.warn(intl.formatMessage({\n                      id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                    }));\n                  }\n                } else {\n                  toast.warn(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                  }));\n                }\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\"\n                }));\n              }\n            } else {\n              ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n              toast.warn(intl.formatMessage({\n                id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n              }));\n            }\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSUBSAMPLE\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest,\n        selectedTest: response.data[\"RegistrationGetTest\"],\n        RegistrationParameter: response.data.RegistrationParameter // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         [modalName]: false,\n      //         loading: false,\n      //         loadChildTest: false,\n      //         showSample: undefined,\n      //         openModal: false,\n      //         selectedRecord: {}\n      //     }\n      // });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedSample\"].length > 1 || masterData[\"selectedSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editRegParam[\"getSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSample\"] = [];\n    masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n    //     parentcolumnlist: columnList,\n    //     childcolumnlist: childColumnList,\n    //     userinfo: userInfo\n    // })\n\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno,\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo: userInfo\n    });\n    urlArray = [timeZoneService, selectedRegistration, dateService];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[1].data[\"EditData\"]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      }; // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\n      //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      }; //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\n      // selectedRecord, childColumnList, withoutCombocomponent)\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes\n        } = [];\n        const selectedSpec = {};\n        Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response[1].data[\"AgaramTree\"];\n        ActiveKey = response[1].data[\"FocusKey\"];\n        FocusKey = response[1].data[\"ActiveKey\"];\n        OpenNodes = response[1].data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            AgaramTree,\n            FocusKey,\n            ActiveKey,\n            OpenNodes,\n            selectedSpec,\n            Specification,\n            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            // currentTime,\n            operation: \"update\",\n            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\n            // PopUpLabel: popUpLabel,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData,\n            childColumnList,\n            comboComponents,\n            withoutCombocomponent,\n            columnList //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        // sortData(response.data);\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\"); //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n\n        masterData = { ...masterData,\n          selectedSample: response.data[\"selectedSample\"],\n          // selectedSubSample: masterData[\"selectedSubSample\"],\n          //selectedTest:masterData[\"selectedTest\"],\n          // RegistrationGetTest,\n          // RegistrationGetSubSample,\n          RegistrationParameter: masterData[\"RegistrationParameter\"]\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            openPortal: false,\n            loading: false,\n            showConfirmAlert: false,\n            regDateEditConfirmMessage: undefined,\n            loadEsign: false,\n            openModal: false,\n            loadPreregister: false,\n            selectedRecord: {},\n            showSample: undefined\n          }\n        }); // let inputData = {\n        //     masterData,\n        //     selectedTest: masterData.selectedTest,\n        //     ntransactiontestcode: masterData.selectedTest ?\n        //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n        //     npreregno: masterData.selectedSample ?\n        //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n        //     userinfo: inputParam.inputData.userinfo,\n        //     activeTestTab : masterData.activeTestTab,\n        //     screenName: masterData.activeTestTab,\n        //     resultDataState: inputParam.resultDataState,\n        //     testCommentDataState: inputParam.testCommentDataState,\n        // }\n        // dispatch(getTestChildTabDetail(inputData, true))\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\") //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: {},\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList,\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent\n      });\n      urlArray[2] = TestGet;\n    }\n\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    urlArray[3] = currentDate;\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    urlArray[4] = dateService;\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList, response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n      let TestCombined = [];\n      let lstComponent = [];\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\");\n      } else {\n        TestCombined = response[2].data;\n      }\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"SubSample\",\n          showSaveContinue: false,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          openModal: true,\n          operation: \"create\",\n          loadRegSubSample: true,\n          selectedRecord: selectedRecord1,\n          regSubSamplecomboData: comboData1,\n          regSubSamplecomboComponents,\n          regSubSamplewithoutCombocomponent,\n          TestCombined,\n          regparentSubSampleColumnList: regcolumnList,\n          regchildSubSampleColumnList: regchildColumnList,\n          ncontrolCode: ncontrolcode,\n          timeZoneList,\n          defaultTimeZone,\n          masterData,\n          specBasedComponent\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSubSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createSubSample\", inputParam.inputData).then(response => {\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = response.data[\"selectedSubSample\"]; // RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      let RegistrationParameter = response.data[\"RegistrationParameter\"];\n      RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode');\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadRegSubSample: false\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); //    dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         openModal: false,\n      //         loadEsign: false,\n      //         loading: false,\n      //         showSample: undefined,\n      //         selectedRecord: {},\n      //         loadRegSubSample:false\n      //     }\n      // });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    let {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedSubSample\"].length > 1 || masterData[\"selectedSubSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSubSample\"] = [];\n    masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\n    inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\n    inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\n    inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\n    inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"]; //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\n\n    const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n\n    if (ntransactionsamplecode === undefined) {\n      toast.warn(intl.formattedMessage({\n        id: \"IDS_SELECTVALIDSUBSAMPLE\"\n      }));\n    } else {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      //     parentcolumnlist: columnList,\n      //     childcolumnlist: childColumnList,\n      //     userinfo: userInfo\n      // })\n\n      const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editSubSampleRegParam,\n        ntransactionsamplecode,\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo: userInfo\n      });\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo: userInfo\n      });\n      urlArray = [timeZoneService, selectedRegistration, dateService]; // if(specBasedComponent){\n      //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\n      //         ...Map,\n      //         specBasedComponent: specBasedComponent\n      //     })\n      //     urlArray.push(ComponentTestBySpec) \n      // }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = { ...response[1].data[\"EditData\"]\n        };\n        selectedRecord = { ...selectedRecord,\n          ...selectedRecord['jsondata']\n        };\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userInfo.stimezoneid,\n          value: userInfo.ntimezonecode\n        }; // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\n        // }\n        //else {\n        //               let lstComponent=[]\n\n        if (specBasedComponent) {\n          selectedRecord[\"ncomponentcode\"] = {\n            label: selectedRecord[\"scomponentname\"],\n            value: selectedRecord[\"ncomponentcode\"]\n          };\n        }\n\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        } // withoutCombocomponent.map(date => {\n        //     if (date.inputtype === 'date')\n        //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n        //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n        // })\n\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        selectedRecord = { ...selectedRecord\n        };\n\n        if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\n          masterData = { ...masterData,\n            ...response[1].data[\"SubSampleChildDetail\"]\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true,\n            screenName: \"IDS_SUBSAMPLE\",\n            operation: \"update\",\n            specBasedComponent,\n            //  regRecordToEdit:recordToEdit\n            masterData\n          }\n        }); // }\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n      //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\n\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        // selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        // RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: \"SubSample\"\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelSubSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      delete response.data[\"RegistrationGetSample\"];\n      delete response.data[\"RegistrationGetSubSample\"];\n      delete response.data[\"RegistrationGetTest\"];\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\n\nconst toTimestamp = strDate => {\n  // const dt = new Date(strDate).getTime();\n  // return dt / 1000;\n  const dt = strDate.getTime();\n  return dt;\n};\n\nexport function getDynamicFilter(inputParam) {\n  if (inputParam.component.inputtype === 'frontendsearchfilter') {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const source = inputParam.component.source;\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const lstData = response.data[inputParam.component.label]; // const responseparam={}\n\n        const gridColumns = [];\n        const fields = [];\n        const datefileds = [];\n        const multilingual = [];\n        inputParam.component.filterfields.map(item => {\n          fields.push(filterObject(item, languageTypeCode, response.data));\n\n          if (item.ismultilingual) {\n            multilingual.push(item.columnname);\n          }\n\n          if (item.filterinputtype === \"date\") {\n            datefileds.push(item.columnname);\n          }\n\n          if (item.filterinputtype !== 'predefinednumeric') {\n            gridColumns.push(creategridColumns(item, languageTypeCode));\n          }\n        });\n        const optionList = lstData.map(item => {\n          const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n          datefileds.map(x => {\n            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]));\n          });\n          multilingual.map(mul => {\n            jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n          });\n          return jsondata;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            gridColumns,\n            fields,\n            loadCustomSearchFilter: true,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data.rtn);\n        }\n      });\n    };\n  } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const {\n          fields,\n          gridColumns\n        } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: [],\n            gridColumns,\n            fields,\n            loadCustomSearchFilter: true,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            },\n            awesomeTree: undefined,\n            awesomeConfig: undefined\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data.rtn);\n        }\n      });\n    };\n  }\n}\nlet datapredef = {};\n\nconst CustomFilter = props => {\n  const {\n    filter,\n    data = [],\n    defaultItem\n  } = props;\n\n  const onChange = event => {\n    props.onFilterChange.call(undefined, {\n      nextFilter: { ...props.filter,\n        value: event.target.value.value\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ComboBox, {\n    onChange: onChange,\n    data: filter.field ? datapredef[filter.field] : [],\n    textField: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3869,\n      columnNumber: 12\n    }\n  });\n};\n\nexport function creategridColumns(item, languageTypeCode) {\n  let obj = {};\n\n  if (item.filterinputtype !== 'predefinednumeric') {\n    return {\n      field: item.columnname,\n      title: item.displayname[languageTypeCode],\n      width: \"200px\"\n    };\n  }\n}\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\n  let obj = {};\n  obj['fields'] = {};\n  obj['gridColumns'] = [];\n  filterFields.map(item => {\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n      const optionList = resposedata[item.predefinedtablename].map(data => {\n        const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n        jsondata['title'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n        jsondata['value'] = jsondata[item.predefinedvaluemember];\n        return jsondata;\n      });\n      datapredef[item.columnname] = optionList;\n    }\n\n    switch (item.filterinputtype) {\n      case \"text\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"text\",\n          valueSources: [\"value\", \"func\"],\n          mainWidgetProps: {\n            \"valueLabel\": \"Name\",\n            \"valuePlaceholder\": \"Enter\" + item.displayname[languageTypeCode]\n          }\n        };\n        break;\n\n      case \"numeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"number\",\n          valueSources: [\"value\"],\n          fieldSettings: { ...item.numericcondition\n          }\n        };\n        break;\n\n      case \"date\":\n        obj['fields'][item.type === 'dynamic' ? \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"date\",\n          valueSources: [\"value\"]\n        };\n        break;\n\n      case \"predefinednumeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n\n      case \"predefinedtext\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n    }\n\n    const gridColumns = creategridColumns(item, languageTypeCode);\n\n    if (item.filterinputtype !== 'predefinednumeric') {\n      obj['gridColumns'].push(gridColumns);\n    }\n  });\n  return obj;\n}\nexport function filterObject(item, languageTypeCode, resposedata) {\n  let obj = {};\n  let preobj = {};\n\n  if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n    const optionList = resposedata[item.predefinedtablename].map(data => {\n      const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n      jsondata['text'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n      jsondata['value'] = jsondata[item.predefinedvaluemember]; //delete jsondata.jsondata\n\n      return jsondata;\n    });\n    datapredef[item.columnname] = optionList; // preobj = {\n    //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\n    //     predefinedvaluemember: item.columnname\n    // }\n  }\n\n  switch (item.filterinputtype) {\n    case \"text\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n\n    case \"numeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: NumericFilter,\n        operators: Operators.numeric\n      };\n\n    case \"date\":\n      return obj = {\n        name: item.columnname + \"timestamp\",\n        label: item.displayname[languageTypeCode],\n        filter: DateFilter,\n        operators: Operators.date\n      };\n\n    case \"predefinednumeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.numeric\n      };\n\n    case \"predefinedtext\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.text\n      };\n\n    default:\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n  } //return obj;\n\n}\nexport function getDynamicFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          lstPatient: optionList,\n          loading: false,\n          screenName: inputParam.component.displayname[languageTypeCode]\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\n  let splitChar = \"/\";\n\n  if (dateValue !== undefined) {\n    const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\");\n    if (index !== -1) splitChar = userInfo.ssitedatetime.substring(index, index + 1);\n  } //   console.log(\"splitChar:\", splitChar);\n\n\n  if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\n    const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0]; // console.log(\"firstField:\", firstField);\n\n    const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \";\n    const datetime = dateValue.split(timeSplitChar);\n    const dateArray = datetime[0].split(splitChar);\n\n    if (firstField === \"dd\") {\n      const day = dateArray[0];\n      const month = dateArray[1];\n      const year = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else if (firstField === \"yyyy\") {\n      const year = dateArray[0];\n      const month = dateArray[1];\n      const day = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else {\n      return new Date(dateValue);\n    }\n  } else {\n    return dateValue;\n  }\n}\nexport function preRegDispatch(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...inputParam\n      }\n    });\n  };\n}\nexport function validateEsignforRegistration(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"registration\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"preregister\":\n        dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editSample\":\n        dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\n        break;\n\n      case \"accept\":\n        dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"quarantine\":\n        dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelTest\":\n        dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelSample\":\n        dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"addregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"deleteregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"printer\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      default:\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["React","rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","childComboLoadForEdit","DEFAULT_RETURN","intl","initRequest","RegistrationSubType","RegistrationType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","Operators","TextFilter","NumericFilter","BooleanFilter","DateFilter","EnumFilter","EnumFilterProps","ComboBox","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getSubSampleChildTabDetail","inputData","ntransactionsamplecode","length","inputParamData","userinfo","url","activeSubSampleTab","responseData","selectedSubSample","showFilter","screenName","activeTestTab","status","warn","selectedSample","activeSampleTab","FormattedMessage","id","getRegTypeChange","getRegSubTypeChange","onApprovalConfigVersionChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","selectedComponent","undefined","SelectedTest","Object","keys","popUptestDataState","skip","take","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","TestData","loadComponent","selectComponent","showSaveContinue","SelectedSource","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","searchSampleRef","current","searchSubSampleRef","searchTestRef","testskip","testtake","subsampletake","subsampleskip","showSample","getTreeByProduct","comboData","inputParam","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","selectedSpec","sversion","ntemplatemanipulationcode","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","nallottedspeccode","openPortal","openModal","getTest","nneedsubsample","specBasedComponent","componentTest","TestCombined","loadTest","formatMessage","addsubSample","columnList","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","isServiceRequired","SubSamplecomboData","timeZoneService","actualService","parentcolumnlist","childcolumnlist","TestGet","currentDate","dateService","datecolumnlist","filter","inputtype","timeZoneMap","defaultTimeZone","newcomboData","slanguagetypecode","comboData1","selectedRecord1","map","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","radioOptions","tags","text","loadSubSample","parentSubSampleColumnList","childSubSampleColumnList","selectedTestData","selectedobject","Reg","addSubSampleSaveContinue","Map1","selectedTestData1","some","y","masterStatus","editSubSample","Componnet","comp","nregsubtypecode","portalOrder","containerType","containerList","nportalordercode","jsondata","push","insertRegistration","rtn","RegistrationGetSample","RegistrationGetSubSample","RegistrationGetTest","selectedTest","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","subSampleDataGridList","postParamList","insertRegistrationScheduler","SchedulerTransaction","getRegistrationSample","selectedFilter","getRegistrationsubSampleDetail","nsampletypecode","nregtypecode","npreregno","ntransactionstatus","napprovalconfigcode","ndesigntemplatemappingcode","ntype","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","RegistrationTestComment","RegistrationTestAttachment","RegistrationParameter","RegistrationComment","wholeSubSampleList","b","forEach","subsample","index","includes","splice","ResponseData","RegistrationTestComment1","ntransactiontestcode","RegistrationTestAttachment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","bool","wholeTestList","test","keepOld","sampleGridDataState","sort","attachmentskip","isGrandChildGetRequired","TestSelected","subSampleSelected","filterTestSameOldSelectedTest","join","filterSelectedSubSample","getRegistrationTestDetail","getTestChildTabDetailRegistration","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","selectedTransactionsamplecode","RegistrationSampleComment","RegistrationSampleAttachment","testList","wholeSubsampleList","activeTabIndex","toString","selectedTransactioncode","acceptRegistration","addMoreTest","ncontrolCode","sampleList","obj","slice","selectedsample","findTransactionStatus","Set","REJECT","CANCELLED","CERTIFIED","SENT","findApprovalVersion","napprovalversioncode","findSampleSpec","availableTest","loadChildTest","props","createRegistrationTest","modalName","classUrl","getEditRegistrationComboService","comboComponents","withoutCombocomponent","primaryKeyName","editRegParam","mastertoedit","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","RealRegSubTypeValue","sregsubtypename","updateRegistration","regDateEditConfirmMessage","info","regEditParam","cancelTestAction","cancelSampleAction","addsubSampleRegistration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","saveSubSample","getEditSubSampleComboService","editSubSampleRegParam","formattedMessage","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","selectedSampleCode","selectedTestCode","activeTabId","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory","toTimestamp","strDate","dt","getTime","getDynamicFilter","languageTypeCode","lstData","gridColumns","fields","datefileds","multilingual","filterfields","filterObject","ismultilingual","columnname","filterinputtype","creategridColumns","JSON","parse","rearrangeDateFormatforKendoDataTool","mul","lstPatient","loadCustomSearchFilter","displayname","seletedFilterComponent","kendoSkip","kendoTake","kendoFilter","logic","filters","awesomeTree","awesomeConfig","filterObjectForReactAwesomeFilter","datapredef","CustomFilter","defaultItem","onChange","onFilterChange","call","nextFilter","target","field","title","width","filterFields","resposedata","predefinedtablename","predefinedismultilingual","predefineddisplaymember","predefinedvaluemember","valueSources","mainWidgetProps","fieldSettings","numericcondition","listValues","preobj","name","operators","numeric","getDynamicFilterExecuteData","filterquery","dateValue","splitChar","ssitedatetime","indexOf","substring","firstField","split","timeSplitChar","datetime","dateArray","day","month","year","time","formatted","preRegDispatch","validateEsignforRegistration","toLowerCase","dispatchMethods","screenData","action"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString, \r\n    fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, \r\n    replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList,\r\n     constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\nimport {\r\n    Operators,\r\n    TextFilter,\r\n    NumericFilter,\r\n    BooleanFilter,\r\n    DateFilter,\r\n    EnumFilter,\r\n    EnumFilterProps,\r\n} from \"@progress/kendo-react-data-tools\";\r\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactionsamplecode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSubSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"comments/getSubSampleComment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSubSample: inputData.selectedSubSample,\r\n                                    // selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSubSampleTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                activeTestTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            //toast.warn(\"Please Select a Sample\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTASAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                        selectedRecord, popUptestDataState: { skip: 0, take: 10 }\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent\r\n\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                    // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n                    //\"stestsynonym\", undefined, undefined, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, loadTest: true, openChildModal: false,\r\n                            ChildscreenName: \"Test\",\r\n                            screenName: \"Test\",\r\n                            operation: \"create\",\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired,\r\n    SubSamplecomboData, selectedRecord) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList ? columnList : [],\r\n                childcolumnlist: childColumnList ? childColumnList : [],\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            } else {\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    //nneedsubsample: nneedsubsample,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent\r\n\r\n                })\r\n                urlArray[2] = TestGet;\r\n            }\r\n            const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                userinfo\r\n            })\r\n\r\n            urlArray[3] = currentDate\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo\r\n            })\r\n            urlArray[4] = dateService\r\n\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                } else {\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                //     let containerType = comboData1['Container Type'] || []\r\n                //     comboData1['ContainerType'] = comboData1['Container Type'] || []\r\n                //     let containerList = []\r\n                //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                //     containerType.map(x => {\r\n                //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                //             containerList.push(x)\r\n                //         }\r\n                //     })\r\n\r\n                //     comboData1['Container Type'] = containerList\r\n                // }\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChildscreenName: \"SubSample\",\r\n                        screenName: \"SubSample\",\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        SubSamplecomboData: comboData1,\r\n                        SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        parentSubSampleColumnList: columnList,\r\n                        childSubSampleColumnList: childColumnList,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList,\r\n            SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n        return (dispatch) => {\r\n            if (!specBasedComponent) {\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    //nneedsubsample: nneedsubsample,\r\n                    ...Map,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                Axios.all(urlArray).then(response => {\r\n                    const TestCombined = response[0].data\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\") {\r\n                            selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                componentrow.radioOptions.tags[0].text : \"\";\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: \"SubSample\",\r\n                            screenName: \"SubSample\",\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent: [],\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            TestCombined: TestCombined\r\n                        }\r\n                    });\r\n                })\r\n            } else {\r\n                // Component = Component ? Component : []\r\n\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                Axios.all(urlArray).then(response => {\r\n                    // const lstComponent =  response.data.lstComponent\r\n                    let lstComponent = response[0].data.lstComponent //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\r\n                    const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\") {\r\n                            selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                componentrow.radioOptions.tags[0].text : \"\";\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: \"SubSample\",\r\n                            screenName: \"SubSample\",\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent,\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            TestCombined: [],\r\n                            selectedTestData: []\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        Component = Component ? Component : []\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent\r\n\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                //let Test = [];\r\n                // Test[selectedobject.slno] = TestData;\r\n                const Map = {}\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectComponent\"] = selectedobject\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        TestCombined: TestData, ...Map, loading: false, selectedTestData: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function addSubSampleSaveContinue(Map1, Map,\r\n    specBasedComponent, Component, selectedTestData, lstComponent) {\r\n\r\n    //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n    //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n    return (dispatch) => {\r\n        if (!specBasedComponent) {\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                nspecsampletypecode: Map[\"nspecsampletypecode\"],\r\n                slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\r\n                specBasedComponent: specBasedComponent\r\n            }).then(response => {\r\n                let TestCombined = response.data\r\n                selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : []\r\n                const selectedTestData1 = TestCombined.filter(function (x) {\r\n                    return selectedTestData.some(function (y) {\r\n                        return x[\"ntestgrouptestcode\"] === y.value\r\n                    })\r\n                });\r\n                // const selectedTestData2 = []\r\n                // TestCombined.map(x=>{\r\n                //     selectedTestData1.map(y=>{\r\n                //         if(x[\"ntestgrouptestcode\"] !== y[\"ntestgrouptestcode\"]){\r\n                //             selectedTestData2.push(x)\r\n                //         } \r\n                //     })\r\n                // });\r\n\r\n\r\n                //  let filterArray = filterRecordBasedOnTwoArrays(selectedTestData1, TestCombined, \"ntestgrouptestcode\")\r\n                // const filterArray = [...selectedTestData1, ...TestCombined]\r\n\r\n                selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\")\r\n                selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\")\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...Map1,\r\n                        loading: false,\r\n                        TestCombined,\r\n                        selectedTestData,\r\n                        masterStatus:intl.formatMessage({ id: \"IDS_SAVESUCCESSFULLY\" })\r\n                    }\r\n                });\r\n            })\r\n        }\r\n        else {\r\n            // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\r\n            Map1.selectComponent[\"ncomponentcode\"] = {};\r\n            Map1.selectComponent[\"Sample Name\"] = \"\";\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...Map1,\r\n                    loading: false,\r\n                    TestCombined: [],\r\n                    selectedTestData: [],\r\n                    lstComponent\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function editSubSample(Map,\r\n    component, userInfo, specBasedComponent,\r\n    SubSamplecomboData, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        let Componnet = {}\r\n        if (specBasedComponent) {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map\r\n            });\r\n        }\r\n        urlArray = [Componnet]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let comp = []\r\n                if (specBasedComponent) {\r\n                    comp = response[0].data.lstComponent\r\n                }\r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                if (Map.nregsubtypecode === 6) {\r\n                    let portalOrder = component['Container Type'] || {}\r\n                    let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    let containerList = []\r\n                    const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    containerType.map(x => {\r\n                        if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                            containerList.push(x)\r\n                        }\r\n                    })\r\n\r\n                    SubSamplecomboData['Container Type'] = containerList\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: \"SubSample\",\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent, SubSamplecomboData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    let selectedSubSample = RegistrationGetSubSample;\r\n                    RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                    let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                        selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                        RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                        selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                    }\r\n                    // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                        RegistrationGetTest = masterData.RegistrationGetTest;\r\n                    }\r\n\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        SelectedTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        SelectedTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: []\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistrationScheduler(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                //     let selectedSample = response.data[\"selectedSample\"];\r\n                //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                //     let selectedSubSample = RegistrationGetSubSample;\r\n                //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                //     if (inputParam.inputData.nneedsubsample) {\r\n                //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                //     }\r\n                //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                //     if (inputParam.multipleselectionFlag) {\r\n                //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\r\n                //     }\r\n\r\n\r\n                //     masterData = {\r\n                //         ...masterData, ...response.data,\r\n                //         selectedSample, selectedSubSample, selectedTest,\r\n                //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                //     }\r\n                let respObject = {\r\n                    masterData: { ...masterData, SchedulerTransaction: response[\"data\"].SchedulerTransaction },\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {},\r\n                    subSampleDataGridList: []\r\n                }\r\n                // inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n                // } else {\r\n                //     toast.warn(response.data.rtn);\r\n                //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                // }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeTestTab,\r\n            activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\r\n            checkBoxOperation: inputData.nneedsubsample === true ?\r\n                inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"npreregno\");\r\n                    sortData(response.data['RegistrationAttachment']);\r\n                    sortData(response.data['RegistrationComment']);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationComment = [];\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 7) {\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     APSelectedTest:responseData.APSelectedTest,\r\n                            //     AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            // }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\r\n                            }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationComment = [];\r\n\r\n                        if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            let npreregno;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                                npreregno = inputData.masterData.RegistrationGetSample.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetSample[0].npreregno : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                        masterData['RegistrationComment'] = RegistrationComment;\r\n\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n\r\n\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    let oldSelectedSubSample = inputData.masterData.selectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationParameter = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [],\r\n                            //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\r\n            if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\r\n                value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n                const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\r\n                // const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\r\n                if (selectedsample && selectedsample.length > 0) {\r\n                    const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n                    if (findTransactionStatus.length === 1) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                            if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\r\n                                const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                                if (findApprovalVersion.length === 1) {\r\n                                    const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                    {\r\n                                        inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample &&\r\n                                            [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                        dispatch(initRequest(true));\r\n                                        rsapi.post(\"/registration/getMoreTest\", { ...inputParam })\r\n                                            .then(response => {\r\n                                                dispatch({\r\n                                                    type: DEFAULT_RETURN,\r\n                                                    payload: {\r\n                                                        availableTest: response.data,\r\n                                                        loadChildTest: true,\r\n                                                        loading: false, ncontrolCode,\r\n                                                        screenName: \"IDS_TEST\",\r\n                                                        operation: \"create\",\r\n                                                        openModal: true,\r\n                                                        parentPopUpSize: \"lg\",\r\n                                                        selectedRecord: {},\r\n                                                        showSample: undefined\r\n                                                    }\r\n                                                });\r\n                                            })\r\n                                            .catch(error => {\r\n                                                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                                if (error.response.status === 500) {\r\n                                                    toast.error(error.message);\r\n                                                } else {\r\n                                                    toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                                                }\r\n                                            });\r\n                                    } else {\r\n                                        toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                    }\r\n                                } else {\r\n                                    toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                                }\r\n                            }\r\n                            else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\" }));\r\n                            }\r\n                        }\r\n                        else {\r\n                            ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                        }\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest,\r\n                    selectedTest: response.data[\"RegistrationGetTest\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         [modalName]: false,\r\n                //         loading: false,\r\n                //         loadChildTest: false,\r\n                //         showSample: undefined,\r\n                //         openModal: false,\r\n                //         selectedRecord: {}\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation, masterData } = { ...inputParam };\r\n\r\n        if (masterData[\"selectedSample\"].length > 1 ||\r\n            masterData[\"selectedSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editRegParam[\"getSampleChildDetail\"] = true;\r\n        }\r\n        masterData[\"selectedSample\"] = [];\r\n        masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n        //     parentcolumnlist: columnList,\r\n        //     childcolumnlist: childColumnList,\r\n        //     userinfo: userInfo\r\n        // })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\r\n            ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: userInfo\r\n        })\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo:userInfo\r\n        })\r\n\r\n        urlArray = [timeZoneService, selectedRegistration,dateService]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n                // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n                \r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                \r\n                //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                // selectedRecord, childColumnList, withoutCombocomponent)\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n                                \r\n                                if(date.nperiodcode){\r\n                                    selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                                }else{\r\n                                    selectedRecord[date.label+ \"value\"] = new Date();\r\n                                }\r\n\r\n                                if (date.hidebeforedate) {\r\n                                    selectedRecord[date.label + \"min\"] =selectedRecord[date.label + \"value\"]\r\n                                }\r\n                                if (date.hideafterdate) {\r\n                                    selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                                }\r\n                        }\r\n                    })\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                    const selectedSpec = {}\r\n                    Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response[1].data[\"AgaramTree\"];\r\n                    ActiveKey = response[1].data[\"FocusKey\"];\r\n                    FocusKey = response[1].data[\"ActiveKey\"];\r\n                    OpenNodes = response[1].data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ?\r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                    selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            AgaramTree,\r\n                            FocusKey,\r\n                            ActiveKey,\r\n                            OpenNodes,\r\n                            selectedSpec,\r\n                            Specification,\r\n                            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            // currentTime,\r\n                            operation: \"update\",\r\n                            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            // PopUpLabel: popUpLabel,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    // sortData(response.data);\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                    //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedSample: response.data[\"selectedSample\"],\r\n                        // selectedSubSample: masterData[\"selectedSubSample\"],\r\n                        //selectedTest:masterData[\"selectedTest\"],\r\n                        // RegistrationGetTest,\r\n                        // RegistrationGetSubSample,\r\n                        RegistrationParameter: masterData[\"RegistrationParameter\"]\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                            regDateEditConfirmMessage: undefined, loadEsign: false, openModal: false,\r\n                            loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                        }\r\n                    });\r\n                    // let inputData = {\r\n                    //     masterData,\r\n                    //     selectedTest: masterData.selectedTest,\r\n                    //     ntransactiontestcode: masterData.selectedTest ?\r\n                    //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    //     npreregno: masterData.selectedSample ?\r\n                    //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    //     userinfo: inputParam.inputData.userinfo,\r\n                    //     activeTestTab : masterData.activeTestTab,\r\n                    //     screenName: masterData.activeTestTab,\r\n                    //     resultDataState: inputParam.resultDataState,\r\n                    //     testCommentDataState: inputParam.testCommentDataState,\r\n                    // }\r\n                    // dispatch(getTestChildTabDetail(inputData, true))\r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n                    //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: regcolumnList,\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n\r\n        Axios.all(urlArray).then(response => {\r\n            const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n            const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n            const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n            const newcomboData = parentChildComboLoad(regcolumnList, response[1].data,\r\n                selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n            let TestCombined = [];\r\n            let lstComponent = [];\r\n            if (specBasedComponent) {\r\n                const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n\r\n                lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n            } else {\r\n                TestCombined = response[2].data\r\n            }\r\n            const comboData1 = newcomboData.comboData\r\n            const selectedRecord1 = newcomboData.selectedRecord\r\n            regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                if (componentrow.inputtype === \"date\") {\r\n                    if (componentrow.loadcurrentdate) {\r\n                        selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                        selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                    } else if (componentrow.nperiodcode) {\r\n                        selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                            new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                        if (componentrow.loadselecteddate) {\r\n                            selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                        }\r\n                        //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                        //    new Date(response[2].data[componentrow.label]):null;\r\n                    } else {\r\n                        selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                    }\r\n\r\n                    if (componentrow.hidebeforedate) {\r\n                        selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                    }\r\n                    if (componentrow.hideafterdate) {\r\n                        selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                    }\r\n\r\n                }\r\n                else if (componentrow.inputtype === \"radio\") {\r\n                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                        componentrow.radioOptions.tags[0].text : \"\";\r\n                }\r\n\r\n            })\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    screenName: \"SubSample\",\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    operation: \"create\",\r\n                    loadRegSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function saveSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                // let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample = response.data[\"selectedSubSample\"];// RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n\r\n                let RegistrationParameter = response.data[\"RegistrationParameter\"]\r\n\r\n                RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode')\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationParameter\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample: false\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                //    dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         openModal: false,\r\n                //         loadEsign: false,\r\n                //         loading: false,\r\n                //         showSample: undefined,\r\n                //         selectedRecord: {},\r\n                //         loadRegSubSample:false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n\r\n        if (masterData[\"selectedSubSample\"].length > 1 ||\r\n            masterData[\"selectedSubSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedSubSample\"] = [];\r\n        masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\r\n        inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\r\n        inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n        //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\r\n\r\n        const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (ntransactionsamplecode === undefined) {\r\n            toast.warn(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            //     parentcolumnlist: columnList,\r\n            //     childcolumnlist: childColumnList,\r\n            //     userinfo: userInfo\r\n            // })\r\n            const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", {\r\n                ...inputParam.editSubSampleRegParam, ntransactionsamplecode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo:userInfo\r\n            })\r\n    \r\n\r\n            urlArray = [timeZoneService, selectedRegistration,dateService]\r\n            // if(specBasedComponent){\r\n            //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n            //         ...Map,\r\n            //         specBasedComponent: specBasedComponent\r\n            //     })\r\n            //     urlArray.push(ComponentTestBySpec) \r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                    // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\r\n                    //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\r\n                    //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    // }\r\n\r\n                    //else {\r\n                    //               let lstComponent=[]\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    // withoutCombocomponent.map(date => {\r\n                    //     if (date.inputtype === 'date')\r\n                    //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                    //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\r\n                    // })\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n                                \r\n                                if(date.nperiodcode){\r\n                                    selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                                }else{\r\n                                    selectedRecord[date.label+ \"value\"] = new Date();\r\n                                }\r\n\r\n                                if (date.hidebeforedate) {\r\n                                    selectedRecord[date.label + \"min\"] =selectedRecord[date.label + \"value\"]\r\n                                }\r\n                                if (date.hideafterdate) {\r\n                                    selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                                }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            screenName: \"IDS_SUBSAMPLE\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData\r\n                        }\r\n                    })\r\n                    // }\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    // selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                    // RegistrationGetSubSample,\r\n                    RegistrationParameter: response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: \"SubSample\",\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelSubSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                delete response.data[\"RegistrationGetSample\"];\r\n                delete response.data[\"RegistrationGetSubSample\"];\r\n                delete response.data[\"RegistrationGetTest\"];\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst toTimestamp = (strDate) => {\r\n    // const dt = new Date(strDate).getTime();\r\n    // return dt / 1000;\r\n    const dt = strDate.getTime();\r\n    return dt;\r\n}\r\n\r\nexport function getDynamicFilter(inputParam) {\r\n    if (inputParam.component.inputtype === 'frontendsearchfilter') {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const source = inputParam.component.source\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const lstData = response.data[inputParam.component.label]\r\n\r\n\r\n                    // const responseparam={}\r\n                    const gridColumns = []\r\n                    const fields = []\r\n                    const datefileds = []\r\n                    const multilingual = []\r\n                    inputParam.component.filterfields.map(item => {\r\n                        fields.push(filterObject(item, languageTypeCode, response.data));\r\n                        if (item.ismultilingual) {\r\n                            multilingual.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype === \"date\") {\r\n                            datefileds.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype !== 'predefinednumeric') {\r\n                            gridColumns.push(creategridColumns(item, languageTypeCode,));\r\n                        }\r\n                    })\r\n\r\n                    const optionList = lstData.map(item => {\r\n                        const jsondata = item[source] ? item[source].value ?\r\n                            JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                        datefileds.map(x => {\r\n                            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]))\r\n                        })\r\n                        multilingual.map(mul => {\r\n                            jsondata[mul] =\r\n                                jsondata[mul][languageTypeCode] || jsondata[mul]['en-US']\r\n                                ;\r\n                        })\r\n\r\n\r\n                        return jsondata\r\n                    });\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList, gridColumns, fields,\r\n                            loadCustomSearchFilter: true\r\n                            , loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            kendoFilter: {\r\n                                logic: \"and\",\r\n                                filters: []\r\n                            },\r\n                            awesomeTree: undefined,\r\n                            awesomeConfig: undefined,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const { fields, gridColumns } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: [], gridColumns, fields,\r\n                            loadCustomSearchFilter: true\r\n                            , loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            kendoFilter: {\r\n                                logic: \"and\",\r\n                                filters: []\r\n                            },\r\n                            awesomeTree: undefined,\r\n                            awesomeConfig: undefined,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nlet datapredef = {}\r\nconst CustomFilter = props => {\r\n    const { filter, data = [], defaultItem } = props;\r\n    const onChange = event => {\r\n        props.onFilterChange.call(undefined, {\r\n            nextFilter: { ...props.filter, value: event.target.value.value }\r\n        });\r\n    };\r\n\r\n    return <ComboBox onChange={onChange} data={filter.field ? datapredef[filter.field] : []} textField=\"text\" />;\r\n};\r\n\r\nexport function creategridColumns(item, languageTypeCode) {\r\n    let obj = {}\r\n    if (item.filterinputtype !== 'predefinednumeric') {\r\n        return {\r\n            field: item.columnname,\r\n            title: item.displayname[languageTypeCode], width: \"200px\"\r\n        }\r\n    }\r\n}\r\n\r\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    obj['fields'] = {}\r\n    obj['gridColumns'] = []\r\n    filterFields.map(item => {\r\n        if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n            const optionList = resposedata[item.predefinedtablename].map(data => {\r\n                const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                    JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n                jsondata['title'] = item.predefinedismultilingual ?\r\n                    jsondata[item.predefineddisplaymember]\r\n                    [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                    : jsondata[item.predefineddisplaymember];\r\n                jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n                return jsondata\r\n            });\r\n            datapredef[item.columnname] = optionList\r\n        }\r\n        switch (item.filterinputtype) {\r\n            case \"text\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                   \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"text\",\r\n                    valueSources: [\"value\", \"func\"],\r\n                    mainWidgetProps: {\r\n                        \"valueLabel\": \"Name\",\r\n                        \"valuePlaceholder\": \"Enter\" + item.displayname[languageTypeCode]\r\n                    }\r\n                }\r\n                break;\r\n            case \"numeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"number\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        ...item.numericcondition\r\n                    }\r\n                }\r\n                break;\r\n            case \"date\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"date\",\r\n                    valueSources: [\"value\"],\r\n                }\r\n                break;\r\n            case \"predefinednumeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"predefinedtext\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\"+ item.columnname+\"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n        }\r\n        const gridColumns = creategridColumns(item, languageTypeCode)\r\n        if (item.filterinputtype !== 'predefinednumeric') {\r\n            obj['gridColumns'].push(gridColumns)\r\n        }\r\n\r\n\r\n    })\r\n    return obj;\r\n}\r\n\r\nexport function filterObject(item, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    let preobj = {}\r\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n        const optionList = resposedata[item.predefinedtablename].map(data => {\r\n            const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n            jsondata['text'] = item.predefinedismultilingual ?\r\n                jsondata[item.predefineddisplaymember]\r\n                [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                : jsondata[item.predefineddisplaymember];\r\n            jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n            //delete jsondata.jsondata\r\n            return jsondata\r\n        });\r\n        datapredef[item.columnname] = optionList\r\n        // preobj = {\r\n        //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\r\n        //     predefinedvaluemember: item.columnname\r\n        // }\r\n    }\r\n    switch (item.filterinputtype) {\r\n        case \"text\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n        case \"numeric\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: NumericFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"date\":\r\n            return obj = {\r\n                name: item.columnname + \"timestamp\",\r\n                label: item.displayname[languageTypeCode],\r\n                filter: DateFilter,\r\n                operators: Operators.date,\r\n            }\r\n        case \"predefinednumeric\":\r\n\r\n\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"predefinedtext\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.text,\r\n            }\r\n        default:\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n\r\n    }\r\n\r\n    //return obj;\r\n}\r\n\r\nexport function getDynamicFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        lstPatient: optionList,\r\n                        loading: false,\r\n                        screenName: inputParam.component.displayname[languageTypeCode]\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\r\n    let splitChar = \"/\";\r\n\r\n    if (dateValue !== undefined) {\r\n        const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\")\r\n        if (index !== -1)\r\n            splitChar = userInfo.ssitedatetime.substring(index, index + 1)\r\n\r\n    }\r\n    //   console.log(\"splitChar:\", splitChar);\r\n    if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\r\n        const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0];\r\n        // console.log(\"firstField:\", firstField);\r\n        const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \"\r\n        const datetime = dateValue.split(timeSplitChar);\r\n        const dateArray = datetime[0].split(splitChar);\r\n        if (firstField === \"dd\") {\r\n            const day = dateArray[0];\r\n            const month = dateArray[1];\r\n            const year = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else if (firstField === \"yyyy\") {\r\n            const year = dateArray[0];\r\n            const month = dateArray[1];\r\n            const day = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else {\r\n            return new Date(dateValue);\r\n        }\r\n    }\r\n    else {\r\n        return dateValue;\r\n    }\r\n}\r\n\r\nexport function preRegDispatch(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                ...inputParam\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function validateEsignforRegistration(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"registration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"preregister\":\r\n                dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"editSample\":\r\n                dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"accept\":\r\n                dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"quarantine\":\r\n                dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelTest\":\r\n                dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelSample\":\r\n                dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"addregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"deleteregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"printer\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}