{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageTransaction.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, replaceBackSlash, Lims_JSON_stringify } from '../../components/CommonScript'; //import SortableTree from 'react-sortable-tree'; \n\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport Esign from '../audittrail/Esign';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder'; //import { ReactSpreadsheetImport } from 'react-spreadsheet-import';\n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport ImportSampleStorageTransaction from './ImportSampleStorageTransaction';\nimport { intl } from '../../components/App';\nimport { transactionStatus } from '../../components/Enumeration';\n\nclass SampleStorageTransaction extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n      // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\n      //      if (!this.state.isFilterPopup) {\n      //         this.getDynamicFilterExecuteData(2)\n      //    }\n\n\n      this.setState({\n        selectedRecord,\n        ExcelImport: false,\n        openModal: false,\n        isInitialRender: true,\n        isFilterPopup: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else if (this.state.ExcelImport !== undefined && this.state.ExcelImport === true) {\n        this.singlesampleimport(saveType, formRef);\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        openSpreadSheet: false,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data;\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.handleImportClick = () => {\n      if (this.props.Login.masterData.sampleStorageLocation !== undefined) {\n        this.setState({\n          loading: false,\n          openModal: true,\n          ExcelImport: true,\n          isMultiSampleAdd: false,\n          openSpreadSheet: false,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_IMPORTEXCEL\"\n          })\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PROJECTTYPE\"\n        }));\n      }\n    };\n\n    this.handleExportClick = () => {\n      let exportFiled = [{\n        \"idsName\": \"IDS_PROJECTTYPECODE\",\n        \"dataField\": \"nsamplestoragelocationcode\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"nsamplestoragemappingcode\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_STORAGESTRUCTURECODE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_STORAGESTRUCTURE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATHCODE\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_SAMPLEPOSITION\",\n        \"dataField\": \"spositionvalue\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_SAMPLEID\",\n        \"dataField\": \"\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }, {\n        \"idsName\": \"IDS_METADATA\",\n        \"dataField\": \"\",\n        \"width\": \"200px\",\n        \"staticField\": true\n      }];\n      return exportFiled;\n    };\n\n    this.singlesampleexport = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data;\n      const url1 = rsapi.post(\"samplestoragetransaction/getSingleExport\", {\n        nsamplestoragemappingcode: param.nsamplestoragemappingcode,\n        nprojecttypecode: param.nprojecttypecode,\n        nsamplestoragelocationcode: param.nsamplestoragelocationcode,\n        sprojecttypename: param.sprojecttypename,\n        ssamplestoragelocationname: param.ssamplestoragelocationname,\n        scontainerpath: param.scontainerpath,\n        nquantity: param.nquantity,\n        sunitname: param.sunitname,\n        nrow: param.nrow,\n        ncolumn: param.ncolumn,\n        ssampleid: \"\",\n        scomments: \"\",\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let value = \"\";\n\n        if (response[0].data.rtn === \"Success\") {\n          value = response[0].data[\"exportFileViewUrl\"];\n          const win = window.open(value);\n\n          if (win) {\n            win.focus();\n          } else {\n            toast.warn(intl.formatMessage(\"IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE\"));\n          }\n        } else {\n          if (response[0].data.rtn) {\n            toast.warn(intl.formatMessage({\n              id: response[0].data.rtn\n            }));\n          }\n        }\n\n        this.setState({\n          openModal: false,\n          isMultiSampleAdd: false,\n          openSpreadSheet: false,\n          editedsheetData: param,\n          Rows: param.nrow,\n          columns: param.ncolumn,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response && error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response ? error.response.data : error.message);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.singlesampleimport = () => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let selectedRecord = this.state.selectedRecord || {};\n      const acceptedFiles = this.state.selectedRecord.sfilename;\n      const formData = new FormData();\n\n      if (acceptedFiles && acceptedFiles.length === 1) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = {};\n            tempData['nprojecttypecode'] = this.state.selectedProjectType && this.state.selectedProjectType.value || -1;\n          });\n          formData.append(\"nprojecttypecode\", this.state.selectedProjectType.value || -1);\n          formData.append(\"filecount\", acceptedFiles.length);\n          formData.append(\"ImportFile\", selectedRecord['sfilename'][0]);\n          formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          const url1 = rsapi.post(\"samplestoragetransaction/getImportData\", formData);\n          urlArray = [url1];\n          Axios.all(urlArray).then(response => {\n            const selectedRecord = {};\n            this.setState({\n              selectedRecord: selectedRecord,\n              ExcelImport: false,\n              openModal: false,\n              isMultiSampleAdd: false,\n              loading: false\n            });\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          });\n        } else {\n          this.setState({\n            loading: false\n          });\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTTHEFILE\"\n          }));\n        }\n      } else {\n        this.setState({\n          loading: false\n        });\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTTHEFILE\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n      let selectedProjectType = this.state.selectedProjectType;\n      let masterData = this.state.masterData;\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        if (selectedProjectType.value !== comboData.value) {\n          masterData = { ...masterData,\n            sampleStoragetransaction: []\n          };\n        }\n\n        this.setState({\n          masterData,\n          selectedProjectType: {\n            label: comboData.label,\n            value: comboData.value\n          }\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.openSpreadSheet ? [] : (this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false) && this.state.ExcelImport === false ? [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }] : this.state.ExcelImport ? [{\n        \"idsName\": \"IDS_FILE\",\n        \"dataField\": \"sfilename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"ncontainerstructurecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_DIRECTION\",\n        \"dataField\": \"ndirectionmastercode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.checkFilterIsEmptyQueryBuilder = treeData => {\n      //this condition is handle for bulk record only \n      if (this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69']) === transactionStatus.YES) {\n        let isFilterEmpty = true;\n        return isFilterEmpty;\n      } else {\n        let ParentItem = { ...treeData\n        };\n        let isFilterEmpty = false;\n        let childArray = ParentItem.children1;\n\n        if (childArray && childArray.length > 0 && childArray !== undefined) {\n          for (var i = 0; i < childArray.length; i++) {\n            let childData = childArray[i];\n\n            if (!childData.hasOwnProperty('children1')) {\n              if (childData.properties.operator !== \"is_empty\" && childData.properties.operator !== \"is_not_empty\" && childData.properties.operator !== \"is_null\" && childData.properties.operator !== \"is_not_null\") {\n                isFilterEmpty = true;\n                return isFilterEmpty;\n              }\n            } else {\n              if (childData) {\n                ParentItem = this.checkFilterIsEmptyQueryBuilder(childData);\n\n                if (!ParentItem) {\n                  return ParentItem;\n                }\n              }\n            }\n          }\n        }\n\n        return isFilterEmpty;\n      }\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\n      let tree = QbUtils.getTree(immutableTree);\n      tree = QbUtils.queryString(immutableTree, config, true);\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: { ...selectedRecord\n        }\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      extractedColumnList: [{\n        \"idsName\": \"IDS_STORAGESTRUCTURE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"450px\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"navailablespace\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"width\": \"100px\"\n      }, //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\n      {\n        \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"scontainertype\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"scontainerstructurename\",\n        \"width\": \"200px\"\n      }],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0,\n        group: [{\n          field: \"ssamplestoragelocationname\"\n        }]\n      }\n    };\n    let fields = {};\n\n    if (this.state.extractedColumnList) {\n      this.state.extractedColumnList.map(field => {\n        if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname' && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype' && field.dataField !== 'scontainerstructurename') {\n          fields = { ...fields,\n            [field.dataField]: {\n              \"label\": this.props.intl.formatMessage({\n                id: field.idsName\n              }),\n              \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n              \"valueSources\": [\"value\", \"func\"],\n              \"mainWidgetProps\": {\n                \"valueLabel\": \"Name\",\n                \"valuePlaceholder\": this.props.intl.formatMessage({\n                  id: field.idsName\n                })\n              }\n            }\n          };\n        }\n      });\n    }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      dataStateChange\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nproductcode,\n        \"title\": item.sproductname\n      }));\n      fields = { ...fields,\n        'nproductcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_PRODUCT\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      masterData = this.props.Login.masterData;\n      this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nprojecttypecode,\n        \"title\": item.sprojecttypename\n      })); // fields = {\n      //     ...fields,\n      //     'nprojecttypecode': {\n      //         \"label\": this.props.intl.formatMessage({\n      //             id: \"IDS_PROJECTTYPE\",\n      //         }),\n      //         \"type\": \"select\",\n      //         \"valueSources\": [\"value\"],\n      //         \"fieldSettings\": {\n      //             \"listValues\": queryBuilderFreezer\n      //         }\n      //     }\n      // }\n\n      selectedProjectType = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\n    }\n\n    if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainertypecode,\n        \"title\": item.scontainertype\n      }));\n      fields = { ...fields,\n        'ncontainertypecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERTYPE\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainerstructurecode,\n        \"title\": item.scontainerstructurename\n      }));\n      fields = { ...fields,\n        'ncontainerstructurecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERSTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData(this.state.masterData); //ALPD-4496 janakumar  pagination  work \n\n      let group = this.state.dataStateChange.group !== undefined ? this.state.dataStateChange.group : [];\n      dataStateChange = {\n        take: 10,\n        skip: 0,\n        group: group\n      };\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        dataStateChange,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType\n      });\n    } // if (this.state.masterData.ExcelImport!== previousState.masterData.ExcelImport) {\n    //     this.setState({ ExcelImport: this.state.masterData.ExcelImport })\n    // }\n\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\n\n      if (isFilterEmpty) {\n        this.setState({\n          loading: true\n        });\n        let obj = {\n          // ...inputParam.component, \n          label: 'sampleStoragetransaction',\n          valuemember: 'nsamplestoragemappingcode',\n          filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value : selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n          source: 'view_samplestoragelocation',\n          userinfo: this.props.Login.userInfo\n        };\n        let urlArray = [];\n        const url1 = rsapi.post(\"/samplestoragetransaction/getdynamicfilterexecutedata\", obj);\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          let masterData = this.state.masterData;\n          masterData = { ...masterData,\n            ...response[0].data\n          };\n          this.setState({\n            masterData: { ...masterData\n            },\n            loading: false,\n            openModal: false,\n            isFilterPopup: false,\n            submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n            } : { ...selectedRecord\n            },\n            selectedRecord: {},\n            displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data.rtn);\n          }\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\"\n        }));\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\n    const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\n    const singleExport = this.state.controlMap.has(\"ExportExcel\") && this.state.controlMap.get(\"ExportExcel\").ncontrolcode;\n    const singleImport = this.state.controlMap.has(\"ImportExcel\") && this.state.controlMap.get(\"ImportExcel\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1675,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1680,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1681,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedProjectType ? this.state.selectedProjectType || [] : [],\n      options: this.state.masterData && this.state.masterData.projectTypeOptions || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1682,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1698,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1699,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      isDownloadPDFRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isDownloadExcelRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isRefreshRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      reloadData: e => this.getDynamicFilterExecuteData(2),\n      isCustomButton: true,\n      customButtonlist: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? [{\n        label: 'IDS_IMPORTEXCEL',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(singleImport) === -1,\n        onClick: () => this.handleImportClick({}, 2),\n        controlname: 'faFileImport'\n      }, {\n        label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\n        onClick: () => this.addSample({}, 2),\n        controlname: 'faBoxes'\n      }, {\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }] : [{\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }],\n      cellRender: this.cellRender,\n      group: this.state.group || [] // onGroupChange={this.handleGroupChange}\n      ,\n      primaryKeyField: 'nsamplestoragemappingcode',\n      groupable: true,\n      groupfooter: true,\n      aggregateLabel: 'IDS_AVAILABLESPACE',\n      aggregatedColumn: 'navailablespace',\n      data: this.state.masterData && this.state.masterData.sampleStoragetransaction,\n      dataResult: // process(this.state.masterData.sampleStoragetransaction || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 })\n      this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }) : [] // this.state.masterData && this.state.masterData.sampleStoragetransaction\n      //     ? (\n      //         this.state.masterData.sampleStoragetransaction.length > this.state.dataStateChange.skip\n      //             ? this.state.dataStateChange.skip = 0\n      //             : this.state.dataStateChange,\n      //         this.processWithGroups(\n      //             this.state.masterData.sampleStoragetransaction,\n      //             this.state.dataStateChange || { take: 10, skip: 0 }\n      //         )\n      //     )\n      //     : []\n      ,\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.state.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord // addRecord={() => this.openStorageMapping()}\n      ,\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EXPORTEXCEL\"\n        }),\n        controlname: \"faFileExcel\",\n        hidden: this.state.userRoleControlRights.indexOf(singleExport) === -1,\n        objectName: \"export\",\n        onClick: param => this.singlesampleexport(param, 1)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDSAMPLETOABOX\"\n        }),\n        controlname: \"faBox\",\n        hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\n        objectName: \"add\",\n        onClick: param => this.addSample(param, 1)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1700,\n        columnNumber: 37\n      }\n    })))), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1824,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true //fileName={`${masterData?.realProjectType?.label || 'Project'}_${masterData?.realBarcodeConfig?.label || 'Barcode'}_${new Date().toISOString()}`}\n      ,\n      ref: exporter => {\n        this._excelExport = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1843,\n        columnNumber: 29\n      }\n    }, this.state.samplepositionvalues.map((item, index) => item.sfieldname !== 'samplepositionvalues' && /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      key: index,\n      field: item.sfieldname,\n      title: item.sfieldname,\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1851,\n        columnNumber: 41\n      }\n    })))) : \"\"), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: true,\n      needClose: this.state.ExcelImport ? false : this.state.isFilterPopup ? true : false,\n      showSubmit: this.state.openSpreadSheet ? false : true,\n      size: this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam // screenName={this.state.isFilterPopup ? \"\" :\n      //     this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGE\" })\n      //         : this.state.editedsheetData && this.state.editedsheetData.scontainerpath}\n      ,\n      screenName: this.state.ExcelImport ? this.props.intl.formatMessage({\n        id: \"IDS_IMPORTEXCEL\"\n      }) : this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGE\"\n      }) : this.state.editedsheetData && this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.props.Login.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.state.fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1890,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1906,\n          columnNumber: 37\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        updateStore: this.props.updateStore,\n        intl: this.props.intl,\n        Rows: this.state.Rows || 1,\n        AdditionalFieldsComponentData: this.state.AdditionalFieldsComponentData,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        nbarcodedescription: this.props.Login.settings && parseInt(this.props.Login.settings[36]),\n        nbarcodeLength: this.props.Login.settings && parseInt(this.props.Login.settings[37]),\n        sbarcodeboxWidth: this.props.Login.settings && this.props.Login.settings[38],\n        multipleSheetData: this.state.masterData && this.state.masterData.sampleStoragetransaction && process(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1920,\n          columnNumber: 45\n        }\n      }))) : this.state.ExcelImport ? /*#__PURE__*/React.createElement(ImportSampleStorageTransaction, {\n        operation: this.state.operation //loadImportFileData={this.props.Login.masterData}\n        ,\n        onDropFile: this.onDropFile,\n        selectedRecord: this.state.selectedRecord || {},\n        deleteAttachment: this.deleteAttachment,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1942,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1951,\n          columnNumber: 45\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1866,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(SampleStorageTransaction));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/basemaster/SampleStorageTransaction.jsx"],"names":["React","Component","connect","injectIntl","Row","Col","toast","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","replaceBackSlash","Lims_JSON_stringify","DataGrid","Utils","QbUtils","SlideOutModal","callService","DEFAULT_RETURN","ListWrapper","uuid","ConfirmMessage","Esign","rsapi","AddSampleStorageMapping","Axios","Preloader","process","MatrixComponent","FilterQueryBuilder","FormSelectSearch","LocalizationProvider","ExcelExport","ExcelExportColumn","ImportSampleStorageTransaction","intl","transactionStatus","SampleStorageTransaction","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","updateStore","closeModal","loadEsign","Login","selectedId","state","setState","ExcelImport","isInitialRender","isFilterPopup","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","singlesampleimport","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","masterData","sampleStorageVersion","length","editSampleStorageLocation","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","submittedselectedRecord","addSample","nflag","urlArray","groupedArray","processWithGroups","sampleStoragetransaction","dataStateChange","url1","post","groupedItem","items","item","all","then","response","parse","AdditionalFieldsComponentData","Rows","nrow","columns","ncolumn","catch","error","status","message","warn","handleImportClick","sampleStorageLocation","screenName","formatMessage","handleExportClick","exportFiled","singlesampleexport","nprojecttypecode","sprojecttypename","ssamplestoragelocationname","scontainerpath","nquantity","sunitname","ssampleid","scomments","rtn","win","window","open","focus","acceptedFiles","sfilename","formData","FormData","Array","isArray","forEach","file","index","tempData","selectedProjectType","append","onComboChange","comboData","fieldName","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","label","containerpathCodeArray","inputParam","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","userRoleControlRights","nformcode","ncontrolcode","screenData","getsamplestoragetransaction","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterColumnData","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","selectedObject","unchangeList","indexOf","modalName","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","dataState","approveSampleStorageMapping","checkFilterIsEmptyQueryBuilder","settings","YES","isFilterEmpty","ParentItem","childArray","children1","i","childData","hasOwnProperty","properties","operator","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","get","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","getTree","tree","queryString","sqlFormat","aggregates","field","aggregate","groups","group","newDataState","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","password","validateEsignCredential","extractedColumnList","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","selectedItem","fields","dataField","idsName","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","bool","queryBuilderFreezer","push","sampleType","projectType","filterStorageCategorylist","containerType","values","filterStorageCategory","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","containerStructureList","getDynamicFilterExecuteData","filterquery","filterQueryTreeStr","valuemember","source","displayQuery","info","shouldComponentUpdate","nextProps","nextState","render","has","deleteId","copyId","approveId","addMultipleSampleId","addSampleId","singleExport","singleImport","projectTypeOptions","hidden","onClick","controlname","cellRender","deleteRecord","objectName","export","exporter","_excelExport","samplepositionvalues","sfieldname","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, replaceBackSlash, Lims_JSON_stringify } from '../../components/CommonScript';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {callService} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport { process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\n//import { ReactSpreadsheetImport } from 'react-spreadsheet-import';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport ImportSampleStorageTransaction from './ImportSampleStorageTransaction';\r\n\r\nimport {\r\n    intl\r\n} from '../../components/App';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\n\r\nclass SampleStorageTransaction extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            extractedColumnList: [\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n                { \"idsName\": \"IDS_AVAILABLESPACE\", \"dataField\": \"navailablespace\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\r\n                //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"scontainertype\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\", \"dataField\": \"scontainerstructurename\", \"width\": \"200px\" },\r\n\r\n            ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                group: [\r\n                    {\r\n                        field: \"ssamplestoragelocationname\",\r\n                    },\r\n                ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        if (this.state.extractedColumnList) {\r\n            this.state.extractedColumnList.map(field => {\r\n                if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n                    && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype'\r\n                    && field.dataField !== 'scontainerstructurename') {\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\":\r\n                                this.props.intl.formatMessage({\r\n                                    id: field.idsName,\r\n                                })\r\n                            ,\r\n                            \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, dataStateChange } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nproductcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_PRODUCT\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n            )\r\n            // fields = {\r\n            //     ...fields,\r\n            //     'nprojecttypecode': {\r\n            //         \"label\": this.props.intl.formatMessage({\r\n            //             id: \"IDS_PROJECTTYPE\",\r\n            //         }),\r\n            //         \"type\": \"select\",\r\n            //         \"valueSources\": [\"value\"],\r\n            //         \"fieldSettings\": {\r\n            //             \"listValues\": queryBuilderFreezer\r\n            //         }\r\n            //     }\r\n            // }\r\n            selectedProjectType = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename, value:\r\n                    this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\r\n        }\r\n        if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainertypecode, \"title\": item.scontainertype })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainertypecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERTYPE\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        } if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainerstructurecode, \"title\": item.scontainerstructurename })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainerstructurecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERSTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n            //ALPD-4496 janakumar  pagination  work \r\n            let group = this.state.dataStateChange.group !== undefined ? this.state.dataStateChange.group : [];\r\n            dataStateChange = { take: 10, skip: 0, group: group }\r\n\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions, dataStateChange,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType\r\n            });\r\n        }\r\n        // if (this.state.masterData.ExcelImport!== previousState.masterData.ExcelImport) {\r\n        //     this.setState({ ExcelImport: this.state.masterData.ExcelImport })\r\n        // }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\r\n        //      if (!this.state.isFilterPopup) {\r\n        //         this.getDynamicFilterExecuteData(2)\r\n        //    }\r\n        this.setState({\r\n            selectedRecord,ExcelImport:false,\r\n            openModal: false, isInitialRender: true\r\n            , isFilterPopup: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else if (this.state.ExcelImport !== undefined && this.state.ExcelImport === true) {\r\n            this.singlesampleimport(saveType, formRef);\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    // opensearch=()={\r\n\r\n    // }\r\n\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, openSpreadSheet: false, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                take: 10,\r\n                skip: 0\r\n            }).data;\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    handleImportClick = () => {\r\n        if (this.props.Login.masterData.sampleStorageLocation !== undefined) {\r\n\r\n            this.setState({\r\n                loading: false,\r\n                openModal: true,\r\n                ExcelImport: true,\r\n                isMultiSampleAdd: false, openSpreadSheet: false,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_IMPORTEXCEL\" })\r\n\r\n            });\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_PROJECTTYPE\",\r\n                })\r\n            );\r\n\r\n\r\n        }\r\n    }\r\n\r\n    handleExportClick = () => {\r\n        let exportFiled =\r\n            [\r\n                { \"idsName\": \"IDS_PROJECTTYPECODE\", \"dataField\": \"nsamplestoragelocationcode\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nsamplestoragemappingcode\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURECODE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATHCODE\", \"dataField\": \"scontainerpath\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_SAMPLEPOSITION\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"\", \"width\": \"200px\", \"staticField\": true },\r\n                { \"idsName\": \"IDS_METADATA\", \"dataField\": \"\", \"width\": \"200px\", \"staticField\": true },\r\n            ];\r\n        return exportFiled;\r\n    }\r\n    singlesampleexport = (param, nflag) => {\r\n        this.setState({ loading: true });\r\n        let urlArray = [];\r\n        let groupedArray = this.processWithGroups(\r\n            this.state.masterData.sampleStoragetransaction || [],\r\n            this.state.dataStateChange ? this.state.dataStateChange : { take: 10, skip: 0 }\r\n        ).data;\r\n\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getSingleExport\", {\r\n            nsamplestoragemappingcode: param.nsamplestoragemappingcode,\r\n            nprojecttypecode: param.nprojecttypecode,\r\n            nsamplestoragelocationcode: param.nsamplestoragelocationcode,\r\n            sprojecttypename: param.sprojecttypename,\r\n            ssamplestoragelocationname: param.ssamplestoragelocationname,\r\n            scontainerpath: param.scontainerpath,\r\n            nquantity: param.nquantity,\r\n            sunitname: param.sunitname,\r\n            nrow: param.nrow,\r\n            ncolumn: param.ncolumn,\r\n            ssampleid: \"\",\r\n            scomments: \"\",\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n\r\n        urlArray = [url1];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let value = \"\";\r\n                if (response[0].data.rtn === \"Success\") {\r\n                    value = response[0].data[\"exportFileViewUrl\"];\r\n\r\n\r\n                    const win = window.open(value);\r\n                    if (win) {\r\n                        win.focus();\r\n                    } else {\r\n                        toast.warn(intl.formatMessage(\"IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE\"));\r\n                    }\r\n\r\n                } else {\r\n                    if (response[0].data.rtn) {\r\n                        toast.warn(intl.formatMessage({ id: response[0].data.rtn }));\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    openModal: false,\r\n                    isMultiSampleAdd: false,\r\n                    openSpreadSheet: false,\r\n                    editedsheetData: param,\r\n                    Rows: param.nrow,\r\n                    columns: param.ncolumn,\r\n                    loading: false\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response ? error.response.data : error.message);\r\n                }\r\n                this.setState({ loading: false });\r\n            });\r\n    }\r\n\r\n\r\n\r\n    singlesampleimport = () => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        const acceptedFiles = this.state.selectedRecord.sfilename;\r\n        const formData = new FormData();\r\n\r\n        if (acceptedFiles && acceptedFiles.length === 1) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = {};\r\n                    tempData['nprojecttypecode'] = this.state.selectedProjectType && this.state.selectedProjectType.value || -1;\r\n\r\n                });\r\n                formData.append(\"nprojecttypecode\", this.state.selectedProjectType.value || -1);\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                formData.append(\"ImportFile\", selectedRecord['sfilename'][0])\r\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n                \r\n            const url1 = rsapi.post(\"samplestoragetransaction/getImportData\", formData);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    \r\n                    const selectedRecord = {};\r\n                    this.setState({\r\n                        selectedRecord: selectedRecord,ExcelImport:false,\r\n                        openModal: false, isMultiSampleAdd: false,\r\n                        loading: false\r\n                    })\r\n\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n\r\n\r\n            } else {\r\n                this.setState({ loading: false});\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTTHEFILE\" }))\r\n            }\r\n        } else {\r\n            this.setState({ loading: false});\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTTHEFILE\" }))\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let selectedProjectType = this.state.selectedProjectType;\r\n        let masterData = this.state.masterData;\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nprojecttypecode') {\r\n            if (selectedProjectType.value !== comboData.value) {\r\n                masterData = {\r\n                    ...masterData,\r\n                    sampleStoragetransaction: []\r\n                }\r\n            }\r\n            this.setState({ masterData, selectedProjectType: { label: comboData.label, value: comboData.value } })\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    isInitialRender: true,\r\n                    selectedRecord: {},\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    openModal: false,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                        //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields = this.state.openSpreadSheet ? [] : (this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n            this.state.selectedRecord[\"nneedposition\"] === false) && this.state.ExcelImport === false ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ] : this.state.ExcelImport ? [\r\n            {\r\n                \"idsName\": \"IDS_FILE\",\r\n                \"dataField\": \"sfilename\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            ,\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_DIRECTION\",\r\n                \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n     //ALPD-4635\r\n     checkFilterIsEmptyQueryBuilder=(treeData)=> {\r\n        //this condition is handle for bulk record only \r\n        if(this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69'])===transactionStatus.YES){\r\n            let isFilterEmpty=true;\r\n            return isFilterEmpty;\r\n        }else{\r\n        let ParentItem = { ...treeData };\r\n        let isFilterEmpty=false;\r\n            let childArray = ParentItem.children1;\r\n            if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (!childData.hasOwnProperty('children1')) {\r\n                        if(  childData.properties.operator!==\"is_empty\"\r\n                          && childData.properties.operator!==\"is_not_empty\"\r\n                          && childData.properties.operator!==\"is_null\"\r\n                          && childData.properties.operator!==\"is_not_null\" ){\r\n                            isFilterEmpty=true;\r\n                            return isFilterEmpty;\r\n                    }\r\n                    } else {\r\n                        if (childData) {\r\n                            ParentItem = this.checkFilterIsEmptyQueryBuilder(childData)\r\n                            if(!ParentItem){\r\n                                return ParentItem;\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n            return isFilterEmpty;\r\n        }\r\n      }\r\n\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\r\n            if(isFilterEmpty){\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'sampleStoragetransaction', valuemember: 'nsamplestoragemappingcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                    :\r\n                    selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                , source: 'view_samplestoragelocation', userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestoragetransaction/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\r\n        let tree = QbUtils.getTree(immutableTree);\r\n        tree = QbUtils.queryString(immutableTree, config, true);\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: { ...selectedRecord } });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, sampleStoragetransaction: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    render() {\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n        const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\r\n        const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\r\n        const singleExport = this.state.controlMap.has(\"ExportExcel\") && this.state.controlMap.get(\"ExportExcel\").ncontrolcode;\r\n        const singleImport = this.state.controlMap.has(\"ImportExcel\") && this.state.controlMap.get(\"ImportExcel\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {\r\n\r\n\r\n                        <Col md={12}>\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nprojecttypecode\"}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isMandatory={false}\r\n                                        value={this.state.selectedProjectType ? this.state.selectedProjectType || [] : []}\r\n                                        options={this.state.masterData && this.state.masterData.projectTypeOptions || []}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row><Row>\r\n                                <Col md={12}>\r\n                                    <DataGrid\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [\r\n                                                    {\r\n                                                        label: 'IDS_IMPORTEXCEL',\r\n                                                        id: {},\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(singleImport) === -1,\r\n                                                        onClick: () => this.handleImportClick({}, 2),\r\n                                                        controlname: 'faFileImport'\r\n                                                    },\r\n\r\n                                                    {\r\n                                                        label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\r\n                                                        id: {},\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\r\n                                                        onClick: () => this.addSample({}, 2),\r\n                                                        controlname: 'faBoxes'\r\n                                                    },\r\n                                                    {\r\n                                                        label: 'IDS_SEARCH',\r\n                                                        id: {},\r\n                                                        onClick: () => this.opensearch(),\r\n                                                        controlname: 'faSearch'\r\n                                                    }] : [{\r\n                                                        label: 'IDS_SEARCH',\r\n                                                        id: {},\r\n                                                        onClick: () => this.opensearch(),\r\n                                                        controlname: 'faSearch'\r\n                                                    }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []}\r\n                                        // onGroupChange={this.handleGroupChange}\r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        groupable={true}\r\n                                        groupfooter={true}\r\n                                        aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        aggregatedColumn={'navailablespace'}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={\r\n                                            // process(this.state.masterData.sampleStoragetransaction || [],\r\n                                            //     this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 })\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }) : []\r\n\r\n\r\n                                            // this.state.masterData && this.state.masterData.sampleStoragetransaction\r\n                                            //     ? (\r\n                                            //         this.state.masterData.sampleStoragetransaction.length > this.state.dataStateChange.skip\r\n                                            //             ? this.state.dataStateChange.skip = 0\r\n                                            //             : this.state.dataStateChange,\r\n                                            //         this.processWithGroups(\r\n                                            //             this.state.masterData.sampleStoragetransaction,\r\n                                            //             this.state.dataStateChange || { take: 10, skip: 0 }\r\n                                            //         )\r\n                                            //     )\r\n                                            //     : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        // addRecord={() => this.openStorageMapping()}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        // isComponent={true}\r\n                                        gridHeight={'600px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [{\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_EXPORTEXCEL\" }),\r\n                                                controlname: \"faFileExcel\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(singleExport) === -1,\r\n                                                objectName: \"export\",\r\n                                                onClick: (param) => this.singlesampleexport(param, 1)\r\n                                            },\r\n                                            {\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLETOABOX\" }),\r\n                                                controlname: \"faBox\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\r\n                                                objectName: \"add\",\r\n                                                onClick: (param) => this.addSample(param, 1)\r\n                                            }]}\r\n                                    /></Col></Row>\r\n                        </Col>\r\n\r\n                    }\r\n                    {this.state.export ?\r\n                        <LocalizationProvider>\r\n                            {/* <ExcelExport\r\n                                data={[]}\r\n                                collapsible={true}\r\n                                //fileName={this.props.Login.masterData && this.props.Login.masterData.realProjectType.label + \"_\" + this.props.Login.masterData.realBarcodeConfig.label + \"_\" + new Date()}\r\n                                ref={(exporter) => {\r\n                                    this._excelExportHeader = exporter;\r\n                                }}>\r\n                                {this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields.map((item, index) =>\r\n                                    item.sfieldname !== 'Barcode Id' && (\r\n                                        <ExcelExportColumn\r\n                                            field={item.sfieldname} title={(item.sfieldname)} width={200} />\r\n\r\n\r\n                                    ))\r\n\r\n                                }\r\n\r\n                            </ExcelExport> */}\r\n                            <ExcelExport\r\n                                data={[]}\r\n                                collapsible={true}\r\n                                //fileName={`${masterData?.realProjectType?.label || 'Project'}_${masterData?.realBarcodeConfig?.label || 'Barcode'}_${new Date().toISOString()}`}\r\n                                ref={(exporter) => { this._excelExport = exporter; }}\r\n                            >\r\n                                {this.state.samplepositionvalues.map((item, index) => (\r\n                                    item.sfieldname !== 'samplepositionvalues' && (\r\n                                        <ExcelExportColumn\r\n                                            key={index}\r\n                                            field={item.sfieldname}\r\n                                            title={item.sfieldname}\r\n                                            width={200}\r\n                                        />\r\n                                    )\r\n                                ))}\r\n                            </ExcelExport>\r\n                        </LocalizationProvider > : \"\"}\r\n\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={true}\r\n                        needClose={this.state.ExcelImport ? false :this.state.isFilterPopup ? true : false }\r\n                        showSubmit={this.state.openSpreadSheet ? false : true}\r\n                        size={this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        // screenName={this.state.isFilterPopup ? \"\" :\r\n                        //     this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGE\" })\r\n                        //         : this.state.editedsheetData && this.state.editedsheetData.scontainerpath}\r\n                        screenName={this.state.ExcelImport ?this.props.intl.formatMessage({ id: \"IDS_IMPORTEXCEL\" }):this.state.isFilterPopup ?\r\n                         \"\" :this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id:\"IDS_SAMPLESTORAGE\" }): \r\n                         this.state.editedsheetData && this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            this.state.isFilterPopup ?\r\n                                <FilterQueryBuilder\r\n                                    fields={this.state.fields}\r\n                                    isSampleStorage={true}\r\n                                    queryArray={this.state.queryArray}\r\n                                    skip={this.state.kendoSkip}\r\n                                    take={this.state.kendoTake}\r\n                                    onChange={this.onChange}\r\n                                    tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                    gridColumns={this.slideList}\r\n                                    filterData={this.props.Login.slideResult || []}\r\n                                    handlePageChange={this.handlePageChangeFilter}\r\n                                    static={true}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    updateStore={this.props.updateStore}\r\n                                />\r\n                                : this.props.Login.loadEsign ?\r\n                                    <Esign operation={this.props.Login.operation}\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                    />\r\n                                    :\r\n                                    this.state.openSpreadSheet ? <>\r\n                                        {/* <Spreadsheet\r\n                                    data={this.state.placedSample}\r\n                                    Rows={this.state.Rows || 1}\r\n                                    columns={this.state.columns || 1}\r\n                                /> */}\r\n                                        <>\r\n                                            <MatrixComponent\r\n                                                updateStore={this.props.updateStore}\r\n                                                intl={this.props.intl}\r\n                                                Rows={this.state.Rows || 1}\r\n                                                AdditionalFieldsComponentData={this.state.AdditionalFieldsComponentData}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                columns={this.state.columns || 1}\r\n                                                selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                sheetData={this.state.sheetData || {}}\r\n                                                isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                childSheetDataChange={this.childSheetDataChange}\r\n                                                editedsheetData={this.state.editedsheetData}\r\n                                                nbarcodedescription={this.props.Login.settings && parseInt(this.props.Login.settings[36])}\r\n                                                nbarcodeLength={this.props.Login.settings && parseInt(this.props.Login.settings[37])}\r\n                                                sbarcodeboxWidth={this.props.Login.settings && this.props.Login.settings[38]}\r\n                                                multipleSheetData={this.state.masterData &&\r\n                                                    this.state.masterData.sampleStoragetransaction &&\r\n                                                    process(this.state.masterData.sampleStoragetransaction || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} /></>\r\n\r\n                                    </>\r\n                                        : this.state.ExcelImport ?\r\n                                            <ImportSampleStorageTransaction\r\n                                                operation={this.state.operation}\r\n                                                //loadImportFileData={this.props.Login.masterData}\r\n                                                onDropFile={this.onDropFile}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n\r\n                                            /> :\r\n                                            <AddSampleStorageMapping\r\n                                                operation={this.state.operation}\r\n                                                selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                                onInputChange={(e) => this.onInputChange(e)}\r\n                                                onComboChange={this.onComboChange}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                childDataChange={this.childDataChange}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            />\r\n                        }\r\n\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\r\n\r\n        this.setState({ selectedRecord, actionType: \"delete\" });\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService\r\n})(injectIntl(SampleStorageTransaction));"]},"metadata":{},"sourceType":"module"}