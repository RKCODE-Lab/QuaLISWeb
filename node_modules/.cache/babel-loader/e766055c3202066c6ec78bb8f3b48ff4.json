{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n      let SelectedSource = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          SelectedSource,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          },\n          Source: []\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {}\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\"); // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n        //\"stestsynonym\", undefined, undefined, true);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function addsubSample(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent === 4) {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[2] = TestGet;\n      }\n\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList, response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent);\n        let TestCombined = [];\n\n        if (specBasedComponent === 4) {\n          TestCombined = response[2].data;\n        }\n\n        const comboData1 = newcomboData.comboData;\n        const selectedRecord1 = newcomboData.selectedRecord;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.mandatory) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n            } // if (componentrow.timezone) {\n            //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n            //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n            //         defaulttimezone ? defaulttimezone : -1\n            // }\n\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ChildscreenName: \"SubSample\",\n            screenName: \"SubSample\",\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent: [],\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            SubSamplecomboData: comboData1,\n            SubSamplecomboComponents,\n            SubSamplewithoutCombocomponent,\n            TestCombined,\n            parentSubSampleColumnList: columnList,\n            timeZoneList,\n            defaultTimeZone,\n            masterData\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent);\n    return dispatch => {\n      if (specBasedComponent === 4) {\n        rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        }).then(response => {\n          const TestCombined = response.data;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: newcomboData.selectedRecord,\n              TestCombined: TestCombined\n            }\n          });\n        });\n      }\n    };\n  }\n}\nexport function addSubSampleSaveContinue(Map1, Map, specBasedComponent, Component) {\n  //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\n  //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\n  return dispatch => {\n    if (specBasedComponent === 4) {\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        const TestCombined = response.data;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...Map1,\n            loading: false,\n            TestCombined: TestCombined\n          }\n        });\n      });\n    }\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const Unit = rsapi.post(\"/unit/getUnit\", {\n      userinfo: userInfo\n    });\n    let Componnet = {};\n\n    if (specBasedComponent === 4) {\n      Componnet = rsapi.post(\"/component/getComponent\", {\n        userinfo: userInfo\n      });\n    } else {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    }\n\n    urlArray = [Unit, Componnet];\n    Axios.all(urlArray).then(response => {\n      const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n      let comp = [];\n\n      if (specBasedComponent === 4) {\n        comp = response[1].data;\n      } else {\n        comp = response[1].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstUnit = lstUnitMap.get(\"OptionList\");\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      component[\"nunitcode\"] = {\n        label: component.sunitname,\n        value: component.nunitcode\n      };\n      component[\"ssubsamplename\"] = component[\"ssubsamplename\"];\n      component[\"ssampleqty\"] = component[\"ssampleqty\"];\n      component[\"scomments\"] = component[\"scomments\"];\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          Unit: lstUnit,\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      let selectedSubSample = RegistrationGetSubSample;\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n      if (inputParam.inputData.nneedsubsample) {\n        RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc');\n        selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n        RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode);\n        selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n      } // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n\n\n      if (inputParam.multipleselectionFlag) {\n        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n        RegistrationGetTest = masterData.RegistrationGetTest;\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSample,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationGetSample\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data);\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest;\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : []\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n\n          if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: inputData.masterData.RegistrationGetSubSample\n        };\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n                subsamplecheck = false;\n                dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationParameter = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedsubsample && inputParam.selectedsubsample.length > 0) {\n      value = inputParam.selectedsubsample.some(obj => obj.nspecsampletypecode !== inputParam.selectedsubsample[0].nspecsampletypecode);\n\n      if (value) {\n        return toast.warn(intl.formatMessage({\n          id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n        }));\n      }\n\n      sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n      const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\n      const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\n\n      if (selectedsample && selectedsample.length > 0) {\n        const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n            if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\n              const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n              if (findApprovalVersion.length === 1) {\n                const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                  {\n                    dispatch(initRequest(true));\n                    rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                    }).then(response => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          availableTest: response.data,\n                          loadChildTest: true,\n                          loading: false,\n                          ncontrolCode,\n                          screenName: \"IDS_TEST\",\n                          operation: \"create\",\n                          openModal: true,\n                          parentPopUpSize: \"lg\",\n                          selectedRecord: {},\n                          showSample: undefined\n                        }\n                      });\n                    }).catch(error => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          loading: false\n                        }\n                      });\n\n                      if (error.response.status === 500) {\n                        toast.error(error.message);\n                      } else {\n                        toast.warn(this.props.formatMessage({\n                          id: error.response.data\n                        }));\n                      }\n                    });\n                  } else {\n                  toast.warn(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                  }));\n                }\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                }));\n              }\n            } else {\n              toast.warn(intl.formatMessage({\n                id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\"\n              }));\n            }\n          } else {\n            ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSAMPLE\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSUBSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest,\n        selectedTest: response.data[\"RegistrationGetTest\"],\n        RegistrationParameter: response.data.RegistrationParameter // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          [modalName]: false,\n          loading: false,\n          loadChildTest: false,\n          showSample: undefined,\n          openModal: false,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno\n    });\n    urlArray = [timeZoneService, actualService, selectedRegistration];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      }; // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\n      //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      }; //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\n      // selectedRecord, childColumnList, withoutCombocomponent)\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoad(x, comboData, selectedRecord1, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes\n        } = [];\n        const selectedSpec = {};\n        Specification = constructOptionList(response[2].data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response[2].data[\"AgaramTree\"];\n        ActiveKey = response[2].data[\"FocusKey\"];\n        FocusKey = response[2].data[\"ActiveKey\"];\n        OpenNodes = response[2].data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            AgaramTree,\n            FocusKey,\n            ActiveKey,\n            OpenNodes,\n            selectedSpec,\n            Specification,\n            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            // currentTime,\n            operation,\n            //  screenName: popUpLabel,\n            // PopUpLabel: popUpLabel,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n\n      let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openPortal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadPreregister: false,\n          selectedRecord: {},\n          showSample: undefined\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\") //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: {},\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList,\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n    const specBasedComponent = 4;\n\n    if (specBasedComponent === 4) {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: 4\n      });\n      urlArray[2] = TestGet;\n    }\n\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList, response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent);\n      let TestCombined = [];\n\n      if (specBasedComponent === 4) {\n        TestCombined = response[2].data;\n      }\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          } // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"SubSample\",\n          showSaveContinue: false,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent: [],\n          openModal: true,\n          operation: \"create\",\n          loadRegSubSample: true,\n          selectedRecord: selectedRecord1,\n          regSubSamplecomboData: comboData1,\n          regSubSamplecomboComponents,\n          regSubSamplewithoutCombocomponent,\n          TestCombined,\n          regparentSubSampleColumnList: regcolumnList,\n          ncontrolCode: ncontrolcode,\n          timeZoneList,\n          defaultTimeZone,\n          masterData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSubSample(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createSubSample\", Map).then(response => {\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = updatedObjectWithNewElement(Map.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      let RegistrationParameter = response.data[\"RegistrationParameter\"];\n      RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode');\n      let masterData = { ...Map.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {}\n      }; // inputParam.postParamList[0]['clearFilter'] = 'yes'\n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loadEsign: false,\n          loading: false,\n          showSample: undefined,\n          selectedRecord: {},\n          loadRegSubSample: false\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editRegParam,\n      ntransactionsamplecode\n    });\n    urlArray = [timeZoneService, actualService, selectedRegistration];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data[\"SelectedRegistrationSubSample\"][0]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      };\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      };\n\n      if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoad(x, comboData, selectedRecord1, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        selectedRecord = { ...selectedRecord\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n      //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\n\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        // selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        // RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: \"SubSample\"\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelSubSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      delete response.data[\"RegistrationGetSample\"];\n      delete response.data[\"RegistrationGetSubSample\"];\n      delete response.data[\"RegistrationGetTest\"];\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","DEFAULT_RETURN","intl","initRequest","RegistrationSubType","RegistrationType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getRegTypeChange","getRegSubTypeChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","length","selectedComponent","undefined","SelectedTest","SelectedSource","Object","keys","popUptestDataState","skip","take","Source","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","TestData","loadComponent","selectComponent","showSaveContinue","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","inputData","searchSampleRef","current","searchSubSampleRef","searchTestRef","showFilter","testskip","testtake","subsampletake","subsampleskip","showSample","status","warn","getTreeByProduct","comboData","inputParam","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","selectedSpec","sversion","ntemplatemanipulationcode","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","nallottedspeccode","openPortal","openModal","getTest","nneedsubsample","specBasedComponent","componentTest","TestCombined","loadTest","formatMessage","id","addsubSample","userinfo","columnList","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","isServiceRequired","SubSamplecomboData","timeZoneService","actualService","parentcolumnlist","childcolumnlist","TestGet","timeZoneMap","defaultTimeZone","newcomboData","comboData1","selectedRecord1","map","componentrow","inputtype","mandatory","loadcurrentdate","Date","screenName","loadSubSample","parentSubSampleColumnList","addSubSampleSaveContinue","Map1","editSubSample","Unit","Componnet","lstUnitMap","comp","lstUnit","sunitname","nunitcode","insertRegistration","RegistrationGetSample","selectedSample","RegistrationGetSubSample","RegistrationGetTest","selectedSubSample","selectedTest","filter","ntransactionsamplecode","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","postParamList","getRegistrationSample","selectedFilter","activeSampleTab","getRegistrationsubSampleDetail","inputParamData","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","napprovalconfigcode","activeTestTab","ndesigntemplatemappingcode","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","RegistrationTestComment","RegistrationParameter","wholeSubSampleList","b","forEach","subsample","index","includes","splice","ResponseData","RegistrationTestComment1","ntransactiontestcode","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","bool","wholeTestList","test","keepOld","sampleGridDataState","sort","attachmentskip","TestSelected","isGrandChildGetRequired","filterTestSameOldSelectedTest","join","filterSelectedSubSample","getRegistrationTestDetail","getTestChildTabDetailRegistration","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","selectedTransactionsamplecode","toString","selectedTransactioncode","acceptRegistration","rtn","addMoreTest","ncontrolCode","sampleList","selectedsubsample","some","obj","slice","selectedsample","selectsubsample","findTransactionStatus","Set","REJECT","CANCELLED","CERTIFIED","SENT","findApprovalVersion","napprovalversioncode","findSampleSpec","availableTest","loadChildTest","props","createRegistrationTest","modalName","classUrl","getEditRegistrationComboService","comboComponents","withoutCombocomponent","mastertoedit","primaryKeyName","selectedRegistration","editRegParam","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","updateRegistration","regDateEditConfirmMessage","regEditParam","cancelTestAction","cancelSampleAction","addsubSampleRegistration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","saveSubSample","getEditSubSampleComboService","PREREGISTER","editSubSampleRegParam","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","url","responseData","selectedSampleCode","selectedTestCode","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","ApprovalHistory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                let SelectedSource = [];\r\n\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                        SelectedSource, selectedRecord, popUptestDataState: { skip: 0, take: 10 }, Source: []\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake:undefined,\r\n                        subsampleskip:0,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent\r\n\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                    // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n                    //\"stestsynonym\", undefined, undefined, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, loadTest: true, openChildModal: false, ChildscreenName: \"Test\",\r\n                            childoperation: \"create\", parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent === 4) {\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    //nneedsubsample: nneedsubsample,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent\r\n\r\n                })\r\n                urlArray[2] = TestGet;\r\n            }\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n                let TestCombined = [];\r\n                if (specBasedComponent === 4) {\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] =  componentrow.loadcurrentdate ?  new Date(): \"\";\r\n                        } \r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChildscreenName: \"SubSample\",\r\n                        screenName:\"SubSample\",\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent: [],\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        SubSamplecomboData: comboData1,\r\n                        SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        parentSubSampleColumnList: columnList,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n        return (dispatch) => {\r\n          if (specBasedComponent === 4) {\r\n         rsapi.post(\"/registration/getTestfromDB\",{\r\n            nallottedspeccode: Map[\"nallottedspeccode\"],\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            //nneedsubsample: nneedsubsample,\r\n            // nallottedspeccode: objComponent.nallottedspeccode,\r\n            specBasedComponent: specBasedComponent\r\n         }) .then(response => {\r\n            const TestCombined =  response.data\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ChildscreenName: \"SubSample\",\r\n                    showSaveContinue: true,\r\n                    openChildModal: false,\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent: [],\r\n                    openPortal: true,\r\n                    openModal: false,\r\n                    operation: \"create\",\r\n                    loadSubSample: true,\r\n                    selectComponent: newcomboData.selectedRecord,\r\n                    TestCombined:TestCombined\r\n                }\r\n            });\r\n        })\r\n        }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function addSubSampleSaveContinue(Map1, Map, \r\n    specBasedComponent, Component,) {\r\n  \r\n      //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n       //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n        return (dispatch) => {\r\n          if (specBasedComponent === 4) {\r\n         rsapi.post(\"/registration/getTestfromDB\",{\r\n            nallottedspeccode: Map[\"nallottedspeccode\"],\r\n            slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent\r\n         }) .then(response => {\r\n            const TestCombined =  response.data\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...Map1,\r\n                    loading: false,\r\n                    TestCombined:TestCombined\r\n                }\r\n            });\r\n        })\r\n        }\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\nexport function editSubSample(Map,\r\n    component, userInfo, specBasedComponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const Unit = rsapi.post(\"/unit/getUnit\",\r\n            { userinfo: userInfo })\r\n        let Componnet = {}\r\n        if (specBasedComponent === 4) {\r\n            Componnet = rsapi.post(\"/component/getComponent\",\r\n                { userinfo: userInfo })\r\n        } else {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\",\r\n                Map);\r\n        }\r\n\r\n        urlArray = [Unit, Componnet\r\n        ]\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                const lstUnitMap = constructOptionList(response[0].data || [], \"nunitcode\",\r\n                    \"sunitname\", undefined, undefined, true);\r\n                let comp = []\r\n                if (specBasedComponent === 4) {\r\n                    comp = response[1].data\r\n                } else {\r\n                    comp = response[1].data.lstComponent\r\n                }\r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstUnit = lstUnitMap.get(\"OptionList\");\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                component[\"nunitcode\"] = { label: component.sunitname, value: component.nunitcode }\r\n                component[\"ssubsamplename\"] = component[\"ssubsamplename\"];\r\n                component[\"ssampleqty\"] = component[\"ssampleqty\"];\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: \"SubSample\", Unit: lstUnit,\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                let selectedSubSample = RegistrationGetSubSample;\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                if (inputParam.inputData.nneedsubsample) {\r\n                    RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"],'npreregno','desc')\r\n                    selectedSubSample = RegistrationGetSubSample.length>0?[RegistrationGetSubSample[0]] : [];\r\n                    RegistrationGetTest=RegistrationGetTest.filter(x=>x.ntransactionsamplecode===selectedSubSample[0].ntransactionsamplecode)\r\n                    selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                }\r\n              // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                if (inputParam.multipleselectionFlag) {\r\n                    selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                    RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                    RegistrationGetTest = masterData.RegistrationGetTest;\r\n                }\r\n\r\n\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSample, selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip:0,\r\n                        subsampletake:undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            checkBoxOperation:   inputData.nneedsubsample===true?\r\n            inputData.checkBoxOperation===5?3:inputData.checkBoxOperation:inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3||inputData.checkBoxOperation ===5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\r\n                            }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationParameter = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if(inputParam.selectedsubsample&&inputParam.selectedsubsample.length>0){\r\n        value = inputParam.selectedsubsample.some(obj => obj.nspecsampletypecode !== inputParam.selectedsubsample[0].nspecsampletypecode)\r\n        if (value) {\r\n            return toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n        }\r\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\r\n        const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\r\n        if (selectedsample && selectedsample.length > 0) {\r\n            const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                    if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\r\n                        const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                        if (findApprovalVersion.length === 1) {\r\n                            const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                            //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                            if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                            {\r\n                                dispatch(initRequest(true));\r\n                                rsapi.post(\"/registration/getMoreTest\", { ...inputParam })\r\n                                    .then(response => {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                availableTest: response.data,\r\n                                                loadChildTest: true,\r\n                                                loading: false, ncontrolCode,\r\n                                                screenName: \"IDS_TEST\",\r\n                                                operation: \"create\",\r\n                                                openModal: true,\r\n                                                parentPopUpSize: \"lg\",\r\n                                                selectedRecord: {},\r\n                                                showSample: undefined\r\n                                            }\r\n                                        });\r\n                                    })\r\n                                    .catch(error => {\r\n                                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                        if (error.response.status === 500) {\r\n                                            toast.error(error.message);\r\n                                        } else {\r\n                                            toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                            }\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                        }\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\" }));\r\n                    }\r\n                }\r\n                else {\r\n                    ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }else{\r\n        toast.warn(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n    }\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest,\r\n                    selectedTest: response.data[\"RegistrationGetTest\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        [modalName]: false,\r\n                        loading: false,\r\n                        loadChildTest: false,\r\n                        showSample: undefined,\r\n                        openModal: false,\r\n                        selectedRecord: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo:userInfo\r\n        })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam, npreregno })\r\n\r\n        urlArray = [timeZoneService, actualService, selectedRegistration]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                selectedRecord={...selectedRecord,...selectedRecord['jsondata']}\r\n                // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n                //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                // selectedRecord, childColumnList, withoutCombocomponent)\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoad(x, comboData, selectedRecord1, \r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                    const selectedSpec = {}\r\n                        Specification = constructOptionList(response[2].data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                            \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                        AgaramTree = response[2].data[\"AgaramTree\"];\r\n                        ActiveKey = response[2].data[\"FocusKey\"];\r\n                        FocusKey = response[2].data[\"ActiveKey\"];\r\n                        OpenNodes = response[2].data[\"OpenNodes\"];\r\n                        //Manufacturer = response.data[\"Manufacturer\"];\r\n                        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                            \"value\": Specification[0].value,\r\n                            \"label\": Specification[0].label,\r\n                            \"item\": Specification[0].item\r\n                        } : \"\";\r\n    \r\n                        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? \r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                        selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            AgaramTree,\r\n                            FocusKey ,\r\n                            ActiveKey ,\r\n                            OpenNodes ,\r\n                            selectedSpec,\r\n                            Specification,\r\n                            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            // currentTime,\r\n                            operation,\r\n                            //  screenName: popUpLabel,\r\n                            // PopUpLabel: popUpLabel,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest:response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                    RegistrationGetSubSample,\r\n                    RegistrationParameter:response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign:false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n                  //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n               \r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: regcolumnList,\r\n                childcolumnlist: regchildColumnList,\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            const specBasedComponent=4\r\n            if (specBasedComponent === 4) {\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: 1,\r\n                    specBasedComponent: 4\r\n\r\n                })\r\n                urlArray[2] = TestGet;\r\n            }\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList, response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent)\r\n                let TestCombined = [];\r\n                if (specBasedComponent === 4) {\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] =  componentrow.loadcurrentdate ?  new Date(): \"\";\r\n                        } \r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        screenName: \"SubSample\",\r\n                        showSaveContinue: false,\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent: [],\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        loadRegSubSample: true,\r\n                        selectedRecord: selectedRecord1,\r\n                        regSubSamplecomboData: comboData1,\r\n                        regSubSamplecomboComponents,\r\n                        regSubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        regparentSubSampleColumnList: regcolumnList,\r\n                        ncontrolCode:ncontrolcode,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\nexport function saveSubSample(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createSubSample\", Map)\r\n            .then(response => {\r\n               // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n               // let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = updatedObjectWithNewElement(Map.masterData.RegistrationGetSubSample,response.data[\"selectedSubSample\"]);\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample =RegistrationGetSubSample.length>0?[RegistrationGetSubSample[0]] : [];\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n               \r\n                let RegistrationParameter=response.data[\"RegistrationParameter\"]\r\n                \r\n                RegistrationParameter=getSameRecordFromTwoArrays(RegistrationParameter,selectedTest,'ntransactiontestcode')\r\n\r\n              let masterData={...Map.masterData} \r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                     selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest,RegistrationParameter\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {}\r\n                }\r\n               // inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n               // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n               dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample:false\r\n                }\r\n            });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n     childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n\r\n        const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo:userInfo\r\n        })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editRegParam, ntransactionsamplecode })\r\n\r\n        urlArray = [timeZoneService, actualService, selectedRegistration]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[2].data[\"SelectedRegistrationSubSample\"][0] };\r\n                selectedRecord={...selectedRecord,...selectedRecord['jsondata']}\r\n              \r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n             \r\n                if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoad(x, comboData, selectedRecord1, \r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                   \r\n                        selectedRecord = { ...selectedRecord }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n              //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                   // selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest:response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                   // RegistrationGetSubSample,\r\n                    RegistrationParameter:response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: \"SubSample\",\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign:false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function cancelSubSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n               // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                   // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n               \r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                delete response.data[\"RegistrationGetSample\"];\r\n                delete response.data[\"RegistrationGetSubSample\"];\r\n                delete response.data[\"RegistrationGetTest\"];\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}