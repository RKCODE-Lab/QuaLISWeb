{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\approvalstatusconfig\\\\ApprovalStatusConfigFilter.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport { SampleType, TemplateType } from '../../components/Enumeration';\n\nconst ApprovalStatusConfigFilter = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_SAMPLETYPE\"\n    }),\n    isSearchable: true,\n    name: \"nsampletypecode\",\n    isDisabled: false,\n    value: props.defaultSample,\n    isMandatory: false,\n    showOption: true,\n    options: props.SampleTypes,\n    optionId: \"nsampletypecode\",\n    optionValue: \"ssampletypename\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    onChange: event => props.onComboChange(event, 'nsampletypecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }), props.defaultSample.value === SampleType.Masters ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_FORMNAME\"\n    }),\n    isSearchable: true,\n    name: \"nformcode\",\n    isDisabled: false,\n    value: props.defaultForms,\n    isMandatory: false,\n    showOption: true,\n    options: props.qualisForms,\n    optionId: \"nformcode\",\n    optionValue: \"sdisplayname\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    onChange: event => props.onComboChange(event, 'nformcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }), props.defaultForms.value === 55 && props.defaultSample.value === SampleType.Masters ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_APPROVALSUBTYPE\"\n    }),\n    isSearchable: true,\n    name: \"napprovalsubtypecode\",\n    isDisabled: false,\n    value: props.defaultApprovalSubType,\n    isMandatory: false // showOption={true}\n    ,\n    options: props.approvalSubType,\n    optionId: \"napprovalsubtypecode\",\n    optionValue: \"ssubtypename\" // menuPosition=\"fixed\"\n    ,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    onChange: event => props.onComboChange(event, 'napprovalsubtypecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }) : \"\") : /*#__PURE__*/React.createElement(React.Fragment, null, props.defaultRegType ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_REGTYPE\"\n    }),\n    isSearchable: true,\n    name: \"nregtypecode\",\n    isDisabled: false,\n    value: props.defaultRegType,\n    isMandatory: false,\n    options: props.registrationTypes,\n    optionId: \"nregtypecode\",\n    optionValue: \"sregtypename\" // menuPosition=\"fixed\"\n    ,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    onChange: event => props.onComboChange(event, 'nregtypecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }\n  }) : \"\", props.defaultRegSubType ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_REGSUBTYPE\"\n    }),\n    isSearchable: true,\n    name: \"nregsubtypecode\",\n    isDisabled: false,\n    value: props.defaultRegSubType,\n    isMandatory: false // showOption={true}\n    ,\n    options: props.regSubTypeList,\n    optionId: \"nregsubtypecode\",\n    optionValue: \"sregsubtypename\" // menuPosition=\"fixed\"\n    ,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    onChange: event => props.onComboChange(event, 'nregsubtypecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.formatMessage({\n      id: \"IDS_FORMNAME\"\n    }),\n    isSearchable: true,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"nformcode\",\n    isDisabled: false,\n    value: props.defaultForms,\n    isMandatory: false,\n    showOption: true,\n    options: props.qualisForms,\n    optionId: \"nformcode\",\n    optionValue: \"sdisplayname\",\n    onChange: event => props.onComboChange(event, 'nformcode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default injectIntl(ApprovalStatusConfigFilter);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/approvalstatusconfig/ApprovalStatusConfigFilter.jsx"],"names":["React","Row","Col","FormSelectSearch","injectIntl","SampleType","TemplateType","ApprovalStatusConfigFilter","props","formatMessage","id","defaultSample","SampleTypes","intl","event","onComboChange","value","Masters","defaultForms","qualisForms","defaultApprovalSubType","approvalSubType","defaultRegType","registrationTypes","defaultRegSubType","regSubTypeList"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { SampleType, TemplateType } from '../../components/Enumeration';\r\nconst ApprovalStatusConfigFilter = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n              \r\n            <FormSelectSearch\r\n                          formLabel={props.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"nsampletypecode\"}\r\n                        isDisabled={false}\r\n                        value={props.defaultSample}\r\n                        isMandatory={false}\r\n                        showOption={true}\r\n                        options={props.SampleTypes}\r\n                      optionId='nsampletypecode'\r\n                        optionValue='ssampletypename'\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        onChange={(event) => props.onComboChange(event, 'nsampletypecode')}\r\n                        >\r\n                    </FormSelectSearch>\r\n                    \r\n                     {props.defaultSample.value===SampleType.Masters?       \r\n                     <>         \r\n                    <FormSelectSearch\r\n                        formLabel={props.formatMessage({ id: \"IDS_FORMNAME\" })}\r\n                        isSearchable={true}\r\n                        name={\"nformcode\"}\r\n                        isDisabled={false}\r\n                        value={props.defaultForms}\r\n                        isMandatory={false}\r\n                        showOption={true}                       \r\n                        options={props.qualisForms}\r\n                        optionId='nformcode'\r\n                        optionValue='sdisplayname'                       \r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        onChange={(event) => props.onComboChange(event, 'nformcode')}\r\n                     >             \r\n                    </FormSelectSearch> \r\n\r\n      {props.defaultForms.value===55 && props.defaultSample.value===SampleType.Masters ?\r\n        <FormSelectSearch    \r\n              formLabel={props.formatMessage({ id: \"IDS_APPROVALSUBTYPE\" })}\r\n              isSearchable={true}\r\n              name={\"napprovalsubtypecode\"}\r\n              isDisabled={false}\r\n              value={props.defaultApprovalSubType}\r\n              isMandatory={false}\r\n              // showOption={true}\r\n              options={props.approvalSubType}\r\n              optionId='napprovalsubtypecode'\r\n              optionValue='ssubtypename'\r\n              // menuPosition=\"fixed\"\r\n              placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n              onChange={(event) => props.onComboChange(event, 'napprovalsubtypecode')}\r\n  >\r\n</FormSelectSearch>\r\n\r\n:\"\"}\r\n</> \r\n                    \r\n                    :\r\n                    <>\r\n                    {props.defaultRegType ?\r\n              \r\n                  <FormSelectSearch    \r\n                          formLabel={props.formatMessage({ id: \"IDS_REGTYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"nregtypecode\"}\r\n                        isDisabled={false}\r\n                        value={props.defaultRegType}\r\n                        isMandatory={false}\r\n                        options={props.registrationTypes}\r\n                        optionId='nregtypecode'\r\n                        optionValue='sregtypename'\r\n                        // menuPosition=\"fixed\"\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        onChange={(event) => props.onComboChange(event, 'nregtypecode')}>\r\n                      \r\n                    </FormSelectSearch>\r\n                    :\"\"}\r\n                   {props.defaultRegSubType ?\r\n                    <FormSelectSearch    \r\n                          formLabel={props.formatMessage({ id: \"IDS_REGSUBTYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"nregsubtypecode\"}\r\n                        isDisabled={false}\r\n                        value={props.defaultRegSubType}\r\n                        isMandatory={false}\r\n                        // showOption={true}\r\n                        options={props.regSubTypeList}\r\n                        optionId='nregsubtypecode'\r\n                        optionValue='sregsubtypename'\r\n                        // menuPosition=\"fixed\"\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        onChange={(event) => props.onComboChange(event, 'nregsubtypecode')}>\r\n                      \r\n                    </FormSelectSearch>\r\n\r\n                   :\"\"}\r\n                    <FormSelectSearch\r\n                        formLabel={props.formatMessage({ id: \"IDS_FORMNAME\" })}\r\n                        isSearchable={true}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        name={\"nformcode\"}\r\n                        isDisabled={false}\r\n                        value={props.defaultForms}\r\n                        isMandatory={false}\r\n                        showOption={true}\r\n                        options={props.qualisForms}\r\n                        optionId='nformcode'\r\n                        optionValue='sdisplayname'                       \r\n                      \r\n                        onChange={(event) => props.onComboChange(event, 'nformcode')}      \r\n                     >             \r\n                    </FormSelectSearch> \r\n                  \r\n                  </>\r\n                    }\r\n                 \r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(ApprovalStatusConfigFilter);"]},"metadata":{},"sourceType":"module"}