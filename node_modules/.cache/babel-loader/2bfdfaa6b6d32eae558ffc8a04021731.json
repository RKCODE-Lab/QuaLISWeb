{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialCategory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddMaterialCategory from './AddMaterialCategory';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\nimport { callService, getMaterialTypeComboService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialCategory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false; //selectedRecord.agree=false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nmaterialcatcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nuserrolecode\": this.props.Login.userInfo.nuserrole\n        };\n      }\n\n      inputData[\"materialcategory\"][\"nmaterialtypecode\"] = this.state.selectedRecord[\"nmaterialtypecode\"] ? this.state.selectedRecord[\"nmaterialtypecode\"].value : transactionStatus.NA;\n      inputData[\"materialcategory\"][\"smaterialcatname\"] = this.state.selectedRecord[\"smaterialcatname\"] ? this.state.selectedRecord[\"smaterialcatname\"] : transactionStatus.NO;\n      inputData[\"materialcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      inputData[\"materialcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"materialcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"] ? this.state.selectedRecord[\"ncategorybasedflow\"] : transactionStatus.NO;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_MATERIALTYPE\",\n        \"dataField\": \"smaterialtypename\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_MATERIALCATEGORY\",\n        \"dataField\": \"smaterialcatname\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_CATEGORYBASEDFLOW\",\n        \"dataField\": \"scategorybasedflow\",\n        \"width\": \"200px\",\n        \"isIdsField\": false,\n        \"controlName\": \"ncategorybasedflow\"\n      }, {\n        \"controlType\": \"checkbox\",\n        \"idsName\": \"IDS_DISPLAYSTATUS\",\n        \"dataField\": \"sdisplaystatus\",\n        \"width\": \"200px\",\n        \"isIdsField\": false,\n        \"controlName\": \"ndefaultstatus\"\n      }];\n      primaryKeyField = \"nmaterialcatcode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    });\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_MATERIALCATEGORY\"\n      }),\n      primaryeyField: \"nmaterialcatcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nmaterialcatcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PrimaryHeader, {\n      className: \"d-flex justify-content-between mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getMaterialTypeComboService,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.getMaterialTypeComboService(addParam),\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\" // formatMessage={this.props.intl.formatMessage}\n      //isComponent={true}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddMaterialCategory, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange // formatMessage={this.props.intl.formatMessage}\n        ,\n        materialCatgeoryList: this.props.Login.materialCatgeoryList || [],\n        operation: this.props.Login.operation,\n        materialtypeListype: this.props.Login.materialtypeListype,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getMaterialTypeComboService,\n  updateStore,\n  crudMaster,\n  validateEsignCredential\n})(injectIntl(MaterialCategory));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/Material/MaterialCategory.jsx"],"names":["React","connect","injectIntl","Row","Col","process","toast","DataGrid","AddMaterialCategory","SlideOutModal","Esign","ListWrapper","PrimaryHeader","callService","getMaterialTypeComboService","updateStore","crudMaster","validateEsignCredential","getControlMap","showEsign","DEFAULT_RETURN","transactionStatus","mapStateToProps","state","Login","MaterialCategory","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","deleteRecord","toLowerCase","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","onSaveClick","saveType","formRef","undefined","selectedId","JSON","parse","stringify","nmaterialcatcode","nmastersitecode","nuserrole","value","NA","NO","onInputOnChange","target","type","name","checked","onComboChange","comboData","fieldName","validateEsign","sreason","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","addId","has","concat","get","ncontrolcode","editID","addParam","primaryeyField","primaryKeyValue","editParam","deleteParam","materialCatgeoryList","materialtypeListype","componentDidUpdate","previousProps","Object","values","map","item","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddMaterialCategory from './AddMaterialCategory';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ListWrapper, PrimaryHeader } from '../../components/client-group.styles';\r\nimport { callService,getMaterialTypeComboService,updateStore,crudMaster,validateEsignCredential} from '../../actions';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {transactionStatus} from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialCategory extends React.Component{\r\n   \r\n    constructor(props){\r\n    super(props)\r\n    this.formRef=React.createRef();\r\n    this.extractedColumnList = [];\r\n\r\n\r\n    const dataState = {\r\n        skip: 0,\r\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n    };\r\n\r\n    this.state = {\r\n        data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n        dataResult: [],\r\n        dataState: dataState,\r\n        isOpen: false,\r\n        userRoleControlRights: [],\r\n        controlMap: new Map()\r\n    };\r\n};\r\n\r\n   \r\nstatic getDerivedStateFromProps(props, state) {\r\n\r\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n    }\r\n\r\n    if (props.Login.error !== state.error) {\r\n        toast.error(props.Login.error)\r\n        props.Login.error = \"\";\r\n    }\r\n    return null;\r\n}\r\n\r\ndataStateChange = (event) => {\r\n    this.setState({\r\n        dataResult: process(this.state.data, event.dataState),\r\n        dataState: event.dataState\r\n    });\r\n}\r\n\r\ncloseModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n        if (this.props.Login.operation === \"delete\") {\r\n            loadEsign = false;\r\n            openModal = false;\r\n        } else {\r\n            loadEsign = false;\r\n            //selectedRecord.agree=false;\r\n        }\r\n    } else {\r\n        openModal = false;\r\n        selectedRecord = {};\r\n    }\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { openModal, loadEsign, selectedRecord}\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n}\r\n\r\n\r\nreloadData = () => {\r\n    const inputParam = {\r\n        inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        userInfo: this.props.Login.userInfo,\r\n        displayName: this.props.Login.inputParam.displayName\r\n    };\r\n\r\n    this.props.callService(inputParam);\r\n}\r\n\r\n\r\n\r\n\r\nrender() {\r\n    let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [              \r\n                { \"controlType\": \"combobox\",  \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textbox\" ,  \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_CATEGORYBASEDFLOW\", \"dataField\": \"scategorybasedflow\", \"width\": \"200px\", \"isIdsField\":false, \"controlName\": \"ncategorybasedflow\" },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\", \"isIdsField\": false, \"controlName\": \"ndefaultstatus\" }\r\n            ]\r\n            primaryKeyField = \"nmaterialcatcode\";\r\n        }\r\n        let mandatoryFields=[];\r\n        mandatoryFields.push( \r\n            {  \"mandatory\": true,  \"idsName\":  \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            {  \"mandatory\": true,  \"idsName\":  \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n          \r\n        )\r\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n    && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n    && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n    const addParam = {screenName:this.props.intl.formatMessage({ id:\"IDS_MATERIALCATEGORY\"}), primaryeyField: \"nmaterialcatcode\", primaryKeyValue:undefined,  \r\n    operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n    const editParam = {\r\n    screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nmaterialcatcode\", operation: \"update\",\r\n    inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n};\r\n\r\n\r\nconst deleteParam = { operation: \"delete\" };\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                            {/* <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                    <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                            </HeaderName> */}\r\n                            {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                 hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={() => this.props.getMaterialTypeComboService(addParam)}>\r\n                                <FontAwesomeIcon icon={faPlus} /> {}\r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add' />\r\n                            </Button> */}\r\n                        </PrimaryHeader>\r\n\r\n                        {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getMaterialTypeComboService}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord ={() => this.props.getMaterialTypeComboService(addParam)}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight = {\"600px\"}\r\n                                   // formatMessage={this.props.intl.formatMessage}\r\n                                    //isComponent={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    pageable={true}\r\n                                />\r\n                                : \"\"}\r\n                    \r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        mandatoryFields={mandatoryFields}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddMaterialCategory\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                               // formatMessage={this.props.intl.formatMessage}\r\n                                materialCatgeoryList={this.props.Login.materialCatgeoryList ||[]}\r\n                                operation={this.props.Login.operation}\r\n                                materialtypeListype={this.props.Login.materialtypeListype}\r\n                                inputParam={this.props.Login.inputParam} \r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\ncomponentDidUpdate(previousProps) {\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n            });\r\n        }\r\n        else {\r\n            let { dataState } = this.state;\r\n            if (this.props.Login.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            }\r\n\r\n            this.setState({\r\n                data: this.props.Login.masterData,\r\n                isOpen: false,\r\n                selectedRecord: this.props.Login.selectedRecord,\r\n                dataResult: process(this.props.Login.masterData, dataState),\r\n                dataState\r\n            });\r\n        }\r\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n        this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    }\r\n}\r\n\r\ndeleteRecord = (inputData) => {\r\n    const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n        inputData: {\r\n            [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n            \"userinfo\": this.props.Login.userInfo\r\n        },\r\n        operation: inputData.operation,\r\n        displayName: this.props.Login.inputParam.displayName,\r\n        dataState: this.state.dataState\r\n    }\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n    if (esignNeeded) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                operation: this.props.Login.operation\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n}\r\n\r\nonSaveClick = (saveType, formRef) => {\r\n    //add \r\n    let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let dataState = undefined;\r\n    let selectedId = null;\r\n    if (this.props.Login.operation === \"update\") {\r\n        // edit\r\n        dataState = this.state.dataState;\r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] =  JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        selectedId = this.props.Login.selectedRecord.nmaterialcatcode; \r\n        \r\n    }\r\n    else {\r\n        //add               \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nuserrolecode\":this.props.Login.userInfo.nuserrole};\r\n    \r\n    }\r\n\r\n    inputData[\"materialcategory\"][\"nmaterialtypecode\"] = this.state.selectedRecord[\"nmaterialtypecode\"]? this.state.selectedRecord[\"nmaterialtypecode\"].value:transactionStatus.NA;\r\n    inputData[\"materialcategory\"][\"smaterialcatname\"] = this.state.selectedRecord[\"smaterialcatname\"]? this.state.selectedRecord[\"smaterialcatname\"]:transactionStatus.NO;\r\n    inputData[\"materialcategory\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"]? this.state.selectedRecord[\"sdescription\"]:\"\";\r\n    inputData[\"materialcategory\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\r\n    inputData[\"materialcategory\"][\"ncategorybasedflow\"] = this.state.selectedRecord[\"ncategorybasedflow\"]? this.state.selectedRecord[\"ncategorybasedflow\"]:transactionStatus.NO;\r\n    const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        inputData: inputData,\r\n        operation: this.props.Login.operation,\r\n        displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState,\r\n       \r\n    }\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n    if (esignNeeded) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                operation: this.props.Login.operation\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n}\r\n\r\ncomponentWillUnmount() {\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n            masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n        }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n}\r\n\r\n\r\n\r\nonInputOnChange = (event) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === 'checkbox') {\r\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    }\r\n    else {\r\n        selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n\r\n    this.setState({ selectedRecord });\r\n }\r\n\r\n\r\n onComboChange = (comboData, fieldName) => {      \r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    selectedRecord[fieldName] = comboData;;   \r\n \r\n    this.setState({selectedRecord});        \r\n}\r\n\r\n\r\n validateEsign = () => {\r\n    const inputParam = {\r\n        inputData: {\r\n            \"userinfo\": {\r\n                ...this.props.Login.userInfo,\r\n                sreason: this.state.selectedRecord[\"esigncomments\"]\r\n            },\r\n            password: this.state.selectedRecord[\"esignpassword\"]\r\n        },\r\n        screenData: this.props.Login.screenData\r\n    }\r\n    this.props.validateEsignCredential(inputParam, \"openModal\");\r\n}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService,getMaterialTypeComboService,updateStore,crudMaster,validateEsignCredential})(injectIntl(MaterialCategory));"]},"metadata":{},"sourceType":"module"}