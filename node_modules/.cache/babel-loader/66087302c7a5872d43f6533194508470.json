{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\Sorting.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { callService, updateStore, crudMaster, formSortingService1, formModuleGetSorting, moduleSortingOrder1 } from '../../actions';\nimport { getControlMap, constructOptionList } from '../../components/CommonScript';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport SortableItemUI from './FormModuleSortingConfig';\nimport { sortData } from '../../components/CommonScript';\nimport { Sortable } from \"@progress/kendo-react-sortable\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (this.state.bool === 1) {\n        if (fieldName === \"nmenucode\") {\n          this.props.formSortingService1({\n            inputData: {\n              nmenucode: selectedRecord.nmenucode.value,\n              userinfo: this.props.Login.userInfo,\n              primarykey: selectedRecord.nmenucode.value,\n              boolValue: 1\n            },\n            masterData: this.props.Login.masterData,\n            url: \"sorting/getFilter\"\n          });\n        }\n      } else if (this.state.bool === 2) {\n        if (fieldName === \"nmenucode\") {\n          this.props.formSortingService1({\n            inputData: {\n              nmenucode: selectedRecord.nmenucode.value,\n              userinfo: this.props.Login.userInfo,\n              primarykey: selectedRecord.nmenucode.value,\n              boolValue: 2\n            },\n            masterData: this.props.Login.masterData,\n            url: \"sorting/getFilter\"\n          });\n        }\n      }\n\n      if (fieldName === \"nmodulecode\") {\n        this.props.formSortingService1({\n          inputData: {\n            nmenucode: selectedRecord.nmodulecode.item.nmenucode,\n            nmodulecode: selectedRecord.nmodulecode.value,\n            userinfo: this.props.Login.userInfo,\n            primarykey: selectedRecord.nmodulecode.item.nmenucode,\n            primarykey1: selectedRecord.nmodulecode.value,\n            boolValue: 1\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getFilter1\"\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onNavigate = event => {\n      this.setState({\n        palettes: event.newState\n      });\n    };\n\n    this.booleanValue = fieldName => {\n      if (fieldName == \"formSorting\") {\n        this.setState({\n          bool: 1,\n          btnControl1: \"primary active\",\n          btnControl: \"primary disabled\"\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            boolValue: 1,\n            displayName: this.props.intl.formatMessage({\n              id: \"IDS_SCREENORGANISINGFORM\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n        this.props.Login.masterData[\"nFlag\"] = 0;\n        this.props.formModuleGetSorting({\n          inputData: {\n            boolValue: 1,\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getSorting\"\n        });\n      } else if (fieldName == \"moduleSorting\") {\n        this.setState({\n          bool: 2,\n          btnControl: \"primary active\",\n          btnControl1: \"primary disabled\"\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            boolValue: 2,\n            displayName: this.props.intl.formatMessage({\n              id: \"IDS_SCREENORGANISINGMODULE\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n        this.props.Login.masterData[\"nFlag\"] = 0;\n        this.props.formModuleGetSorting({\n          inputData: {\n            boolValue: 2,\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          url: \"sorting/getSorting\"\n        });\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      data: [],\n      bool: 1,\n      btnControl: \"primary disabled\",\n      btnControl1: \"primary active\"\n    };\n  }\n\n  render() {\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [];\n    }\n\n    let masterdata = { ...this.props.Login.masterData\n    };\n    delete masterdata.MenuList;\n    delete masterdata.SelectedMenuSorting;\n    delete masterdata.SelectedModuleSorting;\n    delete masterdata.moduleList;\n    delete masterdata.nFlag;\n    delete masterdata.formsList;\n    let palettes = masterdata && Object.keys(masterdata);\n    const masterdata1 = [];\n    const palettes2 = [];\n\n    if (this.state.bool == 1) {\n      this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag === 1 ? masterdata1.push(...(this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting)) : palettes.map(item => this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting.map(item1 => item === item1.smodulename ? masterdata1.push(item1) : \"\"));\n      let m1 = Object.keys(masterdata1);\n      let m2 = m1.map(item => ({\n        smodulename: masterdata1[item].smodulename,\n        nsorter: masterdata1[item].nsorter,\n        nmodulecode: masterdata1[item].nmodulecode,\n        sdisplayname: masterdata1[item].sdisplayname\n      }));\n      const palettes1 = Object.values(m2.map(item => item));\n      palettes1 && palettes1.map((item, index) => {\n        let formList = masterdata[item.smodulename];\n        sortData(masterdata[item.smodulename], 'ascending', 'nsorter');\n        palettes2.push({\n          data: formList,\n          name: item.sdisplayname,\n          id: index,\n          nmoduleSorter: item.nsorter,\n          nmodulecode: item.nmodulecode\n        });\n      });\n    } else if (this.state.bool == 2) {\n      this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag === 1 ? masterdata1.push(...this.props.Login.masterData.SelectedMenuSorting) : palettes.map(item => this.props.Login.masterData.SelectedMenuSorting.map(item1 => item === item1.smenuname ? masterdata1.push(item1) : \"\"));\n      let m1 = Object.keys(masterdata1);\n      let m2 = m1.map(item => ({\n        smenuname: masterdata1[item].smenuname,\n        nsorter: masterdata1[item].nsorter,\n        nmenucode: masterdata1[item].nmenucode,\n        sdisplayname: masterdata1[item].sdisplayname\n      }));\n      const palettes1 = Object.values(m2.map(item => item));\n      palettes1 && palettes1.map((item, index) => {\n        let formList = masterdata[item.smenuname];\n        sortData(masterdata[item.smenuname], 'ascending', 'nsorter');\n        palettes2.push({\n          data: formList,\n          name: item.sdisplayname,\n          id: index,\n          nmenuSorter: item.nsorter,\n          nmenucode: item.nmenucode\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-\" + this.state.btnControl + \" btn-padd-custom\",\n      style: {\n        float: \"right\",\n        marginRight: \"35px\"\n      },\n      onClick: () => this.booleanValue('moduleSorting'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MODULE\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-\" + this.state.btnControl1 + \" btn-padd-custom\",\n      style: {\n        float: \"right\",\n        marginRight: \"35px\"\n      },\n      onClick: () => this.booleanValue('formSorting'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_FORM\"\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmenucode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MENU\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstMenuSorting || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.SelectedMenuSorting && {\n        value: this.props.Login.masterData.SelectedMenuSorting[0] ? this.props.Login.masterData.SelectedMenuSorting[0].nmenucode : \"\",\n        label: this.props.Login.masterData.SelectedMenuSorting[0] ? this.props.Login.masterData.SelectedMenuSorting[0].sdisplayname : \"\"\n      },\n      isMandatory: true,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmenucode'),\n      maxMenuHeight: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    })), this.state.bool === 1 ? /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nmodulecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_MODULE\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      options: this.state.lstModuleSorting || [],\n      value: this.props.Login.masterData && this.props.Login.masterData.SelectedModuleSorting && {\n        value: this.props.Login.masterData.SelectedModuleSorting[0] ? this.props.Login.masterData.SelectedModuleSorting[0].nmodulecode : \"\",\n        label: this.props.Login.masterData.SelectedModuleSorting[0] ? this.props.Login.masterData.SelectedModuleSorting[0].sdisplayname : \"\"\n      },\n      isMandatory: true,\n      isMulti: false,\n      isClearable: false,\n      isSearchable: true,\n      isDisabled: false,\n      closeMenuOnSelect: true,\n      className: \"mb-2\",\n      onChange: event => this.onComboChange(event, 'nmodulecode'),\n      maxMenuHeight: 150,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.SelectedMenuSorting || this.props.Login.masterData.SelectedModuleSorting ? /*#__PURE__*/React.createElement(Sortable, {\n      idField: \"id\",\n      data: palettes2 || [],\n      itemUI: SortableItemUI,\n      onDragOver: this.onDragOver,\n      onNavigate: this.onNavigate,\n      masterdata: masterdata,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }) : \"\")));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const menuMap = constructOptionList(this.props.Login.masterData.MenuList || [], \"nmenucode\", \"sdisplayname\", undefined, undefined, true);\n        const MenuList = menuMap.get(\"OptionList\");\n        const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n        const moduleList = moduleMap.get(\"OptionList\");\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          lstMenuSorting: MenuList,\n          lstModuleSorting: moduleList\n        });\n      } else {\n        const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\", \"sdisplayname\", undefined, undefined, true);\n        const moduleList = moduleMap.get(\"OptionList\");\n        this.setState({\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          lstModuleSorting: moduleList\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster,\n  formSortingService1,\n  formModuleGetSorting,\n  moduleSortingOrder1\n})(injectIntl(Sorting));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/credentialmanagement/Sorting.jsx"],"names":["React","connect","injectIntl","Row","Col","callService","updateStore","crudMaster","formSortingService1","formModuleGetSorting","moduleSortingOrder1","getControlMap","constructOptionList","FormSelectSearch","SortableItemUI","sortData","Sortable","DEFAULT_RETURN","mapStateToProps","state","Login","Sorting","Component","constructor","props","onComboChange","comboData","fieldName","selectedRecord","bool","inputData","nmenucode","value","userinfo","userInfo","primarykey","boolValue","masterData","url","nmodulecode","item","primarykey1","setState","onNavigate","event","palettes","newState","booleanValue","btnControl1","btnControl","updateInfo","typeName","data","displayName","intl","formatMessage","id","formRef","createRef","extractedColumnList","masterStatus","error","isOpen","userRoleControlRights","controlMap","Map","render","inputParam","undefined","masterdata","MenuList","SelectedMenuSorting","SelectedModuleSorting","moduleList","nFlag","formsList","Object","keys","masterdata1","palettes2","push","map","item1","smodulename","m1","m2","nsorter","sdisplayname","palettes1","values","index","formList","name","nmoduleSorter","smenuname","nmenuSorter","float","marginRight","lstMenuSorting","label","lstModuleSorting","onDragOver","componentDidUpdate","previousProps","nformcode","ncontrolcode","menuMap","get","moduleMap"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { callService, updateStore, crudMaster, formSortingService1, formModuleGetSorting, moduleSortingOrder1 } from '../../actions';\r\nimport { getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport SortableItemUI from './FormModuleSortingConfig';\r\nimport { sortData } from '../../components/CommonScript';\r\nimport { Sortable } from \"@progress/kendo-react-sortable\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Sorting extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        this.state = {\r\n            masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            data : [],\r\n            bool : 1,\r\n            btnControl : \"primary disabled\",\r\n            btnControl1 : \"primary active\"\r\n        };\r\n    };\r\n\r\n    render() {\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = []\r\n        }\r\n\r\n        let masterdata = {...this.props.Login.masterData};\r\n        delete(masterdata.MenuList);\r\n        delete(masterdata.SelectedMenuSorting);\r\n        delete(masterdata.SelectedModuleSorting);\r\n        delete(masterdata.moduleList);\r\n        delete(masterdata.nFlag); \r\n        delete(masterdata.formsList); \r\n\r\n        let palettes=masterdata && Object.keys(masterdata);\r\n        const masterdata1 = [];\r\n        const palettes2 = [];\r\n\r\n        if(this.state.bool == 1){\r\n            this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\r\n        masterdata1.push(...this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting) :\r\n        palettes.map(item => this.props.Login.masterData.SelectedModuleSorting && this.props.Login.masterData.SelectedModuleSorting.map(\r\n            item1 =>item === item1.smodulename ? masterdata1.push(item1) : \"\"))\r\n\r\n        let m1 = Object.keys(masterdata1);\r\n\r\n        let m2 = \r\n        m1.map((item)=>({\r\n            smodulename : masterdata1[item].smodulename,\r\n            nsorter : masterdata1[item].nsorter,\r\n            nmodulecode : masterdata1[item].nmodulecode,\r\n            sdisplayname : masterdata1[item].sdisplayname\r\n        })) \r\n\r\n        const palettes1 = Object.values(m2.map((item)=>item));\r\n\r\n        palettes1 && palettes1.map((item, index)=>{\r\n            let formList =masterdata[item.smodulename]\r\n            sortData(masterdata[item.smodulename],'ascending','nsorter')\r\n            palettes2.push({\r\n              data: formList,\r\n              name: item.sdisplayname,\r\n              id: index,\r\n              nmoduleSorter: item.nsorter,\r\n              nmodulecode : item.nmodulecode\r\n            })  \r\n          })\r\n        }\r\n        else if(this.state.bool == 2){\r\n            this.props.Login.masterData.nFlag === 1 || this.props.Login.nFlag ===1 ?\r\n            masterdata1.push(...this.props.Login.masterData.SelectedMenuSorting) :\r\n            palettes.map(item => this.props.Login.masterData.SelectedMenuSorting.map(\r\n                item1 =>item === item1.smenuname ? masterdata1.push(item1) : \"\"))\r\n    \r\n            let m1 = Object.keys(masterdata1);\r\n    \r\n            let m2 = \r\n            m1.map((item)=>({\r\n                smenuname : masterdata1[item].smenuname,\r\n                nsorter : masterdata1[item].nsorter,\r\n                nmenucode : masterdata1[item].nmenucode,\r\n                sdisplayname : masterdata1[item].sdisplayname\r\n            })) \r\n    \r\n            const palettes1 = Object.values(m2.map((item)=>item));\r\n    \r\n                palettes1 && palettes1.map((item, index)=>{\r\n                let formList =masterdata[item.smenuname]\r\n                sortData(masterdata[item.smenuname],'ascending','nsorter')\r\n                palettes2.push({\r\n                  data: formList,\r\n                  name: item.sdisplayname,\r\n                  id: index,\r\n                  nmenuSorter: item.nsorter,\r\n                  nmenucode : item.nmenucode\r\n                })  \r\n              })\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-5\">\r\n                    <button className={\"btn btn-\"+(this.state.btnControl)+\" btn-padd-custom\"} style={{ float: \"right\", marginRight : \"35px\" }}\r\n                    onClick={() => this.booleanValue('moduleSorting') }>{this.props.intl.formatMessage({ id: \"IDS_MODULE\" })}</button>\r\n                    <button className={\"btn btn-\"+(this.state.btnControl1)+\" btn-padd-custom\"} style={{ float: \"right\", marginRight : \"35px\" }}\r\n                    onClick={() => this.booleanValue('formSorting')}>{this.props.intl.formatMessage({ id: \"IDS_FORM\" })}</button>\r\n                    <Row>\r\n                    <Col md={3}>\r\n                        <FormSelectSearch\r\n                            name={\"nmenucode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MENU\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={this.state.lstMenuSorting || []}\r\n                            value={this.props.Login.masterData && this.props.Login.masterData.SelectedMenuSorting\r\n                            && {\r\n                            value: this.props.Login.masterData.SelectedMenuSorting[0]? this.props.Login.masterData.SelectedMenuSorting[0].nmenucode :\"\",\r\n                            label: this.props.Login.masterData.SelectedMenuSorting[0]? this.props.Login.masterData.SelectedMenuSorting[0].sdisplayname : \"\"\r\n                            }}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isClearable={false}\r\n                            isSearchable={true}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            className=\"mb-2\"\r\n                            onChange={(event) => this.onComboChange(event, 'nmenucode')}\r\n                            maxMenuHeight={150}\r\n                        /></Col>\r\n                        {this.state.bool === 1 ?\r\n                        <Col md={3}>\r\n                        <FormSelectSearch\r\n                            name={\"nmodulecode\"}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_MODULE\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={this.state.lstModuleSorting || []}\r\n                            value={this.props.Login.masterData && this.props.Login.masterData.SelectedModuleSorting\r\n                            && {\r\n                            value: this.props.Login.masterData.SelectedModuleSorting[0]? this.props.Login.masterData.SelectedModuleSorting[0].nmodulecode : \"\",\r\n                            label: this.props.Login.masterData.SelectedModuleSorting[0]? this.props.Login.masterData.SelectedModuleSorting[0].sdisplayname : \"\",\r\n                            }}\r\n                            isMandatory={true}\r\n                            isMulti={false}\r\n                            isClearable={false}\r\n                            isSearchable={true}\r\n                            isDisabled={false}\r\n                            closeMenuOnSelect={true}\r\n                            className=\"mb-2\"\r\n                            onChange={(event) => this.onComboChange(event, 'nmodulecode')}\r\n                            maxMenuHeight={150}\r\n                        /></Col>: \"\"}\r\n                        </Row>\r\n                        <Col md={10}>\r\n                    {this.props.Login.masterData.SelectedMenuSorting || this.props.Login.masterData.SelectedModuleSorting ? \r\n                    <Sortable\r\n                    idField={\"id\"}\r\n                    data={palettes2 || []}\r\n                    itemUI={SortableItemUI}\r\n                    onDragOver={this.onDragOver}\r\n                    onNavigate={this.onNavigate}\r\n                    masterdata={masterdata}\r\n                  />\r\n                   : \"\"}\r\n                    </Col>                                                                 \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const menuMap = constructOptionList(this.props.Login.masterData.MenuList || [], \"nmenucode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const MenuList = menuMap.get(\"OptionList\");\r\n                const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const moduleList = moduleMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, lstMenuSorting: MenuList, lstModuleSorting: moduleList,\r\n                });\r\n            }\r\n            else {\r\n                const moduleMap = constructOptionList(this.props.Login.masterData.moduleList || [], \"nmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const moduleList = moduleMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,lstModuleSorting: moduleList\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n\r\n        if(this.state.bool === 1){\r\n        if (fieldName === \"nmenucode\") {\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmenucode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmenucode.value,\r\n                    boolValue: 1\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter\"\r\n            });\r\n        }\r\n    }\r\n    else if(this.state.bool === 2){\r\n        if (fieldName === \"nmenucode\") {\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmenucode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmenucode.value,\r\n                    boolValue: 2\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter\"\r\n            });\r\n        }      \r\n    }\r\n        if(fieldName === \"nmodulecode\"){\r\n            this.props.formSortingService1({\r\n                inputData: {\r\n                    nmenucode: selectedRecord.nmodulecode.item.nmenucode,\r\n                    nmodulecode: selectedRecord.nmodulecode.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    primarykey: selectedRecord.nmodulecode.item.nmenucode,\r\n                    primarykey1: selectedRecord.nmodulecode.value,\r\n                    boolValue: 1\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getFilter1\"\r\n            });\r\n        }\r\n        else{\r\n            this.setState({ selectedRecord });\r\n        } \r\n    }\r\n          \r\n    onNavigate = (event) => {\r\n        this.setState({\r\n          palettes: event.newState,\r\n        });\r\n      };\r\n\r\n      booleanValue = (fieldName) => {\r\n          if(fieldName == \"formSorting\"){\r\n              this.setState({\r\n                  bool:1,\r\n                  btnControl1:\"primary active\",\r\n                  btnControl:\"primary disabled\"\r\n              })\r\n\r\n              const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    boolValue: 1,\r\n                    displayName: this.props.intl.formatMessage({ id: \"IDS_SCREENORGANISINGFORM\" }),\r\n                    }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            this.props.Login.masterData[\"nFlag\"] = 0;\r\n\r\n              this.props.formModuleGetSorting({\r\n                inputData: {\r\n                    boolValue:1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getSorting\"\r\n            });\r\n          }\r\n          else if(fieldName == \"moduleSorting\"){\r\n              this.setState({\r\n                  bool:2,\r\n                  btnControl:\"primary active\",\r\n                  btnControl1:\"primary disabled\"\r\n              })\r\n\r\n              const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    boolValue: 2,\r\n                    displayName: this.props.intl.formatMessage({ id: \"IDS_SCREENORGANISINGMODULE\" }),\r\n                    }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            this.props.Login.masterData[\"nFlag\"] = 0;\r\n\r\n              this.props.formModuleGetSorting({\r\n                inputData: {\r\n                    boolValue:2,\r\n                    userinfo: this.props.Login.userInfo,\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                url:\"sorting/getSorting\"\r\n            });\r\n          }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, updateStore, crudMaster, formSortingService1, formModuleGetSorting, moduleSortingOrder1 })(injectIntl(Sorting));\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}