{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\instrumentmanagement\\\\InstrumentSectionTab.jsx\";\nimport React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Nav, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { process } from '@progress/kendo-data-query'; //const InstrumentSectionTab = (props) =>\n\nclass InstrumentSectionTab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sectionDataState: {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      }\n    };\n  } // dataStateChange = (event) => {\n  //     this.setState({\n  //         dataResult: process(this.props.Login.masterData[\"selectedSection\"], event.dataState),\n  //         sectionDataState: event.dataState\n  //     });\n  //}\n\n\n  render() {\n    const addSectionId = this.props.controlMap.has(\"AddSection\") && this.props.controlMap.get(\"AddSection\").ncontrolcode;\n    const instSectionColumnList = [{\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_INCHARGE\",\n      \"dataField\": \"susername\",\n      \"width\": \"150px\"\n    } // {\"idsName\":\"IDS_STATUS\",\"dataField\":\"stransdisplaystatus\",\"width\":\"150px\", \"componentName\": \"switch\", \n    // \"switchFieldName\": \"ndefaultstatus\", \"switchStatus\": transactionStatus.YES, \"needRights\": true, \"controlName\": \"DefaultSection\"}\n    ];\n    const methodUrl = \"Section\";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addtestsection\",\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addSectionId) === -1,\n      onClick: () => this.props.getAvailableInstData(this.props.selectedInstrument, \"getInstrumentSection\", \"section\", \"IDS_SECTION\", this.props.userInfo, addSectionId, this.props.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ADDSECTION\",\n      defaultMessage: \"Add Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"instrumentsectionkey\",\n      primaryKeyField: \"ninstrumentsectioncode\",\n      data: this.props.InstrumentSection,\n      dataResult: process(this.props.InstrumentSection || [], this.state.sectionDataState),\n      dataState: this.state.sectionDataState,\n      dataStateChange: event => this.setState({\n        sectionDataState: event.dataState\n      }),\n      extractedColumnList: instSectionColumnList,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      deleteRecord: this.props.deleteRecord,\n      onSwitchChange: this.props.defaultRecord,\n      pageable: true,\n      scrollable: 'scrollable' //gridHeight = {'600px'}\n      ,\n      isActionRequired: true,\n      deleteParam: {\n        operation: \"delete\",\n        methodUrl,\n        screenName: this.props.screenName\n      },\n      methodUrl: methodUrl //  switchParam={{operation:\"Default\", methodUrl,screenName:this.props.screenName}}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.InstrumentSection !== previousProps.InstrumentSection) {\n      let {\n        sectionDataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        sectionDataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        sectionDataState\n      });\n    }\n  }\n\n}\n\n;\nexport default injectIntl(InstrumentSectionTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/instrumentmanagement/InstrumentSectionTab.jsx"],"names":["React","injectIntl","FormattedMessage","Nav","Row","Col","FontAwesomeIcon","DataGrid","faPlus","transactionStatus","process","InstrumentSectionTab","Component","constructor","props","state","sectionDataState","skip","take","settings","parseInt","render","addSectionId","controlMap","has","get","ncontrolcode","instSectionColumnList","methodUrl","userRoleControlRights","indexOf","getAvailableInstData","selectedInstrument","userInfo","selectedRecord","InstrumentSection","event","setState","dataState","inputParam","deleteRecord","defaultRecord","operation","screenName","componentDidUpdate","previousProps","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Nav, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { process } from '@progress/kendo-data-query';\r\n//const InstrumentSectionTab = (props) =>\r\nclass  InstrumentSectionTab extends React.Component{\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = ({\r\n        sectionDataState: { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 },\r\n    });\r\n}\r\n\r\n\r\n// dataStateChange = (event) => {\r\n//     this.setState({\r\n//         dataResult: process(this.props.Login.masterData[\"selectedSection\"], event.dataState),\r\n//         sectionDataState: event.dataState\r\n//     });\r\n//}\r\n    render(){\r\n        const addSectionId = this.props.controlMap.has(\"AddSection\") && this.props.controlMap.get(\"AddSection\").ncontrolcode;\r\n        const instSectionColumnList = [\r\n            {\"idsName\":\"IDS_SECTION\",\"dataField\":\"ssectionname\",\"width\":\"150px\"},\r\n            {\"idsName\":\"IDS_INCHARGE\",\"dataField\":\"susername\",\"width\":\"150px\"}\r\n            // {\"idsName\":\"IDS_STATUS\",\"dataField\":\"stransdisplaystatus\",\"width\":\"150px\", \"componentName\": \"switch\", \r\n            // \"switchFieldName\": \"ndefaultstatus\", \"switchStatus\": transactionStatus.YES, \"needRights\": true, \"controlName\": \"DefaultSection\"}\r\n        ];\r\n        const methodUrl = \"Section\";\r\n    return (\r\n        <>\r\n            <div className=\"actions-stripe\">\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Nav.Link name=\"addtestsection\" className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addSectionId) === -1}\r\n                            onClick={()=>this.props.getAvailableInstData(this.props.selectedInstrument, \r\n                                \"getInstrumentSection\", \"section\", \"IDS_SECTION\", this.props.userInfo, addSectionId,this.props.selectedRecord)}\r\n                            >\r\n                            <FontAwesomeIcon icon = { faPlus } /> { }\r\n                            <FormattedMessage id=\"IDS_ADDSECTION\" defaultMessage=\"Add Section\"></FormattedMessage>\r\n                        </Nav.Link>\r\n                </div>\r\n            </div>\r\n            <Row noGutters={true}>\r\n                <Col md=\"12\">\r\n                    <DataGrid\r\n                       key=\"instrumentsectionkey\"\r\n                       primaryKeyField = \"ninstrumentsectioncode\"\r\n                       data = {this.props.InstrumentSection}\r\n                       dataResult = {process(this.props.InstrumentSection||[],this.state.sectionDataState)}\r\n                       dataState = {this.state.sectionDataState}\r\n                       dataStateChange = {(event) => this.setState({ sectionDataState: event.dataState })}\r\n                       extractedColumnList = {instSectionColumnList}\r\n                       controlMap = {this.props.controlMap}\r\n                       userRoleControlRights={this.props.userRoleControlRights}\r\n                       inputParam = {this.props.inputParam}\r\n                       userInfo = {this.props.userInfo}\r\n                       deleteRecord = {this.props.deleteRecord}\r\n                       onSwitchChange = {this.props.defaultRecord}\r\n                       pageable={true}\r\n                       scrollable={'scrollable'}\r\n                       //gridHeight = {'600px'}\r\n                       isActionRequired={true}\r\n                       deleteParam={{operation:\"delete\", methodUrl,screenName:this.props.screenName}}\r\n                       methodUrl={methodUrl}\r\n                     //  switchParam={{operation:\"Default\", methodUrl,screenName:this.props.screenName}}\r\n                       \r\n                    >\r\n                    </DataGrid>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\ncomponentDidUpdate(previousProps) {\r\n    if (this.props.InstrumentSection !== previousProps.InstrumentSection) {\r\n        let { sectionDataState} = this.state;\r\n        if (this.props.dataState=== undefined) {\r\n                sectionDataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 };\r\n        }\r\n        this.setState({ sectionDataState });\r\n    }\r\n\r\n}\r\n};\r\n\r\nexport default injectIntl(InstrumentSectionTab);"]},"metadata":{},"sourceType":"module"}