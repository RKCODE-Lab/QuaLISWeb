{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\ClientSiteAddressTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, create_UUID, deleteAttachmentDropZone, Lims_JSON_stringify } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport ClientTabsAccordion from './ClientTabsAccordion';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddClientContact from './AddClientContact';\nimport AddClientSite from './AddClientSite';\nimport AddClientFile from './AddClientFile';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ClientFileTab from './ClientFileTabs';\n\nclass ClientSiteAddressTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.ClientContact, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModalContact = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: true,\n          operation: input.operation,\n          selectedRecord: {\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          defaultSite: undefined,\n          ncontrolCode: input.ncontrolCode,\n          screenName: \"IDS_CLIENTCONTACT\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropClientFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.viewClientFile = filedata => {\n      const inputParam = {\n        inputData: {\n          clientfile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"client\",\n        operation: \"view\",\n        methodUrl: \"AttachedClientFile\",\n        screenName: \"Client File\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.clientSiteAccordion = clientSite => {\n      let primaryKeyField = \"nclientcontactcode\";\n      const addClientContactId = this.props.controlMap.has(\"AddClientContact\") && this.props.controlMap.get(\"AddClientContact\").ncontrolcode;\n      const editClientContactId = this.props.controlMap.has(\"EditClientContact\") && this.props.controlMap.get(\"EditClientContact\").ncontrolcode;\n      const editContactParam = {\n        screenName: \"ClientContactInfo\",\n        primaryKeyField: \"nclientcontactcode\",\n        operation: \"update\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: editClientContactId\n      };\n      const AddContactParam = {\n        screenName: \"ClientContactInfo\",\n        primaryKeyField,\n        undefined,\n        operation: \"create\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addClientContactId\n      };\n      const accordionMap = new Map();\n      clientSite.map(clientSite => accordionMap.set(clientSite.nclientsitecode, /*#__PURE__*/React.createElement(ClientTabsAccordion, {\n        clientSite: clientSite,\n        getClientSiteForAddEdit: this.props.getClientSiteForAddEdit,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        addClientContactId: addClientContactId,\n        AddContactParam: AddContactParam,\n        openModalContact: this.openModalContact // tabDetail={this.tabDetail(userSite)}   \n        ,\n        primaryKeyField: primaryKeyField,\n        expandField: \"expanded\",\n        detailedFieldList: this.detailedFieldList,\n        extractedColumnList: this.ContactColumns,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        data: this.state.ClientContact || [],\n        ClientContact: this.state.ClientContact || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights || [],\n        methodUrl: \"ClientContact\",\n        getClientContactForAddEdit: this.props.getClientContactForAddEdit,\n        editParam: editContactParam,\n        deleteParam: {\n          operation: \"delete\",\n          screenName: \"IDS_CLIENTCONTACT\"\n        },\n        deleteRecord: this.DeleteContact,\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        selectedId: this.props.selectedId,\n        hasDynamicColSize: true,\n        screenName: \"IDS_CLIENTCONTACT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputParam = {};\n\n        if (this.props.screenName === \"IDS_CLIENTSITE\") {\n          inputParam = this.SaveSiteDetails(saveType, formRef);\n        } else if (this.props.screenName === \"IDS_CLIENTCONTACT\") {\n          inputParam = this.SaveContactInfo(saveType, formRef);\n        } else {\n          inputParam = this.saveClientFile(saveType, formRef);\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.saveClientFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let clientFileArray = [];\n      let clientFile = {\n        nclientcode: this.props.masterData.selectedClient.nclientcode,\n        nclientfilecode: selectedRecord.nclientfilecode ? selectedRecord.nclientfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, clientFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nclientfilecode && selectedRecord.nclientfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name.trim(), false);\n            tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            clientFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          clientFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          clientFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n          clientFile[\"nlinkcode\"] = transactionStatus.NA;\n          clientFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          clientFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          clientFileArray.push(clientFile);\n        }\n      } else {\n        clientFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\n        clientFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n        clientFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        clientFile[\"ssystemfilename\"] = \"\";\n        clientFile[\"nfilesize\"] = 0;\n        clientFileArray.push(clientFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"clientfile\", JSON.stringify(clientFileArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"Client\",\n          selectedObject: \"selectedClient\",\n          primaryKeyField: \"nclientcode\"\n        };\n        selectedId = selectedRecord[\"nclientfilecode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"client\",\n        saveType,\n        formRef,\n        methodUrl: \"ClientFile\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.DeleteContact = deleteParam => {\n      let inputData = [];\n      let inputParam = {};\n\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      if (deleteParam.screenName === \"IDS_CLIENTCONTACT\") {\n        inputData[\"clientcontactinfo\"] = deleteParam.selectedRecord;\n        inputData[\"userinfo\"] = this.props.userInfo;\n        inputParam = {\n          methodUrl: \"ClientContactInfo\",\n          classUrl: this.props.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: this.state.dataState\n        };\n      } else {\n        inputParam = {\n          classUrl: \"client\",\n          methodUrl: deleteParam.methodUrl,\n          inputData: {\n            [deleteParam.methodUrl]: deleteParam.selectedRecord,\n            \"userinfo\": this.props.userInfo\n          },\n          operation: deleteParam.operation,\n          dataState: this.state.dataState\n        };\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: \"Contact\",\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"Contact\",\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[deleteParam.Type] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: deleteParam.methodURL,\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isSiteOpen: false,\n      isContactOpen: false,\n      siteSelectedRecord: {},\n      contactSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      ClientContact: this.props.masterData.ClientContact,\n      Country: [],\n      SiteCode: this.props.masterData.SiteCode,\n      selectedRecord: {},\n      countryCode: []\n    };\n    this.ContactColumns = [{\n      \"idsName\": \"IDS_CLIENTCONTACTNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"semail\",\n      idsName: \"IDS_EMAILID\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"sdefaultContact\",\n      idsName: \"IDS_DEFAULT\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteColumns = [{\n      \"idsName\": \"IDS_CLIENTSITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"sclientsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"mandatory\": true,\n      \"dataField\": \"saddress1\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"ncountrycode\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.detailedFieldList = [{\n      \"dataField\": \"sphoneno\",\n      \"idsName\": \"IDS_PHONE\",\n      columnSize: \"4\"\n    }, {\n      \"idsName\": \"IDS_MOBILE\",\n      \"dataField\": \"smobileno\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAX\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomments\",\n      idsName: \"IDS_COMMENTS\",\n      columnSize: \"12\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addClientSiteId = this.props.controlMap.has(\"AddClientSite\") && this.props.controlMap.get(\"AddClientSite\").ncontrolcode;\n    let mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_CLIENTSITE\") {\n      this.siteColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else if (this.props.screenName === \"IDS_CLIENTCONTACT\") {\n      this.ContactColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        // if (this.props.operation !== 'update') {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Pane, {\n      \"aria-labelledby\": \"Version-tab\",\n      className: \"p-0 active show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addClientSiteId) === -1,\n      onClick: () => this.props.getClientSiteForAddEdit(\"ClientSite\", \"create\", this.props.masterData.selectedClient.nclientcode, undefined, addClientSiteId, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CLIENTSITE\",\n      defaultMessage: \"Site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 41\n      }\n    }, this.props.masterData.ClientSite && this.props.masterData.ClientSite.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"sclientsitename\",\n      accordionComponent: this.clientSiteAccordion(this.props.masterData.ClientSite),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getClientSiteContactDetails,\n      accordionPrimaryKey: \"nclientsitecode\",\n      accordionObjectName: \"clientSite\",\n      selectedKey: this.props.masterData.selectedClientSite.nclientsitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 49\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_CLIENTSITE\" ? /*#__PURE__*/React.createElement(AddClientSite, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        Country: this.props.Country || [] //inputParam={this.props.inputParam}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_CLIENTCONTACT\" ? /*#__PURE__*/React.createElement(AddClientContact, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddClientFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropClientFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20 // maxFiles={this.props.operation === \"update\" ? 1 : 3}\n        // multiple={this.props.operation === \"update\" ? false : true}\n        ,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CLIENTFILE\"\n        }),\n        name: \"clientfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 43\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    })));\n  } // onTabChange = (tabProps) => {\n  //     const screenName = tabProps.screenName;\n  //     const updateInfo = {\n  //         typeName: DEFAULT_RETURN,\n  //         data: { screenName }\n  //     }\n  //     this.props.updateStore(updateInfo);\n  // }\n\n\n  SaveSiteDetails(saveType, formRef) {\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nclientsitecode\", \"ncountrycode\", \"sclientsitename\", \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ClientSiteAddress\",\n        selectedObject: \"selectedClientSite\",\n        primaryKeyField: \"nclientsitecode\"\n      };\n      inputData[\"clientsiteaddress\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n        } else {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        }\n      });\n    } else {\n      inputData[\"clientsiteaddress\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item].value;\n        } else {\n          return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item];\n        }\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ClientSiteAddress\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      postParam: postParam\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveContactInfo(saveType, formRef) {\n    let dataState = undefined;\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nclientcontactcode\", \"scontactname\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\n    let selectedId = null;\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ClientContactInfo\",\n        selectedObject: \"selectedClientContact\",\n        primaryKeyField: \"nclientcontactcode\"\n      };\n      inputData[\"clientcontactinfo\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      selectedId = this.props.selectedRecord.nclientcontactcode;\n      fieldList.map(item => {\n        return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      dataState = this.state.dataState;\n    } else {\n      inputData[\"clientcontactinfo\"] = {\n        \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\n        \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\n      };\n      fieldList.map(item => {\n        return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      inputData[\"clientcontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus : transactionStatus.YES;\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ClientContactInfo\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState,\n      postParam: postParam\n    };\n    return inputParam;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        isSiteOpen: false,\n        isContactOpen: false,\n        ClientContact: this.props.masterData.ClientContact,\n        SiteCode: this.props.masterData.SiteCode,\n        Country: this.props.masterData.Country,\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ClientSiteAddressTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/contactmaster/ClientSiteAddressTab.jsx"],"names":["React","Component","Row","Col","Card","Tab","Nav","injectIntl","FormattedMessage","FontAwesomeIcon","faPlus","process","SlideOutModal","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","onDropAttachFileList","create_UUID","deleteAttachmentDropZone","Lims_JSON_stringify","Esign","transactionStatus","attachmentType","CustomAccordion","ClientTabsAccordion","toast","ConfirmMessage","AddClientContact","AddClientSite","AddClientFile","CustomTabs","ClientFileTab","ClientSiteAddressTab","constructor","props","dataStateChange","event","setState","dataResult","state","ClientContact","dataState","openModalContact","input","updateInfo","typeName","data","openChildModal","operation","selectedRecord","NO","defaultSite","undefined","ncontrolCode","screenName","loading","updateStore","onDropClientFile","attachedFiles","fieldName","maxSize","actionType","viewClientFile","filedata","inputParam","inputData","clientfile","userinfo","userInfo","classUrl","methodUrl","viewAttachment","clientSiteAccordion","clientSite","primaryKeyField","addClientContactId","controlMap","has","get","ncontrolcode","editClientContactId","editContactParam","AddContactParam","accordionMap","Map","map","set","nclientsitecode","getClientSiteForAddEdit","masterData","ConfirmDelete","detailedFieldList","ContactColumns","userRoleControlRights","getClientContactForAddEdit","DeleteContact","selectedId","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","onInputOnChange","optional","target","type","name","checked","ACTIVE","DEACTIVE","YES","value","onComboChange","comboData","closeModal","loadEsign","onSaveClick","saveType","formRef","SaveSiteDetails","SaveContactInfo","saveClientFile","esignRights","nformcode","screenData","crudMaster","warn","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","clientFileArray","clientFile","nclientcode","selectedClient","nclientfilecode","nstatus","formData","FormData","FTP","Array","isArray","length","forEach","file","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","trim","sdescription","NA","size","append","push","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","postParam","inputListName","selectedObject","sformname","smodulename","isFileupload","deleteParam","expanded","Type","methodURL","deleteAttachment","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","skip","take","settings","parseInt","isSiteOpen","isContactOpen","siteSelectedRecord","contactSelectedRecord","Country","SiteCode","countryCode","dataField","idsName","siteColumns","columnSize","render","addClientSiteId","mandatoryFields","item","mandatory","LINK","indexOf","ClientSite","getClientSiteContactDetails","selectedClientSite","onDropAccepted","linkMaster","editFiles","fieldList","nclientcontactcode","ndefaultstatus","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, create_UUID, deleteAttachmentDropZone, Lims_JSON_stringify } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport ClientTabsAccordion from './ClientTabsAccordion';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddClientContact from './AddClientContact';\r\nimport AddClientSite from './AddClientSite';\r\nimport AddClientFile from './AddClientFile';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ClientFileTab from './ClientFileTabs';\r\n\r\nclass ClientSiteAddressTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isSiteOpen: false, isContactOpen: false, siteSelectedRecord: {}, contactSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, ClientContact: this.props.masterData.ClientContact, Country: [],\r\n            SiteCode: this.props.masterData.SiteCode, selectedRecord: {}, countryCode: [],\r\n\r\n        };\r\n        this.ContactColumns = [{ \"idsName\": \"IDS_CLIENTCONTACTNAME\", \"mandatory\": true, \"dataField\": \"scontactname\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { dataField: \"semail\", idsName: \"IDS_EMAILID\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { dataField: \"sdefaultContact\", idsName: \"IDS_DEFAULT\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n\r\n        ];\r\n\r\n        this.siteColumns = [{ \"idsName\": \"IDS_CLIENTSITENAME\", \"mandatory\": true, \"dataField\": \"sclientsitename\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_ADDRESS1\", \"mandatory\": true, \"dataField\": \"saddress1\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_COUNTRYNAME\", \"mandatory\": true, \"dataField\": \"ncountrycode\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n        ];\r\n        this.detailedFieldList = [\r\n            { \"dataField\": \"sphoneno\", \"idsName\": \"IDS_PHONE\", columnSize: \"4\" },\r\n            { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\", columnSize: \"4\" },\r\n            { dataField: \"sfaxno\", idsName: \"IDS_FAX\", columnSize: \"4\" },\r\n            { dataField: \"scomments\", idsName: \"IDS_COMMENTS\", columnSize: \"12\" }\r\n\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.ClientContact, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModalContact = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: true, operation: input.operation,\r\n                selectedRecord: { \"ndefaultstatus\": transactionStatus.NO },\r\n                defaultSite: undefined, ncontrolCode: input.ncontrolCode,\r\n                screenName: \"IDS_CLIENTCONTACT\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    render() {\r\n\r\n        const addClientSiteId = this.props.controlMap.has(\"AddClientSite\") && this.props.controlMap.get(\"AddClientSite\").ncontrolcode\r\n        let mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_CLIENTSITE\") {\r\n            this.siteColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else if (this.props.screenName === \"IDS_CLIENTCONTACT\") {\r\n            this.ContactColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        } else {\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandatoryFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                // if (this.props.operation !== 'update') {\r\n                mandatoryFields = [{ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }];\r\n                // }\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row> */}\r\n                <Row noGutters={true}>\r\n                    <Col md='12'>\r\n                        <Card className=\"at-tabs\">\r\n                            <Tab.Content>\r\n                                <Tab.Pane aria-labelledby=\"Version-tab\" className=\"p-0 active show\">\r\n\r\n                                    <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\" >\r\n                                        <Col md={12}>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addClientSiteId) === -1}\r\n                                                    onClick={() => this.props.getClientSiteForAddEdit(\"ClientSite\", \"create\", this.props.masterData.selectedClient.nclientcode, undefined, addClientSiteId, this.props.userInfo)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                    <FormattedMessage id='IDS_CLIENTSITE' defaultMessage='Site' />\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                    <Row className=\"no-gutters\">\r\n                                        <Col md={12}>\r\n                                            {this.props.masterData.ClientSite && this.props.masterData.ClientSite.length > 0 ?\r\n                                                <CustomAccordion key=\"filter\"\r\n                                                    accordionTitle={\"sclientsitename\"}\r\n                                                    accordionComponent={this.clientSiteAccordion(this.props.masterData.ClientSite)}\r\n                                                    inputParam={{ masterData: this.props.masterData, userInfo: this.props.userInfo }}\r\n                                                    accordionClick={this.props.getClientSiteContactDetails}\r\n                                                    accordionPrimaryKey={\"nclientsitecode\"}\r\n                                                    accordionObjectName={\"clientSite\"}\r\n                                                    selectedKey={this.props.masterData.selectedClientSite.nclientsitecode}\r\n                                                />\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </Tab.Pane >\r\n                            </Tab.Content >\r\n                        </Card >\r\n                    </Col >\r\n                </Row >\r\n\r\n                <>\r\n                    {this.props.openChildModal &&\r\n                        <SlideOutModal show={this.props.openChildModal}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.operation}\r\n                            inputParam={this.props.inputParam}\r\n                            screenName={this.props.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            updateStore={this.props.updateStore}\r\n                            esign={this.props.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.loadEsign ?\r\n                                <Esign operation={this.props.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.screenName === \"IDS_CLIENTSITE\" ?\r\n                                    <AddClientSite selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        Country={this.props.Country || []}\r\n                                    //inputParam={this.props.inputParam}\r\n                                    /> :\r\n                                    this.props.screenName === \"IDS_CLIENTCONTACT\" ?\r\n                                        <AddClientContact\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                        />\r\n                                        : <AddClientFile\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onDrop={this.onDropClientFile}\r\n                                            onDropAccepted={this.onDropAccepted}\r\n                                            deleteAttachment={this.deleteAttachment}\r\n                                            actionType={this.state.actionType}\r\n                                            onComboChange={this.onComboChange}\r\n                                            linkMaster={this.props.linkMaster}\r\n                                            editFiles={this.props.editFiles}\r\n                                            maxSize={20}\r\n                                            // maxFiles={this.props.operation === \"update\" ? 1 : 3}\r\n                                            // multiple={this.props.operation === \"update\" ? false : true}\r\n                                            maxFiles={1}\r\n                                            multiple={false}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_CLIENTFILE\" })}\r\n                                            name=\"clientfilename\"\r\n                                        />\r\n                            }\r\n                        />\r\n\r\n                    }\r\n\r\n                </>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // onTabChange = (tabProps) => {\r\n    //     const screenName = tabProps.screenName;\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { screenName }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n    onDropClientFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    // tabDetail =     () => {\r\n\r\n    //     const tabMap = new Map();\r\n    //     tabMap.set(\"IDS_CLIENTSITE&CONTACT\",\r\n    //     <ClientTabsAccordion\r\n    //     userRoleControlRights={this.props.userRoleControlRights}\r\n    //     controlMap={this.props.controlMap}\r\n    //     inputParam={this.props.inputParam}\r\n    //     userInfo={this.props.userInfo}\r\n    //     masterData={this.props.masterData}\r\n    //     clientSite={this.props.masterData.selectedClientSite}\r\n    //     ClientContact={this.props.masterData.ClientContact}\r\n    //     dataStateChange={(event) => this.setState({ dataState: event.dataState })}\r\n    //     dataState={(this.props.screenName === undefined ||\"Client Site&Contact\" ) ? this.state.dataState : { skip: 0 }}\r\n    //     screenName=\"Client Site&Contact\"\r\n    //     getClientSiteForAddEdit={this.props.getClientSiteForAddEdit}\r\n    //     getClientSiteContactDetails={this.props.getClientSiteContactDetails}\r\n    //     clientSiteAccordion={this.clientSiteAccordion}\r\n    //     />)\r\n    //     tabMap.set(\"IDS_FILE\",\r\n    //         <ClientFileTab\r\n    //             controlMap={this.props.controlMap}\r\n    //             userRoleControlRights={this.props.userRoleControlRights}\r\n    //             userInfo={this.props.userInfo}\r\n    //             inputParam={this.props.inputParam}\r\n    //             deleteRecord={this.DeleteContact}\r\n    //             clientFile={this.props.masterData.clientFile || []}\r\n    //             getAvailableData={this.props.getAvailableData}\r\n    //             addClientFile={this.props.addClientFile}\r\n    //             viewClientFile={this.viewClientFile}\r\n    //             defaultRecord={this.defaultRecord}\r\n    //             screenName=\"Client File\"\r\n    //             settings={this.props.settings}\r\n    //         />);\r\n    //     return tabMap;\r\n    // }\r\n\r\n    viewClientFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                clientfile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"client\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedClientFile\",\r\n            screenName: \"Client File\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n\r\n    clientSiteAccordion = (clientSite) => {\r\n        let primaryKeyField = \"nclientcontactcode\";\r\n        const addClientContactId = this.props.controlMap.has(\"AddClientContact\") && this.props.controlMap.get(\"AddClientContact\").ncontrolcode\r\n        const editClientContactId = this.props.controlMap.has(\"EditClientContact\") && this.props.controlMap.get(\"EditClientContact\").ncontrolcode;\r\n        const editContactParam = {\r\n            screenName: \"ClientContactInfo\", primaryKeyField: \"nclientcontactcode\", operation: \"update\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editClientContactId\r\n        };\r\n        const AddContactParam = {\r\n            screenName: \"ClientContactInfo\", primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addClientContactId\r\n        };\r\n\r\n        const accordionMap = new Map();\r\n        clientSite.map((clientSite) =>\r\n            accordionMap.set(clientSite.nclientsitecode,\r\n                <ClientTabsAccordion clientSite={clientSite}\r\n                    getClientSiteForAddEdit={this.props.getClientSiteForAddEdit}\r\n                    masterData={this.props.masterData}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    addClientContactId={addClientContactId}\r\n                    AddContactParam={AddContactParam}\r\n                    openModalContact={this.openModalContact}\r\n                    // tabDetail={this.tabDetail(userSite)}   \r\n\r\n                    primaryKeyField={primaryKeyField}\r\n                    expandField=\"expanded\"\r\n                    detailedFieldList={this.detailedFieldList}\r\n                    extractedColumnList={this.ContactColumns}\r\n                    inputParam={this.props.inputParam}\r\n                    userInfo={this.props.userInfo}\r\n                    data={this.state.ClientContact || []}\r\n                    ClientContact={this.state.ClientContact || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights || []}\r\n                    methodUrl=\"ClientContact\"\r\n                    getClientContactForAddEdit={this.props.getClientContactForAddEdit}\r\n                    editParam={editContactParam}\r\n                    deleteParam={{ operation: \"delete\", screenName: \"IDS_CLIENTCONTACT\" }}\r\n                    deleteRecord={this.DeleteContact}\r\n                    scrollable={\"scrollable\"}\r\n                    isActionRequired={true}\r\n                    selectedId={this.props.selectedId}\r\n                    hasDynamicColSize={true}\r\n                    screenName={\"IDS_CLIENTCONTACT\"}\r\n                />\r\n            )\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    onInputOnChange = (event, optional) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else\r\n                if (event.target.name === \"agree\") {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n                }\r\n\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n\r\n        else {\r\n\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"\r\n                || event.target.name === \"sfaxno\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\r\n            let inputParam = {};\r\n\r\n            if (this.props.screenName === \"IDS_CLIENTSITE\") {\r\n                inputParam = this.SaveSiteDetails(saveType, formRef);\r\n            }\r\n            else if (this.props.screenName === \"IDS_CLIENTCONTACT\") {\r\n\r\n                inputParam = this.SaveContactInfo(saveType, formRef);\r\n            } else {\r\n                inputParam = this.saveClientFile(saveType, formRef);\r\n            }\r\n\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n    SaveSiteDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nclientsitecode\", \"ncountrycode\", \"sclientsitename\",\r\n            \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ClientSiteAddress\",\r\n                selectedObject: \"selectedClientSite\",\r\n                primaryKeyField: \"nclientsitecode\",\r\n            };\r\n            inputData[\"clientsiteaddress\"] = {\r\n                \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\r\n                \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\r\n            };\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"clientsiteaddress\"] = { \"nclientcode\": this.props.masterData.selectedClient.nclientcode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"clientsiteaddress\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ClientSiteAddress\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            postParam: postParam\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SaveContactInfo(saveType, formRef) {\r\n\r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nclientcontactcode\", \"scontactname\",\r\n            \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\r\n\r\n        let selectedId = null;\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ClientContactInfo\",\r\n                selectedObject: \"selectedClientContact\",\r\n                primaryKeyField: \"nclientcontactcode\",\r\n            };\r\n            inputData[\"clientcontactinfo\"] = {\r\n                \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\r\n                \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\r\n            };\r\n\r\n            selectedId = this.props.selectedRecord.nclientcontactcode;\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n\r\n            inputData[\"clientcontactinfo\"] = {\r\n                \"nclientcode\": this.props.masterData.selectedClient.nclientcode,\r\n                \"nclientsitecode\": this.props.masterData.selectedClientSite.nclientsitecode\r\n            };\r\n            fieldList.map(item => {\r\n                return inputData[\"clientcontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"clientcontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ?\r\n                this.state.selectedRecord.ndefaultstatus\r\n                : transactionStatus.YES\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ClientContactInfo\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState,\r\n            postParam: postParam\r\n        }\r\n        return inputParam;\r\n\r\n    }\r\n    saveClientFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let clientFileArray = [];\r\n        let clientFile = {\r\n            nclientcode: this.props.masterData.selectedClient.nclientcode,\r\n            nclientfilecode: selectedRecord.nclientfilecode ? selectedRecord.nclientfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, clientFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nclientfilecode && selectedRecord.nclientfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = Lims_JSON_stringify(file.name.trim(), false);\r\n                    tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    clientFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                clientFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                clientFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                clientFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                clientFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                clientFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                clientFileArray.push(clientFile);\r\n            }\r\n        } else {\r\n            clientFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\r\n            clientFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\r\n            clientFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            clientFile[\"ssystemfilename\"] = \"\";\r\n            clientFile[\"nfilesize\"] = 0;\r\n            clientFileArray.push(clientFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"clientfile\", JSON.stringify(clientFileArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"Client\", selectedObject: \"selectedClient\", primaryKeyField: \"nclientcode\" };\r\n            selectedId = selectedRecord[\"nclientfilecode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"client\",\r\n            saveType, formRef, methodUrl: \"ClientFile\", postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n    DeleteContact = (deleteParam) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        if (deleteParam.screenName === \"IDS_CLIENTCONTACT\") {\r\n            inputData[\"clientcontactinfo\"] = deleteParam.selectedRecord;\r\n            inputData[\"userinfo\"] = this.props.userInfo;\r\n            inputParam = {\r\n                methodUrl: \"ClientContactInfo\",\r\n                classUrl: this.props.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: \"delete\",\r\n                dataState: this.state.dataState\r\n            }\r\n        } else {\r\n            inputParam = {\r\n                classUrl: \"client\",\r\n                methodUrl: deleteParam.methodUrl,\r\n                inputData: {\r\n                    [deleteParam.methodUrl]: deleteParam.selectedRecord,\r\n                    \"userinfo\": this.props.userInfo,\r\n\r\n                },\r\n                operation: deleteParam.operation,\r\n                dataState: this.state.dataState\r\n            }\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[deleteParam.Type] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: deleteParam.methodURL,\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            }\r\n\r\n            this.setState({\r\n                isSiteOpen: false, isContactOpen: false,\r\n                ClientContact: this.props.masterData.ClientContact,\r\n                SiteCode: this.props.masterData.SiteCode, Country: this.props.masterData.Country, dataState\r\n\r\n            });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\nexport default (injectIntl(ClientSiteAddressTab));"]},"metadata":{},"sourceType":"module"}