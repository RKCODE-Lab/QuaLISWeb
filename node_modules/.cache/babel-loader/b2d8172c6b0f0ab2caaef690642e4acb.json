{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList, faListUl, faListDots, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n\nimport { falistUl } from '@fortawesome/free-regular-svg-icons';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, auditFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList, constructjsonOptionDefault } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, TemplateType, transactionStatus, templateMappingAction } from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx'; //import ConfigureAuditFields from './ConfigureAuditFields';\n\nimport CustomPopover from '../../components/customPopover';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === TemplateType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: TemplateType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.actionMethod = value => {\n      if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, \"configure\");\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configureedit');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, 'configuresubsample');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configuresubsampleedit');\n      } else if (value.method === templateMappingAction.CONFIGUNIQUE) {\n        this.openCombinationUniqueFieldConfiguration(value.controlId);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"delete\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.deleteCombinationUnique = (index, eventKey) => {\n      if (eventKey === \"subsample\") {\n        let dataList = this.props.Login.subsampledataList || [];\n        let dataListCount = this.props.Login.subsampledataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            subsampledataListCount: dataListCount,\n            subsampledataList: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        let dataList = this.props.Login.dataList || [];\n        let dataListCount = this.props.Login.dataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.addCombinatonUnique = (designData, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCountSubSample || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCountSubSample: dataListCount,\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCount || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openCombinationUniqueFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configureunique';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.combinationUniqueConfigService(inputParam);\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.auditFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.auditFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"approve\" || this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          dataList: [],\n          dataListCount: [],\n          dataListSubSample: [],\n          dataListCountSubSample: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      const fieldName = item.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[formCode] = { ...selectedRecord[formCode],\n        [fieldName]: comboData\n      };\n      this.setState({\n        selectedRecord\n      }); // let designData = this.props.Login.editFieldDesignData;\n      // let dataResult = this.props.Login.editFieldDataResult;\n      // if (formCode === undefined){\n      //     dataResult[dataIndex][field] = event.target.checked;\n      //     if (event.target.checked) {\n      //         designData[field].splice(dataIndex, 0, dataItem.realData)\n      //     } else {\n      //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // else{\n      //     dataResult[formCode][\"sampleeditable\"] = comboData;\n      //     if (event.target.checked) {\n      //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n      //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\n      //         } else {\n      //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\n      //         }\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\n      //         }\n      //     } else {\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\n      //         }\n      //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { designData, dataResult }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = templatedata => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          //console.log(\"component2:\", component);\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // console.log(\"component row2:\", componentRow);\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": true,\n                  \"predefinedconditionalString\": componentRow.valuemember + \" > 0 \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.valuemember,\n                  \"foriegntablename\": componentRow.source,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              } // samplesearchfields.push(componentRow.label)\n\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            //console.log(\"component2:\", component);\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": true,\n                \"predefinedconditionalString\": component.valuemember + \" > 0\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.label,\n                // \"ismultilingual\": true,\n                \"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.column.value,\n                \"foriegntablename\": \"dynamicmaster\",\n                ...comboDataInputObject\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n            }\n\n            if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            }); // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n            // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique\n      }; // console.log(\"dynamiccolumns:\", jdynamiccolumns);\n\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      let displayFields = [];\n      let listItem = [];\n      let gridItem = [];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = []; // const staticSearchFields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\n      // const sampleStaticFields = [\n      //     { [designProperties.LABEL]: { \"en-US\": \"Reg Date\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Дата регистрации\",\"tg-TG\":\"Санаи бақайдгирӣ\" }, \n      //       [designProperties.VALUE]: 'dregdate' },\n      //     { [designProperties.LABEL]: { \"en-US\": \"Ar No.\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Ар №\",\"tg-TG\":\"Ар №\" }, \n      //       [designProperties.VALUE]: 'sarno' },\n      //     { [designProperties.LABEL]: { \"en-US\": \"Transaction Status\",\"Ko-KR\":\"Transaction Status\",\"ru-RU\":\"Статус транзакции\",\"tg-TG\":\"Ҳолати транзаксия\" }, \n      //       [designProperties.VALUE]: 'stransdisplaystatus' }\n      //     ]\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              subsamplesearchfields.push(componentRow.label); //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\n\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              if (component.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n            });\n          } else {\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            subsamplesearchfields.push(component.label); // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\n\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            // let combinedField = [];\n            component.children.map(componentRow => {\n              // combinedField.push(componentRow.label)\n              jdynamiccolumns.push({\n                columnname: componentRow.label,\n                displayname: componentRow.displayname\n              });\n\n              if (componentRow.hasOwnProperty('child')) {\n                componentRow.child.map(childData => {\n                  jnumericcolumns.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"foriegntablePK\": componentRow.label,\n                    // \"ismultilingual\": true,\n                    // \"conditionstring\": \" and nformcode in (140) \",\n                    \"tablecolumnname\": childData.tablecolumnname,\n                    \"foriegntablename\": \"dynamicmaster\"\n                  });\n                });\n              }\n\n              componentRow.unique && sampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && samplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              samplesearchfields.push(componentRow.label);\n              sampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.inputtype === 'date') {\n                sampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n              }\n\n              displayFields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              componentRow.templatemandatory && listItem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                if (componentRow.readonly) editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });else editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.PREREGISTER]\n                });\n              }\n\n              return null;\n            }); // let fieldSet = combinedField.join(\"&\")\n            // displayFields.push(fieldSet);\n            // componentRow.templatemandatory && listItem.push(fieldSet)\n            // gridMoreItem.push(fieldSet);\n          } else {\n            jdynamiccolumns.push({\n              columnname: component.label,\n              displayname: component.displayname\n            });\n\n            if (component.hasOwnProperty('child')) {\n              component.child.map(childData => {\n                jnumericcolumns.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"foriegntablePK\": component.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (140) \",\n                  \"tablecolumnname\": childData.tablecolumnname,\n                  \"foriegntablename\": \"dynamicmaster\"\n                });\n              });\n            }\n\n            component.unique && sampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && samplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            samplesearchfields.push(component.label);\n            sampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.inputtype === 'date') {\n              sampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n            }\n\n            displayFields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            }); // component.templatemandatory \n            //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              listItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                mandatory: true\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              // editable.push({ label: component.label, editableuntill: [17] })\n              if (component.readonly) editable.push({\n                label: component.label,\n                editableuntill: []\n              });else editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      displayFields.push({\n        [designProperties.LABEL]: {\n          \"en-US\": \"Reg Date\",\n          \"Ko-KR\": \"Reg Date\",\n          \"ru-RU\": \"Дата регистрации\",\n          \"tg-TG\": \"Санаи бақайдгирӣ\"\n        },\n        [designProperties.VALUE]: 'dregdate'\n      }); //samplesearchfields.push(...staticSearchFields);\n      //console.log(\"reg sub type:\", this.props.Login);\n\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        // sampleuniquevalidation,\n        //  subsamplecombinationunique,\n        samplecombinationunique,\n        ...this.props.Login.testListFields\n      }; // console.log(\"Template mapping obj:\", obj);\n\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields,\n        subsampletemplatefields,\n        //: subsamplesearchfields,\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj\n        },\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        }\n      };\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n          }\n\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1);\n          }\n\n          dataResult[formCode][dataIndex][field] = event.target.checked;\n          designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          designData,\n          dataResult\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //console.log(\"save:\", this.state.selectedRecord);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation;\n\n      if (operation === 'configure' || operation === 'configuresubsample') {\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: this.props.Login.designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n      } else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\n        let designData = this.props.Login.editFieldDesignData;\n        let formCodeArray = Object.keys(this.state.selectedRecord);\n        formCodeArray.forEach(formCode => {\n          const data = this.state.selectedRecord[formCode];\n          let editableData = designData[formCode]['sampleeditable'];\n          ;\n\n          if (operation === 'configuresubsampleedit') {\n            editableData = designData[formCode]['subsampleeditable'];\n            ;\n          }\n\n          Object.keys(data).map(label => {\n            const editableuntil = [];\n            data[label].map(statusItem => editableuntil.push(statusItem.value));\n            const index = editableData.findIndex(item => item.label === label);\n\n            if (index === -1) {\n              editableData.push({\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              });\n            } else {\n              editableData[index] = {\n                \"label\": label,\n                \"editableuntill\": editableuntil\n              };\n            } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n          });\n        });\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else if (operation === 'configureunique') {\n        let designData = this.props.Login.designData; //  let formCodeArray = Object.keys(this.state.selectedRecord);\n\n        const dataList = [];\n        const dataListsubsample = [];\n        this.props.Login.dataList.map(x => {\n          if (Object.keys(x).length !== 0) {\n            dataList.push(x);\n          }\n        });\n\n        if (this.props.Login.masterData.realSampleValue.value === TemplateType.Masters) {\n          designData['mastercombinationunique'] = dataList;\n        } else {\n          designData['samplecombinationunique'] = dataList;\n          designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList;\n          this.props.Login.dataListSubSample.map(x => {\n            if (Object.keys(x).length !== 0) {\n              dataListsubsample.push(x);\n            }\n          });\n          designData['subsamplecombinationunique'] = dataListsubsample;\n          designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample;\n        }\n\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n      } else {\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey\n        } = this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ncontrolcode\": this.props.Login.ncontrolCode,\n          \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n          \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n          \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n          \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? jsondata : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\n        };\n        inputData[\"designtemplatemapping\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n\n        if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n          let qf_jsonData = {\n            sdisplayname: {}\n          };\n          let qbt_jsonData = {\n            tablename: {}\n          };\n          this.props.Login.languageList.map(lang => {\n            qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n            qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n          });\n          let qm_jsonData = {\n            sdisplayname: {}\n          };\n          let nmodulecode = 0;\n          let smoduledisplayname = \"\"; // if (typeof this.state.selectedRecord[\"nmodulecode\"].value === \"string\" )\n          // {\n          //     smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"].value;\n          //     this.props.Login.languageList.map(lang => {\n          //         qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"].value;\n          //     })\n          // }\n          // else{\n          //     nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n          // }\n\n          if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n            smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n            this.props.Login.languageList.map(lang => {\n              qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n            });\n          } else {\n            nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n          }\n\n          inputData = { ...inputData,\n            sformname: this.state.selectedRecord.sformname,\n            nmodulecode,\n            smoduledisplayname,\n            qm_jsonData,\n            qf_jsonData,\n            qbt_jsonData,\n            sprimarykeyname: templatePrimaryKey,\n            jdynamiccolumns,\n            jnumericcolumns\n          };\n        } // this.designtemplatemappingFieldList.map(item => {\n        //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n        // });\n\n      }\n\n      let postParam = undefined;\n      const inputParam = {\n        classUrl: \"designtemplatemapping\",\n        methodUrl: \"DesignTemplateMapping\",\n        inputData: inputData,\n        operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        dataList: [],\n        dataListCount: [],\n        dataListCountSubSample: [],\n        dataListSubSample: []\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            dataList: [],\n            dataListCount: [],\n            dataListCountSubSample: [],\n            dataListSubSample: []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\n      userStatusCSS = \"outline-danger\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\n    const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\n    const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\n    const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\n    const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\n    const actionList = [];\n\n    if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n        }),\n        \"controlId\": sampleFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters && this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEEDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEDITFIELDS\"\n        }),\n        \"controlId\": sampleEditFieldId\n      });\n\n      if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n        if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n            }),\n            \"controlId\": subSampleFieldId\n          });\n        }\n\n        if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\"\n            }),\n            \"controlId\": subSampleEditFieldId\n          });\n        }\n      }\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGUNIQUE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; //console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \" btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 69\n      }\n    })), actionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: actionList,\n      Button: false,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      icon: faChevronCircleDown // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\n      ,\n      dynamicButton: value => this.actionMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 69\n      }\n    }) : \"\"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 65\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEMPLATE\",\n      message: \"Template\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 66\n      }\n    })), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 53\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 69\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 81\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 101\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / componentrow.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 109\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 113\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 117\n        }\n      }, componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 117\n        }\n      }, \"-\"))))) : /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 105\n        }\n      }, component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 105\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\")))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' || this.props.Login.operation === 'configureunique' || this.props.Login.operation === 'configureaudit' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 37\n        }\n      }) // : (this.props.Login.operation === 'configureaudit') ?\n      //   <ConfigureAuditFields\n      //       designData={this.props.Login.auditFieldDesignData || {}}\n      //       inputParam={this.props.Login.inputParam}\n      //       dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\n      //           this.props.Login.auditFieldDataResult || [] :\n      //           this.props.Login.auditFieldDataResult || {}}\n      //       selectedRecord={this.state.selectedRecord || {}}\n      //       onChangeToggle={this.onChangeToggle}\n      //       selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\n      //   />\n      : this.props.Login.operation === 'configureunique' ? /*#__PURE__*/React.createElement(ConfigureUniqueFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\n        //     this.props.Login.dataResult || [] :\n        //     this.props.Login.dataResult || {}}\n        ,\n        dataList: this.props.Login.dataList || [],\n        dataListCount: this.props.Login.dataListCount || [],\n        dataListsubsample: this.props.Login.dataListSubSample || [],\n        dataListCountsubsample: this.props.Login.dataListCountSubSample || [],\n        onInputOnChange: this.onInputOnChangeForUnique,\n        addCombinatonUnique: this.addCombinatonUnique,\n        deleteCombinationUnique: this.deleteCombinationUnique,\n        slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 41\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 47\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  auditFieldConfigService,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit,\n  combinationUniqueConfigService\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserLock","faClock","faList","faListUl","faListDots","faChevronCircleDown","falistUl","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","auditFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","combinationUniqueConfigService","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","convertDateValuetoString","constructOptionList","constructjsonOptionDefault","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","TemplateType","transactionStatus","templateMappingAction","AddSynonym","Affix","ConfirmMessage","ConfigureScreenFields","ConfigureEditFields","ConfigureUniqueFields","CustomPopover","faCaretDown","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","defaultregtype","defaultregsubtype","actionMethod","method","CONFIGSAMPLEDISPLAY","openFieldConfiguration","controlId","CONFIGSAMPLEEDIT","editFieldConfiguration","CONFIGSUBSAMPLEDISPLAY","CONFIGSUBSAMPLEEDIT","CONFIGUNIQUE","openCombinationUniqueFieldConfiguration","reloadData","searchRef","current","realRegTypeValue","realRegSubTypeValue","realSampleValue","nformcode","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","NA","onApproveClick","selectedDesignTemplateMapping","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","ncontrolcode","postParam","undefined","Value","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","operation","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","openModal","warn","intl","formatMessage","id","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","deleteCombinationUnique","index","eventKey","dataList","subsampledataList","dataListCount","subsampledataListCount","slice","addCombinatonUnique","designData","dataListSubSample","dataListCountSubSample","push","length","controlCode","screenName","designtemplatemapping","ndesigntemplatemappingcode","item","napprovalconfigcode","auditFieldConfiguration","validateEsign","sreason","selectedRecord","password","closeModal","selectedId","onComboChange","comboData","fieldName","setState","onConfigureComboChange","label","onInputOnChange","target","type","name","checked","YES","NO","onInputOnChangeForUnique","radiotext","multilinguallabel","LABEL","VALUE","handleDateChange","dateName","dateValue","getGridJsondata","templatedata","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","mastertemplatefields","map","row","children","column","component","hasOwnProperty","componentRow","unique","displayname","filterinputtype","comboDataInputObject","inputtype","source","valuemember","displaymember","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","table","jsondata","griditem","gridmoreitem","getJsondata","displayFields","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","samplecombinationunique","subsamplecombinationunique","testdatefields","nsubsampletemplatecode","readonly","PREREGISTER","child","childData","tablecolumnname","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","testListFields","SAMPLEREGISTRATION","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","MYJOBS","TESTWISEMYJOBS","onChangeToggle","dataItem","field","dataIndex","dataResult","splice","realData","findIndex","x","onSaveClick","formRef","jsondataobj","editFieldDesignData","formCodeArray","Object","keys","forEach","editableData","editableuntil","statusItem","dataListsubsample","nreactregtemplatecode","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sprimarykeyname","onTabChange","tabProps","isOpen","designtemplatemappingData","masterStatus","error","userLogged","Map","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","Layout","userStatusCSS","ACTIVE","APPROVED","addId","deleteId","approveId","sampleFieldId","sampleEditFieldId","subSampleFieldId","subSampleEditFieldId","combinationUniqueFieldId","actionList","indexOf","nneedsubsample","filterParam","fetchUrl","fecthInputObject","validationColumnList","mandatoryFields","breadCrumbData","addParam","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sregtemplatename","sversionno","stransdisplaystatus","smodulename","componentrow","approvedRegSubTypeVersion","editFieldDataResult","slanguagetypecode","showSynonym","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList, faListUl, faListDots, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\nimport { falistUl } from '@fortawesome/free-regular-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail,\r\n    getMappedFieldProps, editFieldConfigService,auditFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping,\r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList, constructjsonOptionDefault } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { designProperties, formCode, TemplateType, transactionStatus, templateMappingAction } from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\r\n//import ConfigureAuditFields from './ConfigureAuditFields';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }), value: 1, item: { nmastertypecode: 1, smastertype: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }) } },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }), value: 2, item: { nmastertypecode: 2, smastertype: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }) } }],\r\n            newMasterForm: { value: -2, label: \"-\" },\r\n            moduleTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMODULE\" }), value: 3 },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMODULE\" }), value: 4 }]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === TemplateType.Masters) {\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                masterTypeArray,\r\n                                defaultMasterType: masterTypeArray[0],\r\n                                qualisforms: [], defaultform: this.state.newMasterForm,\r\n                                nregtypecode: -1, nregsubtypecode: -1\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: TemplateType.Masters,\r\n                }\r\n\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...masterData, qualisforms: [], defaultform: this.state.newMasterForm } }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata\r\n\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\r\n            || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\r\n            userStatusCSS = \"outline-danger\";\r\n        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n        const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode\r\n        const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode\r\n        const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode\r\n        const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode\r\n        const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode\r\n\r\n\r\n        const actionList = [];\r\n        if(this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1){\r\n            actionList.push({\"method\": templateMappingAction.CONFIGSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" }), \"controlId\": sampleFieldId  })\r\n        }\r\n        if(this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters &&\r\n            this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1)\r\n        {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" }), \"controlId\": sampleEditFieldId })\r\n       \r\n            if(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true)\r\n            {\r\n                if(this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1){\r\n                    actionList.push({\"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" }), \"controlId\": subSampleFieldId  })\r\n                }\r\n           \r\n                if(this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1){\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" }), \"controlId\": subSampleEditFieldId })\r\n                }\r\n            }\r\n        }\r\n        if(this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1){\r\n            actionList.push({\"method\": templateMappingAction.CONFIGUNIQUE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" }), \"controlId\": combinationUniqueFieldId})\r\n        }\r\n       \r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\r\n                nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\r\n                nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\r\n                nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1,\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                },\r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            controlId: addId,\r\n            moduleTypeArray: this.state.moduleTypeArray\r\n        }\r\n\r\n       \r\n\r\n        //console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                   // data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openCombinationUniqueFieldConfiguration(combinationUniqueFieldId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                                                                                          \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.openFieldConfiguration(sampleFieldId, \"configure\")}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" })} />\r\n                                                                </Nav.Link>\r\n                                                             \r\n                                                                {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ?\r\n                                                                    <><Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleEditFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })}\r\n\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.editFieldConfiguration(sampleEditFieldId, 'configureedit')}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n\r\n\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(sampleFieldId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.auditFieldConfiguration(sampleFieldId, \"configureaudit\")}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                    {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true ?\r\n                                                                        <>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(subSampleFieldId) === -1}\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        onClick={() => this.openFieldConfiguration(subSampleFieldId, 'configuresubsample')}\r\n                                                                                    > \r\n                                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" })} />\r\n                                                                            </Nav.Link>\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(subSampleEditFieldId) === -1}\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    onClick={() => this.editFieldConfiguration(subSampleEditFieldId, 'configuresubsampleedit')}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" })} />\r\n                                                                                </Nav.Link>\r\n                                                                            </>\r\n                                                                            : \"\"}\r\n                                                                    </>\r\n                                                                    : \"\"} */}\r\n                                                                <Nav.Link className=\" btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                //    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                {actionList.length>0?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                       // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                \"\"}\r\n\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                    this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>   {this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Col>\r\n                                                        <Col md={6}>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                            </ReadOnlyText>\r\n\r\n                                                        </Col>\r\n                                                    </Row>}\r\n                                                <Card>\r\n                                                    <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\" /></Card.Header>\r\n                                                    <Card.Body>\r\n                                                        {\r\n                                                            Layout ?\r\n                                                                Layout.map((item) =>\r\n                                                                    <Row>\r\n                                                                        {item.children.length > 0 ?\r\n                                                                            item.children.map((column) =>\r\n                                                                                <Col md={12 / item.children.length}>\r\n                                                                                    {\r\n                                                                                        column.children.map((component) => {\r\n                                                                                            return (\r\n                                                                                                component.hasOwnProperty(\"children\") ?\r\n                                                                                                    <Row>\r\n                                                                                                        {component.children.map(componentrow =>\r\n                                                                                                            <Col md={12 / componentrow.length}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel>{componentrow.label}</FormLabel>\r\n                                                                                                                    <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                        )\r\n                                                                                                        }\r\n                                                                                                    </Row>\r\n                                                                                                    :\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel>{component.label}</FormLabel>\r\n                                                                                                        <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                            )\r\n                                                                                        })\r\n                                                                                    }\r\n\r\n                                                                                </Col>\r\n                                                                            )\r\n                                                                            : \"\"}\r\n                                                                    </Row>\r\n                                                                )\r\n                                                                :\r\n                                                                \"\"\r\n                                                        }\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        size={(this.props.Login.operation === 'configure'\r\n                            || this.props.Login.operation === 'configuresubsample') ? \"xl\" : \"lg\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n\r\n                        mandatoryFields={(this.props.Login.operation === 'configure' \r\n                                            || this.props.Login.operation === 'configuresubsample' \r\n                                            || this.props.Login.operation === 'configureedit'\r\n                                            || this.props.Login.operation === 'configuresubsampleedit'\r\n                                            || this.props.Login.operation === 'configureunique'\r\n                                            || this.props.Login.operation === 'configureaudit') ? [] : mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                <ConfigureScreenFields\r\n                                    operation={this.props.Login.operation}\r\n                                    designData={this.props.Login.designData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                        this.props.Login.dataResult || [] :\r\n                                        this.props.Login.dataResult || {}}\r\n                                    onChangeToggle={this.onChangeToggle}\r\n                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                    selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                />\r\n                                : (this.props.Login.operation === 'configureedit'\r\n                                    || this.props.Login.operation === 'configuresubsampleedit') ?\r\n                                    <ConfigureEditFields\r\n                                        designData={this.props.Login.editFieldDesignData || {}}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                            this.props.Login.editFieldDataResult || [] :\r\n                                            this.props.Login.editFieldDataResult || {}}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        // onChangeToggle={this.onChangeToggle}\r\n                                        onComboChange={this.onConfigureComboChange}\r\n                                        // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                        selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    />\r\n                                    // : (this.props.Login.operation === 'configureaudit') ?\r\n                                    //   <ConfigureAuditFields\r\n                                    //       designData={this.props.Login.auditFieldDesignData || {}}\r\n                                    //       inputParam={this.props.Login.inputParam}\r\n                                    //       dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                    //           this.props.Login.auditFieldDataResult || [] :\r\n                                    //           this.props.Login.auditFieldDataResult || {}}\r\n                                    //       selectedRecord={this.state.selectedRecord || {}}\r\n                                    //       onChangeToggle={this.onChangeToggle}\r\n                                    //       selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    //   />\r\n                                    : this.props.Login.operation === 'configureunique' ?\r\n                                        <ConfigureUniqueFields\r\n                                            designData={this.props.Login.designData || {}}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === TemplateType.Masters ?\r\n                                            //     this.props.Login.dataResult || [] :\r\n                                            //     this.props.Login.dataResult || {}}\r\n                                            dataList={this.props.Login.dataList || []}\r\n                                            dataListCount={this.props.Login.dataListCount || []}\r\n                                            dataListsubsample={this.props.Login.dataListSubSample || []}\r\n                                            dataListCountsubsample={this.props.Login.dataListCountSubSample || []}\r\n                                            onInputOnChange={this.onInputOnChangeForUnique}\r\n                                            addCombinatonUnique={this.addCombinatonUnique}\r\n                                            deleteCombinationUnique={this.deleteCombinationUnique}\r\n                                            slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                            approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                            selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                        />\r\n                                        :\r\n                                        this.state.showSynonym ?\r\n                                            <AddSynonym\r\n                                                selectedFieldRecord={this.state.selectedRecord}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                languages={this.props.Login.languageList || []}\r\n                                                fieldName=\"nmodulecode\"\r\n                                            />\r\n                                            : <AddDesignTemplateMapping\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                onComboChange={this.onComboChange}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                                subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                                selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                                operation={this.props.Login.operation}\r\n                                                userLogged={this.props.Login.userLogged}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                                language={this.props.Login.language}\r\n                                                moduleTypeArray={this.state.moduleTypeArray || []}\r\n\r\n                                            />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    actionMethod = (value) => {\r\n        if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, \"configure\");\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT){\r\n            this.editFieldConfiguration(value.controlId, 'configureedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY){\r\n            this.openFieldConfiguration(value.controlId, 'configuresubsample')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT){\r\n            this.editFieldConfiguration(value.controlId, 'configuresubsampleedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGUNIQUE){\r\n            this.openCombinationUniqueFieldConfiguration(value.controlId)\r\n        }\r\n    }\r\n\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === TemplateType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"approve\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"delete\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    deleteCombinationUnique = (index, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            let dataList = this.props.Login.subsampledataList || []\r\n            let dataListCount = this.props.Login.subsampledataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { subsampledataListCount: dataListCount, subsampledataList: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            let dataList = this.props.Login.dataList || []\r\n            let dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    addCombinatonUnique = (designData, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCountSubSample || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCountSubSample: dataListCount, dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    openCombinationUniqueFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configureunique';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.combinationUniqueConfigService(inputParam)\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    auditFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"TemplateType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.auditFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"approve\"\r\n                || this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null, dataList: [], dataListCount: [], dataListSubSample: [], dataListCountSubSample: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onConfigureComboChange = (comboData, formCode, item) => {\r\n        const fieldName = item.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    //console.log(\"component2:\", component);\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            // console.log(\"component row2:\", componentRow);\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": true,\r\n                                    \"predefinedconditionalString\": componentRow.valuemember + \" > 0 \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.valuemember,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        //console.log(\"component2:\", component);\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": true,\r\n                                \"predefinedconditionalString\": component.valuemember + \" > 0\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.label,\r\n                                // \"ismultilingual\": true,\r\n                                \"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.column.value,\r\n                                \"foriegntablename\": \"dynamicmaster\",\r\n                                ...comboDataInputObject\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                        }\r\n                        if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n                        // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] })\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique\r\n        }\r\n\r\n        // console.log(\"dynamiccolumns:\", jdynamiccolumns);\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        let displayFields = []\r\n        let listItem = []\r\n        let gridItem = []\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = []\r\n        let subsamplecombinationunique = []\r\n        // const staticSearchFields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\"];\r\n        // const sampleStaticFields = [\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Reg Date\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Дата регистрации\",\"tg-TG\":\"Санаи бақайдгирӣ\" }, \r\n        //       [designProperties.VALUE]: 'dregdate' },\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Ar No.\",\"Ko-KR\":\"Reg Date\",\"ru-RU\":\"Ар №\",\"tg-TG\":\"Ар №\" }, \r\n        //       [designProperties.VALUE]: 'sarno' },\r\n        //     { [designProperties.LABEL]: { \"en-US\": \"Transaction Status\",\"Ko-KR\":\"Transaction Status\",\"ru-RU\":\"Статус транзакции\",\"tg-TG\":\"Ҳолати транзаксия\" }, \r\n        //       [designProperties.VALUE]: 'stransdisplaystatus' }\r\n        //     ]\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n                            //subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\r\n\r\n                            subsampletemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (component.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                        }\r\n                        )\r\n                    } else {\r\n\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        // subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n                        subsampletemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        // let combinedField = [];\r\n                        component.children.map(componentRow => {\r\n                            // combinedField.push(componentRow.label)\r\n                            jdynamiccolumns.push({\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname\r\n                            })\r\n                            if (componentRow.hasOwnProperty('child')) {\r\n                                componentRow.child.map(childData => {\r\n                                    jnumericcolumns.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"foriegntablePK\": componentRow.label,\r\n                                        // \"ismultilingual\": true,\r\n                                        // \"conditionstring\": \" and nformcode in (140) \",\r\n                                        \"tablecolumnname\": childData.tablecolumnname,\r\n                                        \"foriegntablename\": \"dynamicmaster\"\r\n                                    })\r\n                                })\r\n                            }\r\n                            componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            samplesearchfields.push(componentRow.label)\r\n                            sampletemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                            }\r\n                            displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                if (componentRow.readonly)\r\n                                    editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                else\r\n                                    editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            }\r\n                            return null;\r\n                        })\r\n                        // let fieldSet = combinedField.join(\"&\")\r\n                        // displayFields.push(fieldSet);\r\n                        // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                        // gridMoreItem.push(fieldSet);\r\n                    } else {\r\n                        jdynamiccolumns.push({\r\n                            columnname: component.label,\r\n                            displayname: component.displayname\r\n                        });\r\n                        if (component.hasOwnProperty('child')) {\r\n                            component.child.map(childData => {\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"foriegntablePK\": component.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (140) \",\r\n                                    \"tablecolumnname\": childData.tablecolumnname,\r\n                                    \"foriegntablename\": \"dynamicmaster\"\r\n                                })\r\n                            })\r\n                        }\r\n                        component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        samplesearchfields.push(component.label)\r\n                        sampletemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.inputtype === 'date') {\r\n                            sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                        }\r\n                        displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        // component.templatemandatory \r\n                        //&& listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, mandatory: true })\r\n\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] })\r\n                        }\r\n                        else {\r\n                            // editable.push({ label: component.label, editableuntill: [17] })\r\n                            if (component.readonly)\r\n                                editable.push({ label: component.label, editableuntill: [] })\r\n                            else\r\n                                editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            }\r\n            )\r\n        )\r\n        displayFields.push({\r\n            [designProperties.LABEL]: { \"en-US\": \"Reg Date\", \"Ko-KR\": \"Reg Date\", \"ru-RU\": \"Дата регистрации\", \"tg-TG\": \"Санаи бақайдгирӣ\" },\r\n            [designProperties.VALUE]: 'dregdate'\r\n        });\r\n\r\n        //samplesearchfields.push(...staticSearchFields);\r\n\r\n        //console.log(\"reg sub type:\", this.props.Login);\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            // sampleuniquevalidation,\r\n            //  subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            ...this.props.Login.testListFields\r\n        }\r\n\r\n        // console.log(\"Template mapping obj:\", obj);\r\n        let jsondata = {\r\n\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields,\r\n            subsampletemplatefields,//: subsamplesearchfields,\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique\r\n            },\r\n            [formCode.RESULTENTRY]: {\r\n                ...obj,\r\n            },\r\n            [formCode.APPROVAL]: {\r\n                ...obj,\r\n            },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n            },\r\n            [formCode.MYJOBS]: {\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]: {\r\n                ...obj,\r\n            }\r\n\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (formCode === undefined) {\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else {\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                } else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n                }\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n                }\r\n            } else {\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n                }\r\n                dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { designData, dataResult }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //console.log(\"save:\", this.state.selectedRecord);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n\r\n\r\n        if (operation === 'configure' || operation === 'configuresubsample') {\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: this.props.Login.designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n        }\r\n        else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\r\n\r\n            let designData = this.props.Login.editFieldDesignData;\r\n            let formCodeArray = Object.keys(this.state.selectedRecord);\r\n\r\n            formCodeArray.forEach(formCode => {\r\n                const data = this.state.selectedRecord[formCode];                \r\n\r\n                let editableData =  designData[formCode]['sampleeditable'];;\r\n                if (operation === 'configuresubsampleedit') {\r\n                    editableData =  designData[formCode]['subsampleeditable'];;\r\n                }\r\n               \r\n                Object.keys(data).map(label=>{                    \r\n                    const editableuntil = [];\r\n                    data[label].map(statusItem =>\r\n                        editableuntil.push(statusItem.value)\r\n                    )\r\n                    const index = editableData.findIndex(item => item.label === label);\r\n                    if (index === -1) {\r\n                        editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                    }\r\n                    else {\r\n                        editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                    }\r\n                    //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                })\r\n\r\n            })\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else if (operation === 'configureunique') {\r\n            let designData = this.props.Login.designData;\r\n            //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n            const dataList = []\r\n            const dataListsubsample = []\r\n            this.props.Login.dataList.map(x => {\r\n                if (Object.keys(x).length !== 0) {\r\n                    dataList.push(x);\r\n                }\r\n            })\r\n            if (this.props.Login.masterData.realSampleValue.value === TemplateType.Masters) {\r\n                designData['mastercombinationunique'] = dataList\r\n            } else {\r\n                designData['samplecombinationunique'] = dataList\r\n                designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n                this.props.Login.dataListSubSample.map(x => {\r\n                    if (Object.keys(x).length !== 0) {\r\n                        dataListsubsample.push(x);\r\n                    }\r\n                })\r\n                designData['subsamplecombinationunique'] = dataListsubsample\r\n                designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n            }\r\n\r\n\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n\r\n            operation = 'configure';\r\n        }\r\n        else {\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ?\r\n                this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                : {}\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === TemplateType.Masters ? jsondata\r\n                    : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata),\r\n            }\r\n            inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                let qf_jsonData = { sdisplayname: {} };\r\n                let qbt_jsonData = { tablename: {} };\r\n\r\n                this.props.Login.languageList.map(lang => {\r\n                    qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                    qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                })\r\n\r\n                let qm_jsonData = { sdisplayname: {} };\r\n\r\n                let nmodulecode = 0;\r\n                let smoduledisplayname = \"\";\r\n                // if (typeof this.state.selectedRecord[\"nmodulecode\"].value === \"string\" )\r\n                // {\r\n                //     smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                //     this.props.Login.languageList.map(lang => {\r\n                //         qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                //     })\r\n                // }\r\n                // else{\r\n                //     nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                // }\r\n                if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\r\n                    smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                    })\r\n                }\r\n                else {\r\n                    nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                }\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.state.selectedRecord.sformname,\r\n                    nmodulecode,\r\n                    smoduledisplayname,\r\n                    qm_jsonData,\r\n                    qf_jsonData,\r\n                    qbt_jsonData,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n                }\r\n            }\r\n            // this.designtemplatemappingFieldList.map(item => {\r\n            //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n            // });\r\n        }\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData,auditFieldConfigService,\r\n    reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}