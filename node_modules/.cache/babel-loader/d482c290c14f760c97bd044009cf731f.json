{"ast":null,"code":"export function getSaveInputData(id, operation, Login, availableQBCategory, selectedRecord, selectedVersion, formRef, searchRef, dataState) {\n  let inputData = [];\n  let postParam = {\n    selectedObject: \"selectedchecklist\",\n    primaryKeyField: \"nchecklistcode\"\n  };\n  inputData[\"userinfo\"] = Login.userInfo;\n  let selectedId = null;\n\n  if (operation === \"update\") {\n    // edit\n    if (id === 'checklist') {\n      postParam = {\n        inputListName: \"checklist\",\n        selectedObject: \"selectedchecklist\",\n        primaryKeyField: \"nchecklistcode\",\n        primaryKeyValue: Login.masterData.selectedchecklist.nchecklistcode,\n        fetchUrl: \"checklist/getChecklistVersion\",\n        fecthInputObject: {\n          userinfo: Login.userInfo\n        }\n      };\n      inputData[\"checklist\"] = {\n        \"nchecklistcode\": selectedRecord.nchecklistcode,\n        \"schecklistname\": selectedRecord.schecklistname,\n        \"sdescription\": selectedRecord.sdescription ? selectedRecord.sdescription : \"\",\n        \"nsitecode\": Login.userInfo.nmastersitecode\n      };\n    } else {\n      selectedId = selectedRecord.nchecklistversionqbcode;\n      inputData[\"checklistversionqb\"] = {\n        nchecklistversionqbcode: selectedRecord.nchecklistversionqbcode,\n        nchecklistqbcategorycode: selectedRecord.nchecklistqbcategorycode,\n        nchecklistversioncode: selectedVersion.nchecklistversioncode,\n        nmandatoryfield: selectedRecord.nmandatoryfield,\n        nchecklistqbcode: selectedRecord.nchecklistqbcode\n      };\n    }\n  } else {\n    if (id === 'checklist') {\n      postParam = {\n        inputListName: \"checklist\",\n        selectedObject: \"selectedchecklist\",\n        primaryKeyField: \"nchecklistcode\"\n      };\n      inputData[\"checklist\"] = {\n        \"schecklistname\": selectedRecord.schecklistname,\n        \"sdescription\": selectedRecord.sdescription ? selectedRecord.sdescription : \"\",\n        \"nsitecode\": Login.userInfo.nmastersitecode\n      };\n    } else {\n      dataState = undefined;\n      let checklistversionqb = [];\n\n      if (selectedRecord) {\n        availableQBCategory.map(checklistQBCat => selectedRecord[checklistQBCat.label] ? selectedRecord[checklistQBCat.label].map(checklistQB => checklistversionqb.push({\n          nchecklistqbcategorycode: checklistQBCat.value,\n          nchecklistversioncode: selectedVersion.nchecklistversioncode,\n          nchecklistqbcode: checklistQB.value,\n          nmandatoryfield: checklistQB.item.nmandatory\n        })) : \"\");\n      }\n\n      inputData[\"checklistversionqb\"] = checklistversionqb;\n    }\n  }\n\n  const inputParam = {\n    methodUrl: id === 'checklist' ? \"Checklist\" : \"ChecklistVersionQB\",\n    classUrl: Login.inputParam.classUrl,\n    inputData: inputData,\n    operation: operation,\n    postParam,\n    formRef,\n    searchRef,\n    dataState,\n    selectedId,\n    displayName: id === 'checklist' ? Login.inputParam.displayName : \"IDS_CHECKLISTVERSIONQB\",\n    selectedRecord: { ...selectedRecord\n    }\n  };\n  return inputParam;\n}\nexport function versionCreate(selectedRecord, selectedChecklist, Login) {\n  let inputData = [];\n  let postParam = {\n    selectedObject: \"selectedchecklist\",\n    primaryKeyField: \"nchecklistcode\"\n  };\n  inputData[\"userinfo\"] = Login.userInfo; //add               \n\n  inputData[\"checklistversion\"] = {\n    \"nchecklistversioncode\": selectedRecord.nchecklistversioncode ? selectedRecord.nchecklistversioncode : 0,\n    \"nchecklistcode\": selectedChecklist.nchecklistcode,\n    \"schecklistversionname\": selectedRecord.schecklistversionname\n  };\n  const inputParam = {\n    methodUrl: \"ChecklistVersion\",\n    classUrl: Login.inputParam.classUrl,\n    inputData: inputData,\n    postParam,\n    operation: Login.operation,\n    selectedRecord: { ...selectedRecord\n    }\n  };\n  return inputParam;\n}\nexport function templateChangeHandler(flag, selectedStateRecord, event, control) {\n  if (flag === 1) {\n    //for Input Change Handle\n    const selectedRecord = selectedStateRecord || {}; //let lstQB=[] ;\n\n    let lsteditedQB = selectedRecord[\"editedQB\"] || [];\n    let temp = selectedRecord[control.nchecklistversionqbcode] ? -1 : lsteditedQB.push(control.nchecklistversionqbcode);\n\n    if (event.target.type === 'checkbox') {\n      //for Check box\n      let checkedValues = [];\n      checkedValues = selectedRecord[\"checkbox_\" + control.nchecklistversionqbcode] ? selectedRecord[\"checkbox_\" + control.nchecklistversionqbcode] : control.sdefaultvalue ? control.sdefaultvalue.split(\",\") : [];\n\n      if (event.currentTarget.checked) {\n        checkedValues.push(event.target.id);\n        selectedRecord[\"checkbox_\" + control.nchecklistversionqbcode] = checkedValues;\n        selectedRecord[control.nchecklistversionqbcode] = {\n          nchecklistversioncode: control.nchecklistversioncode,\n          nchecklistversionqbcode: control.nchecklistversionqbcode,\n          nchecklistqbcode: control.nchecklistqbcode,\n          sdefaultvalue: checkedValues.toString(),\n          jsondata: {\n            nchecklistversionqbcode: control.nchecklistversionqbcode,\n            sdefaultvalue: checkedValues.toString()\n          }\n        };\n        selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n          [control.nchecklistversionqbcode]: checkedValues.toString()\n        };\n        selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n      } else {\n        checkedValues.splice(checkedValues.indexOf(event.target.id), 1);\n        selectedRecord[\"checkbox_\" + control.nchecklistversionqbcode] = checkedValues;\n        selectedRecord[control.nchecklistversionqbcode] = {\n          nchecklistversioncode: control.nchecklistversioncode,\n          nchecklistversionqbcode: control.nchecklistversionqbcode,\n          nchecklistqbcode: control.nchecklistqbcode,\n          sdefaultvalue: checkedValues.toString(),\n          jsondata: {\n            nchecklistversionqbcode: control.nchecklistversionqbcode,\n            sdefaultvalue: checkedValues.toString()\n          }\n        };\n        selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n          [control.nchecklistversionqbcode]: checkedValues.toString()\n        };\n        selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n      }\n    } else if (event.target.type === 'radio') {\n      //For Radio\n      selectedRecord[control.nchecklistversionqbcode] = {\n        nchecklistversioncode: control.nchecklistversioncode,\n        nchecklistversionqbcode: control.nchecklistversionqbcode,\n        nchecklistqbcode: control.nchecklistqbcode,\n        sdefaultvalue: event.target.id,\n        jsondata: {\n          nchecklistversionqbcode: control.nchecklistversionqbcode,\n          sdefaultvalue: event.target.id\n        }\n      };\n      selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n        [control.nchecklistversionqbcode]: event.target.id\n      };\n      selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n    } else {\n      //for other inputs\n      selectedRecord[control.nchecklistversionqbcode] = {\n        nchecklistversioncode: control.nchecklistversioncode,\n        nchecklistversionqbcode: control.nchecklistversionqbcode,\n        nchecklistqbcode: control.nchecklistqbcode,\n        sdefaultvalue: event.target.value,\n        jsondata: {\n          nchecklistversionqbcode: control.nchecklistversionqbcode,\n          sdefaultvalue: event.target.value\n        }\n      };\n      selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n        [control.nchecklistversionqbcode]: event.target.value\n      };\n      selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n    }\n\n    return selectedRecord;\n  } else if (flag === 3) {\n    const selectedRecord = selectedStateRecord || {};\n    let lsteditedQB = selectedRecord[\"editedQB\"] || [];\n    let temp = selectedRecord[control.nchecklistversionqbcode] ? -1 : lsteditedQB.push(control.nchecklistversionqbcode);\n    selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n    selectedRecord[control.nchecklistversionqbcode] = {\n      nchecklistversioncode: control.nchecklistversioncode,\n      nchecklistversionqbcode: control.nchecklistversionqbcode,\n      nchecklistqbcode: control.nchecklistqbcode,\n      sdefaultvalue: event\n    };\n    return selectedRecord;\n  } else {\n    //for combo change handle\n    const selectedRecord = selectedStateRecord || {};\n    let lsteditedQB = selectedRecord[\"editedQB\"] || [];\n    let temp = selectedRecord[control.nchecklistversionqbcode] ? -1 : lsteditedQB.push(control.nchecklistversionqbcode);\n    selectedRecord[\"editedQB\"] = temp !== -1 ? lsteditedQB : selectedRecord[\"editedQB\"];\n\n    if (event) {\n      //if combo has value\n      selectedRecord[control.nchecklistversionqbcode] = {\n        nchecklistversioncode: control.nchecklistversioncode,\n        nchecklistversionqbcode: control.nchecklistversionqbcode,\n        nchecklistqbcode: control.nchecklistqbcode,\n        sdefaultvalue: event.label\n      };\n    } else {\n      //if combo does not have\n      selectedRecord[control.nchecklistversionqbcode] = {\n        nchecklistversioncode: control.nchecklistversioncode,\n        nchecklistversionqbcode: control.nchecklistversionqbcode,\n        nchecklistqbcode: control.nchecklistqbcode,\n        sdefaultvalue: \"\"\n      };\n    }\n\n    return selectedRecord;\n  }\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/checklist/checklist/checklistMethods.js"],"names":["getSaveInputData","id","operation","Login","availableQBCategory","selectedRecord","selectedVersion","formRef","searchRef","dataState","inputData","postParam","selectedObject","primaryKeyField","userInfo","selectedId","inputListName","primaryKeyValue","masterData","selectedchecklist","nchecklistcode","fetchUrl","fecthInputObject","userinfo","schecklistname","sdescription","nmastersitecode","nchecklistversionqbcode","nchecklistqbcategorycode","nchecklistversioncode","nmandatoryfield","nchecklistqbcode","undefined","checklistversionqb","map","checklistQBCat","label","checklistQB","push","value","item","nmandatory","inputParam","methodUrl","classUrl","displayName","versionCreate","selectedChecklist","schecklistversionname","templateChangeHandler","flag","selectedStateRecord","event","control","lsteditedQB","temp","target","type","checkedValues","sdefaultvalue","split","currentTarget","checked","toString","jsondata","splice","indexOf"],"mappings":"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","sourcesContent":["export function getSaveInputData(id,operation,Login,availableQBCategory,selectedRecord,selectedVersion,formRef,searchRef,dataState){\r\n    let inputData = [];\r\n    let postParam={ selectedObject : \"selectedchecklist\", primaryKeyField : \"nchecklistcode\" };\r\n    inputData[\"userinfo\"] = Login.userInfo;\r\n    let selectedId=null;\r\n    if ( operation === \"update\"){\r\n        // edit\r\n        \r\n        if(id==='checklist'){\r\n            postParam = { inputListName : \"checklist\", selectedObject : \"selectedchecklist\",\r\n                        primaryKeyField : \"nchecklistcode\", \r\n                        primaryKeyValue : Login.masterData.selectedchecklist.nchecklistcode,\r\n                        fetchUrl : \"checklist/getChecklistVersion\",\r\n                        fecthInputObject : {userinfo:Login.userInfo}\r\n                    }\r\n            inputData[\"checklist\"] = {\r\n                \"nchecklistcode\":selectedRecord.nchecklistcode,\r\n                \"schecklistname\":selectedRecord.schecklistname,\r\n                \"sdescription\":selectedRecord.sdescription?selectedRecord.sdescription:\"\",\r\n                \"nsitecode\":Login.userInfo.nmastersitecode\r\n            }  \r\n        }else{\r\n            selectedId=selectedRecord.nchecklistversionqbcode\r\n            inputData[\"checklistversionqb\"]={\r\n                nchecklistversionqbcode:selectedRecord.nchecklistversionqbcode,\r\n                nchecklistqbcategorycode: selectedRecord.nchecklistqbcategorycode,\r\n                nchecklistversioncode: selectedVersion.nchecklistversioncode,\r\n                nmandatoryfield:selectedRecord.nmandatoryfield,\r\n                nchecklistqbcode:selectedRecord.nchecklistqbcode,\r\n            }\r\n        }\r\n    } else{\r\n\r\n        if(id==='checklist'){\r\n            postParam = { inputListName:\"checklist\",selectedObject : \"selectedchecklist\", primaryKeyField : \"nchecklistcode\" }\r\n            inputData[\"checklist\"] = {\r\n                \"schecklistname\":selectedRecord.schecklistname,\r\n                \"sdescription\":selectedRecord.sdescription?selectedRecord.sdescription:\"\",\r\n                \"nsitecode\":Login.userInfo.nmastersitecode\r\n            } \r\n        }else{\r\n            dataState=undefined;\r\n            let checklistversionqb=[];\r\n            if(selectedRecord){\r\n                availableQBCategory.map(checklistQBCat=>\r\n                    selectedRecord[checklistQBCat.label]?selectedRecord[checklistQBCat.label].map(checklistQB=>\r\n                        checklistversionqb.push({\r\n                            nchecklistqbcategorycode:checklistQBCat.value,\r\n                            nchecklistversioncode: selectedVersion.nchecklistversioncode,\r\n                            nchecklistqbcode:checklistQB.value,\r\n                            nmandatoryfield:checklistQB.item.nmandatory\r\n                    \r\n                })):\"\")\r\n            }\r\n            inputData[\"checklistversionqb\"]=checklistversionqb\r\n        }\r\n    }           \r\n    const inputParam = {\r\n        methodUrl:id==='checklist'?\"Checklist\":\"ChecklistVersionQB\",\r\n        classUrl: Login.inputParam.classUrl,\r\n        inputData: inputData,\r\n        operation: operation ,\r\n        postParam,formRef,searchRef,dataState,selectedId,\r\n        displayName:id==='checklist'?Login.inputParam.displayName:\"IDS_CHECKLISTVERSIONQB\",\r\n        selectedRecord: {...selectedRecord}     \r\n    }\r\n    return inputParam;\r\n}\r\nexport function versionCreate(selectedRecord,selectedChecklist,Login){\r\n    let inputData = [];\r\n    let postParam={ selectedObject : \"selectedchecklist\", primaryKeyField : \"nchecklistcode\" };\r\n    inputData[\"userinfo\"] = Login.userInfo;\r\n        //add               \r\n        inputData[\"checklistversion\"] = {\r\n            \"nchecklistversioncode\":selectedRecord.nchecklistversioncode?selectedRecord.nchecklistversioncode:0,\r\n            \"nchecklistcode\":selectedChecklist.nchecklistcode,\r\n            \"schecklistversionname\":selectedRecord.schecklistversionname\r\n        }                 \r\n    const inputParam = {\r\n        methodUrl: \"ChecklistVersion\",\r\n        classUrl: Login.inputParam.classUrl,\r\n        inputData: inputData,postParam,\r\n        operation: Login.operation,\r\n        selectedRecord: {...selectedRecord}      \r\n    }\r\n    return inputParam;\r\n}\r\n\r\nexport function templateChangeHandler(flag,selectedStateRecord,event,control){\r\n\r\n    if(flag===1){//for Input Change Handle\r\n        const selectedRecord = selectedStateRecord || {};\r\n        //let lstQB=[] ;\r\n        let lsteditedQB=selectedRecord[\"editedQB\"]||[]\r\n        let temp=selectedRecord[control.nchecklistversionqbcode]?-1:lsteditedQB.push(control.nchecklistversionqbcode)\r\n       \r\n        if (event.target.type === 'checkbox')\r\n        {//for Check box\r\n            let checkedValues=[];\r\n            checkedValues=selectedRecord[\"checkbox_\"+control.nchecklistversionqbcode]?selectedRecord[\"checkbox_\"+control.nchecklistversionqbcode]:\r\n                                control.sdefaultvalue?control.sdefaultvalue.split(\",\"):[];\r\n            if(event.currentTarget.checked){\r\n                checkedValues.push(event.target.id)\r\n                selectedRecord[\"checkbox_\"+control.nchecklistversionqbcode]=checkedValues\r\n                selectedRecord[control.nchecklistversionqbcode] = {\r\n                    nchecklistversioncode:control.nchecklistversioncode,\r\n                    nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                    nchecklistqbcode:control.nchecklistqbcode,\r\n                    sdefaultvalue: checkedValues.toString(),\r\n                    jsondata:{ nchecklistversionqbcode:control.nchecklistversionqbcode,sdefaultvalue:checkedValues.toString()},\r\n                };\r\n                selectedRecord['jsondata']={\r\n                    ...selectedRecord['jsondata'],\r\n                    [control.nchecklistversionqbcode]:checkedValues.toString()\r\n                }\r\n                selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n            }else{\r\n                checkedValues.splice(checkedValues.indexOf(event.target.id),1)\r\n                selectedRecord[\"checkbox_\"+control.nchecklistversionqbcode]=checkedValues\r\n                selectedRecord[control.nchecklistversionqbcode] = {\r\n                    nchecklistversioncode:control.nchecklistversioncode,\r\n                    nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                    nchecklistqbcode:control.nchecklistqbcode,\r\n                    sdefaultvalue: checkedValues.toString(),\r\n                    jsondata:{ nchecklistversionqbcode:control.nchecklistversionqbcode,sdefaultvalue:checkedValues.toString()},\r\n                };\r\n                selectedRecord['jsondata']={\r\n                    ...selectedRecord['jsondata'],\r\n                    [control.nchecklistversionqbcode]:checkedValues.toString()\r\n                }\r\n                selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n                \r\n            }\r\n            \r\n        }else if(event.target.type === 'radio'){//For Radio\r\n            selectedRecord[control.nchecklistversionqbcode] = {\r\n                nchecklistversioncode:control.nchecklistversioncode,\r\n                nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                nchecklistqbcode:control.nchecklistqbcode,\r\n                sdefaultvalue: event.target.id,\r\n                jsondata:{ nchecklistversionqbcode:control.nchecklistversionqbcode,sdefaultvalue:event.target.id},\r\n            };\r\n            selectedRecord['jsondata']={\r\n                ...selectedRecord['jsondata'],\r\n                [control.nchecklistversionqbcode]:event.target.id\r\n            }\r\n            selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n        }\r\n        else{\r\n            //for other inputs\r\n            selectedRecord[control.nchecklistversionqbcode] = {\r\n                nchecklistversioncode:control.nchecklistversioncode,\r\n                nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                nchecklistqbcode:control.nchecklistqbcode,\r\n                sdefaultvalue:event.target.value,\r\n                jsondata:{ nchecklistversionqbcode:control.nchecklistversionqbcode,sdefaultvalue:event.target.value},\r\n               \r\n            };\r\n            selectedRecord['jsondata']={\r\n                ...selectedRecord['jsondata'],\r\n                [control.nchecklistversionqbcode]:event.target.value\r\n            }\r\n            selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n        }\r\n        return selectedRecord;\r\n    }else if(flag===3){\r\n        const selectedRecord = selectedStateRecord || {};\r\n        let lsteditedQB=selectedRecord[\"editedQB\"]||[]\r\n        let temp=selectedRecord[control.nchecklistversionqbcode]?-1:lsteditedQB.push(control.nchecklistversionqbcode)\r\n        selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n        selectedRecord[control.nchecklistversionqbcode] = {\r\n            nchecklistversioncode:control.nchecklistversioncode,\r\n            nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n            nchecklistqbcode:control.nchecklistqbcode,\r\n            sdefaultvalue: event\r\n            \r\n        };\r\n        return selectedRecord;\r\n    }else{//for combo change handle\r\n        const selectedRecord = selectedStateRecord || {};\r\n        let lsteditedQB=selectedRecord[\"editedQB\"]||[]\r\n        let temp=selectedRecord[control.nchecklistversionqbcode]?-1:\r\n                                    lsteditedQB.push(control.nchecklistversionqbcode)\r\n        selectedRecord[\"editedQB\"]=temp!==-1?lsteditedQB:selectedRecord[\"editedQB\"]\r\n        if(event){//if combo has value\r\n            selectedRecord[control.nchecklistversionqbcode] = {\r\n                nchecklistversioncode:control.nchecklistversioncode,\r\n                nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                nchecklistqbcode:control.nchecklistqbcode,\r\n                sdefaultvalue: event.label\r\n                \r\n            };\r\n            \r\n        }else{//if combo does not have\r\n            selectedRecord[control.nchecklistversionqbcode] = {\r\n                nchecklistversioncode:control.nchecklistversioncode,\r\n                nchecklistversionqbcode:control.nchecklistversionqbcode,\r\n                nchecklistqbcode:control.nchecklistqbcode,\r\n                sdefaultvalue: \"\"\r\n            };\r\n        }\r\n        return selectedRecord;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}