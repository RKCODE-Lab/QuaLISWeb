{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function getProductComboService(productParam) {\n  return function (dispatch) {\n    const productCategoryService = rsapi.post(\"/productcategory/getProductCategory\", {\n      userinfo: productParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (productParam.operation === \"create\") {\n      urlArray = [productCategoryService];\n    } else {\n      const url = productParam.inputParam.classUrl + \"/getActive\" + productParam.inputParam.methodUrl + \"ById\"; //\"product/getActiveproductById\"      \n\n      const productById = rsapi.post(url, {\n        [productParam.primaryKeyField]: productParam.primaryKeyValue,\n        \"userinfo\": productParam.userInfo\n      });\n      urlArray = [productCategoryService, productById];\n      selectedId = productParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const productCatMap = constructOptionList(response[0].data || [], \"nproductcatcode\", \"sproductcatname\", undefined, undefined, true);\n      const productCategoryList = productCatMap.get(\"OptionList\");\n\n      if (productParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"nproductcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \"nproductcatcode\", \"sproductcatname\");\n      } else {\n        const productCatdefault = productCatMap.get(\"DefaultValue\");\n        selectedRecord[\"nproductcatcode\"] = productCatdefault;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          productCategoryList,\n          //:response[0].data || [],                               \n          operation: productParam.operation,\n          screenName: productParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: productParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ProductAction.js"],"names":["rsapi","Axios","toast","getComboLabelValue","constructOptionList","DEFAULT_RETURN","initRequest","getProductComboService","productParam","dispatch","productCategoryService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","productById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","productCatMap","data","undefined","productCategoryList","get","productCatdefault","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    getComboLabelValue,\r\n    constructOptionList\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\n\r\nexport function getProductComboService (productParam) {            \r\n    return function (dispatch) {   \r\n    const productCategoryService = rsapi.post(\"/productcategory/getProductCategory\", \r\n                                    {userinfo:productParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (productParam.operation === \"create\"){\r\n        urlArray = [productCategoryService];\r\n    }\r\n    else{           \r\n        const url = productParam.inputParam.classUrl+ \"/getActive\" + productParam.inputParam.methodUrl + \"ById\";   //\"product/getActiveproductById\"      \r\n        const productById =  rsapi.post(url, { [productParam.primaryKeyField] :productParam.primaryKeyValue, \"userinfo\": productParam.userInfo} );\r\n        urlArray = [productCategoryService, productById];\r\n        selectedId = productParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const productCatMap = constructOptionList(response[0].data || [], \"nproductcatcode\",\r\n                                \"sproductcatname\", undefined, undefined, true);\r\n            const productCategoryList = productCatMap.get(\"OptionList\");\r\n           \r\n           \r\n            \r\n            if (productParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nproductcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \r\n                    \"nproductcatcode\", \"sproductcatname\");                   \r\n            }\r\n           else\r\n           {\r\n \t\t\tconst  productCatdefault  = productCatMap.get(\"DefaultValue\");\r\n            selectedRecord[\"nproductcatcode\"] = productCatdefault; \r\n           }\r\n            dispatch({type: DEFAULT_RETURN, payload:{productCategoryList,//:response[0].data || [],                               \r\n                        operation:productParam.operation, screenName:productParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:productParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}