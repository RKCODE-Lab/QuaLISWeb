{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\PreRegDesignPopUp.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport device from 'current-device'; // import MoreOptions from '../../components/configureui/MoreOptions';\n\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData } from '../../actions/index';\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign } from '../../components/CommonScript';\nimport AlertModal from './AlertModal';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\nimport { InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate } from './DefaultTemplates';\nimport { ReactComponents } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegDesignPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateDynamicDesign = () => {\n      let valid = this.validateTemplate(this.state.design);\n\n      if (!valid) {\n        return null;\n      } else {\n        this.setState({\n          openAlertModal: true,\n          templateName: \"\"\n        });\n      }\n    };\n\n    this.showPropFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: !this.state.showFilter\n        }\n      };\n      this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n    };\n\n    this.hidePropFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n    };\n\n    this.setLayout = (design, splitDropZonePath, remove, removeChild) => {\n      let selectedFieldRecord = {};\n\n      if (remove === undefined) {\n        selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"));\n      } else if (removeChild) {\n        let childRecord = {};\n        this.state.toBeDeleted.deleteComponent.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n      }\n\n      design = this.updatePath(design); // if (selectedFieldRecord.child) {\n      //     let childRecord = {}\n      //     selectedFieldRecord.child.map(myChild => {\n      //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\n      //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\n      //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\n      //         return null;\n      //     })\n      // }\n      // if (selectedFieldRecord.childValue) {\n      //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n      //     let newChildData = []\n      //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\n      //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\n      //         newChildData.push(child))\n      //     parentData = { ...parentData, child: newChildData };\n      //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\n      // }\n\n      const components = this.getComponents(design).components;\n      let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n      this.setState({\n        showConfirmAlert: false,\n        toBeDeleted: {},\n        design,\n        selectedFieldRecord: selectedFieldRecord,\n        components,\n        validComponents,\n        selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath\n      });\n    };\n\n    this.updatePath = design => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.inputtype !== 'radio') {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            } else {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            }\n          });\n        } else {\n          if (componnetrow.inputtype !== 'radio') {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          } else {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateDelete = (design, splitDropZonePath) => {\n      const path = splitDropZonePath.split(\"-\");\n      let showAlert = false;\n      let toBeDeleted = {}; // let component = {}\n      // let row = this.state.design[path[0]]\n      // let column = row.children[path[1]]\n      // let compRow = column.children[path[2]]\n      // if (compRow.type === 'componentrow')\n      //     component = compRow.children[path[3]]\n      // else\n      //     component = compRow\n\n      let component = getcomponentdata(this.state.design, path);\n\n      if (component.child && component.child.length > 0) {\n        let childRecord = {};\n\n        if (component.inputtype === 'radio') {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            delete childRecord[\"radioparentLabel\"];\n            delete childRecord[\"selectedrecordbasedhide\"];\n            delete childRecord[\"recordbasedhide\"];\n            delete childRecord[\"radioparent\"];\n            delete childRecord[\"radioparentPath\"];\n            delete childRecord[\"recordbasedshowhide\"];\n            delete childRecord[\"recordbasedreadonly\"];\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        } else {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            childRecord['childValue'] = undefined;\n            childRecord['parentPath'] = undefined;\n            childRecord['valuecolumn'] = undefined;\n\n            if (myChild.componentcode !== ReactComponents.COMBO) {\n              childRecord['column'] = undefined;\n            }\n\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        }\n\n        showAlert = true;\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        }; // this.showAlert(true, toBeDeleted);\n      }\n\n      if (component.childValue) {\n        let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (component.radioparent) {\n        let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (showAlert) {\n        this.showAlert(true, toBeDeleted);\n      } else {\n        this.setLayout(design, splitDropZonePath, true);\n      }\n    };\n\n    this.confirmAlert = () => {\n      this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.intl.formatMessage({\n        id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true), undefined, () => this.showAlert(false));\n    };\n\n    this.showAlert = (bool, toBeDeleted) => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showConfirmAlert: bool, toBeDeleted }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showConfirmAlert: bool,\n        toBeDeleted\n      });\n    };\n\n    this.onclickcomponent = (event, data, path) => {\n      const selectedFieldRecord = { ...data\n      };\n      const obj = this.getComponents(this.state.design); //console.log(\"obj:\", obj);\n\n      const components = obj.components;\n      let dateComponents = obj.dateComponents;\n\n      if (data.inputtype === \"date\") {\n        const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\n        dateComponents = filterDataComponents;\n      }\n\n      let componentData = {\n        components,\n        selectedComponentpath: path\n      };\n      let parentRadioValue = [];\n\n      if ((selectedFieldRecord.componentcode === ReactComponents.COMBO || selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) && selectedFieldRecord.source !== undefined && (this.props.Login.columnInfo === undefined || this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\n        this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n      } else {\n        const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n        let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\n        let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.radioparentPath) {\n            let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        } else {\n          if (selectedFieldRecord.radioparentPath) {\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.hasOwnProperty('child')) {\n                oldParentData.child.map(item => {\n                  if (item.label === selectedFieldRecord.label) {\n                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                      return {\n                        value: item.id,\n                        label: item.text,\n                        item\n                      };\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\n            tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\n            filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\n            this.setState({\n              selectedComponentpath: path,\n              selectedFieldRecord: selectedFieldRecord,\n              components,\n              tableColumn,\n              filterColumns,\n              validComponents,\n              parentRadioValue,\n              showFilter: false\n            });\n          } else {\n            if (selectedFieldRecord.childValue) {\n              this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n            } else {\n              this.setState({\n                selectedComponentpath: path,\n                selectedFieldRecord: selectedFieldRecord,\n                components,\n                tableColumn,\n                filterColumns,\n                dateComponents,\n                validComponents,\n                parentRadioValue,\n                showFilter: false\n              });\n            }\n          }\n        } else {\n          this.setState({\n            selectedComponentpath: path,\n            selectedFieldRecord: selectedFieldRecord,\n            components,\n            tableColumn,\n            filterColumns,\n            dateComponents,\n            validComponents,\n            parentRadioValue,\n            showFilter: false\n          });\n        }\n      }\n    };\n\n    this.getComponents = design => {\n      let components = [];\n      let dateComponents = [{\n        label: \"Current Date\",\n        value: \"utccurrentdate\"\n      }];\n      design.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label\n                });\n                componnetrow.label && components.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label,\n                  // item: componnetrow,\n                  inputtype: componnetrow.inputtype,\n                  source: componnetrow.source,\n                  nquerybuildertablecode: componnetrow.nquerybuildertablecode,\n                  child: componnetrow.child,\n                  valuemember: componnetrow.valuemember,\n                  path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\n                });\n              });\n            } else {\n              componnet.inputtype === 'date' && componnet.label && dateComponents.push({\n                label: componnet.label,\n                value: componnet.label\n              });\n              componnet.label && components.push({\n                label: componnet.label,\n                value: componnet.label,\n                // item: componnet,\n                inputtype: componnet.inputtype,\n                source: componnet.source,\n                nquerybuildertablecode: componnet.nquerybuildertablecode,\n                child: componnet.child,\n                valuemember: componnet.valuemember,\n                path: `${rowIndex}-${columnIndex}-${compindex}-0`\n              });\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n      return {\n        components,\n        dateComponents\n      };\n    };\n\n    this.getValueMembers = selectedFieldRecord => {\n      if (selectedFieldRecord.childValue) {\n        let valueColumn = [];\n        this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\n          if (x.foriegntablename === selectedFieldRecord.childValue.source) valueColumn.push({\n            label: x.displayname[this.props.Login.userInfo.language],\n            value: x.tablecolumnname\n          });\n          return null;\n        });\n\n        if (valueColumn.length) {\n          return valueColumn;\n        } else {\n          this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\n            if (x.foriegntablename === selectedFieldRecord.source) valueColumn.push({\n              label: x.displayname[this.props.Login.userInfo.language],\n              value: x.tablecolumnname\n            });\n            return null;\n          });\n          return valueColumn;\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\n          let design = this.state.design;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n\n          if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\n            // let design = this.state.design\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData);\n              }\n\n              delete selectedFieldRecord[\"radioparentLabel\"];\n              delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n              delete selectedFieldRecord[\"recordbasedhide\"];\n              delete selectedFieldRecord[\"radioparent\"];\n            }\n\n            selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\n          if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\n            selectedFieldRecord['loadcurrentdate'] = false;\n          } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\n            selectedFieldRecord['loadselecteddate'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === \"unique\") {\n          //     const design = this.state.design\n          //  let listUnique=[]\n          //  if(event.target.checked){\n          //     design && design.map(row => {\n          //         return  row.children.map(column => {\n          //              return column.children.map(component => {\n          //                   if (component.hasOwnProperty(\"children\")) {\n          //                      return component.children.map(componentrow => {\n          //                        if(componentrow.unique){\n          //                         listUnique.push(componentrow.unique)\n          //                        }\n          //                       }) \n          //                   }\n          //                   else {\n          //                     if(component.unique){\n          //                         listUnique.push(component.unique)\n          //                     }\n          //                   }\n          //               }\n          //               )\n          //           })\n          //       })   \n          //     }\n          //       if(listUnique.length===0){\n          //         selectedFieldRecord[event.target.name] = event.target.checked;\n          //         this.saveComponentProperties(selectedFieldRecord)\n          //       }else{\n          //           toast.info(\"Unique Must Be One Field\")\n          //           selectedFieldRecord[event.target.name] = false;\n          //         this.saveComponentProperties(selectedFieldRecord)\n          //         //  this.setState({design})\n          //       }\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else {\n          if (event.target.name === 'timeonly') {\n            selectedFieldRecord['dateonly'] = false;\n          }\n\n          if (event.target.name === 'dateonly') {\n            selectedFieldRecord['timeonly'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        }\n      } else {\n        if (name === 'synonym') {\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n        }\n\n        if (event.target.name === 'label') {\n          const langArray = this.props.Login.languageList;\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            ...langDataObject\n          };\n          selectedFieldRecord[event.target.name] = event.target.value;\n        } else {\n          selectedFieldRecord[event.target.name] = event.target.value;\n        }\n\n        this.saveComponentProperties(selectedFieldRecord);\n      }\n    };\n\n    this.onNumericInputChange = (event, columnname) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      let value = event.target.value;\n\n      if (!isNaN(value)) {\n        // if (parseInt(value) < 10) {\n        selectedFieldRecord[event.target.name] = value;\n        this.saveComponentProperties(selectedFieldRecord); // }\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord[dateName] = dateValue;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n\n      if (selectedFieldRecord.label) {\n        if (comboName === 'table') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['source'] = comboData.item.stablename;\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode;\n          }\n\n          selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              validComponents: this.state.validComponents\n            });\n          } else {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo);\n          }\n        } else if (comboName === 'column') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['displaymember'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'childValue') {\n          if (comboData) {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n            }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['childValue'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              selectedFieldRecord['parentLabel'] = comboData.label;\n            }\n\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              let parentRadioValue = this.state.parentRadioValue || [];\n              parentRadioValue = parentData.radioOptions.tags.map(item => {\n                return {\n                  value: item.id,\n                  label: item.text,\n                  item\n                };\n              });\n              this.setState({\n                design,\n                selectedFieldRecord,\n                parentRadioValue\n              });\n            } else {\n              this.props.getTableColumns(design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n                components: this.state.components,\n                selectedComponentpath: this.state.selectedComponentpath\n              }, true);\n            }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['childValue'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['column'] = comboData;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === 'valuecolumn') {\n          selectedFieldRecord['valuecolumn'] = comboData;\n          let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n          let newChildData = [];\n          parentData.child.map(child => {\n            if (child.label === selectedFieldRecord.label) {\n              newChildData.push({ ...child,\n                tablecolumnname: comboData.value\n              });\n            } else {\n              newChildData.push(child);\n            }\n\n            return null;\n          });\n          parentData = { ...parentData,\n            child: newChildData\n          };\n          let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'filtercolumn') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord.filtervalue = \"\";\n          selectedFieldRecord.staticfiltervalue = \"\";\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (comboData.type !== 'numeric') {\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          } else {\n            this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              components: this.state.components,\n              selectedComponentpath: this.state.selectedComponentpath\n            }, true);\n          }\n        } else if (comboName === 'customsearchfilter') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['filterfields'] = [];\n          this.state.selectedFieldRecord[comboName].map(data => {\n            return selectedFieldRecord['filterfields'].push(data.item['item'] ? {\n              type: data.type,\n              ...data.item['item']\n            } : data.item);\n          });\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'selectedrecordbasedhide') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['recordbasedhide'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'radioparent') {\n          if (comboData) {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['radioparent'] = comboData;\n            selectedFieldRecord['radioparentPath'] = comboData.path;\n            selectedFieldRecord['radioparentLabel'] = comboData.label;\n            delete selectedFieldRecord['recordbasedhide'];\n            delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n            let parentRadioValue = this.state.parentRadioValue || [];\n            parentRadioValue = parentData.radioOptions && parentData.radioOptions.tags.map(item => {\n              return {\n                value: item.id,\n                label: item.text,\n                item\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              parentRadioValue\n            });\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), parentData);\n            selectedFieldRecord['radioparent'] = comboData;\n            selectedFieldRecord['selectedrecordbasedhide'] = comboData;\n            delete selectedFieldRecord['recordbasedhide'];\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === \"period\") {\n          if (comboData) {\n            selectedFieldRecord[comboName] = comboData;\n            selectedFieldRecord['nperiodcode'] = comboData.value;\n            selectedFieldRecord['nperioddata'] = comboData.item.ndata;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          } else {\n            selectedFieldRecord[comboName] = comboData;\n            delete selectedFieldRecord['nperiodcode'];\n            delete selectedFieldRecord['nperioddata'];\n            delete selectedFieldRecord['windowperiod'];\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          }\n        } else if (comboName === \"staticfiltertable\") {\n          if (comboData) {\n            selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            const list = JSON.parse(comboData.item.jsondata.value).jcolumnname;\n            const staticfiltercolumn = list.map(x => {\n              // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\n              return {\n                label: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                value: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                item: x\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn\n            });\n          } else {\n            selectedFieldRecord[comboName] = comboData;\n            delete selectedFieldRecord['staticfiltercolumn'];\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn: []\n            });\n          }\n        } else {\n          selectedFieldRecord[comboName] = comboData;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERLABEL\"\n        }));\n      }\n    };\n\n    this.addTag = tags => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord['radioOptions'] = tags;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.addCondition = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n      let filterValue;\n      let conditionString;\n      let conditionArrayString;\n      let selectedStaticfiltertable = {};\n\n      if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])) {\n        selectedStaticfiltertable = JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value);\n\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like 'P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\" + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n          // case condition.CONTAINS:\n          //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n          // case condition.NOTCONTAINS:\n          //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          staticfiltertable: \"\",\n          nsystemconfiguration: false,\n          conditionArrayUI,\n          conditionArraySQL,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\n              filterValue = selectedFieldRecord.filtervalue;\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n\n          case condition.CONTAINS:\n            conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          case condition.NOTCONTAINS:\n            conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          conditionArrayUI,\n          conditionArraySQL,\n          nsystemconfiguration: false,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord,\n        staticfiltercolumn: \"\"\n      });\n    };\n\n    this.deleteCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\n      let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\n      conditionArrayUI.splice(index, 1);\n      conditionArraySQL.splice(index, 1);\n      selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\n      selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\n      selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.addDateConstraints = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n\n      if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\n        filterColumnName = selectedFieldRecord.filtervalue.value;\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\n        let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\n        dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\n        dateConstraintArraySQL.push({\n          parentdate: selectedFieldRecord.label,\n          constraint: selectedFieldRecord['condition'].value,\n          childdate: filterColumnName\n        });\n        selectedFieldRecord = { ...selectedFieldRecord,\n          condition: \"\",\n          filtervalue: \"\",\n          dateConstraintArrayUI,\n          dateConstraintArraySQL\n        };\n        const splititemarray = this.state.selectedComponentpath.split(\"-\");\n        const newdata = { ...selectedFieldRecord\n        };\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n        this.setState({\n          design,\n          selectedFieldRecord\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n    };\n\n    this.deleteDateCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\n      let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\n      dateConstraintArrayUI.splice(index, 1);\n      dateConstraintArraySQL.splice(index, 1);\n      selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\n      selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.saveComponentProperties = selectedFieldRecord => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\"); // const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined; // let valid = this.validateTemplate(this.state.design);\n        // if (!valid) {\n        //     return null;\n        // }\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          selectedId = this.state.selectedRecord.nchecklistqbcode;\n          dataState = this.state.dataState;\n          inputData[\"registrationtemplate\"] = {\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\n            jsondata: this.state.design,\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        } else {\n          //add               \n          inputData[\"registrationtemplate\"] = {\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        }\n\n        const postParam = {\n          inputListName: \"RegistrationTemplate\",\n          selectedObject: \"selectedTemplate\",\n          primaryKeyField: \"nreactregtemplatecode\",\n          fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: this.props.nsampletypecode\n          },\n          masterData: this.props.Login.masterData\n        };\n        const inputParam = {\n          methodUrl: 'RegistrationTemplate',\n          classUrl: 'dynamicpreregdesign',\n          displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n          inputData: inputData,\n          postParam,\n          searchRef: this.props.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          dataState,\n          selectedId\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openPortal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERTEMPLATENAME\"\n        }));\n      }\n    };\n\n    this.validateTemplate = template => {\n      let invalidComponent = [];\n      let duplicateComponents = [];\n      let insufficientMultilingualData = []; //let invalidComboComponent = [];\n      // let invalidRadioComponent = [];\n      // let invalidCheckboxComponent = [];\n      //let invalidReadOnlyComponent = [];\n\n      let incompletePropertiesComponent = [];\n      let labels = [];\n      template.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\n                  invalidComponent.push(componnetrow);\n                }\n\n                if (labels.includes(componnetrow.label)) {\n                  duplicateComponents.push(componnetrow);\n                } else {\n                  if (componnetrow.label !== undefined) labels.push(componnetrow.label);\n                }\n\n                if (componnetrow.componentcode === ReactComponents.COMBO) {\n                  if ((!componnetrow.hasOwnProperty('source') || componnetrow.source.trim() === '') && (!componnetrow.hasOwnProperty('displaymember') || componnetrow.displaymember.trim() === '')) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.RADIO) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.TEXTINPUT || componnetrow.componentcode === ReactComponents.TEXTAREA) {\n                  if (componnetrow.hasOwnProperty('readonly')) {\n                    if (!componnetrow.hasOwnProperty('displaymember') && componnetrow.displaymember.trim() === '') {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  } else {\n                    if (!componnetrow.hasOwnProperty('sfieldlength') || componnetrow.sfieldlength.trim() === '') {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  }\n                }\n\n                if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length !== this.props.Login.languageList.length) {\n                  insufficientMultilingualData.push(componnetrow);\n                }\n\n                if (componnetrow.recordbasedshowhide || componnetrow.recordbasedreadonly) {\n                  if (!(componnetrow.radioparent && componnetrow.selectedrecordbasedhide)) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.DATE) {\n                  if (componnetrow.period) {\n                    if (!componnetrow.windowperiod) {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  }\n                }\n              });\n            } else {\n              if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\n                invalidComponent.push(componnet);\n              }\n\n              if (labels.includes(componnet.label)) {\n                duplicateComponents.push(componnet);\n              } else {\n                if (componnet.label !== undefined) labels.push(componnet.label);\n              }\n\n              if (componnet.componentcode === ReactComponents.COMBO) {\n                if ((!componnet.hasOwnProperty('source') || componnet.source.trim() === '') && (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '')) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.CHECKBOX) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length === 0) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.RADIO) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length < 2) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\n                if (componnet.hasOwnProperty('readonly')) {\n                  if (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '') {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                } else {\n                  if (!componnet.hasOwnProperty('sfieldlength') || componnet.sfieldlength.trim() === '') {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                }\n              }\n\n              if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length !== this.props.Login.languageList.length) {\n                insufficientMultilingualData.push(componnet);\n              }\n\n              if (componnet.recordbasedshowhide || componnet.recordbasedreadonly) {\n                if (!(componnet.radioparent && componnet.selectedrecordbasedhide)) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.DATE) {\n                if (componnet.period) {\n                  if (!componnet.windowperiod) {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                }\n              }\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n\n      if (duplicateComponents.length > 0) {\n        const dataArray = [];\n        duplicateComponents.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_DUPLICATECOMPONENTSFOUND'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (invalidComponent.length > 0) {\n        const dataArray = [];\n        invalidComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSINGCOMPONENTLABEL'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (insufficientMultilingualData.length > 0) {\n        const dataArray = [];\n        insufficientMultilingualData.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INSUFFICIENTMULTILINGUALDATA'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (incompletePropertiesComponent.length > 0) {\n        const dataArray = [];\n        incompletePropertiesComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INVALIDCOMPONENT'\n        }) + dataArray.join(\",\"));\n        return false;\n      } // if (invalidRadioComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidRadioComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidCheckboxComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidReadOnlyComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n\n\n      return true;\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      nflag: 1,\n      design: this.props.Login.operation === 'update' ? this.props.Login.design : this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate : this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate : this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate : [{\n        \"id\": \"pv1OWbsMYq\",\n        \"type\": \"row\",\n        \"children\": [{\n          type: 'column',\n          id: '2zMtRhjb2t',\n          children: []\n        }]\n      }],\n      selectedRecord: this.props.Login.selectedRecord || {},\n      selectedFieldRecord: {},\n      selectedComponentpath: \"\",\n      components: [],\n      filterColumns: [],\n      validComponents: [],\n      showConfirmAlert: false,\n      showsynonym: false,\n      toBeDeleted: {},\n      numericConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"In\"\n        }),\n        value: condition.CONTAINS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Not In\"\n        }),\n        value: condition.NOTCONTAINS\n      }],\n      stringConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Starts With\"\n        }),\n        value: condition.STARTSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Ends With\"\n        }),\n        value: condition.ENDSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Contains\"\n        }),\n        value: condition.INCLUDES\n      }],\n      dateConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Less Than (<)\"\n        }),\n        value: condition.LESSTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Less Than Or Equals(<=)\"\n        }),\n        value: condition.LESSTHANOREQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Greater Than(>)\"\n        }),\n        value: condition.GREATERTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Greater Than Or Equals(>=)\"\n        }),\n        value: condition.GREATERTHANEQUALS\n      }]\n    };\n  }\n\n  render() {\n    // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_DESIGNTEMPLATE\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\" //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\n      ,\n      onClick: this.validateDynamicDesign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DndProvider, {\n      backend: device.os !== 'android' ? HTML5Backend : TouchBackend,\n      options: {\n        enableMouseEvents: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dynamicinput, {\n      layout: this.state.design,\n      reactInputFields: this.props.Login.ReactInputFields || {},\n      setLayout: this.setLayout,\n      reactComponents: this.props.Login.ReactComponents || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onComboChange: this.onComboChange,\n      selectedFieldRecord: this.state.selectedFieldRecord,\n      onclickcomponent: (event, data, path) => this.onclickcomponent(event, data, path),\n      ReactTables: this.props.Login.ReactTables,\n      tableColumn: this.state.tableColumn,\n      filterColumns: this.state.filterColumns,\n      numericConditions: this.state.numericConditions,\n      stringConditions: this.state.stringConditions,\n      filterData: this.props.Login.filterData,\n      inputFields: this.state.validComponents || [],\n      addChildMapping: this.addChildMapping,\n      valueMembers: this.getValueMembers(this.state.selectedFieldRecord),\n      validateDelete: this.validateDelete,\n      addTag: this.addTag,\n      showFilter: this.state.showFilter,\n      showPropFilter: this.showPropFilter,\n      hidePropFilter: this.hidePropFilter,\n      addCondition: this.addCondition,\n      deleteCondition: this.deleteCondition,\n      dateConditions: this.state.dateConditions,\n      dateComponents: this.state.dateComponents,\n      addDateConstraints: this.addDateConstraints,\n      deleteDateCondition: this.deleteDateCondition,\n      showsynonym: this.state.showsynonym,\n      languages: this.props.Login.languageList || [],\n      addSynonym: () => this.setState({\n        showsynonym: !this.state.showsynonym\n      }),\n      parentRadioValue: this.state.parentRadioValue || [],\n      userinfo: this.props.Login.userInfo,\n      handleDateChange: this.handleDateChange,\n      period: this.props.Login.Period || [],\n      staticfiltertables: this.props.Login.staticfiltertables,\n      staticfiltercolumn: this.state.staticfiltercolumn || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 41\n      }\n    }))))))), /*#__PURE__*/React.createElement(AlertModal, {\n      openAlertModal: this.state.openAlertModal,\n      modalTitle: \"IDS_ENTERTEMPLATENAME\",\n      closeModal: () => this.setState({\n        openAlertModal: false,\n        templateName: \"\"\n      }),\n      onSaveClick: this.handleSaveClick,\n      modalBody: /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"templatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            templateName: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      openAlertModal,\n      design,\n      selectedRecord,\n      selectedFieldRecord,\n      selectedComponentpath,\n      components,\n      validComponents,\n      tableColumn,\n      filterColumns,\n      showConfirmAlert,\n      parentRadioValue,\n      showFilter\n    } = this.state;\n\n    if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n      updateState = true;\n      openAlertModal = false;\n    }\n\n    if (this.props.Login.design !== previousProps.Login.design) {\n      updateState = true;\n      design = this.props.Login.design;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\n      showFilter = this.props.Login.showFilter;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n        selectedComponentpath = this.props.Login.selectedComponentpath;\n      }\n\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      components = this.props.Login.components;\n      validComponents = this.props.Login.validComponents;\n      tableColumn = this.props.Login.tableColumn;\n      filterColumns = this.props.Login.filterColumns;\n      updateState = true;\n    }\n\n    if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\n      parentRadioValue = this.props.Login.parentRadioValue;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        openAlertModal,\n        design,\n        selectedRecord,\n        selectedFieldRecord,\n        tableColumn,\n        selectedComponentpath,\n        components,\n        validComponents,\n        showConfirmAlert,\n        filterColumns,\n        parentRadioValue,\n        showFilter\n      });\n    }\n  }\n\n  getIndexByLabel(design, label) {\n    let obj = {};\n    design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n      if (componnetrow.hasOwnProperty('children')) {\n        componnetrow.children.map((component, compIndex) => {\n          if (component.label === label) {\n            obj = {\n              object: component,\n              path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n            }; // break;\n          }\n\n          return null;\n        });\n      } else {\n        if (componnetrow.label === label) {\n          obj = {\n            object: componnetrow,\n            path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n          }; // return obj;\n          // break;\n        }\n      }\n\n      return null;\n    })));\n    return obj;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns,\n  getForeignTableData\n})(injectIntl(PreRegDesignPopUp));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/PreRegDesignPopUp.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","TouchBackend","HTML5Backend","DndProvider","device","Dynamicinput","connect","updateStore","crudMaster","getTableColumns","getForeignTableData","condition","SampleType","transactionStatus","DEFAULT_RETURN","showEsign","AlertModal","FormInput","getcomponentdata","getValidComponent","replaceChildFromChildren","InstrumentDefaultTemplate","productDefaultTemplate","MaterialDefaultTemplate","ReactComponents","ConfirmMessage","toast","mapStateToProps","state","Login","PreRegDesignPopUp","Component","constructor","props","validateDynamicDesign","valid","validateTemplate","design","setState","openAlertModal","templateName","showPropFilter","updateInfo","typeName","data","showFilter","hidePropFilter","setLayout","splitDropZonePath","remove","removeChild","selectedFieldRecord","undefined","split","childRecord","toBeDeleted","deleteComponent","child","map","myChild","childPath","updatePath","components","getComponents","validComponents","columnInfo","showConfirmAlert","selectedComponentpath","length","row","rowIndex","children","column","columnIndex","componnetrow","compRowIndex","hasOwnProperty","component","compIndex","inputtype","newChild","childComp","obj","getIndexByLabel","label","push","path","newObj","object","parentPath","radioparentPath","validateDelete","showAlert","componentcode","COMBO","childValue","parentData","newChildData","filter","radioparent","confirmAlert","confirmMessage","confirm","intl","formatMessage","id","bool","onclickcomponent","event","dateComponents","filterDataComponents","item","componentData","parentRadioValue","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","source","nquerybuildertablecode","userInfo","tableColumn","filterColumns","oldParentData","radioOptions","tags","value","text","componnet","compindex","valuemember","getValueMembers","valueColumn","numericColumns","x","foriegntablename","displayname","language","tablecolumnname","onInputOnChange","name","target","type","splititemarray","newChildData1","checked","newdata","saveComponentProperties","langArray","languageList","langDataObject","onNumericInputChange","columnname","isNaN","handleDateChange","dateValue","dateName","onComboChange","comboData","comboName","stablename","nformcode","ismultilingual","validateChild","valueMemberOptions","filtervalue","staticfiltervalue","ndata","list","JSON","parse","jsondata","jcolumnname","staticfiltercolumn","slanguagetypecode","warn","addTag","addCondition","filterColumnName","filterValue","conditionString","conditionArrayString","selectedStaticfiltertable","filtercolumn","foriegntablePK","EQUALS","jtablename","tablename","NOTEQUALS","STARTSWITH","ENDSWITH","INCLUDES","conditionArrayUI","conditionArraySQL","staticfiltertable","nsystemconfiguration","join","CONTAINS","NOTCONTAINS","deleteCondition","index","splice","addDateConstraints","dateConstraintArrayUI","dateConstraintArraySQL","cdateConstraintArraySQL","parentdate","constraint","childdate","deleteDateCondition","handleSaveClick","saveType","selectedRecord","inputData","selectedId","dataState","operation","nchecklistqbcode","nreactregtemplatecode","masterData","selectedTemplate","nsampletypecode","sregtemplatename","jsonString","stringify","replaceAll","ntransactionstatus","DRAFT","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","inputParam","methodUrl","classUrl","displayName","searchRef","userRoleControlRights","ncontrolcode","loadEsign","screenData","info","template","invalidComponent","duplicateComponents","insufficientMultilingualData","incompletePropertiesComponent","labels","trim","includes","displaymember","CHECKBOX","RADIO","TEXTINPUT","TEXTAREA","sfieldlength","Object","keys","recordbasedshowhide","recordbasedreadonly","selectedrecordbasedhide","DATE","period","windowperiod","dataArray","nflag","PRODUCT","INSTRUMENT","MATERIAL","showsynonym","numericConditions","defaultMessage","stringConditions","dateConditions","LESSTHAN","LESSTHANOREQUALS","GREATERTHAN","GREATERTHANEQUALS","render","openPortal","closeModal","os","enableMouseEvents","ReactInputFields","ReactTables","filterData","addChildMapping","Period","staticfiltertables","componentDidUpdate","previousProps","updateState"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport device from 'current-device';\r\n// import MoreOptions from '../../components/configureui/MoreOptions';\r\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\r\nimport { connect } from 'react-redux';\r\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData } from '../../actions/index'\r\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport AlertModal from './AlertModal'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\r\nimport { InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate } from './DefaultTemplates';\r\nimport { ReactComponents } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { toast } from 'react-toastify';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass PreRegDesignPopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            nflag: 1,\r\n            design: this.props.Login.operation === 'update' ? this.props.Login.design :\r\n                this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate :\r\n                    this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate :\r\n                        this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate : [{\r\n                            \"id\": \"pv1OWbsMYq\",\r\n                            \"type\": \"row\",\r\n                            \"children\": [\r\n                                { type: 'column', id: '2zMtRhjb2t', children: [] }\r\n                            ]\r\n                        }],\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n            selectedFieldRecord: {},\r\n            selectedComponentpath: \"\",\r\n            components: [],\r\n            filterColumns: [],\r\n            validComponents: [],\r\n            showConfirmAlert: false,\r\n            showsynonym: false,\r\n            toBeDeleted: {},\r\n            numericConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"In\" }), value: condition.CONTAINS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Not In\" }), value: condition.NOTCONTAINS }\r\n            ],\r\n            stringConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Starts With\" }), value: condition.STARTSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Ends With\" }), value: condition.ENDSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Contains\" }), value: condition.INCLUDES }\r\n            ],\r\n            dateConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Less Than (<)\" }), value: condition.LESSTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Less Than Or Equals(<=)\" }), value: condition.LESSTHANOREQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Greater Than(>)\" }), value: condition.GREATERTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Greater Than Or Equals(>=)\" }), value: condition.GREATERTHANEQUALS }\r\n            ]\r\n\r\n\r\n        }\r\n    }\r\n    validateDynamicDesign = () => {\r\n        let valid = this.validateTemplate(this.state.design);\r\n        if (!valid) {\r\n            return null;\r\n        }\r\n        else {\r\n            this.setState({ openAlertModal: true, templateName: \"\" });\r\n        }\r\n    }\r\n    render() {\r\n        // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" }) : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATE\" })}`}\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\r\n                                onClick={this.validateDynamicDesign}\r\n                            >\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                            </Button>\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12} className='p-0'>\r\n                                    <DndProvider backend={device.os !== 'android' ? HTML5Backend : TouchBackend} options={{ enableMouseEvents: true }} >\r\n                                        <Dynamicinput\r\n                                            layout={this.state.design}\r\n                                            reactInputFields={this.props.Login.ReactInputFields || {}}\r\n                                            setLayout={this.setLayout}\r\n                                            reactComponents={this.props.Login.ReactComponents || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedFieldRecord={this.state.selectedFieldRecord}\r\n                                            onclickcomponent={(event, data, path) => this.onclickcomponent(event, data, path)}\r\n                                            ReactTables={this.props.Login.ReactTables}\r\n                                            tableColumn={this.state.tableColumn}\r\n                                            filterColumns={this.state.filterColumns}\r\n                                            numericConditions={this.state.numericConditions}\r\n                                            stringConditions={this.state.stringConditions}\r\n                                            filterData={this.props.Login.filterData}\r\n                                            inputFields={this.state.validComponents || []}\r\n                                            addChildMapping={this.addChildMapping}\r\n                                            valueMembers={this.getValueMembers(this.state.selectedFieldRecord)}\r\n                                            validateDelete={this.validateDelete}\r\n                                            addTag={this.addTag}\r\n                                            showFilter={this.state.showFilter}\r\n                                            showPropFilter={this.showPropFilter}\r\n                                            hidePropFilter={this.hidePropFilter}\r\n                                            addCondition={this.addCondition}\r\n                                            deleteCondition={this.deleteCondition}\r\n                                            dateConditions={this.state.dateConditions}\r\n                                            dateComponents={this.state.dateComponents}\r\n                                            addDateConstraints={this.addDateConstraints}\r\n                                            deleteDateCondition={this.deleteDateCondition}\r\n                                            showsynonym={this.state.showsynonym}\r\n                                            languages={this.props.Login.languageList || []}\r\n                                            addSynonym={() => this.setState({ showsynonym: !(this.state.showsynonym) })}\r\n                                            parentRadioValue={this.state.parentRadioValue || []}\r\n                                            userinfo={this.props.Login.userInfo}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            period={this.props.Login.Period || []}\r\n                                            staticfiltertables={this.props.Login.staticfiltertables}\r\n                                            staticfiltercolumn={this.state.staticfiltercolumn||[]}\r\n                                        />\r\n                                    </DndProvider>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <AlertModal\r\n                    openAlertModal={this.state.openAlertModal}\r\n                    modalTitle={\"IDS_ENTERTEMPLATENAME\"}\r\n                    closeModal={() => this.setState({ openAlertModal: false, templateName: \"\" })}\r\n                    onSaveClick={this.handleSaveClick}\r\n                    modalBody={\r\n                        <Row>\r\n                            <Col>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    name={\"templatename\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, templateName: event.target.value } })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    value={this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={\"30\"}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                />\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n            selectedComponentpath, components, validComponents, tableColumn, filterColumns,\r\n            showConfirmAlert, parentRadioValue, showFilter } = this.state\r\n        if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n            updateState = true;\r\n            openAlertModal = false;\r\n        }\r\n        if (this.props.Login.design !== previousProps.Login.design) {\r\n            updateState = true;\r\n            design = this.props.Login.design;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\r\n            showFilter = this.props.Login.showFilter\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n                selectedComponentpath = this.props.Login.selectedComponentpath\r\n            }\r\n\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n            components = this.props.Login.components\r\n            validComponents = this.props.Login.validComponents\r\n            tableColumn = this.props.Login.tableColumn\r\n            filterColumns = this.props.Login.filterColumns\r\n            updateState = true;\r\n\r\n        }\r\n        if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\r\n            parentRadioValue = this.props.Login.parentRadioValue\r\n            updateState = true;\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n                tableColumn, selectedComponentpath, components, validComponents,\r\n                showConfirmAlert, filterColumns, parentRadioValue, showFilter\r\n            })\r\n        }\r\n    }\r\n    showPropFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showFilter: !this.state.showFilter\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  this.setState({ showFilter: !this.state.showFilter })\r\n    }\r\n    hidePropFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showFilter: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  this.setState({ showFilter: !this.state.showFilter })\r\n    }\r\n    setLayout = (design, splitDropZonePath, remove, removeChild) => {\r\n        let selectedFieldRecord = {}\r\n        if (remove === undefined) {\r\n            selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"))\r\n        }\r\n        else if (removeChild) {\r\n            let childRecord = {}\r\n            this.state.toBeDeleted.deleteComponent.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n        }\r\n        design = this.updatePath(design)\r\n        // if (selectedFieldRecord.child) {\r\n        //     let childRecord = {}\r\n        //     selectedFieldRecord.child.map(myChild => {\r\n        //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n        //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\r\n        //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\r\n        //         return null;\r\n        //     })\r\n        // }\r\n        // if (selectedFieldRecord.childValue) {\r\n        //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n        //     let newChildData = []\r\n        //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\r\n        //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\r\n        //         newChildData.push(child))\r\n        //     parentData = { ...parentData, child: newChildData };\r\n        //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n\r\n        // }\r\n        const components = this.getComponents(design).components;\r\n        let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n        this.setState({ showConfirmAlert: false, toBeDeleted: {}, design, selectedFieldRecord: selectedFieldRecord, components, validComponents, selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath })\r\n    }\r\n    updatePath = (design) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if(component.inputtype!=='radio'){\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            }else{\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            }\r\n                         \r\n                        })\r\n                    } else {\r\n                        if(componnetrow.inputtype!=='radio'){\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                const obj = this.getIndexByLabel(design, childComp.label);\r\n                                newChild.push({ ...childComp, childPath: obj.path });\r\n                                const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n                    }else{\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                const obj = this.getIndexByLabel(design, childComp.label);\r\n                                newChild.push({ ...childComp, childPath: obj.path });\r\n                                const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n                    }\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n    }\r\n    getIndexByLabel(design, label) {\r\n        let obj = {};\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.label === label) {\r\n                                obj = {\r\n                                    object: component,\r\n                                    path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\r\n                                }\r\n                                // break;\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.label === label) {\r\n                            obj = {\r\n                                object: componnetrow,\r\n                                path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\r\n                            }\r\n                            // return obj;\r\n                            // break;\r\n                        }\r\n                    }\r\n                    return null;\r\n                })\r\n            )\r\n        )\r\n        return obj;\r\n    }\r\n    validateDelete = (design, splitDropZonePath) => {\r\n        const path = splitDropZonePath.split(\"-\")\r\n        let showAlert = false;\r\n        let toBeDeleted = {};\r\n        // let component = {}\r\n        // let row = this.state.design[path[0]]\r\n        // let column = row.children[path[1]]\r\n        // let compRow = column.children[path[2]]\r\n        // if (compRow.type === 'componentrow')\r\n        //     component = compRow.children[path[3]]\r\n        // else\r\n        //     component = compRow\r\n        let component = getcomponentdata(this.state.design, path)\r\n        if (component.child && component.child.length > 0) {\r\n\r\n            let childRecord = {}\r\n            if(component.inputtype==='radio'){\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    delete childRecord[\"radioparentLabel\"]\r\n                    delete childRecord[\"selectedrecordbasedhide\"]\r\n                    delete childRecord[\"recordbasedhide\"]\r\n                    delete childRecord[\"radioparent\"]\r\n                    delete childRecord[\"radioparentPath\"]\r\n                    delete childRecord[\"recordbasedshowhide\"]\r\n                    delete childRecord[\"recordbasedreadonly\"]\r\n                    \r\n                   \r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            }else{\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    childRecord['childValue'] = undefined;\r\n                    childRecord['parentPath'] = undefined;\r\n                    childRecord['valuecolumn'] = undefined;\r\n                    if (myChild.componentcode !== ReactComponents.COMBO) {\r\n                        childRecord['column'] = undefined;\r\n                    }\r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            }\r\n         \r\n            showAlert = true;\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n            // this.showAlert(true, toBeDeleted);\r\n        }\r\n        if (component.childValue) {\r\n            let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n\r\n        if (component.radioparent) {\r\n            let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n        if (showAlert) {\r\n            this.showAlert(true, toBeDeleted);\r\n        }\r\n        else {\r\n            this.setLayout(design, splitDropZonePath, true)\r\n        }\r\n    }\r\n    confirmAlert = () => {\r\n        this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n            this.props.intl.formatMessage({ id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true),\r\n            undefined,\r\n            () => this.showAlert(false));\r\n    }\r\n    showAlert = (bool, toBeDeleted) => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showConfirmAlert: bool, toBeDeleted }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showConfirmAlert: bool, toBeDeleted })\r\n    }\r\n    onclickcomponent = (event, data, path) => {\r\n        const selectedFieldRecord = { ...data }\r\n        const obj = this.getComponents(this.state.design);\r\n        //console.log(\"obj:\", obj);\r\n        const components = obj.components;\r\n\r\n        let dateComponents = obj.dateComponents;\r\n        if (data.inputtype === \"date\") {\r\n            const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\r\n            dateComponents = filterDataComponents;\r\n        }\r\n\r\n        let componentData = { components, selectedComponentpath: path }\r\n        let parentRadioValue = []\r\n\r\n        if ((selectedFieldRecord.componentcode === ReactComponents.COMBO ||\r\n            selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n            selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) &&\r\n            selectedFieldRecord.source !== undefined &&\r\n            (this.props.Login.columnInfo === undefined ||\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\r\n            this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo,\r\n                \"\", this.props.Login.columnInfo, componentData, undefined, false)\r\n        } else {\r\n            const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n            let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\r\n            let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\r\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n                 selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (selectedFieldRecord.radioparentPath) {\r\n                    let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                    if (oldParentData.hasOwnProperty('child')) {\r\n                        oldParentData.child.map(item => {\r\n                            if (item.label === selectedFieldRecord.label) {\r\n                                parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                    return { value: item.id, label: item.text, item }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }else{\r\n                if(selectedFieldRecord.radioparentPath){\r\n                    if(selectedFieldRecord.radioparentPath){\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                        if (oldParentData.hasOwnProperty('child')) {\r\n                            oldParentData.child.map(item => {\r\n                                if (item.label === selectedFieldRecord.label) {\r\n                                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                        return { value: item.id, label: item.text, item }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (this.props.Login.columnInfo && selectedFieldRecord.childValue\r\n                    && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\r\n                    tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\r\n                    filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\r\n                    this.setState({\r\n                        selectedComponentpath: path,\r\n                        selectedFieldRecord: selectedFieldRecord,\r\n                        components,\r\n                        tableColumn,\r\n                        filterColumns,\r\n                        validComponents,\r\n                        parentRadioValue,\r\n                        showFilter: false\r\n\r\n\r\n                    })\r\n                } else {\r\n                    if (selectedFieldRecord.childValue) {\r\n                        this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            \"\", this.props.Login.columnInfo, componentData, undefined, false);\r\n                    } else {\r\n                        this.setState({\r\n                            selectedComponentpath: path,\r\n                            selectedFieldRecord: selectedFieldRecord,\r\n                            components,\r\n                            tableColumn,\r\n                            filterColumns,\r\n                            dateComponents,\r\n                            validComponents,\r\n                            parentRadioValue,\r\n                            showFilter: false\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    selectedComponentpath: path,\r\n                    selectedFieldRecord: selectedFieldRecord,\r\n                    components,\r\n                    tableColumn,\r\n                    filterColumns,\r\n                    dateComponents,\r\n                    validComponents,\r\n                    parentRadioValue,\r\n                    showFilter: false\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getComponents = (design) => {\r\n        let components = [];\r\n        let dateComponents = [{ label: \"Current Date\", value: \"utccurrentdate\" }];\r\n        design.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({ label: componnetrow.label, value: componnetrow.label })\r\n                            componnetrow.label && components.push({\r\n                                label: componnetrow.label,\r\n                                value: componnetrow.label,\r\n                                // item: componnetrow,\r\n                                inputtype: componnetrow.inputtype,\r\n                                source: componnetrow.source,\r\n                                nquerybuildertablecode: componnetrow.nquerybuildertablecode,\r\n                                child: componnetrow.child,\r\n                                valuemember: componnetrow.valuemember,\r\n                                path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\r\n                            })\r\n                        })\r\n                    } else {\r\n                        componnet.inputtype === 'date' && componnet.label && dateComponents.push({ label: componnet.label, value: componnet.label })\r\n                        componnet.label && components.push({\r\n                            label: componnet.label,\r\n                            value: componnet.label,\r\n                            // item: componnet,\r\n                            inputtype: componnet.inputtype,\r\n                            source: componnet.source,\r\n                            nquerybuildertablecode: componnet.nquerybuildertablecode,\r\n                            child: componnet.child,\r\n                            valuemember: componnet.valuemember,\r\n                            path: `${rowIndex}-${columnIndex}-${compindex}-0`\r\n                        })\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        return { components, dateComponents };\r\n    }\r\n    getValueMembers = (selectedFieldRecord) => {\r\n        if (selectedFieldRecord.childValue) {\r\n            let valueColumn = [];\r\n            this.props.Login.columnInfo &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\r\n                    if (x.foriegntablename === selectedFieldRecord.childValue.source)\r\n                        valueColumn.push(\r\n                            {\r\n                                label: x.displayname[this.props.Login.userInfo.language],\r\n                                value: x.tablecolumnname\r\n                            }\r\n                        )\r\n                    return null;\r\n                })\r\n            if (valueColumn.length) {\r\n\r\n                return valueColumn;\r\n\r\n            } else {\r\n                this.props.Login.columnInfo &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\r\n                        if (x.foriegntablename === selectedFieldRecord.source)\r\n                            valueColumn.push(\r\n                                {\r\n                                    label: x.displayname[this.props.Login.userInfo.language],\r\n                                    value: x.tablecolumnname\r\n                                }\r\n                            )\r\n                        return null;\r\n                    })\r\n                return valueColumn;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n\r\n\r\n            if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\r\n                let design = this.state.design\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\r\n                    // let design = this.state.design\r\n                    if (selectedFieldRecord.radioparentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData)\r\n                        }\r\n                        delete selectedFieldRecord[\"radioparentLabel\"]\r\n                        delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                        delete selectedFieldRecord[\"recordbasedhide\"]\r\n                        delete selectedFieldRecord[\"radioparent\"]\r\n                    }\r\n                    selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\r\n\r\n                if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\r\n                    selectedFieldRecord['loadcurrentdate'] = false\r\n                } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\r\n                    selectedFieldRecord['loadselecteddate'] = false\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }else if(event.target.name ===\"unique\"){\r\n            //     const design = this.state.design\r\n            //  let listUnique=[]\r\n            //  if(event.target.checked){\r\n            //     design && design.map(row => {\r\n            //         return  row.children.map(column => {\r\n            //              return column.children.map(component => {\r\n            //                   if (component.hasOwnProperty(\"children\")) {\r\n            //                      return component.children.map(componentrow => {\r\n            //                        if(componentrow.unique){\r\n            //                         listUnique.push(componentrow.unique)\r\n            //                        }\r\n            //                       }) \r\n            //                   }\r\n            //                   else {\r\n            //                     if(component.unique){\r\n            //                         listUnique.push(component.unique)\r\n            //                     }\r\n            //                   }\r\n            //               }\r\n            //               )\r\n            //           })\r\n            //       })   \r\n            //     }\r\n            //       if(listUnique.length===0){\r\n            //         selectedFieldRecord[event.target.name] = event.target.checked;\r\n            //         this.saveComponentProperties(selectedFieldRecord)\r\n\r\n            //       }else{\r\n            //           toast.info(\"Unique Must Be One Field\")\r\n            //           selectedFieldRecord[event.target.name] = false;\r\n            //         this.saveComponentProperties(selectedFieldRecord)\r\n            //         //  this.setState({design})\r\n            //       }\r\n\r\n            selectedFieldRecord[event.target.name] = event.target.checked;\r\n            this.saveComponentProperties(selectedFieldRecord)\r\n        }\r\n\r\n            else {\r\n                if (event.target.name === 'timeonly') {\r\n                    selectedFieldRecord['dateonly'] = false;\r\n                }\r\n                if (event.target.name === 'dateonly') {\r\n                    selectedFieldRecord['timeonly'] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n        }\r\n        else {\r\n            if (name === 'synonym') {\r\n               \r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    [event.target.name]: event.target.value\r\n                  \r\n                }\r\n            }\r\n            if (event.target.name === 'label') {\r\n                    const langArray =  this.props.Login.languageList;\r\n                    const langDataObject = {};\r\n                    langArray.map(item=>\r\n                        langDataObject[item.value] = event.target.value);\r\n\r\n                    selectedFieldRecord['displayname'] = {\r\n                        ...selectedFieldRecord['displayname'],\r\n                       ...langDataObject\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            } else {\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.saveComponentProperties(selectedFieldRecord)\r\n        }\r\n\r\n    }\r\n    onNumericInputChange = (event, columnname) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        let value = event.target.value;\r\n        if (!isNaN(value)) {\r\n            // if (parseInt(value) < 10) {\r\n            selectedFieldRecord[event.target.name] = value;\r\n            this.saveComponentProperties(selectedFieldRecord);\r\n            // }\r\n        }\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        selectedFieldRecord[dateName] = dateValue\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        if (selectedFieldRecord.label) {\r\n            if (comboName === 'table') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['source'] = comboData.item.stablename;\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode\r\n                }\r\n                selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, { validComponents: this.state.validComponents })\r\n                } else {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo)\r\n                }\r\n\r\n            } else if (comboName === 'column') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['displaymember'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (comboName === 'childValue') {\r\n                if (comboData) {\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n\r\n                    }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord['parentLabel'] = comboData.label\r\n                    }\r\n\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n                    }\r\n                    else {\r\n                        this.props.getTableColumns(design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            splititemarray, this.props.Login.columnInfo,\r\n                            { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                            true)\r\n                    }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['column'] = comboData\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === 'valuecolumn') {\r\n                selectedFieldRecord['valuecolumn'] = comboData;\r\n                let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                let newChildData = []\r\n                parentData.child.map(child => {\r\n                    if (child.label === selectedFieldRecord.label) {\r\n                        newChildData.push({\r\n                            ...child, tablecolumnname: comboData.value\r\n                        })\r\n                    } else {\r\n                        newChildData.push(child)\r\n                    }\r\n                    return null;\r\n                })\r\n                parentData = { ...parentData, child: newChildData };\r\n                let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            } else if (comboName === 'filtercolumn') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord.filtervalue = \"\";\r\n                selectedFieldRecord.staticfiltervalue = \"\";\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (comboData.type !== 'numeric') {\r\n                    this.setState({ design, selectedFieldRecord });\r\n                } else {\r\n                    this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo,\r\n                        splititemarray, this.props.Login.columnInfo,\r\n                        { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                        true)\r\n                }\r\n\r\n            } else if (comboName === 'customsearchfilter') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['filterfields'] = [];\r\n                this.state.selectedFieldRecord[comboName].map(data => {\r\n                    return selectedFieldRecord['filterfields'].push(data.item['item'] ? {type:data.type,...data.item['item']} : data.item);\r\n                });\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            else if (comboName === 'selectedrecordbasedhide') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['recordbasedhide'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            else if (comboName === 'radioparent') {\r\n                if (comboData) {\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                    selectedFieldRecord['radioparentPath'] = comboData.path\r\n                    selectedFieldRecord['radioparentLabel'] = comboData.label\r\n                    delete   selectedFieldRecord['recordbasedhide']\r\n                   delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions && \r\n                                         parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                        selectedFieldRecord['selectedrecordbasedhide'] = comboData\r\n                    delete selectedFieldRecord['recordbasedhide']\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === \"period\") {\r\n                if(comboData){\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    selectedFieldRecord['nperiodcode'] = comboData.value\r\n                    selectedFieldRecord['nperioddata'] = comboData.item.ndata\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord });\r\n                }else{\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    delete selectedFieldRecord['nperiodcode']\r\n                    delete selectedFieldRecord['nperioddata']\r\n                    delete   selectedFieldRecord['windowperiod']\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord });\r\n                }\r\n             \r\n            }\r\n            else if(comboName === \"staticfiltertable\"){\r\n                if(comboData){\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    const list=JSON.parse(comboData.item.jsondata.value).jcolumnname\r\n                    const staticfiltercolumn=list.map(x=>{\r\n                        \r\n                       // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\r\n                        return {label: x['displayname'][this.props.Login.userInfo.slanguagetypecode],value:x['displayname'][this.props.Login.userInfo.slanguagetypecode],item:x};\r\n                    })\r\n\r\n                    this.setState({ design, selectedFieldRecord,staticfiltercolumn });\r\n                }else{\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    delete   selectedFieldRecord['staticfiltercolumn']\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord,staticfiltercolumn:[] });\r\n                }\r\n            }\r\n            else {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERLABEL\" }))\r\n        }\r\n\r\n    }\r\n    addTag = (tags) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n\r\n        selectedFieldRecord['radioOptions'] = tags;\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n\r\n    }\r\n    addCondition = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        let filterValue;\r\n        let conditionString;\r\n        let conditionArrayString;\r\n        let selectedStaticfiltertable={}\r\n        if(selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] \r\n        && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])){\r\n            selectedStaticfiltertable=JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value) \r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n                     \r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname  }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n        \r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = P$\"+selectedStaticfiltertable.jtablename.tablename +\".\"+ filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" P$\"+selectedStaticfiltertable.jtablename.tablename +\".\"+ filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like 'P$\"+selectedStaticfiltertable.jtablename.tablename +\".\"+ filterValue.value + \"$P\" + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%P$\"+selectedStaticfiltertable.jtablename.tablename +\".\"+ filterValue.value + \"$P'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%P$\"+selectedStaticfiltertable.jtablename.tablename +\".\"+ filterValue.value + \"$P%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                // case condition.CONTAINS:\r\n                //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                // case condition.NOTCONTAINS:\r\n                //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                staticfiltertable:\"\",\r\n                nsystemconfiguration:false,\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                staticfiltercolumn:\"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n\r\n        }\r\n        else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] \r\n        && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\r\n\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\r\n                    filterValue = selectedFieldRecord.filtervalue\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                case condition.CONTAINS:\r\n                    conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                case condition.NOTCONTAINS:\r\n                    conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                nsystemconfiguration:false,\r\n                staticfiltercolumn:\"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord, staticfiltercolumn:\"\" });\r\n    }\r\n    deleteCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\r\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\r\n        conditionArrayUI.splice(index, 1);\r\n        conditionArraySQL.splice(index, 1);\r\n        selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\r\n        selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\r\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    addDateConstraints = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\r\n            filterColumnName = selectedFieldRecord.filtervalue.value;\r\n            let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\r\n            let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\r\n            dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\r\n            dateConstraintArraySQL.push({ parentdate: selectedFieldRecord.label, constraint: selectedFieldRecord['condition'].value, childdate: filterColumnName });\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                condition: \"\",\r\n                filtervalue: \"\",\r\n                dateConstraintArrayUI,\r\n                dateConstraintArraySQL\r\n            }\r\n            const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n            const newdata = { ...selectedFieldRecord }\r\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n            this.setState({ design, selectedFieldRecord });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n    }\r\n    deleteDateCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\r\n        let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\r\n        dateConstraintArrayUI.splice(index, 1);\r\n        dateConstraintArraySQL.splice(index, 1);\r\n        selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\r\n        selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    saveComponentProperties = (selectedFieldRecord) => {\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        // const selectedFieldRecord = this.state.selectedFieldRecord;\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord })\r\n    }\r\n    handleSaveClick = (saveType) => {\r\n        if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            // let valid = this.validateTemplate(this.state.design);\r\n            // if (!valid) {\r\n            //     return null;\r\n            // }\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                selectedId = this.state.selectedRecord.nchecklistqbcode\r\n                dataState = this.state.dataState\r\n                inputData[\"registrationtemplate\"] = {\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\r\n                    jsondata: this.state.design,\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                }\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"registrationtemplate\"] =\r\n                {\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                };\r\n            }\r\n            const postParam = {\r\n                inputListName: \"RegistrationTemplate\",\r\n                selectedObject: \"selectedTemplate\",\r\n                primaryKeyField: \"nreactregtemplatecode\",\r\n                fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo, nsampletypecode: this.props.nsampletypecode\r\n                },\r\n                masterData: this.props.Login.masterData\r\n            }\r\n            const inputParam = {\r\n                methodUrl: 'RegistrationTemplate',\r\n                classUrl: 'dynamicpreregdesign',\r\n                displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                inputData: inputData, postParam,\r\n                searchRef: this.props.searchRef,\r\n                operation: this.props.Login.operation,\r\n                saveType, dataState, selectedId\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openPortal\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTEMPLATENAME\" }))\r\n        }\r\n    }\r\n    validateTemplate = (template) => {\r\n\r\n        let invalidComponent = [];\r\n        let duplicateComponents = [];\r\n        let insufficientMultilingualData = [];\r\n        //let invalidComboComponent = [];\r\n        // let invalidRadioComponent = [];\r\n        // let invalidCheckboxComponent = [];\r\n        //let invalidReadOnlyComponent = [];\r\n        let incompletePropertiesComponent = [];\r\n        let labels = [];\r\n        template.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\r\n                                invalidComponent.push(componnetrow)\r\n                            }\r\n                            if (labels.includes(componnetrow.label)) {\r\n                                duplicateComponents.push(componnetrow)\r\n                            } else {\r\n                                if(componnetrow.label!==undefined)\r\n                                labels.push(componnetrow.label);\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.COMBO) {\r\n                                if ((!componnetrow.hasOwnProperty('source') || componnetrow.source.trim() === '') &&\r\n                                    (!componnetrow.hasOwnProperty('displaymember') || componnetrow.displaymember.trim() === '')) {\r\n                                    incompletePropertiesComponent.push(componnetrow)\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.RADIO) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.TEXTINPUT || componnetrow.componentcode === ReactComponents.TEXTAREA) {\r\n                                if (componnetrow.hasOwnProperty('readonly')) {\r\n                                    if (!componnetrow.hasOwnProperty('displaymember') && componnetrow.displaymember.trim() === '') {\r\n                                        incompletePropertiesComponent.push(componnetrow);\r\n                                    }\r\n                                }\r\n                                else{\r\n                                    if (!componnetrow.hasOwnProperty('sfieldlength') || componnetrow.sfieldlength.trim() === '') {\r\n                                        incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                              \r\n                            }\r\n                                \r\n                            }\r\n                            if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length !== this.props.Login.languageList.length) {\r\n                                insufficientMultilingualData.push(componnetrow);\r\n                            }\r\n                            if(componnetrow.recordbasedshowhide||componnetrow.recordbasedreadonly){\r\n                                if(!(componnetrow.radioparent&&componnetrow.selectedrecordbasedhide)){\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                             \r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.DATE) {\r\n                                if (componnetrow.period ) {\r\n                                    if(!componnetrow.windowperiod){\r\n                                        incompletePropertiesComponent.push(componnetrow)\r\n                                    }\r\n                                  \r\n                                }\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\r\n                            invalidComponent.push(componnet)\r\n                        }\r\n                        if (labels.includes(componnet.label)) {\r\n                            duplicateComponents.push(componnet)\r\n                        } else {\r\n                            if(componnet.label!==undefined)\r\n                            labels.push(componnet.label);\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.COMBO) {\r\n                            if ((!componnet.hasOwnProperty('source') || componnet.source.trim() === '') &&\r\n                                (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '')) {\r\n                                incompletePropertiesComponent.push(componnet)\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.CHECKBOX) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length === 0))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.RADIO) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length < 2))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\r\n                            if (componnet.hasOwnProperty('readonly')) {\r\n                                if (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '') {\r\n                                    incompletePropertiesComponent.push(componnet);\r\n                                }\r\n                            }\r\n                            else{\r\n                                if (!componnet.hasOwnProperty('sfieldlength') || componnet.sfieldlength.trim() === '') {\r\n                                    incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                            }\r\n                            \r\n                            \r\n                        }\r\n                        if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length !== this.props.Login.languageList.length) {\r\n                            insufficientMultilingualData.push(componnet);\r\n                        }\r\n                        if(componnet.recordbasedshowhide||componnet.recordbasedreadonly){\r\n                            if(!(componnet.radioparent&&componnet.selectedrecordbasedhide)){\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                         \r\n                        }\r\n\r\n                        if (componnet.componentcode === ReactComponents.DATE) {\r\n                            if (componnet.period ) {\r\n                                if(!componnet.windowperiod){\r\n                                    incompletePropertiesComponent.push(componnet)\r\n                                }\r\n                              \r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        if (duplicateComponents.length > 0) {\r\n            const dataArray = [];\r\n            duplicateComponents.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_DUPLICATECOMPONENTSFOUND' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (invalidComponent.length > 0) {\r\n            const dataArray = [];\r\n            invalidComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSINGCOMPONENTLABEL' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (insufficientMultilingualData.length > 0) {\r\n            const dataArray = [];\r\n            insufficientMultilingualData.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INSUFFICIENTMULTILINGUALDATA' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (incompletePropertiesComponent.length > 0) {\r\n            const dataArray = [];\r\n            incompletePropertiesComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCOMPONENT' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        // if (invalidRadioComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidRadioComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidCheckboxComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidReadOnlyComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        return true;\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, crudMaster, getTableColumns, getForeignTableData })(injectIntl(PreRegDesignPopUp))"]},"metadata":{},"sourceType":"module"}