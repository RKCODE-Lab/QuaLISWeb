{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nimport { transactionStatus, attachmentType } from '../components/Enumeration';\nexport function getManfacturerCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"create\") {\n      // const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", { \"userinfo\": userInfo });\n      const CountryService = rsapi.post(\"country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [CountryService];\n    } else {\n      const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", {\n        \"userinfo\": userInfo\n      });\n      const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", {\n        [primaryKeyName]: masterData.selectedManufacturer[primaryKeyName],\n        \"userinfo\": userInfo\n      });\n      urlArray = [EDQMManufacturer, ManufacturerByID];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let countryCode = [];\n      const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryList = countryMap.get(\"OptionList\");\n      let edqmManufacturer = [];\n      let selectedRecord = {};\n      const edqmManufacturerMap = constructOptionList(response[0].data || [], \"nofficialmanufcode\", \"sofficialmanufname\", undefined, undefined, false);\n      const edqmManufacturerList = edqmManufacturerMap.get(\"OptionList\");\n\n      if (operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"nofficialmanufcode\"] = {\n          label: response[1].data[\"sofficialmanufname\"],\n          value: response[1].data[\"nofficialmanufcode\"]\n        }; // edqmManufacturer.push({\n        //     label: response[1].data[\"sofficialmanufname\"],\n        //     value: response[1].data[\"nofficialmanufcode\"]\n        // });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          edqmManufacturerList,\n          Country: countryList,\n          countryCode: countryCode,\n          isOpen: true,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": 1\n          },\n          edqmManufacturer: edqmManufacturer,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function selectCheckBoxManufacturer(Manufacturer, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/manufacturer/getManufacturerWithSiteAndContactDetails\", {\n      'userinfo': userInfo,\n      \"nmanufcode\": Manufacturer.nmanufcode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData); // console.log(\" Select Checked : \", masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedId: null\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getContactInfo(SiteDetails, masterData) {\n  return function (dispatch) {\n    let Map = {};\n    Map[\"nmanufcode\"] = parseInt(SiteDetails.siteAddress.nmanufcode);\n    Map[\"nmanufsitecode\"] = parseInt(SiteDetails.siteAddress.nmanufsitecode);\n    Map[\"userinfo\"] = SiteDetails.userInfo;\n    dispatch(initRequest(true));\n    rsapi.post(\"/manufacturer/getContactManufacturerBySite\", Map).then(response => {\n      // dispatch({type: DEFAULT_RETURN, payload:{\n      //     ManufacturerContactInfo :response.data,\n      //     SiteCode: SiteDetails.nmanufsitecode, loading:false\n      // }});   \n      masterData = { ...SiteDetails.masterData,\n        ManufacturerContactInfo: response.data,\n        selectedSite: SiteDetails.siteAddress,\n        SiteCode: SiteDetails.siteAddress.nmanufsitecode\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); // console.log(error);\n    });\n  };\n}\nexport function getSiteManufacturerLoadEdit(screenName, operation, manufCode, manufSiteCode, ncontrolCode, userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = {};\n\n    if (operation === \"create\") {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country];\n    } else {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      const ManufacturerSiteByID = rsapi.post(\"/manufacturer/getSiteManufacturerById\", {\n        \"nmanufcode\": manufCode,\n        \"nmanufsitecode\": manufSiteCode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country, ManufacturerSiteByID];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let countryCode = [];\n      const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryList = countryMap.get(\"OptionList\");\n\n      if (operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"ncountrycode\"] = {\n          label: response[1].data[\"scountryname\"],\n          value: response[1].data[\"ncountrycode\"]\n        }; // countryCode.push({\n        //     label: response[1].data[\"scountryname\"],\n        //     value: response[1].data[\"ncountrycode\"]\n        // });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Country: countryList,\n          openChildModal: true,\n          operation,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": transactionStatus.ACTIVE,\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          countryCode: countryCode,\n          ncontrolCode,\n          screenName: \"IDS_SITEDETAILS\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getContactManufacturerLoadEdit(fetchRecord) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const ManufacturerContactByID = rsapi.post(\"/manufacturer/getContactManufacturerById\", {\n      \"nmanufcode\": fetchRecord.editRow.nmanufcode,\n      \"nmanufsitecode\": fetchRecord.editRow.nmanufsitecode,\n      \"nmanufcontactcode\": fetchRecord.editRow.nmanufcontactcode,\n      \"userinfo\": fetchRecord.userInfo\n    });\n    urlArray = [ManufacturerContactByID];\n    selectedId = fetchRecord.editRow.nmanufcontactcode;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          operation: fetchRecord.operation,\n          selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\n          defaultSite: fetchRecord.editRow.nmanufsitecode,\n          ncontrolCode: fetchRecord.ncontrolCode,\n          screenName: \"IDS_CONTACTDETAILS\",\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} // export function filterColumnDataManufacturer(filterValue, masterData, userInfo) {\n//     return function (dispatch) {  \n//         let manuFCode = 0;   \n//         let searchedData = undefined;\n//         if (filterValue === \"\"){\n//             manuFCode = masterData[\"Manufacturer\"][0].nmanufcode;\n//         }\n//         else{\n//             // if (filterValue.length > 2)\n//             // {\n//                 searchedData = searchData(filterValue, masterData[\"Manufacturer\"]);\n//                 if (searchedData.length > 0){\n//                     manuFCode = searchedData[0].nmanufcode; \n//                 }\n//             // }\n//         }\n//         if (manuFCode !== 0){\n//             dispatch(initRequest(true));\n//             return rsapi.post(\"manufacturer/getManufacturerWithSiteAndContactDetails\", {userInfo, nmanufcode:manuFCode})\n//             .then(response=>{         \n//                         masterData[\"ManufacturerSiteAddress\"] = response.data[\"ManufacturerSiteAddress\"];\n//                         masterData[\"ManufacturerContactInfo\"] = response.data[\"ManufacturerContactInfo\"];\n//                         masterData[\"selectedManufacturer\"] = response.data[\"selectedManufacturer\"];\n//                         masterData[\"SiteCode\"] = response.data[\"SiteCode\"];\n//                         masterData[\"searchedData\"] = searchedData;\n//                         dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}});       \n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 if (error.response.status === 500){\n//                     toast.error(error.message);\n//                 } \n//                 else{               \n//                     toast.warn(error.response.data);\n//                 }  \n//             }) \n//         } \n//         else{        \n//             masterData[\"ManufacturerSiteAddress\"] = [];\n//             masterData[\"ManufacturerContactInfo\"] = undefined;\n//             masterData[\"selectedManufacturer\"] = [];\n//             masterData[\"searchedData\"] = [];\n//             masterData[\"SiteCode\"]  = 0;\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}}); \n//         }           \n//     }   \n// } \n\nexport const addManufacturerFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/manufacturer/editManufacturerFile\", {\n        userinfo: inputParam.userInfo,\n        manufacturerfile: inputParam.selectedRecord\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sdescription,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"; //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\n\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename\n          };\n        }\n\n        selectedRecord = { ...link,\n          nmanufacturerfilecode: editObject.nmanufacturerfilecode,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          //...editObject,\n          nlinkcode // disabled: true\n\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [inputParam.modalName]: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ManufacturerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","Axios","initRequest","intl","toast","transactionStatus","attachmentType","getManfacturerCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","urlArray","CountryService","post","EDQMManufacturer","ManufacturerByID","selectedManufacturer","all","then","response","countryCode","countryMap","data","undefined","countryList","get","edqmManufacturer","selectedRecord","edqmManufacturerMap","edqmManufacturerList","label","value","type","payload","Country","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","selectCheckBoxManufacturer","Manufacturer","nmanufcode","selectedId","getContactInfo","SiteDetails","Map","parseInt","siteAddress","nmanufsitecode","ManufacturerContactInfo","selectedSite","SiteCode","dataState","getSiteManufacturerLoadEdit","manufCode","manufSiteCode","ManufacturerSiteByID","openChildModal","ACTIVE","NO","getContactManufacturerLoadEdit","fetchRecord","ManufacturerContactByID","editRow","nmanufcontactcode","defaultSite","addManufacturerFile","inputParam","userinfo","push","manufacturerfile","linkMap","LinkMaster","linkmaster","defaultLink","filter","items","item","ndefaultlink","YES","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sdescription","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","length","nmanufacturerfilecode","AttachmentType","FTP","modalName","linkMaster","showSaveContinue","editFiles"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, constructOptionList} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { toast } from 'react-toastify';\r\nimport { transactionStatus, attachmentType } from '../components/Enumeration';\r\n\r\nexport function getManfacturerCombo(screenName, operation, primaryKeyName,  masterData, userInfo, ncontrolCode) {\r\n return function(dispatch){ \r\n    let urlArray = [];\r\n    if (operation === \"create\") {\r\n        // const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", { \"userinfo\": userInfo });\r\n        const CountryService = rsapi.post(\"country/getCountry\", { \"userinfo\" : userInfo });\r\n        urlArray = [CountryService];\r\n    }\r\n    else {\r\n\r\n        const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", { \"userinfo\": userInfo });\r\n        const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n        urlArray = [EDQMManufacturer, ManufacturerByID];\r\n    }\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {\r\n\r\n            let countryCode = [];\r\n            const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\",\r\n            \"scountryname\", undefined, undefined, true);\r\n            const countryList = countryMap.get(\"OptionList\");\r\n\r\n            let edqmManufacturer = [];\r\n            let selectedRecord = {};\r\n\r\n            const edqmManufacturerMap = constructOptionList(response[0].data || [], \"nofficialmanufcode\",\r\n            \"sofficialmanufname\", undefined, undefined, false);\r\n\r\n            const edqmManufacturerList = edqmManufacturerMap.get(\"OptionList\");\r\n\r\n            if (operation === \"update\") {\r\n\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nofficialmanufcode\"] = {\r\n                    label: response[1].data[\"sofficialmanufname\"],\r\n                    value: response[1].data[\"nofficialmanufcode\"]\r\n                };\r\n                // edqmManufacturer.push({\r\n                //     label: response[1].data[\"sofficialmanufname\"],\r\n                //     value: response[1].data[\"nofficialmanufcode\"]\r\n                // });\r\n            }\r\n            dispatch({type: DEFAULT_RETURN, \r\n                payload:{  \r\n                edqmManufacturerList,Country: countryList,countryCode: countryCode,  isOpen: true,  \r\n                selectedRecord: operation === \"update\" ? selectedRecord : {\"ntransactionstatus\": 1}, \r\n                edqmManufacturer: edqmManufacturer ,\r\n                operation: operation,\r\n                     screenName: screenName,\r\n                    openModal : true, ncontrolCode: ncontrolCode, loading:false\r\n            }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function selectCheckBoxManufacturer(Manufacturer, userInfo, masterData){\r\n    return function(dispatch){ \r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"/manufacturer/getManufacturerWithSiteAndContactDetails\", { 'userinfo': userInfo, \"nmanufcode\": Manufacturer.nmanufcode })\r\n        \r\n    .then(response=>{      \r\n        masterData = {...masterData, ...response.data};        \r\n        sortData(masterData);\r\n        // console.log(\" Select Checked : \", masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false,selectedId:null}});   \r\n   })   \r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        })\r\n    }\r\n}\r\n\r\nexport function getContactInfo(SiteDetails, masterData){\r\n    return function(dispatch){ \r\n    let Map={};\r\n \r\n    Map[\"nmanufcode\"]=parseInt(SiteDetails.siteAddress.nmanufcode);\r\n    Map[\"nmanufsitecode\"]=parseInt(SiteDetails.siteAddress.nmanufsitecode);\r\n    Map[\"userinfo\"]=SiteDetails.userInfo\r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"/manufacturer/getContactManufacturerBySite\",Map)\r\n    .then(response =>{\r\n        // dispatch({type: DEFAULT_RETURN, payload:{\r\n        //     ManufacturerContactInfo :response.data,\r\n        //     SiteCode: SiteDetails.nmanufsitecode, loading:false\r\n        // }});   \r\n         \r\n        masterData = {...SiteDetails.masterData, ManufacturerContactInfo: response.data,\r\n            selectedSite:  SiteDetails.siteAddress,\r\n             SiteCode: SiteDetails.siteAddress.nmanufsitecode};     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false, dataState: undefined}}); \r\n\r\n    })\r\n    .catch(error =>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        // console.log(error);\r\n    })\r\n}\r\n}\r\n\r\nexport function getSiteManufacturerLoadEdit(screenName, operation, manufCode, manufSiteCode, ncontrolCode, userInfo){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedRecord = {};\r\n\r\n    if (operation === \"create\") {\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        urlArray = [Country];\r\n    }\r\n    else {\r\n\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        const ManufacturerSiteByID = rsapi.post(\"/manufacturer/getSiteManufacturerById\", { \"nmanufcode\": manufCode, \"nmanufsitecode\": manufSiteCode ,\"userinfo\": userInfo});\r\n        urlArray = [Country, ManufacturerSiteByID];\r\n    }\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {\r\n\r\n            let countryCode = [];\r\n\r\n            const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\",\r\n            \"scountryname\", undefined, undefined, true);\r\n\r\n            const countryList = countryMap.get(\"OptionList\");\r\n\r\n\r\n            if (operation === \"update\") {\r\n\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"ncountrycode\"] = {\r\n                    label: response[1].data[\"scountryname\"],\r\n                    value: response[1].data[\"ncountrycode\"]\r\n                };\r\n                // countryCode.push({\r\n                //     label: response[1].data[\"scountryname\"],\r\n                //     value: response[1].data[\"ncountrycode\"]\r\n                // });\r\n            }\r\n\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                Country: countryList, openChildModal:true, operation, \r\n                selectedRecord: operation === \"update\" ? selectedRecord : {\"ntransactionstatus\": transactionStatus.ACTIVE,\"ndefaultstatus\":transactionStatus.NO}, countryCode: countryCode, ncontrolCode,\r\n                screenName: \"IDS_SITEDETAILS\", loading:false\r\n             }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function getContactManufacturerLoadEdit(fetchRecord){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    const ManufacturerContactByID = rsapi.post(\"/manufacturer/getContactManufacturerById\", { \"nmanufcode\": fetchRecord.editRow.nmanufcode, \"nmanufsitecode\": fetchRecord.editRow.nmanufsitecode, \"nmanufcontactcode\": fetchRecord.editRow.nmanufcontactcode,\"userinfo\": fetchRecord.userInfo });\r\n    urlArray = [ManufacturerContactByID];\r\n    selectedId = fetchRecord.editRow.nmanufcontactcode;\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {            \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                openChildModal:true, operation:fetchRecord.operation, \r\n                selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\r\n          defaultSite: fetchRecord.editRow.nmanufsitecode, ncontrolCode:fetchRecord.ncontrolCode ,\r\n          screenName: \"IDS_CONTACTDETAILS\", loading:false, selectedId\r\n        }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// export function filterColumnDataManufacturer(filterValue, masterData, userInfo) {\r\n//     return function (dispatch) {  \r\n      \r\n//         let manuFCode = 0;   \r\n//         let searchedData = undefined;\r\n//         if (filterValue === \"\"){\r\n//             manuFCode = masterData[\"Manufacturer\"][0].nmanufcode;\r\n//         }\r\n//         else{\r\n//             // if (filterValue.length > 2)\r\n//             // {\r\n//                 searchedData = searchData(filterValue, masterData[\"Manufacturer\"]);\r\n            \r\n//                 if (searchedData.length > 0){\r\n//                     manuFCode = searchedData[0].nmanufcode; \r\n//                 }\r\n//             // }\r\n//         }\r\n     \r\n//         if (manuFCode !== 0){\r\n//             dispatch(initRequest(true));\r\n//             return rsapi.post(\"manufacturer/getManufacturerWithSiteAndContactDetails\", {userInfo, nmanufcode:manuFCode})\r\n//             .then(response=>{         \r\n//                         masterData[\"ManufacturerSiteAddress\"] = response.data[\"ManufacturerSiteAddress\"];\r\n//                         masterData[\"ManufacturerContactInfo\"] = response.data[\"ManufacturerContactInfo\"];\r\n//                         masterData[\"selectedManufacturer\"] = response.data[\"selectedManufacturer\"];\r\n//                         masterData[\"SiteCode\"] = response.data[\"SiteCode\"];\r\n//                         masterData[\"searchedData\"] = searchedData;\r\n\r\n//                         dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}});       \r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 if (error.response.status === 500){\r\n//                     toast.error(error.message);\r\n//                 } \r\n//                 else{               \r\n//                     toast.warn(error.response.data);\r\n//                 }  \r\n//             }) \r\n//         } \r\n//         else{        \r\n//             masterData[\"ManufacturerSiteAddress\"] = [];\r\n//             masterData[\"ManufacturerContactInfo\"] = undefined;\r\n//             masterData[\"selectedManufacturer\"] = [];\r\n//             masterData[\"searchedData\"] = [];\r\n//             masterData[\"SiteCode\"]  = 0;\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}}); \r\n//         }           \r\n//     }   \r\n// } \r\n\r\nexport const addManufacturerFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/manufacturer/editManufacturerFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                manufacturerfile: inputParam.selectedRecord\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename: editObject.sfilename,\r\n                            slinkdescription: editObject.sdescription,\r\n                            nlinkdefaultstatus: editObject.ndefaultstatus,\r\n                            sfilesize: '',\r\n                            nfilesize: 0,\r\n                            ndefaultstatus: 4,\r\n                            sfilename: '',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename: '',\r\n                            slinkdescription: '',\r\n                            nlinkdefaultstatus: 4,\r\n                            sfilesize: editObject.sfilesize,\r\n                            nfilesize: editObject.nfilesize,\r\n                            ndefaultstatus: editObject.ndefaultstatus,\r\n                            sfilename: editObject.sfilename,\r\n                        }\r\n                    }\r\n\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        nmanufacturerfilecode: editObject.nmanufacturerfilecode,\r\n                        nattachmenttypecode: editObject.nattachmenttypecode,\r\n                        //...editObject,\r\n                        nlinkcode,\r\n\r\n                        // disabled: true\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ?\r\n                            response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        [inputParam.modalName]: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}