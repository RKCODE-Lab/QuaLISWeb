{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nexport const SampleTypeFilterchange = (inputParam, filterSampleType) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registrationsubtypeconfigration/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      //const masterData = response.data\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterSampleType,\n            nfilterSampleType: inputParam.inputData.nfilterSampleType\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const getDepartmentData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    // if(instItem.ninstrumentstatus!==transactionStatus.Disposed){\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/registrationsubtypeconfigration/getDepartment\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo,\n      \"nregsubtypecode\": instItem.nregsubtypecode\n    }).then(response => {\n      const secMap = constructOptionList(response.data.Section || [], \"ndeptcode\", \"sdeptname\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      selectedRecord[\"ndeltacheck\"] = 3;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          Lab,\n          isOpen: true,\n          operation: \"create\",\n          screenName: screenName,\n          // openModal: true,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    }); //     }\n    // else{\n    //     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\n    // }\n  };\n};\nexport function getDepartmentBasedUser(ndeptcode, userInfo, selectedRecord, masterData, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"registrationsubtypeconfigration/getDepartmentBasedUser\", {\n      \"ndeptcode\": ndeptcode,\n      \"userinfo\": userInfo,\n      \"nregsubtypecode\": masterData.selectedRegSubType.nregsubtypecode\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_DEPARTMENT\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n        selectedRecord[\"nusercode\"] = undefined;\n      }\n\n      let isdisable = response.data.isdisable;\n\n      if (isdisable) {\n        selectedRecord[\"ndeltacheck\"] = 4;\n      } else {\n        selectedRecord[\"ndeltacheck\"] = 3;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          masterData: { ...masterData,\n            isdisable\n          },\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getUserroleData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    // if(instItem.ninstrumentstatus!==transactionStatus.Disposed){\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/registrationsubtypeconfigration/getUserRole\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo,\n      \"nregsubtypecode\": instItem.nregsubtypecode\n    }).then(response => {\n      const userroleMap = constructOptionList(response.data.UserRole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, false);\n      const Lab = userroleMap.get(\"OptionList\");\n      selectedRecord[\"ndeltacheck\"] = 3;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          Lab,\n          isOpen: true,\n          operation: \"create\",\n          screenName: screenName,\n          // openModal: true,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    }); //     }\n    // else{\n    //     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\n    // }\n  };\n};\nexport function getUserRoleBasedUser(nuserrolecode, userInfo, selectedRecord, masterData, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"registrationsubtypeconfigration/getUserRoleBasedUser\", {\n      \"nuserrolecode\": nuserrolecode,\n      \"userinfo\": userInfo,\n      \"nregsubtypecode\": masterData.selectedRegSubType.nregsubtypecode\n    }).then(response => {\n      let Users = [];\n      const userName = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = userName.get(\"OptionList\");\n      selectedRecord[\"nusercode\"] = undefined;\n      let isdisable = response.data.isdisable;\n\n      if (isdisable) {\n        selectedRecord[\"ndeltacheck\"] = 4;\n      } else {\n        selectedRecord[\"ndeltacheck\"] = 3;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            isdisable\n          },\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegtypeBasedSampleType(ndeptcode, userInfo, selectedRecord, masterData, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"registrationsubtypeconfigration/getRegtypeBasedSampleType\", {\n      \"nsampletype\": ndeptcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      // let masterData = {...masterData}\n      let responseData = { ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //masterData,   \n          masterData: { ...masterData,\n            ...responseData\n          },\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTabdetails(regsubtype, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let tabdetails = {\n      nregtypecode: regsubtype.nregtypecode,\n      nregsubtypecode: regsubtype.nregsubtypecode,\n      nsampletypecode: regsubtype.nsampletypecode,\n      ntransfiltertypecode: regsubtype.ntransfiltertypecode\n    };\n    return rsapi.post(\"registrationsubtypeconfigration/getTabdetails\", {\n      tabdetails: tabdetails,\n      userinfo: userInfo,\n      nregsubtypecode: regsubtype.nregsubtypecode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getListofUsers = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/registrationsubtypeconfigration/getListofUsers\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo,\n      \"nregsubtypecode\": instItem.nregsubtypecode\n    }).then(response => {\n      let Users = [];\n      const userName = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n      selectedRecord[\"nusercode\"] = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          Users,\n          isOpen: true,\n          operation: \"create\",\n          screenName: screenName,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/RegistrationSubtypeConfigrationAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","initRequest","toast","SampleTypeFilterchange","inputParam","filterSampleType","dispatch","post","methodUrl","inputData","then","response","masterData","data","type","payload","loading","dataState","undefined","nfilterSampleType","catch","error","message","getDepartmentData","instItem","url","key","screenName","userInfo","ncontrolCode","selectedRecord","nregsubtypecode","secMap","Section","Lab","get","isOpen","operation","openChildModal","status","info","getDepartmentBasedUser","ndeptcode","selectedRegSubType","Users","userName","isdisable","warn","getUserroleData","userroleMap","UserRole","getUserRoleBasedUser","nuserrolecode","getRegtypeBasedSampleType","responseData","getTabdetails","regsubtype","tabdetails","nregtypecode","nsampletypecode","ntransfiltertypecode","userinfo","modalName","getListofUsers"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData,constructOptionList } from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nexport const SampleTypeFilterchange = (inputParam, filterSampleType) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registrationsubtypeconfigration/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                //const masterData = response.data\r\n                const masterData = {...inputParam.masterData,...response.data}\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterSampleType,\r\n                            nfilterSampleType: inputParam.inputData.nfilterSampleType\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const getDepartmentData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n       // if(instItem.ninstrumentstatus!==transactionStatus.Disposed){\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/registrationsubtypeconfigration/getDepartment\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo,\"nregsubtypecode\":instItem.nregsubtypecode\r\n            })\r\n            .then(response => {\r\n\r\n                const secMap = constructOptionList(response.data.Section || [], \"ndeptcode\",\r\n                    \"sdeptname\", undefined, undefined, false);\r\n                \r\n                const Lab = secMap.get(\"OptionList\");\r\n                selectedRecord[\"ndeltacheck\"] = 3;\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        Lab,                       \r\n                        isOpen: true,                        \r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal:true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n//     }\r\n\r\n// else{\r\n//     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n// }\r\n}\r\n}\r\n\r\n\r\n\r\nexport function getDepartmentBasedUser(ndeptcode, userInfo, selectedRecord, masterData, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"registrationsubtypeconfigration/getDepartmentBasedUser\", {\r\n                \"ndeptcode\": ndeptcode, \r\n                \"userinfo\": userInfo,\r\n                \"nregsubtypecode\":masterData.selectedRegSubType.nregsubtypecode\r\n            }\r\n            )\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                if (screenName === \"IDS_DEPARTMENT\") {\r\n                    //let sectionusers=[];\r\n                    const userName = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"]=\"\";\r\n                    selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n                } else {\r\n                    Users = response.data;\r\n                    selectedRecord[\"nusercode\"] = undefined;\r\n                }\r\n                let isdisable= response.data.isdisable;\r\n                if(isdisable)\r\n                {\r\n                    selectedRecord[\"ndeltacheck\"]=4\r\n                }\r\n                else{\r\n                    selectedRecord[\"ndeltacheck\"]=3\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                       masterData:{...masterData,isdisable},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const getUserroleData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n       // if(instItem.ninstrumentstatus!==transactionStatus.Disposed){\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/registrationsubtypeconfigration/getUserRole\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo,\"nregsubtypecode\":instItem.nregsubtypecode\r\n            })\r\n            .then(response => {\r\n\r\n                const userroleMap = constructOptionList(response.data.UserRole || [], \"nuserrolecode\",\r\n                    \"suserrolename\", undefined, undefined, false);\r\n                \r\n                const Lab = userroleMap.get(\"OptionList\");\r\n                selectedRecord[\"ndeltacheck\"] = 3;\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        Lab,                       \r\n                        isOpen: true,                        \r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        // openModal: true,\r\n                        openChildModal:true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n//     }\r\n\r\n// else{\r\n//     toast.warn(intl.formatMessage({ id: \"IDS_DISPOSEDINSTRUMENT\"}));\r\n// }\r\n}\r\n}\r\n\r\n\r\nexport function getUserRoleBasedUser(nuserrolecode, userInfo, selectedRecord, masterData, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"registrationsubtypeconfigration/getUserRoleBasedUser\", {\r\n                \"nuserrolecode\": nuserrolecode, \r\n                \"userinfo\": userInfo,\r\n                \"nregsubtypecode\":masterData.selectedRegSubType.nregsubtypecode\r\n            }\r\n            )\r\n            .then(response => {\r\n                \r\n                let Users = [];\r\n                const userName = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n            Users = userName.get(\"OptionList\");\r\n            selectedRecord[\"nusercode\"] = undefined;\r\n            let isdisable= response.data.isdisable;\r\n            if(isdisable)\r\n            {\r\n                selectedRecord[\"ndeltacheck\"]=4\r\n            }\r\n            else{\r\n                selectedRecord[\"ndeltacheck\"]=3\r\n            }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,isdisable},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getRegtypeBasedSampleType(ndeptcode, userInfo, selectedRecord, masterData, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"registrationsubtypeconfigration/getRegtypeBasedSampleType\", {\r\n                \"nsampletype\": ndeptcode, \r\n                \"userinfo\": userInfo,\r\n            }\r\n            )\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n               // let masterData = {...masterData}\r\n                let responseData = { ...response.data }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        //masterData,   \r\n                        masterData: {...masterData,...responseData\r\n                        },                 \r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTabdetails(regsubtype, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let tabdetails={ nregtypecode: regsubtype.nregtypecode,nregsubtypecode: regsubtype.nregsubtypecode,nsampletypecode: regsubtype.nsampletypecode,ntransfiltertypecode:regsubtype.ntransfiltertypecode}\r\n        return rsapi.post(\"registrationsubtypeconfigration/getTabdetails\", {\r\n                tabdetails: tabdetails,\r\n                userinfo: userInfo,\r\n                nregsubtypecode: regsubtype.nregsubtypecode\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getListofUsers = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/registrationsubtypeconfigration/getListofUsers\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo,\"nregsubtypecode\":instItem.nregsubtypecode\r\n            })\r\n            .then(response => {\r\n\r\n                let Users = [];\r\n                const userName = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n                Users = userName.get(\"OptionList\");\r\n                //selectedRecord[\"nusercode\"]=\"\";\r\n                selectedRecord[\"nusercode\"] = undefined; \r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        Users,                       \r\n                        isOpen: true,                        \r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        openChildModal:true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}