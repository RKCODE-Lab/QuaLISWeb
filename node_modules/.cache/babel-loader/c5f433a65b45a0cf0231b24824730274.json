{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterPopUp.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Nav } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { TreeDesign, HeaderSpan } from './registration.styled';\nimport './registration.css';\nimport { ProductList } from '../product/product.styled';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCartArrowDown, faFileImport, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ReactTooltip from 'react-tooltip';\nimport { process } from '@progress/kendo-data-query';\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { toast } from 'react-toastify';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { RegistrationSubType, RegistrationType } from '../../components/Enumeration'; //import { Label } from 'reactstrap';\n\nclass PreRegisterPopUp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.columnlist = (RealRegTypeValue, RealRegSubTypeValue, RegistrationType, RegistrationSubType) => {\n      let BatchColumnList = [];\n\n      if (RealRegTypeValue.nregtypecode === RegistrationType.BATCH && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL || RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\n        BatchColumnList = [{\n          \"idsName\": \"IDS_COMPONENTNAME\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_MANUFLOTNO\",\n          \"dataField\": \"smanuflotno\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_STORAGECONDITION\",\n          \"dataField\": \"sstorageconditionname\",\n          width: \"150px\"\n        }, {\n          \"idsName\": \"IDS_STORAGELOCATION\",\n          \"dataField\": \"sstoragelocationname\",\n          width: \"150px\"\n        }, {\n          \"idsName\": \"IDS_NOOFCONTAINER\",\n          \"dataField\": \"nnoofcontainer\",\n          width: \"150px\"\n        }, {\n          \"idsName\": \"IDS_DATERECEIVED\",\n          \"dataField\": \"sreceiveddate\",\n          width: \"250px\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"scomments\",\n          width: \"200px\"\n        }];\n      } else if (RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\n        BatchColumnList = [{\n          \"idsName\": \"IDS_COMPONENTNAME\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_MANUFLOTNO\",\n          \"dataField\": \"smanuflotno\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_NOOFCONTAINER\",\n          \"dataField\": \"nnoofcontainer\",\n          width: \"150px\"\n        }, {\n          \"idsName\": \"IDS_POOLBULKVOLUME\",\n          \"dataField\": \"sbulkvolume\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_PLASMAFILENUMBER\",\n          \"dataField\": \"splasmafilenumber\",\n          width: \"200px\"\n        }];\n      } else if (RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.PROTOCOL || RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.EXTERNAL_POOL) {\n        BatchColumnList = [{\n          \"idsName\": \"IDS_COMPONENTNAME\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_MANUFLOTNO\",\n          \"dataField\": \"smanuflotno\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_DATERECEIVED\",\n          \"dataField\": \"sreceiveddate\",\n          width: \"250px\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"scomments\",\n          width: \"200px\"\n        }];\n      } else {\n        BatchColumnList = [{\n          \"idsName\": \"IDS_COMPONENTNAME\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_MANUFLOTNO\",\n          \"dataField\": \"smanuflotno\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_NOOFCONTAINER\",\n          \"dataField\": \"nnoofcontainer\",\n          width: \"150px\"\n        }, {\n          \"idsName\": \"IDS_POOLBULKVOLUME\",\n          \"dataField\": \"sbulkvolume\",\n          width: \"200px\"\n        }, {\n          \"idsName\": \"IDS_PLASMAFILENUMBER\",\n          \"dataField\": \"splasmafilenumber\",\n          width: \"200px\"\n        }];\n      }\n\n      return BatchColumnList;\n    };\n\n    this.state = {\n      selectedTestItem: [],\n      selectedSourceItem: [],\n      selectedTest: []\n    };\n  }\n\n  render() {\n    const getComponent = (event, selectedRecord) => {\n      let booleanFlag = true;\n\n      if (this.props.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n        if (selectedRecord.nmanufcode === undefined) {\n          booleanFlag = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMANUFACTURER\"\n          }));\n        }\n      }\n\n      if (booleanFlag) {\n        if (selectedRecord.nallottedspeccode !== undefined && selectedRecord.nallottedspeccode !== \"\") {\n          if (this.props.Component.length > 0) {\n            this.props.ConfirmComponent(selectedRecord);\n          } else {\n            this.props.getComponentfromJava(selectedRecord);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          })); //\"Select Specification\"\n        }\n      }\n    }; // const BatchColumnList = [\n    //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\n    // ];\n\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }]; // const plasmaColumnList = [\n    //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_POOL/BULKVOLUME\", \"dataField\": \"spoolbulkvolume\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", width: \"200px\" },\n    // ];\n    // const externalColumnList = [\n    //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"dreceiveddate\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\n    // ];\n\n    const countryColumnList = [{\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"scountryname\",\n      width: \"150px\"\n    }];\n    const {\n      ProductCategory,\n      Product,\n      Goodsin,\n      EProtocol,\n      Manufacturer,\n      Specification,\n      Component,\n      selectedTest,\n      Client,\n      RealRegTypeValue,\n      RealRegSubTypeValue,\n      SelectedSource,\n      ProductMaholder,\n      AgaramTree,\n      OpenNodes,\n      FocusKey,\n      ActiveKey\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL && /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_RMSNO\"\n      }),\n      isSearchable: true,\n      name: \"nrmsno\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: Goodsin,\n      alphabeticalSort: \"true\",\n      optionId: \"nrmsno\",\n      optionValue: \"nrmsno\",\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"nrmsno\"] : \"\",\n      defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"nrmsno\"] : \"\" //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onComboChange(event, 'nrmsno'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PRODUCTCATEGORY\"\n      }),\n      isSearchable: true,\n      name: \"nproductcatcode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: ProductCategory,\n      alphabeticalSort: \"true\",\n      optionId: \"nproductcatcode\",\n      optionValue: \"sproductcatname\",\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"nproductcatcode\"] : \"\",\n      defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"nproductcatcode\"] : \"\" //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onproductCategoryChange(event, 'nproductcatcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PRODUCT\"\n      }),\n      isSearchable: true,\n      name: \"nproductcode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: Product,\n      alphabeticalSort: \"true\",\n      optionId: \"nproductcode\",\n      optionValue: \"sproductname\",\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"nproductcode\"] : \"\",\n      defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"nproductcode\"] : \"\" //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onProductChange(event, 'nproductcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MultiColumnComboSearch, {\n      data: Manufacturer,\n      visibility: \"show-all\",\n      labelledBy: \"IDS_MANUFNAME\",\n      fieldToShow: [\"smanufname\", \"smanufsitename\", \"seprotocolname\"],\n      selectedId: [this.props.selectedRecord[\"nmanufcode\"]],\n      value: this.props.selectedRecord ? [this.props.selectedRecord] : [],\n      isMandatory: true,\n      showInputkey: \"smanufname\",\n      idslabelfield: [\"IDS_MANUFACTURERNAME\", \"IDS_SITENAME\", \"IDS_EPROTOCOL\"],\n      getValue: value => this.props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"]),\n      singleSelection: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_MANUFACTURERSITE\"\n      }),\n      name: \"smanufsitename\",\n      type: \"text\",\n      maxLength: \"100\",\n      isMandatory: true,\n      value: this.props.selectedRecord[\"smanufsitename\"] || [],\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_MANUFACTURERSITE\"\n      }),\n      isDisabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_EPROTOCOL\"\n      }),\n      isSearchable: true,\n      name: \"neprotocolcode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: false,\n      options: EProtocol,\n      alphabeticalSort: \"true\",\n      optionId: \"neprotocolcode\",\n      optionValue: \"seprotocolname\",\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"neprotocolcode\"] : \"\",\n      defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"neprotocolcode\"] : \"\" //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onComboChange(event, 'neprotocolcode'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 29\n      }\n    })), RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(MultiColumnComboSearch, {\n      data: ProductMaholder,\n      visibility: \"show-all\",\n      labelledBy: \"IDS_MAHOLDERNAME\",\n      fieldToShow: [\"smahname\", \"slicencenumber\", \"sdosagepercontainer\"],\n      selectedId: [this.props.selectedRecord[\"nproductmahcode\"]],\n      value: this.props.selectedRecord ? [this.props.selectedRecord] : [],\n      showInputkey: \"smahname\",\n      idslabelfield: [\"IDS_MAHNAME\", \"IDS_LICENSENUMBER\", \"IDS_DOSAGEPERCONTAINER\"],\n      getValue: value => this.props.onMultiColumnMAHChange(value, [\"nproductmahcode\", \"smahname\"]),\n      singleSelection: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 37\n      }\n    }))), RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_CLIENTNAME\"\n      }),\n      isSearchable: true,\n      name: \"nclientcode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: false,\n      isClearable: true,\n      options: Client // alphabeticalSort=\"true\"\n      // optionId=\"nclientcode\"\n      // optionValue=\"sclientname\"\n      ,\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"nclientcode\"] : \"\" //defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nclientcode\"] : \"\"}\n      //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onClientComboChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_CLIENTSITENAME\"\n      }),\n      name: \"sclientsitename\",\n      type: \"text\",\n      maxLength: \"100\",\n      value: this.props.selectedRecord[\"saddress1\"] || [],\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_CLIENTSITENAME\"\n      }),\n      isDisabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"r_treepadding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TreeDesign, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 29\n      }\n    }, AgaramTree && AgaramTree.length > 0 && /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n      data: AgaramTree,\n      handleTreeClick: this.props.onTreeClick // openNodes={OpenNodes}\n      ,\n      hasSearch: false,\n      initialOpenNodes: OpenNodes // initialFocusKey={InitialFocusKey}\n      // initialActiveKey={InitialActiveKey}\n      ,\n      focusKey: FocusKey || \"\",\n      activeKey: ActiveKey || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TESTGROUP\"\n      }),\n      isSearchable: true,\n      name: \"nallottedspeccode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_TESTGROUP\"\n      }),\n      isMandatory: true,\n      options: Specification,\n      alphabeticalSort: \"true\",\n      optionId: \"nallottedspeccode\",\n      optionValue: \"sspecname\",\n      value: this.props.selectedRecord ? this.props.selectedRecord[\"nallottedspeccode\"] : \"\",\n      defaultValue: this.props.selectedRecord ? this.props.selectedRecord[\"nallottedspeccode\"] : \"\" //  showOption={true}\n      ,\n      closeMenuOnSelect: true,\n      onChange: event => this.props.onspecChange(event, ['nallottedspeccode', 'sversionno']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      name: \"sversion\",\n      type: \"text\",\n      maxLength: \"100\",\n      value: this.props.selectedRecord[\"sversion\"] || [],\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      isDisabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"actioncolor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex justify-content-end dropdown badget_menu hideboxshadow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      name: \"ntransactionstatus\",\n      type: \"switch\",\n      parentClassName: \"customswitchcss\",\n      labelClassName: \"mb-0 paddingleft5\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ALLTEST\"\n      }),\n      placeholder: this.props.formatMessage({\n        id: \"IDS_ALLTEST\"\n      }),\n      defaultValue: this.props.selectedRecord[\"ntransactionstatus\"] === 3 ? true : false,\n      isMandatory: false,\n      required: false,\n      checked: this.props.selectedRecord[\"ntransactionstatus\"] === 3 ? true : false,\n      onChange: event => this.props.onInputOnChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle mr-2 mt-2 action-icons-wrap iconsize iconmargin\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_GETCOMPONENTS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCartArrowDown,\n      className: \"ActionIconColor\",\n      onClick: event => getComponent(event, this.props.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle mr-2 mt-2 action-icons-wrap iconsize iconmargin\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_IMPORTEXCEL\"\n      }),\n      hidden: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      className: \"ActionIconColor\",\n      onClick: event => this.props.AddFile(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 33\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(HeaderSpan, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMPONENT\",\n      defaultMessage: \"Component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn text-right\" // onClick={RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? (e) => this.props.addComponentTest(e) : (e) => this.props.AddComponent(e)} \n      ,\n      onClick: e => this.props.AddComponent(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMPONENT\",\n      defaultMessage: \"Component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"slno\",\n      primaryKeyField: \"slno\",\n      selectedId: this.props.selectedComponent.slno // data={selectedTest}\n      ,\n      dataResult: process(Component || [], this.props.componentDataState),\n      dataState: this.props.componentDataState,\n      dataStateChange: this.props.componentDataStateChange,\n      extractedColumnList: this.columnlist(RealRegTypeValue, RealRegSubTypeValue, RegistrationType, RegistrationSubType),\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      hasControlWithOutRights: true,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      plasmaMasterFile: this.props.plasmaMasterFile,\n      handleRowClick: this.props.selectComponent,\n      methodUrl: \"PopUp\",\n      gridHeight: \"350px\",\n      editRecordWORights: this.props.editComponent,\n      deleteRecordWORights: this.props.deleteComponent,\n      showdeleteRecordWORights: true,\n      showeditRecordWORights: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? 8 : 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(HeaderSpan, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 33\n      }\n    }, \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEST\",\n      defaultMessage: \"Test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 46\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn text-right\",\n      onClick: () => this.props.addComponentTest(this.props.selectedComponent),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEST\",\n      defaultMessage: \"Test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"ntestgrouptestcode\",\n      primaryKeyField: \"ntestgrouptestcode\",\n      selectedId: this.state.selectedTestItem.ntestgrouptestcode // data={selectedTest}\n      ,\n      dataResult: process(selectedTest || [], this.props.popUptestDataState),\n      dataState: this.props.popUptestDataState,\n      dataStateChange: this.props.testdataStateChange,\n      extractedColumnList: testColumnList,\n      controlMap: new Map(),\n      userRoleControlRights: this.props.userRoleControlRights,\n      hasControlWithOutRights: true,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: true // handleRowClick={this.handleRowClick}\n      ,\n      methodUrl: \"PopUp\",\n      gridHeight: \"400px\",\n      deleteRecordWORights: this.props.deleteTest,\n      showdeleteRecordWORights: true,\n      showeditRecordWORights: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 25\n      }\n    })), RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(HeaderSpan, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 37\n      }\n    }, \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SOURCE\",\n      defaultMessage: \"Source\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 50\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn text-right\",\n      onClick: () => this.props.addComponentSource(this.props.selectedComponent),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SOURCE\",\n      defaultMessage: \"IDS_SOURCE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      key: \"ncountrycode\",\n      primaryKeyField: \"ncountrycode\",\n      selectedId: this.state.selectedSourceItem.ncountrycode // data={selectedTest}\n      ,\n      dataResult: process(SelectedSource || [], this.props.popUpsourceDataState),\n      dataState: this.props.popUpsourceDataState,\n      dataStateChange: this.props.popUpsourceDataStateChange,\n      extractedColumnList: countryColumnList,\n      controlMap: new Map(),\n      userRoleControlRights: this.props.userRoleControlRights,\n      hasControlWithOutRights: true,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      pageable: false,\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      handleRowClick: this.handleRowClick,\n      methodUrl: \"PopUp\",\n      gridHeight: \"400px\",\n      deleteRecordWORights: this.props.deleteSource,\n      showdeleteRecordWORights: true,\n      showeditRecordWORights: false,\n      actionColWidth: \"100px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 29\n      }\n    }))));\n  } // componentDidUpdate(previousProps) {\n  //     if (this.state.selectedTest !== this.props.selectedTest) {\n  //         this.setState({ selectedTestItem: this.props.selectedTest.length > 0 ? this.props.selectedTest[this.props.selectedTest.length - 1] : [], selectedTest: this.props.selectedTest });\n  //     } else if (this.props.SelectedSource !== previousProps.SelectedSource) {\n  //         this.setState({ selectedSourceItem: this.props.SelectedSource.length > 0 ? this.props.SelectedSource[this.props.SelectedSource.length - 1] : [], SelectedSource: this.props.SelectedSource });\n  //     }\n  // }\n  // handleRowClick = (event) => {\n  //     this.setState({ selectedTestItem: event.dataItem })\n  // }\n\n\n}\n\nexport default injectIntl(PreRegisterPopUp);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterPopUp.jsx"],"names":["React","Component","Row","Col","Nav","FormSelectSearch","FormInput","TreeDesign","HeaderSpan","ProductList","FontAwesomeIcon","faCartArrowDown","faFileImport","faPlus","FormattedMessage","injectIntl","ReactTooltip","process","MultiColumnComboSearch","CustomSwitch","toast","FormTreeMenu","DataGrid","PerfectScrollbar","RegistrationSubType","RegistrationType","PreRegisterPopUp","constructor","props","columnlist","RealRegTypeValue","RealRegSubTypeValue","BatchColumnList","nregtypecode","BATCH","nregsubtypecode","PROTOCOL","NON_BATCH","width","PLASMA_POOL","EXTERNAL_POOL","state","selectedTestItem","selectedSourceItem","selectedTest","render","getComponent","event","selectedRecord","booleanFlag","nmanufcode","undefined","warn","intl","formatMessage","id","nallottedspeccode","length","ConfirmComponent","getComponentfromJava","testColumnList","countryColumnList","ProductCategory","Product","Goodsin","EProtocol","Manufacturer","Specification","Client","SelectedSource","ProductMaholder","AgaramTree","OpenNodes","FocusKey","ActiveKey","onComboChange","onproductCategoryChange","onProductChange","value","onMultiColumnValue","onInputOnChange","onMultiColumnMAHChange","onClientComboChange","onTreeClick","onspecChange","display","AddFile","e","AddComponent","selectedComponent","slno","componentDataState","componentDataStateChange","controlMap","userRoleControlRights","inputParam","userInfo","plasmaMasterFile","selectComponent","editComponent","deleteComponent","addComponentTest","ntestgrouptestcode","popUptestDataState","testdataStateChange","Map","deleteTest","addComponentSource","ncountrycode","popUpsourceDataState","popUpsourceDataStateChange","handleRowClick","deleteSource"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,QAA8B,iBAA9B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,uBAAvC;AACA,OAAO,oBAAP;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,MAAxC,QAAsD,mCAAtD;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C,C,CACA;;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,sBAAP,MAAmC,sEAAnC;AAGA,OAAOC,YAAP,MAAyB,wDAAzB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,YAAP,MAAyB,0DAAzB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,8BAAtD,C,CACA;;AAGA,MAAMC,gBAAN,SAA+BzB,SAA/B,CAAyC;AACrC0B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4dnBC,UA5dmB,GA4dN,CAACC,gBAAD,EAAmBC,mBAAnB,EAAwCN,gBAAxC,EAA0DD,mBAA1D,KAAkF;AAC3F,UAAIQ,eAAe,GAAG,EAAtB;;AACA,UAAMF,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACS,KAAnD,IAA4DH,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACY,QAAzH,IACGN,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACY,SAD3D,EACwE;AACpEL,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEM,UAAAA,KAAK,EAAE;AAAxE,SADc,EAEd;AAAE,qBAAW,gBAAb;AAA+B,uBAAa,aAA5C;AAA2DA,UAAAA,KAAK,EAAE;AAAlE,SAFc,EAGd;AAAE,qBAAW,sBAAb;AAAqC,uBAAa,uBAAlD;AAA2EA,UAAAA,KAAK,EAAE;AAAlF,SAHc,EAId;AAAE,qBAAW,qBAAb;AAAoC,uBAAa,sBAAjD;AAAyEA,UAAAA,KAAK,EAAE;AAAhF,SAJc,EAKd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEA,UAAAA,KAAK,EAAE;AAAxE,SALc,EAMd;AAAE,qBAAW,kBAAb;AAAiC,uBAAa,eAA9C;AAA+DA,UAAAA,KAAK,EAAE;AAAtE,SANc,EAOd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,WAA1C;AAAuDA,UAAAA,KAAK,EAAE;AAA9D,SAPc,CAAlB;AAWH,OAbD,MAaO,IAAIR,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACc,WAAnD,IAAkER,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACgB,aAAlI,EAAiJ;AACpJR,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEM,UAAAA,KAAK,EAAE;AAAxE,SADc,EAEd;AAAE,qBAAW,gBAAb;AAA+B,uBAAa,aAA5C;AAA2DA,UAAAA,KAAK,EAAE;AAAlE,SAFc,EAGd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEA,UAAAA,KAAK,EAAE;AAAxE,SAHc,EAId;AAAE,qBAAW,oBAAb;AAAmC,uBAAa,aAAhD;AAA+DA,UAAAA,KAAK,EAAE;AAAtE,SAJc,EAKd;AAAE,qBAAW,sBAAb;AAAqC,uBAAa,mBAAlD;AAAuEA,UAAAA,KAAK,EAAE;AAA9E,SALc,CAAlB;AAQH,OATM,MASA,IAAIP,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACY,QAA5D,IAAwEL,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACgB,aAAxI,EAAuJ;AAC1JR,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEM,UAAAA,KAAK,EAAE;AAAxE,SADc,EAEd;AAAE,qBAAW,gBAAb;AAA+B,uBAAa,aAA5C;AAA2DA,UAAAA,KAAK,EAAE;AAAlE,SAFc,EAGd;AAAE,qBAAW,kBAAb;AAAiC,uBAAa,eAA9C;AAA+DA,UAAAA,KAAK,EAAE;AAAtE,SAHc,EAId;AAAE,qBAAW,cAAb;AAA6B,uBAAa,WAA1C;AAAuDA,UAAAA,KAAK,EAAE;AAA9D,SAJc,CAAlB;AAMH,OAPM,MAOA;AACHN,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEM,UAAAA,KAAK,EAAE;AAAxE,SADc,EAEd;AAAE,qBAAW,gBAAb;AAA+B,uBAAa,aAA5C;AAA2DA,UAAAA,KAAK,EAAE;AAAlE,SAFc,EAGd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiEA,UAAAA,KAAK,EAAE;AAAxE,SAHc,EAId;AAAE,qBAAW,oBAAb;AAAmC,uBAAa,aAAhD;AAA+DA,UAAAA,KAAK,EAAE;AAAtE,SAJc,EAKd;AAAE,qBAAW,sBAAb;AAAqC,uBAAa,mBAAlD;AAAuEA,UAAAA,KAAK,EAAE;AAA9E,SALc,CAAlB;AAOH;;AAED,aAAON,eAAP;AAEH,KAvgBkB;;AAEf,SAAKS,KAAL,GAAa;AACTC,MAAAA,gBAAgB,EAAE,EADT;AAETC,MAAAA,kBAAkB,EAAE,EAFX;AAGTC,MAAAA,YAAY,EAAE;AAHL,KAAb;AAKH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,cAAR,KAA2B;AAC5C,UAAIC,WAAW,GAAG,IAAlB;;AACA,UAAI,KAAKrB,KAAL,CAAWE,gBAAX,CAA4BG,YAA5B,KAA6CR,gBAAgB,CAACc,WAAlE,EAA+E;AAC3E,YAAIS,cAAc,CAACE,UAAf,KAA8BC,SAAlC,EAA6C;AACzCF,UAAAA,WAAW,GAAG,KAAd;AACA7B,UAAAA,KAAK,CAACgC,IAAN,CAAW,KAAKxB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ;;AACD,UAAIN,WAAJ,EAAiB;AACb,YAAID,cAAc,CAACQ,iBAAf,KAAqCL,SAArC,IAAkDH,cAAc,CAACQ,iBAAf,KAAqC,EAA3F,EAA+F;AAC3F,cAAI,KAAK5B,KAAL,CAAW3B,SAAX,CAAqBwD,MAArB,GAA8B,CAAlC,EAAqC;AACjC,iBAAK7B,KAAL,CAAW8B,gBAAX,CAA4BV,cAA5B;AACH,WAFD,MAEO;AACH,iBAAKpB,KAAL,CAAW+B,oBAAX,CAAgCX,cAAhC;AACH;AAEJ,SAPD,MAOO;AACH5B,UAAAA,KAAK,CAACgC,IAAN,CAAW,KAAKxB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX,EADG,CAC2E;AACjF;AACJ;AAEJ,KArBD,CADK,CAuBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAMK,cAAc,GAAG,CACnB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,cAA1C;AAA0DtB,MAAAA,KAAK,EAAE;AAAjE,KADmB,EAEnB;AAAE,iBAAW,aAAb;AAA4B,mBAAa,cAAzC;AAAyDA,MAAAA,KAAK,EAAE;AAAhE,KAFmB,EAGnB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,aAAxC;AAAuDA,MAAAA,KAAK,EAAE;AAA9D,KAHmB,EAInB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,aAAxC;AAAuDA,MAAAA,KAAK,EAAE;AAA9D,KAJmB,EAKnB;AAAE,iBAAW,wBAAb;AAAuC,mBAAa,oBAApD;AAA0EA,MAAAA,KAAK,EAAE;AAAjF,KALmB,CAAvB,CAhCK,CAsCL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMuB,iBAAiB,GAAG,CACtB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,cAAxC;AAAwDvB,MAAAA,KAAK,EAAE;AAA/D,KADsB,CAA1B;AAGA,UAAM;AAAEwB,MAAAA,eAAF;AAAmBC,MAAAA,OAAnB;AAA4BC,MAAAA,OAA5B;AAAqCC,MAAAA,SAArC;AAAgDC,MAAAA,YAAhD;AAA8DC,MAAAA,aAA9D;AAA6ElE,MAAAA,SAA7E;AACF2C,MAAAA,YADE;AACYwB,MAAAA,MADZ;AACoBtC,MAAAA,gBADpB;AAEFC,MAAAA,mBAFE;AAEmBsC,MAAAA,cAFnB;AAEmCC,MAAAA,eAFnC;AAEoDC,MAAAA,UAFpD;AAEgEC,MAAAA,SAFhE;AAE2EC,MAAAA,QAF3E;AAEqFC,MAAAA;AAFrF,QAEmG,KAAK9C,KAF9G;AAIA,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMG,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACY,QAA5D,IAAwEL,mBAAmB,CAACI,eAApB,KAAwCX,mBAAmB,CAACgB,aAArI,iBACG,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,QAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAES,OAPb;AAQI,MAAA,gBAAgB,EAAC,MARrB;AASI,MAAA,QAAQ,EAAC,QATb;AAUI,MAAA,WAAW,EAAC,QAVhB;AAWI,MAAA,KAAK,EAAE,KAAKpC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,QAA1B,CAA5B,GAAkE,EAX7E;AAYI,MAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,QAA1B,CAA5B,GAAkE,EAZpF,CAaI;AAbJ;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAW+C,aAAX,CAAyB5B,KAAzB,EAAgC,QAAhC,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFR,eAsBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,iBAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAEO,eAPb;AAQI,MAAA,gBAAgB,EAAC,MARrB;AASI,MAAA,QAAQ,EAAC,iBATb;AAUI,MAAA,WAAW,EAAC,iBAVhB;AAWI,MAAA,KAAK,EAAE,KAAKlC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,iBAA1B,CAA5B,GAA2E,EAXtF;AAYI,MAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,iBAA1B,CAA5B,GAA2E,EAZ7F,CAaI;AAbJ;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWgD,uBAAX,CAAmC7B,KAAnC,EAA0C,iBAA1C,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAtBJ,eA0CI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,cAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAEQ,OAPb;AAQI,MAAA,gBAAgB,EAAC,MARrB;AASI,MAAA,QAAQ,EAAC,cATb;AAUI,MAAA,WAAW,EAAC,cAVhB;AAWI,MAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,cAA1B,CAA5B,GAAwE,EAXnF;AAYI,MAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,cAA1B,CAA5B,GAAwE,EAZ1F,CAaI;AAbJ;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWiD,eAAX,CAA2B9B,KAA3B,EAAkC,cAAlC,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CA1CJ,eA8DI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEmB,YAA9B;AACI,MAAA,UAAU,EAAC,UADf;AAEI,MAAA,UAAU,EAAC,eAFf;AAGI,MAAA,WAAW,EAAE,CAAC,YAAD,EAAe,gBAAf,EAAiC,gBAAjC,CAHjB;AAII,MAAA,UAAU,EAAE,CAAC,KAAKtC,KAAL,CAAWoB,cAAX,CAA0B,YAA1B,CAAD,CAJhB;AAKI,MAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,CAAC,KAAKpB,KAAL,CAAWoB,cAAZ,CAA5B,GAA0D,EALrE;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,YAAY,EAAC,YAPjB;AAQI,MAAA,aAAa,EAAE,CAAC,sBAAD,EAAyB,cAAzB,EAAyC,eAAzC,CARnB;AASI,MAAA,QAAQ,EAAG8B,KAAD,IAAW,KAAKlD,KAAL,CAAWmD,kBAAX,CAA8BD,KAA9B,EAAqC,CAAC,mBAAD,EAAsB,YAAtB,EAAoC,gBAApC,EAAsD,YAAtD,EAAoE,gBAApE,CAArC,EAA4H,IAA5H,EAAkI,CAAC,gBAAD,CAAlI,EAAsJ,CAAC,gBAAD,CAAtJ,CATzB;AAUI,MAAA,eAAe,EAAE,IAVrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CA9DJ,eAwFI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADX;AAEI,MAAA,IAAI,EAAC,gBAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,SAAS,EAAC,KAJd;AAKI,MAAA,WAAW,EAAE,IALjB;AAMI,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWoB,cAAX,CAA0B,gBAA1B,KAA+C,EAN1D;AAOI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWoD,eAAX,CAA2BjC,KAA3B,CAPzB;AAQI,MAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CARjB;AASI,MAAA,UAAU,EAAE,IAThB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAxFJ,eAqGI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,gBAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,KANjB;AAOI,MAAA,OAAO,EAAEU,SAPb;AAQI,MAAA,gBAAgB,EAAC,MARrB;AASI,MAAA,QAAQ,EAAC,gBATb;AAUI,MAAA,WAAW,EAAC,gBAVhB;AAWI,MAAA,KAAK,EAAE,KAAKrC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,gBAA1B,CAA5B,GAA0E,EAXrF;AAYI,MAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,gBAA1B,CAA5B,GAA0E,EAZ5F,CAaI;AAbJ;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAW+C,aAAX,CAAyB5B,KAAzB,EAAgC,gBAAhC,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CArGJ,EA0HKjB,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACc,WAAnD,iBACG,uDACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAE+B,eAA9B;AACI,MAAA,UAAU,EAAC,UADf;AAEI,MAAA,UAAU,EAAC,kBAFf;AAGI,MAAA,WAAW,EAAE,CAAC,UAAD,EAAa,gBAAb,EAA+B,qBAA/B,CAHjB;AAII,MAAA,UAAU,EAAE,CAAC,KAAK1C,KAAL,CAAWoB,cAAX,CAA0B,iBAA1B,CAAD,CAJhB;AAKI,MAAA,KAAK,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,CAAC,KAAKpB,KAAL,CAAWoB,cAAZ,CAA5B,GAA0D,EALrE;AAMI,MAAA,YAAY,EAAC,UANjB;AAOI,MAAA,aAAa,EAAE,CAAC,aAAD,EAAgB,mBAAhB,EAAqC,wBAArC,CAPnB;AAQI,MAAA,QAAQ,EAAG8B,KAAD,IAAW,KAAKlD,KAAL,CAAWqD,sBAAX,CAAkCH,KAAlC,EAAyC,CAAC,iBAAD,EAAoB,UAApB,CAAzC,CARzB;AASI,MAAA,eAAe,EAAE,IATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CA3HR,EA2IOhD,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACY,SAAnD,iBACC,uDACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,aAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,KANjB;AAOI,MAAA,WAAW,EAAE,IAPjB;AAQI,MAAA,OAAO,EAAEa,MARb,CASI;AACA;AACA;AAXJ;AAYI,MAAA,KAAK,EAAE,KAAKxC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,aAA1B,CAA5B,GAAuE,EAZlF,CAaI;AACA;AAdJ;AAeI,MAAA,iBAAiB,EAAE,IAfvB;AAgBI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWsD,mBAAX,CAA+BnC,KAA/B,CAhBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAmBI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADX;AAEI,MAAA,IAAI,EAAC,iBAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,SAAS,EAAC,KAJd;AAKI,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWoB,cAAX,CAA0B,WAA1B,KAA0C,EALrD;AAMI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWoD,eAAX,CAA2BjC,KAA3B,CANzB;AAOI,MAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAPjB;AAQI,MAAA,UAAU,EAAE,IARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBJ,CADJ,CA5IR,CADJ,eA+KI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEKgB,UAAU,IAAIA,UAAU,CAACd,MAAX,GAAoB,CAAlC,iBACG,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AACI,MAAA,IAAI,EAAEc,UADV;AAEI,MAAA,eAAe,EAAE,KAAK3C,KAAL,CAAWuD,WAFhC,CAGI;AAHJ;AAII,MAAA,SAAS,EAAE,KAJf;AAKI,MAAA,gBAAgB,EAAEX,SALtB,CAMI;AACA;AAPJ;AAQI,MAAA,QAAQ,EAAEC,QAAQ,IAAI,EAR1B;AASI,MAAA,SAAS,EAAEC,SAAS,IAAI,EAT5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAHR,CADJ,CAFJ,eAwBI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,mBAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAEY,aAPb;AAQI,MAAA,gBAAgB,EAAC,MARrB;AASI,MAAA,QAAQ,EAAC,mBATb;AAUI,MAAA,WAAW,EAAC,WAVhB;AAWI,MAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,mBAA1B,CAA5B,GAA6E,EAXxF;AAYI,MAAA,YAAY,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,GAA4B,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,mBAA1B,CAA5B,GAA6E,EAZ/F,CAaI;AAbJ;AAcI,MAAA,iBAAiB,EAAE,IAdvB;AAeI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWwD,YAAX,CAAwBrC,KAAxB,EAA+B,CAAC,mBAAD,EAAsB,YAAtB,CAA/B,CAfzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAxBJ,eA4CI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADX;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,SAAS,EAAC,KAJd;AAKI,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWoB,cAAX,CAA0B,UAA1B,KAAyC,EALpD;AAMI,MAAA,WAAW,EAAE,KAAKpB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CANjB;AAOI,MAAA,UAAU,EAAE,IAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CA5CJ,CA/KJ,eAyOI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,+DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AACI,MAAA,IAAI,EAAE,oBADV;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,eAAe,EAAC,iBAHpB;AAII,MAAA,cAAc,EAAE,mBAJpB;AAKI,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALX;AAMI,MAAA,WAAW,EAAE,KAAK3B,KAAL,CAAW0B,aAAX,CAAyB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAzB,CANjB;AAOI,MAAA,YAAY,EAAE,KAAK3B,KAAL,CAAWoB,cAAX,CAA0B,oBAA1B,MAAoD,CAApD,GAAwD,IAAxD,GAA+D,KAPjF;AAQI,MAAA,WAAW,EAAE,KARjB;AASI,MAAA,QAAQ,EAAE,KATd;AAUI,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWoB,cAAX,CAA0B,oBAA1B,MAAoD,CAApD,GAAwD,IAAxD,GAA+D,KAV5E;AAWI,MAAA,QAAQ,EAAGD,KAAD,IAAW,KAAKnB,KAAL,CAAWoD,eAAX,CAA2BjC,KAA3B,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAeI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAA6B,MAAA,cAAc,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,eAgBI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,gEAApB;AACI,MAAA,IAAI,EAAC,GADT;AACa,kBAAU,KAAKnB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE5C,eAAvB;AAAwC,MAAA,SAAS,EAAC,iBAAlD;AAAoE,MAAA,OAAO,EAAGoC,KAAD,IAAWD,YAAY,CAACC,KAAD,EAAQ,KAAKnB,KAAL,CAAWoB,cAAnB,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAhBJ,eAoBI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,gEAApB;AAAqF,MAAA,IAAI,EAAC,EAA1F;AACI,kBAAU,KAAKpB,KAAL,CAAWyB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADd;AACwE,MAAA,MAAM,EAAE,KADhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE;AAAE8B,QAAAA,OAAO,EAAE;AAAX,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEzE,YAAvB;AAAqC,MAAA,SAAS,EAAC,iBAA/C;AAAiE,MAAA,OAAO,EAAGmC,KAAD,IAAW,KAAKnB,KAAL,CAAW0D,OAAX,EAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CApBJ,CAFJ,CAzOJ,CADJ,eA2QI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,eAArB;AAAqC,MAAA,cAAc,EAAC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAGI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,wBAApB,CACI;AADJ;AAEI,MAAA,OAAO,EAAGC,CAAD,IAAO,KAAK3D,KAAL,CAAW4D,YAAX,CAAwBD,CAAxB,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE1E,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,oBAKI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,eAArB;AAAqC,MAAA,cAAc,EAAC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAHJ,CADJ,CADJ,eA0BI,oBAAC,QAAD;AACI,MAAA,GAAG,EAAC,MADR;AAEI,MAAA,eAAe,EAAC,MAFpB;AAGI,MAAA,UAAU,EAAE,KAAKe,KAAL,CAAW6D,iBAAX,CAA6BC,IAH7C,CAII;AAJJ;AAKI,MAAA,UAAU,EAAEzE,OAAO,CAAChB,SAAS,IAAI,EAAd,EAAkB,KAAK2B,KAAL,CAAW+D,kBAA7B,CALvB;AAMI,MAAA,SAAS,EAAE,KAAK/D,KAAL,CAAW+D,kBAN1B;AAOI,MAAA,eAAe,EAAE,KAAK/D,KAAL,CAAWgE,wBAPhC;AAQI,MAAA,mBAAmB,EAAE,KAAK/D,UAAL,CAAgBC,gBAAhB,EAAkCC,mBAAlC,EAAuDN,gBAAvD,EAAyED,mBAAzE,CARzB;AASI,MAAA,UAAU,EAAE,KAAKI,KAAL,CAAWiE,UAT3B;AAUI,MAAA,qBAAqB,EAAE,KAAKjE,KAAL,CAAWkE,qBAVtC;AAWI,MAAA,uBAAuB,EAAE,IAX7B;AAYI,MAAA,UAAU,EAAE,KAAKlE,KAAL,CAAWmE,UAZ3B;AAaI,MAAA,QAAQ,EAAE,KAAKnE,KAAL,CAAWoE,QAbzB;AAcI,MAAA,QAAQ,EAAE,IAdd;AAeI,MAAA,UAAU,EAAE,YAfhB;AAgBI,MAAA,gBAAgB,EAAE,IAhBtB;AAiBI,MAAA,gBAAgB,EAAE,KAAKpE,KAAL,CAAWqE,gBAjBjC;AAkBI,MAAA,cAAc,EAAE,KAAKrE,KAAL,CAAWsE,eAlB/B;AAmBI,MAAA,SAAS,EAAC,OAnBd;AAoBI,MAAA,UAAU,EAAE,OApBhB;AAqBI,MAAA,kBAAkB,EAAE,KAAKtE,KAAL,CAAWuE,aArBnC;AAsBI,MAAA,oBAAoB,EAAE,KAAKvE,KAAL,CAAWwE,eAtBrC;AAuBI,MAAA,wBAAwB,EAAE,IAvB9B;AAwBI,MAAA,sBAAsB,EAAE,IAxB5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BJ,CADJ,eAyDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAEtE,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACc,WAAnD,GAAiE,CAAjE,GAAqE,EAA9E;AAAkF,MAAA,SAAS,EAAC,KAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAa,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,UAArB;AAAgC,MAAA,cAAc,EAAC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb,CADJ,eAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,wBAApB;AAA6C,MAAA,OAAO,EAAE,MAAM,KAAKX,KAAL,CAAWyE,gBAAX,CAA4B,KAAKzE,KAAL,CAAW6D,iBAAvC,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE5E,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,UAArB;AAAgC,MAAA,cAAc,EAAC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,CADJ,CADJ,eAWI,oBAAC,QAAD;AACI,MAAA,GAAG,EAAC,oBADR;AAEI,MAAA,eAAe,EAAC,oBAFpB;AAGI,MAAA,UAAU,EAAE,KAAK4B,KAAL,CAAWC,gBAAX,CAA4B4D,kBAH5C,CAII;AAJJ;AAKI,MAAA,UAAU,EAAErF,OAAO,CAAC2B,YAAY,IAAI,EAAjB,EAAqB,KAAKhB,KAAL,CAAW2E,kBAAhC,CALvB;AAMI,MAAA,SAAS,EAAE,KAAK3E,KAAL,CAAW2E,kBAN1B;AAOI,MAAA,eAAe,EAAE,KAAK3E,KAAL,CAAW4E,mBAPhC;AAQI,MAAA,mBAAmB,EAAE5C,cARzB;AASI,MAAA,UAAU,EAAE,IAAI6C,GAAJ,EAThB;AAUI,MAAA,qBAAqB,EAAE,KAAK7E,KAAL,CAAWkE,qBAVtC;AAWI,MAAA,uBAAuB,EAAE,IAX7B;AAYI,MAAA,UAAU,EAAE,KAAKlE,KAAL,CAAWmE,UAZ3B;AAaI,MAAA,QAAQ,EAAE,KAAKnE,KAAL,CAAWoE,QAbzB;AAcI,MAAA,QAAQ,EAAE,IAdd;AAeI,MAAA,UAAU,EAAE,YAfhB;AAgBI,MAAA,gBAAgB,EAAE,IAhBtB,CAiBI;AAjBJ;AAkBI,MAAA,SAAS,EAAC,OAlBd;AAmBI,MAAA,UAAU,EAAE,OAnBhB;AAoBI,MAAA,oBAAoB,EAAE,KAAKpE,KAAL,CAAW8E,UApBrC;AAqBI,MAAA,wBAAwB,EAAE,IArB9B;AAsBI,MAAA,sBAAsB,EAAE,KAtB5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CAzDJ,EAgGK5E,gBAAgB,CAACG,YAAjB,KAAkCR,gBAAgB,CAACc,WAAnD,iBACG,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAa,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,YAArB;AAAkC,MAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb,CADJ,eAEI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,wBAApB;AAA6C,MAAA,OAAO,EAAE,MAAM,KAAKX,KAAL,CAAW+E,kBAAX,CAA8B,KAAK/E,KAAL,CAAW6D,iBAAzC,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE5E,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,YAArB;AAAkC,MAAA,cAAc,EAAC,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,CADJ,CAFJ,eAYI,oBAAC,QAAD;AACI,MAAA,GAAG,EAAC,cADR;AAEI,MAAA,eAAe,EAAC,cAFpB;AAGI,MAAA,UAAU,EAAE,KAAK4B,KAAL,CAAWE,kBAAX,CAA8BiE,YAH9C,CAII;AAJJ;AAKI,MAAA,UAAU,EAAE3F,OAAO,CAACoD,cAAc,IAAI,EAAnB,EAAsB,KAAKzC,KAAL,CAAWiF,oBAAjC,CALvB;AAMI,MAAA,SAAS,EAAE,KAAKjF,KAAL,CAAWiF,oBAN1B;AAOI,MAAA,eAAe,EAAE,KAAKjF,KAAL,CAAWkF,0BAPhC;AAQI,MAAA,mBAAmB,EAAEjD,iBARzB;AASI,MAAA,UAAU,EAAE,IAAI4C,GAAJ,EAThB;AAUI,MAAA,qBAAqB,EAAE,KAAK7E,KAAL,CAAWkE,qBAVtC;AAWI,MAAA,uBAAuB,EAAE,IAX7B;AAYI,MAAA,UAAU,EAAE,KAAKlE,KAAL,CAAWmE,UAZ3B;AAaI,MAAA,QAAQ,EAAE,KAAKnE,KAAL,CAAWoE,QAbzB;AAcI,MAAA,QAAQ,EAAE,KAdd;AAeI,MAAA,UAAU,EAAE,YAfhB;AAgBI,MAAA,gBAAgB,EAAE,IAhBtB;AAiBI,MAAA,cAAc,EAAE,KAAKe,cAjBzB;AAkBI,MAAA,SAAS,EAAC,OAlBd;AAmBI,MAAA,UAAU,EAAE,OAnBhB;AAoBI,MAAA,oBAAoB,EAAE,KAAKnF,KAAL,CAAWoF,YApBrC;AAqBI,MAAA,wBAAwB,EAAE,IArB9B;AAsBI,MAAA,sBAAsB,EAAE,KAtB5B;AAuBI,MAAA,cAAc,EAAE,OAvBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,CAjGR,CA3QJ,CADJ;AAuZH,GA3doC,CAygBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlhBqC;;AAqhBzC,eAAejG,UAAU,CAACW,gBAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { TreeDesign, HeaderSpan } from './registration.styled';\r\nimport './registration.css'\r\nimport { ProductList } from '../product/product.styled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCartArrowDown, faFileImport, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\r\n\r\n\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { RegistrationSubType, RegistrationType } from '../../components/Enumeration';\r\n//import { Label } from 'reactstrap';\r\n\r\n\r\nclass PreRegisterPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedTestItem: [],\r\n            selectedSourceItem: [],\r\n            selectedTest: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const getComponent = (event, selectedRecord) => {\r\n            let booleanFlag = true\r\n            if (this.props.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n                if (selectedRecord.nmanufcode === undefined) {\r\n                    booleanFlag = false;\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n                }\r\n            }\r\n            if (booleanFlag) {\r\n                if (selectedRecord.nallottedspeccode !== undefined && selectedRecord.nallottedspeccode !== \"\") {\r\n                    if (this.props.Component.length > 0) {\r\n                        this.props.ConfirmComponent(selectedRecord);\r\n                    } else {\r\n                        this.props.getComponentfromJava(selectedRecord) \r\n                    }\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" })); //\"Select Specification\"\r\n                }\r\n            }\r\n\r\n        }\r\n        // const BatchColumnList = [\r\n        //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        // ];\r\n        const testColumnList = [\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        // const plasmaColumnList = [\r\n        //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_POOL/BULKVOLUME\", \"dataField\": \"spoolbulkvolume\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", width: \"200px\" },\r\n        // ];\r\n        // const externalColumnList = [\r\n        //     { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"dreceiveddate\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        // ];\r\n        const countryColumnList = [\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"scountryname\", width: \"150px\" }\r\n        ];\r\n        const { ProductCategory, Product, Goodsin, EProtocol, Manufacturer, Specification, Component,\r\n            selectedTest, Client, RealRegTypeValue,\r\n            RealRegSubTypeValue, SelectedSource, ProductMaholder, AgaramTree, OpenNodes, FocusKey, ActiveKey } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        {(RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) &&\r\n                            <Col md={12}>\r\n                                <FormSelectSearch\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_RMSNO\" })}\r\n                                    isSearchable={true}\r\n                                    name={\"nrmsno\"}\r\n                                    isDisabled={false}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isMandatory={true}\r\n                                    options={Goodsin}\r\n                                    alphabeticalSort=\"true\"\r\n                                    optionId=\"nrmsno\"\r\n                                    optionValue=\"nrmsno\"\r\n                                    value={this.props.selectedRecord ? this.props.selectedRecord[\"nrmsno\"] : \"\"}\r\n                                    defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nrmsno\"] : \"\"}\r\n                                    //  showOption={true}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange={(event) => this.props.onComboChange(event, 'nrmsno')}>\r\n                                </FormSelectSearch>\r\n                            </Col>\r\n                        }\r\n                        <Col md={12}>\r\n\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORY\" })}\r\n                                isSearchable={true}\r\n                                name={\"nproductcatcode\"}\r\n                                isDisabled={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={ProductCategory}\r\n                                alphabeticalSort=\"true\"\r\n                                optionId=\"nproductcatcode\"\r\n                                optionValue=\"sproductcatname\"\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"nproductcatcode\"] : \"\"}\r\n                                defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nproductcatcode\"] : \"\"}\r\n                                //  showOption={true}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => this.props.onproductCategoryChange(event, 'nproductcatcode')}>\r\n                            </FormSelectSearch>\r\n                        </Col>\r\n                        <Col md={12}>\r\n\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                                isSearchable={true}\r\n                                name={\"nproductcode\"}\r\n                                isDisabled={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={Product}\r\n                                alphabeticalSort=\"true\"\r\n                                optionId=\"nproductcode\"\r\n                                optionValue=\"sproductname\"\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"nproductcode\"] : \"\"}\r\n                                defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nproductcode\"] : \"\"}\r\n                                //  showOption={true}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => this.props.onProductChange(event, 'nproductcode')}>\r\n                            </FormSelectSearch>\r\n                        </Col>\r\n                        <Col md={12} >\r\n\r\n                            <MultiColumnComboSearch data={Manufacturer}\r\n                                visibility='show-all'\r\n                                labelledBy=\"IDS_MANUFNAME\"\r\n                                fieldToShow={[\"smanufname\", \"smanufsitename\", \"seprotocolname\"]}\r\n                                selectedId={[this.props.selectedRecord[\"nmanufcode\"]]}\r\n                                value={this.props.selectedRecord ? [this.props.selectedRecord] : []}\r\n                                isMandatory={true}\r\n                                showInputkey=\"smanufname\"\r\n                                idslabelfield={[\"IDS_MANUFACTURERNAME\", \"IDS_SITENAME\", \"IDS_EPROTOCOL\"]}\r\n                                getValue={(value) => this.props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"])}\r\n                                singleSelection={true}\r\n                            />\r\n\r\n                            {/* <MultiColumnComboSearch\r\n                                data={Manufacturer}\r\n                                alphabeticalSort=\"true\"\r\n                                labelledBy=\"IDS_MANUFACTURERNAME\"\r\n                                fieldToShow={[\"smanufname\", \"smanufsitename\", \"seprotocolname\"]}\r\n                                idslabelfield={[\"IDS_MANUFACTURERNAME\", \"IDS_SITENAME\", \"IDS_EPROTOCOL\"]}\r\n                                showInputkey=\"smanufname\"\r\n                                value={this.props.selectedRecord[\"smanufname\"] || \"\"}\r\n                                onMultiColumnValue={(value) => this.props.onMultiColumnValue(value, [\"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"])}\r\n                            /> */}\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_MANUFACTURERSITE\" })}\r\n                                name=\"smanufsitename\"\r\n                                type=\"text\"\r\n                                maxLength=\"100\"\r\n                                isMandatory={true}\r\n                                value={this.props.selectedRecord[\"smanufsitename\"] || []}\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_MANUFACTURERSITE\" })}\r\n                                isDisabled={true}\r\n                            />\r\n                        </Col>\r\n                        <Col md={12}>\r\n\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_EPROTOCOL\" })}\r\n                                isSearchable={true}\r\n                                name={\"neprotocolcode\"}\r\n                                isDisabled={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={false}\r\n                                options={EProtocol}\r\n                                alphabeticalSort=\"true\"\r\n                                optionId=\"neprotocolcode\"\r\n                                optionValue=\"seprotocolname\"\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"neprotocolcode\"] : \"\"}\r\n                                defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"neprotocolcode\"] : \"\"}\r\n                                //  showOption={true}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => this.props.onComboChange(event, 'neprotocolcode')}>\r\n                            </FormSelectSearch>\r\n                        </Col>\r\n\r\n                        {RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL &&\r\n                            <>\r\n                                <Col md={12}>\r\n                                    <MultiColumnComboSearch data={ProductMaholder}\r\n                                        visibility='show-all'\r\n                                        labelledBy=\"IDS_MAHOLDERNAME\"\r\n                                        fieldToShow={[\"smahname\", \"slicencenumber\", \"sdosagepercontainer\"]}\r\n                                        selectedId={[this.props.selectedRecord[\"nproductmahcode\"]]}\r\n                                        value={this.props.selectedRecord ? [this.props.selectedRecord] : []}\r\n                                        showInputkey=\"smahname\"\r\n                                        idslabelfield={[\"IDS_MAHNAME\", \"IDS_LICENSENUMBER\", \"IDS_DOSAGEPERCONTAINER\"]}\r\n                                        getValue={(value) => this.props.onMultiColumnMAHChange(value, [\"nproductmahcode\", \"smahname\"])}\r\n                                        singleSelection={true}\r\n                                    />\r\n                                </Col>\r\n                            </>\r\n                        }\r\n                          {RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH &&\r\n                            <>\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_CLIENTNAME\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"nclientcode\"}\r\n                                        isDisabled={false}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={false}\r\n                                        isClearable={true}\r\n                                        options={Client}\r\n                                        // alphabeticalSort=\"true\"\r\n                                        // optionId=\"nclientcode\"\r\n                                        // optionValue=\"sclientname\"\r\n                                        value={this.props.selectedRecord ? this.props.selectedRecord[\"nclientcode\"] : \"\"}\r\n                                        //defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nclientcode\"] : \"\"}\r\n                                        //  showOption={true}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange={(event) => this.props.onClientComboChange(event)}>\r\n                                    </FormSelectSearch>\r\n                                    <FormInput\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_CLIENTSITENAME\" })}\r\n                                        name=\"sclientsitename\"\r\n                                        type=\"text\"\r\n                                        maxLength=\"100\"\r\n                                        value={this.props.selectedRecord[\"saddress1\"] || []}\r\n                                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_CLIENTSITENAME\" })}\r\n                                        isDisabled={true}\r\n                                    />\r\n                                </Col>\r\n                            </>\r\n                        }\r\n                    </Col>\r\n                    <Col md={6}>                      \r\n\r\n                        <Col md={12} className=\"r_treepadding\" >\r\n                            <TreeDesign>\r\n\r\n                                {AgaramTree && AgaramTree.length > 0 &&\r\n                                    <PerfectScrollbar>\r\n                                        <FormTreeMenu\r\n                                            data={AgaramTree}\r\n                                            handleTreeClick={this.props.onTreeClick}\r\n                                            // openNodes={OpenNodes}\r\n                                            hasSearch={false}\r\n                                            initialOpenNodes={OpenNodes}\r\n                                            // initialFocusKey={InitialFocusKey}\r\n                                            // initialActiveKey={InitialActiveKey}\r\n                                            focusKey={FocusKey || \"\"}\r\n                                            activeKey={ActiveKey || \"\"}\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n\r\n                                }\r\n\r\n                            </TreeDesign>\r\n                        </Col>\r\n                        <Col md={12}>\r\n\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTGROUP\" })}\r\n                                isSearchable={true}\r\n                                name={\"nallottedspeccode\"}\r\n                                isDisabled={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_TESTGROUP\" })}\r\n                                isMandatory={true}\r\n                                options={Specification}\r\n                                alphabeticalSort=\"true\"\r\n                                optionId=\"nallottedspeccode\"\r\n                                optionValue=\"sspecname\"\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"nallottedspeccode\"] : \"\"}\r\n                                defaultValue={this.props.selectedRecord ? this.props.selectedRecord[\"nallottedspeccode\"] : \"\"}\r\n                                //  showOption={true}\r\n                                closeMenuOnSelect={true}\r\n                                onChange={(event) => this.props.onspecChange(event, ['nallottedspeccode', 'sversionno'])}>\r\n                            </FormSelectSearch>\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                name=\"sversion\"\r\n                                type=\"text\"\r\n                                maxLength=\"100\"\r\n                                value={this.props.selectedRecord[\"sversion\"] || []}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                isDisabled={true}\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                    </Col>\r\n                    <Col md={12} className=\"actioncolor\">\r\n                        {/* <ProductList className=\"d-inline dropdown badget_menu actionfloat hideboxshadow\"> */}\r\n                        <ProductList className=\"d-flex justify-content-end dropdown badget_menu hideboxshadow\">\r\n                            <CustomSwitch\r\n                                name={\"ntransactionstatus\"}\r\n                                type=\"switch\"\r\n                                parentClassName=\"customswitchcss\"\r\n                                labelClassName={\"mb-0 paddingleft5\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_ALLTEST\" })}\r\n                                placeholder={this.props.formatMessage({ id: \"IDS_ALLTEST\" })}\r\n                                defaultValue={this.props.selectedRecord[\"ntransactionstatus\"] === 3 ? true : false}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                checked={this.props.selectedRecord[\"ntransactionstatus\"] === 3 ? true : false}\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                            />\r\n                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                            <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                            <Nav.Link className=\"btn btn-circle mr-2 mt-2 action-icons-wrap iconsize iconmargin\"\r\n                                href=\"#\" data-tip={this.props.intl.formatMessage({ id: \"IDS_GETCOMPONENTS\" })}>\r\n                                <FontAwesomeIcon icon={faCartArrowDown} className=\"ActionIconColor\" onClick={(event) => getComponent(event, this.props.selectedRecord)} />\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"btn btn-circle mr-2 mt-2 action-icons-wrap iconsize iconmargin\" href=\"\"\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTEXCEL\" })} hidden={false}>\r\n                                <input type=\"file\" style={{ display: \"none\" }} />\r\n                                <FontAwesomeIcon icon={faFileImport} className=\"ActionIconColor\" onClick={(event) => this.props.AddFile()}>\r\n                                </FontAwesomeIcon>\r\n\r\n                            </Nav.Link>\r\n                            {/* </Tooltip> */}\r\n                        </ProductList>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12} className=\"p-0\">\r\n                        <div className=\"actions-stripe\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <HeaderSpan>\r\n                                    <FormattedMessage id='IDS_COMPONENT' defaultMessage='Component' /></HeaderSpan>\r\n                                <Nav.Link className=\"add-txt-btn text-right\"\r\n                                    // onClick={RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? (e) => this.props.addComponentTest(e) : (e) => this.props.AddComponent(e)} \r\n                                    onClick={(e) => this.props.AddComponent(e)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }{ }\r\n                                    <FormattedMessage id='IDS_COMPONENT' defaultMessage='Component' />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </div>\r\n                        {/* <Col md={12} className=\"p-0\" >\r\n                            <HeaderSpan> \r\n                                <FormattedMessage id='IDS_COMPONENT' defaultMessage='Component' /></HeaderSpan>\r\n                                <Nav.Link className=\"add-txt-btn text-right\"\r\n                                // onClick={RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? (e) => this.props.addComponentTest(e) : (e) => this.props.AddComponent(e)} \r\n                                    onClick={(e) => this.props.AddComponent(e)}\r\n                                >\r\n                                <FontAwesomeIcon icon={faPlus} /> { }{ }\r\n                                <FormattedMessage id='IDS_COMPONENT' defaultMessage='Component' />\r\n                            </Nav.Link>\r\n                        </Col>\r\n                        <Col md={12} className=\"p-0\"> */}\r\n                        <DataGrid\r\n                            key=\"slno\"\r\n                            primaryKeyField=\"slno\"\r\n                            selectedId={this.props.selectedComponent.slno}\r\n                            // data={selectedTest}\r\n                            dataResult={process(Component || [], this.props.componentDataState)}\r\n                            dataState={this.props.componentDataState}\r\n                            dataStateChange={this.props.componentDataStateChange}\r\n                            extractedColumnList={this.columnlist(RealRegTypeValue, RealRegSubTypeValue, RegistrationType, RegistrationSubType)}\r\n                            controlMap={this.props.controlMap}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            hasControlWithOutRights={true}\r\n                            inputParam={this.props.inputParam}\r\n                            userInfo={this.props.userInfo}\r\n                            pageable={true}\r\n                            scrollable={\"scrollable\"}\r\n                            isActionRequired={true}\r\n                            plasmaMasterFile={this.props.plasmaMasterFile}\r\n                            handleRowClick={this.props.selectComponent}\r\n                            methodUrl=\"PopUp\"\r\n                            gridHeight={\"350px\"}\r\n                            editRecordWORights={this.props.editComponent}\r\n                            deleteRecordWORights={this.props.deleteComponent}\r\n                            showdeleteRecordWORights={true}\r\n                            showeditRecordWORights={true}\r\n                        >\r\n                        </DataGrid>\r\n                        {/* </Col> */}\r\n                    </Col>\r\n\r\n                    <Col md={RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? 8 : 12} className=\"p-0\">\r\n                        <div className=\"actions-stripe\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <HeaderSpan> <FormattedMessage id='IDS_TEST' defaultMessage='Test' /></HeaderSpan>\r\n                                <Nav.Link className=\"add-txt-btn text-right\" onClick={() => this.props.addComponentTest(this.props.selectedComponent)} >\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id='IDS_TEST' defaultMessage='Test' />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <DataGrid\r\n                            key=\"ntestgrouptestcode\"\r\n                            primaryKeyField=\"ntestgrouptestcode\"\r\n                            selectedId={this.state.selectedTestItem.ntestgrouptestcode}\r\n                            // data={selectedTest}\r\n                            dataResult={process(selectedTest || [], this.props.popUptestDataState)}\r\n                            dataState={this.props.popUptestDataState}\r\n                            dataStateChange={this.props.testdataStateChange}\r\n                            extractedColumnList={testColumnList}\r\n                            controlMap={new Map()}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            hasControlWithOutRights={true}\r\n                            inputParam={this.props.inputParam}\r\n                            userInfo={this.props.userInfo}\r\n                            pageable={true}\r\n                            scrollable={\"scrollable\"}\r\n                            isActionRequired={true}\r\n                            // handleRowClick={this.handleRowClick}\r\n                            methodUrl=\"PopUp\"\r\n                            gridHeight={\"400px\"}\r\n                            deleteRecordWORights={this.props.deleteTest}\r\n                            showdeleteRecordWORights={true}\r\n                            showeditRecordWORights={false}\r\n                        >\r\n                        </DataGrid>\r\n                    </Col>\r\n\r\n\r\n                    {RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL &&\r\n                        <Col md={4}  >\r\n\r\n                            <div className=\"actions-stripe\">\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    <HeaderSpan> <FormattedMessage id='IDS_SOURCE' defaultMessage='Source' /></HeaderSpan>\r\n                                    <Nav.Link className=\"add-txt-btn text-right\" onClick={() => this.props.addComponentSource(this.props.selectedComponent)} >\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id='IDS_SOURCE' defaultMessage='IDS_SOURCE' />\r\n                                    </Nav.Link>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <DataGrid\r\n                                key=\"ncountrycode\"\r\n                                primaryKeyField=\"ncountrycode\"\r\n                                selectedId={this.state.selectedSourceItem.ncountrycode}\r\n                                // data={selectedTest}\r\n                                dataResult={process(SelectedSource || [],this.props.popUpsourceDataState)}\r\n                                dataState={this.props.popUpsourceDataState}\r\n                                dataStateChange={this.props.popUpsourceDataStateChange}\r\n                                extractedColumnList={countryColumnList}\r\n                                controlMap={new Map()}\r\n                                userRoleControlRights={this.props.userRoleControlRights}\r\n                                hasControlWithOutRights={true}\r\n                                inputParam={this.props.inputParam}\r\n                                userInfo={this.props.userInfo}\r\n                                pageable={false}\r\n                                scrollable={\"scrollable\"}\r\n                                isActionRequired={true}\r\n                                handleRowClick={this.handleRowClick}\r\n                                methodUrl=\"PopUp\"\r\n                                gridHeight={\"400px\"}\r\n                                deleteRecordWORights={this.props.deleteSource}\r\n                                showdeleteRecordWORights={true}\r\n                                showeditRecordWORights={false}\r\n                                actionColWidth={\"100px\"}\r\n                            >\r\n                            </DataGrid>\r\n                        </Col>}\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    columnlist = (RealRegTypeValue, RealRegSubTypeValue, RegistrationType, RegistrationSubType) => {\r\n        let BatchColumnList = [];\r\n        if (((RealRegTypeValue.nregtypecode === RegistrationType.BATCH && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL)\r\n            || (RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH))) {\r\n            BatchColumnList = [\r\n                { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"sstorageconditionname\", width: \"150px\" },\r\n                { \"idsName\": \"IDS_STORAGELOCATION\", \"dataField\": \"sstoragelocationname\", width: \"150px\" },\r\n                { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n                { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n            ];\r\n\r\n\r\n        } else if (RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\r\n            BatchColumnList = [\r\n                { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n                { \"idsName\": \"IDS_POOLBULKVOLUME\", \"dataField\": \"sbulkvolume\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", width: \"200px\" },\r\n            ];\r\n\r\n        } else if (RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.PROTOCOL || RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.EXTERNAL_POOL) {\r\n            BatchColumnList = [\r\n                { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n            ];\r\n        } else {\r\n            BatchColumnList = [\r\n                { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", width: \"150px\" },\r\n                { \"idsName\": \"IDS_POOLBULKVOLUME\", \"dataField\": \"sbulkvolume\", width: \"200px\" },\r\n                { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", width: \"200px\" },\r\n            ];\r\n        }\r\n\r\n        return BatchColumnList;\r\n\r\n    }\r\n    // componentDidUpdate(previousProps) {\r\n    //     if (this.state.selectedTest !== this.props.selectedTest) {\r\n    //         this.setState({ selectedTestItem: this.props.selectedTest.length > 0 ? this.props.selectedTest[this.props.selectedTest.length - 1] : [], selectedTest: this.props.selectedTest });\r\n    //     } else if (this.props.SelectedSource !== previousProps.SelectedSource) {\r\n    //         this.setState({ selectedSourceItem: this.props.SelectedSource.length > 0 ? this.props.SelectedSource[this.props.SelectedSource.length - 1] : [], SelectedSource: this.props.SelectedSource });\r\n    //     }\r\n    // }\r\n    // handleRowClick = (event) => {\r\n    //     this.setState({ selectedTestItem: event.dataItem })\r\n    // }\r\n}\r\n\r\nexport default injectIntl(PreRegisterPopUp)\r\n"]},"metadata":{},"sourceType":"module"}