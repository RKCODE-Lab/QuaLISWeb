{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialInventory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, Button, FormGroup, FormLabel } from 'react-bootstrap';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync, faPencilAlt, faCalendar } from '@fortawesome/free-solid-svg-icons';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ModalShow from '../../components/ModalShow.jsx';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign, getControlMap, constructOptionList, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild } from '../../components/CommonScript';\nimport { callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment, initialcombochangeMaterialInvget, getMaterialInventoryByID, getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange } from '../../actions'; // import {\n//     initialcombochangeMaterialInvget, getMaterialInventoryByID,\n//     getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile,\n//     updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange\n// } from '../../actions/MaterialInventoryAction';\n\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport { ContentPanel, AtSubCard, ReadOnlyText } from '../../components/App.styles';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ReactTooltip from 'react-tooltip';\nimport MaterialFilter from './MaterialFilter';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport MaterialSectionTab from './MaterialSectionTab';\nimport { Affix } from 'rsuite';\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\nimport AddMaterialSafetyInstructionTab from './AddMaterialSafetyInstructionTab';\nimport AddMaterialFile from './AddMaterialFile';\nimport InvenotryTransaction from './InvenotryTransaction';\nimport MaterialInvFileTab from './MaterialInvFileTab';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialInventory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.quantityTransaction = param => {\n      if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\n        let ncontrolCode = this.props.Login.ncontrolCode;\n        let openModal = this.props.Login.openModal;\n        openModal = true;\n        ncontrolCode = param;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal\n          }\n        };\n        this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRELEASEDINVENTORY\"\n        }));\n      }\n    };\n\n    this.viewQuantityTrans = viewQuantityTransdetails => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      let ModaTitle = this.props.Login.ModaTitle;\n      showModalPopup = true;\n      ModaTitle = 'IDS_QUANTITYTRANSACTION';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup,\n          ModaTitle,\n          viewQuantityTransdetails\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.accordianDesign = (Template, selectedmasterlistmain1) => {\n      let selectedmasterlistmain = [];\n      selectedmasterlistmain.push(selectedmasterlistmain1);\n      let designaccordian = [];\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.inputtype === 'combo') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 600,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 601,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 601,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 602,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label]['label'] : \"\"))));\n              }\n            } else if (component.inputtype === 'date') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 614,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 615,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 616,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 616,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? //  rearrangeDateFormatDateOnly(this.props.Login.userInfo, selectedmasterlistmain[0][component.label])\n                selectedmasterlistmain[0][component.label] : \"-\"))));\n              }\n            } else if (component.inputtype === 'toggle') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 632,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 633,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 634,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 634,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 635,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] && selectedmasterlistmain[0][component.label] === transactionStatus.YES ? 'Yes' : 'No'))));\n              }\n            } else {\n              if (component.label !== undefined) {\n                if (!component.needAccordian) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 649,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 650,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 651,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [component.label],\n                    message: [component.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 651,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 652,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"))));\n                }\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.inputtype === 'combo') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 665,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 667,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 667,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 668,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'date') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 680,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 681,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 682,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 682,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 683,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'toggle') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 695,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 696,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 697,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 697,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 698,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] && selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ? 'Yes' : 'No'))));\n                }\n              } else {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 711,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 712,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 713,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 713,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 714,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              }\n            });\n          });\n        });\n      });\n      return designaccordian;\n    };\n\n    this.onComboChangeopendate = (comboData, control) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[control] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangedynamic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.inputtype === 'date') {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[`tz${control.label}`] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (control.parent && control.parent === true) {\n        let data = [];\n        const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                data.push(component);\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  data.push(componentrow);\n                }\n              });\n            });\n          });\n        });\n        const comboComponents = data;\n        let parentcolumnlist = [];\n        comboComponents.map(columnList => {\n          if (columnList.hasOwnProperty('child')) {\n            parentcolumnlist.push(columnList);\n          }\n        });\n        let childColumnList = {};\n        parentcolumnlist.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getMaterialChildValues(inputParem, this.props.Login.userInfo, selectedRecord, parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0], childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData);\n      } else {\n        if (control.label === 'IDS_TRANSACTIONTYPE') {\n          this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord, this.props.Login.templateData);\n        } else {\n          selectedRecord[control.label] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.viewMaterialInventoryDetails = () => {\n      console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory);\n      console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory);\n\n      if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\n        let showModalPopup = this.props.Login.showModalPopup;\n        let ModaTitle = this.props.Login.ModaTitle;\n        showModalPopup = true;\n        ModaTitle = 'IDS_MATERIALINVENTORYDETAILS';\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            showModalPopup,\n            ModaTitle\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALINVENTORY\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      showModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onSaveMaterialFile = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\n        nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = selectedRecord.sfilename;\n          testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0;\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0]));\n      let inputParam;\n\n      if (this.props.Login.operation === 'create') {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"create\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\"\n        };\n      } else {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"update\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\"\n        };\n      }\n\n      return inputParam;\n    };\n\n    this.dynamicmandatoryFeilds = Template => {\n      let mandatoryFeildsMaterial = []; // this.props.Login.masterData.selectedTemplate &&\n      //   this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map((row) => {\n\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.mandatory) {\n              if (component.inputtype === 'combo') {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_SELECT\",\n                  \"controlType\": \"selectbox\"\n                });\n              } else {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_ENTER\",\n                  \"controlType\": \"selectbox\"\n                });\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.mandatory) {\n                if (componentrow.inputtype === 'combo') {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_SELECT\",\n                    \"controlType\": \"selectbox\"\n                  });\n                } else {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"selectbox\"\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n      return mandatoryFeildsMaterial;\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      {\n        let dataresultarr = [];\n        this.props.Login.masterData[\"MaterialInventoryTrans\"] && this.props.Login.masterData[\"MaterialInventoryTrans\"].map(temp => {\n          dataresultarr.push(temp.jsondata);\n        });\n        tabMap.set(\"IDS_INVENTORYTRANSACTION\", /*#__PURE__*/React.createElement(InvenotryTransaction, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: process(dataresultarr, this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            sectionDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          getTestDetails: this.props.getTestDetails,\n          quantityTransaction: this.quantityTransaction,\n          dataState: {\n            skip: 0,\n            take: 10\n          },\n          deleteRecord: this.deleteRecordmain,\n          viewQuantityTrans: this.viewQuantityTrans,\n          selectedRecord: this.props.Login.selectedRecord,\n          intl: this.props.intl,\n          screenName: \"IDS_QUANTITYTRANSACTION\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_MATERIALINVENTORYFILE\", /*#__PURE__*/React.createElement(MaterialInvFileTab, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          userInfo: this.props.Login.userInfo,\n          deleteRecord: this.deleteRecordmain,\n          MaterialFile: this.props.Login.masterData.MaterialInventoryFile || [],\n          addMaterialFile: param => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory),\n          viewMaterialFile: this.viewMaterialFile,\n          screenName: \"IDS_MATERIALINVENTORYFILE\",\n          settings: this.props.settings,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1016,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.onInputOnChangeFile = (event, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let isSelectedRecordChange = this.state.isSelectedRecordChange;\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional2;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.updateMaterialStatus = (buttonId, nflag) => {\n      let inputParam = {};\n      let inputData = [];\n      let operation;\n      let masterData = this.props.Login.masterData;\n      inputData[\"nflag\"] = nflag;\n      operation = nflag === 1 ? 'RELEASED' : 'RETIRE';\n      inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode;\n      inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcode;\n      inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcatcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: 'update',\n        selectedRecord: this.state.selectedRecord,\n        searchRef: this.searchRef,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecordmain = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          ncontrolCode: deleteParam.ncontrolCode,\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: deleteParam.operation,\n        ncontrolCode: deleteParam.ncontrolCode,\n        methodUrl: methodUrl,\n        screenName: \"IDS_MATERIALINVENTORY\",\n        dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_MATERIALINVENTORY\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n\n      if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\") {\n        if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\") {\n          inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n          inputData[\"materialCatList\"] = this.state.materialCatList;\n          inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value;\n          inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n          const inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"getMaterialInventoryByID\",\n            displayName: \"Material\",\n            inputData: inputData\n          };\n\n          if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n            this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo, this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTUSERROLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIAL\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALCATEGORY\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      }; // if (this.props.Login.operations === 'IDS_OPENDATE') {\n      //     this.props.validateEsignCredential(inputParam, \"showModalPopup\");\n      // }\n      //   else {\n\n      this.props.validateEsignCredential(inputParam, \"openModal\"); // }\n    };\n\n    this.viewMaterialFile = filedata => {\n      const inputParam = {\n        inputData: {\n          nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n          materialinventoryfile: JSON.stringify(filedata['jsondata']),\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: \"view\",\n        methodUrl: \"AttachedMaterialInventoryFile\",\n        screenname: \"IDS_MATERIALINVENTORY\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let showMaterialSection = this.props.Login.showMaterialSection;\n      let isneedcombomulti = this.props.Login.isneedcombomulti;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showModalPopup = this.props.Login.showModalPopup;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n          openModal = false;\n          showModalPopup = false;\n        }\n      } else {\n        openModal = false;\n        showMaterialSection = false;\n        isneedcombomulti = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          showMaterialSection,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"nmaterialtypecode\") {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.searchRef.current.value = \"\";\n          const inputParamcombo = {\n            nmaterialtypecode: comboData.item.nmaterialtypecode\n          };\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\n        }\n\n        if (fieldName === \"nmaterialcode\") {\n          const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\n          selectedMaterialcombo[\"nmaterialcode\"] = comboData;\n          this.setState({\n            selectedMaterialcombo\n          });\n        } else if (fieldName === \"nmaterialcatcode\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData; // this.setState({ selectedMaterialCat });\n\n          this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\n        } else if (fieldName === \"nmaterialsectioncode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nmaterialsectioncode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName === \"nlinkcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nlinkcode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData;\n          this.setState({\n            selectedMaterialCat\n          });\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldName.label === \"IDS_STORAGECONDITION\") {\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldName === \"value\") {\n          const comboitem = this.state.comboitem || {};\n          comboitem[fieldName] = comboData;\n          this.setState({\n            comboitem\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, optional1, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\n        if (event.target.type === 'checkbox') {\n          if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\n        } else if (event.target.type === 'radio') {\n          selectedRecord[event.target.name] = optional2;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.saveClick = () => {\n      let operation = \"update\";\n      let operations = 'IDS_OPENDATE';\n      let inputData = [];\n      inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE && convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\n      inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\n      inputData[\"nflag\"] = 3;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode;\n      inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n      inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: operation\n      };\n      let masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operations,\n            showModalPopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      let varmain = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\n        inputData[\"MaterialInventory\"] = {};\n        inputData[\"DateList\"] = [];\n        const Layout = this.props.Login.masterData.selectedTemplate[0].sjsonobjstr;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                inputData[\"MaterialInventory\"][component.label] = {\n                  label: this.state.selectedRecord[component.label][\"label\"],\n                  value: this.state.selectedRecord[component.label][\"value\"]\n                };\n              } else if (component.inputtype === 'date') {\n                if (this.state.selectedRecord[component.label]) {\n                  inputData[\"MaterialInventory\"][`tz${component.label}`] = {\n                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                  };\n                  inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                  inputData[\"DateList\"].push(component.label);\n                }\n              } else {\n                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label];\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  inputData[\"MaterialInventory\"][componentrow.label] = {\n                    label: this.state.selectedRecord[componentrow.label][\"label\"],\n                    value: this.state.selectedRecord[componentrow.label][\"value\"]\n                  };\n                } else if (componentrow.inputtype === 'date') {\n                  if (this.state.selectedRecord[componentrow.label]) {\n                    inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = {\n                      label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                    };\n                    inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(componentrow.label);\n                  }\n                } else {\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label];\n                }\n              });\n            });\n          });\n        });\n        inputData[\"MaterialInventory\"] = { ...inputData[\"MaterialInventory\"],\n          \"IDS_INVENTORYTRANSACTIONTYPE\": {\n            label: \"Outside\",\n            value: 2\n          },\n          \"IDS_TRANSACTIONTYPE\": {\n            label: \"Received\",\n            value: 47\n          },\n          [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\n            label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\n            value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\n          },\n          \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RETURNEDQUANTITY'],\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n          \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\n        };\n        inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"]);\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n\n        if (this.props.Login.operation === 'create') {\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        } else {\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode;\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n            this.ConfirmComponent();\n          } else {\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, masterData, \"openModal\");\n            }\n          }\n        }\n      } else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\n        let nflag = true;\n\n        if (this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47) {\n          nflag = false;\n        }\n\n        if (nflag ? this.state.selectedRecord['IDS_RETURNEDQUANTITY'] <= parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY']) : true) {\n          const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr;\n          let dynamicobj = {};\n          inputData[\"DateList\"] = [];\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                if (component.inputtype === 'combo') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = {\n                      label: this.state.selectedRecord[component.label][\"label\"],\n                      value: this.state.selectedRecord[component.label][\"value\"]\n                    };\n                  }\n                } else if (component.inputtype === 'Numeric') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString();\n                  }\n                } else if (component.inputtype === 'date') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[`tz${component.label}`] = {\n                      label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                    };\n                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(component.label);\n                  }\n                } else {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label];\n                  }\n                }\n\n                component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                  if (componentrow.inputtype === 'combo') {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = {\n                        label: this.state.selectedRecord[componentrow.label][\"label\"],\n                        value: this.state.selectedRecord[componentrow.label][\"value\"]\n                      };\n                    }\n                  } else {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label];\n                    }\n                  }\n                });\n              });\n            });\n          });\n          dynamicobj = { ...dynamicobj,\n            \"ntransactiontype\": this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\n            \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== undefined ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY : this.props.Login.navailableqtyref,\n            \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\n          };\n          inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision;\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode;\n          inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj);\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventoryTrans\",\n            inputData: inputData,\n            operation: 'create',\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n          let masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_RETURNEDLESSTHANAVAILABLE\"\n          }));\n        }\n      } else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\n        inputParam = this.onSaveMaterialFile();\n        let masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        if (this.props.Login.operation !== \"update\") {\n          let showMaterialSection = this.props.Login.showMaterialSection;\n          let newarr = [];\n          let newarrobj = [];\n          inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode;\n\n          if (this.state.selectedRecord[\"nmaterialsectioncode\"].length > 1) {\n            newarr = this.state.selectedRecord.nmaterialsectioncode.map(temp => {\n              return {\n                \"ssectionname\": temp.label,\n                \"nsectioncode\": temp.value,\n                \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n              };\n            });\n          } else {\n            newarr.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          }\n\n          inputData[\"materialSectionJson\"] = JSON.stringify(newarr);\n          inputParam = {\n            classUrl: \"material\",\n            methodUrl: \"MaterialSection\",\n            inputData: inputData,\n            operation: \"create\",\n            showMaterialSection: showMaterialSection,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef\n          };\n        } else {\n          let newarr = [];\n          let newarrobj = [];\n          inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode;\n\n          if (Array.isArray(this.state.selectedRecord[\"nmaterialsectioncode\"])) {\n            newarrobj.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          } else {\n            newarrobj.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          }\n\n          inputData[\"materialSectionJson\"] = JSON.stringify(newarrobj);\n          inputData[\"MaterialSection\"] = {\n            \"IDS_REORDERLEVEL\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"]\n          };\n          inputData[\"nmaterialsectioncode\"] = this.state.selectedRecord.nmaterialsectioncodeprimaryKeyValue;\n          inputParam = {\n            classUrl: \"material\",\n            methodUrl: \"MaterialSection\",\n            inputData: inputData,\n            showMaterialSection: false,\n            operation: \"update\",\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n      inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n      inputData[\"materialCatList\"] = this.state.materialCatList;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"getMaterialInventoryByID\",\n        displayName: \"MaterialInventory\",\n        inputData: inputData\n      };\n      this.setState({\n        sectionDataState: {\n          skip: 0,\n          take: 10\n        }\n      });\n\n      if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n        // this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo,\n        //     this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n        this.props.getMaterialInventoryByID(inputParam, this.props.Login.masterData.SelectedMaterialType[0], this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.searchFieldList = [{\n      feild: \"IDS_MATERIALNAME\",\n      jsonfeild: \"jsondata\"\n    }];\n    this.state = {\n      masterStatus: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      error: \"\",\n      isOpen: false,\n      ScreenRightsData: [],\n      userRoleData: [],\n      availableDatas: [],\n      selectedRecord: {},\n      filterCatList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      SelectedScreenrights: undefined,\n      selectedcombo: undefined,\n      selectedMaterialCatRole: undefined,\n      isSelectedRecordChange: false,\n      selectedMaterialCat: undefined,\n      materialCatList: [],\n      selectedListmasterSwitch: undefined,\n      custombuttonstate: false,\n      ControlRightsParent: [],\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      ConfirmDialogScreen: false,\n      controlMap: new Map(),\n      showAccordian: true,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.ControlButton = [{\n      value: 1,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 2,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 3,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLESIGNRIGHTS\"\n      })\n    }, {\n      value: 4,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLESIGNRIGHTS\"\n      })\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log('Master Material Inventory :', this.props.Login.masterData);\n    this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode');\n    const searchedData = this.props.Login.masterData.searchedData;\n    const ScreenRights = this.props.Login.masterData.ScreenRights || [];\n    const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\n    const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\n    const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\n    const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\n    const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\n    const addParameterId = this.state.controlMap.has(\"AddMaterialSafetyInstructions\") && this.state.controlMap.get(\"AddMaterialSafetyInstructions\").ncontrolcode;\n    const addMaterialProperty = this.state.controlMap.has(\"AddMaterialProperties\") && this.state.controlMap.get(\"AddMaterialProperties\").ncontrolcode;\n    let masterlistmain = [];\n    this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.map((temp, i) => {\n      return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata);\n    });\n    let searchedDatalistmain = [];\n\n    if (this.props.Login.masterData.searchedData === undefined) {\n      searchedDatalistmain = undefined;\n    } else {\n      this.props.Login.masterData.searchedData && this.props.Login.masterData.searchedData.map((temp, i) => {\n        return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata);\n      });\n    }\n\n    let searchFieldList = [];\n    let mandatoryFieldsMaterialFile = [];\n\n    if (this.props.Login.masterData.SelectedMaterialType) {\n      if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\n        if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        }\n      }\n    }\n\n    const filterParam = {\n      inputListName: \"MaterialInventory\",\n      selectedObject: \"SelectedMaterialInventory\",\n      primaryKeyField: \"nmaterialinventorycode\",\n      fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n      },\n      masterData: this.props.Login.masterData,\n      isjsondata: true,\n      searchFieldList: searchFieldList\n    }; //let mandatoryFieldsMaterialFile = []\n\n    this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && this.props.Login.selectedRecord && this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK ? mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }] : mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 64,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"MaterialInventory\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: searchedDatalistmain || masterlistmain,\n      getMasterDetail: master => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata,\n      primaryKeyField: \"nmaterialinventorycode\",\n      mainField: \"IDS_INVENTORYID\",\n      firstField: \"smaterialname\",\n      secondField: \"status\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      viewId: viewId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showFilterIcon: true,\n      onFilterSubmit: this.onFilterSubmit,\n      viewMaterialInventoryDetails: this.viewMaterialInventoryDetails,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(MaterialFilter, {\n          filterCatList: this.state.filterCatList || [],\n          materialCatList: this.state.materialCatList || [],\n          MaterialComboList: this.state.MaterialComboList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          selectedMaterialCat: this.state.selectedMaterialCat || {},\n          selectedMaterialcombo: this.state.selectedMaterialcombo || {},\n          onComboChange: this.onComboChange,\n          ismaterialInventory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 45\n          }\n        })\n      }],\n      openModal: () => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\", \"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, this.state.selectedMaterialCat, addId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 53\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIALINVENTORY\"\n    })), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\", \"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, this.state.selectedMaterialCat, editId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.openDatePopup(this.props.Login.masterData, openDateId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalendar,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => // this.props.updateMaterialStatus(\n      //     this.props.Login.masterData, this.props.Login.userInfo,\n      //     releaseId, 1)\n      this.updateMaterialStatus(releaseId, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => // this.props.updateMaterialStatus(\n      //     this.props.Login.masterData, this.props.Login.userInfo,\n      //     retireId, 2)\n      this.updateMaterialStatus(retireId, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 53\n      }\n    }), this.props.Login.masterData && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 85\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY' : this.props.Login.screenname,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {} // mandatoryFields={this.props.Login.screenname === 'IDS_MATERIALINVENTORY' ? mandatoryFieldsMaterialInventory : ''}\n      ,\n      mandatoryFields: this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ? this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].sjsonobjstr) : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr) : mandatoryFieldsMaterialFile,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ? /*#__PURE__*/React.createElement(AddMaterialFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChangeFile,\n        onDrop: this.onDropMaterialFile,\n        deleteAttachment: this.deleteAttachment,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.Login.linkMaster,\n        maxSize: 20,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MATERIALINVENTORYFILE\"\n        }),\n        name: \"testfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.state.selectedRecord,\n        templateData: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate[0].sjsonobjstr : this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr,\n        onNumericInputChange: this.onNumericInputChange,\n        handleChange: this.handleChange,\n        onInputOnChange: this.onInputOnChange,\n        comboData: this.props.Login.templateData && this.props.Login.templateData.comboData,\n        onComboChange: this.onComboChangedynamic,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        needfeild: this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47 ? transactionStatus.YES : transactionStatus.NO,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 37\n        }\n      }) //         :\n      //         <DynamicSlideout\n      //             selectedRecord={this.props.Login.selectedRecord}\n      //             templateData={this.props.Login.masterData.selectedTemplateSafetyInstructions &&\n      //                 this.props.Login.masterData.selectedTemplateSafetyInstructions[0].sjsonobjstr}\n      //             handleChange={this.handleChange}\n      //             onInputOnChange={this.onInputOnChange}\n      //         />\n      //     :\n      //     <DynamicSlideout\n      //         selectedRecord={this.props.Login.selectedRecord}\n      //         templateData={this.props.Login.masterData.selectedTemplateProperties &&\n      //             this.props.Login.masterData.selectedTemplateProperties[0].sjsonobjstr}\n      //         userInfo={this.props.Login.userInfo}\n      //         handleChange={this.handleChange}\n      //         onInputOnChange={this.onInputOnChange}\n      //         handleDateChange={this.handleDateChange}\n      //     /> :\n      // <AddMaterialFile\n      //     selectedRecord={this.state.selectedRecord || {}}\n      //     onInputOnChange={this.onInputOnChange}\n      //     onDrop={this.onDropMaterialFile}\n      //     deleteAttachment={this.deleteAttachment}\n      //     onComboChange={this.onComboChange}\n      //     linkMaster={this.props.Login.linkMaster}\n      //     maxSize={20}\n      //     maxFiles={1}\n      //     multiple={false}\n      //     label={this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYFILE\" })}\n      //     name=\"testfilename\"\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    }), this.props.Login.showModalPopup && /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: true,\n      modalTitle: this.props.intl.formatMessage({\n        id: this.props.Login.ModaTitle\n      }),\n      needSave: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick,\n      validateEsign: this.validateEsign //needSave={ this.props.Login.ModaTitle === 'IDS_OPENDATE'?transactionStatus.YES:transactionStatus.NO}\n      ,\n      modalBody: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? /*#__PURE__*/React.createElement(AddMaterialOpenDate, {\n        isMultiLingualLabel: true,\n        label: 'IDS_OPENDATE',\n        intl: this.props.intl.formatMessage,\n        selectedRecord: this.state.selectedRecord,\n        dateonly: true,\n        onComboChange: this.onComboChangeopendate,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 77\n        }\n      }) : this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_INVENTORYID',\n        message: 'Inventory ID',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ? this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"))), this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].sjsonobjstr, this.props.Login.masterData.SelectedMaterialInventory.jsondata), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_OPENDATE',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ? this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] : \"-\")))) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 37\n        }\n      }, this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr, this.props.Login.viewQuantityTransdetails), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_AVAILABLEQTY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['namountleft'] ? this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\"))), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_ISSUEDQUANTITY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['nqtyissued'] ? this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n    breadCrumbData.push({\n      \"label\": \"IDS_MATERIALTYPE\",\n      \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIALCAT\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCategory ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIAL\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCrumb ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\"\n    });\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let bool = false;\n    let {\n      selectedRecord,\n      selectedcombo,\n      comboitem,\n      filterData,\n      filterCatList,\n      selectedMaterialCat,\n      selectedMaterialcombo,\n      materialCatList,\n      MaterialComboList,\n      SelectedMaterialInventory\n    } = this.state;\n    let masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\n      bool = true;\n      selectedMaterialCat = this.props.Login.selectedMaterialCat;\n    }\n\n    if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\n      bool = true;\n      SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory;\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      bool = true;\n      comboitem = this.props.Login.comboitem;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (this.props.Login.masterData.MaterialType !== undefined) {\n      if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\n        bool = true; // const userrole = constructOptionList(this.props.Login.masterData.MaterialType || [], \"nmaterialtypecode\",\n        //     \"smaterialtypename\", undefined, undefined, undefined);\n        //          defaultStatusFieldName) \n\n        const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType, \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined, undefined, undefined, true, this.props.Login.userInfo.slanguagetypecode);\n        filterCatList = materialTypeList.get(\"OptionList\");\n        selectedcombo = {\n          nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\n            \"value\": masterData.MaterialType[0].nmaterialtypecode,\n            \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\n          } : \"\"\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\n      bool = true;\n      const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      materialCatList = MaterialCategoryMain.get(\"OptionList\");\n      selectedMaterialCat = {\n        nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\n          \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\n          \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\n      bool = true;\n      let MaterialComboArr = [];\n      this.props.Login.masterData.MaterialCombo.map(temp => {\n        MaterialComboArr.push(temp.jsondata);\n      });\n      const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      MaterialComboList = MaterialCombo.get(\"OptionList\");\n      selectedMaterialcombo = {\n        nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\n          \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\n          \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData();\n    }\n\n    if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\n      if (this.props.Login.masterData.searchedData) {\n        if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\n          this.setState({\n            skip: 0\n          });\n        }\n      }\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        comboitem,\n        filterData,\n        selectedcombo,\n        filterCatList,\n        selectedMaterialCat,\n        selectedMaterialcombo,\n        materialCatList,\n        MaterialComboList,\n        SelectedMaterialInventory\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED && this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\n      const fieldArray = [];\n      let postParam = {\n        inputListName: \"MaterialInventory\",\n        selectedObject: \"SelectedMaterialInventory\",\n        primaryKeyField: \"nmaterialinventorycode\",\n        primaryKeyValue: fieldArray,\n        fetchUrl: \"materialinventory/getMaterialInventory\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        },\n        \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n        \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\n      };\n      modalName = 'openModal';\n      const inputParam = {\n        methodUrl: \"MaterialInventory\",\n        classUrl: \"materialinventory\",\n        inputData: {\n          \"material\": this.props.Login.masterData.SelectedMaterial,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"userinfo\": this.props.Login.userInfo,\n          //\"nmaterialcode\": this.props.Login.masterData.SelectedMaterial && this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n        },\n        operation: \"delete\",\n        postParam,\n        displayName: \"Material\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            operation: 'delete',\n            screenName: \"Material\",\n            id: \"material\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName);\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTQUARENTINEINVENTORY\"\n      }));\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getAddMaterialInventoryPopup,\n  updateMaterialStatus,\n  openDatePopup,\n  getQuantityTransactionPopup,\n  getQuantityTransactionOnchange,\n  updateStore,\n  initialcombochangeMaterialInvget,\n  viewAttachment,\n  getMaterialChildValues,\n  crudMaster,\n  getMaterialInventoryDetails,\n  getMaterialInventoryByID,\n  addMaterialInventoryFile,\n  filterColumnData,\n  validateEsignCredential\n})(injectIntl(MaterialInventory));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/Material/MaterialInventory.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","Nav","Card","Button","FormGroup","FormLabel","Grid","GridColumn","process","toast","FontAwesomeIcon","faTrashAlt","faSave","faCopy","faPlus","faSync","faPencilAlt","faCalendar","SlideOutModal","Esign","ListMaster","ModalShow","CustomTab","showEsign","getControlMap","constructOptionList","sortData","getSameRecordFromTwoArrays","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","constructjsonOptionList","convertDateTimetoString","rearrangeDateFormat","comboChild","callService","updateStore","crudMaster","filterColumnData","validateEsignCredential","viewAttachment","initialcombochangeMaterialInvget","getMaterialInventoryByID","getAddMaterialInventoryPopup","getMaterialInventoryDetails","addMaterialInventoryFile","updateMaterialStatus","openDatePopup","getQuantityTransactionPopup","getMaterialChildValues","getQuantityTransactionOnchange","DEFAULT_RETURN","transactionStatus","attachmentType","ContentPanel","AtSubCard","ReadOnlyText","ConfirmMessage","BreadcrumbComponent","ReactTooltip","MaterialFilter","DynamicSlideout","MaterialSectionTab","Affix","AddMaterialOpenDate","AddMaterialSafetyInstructionTab","AddMaterialFile","InvenotryTransaction","MaterialInvFileTab","mapStateToProps","state","Login","MaterialInventory","Component","constructor","props","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","setState","paneSizeChange","d","splitChangeWidthPercentage","quantityTransaction","param","masterData","jsondata","ntranscode","RELEASED","ncontrolCode","openModal","updateInfo","typeName","data","userInfo","warn","intl","formatMessage","id","viewQuantityTrans","viewQuantityTransdetails","showModalPopup","ModaTitle","accordianDesign","Template","selectedmasterlistmain1","selectedmasterlistmain","push","designaccordian","map","row","children","column","component","inputtype","label","length","YES","needAccordian","hasOwnProperty","componentrow","onComboChangeopendate","comboData","control","selectedRecord","onComboChangedynamic","customName","comboName","parent","Layout","QuantityTransactionTemplate","sjsonobjstr","comboComponents","parentcolumnlist","columnList","childColumnList","val","inputParem","child","source","primarykeyField","valuemember","value","item","templateData","Object","keys","viewMaterialInventoryDetails","console","log","SelectedMaterialInventory","closeModalShow","handleDateChange","dateValue","dateName","onTabChange","tabProps","screenName","onDropMaterialFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","onSaveMaterialFile","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","testFileArray","testFile","nmaterialinventorycode","nmaterialinventoryfilecode","nstatus","ACTIVE","ndefaultstatus","LINK","formData","FormData","FTP","Array","isArray","forEach","index","tempData","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","ntestfilecode","sdescription","trim","NA","size","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","inputParam","operation","inputData","userinfo","isFileupload","classUrl","methodUrl","dynamicmandatoryFeilds","mandatoryFeildsMaterial","mandatory","tabDetail","tabMap","Map","dataresultarr","temp","set","controlMap","userRoleControlRights","sectionDataState","skip","take","screenname","dataState","getTestDetails","deleteRecordmain","MaterialInventoryFile","viewMaterialFile","settings","onInputOnChangeFile","optional2","isSelectedRecordChange","target","type","checked","buttonId","nflag","nmaterialcode","nmaterialtypecode","nmaterialcatcode","searchRef","nformcode","loadEsign","screenData","deleteParam","selected","methodDataState","instrumentCatDataState","toLowerCase","ConfirmDelete","deleteId","confirmMessage","confirm","handleClickDelete","openFilter","showFilter","closeFilter","onFilterSubmit","current","selectedMaterialCat","selectedMaterialcombo","selectedcombo","materialCatList","displayName","handlePageChange","e","validateEsign","sreason","password","filedata","materialinventoryfile","closeModal","showMaterialSection","isneedcombomulti","selectedId","onComboChange","inputParamcombo","displaymember","comboitem","onInputOnChange","optional1","DEACTIVE","saveClick","operations","IDS_OPENDATE","tzIDS_OPENDATE","SelectedMaterialType","SelectedMaterialCategory","SelectedMaterialCrumb","onSaveClick","saveType","formRef","varmain","postParam","selectedTemplate","siteLabelName","siteName","nsitecode","QUARANTINE","copyScreenRights","ConfirmComponent","parseFloat","dynamicobj","toString","IDS_TRANSACTIONTYPE","IDS_AVAILABLEQUANTITY","navailableqtyref","IDS_INVENTORYID","nprecision","newarr","newarrobj","SelectedMaterial","nmaterialsectioncode","nmaterialsectioncodeprimaryKeyValue","onNumericInputChange","copyAlertSave","reloadData","parseInt","searchFieldList","feild","jsonfeild","masterStatus","error","isOpen","ScreenRightsData","userRoleData","availableDatas","filterCatList","SelectedScreenrights","selectedMaterialCatRole","selectedListmasterSwitch","custombuttonstate","ControlRightsParent","ControlRights","ConfirmDialogScreen","showAccordian","dataResult","columnName","rowIndex","createRef","ControlButton","getDerivedStateFromProps","render","ScreenRights","searchedData","addId","has","get","ncontrolcode","editId","releaseId","retireId","openDateId","viewId","addParameterId","addMaterialProperty","masterlistmain","i","searchedDatalistmain","mandatoryFieldsMaterialFile","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","isjsondata","breadCrumbData","filterData","master","MaterialComboList","linkMaster","handleChange","timeZoneList","componentDidMount","parentHeight","height","clientHeight","firstPane","generateBreadCrumData","smaterialtypename","slanguagetypecode","smaterialcatname","smaterialname","componentDidUpdate","previousProps","bool","values","MaterialType","materialTypeList","MaterialCategoryMain","MaterialCombo","MaterialComboArr","componentWillUnmount","modalName","RETIRED","fieldArray","primaryKeyValue"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, Button, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync, faPencilAlt, faCalendar } from '@fortawesome/free-solid-svg-icons';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ModalShow from '../../components/ModalShow.jsx';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport { showEsign, getControlMap, constructOptionList, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild } from '../../components/CommonScript';\r\n\r\nimport {\r\n    callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment,\r\n    initialcombochangeMaterialInvget, getMaterialInventoryByID,\r\n    getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile,\r\n    updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange\r\n} from '../../actions';\r\n\r\n\r\n// import {\r\n//     initialcombochangeMaterialInvget, getMaterialInventoryByID,\r\n//     getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile,\r\n//     updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange\r\n// } from '../../actions/MaterialInventoryAction';\r\n\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport { ContentPanel, AtSubCard, ReadOnlyText } from '../../components/App.styles';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport MaterialFilter from './MaterialFilter';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport MaterialSectionTab from './MaterialSectionTab';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\r\nimport AddMaterialSafetyInstructionTab from './AddMaterialSafetyInstructionTab';\r\nimport AddMaterialFile from './AddMaterialFile';\r\nimport InvenotryTransaction from './InvenotryTransaction';\r\nimport MaterialInvFileTab from './MaterialInvFileTab';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialInventory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n        this.searchFieldList = [{ feild: \"IDS_MATERIALNAME\", jsonfeild: \"jsondata\" }]\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            error: \"\",\r\n            isOpen: false,\r\n            ScreenRightsData: [], userRoleData: [],\r\n            availableDatas: [],\r\n            selectedRecord: {},\r\n            filterCatList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            SelectedScreenrights: undefined,\r\n            selectedcombo: undefined, selectedMaterialCatRole: undefined,\r\n            isSelectedRecordChange: false,\r\n            selectedMaterialCat: undefined,\r\n            materialCatList: [],\r\n            selectedListmasterSwitch: undefined,\r\n            custombuttonstate: false,\r\n            ControlRightsParent: [],\r\n\r\n\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            ConfirmDialogScreen: false,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n            rowIndex: 0,\r\n            data: [],\r\n            splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.ControlButton = [{ value: 1, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 2, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 3, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLESIGNRIGHTS\" }) },\r\n        { value: 4, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLESIGNRIGHTS\" }) }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n        console.log('Master Material Inventory :', this.props.Login.masterData)\r\n        this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode')\r\n        const searchedData = this.props.Login.masterData.searchedData\r\n        const ScreenRights = this.props.Login.masterData.ScreenRights || [];\r\n        const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\r\n        const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\r\n        const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\r\n        const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\r\n        const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\r\n\r\n        const addParameterId = this.state.controlMap.has(\"AddMaterialSafetyInstructions\")\r\n            && this.state.controlMap.get(\"AddMaterialSafetyInstructions\").ncontrolcode;\r\n        const addMaterialProperty = this.state.controlMap.has(\"AddMaterialProperties\")\r\n            && this.state.controlMap.get(\"AddMaterialProperties\").ncontrolcode;\r\n\r\n\r\n        let masterlistmain = []\r\n        this.props.Login.masterData.MaterialInventory &&\r\n            this.props.Login.masterData.MaterialInventory.map((temp, i) => {\r\n                return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata)\r\n            })\r\n        let searchedDatalistmain = []\r\n\r\n        if (this.props.Login.masterData.searchedData === undefined) {\r\n            searchedDatalistmain = undefined\r\n        } else {\r\n            this.props.Login.masterData.searchedData &&\r\n                this.props.Login.masterData.searchedData.map((temp, i) => {\r\n                    return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata)\r\n                })\r\n        }\r\n\r\n\r\n        let searchFieldList = []\r\n        let mandatoryFieldsMaterialFile = []\r\n        if (this.props.Login.masterData.SelectedMaterialType) {\r\n            if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\r\n                if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n            }\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\", primaryKeyField: \"nmaterialinventorycode\",\r\n            fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode },\r\n            masterData: this.props.Login.masterData,\r\n            isjsondata: true,\r\n            searchFieldList: searchFieldList\r\n        };\r\n\r\n        //let mandatoryFieldsMaterialFile = []\r\n        this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && (this.props.Login.selectedRecord &&\r\n            this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK) ?\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            :\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={64}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix>\r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={4} >\r\n\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"MaterialInventory\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={searchedDatalistmain || masterlistmain}\r\n                                getMasterDetail={(master) => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata}\r\n                                primaryKeyField=\"nmaterialinventorycode\"\r\n                                mainField=\"IDS_INVENTORYID\"\r\n                                firstField=\"smaterialname\"\r\n                                secondField=\"status\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                viewId={viewId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <MaterialFilter\r\n                                                filterCatList={this.state.filterCatList || []}\r\n                                                materialCatList={this.state.materialCatList || []}\r\n                                                MaterialComboList={this.state.MaterialComboList || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}//\r\n                                                selectedMaterialCat={this.state.selectedMaterialCat || {}}\r\n                                                selectedMaterialcombo={this.state.selectedMaterialcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                ismaterialInventory={true}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                openModal={() => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\",\r\n                                    \"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                    this.state.selectedMaterialCat, addId, this.props.Login.masterData,\r\n                                    this.state.selectedRecord)}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        {this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ?\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                    <Card.Title className=\"product-title-main\">{this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORY\" })}</Card.Title>\r\n                                                    <Card.Subtitle>\r\n                                                        <div className=\"d-flex product-category\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            </h2>\r\n                                                            <div className=\"d-inline \">\r\n                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\",\r\n                                                                            \"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                                                            this.state.selectedMaterialCat, editId, this.props.Login.masterData,\r\n                                                                            this.state.selectedRecord)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.openDatePopup(this.props.Login.masterData, openDateId)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faCalendar}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        // this.props.updateMaterialStatus(\r\n                                                                        //     this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                        //     releaseId, 1)\r\n                                                                        this.updateMaterialStatus(releaseId, 1)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        // this.props.updateMaterialStatus(\r\n                                                                        //     this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                        //     retireId, 2)\r\n                                                                        this.updateMaterialStatus(retireId, 2)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                \r\n\r\n\r\n\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                    </Row>\r\n                                                    {this.props.Login.masterData && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n                                                </Card.Body>\r\n                                            </Card> : \"\"}\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                { }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' :\r\n                            this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY'\r\n                            : this.props.Login.screenname}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        // mandatoryFields={this.props.Login.screenname === 'IDS_MATERIALINVENTORY' ? mandatoryFieldsMaterialInventory : ''}\r\n                        mandatoryFields={this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ?\r\n                            this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1\r\n                                || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ||\r\n                                this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].sjsonobjstr)\r\n                                : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr) : mandatoryFieldsMaterialFile}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ?\r\n                                    <AddMaterialFile\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChangeFile}\r\n                                        onDrop={this.onDropMaterialFile}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        onComboChange={this.onComboChange}\r\n                                        linkMaster={this.props.Login.linkMaster}\r\n                                        maxSize={20}\r\n                                        maxFiles={1}\r\n                                        multiple={false}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYFILE\" })}\r\n                                        name=\"testfilename\"\r\n                                    />\r\n                                    :\r\n                                    <DynamicSlideout\r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        templateData={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate &&\r\n                                            this.props.Login.masterData.selectedTemplate[0].sjsonobjstr\r\n                                            : this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        handleChange={this.handleChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        comboData={this.props.Login.templateData && this.props.Login.templateData.comboData}\r\n                                        onComboChange={this.onComboChangedynamic}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                        needfeild={this.state.selectedRecord['IDS_TRANSACTIONTYPE'] && this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47 ? transactionStatus.YES :\r\n                                            transactionStatus.NO}\r\n                                    />\r\n                            //         :\r\n                            //         <DynamicSlideout\r\n                            //             selectedRecord={this.props.Login.selectedRecord}\r\n                            //             templateData={this.props.Login.masterData.selectedTemplateSafetyInstructions &&\r\n                            //                 this.props.Login.masterData.selectedTemplateSafetyInstructions[0].sjsonobjstr}\r\n                            //             handleChange={this.handleChange}\r\n                            //             onInputOnChange={this.onInputOnChange}\r\n                            //         />\r\n                            //     :\r\n                            //     <DynamicSlideout\r\n                            //         selectedRecord={this.props.Login.selectedRecord}\r\n                            //         templateData={this.props.Login.masterData.selectedTemplateProperties &&\r\n                            //             this.props.Login.masterData.selectedTemplateProperties[0].sjsonobjstr}\r\n                            //         userInfo={this.props.Login.userInfo}\r\n                            //         handleChange={this.handleChange}\r\n                            //         onInputOnChange={this.onInputOnChange}\r\n                            //         handleDateChange={this.handleDateChange}\r\n                            //     /> :\r\n\r\n                            // <AddMaterialFile\r\n                            //     selectedRecord={this.state.selectedRecord || {}}\r\n                            //     onInputOnChange={this.onInputOnChange}\r\n                            //     onDrop={this.onDropMaterialFile}\r\n                            //     deleteAttachment={this.deleteAttachment}\r\n                            //     onComboChange={this.onComboChange}\r\n                            //     linkMaster={this.props.Login.linkMaster}\r\n                            //     maxSize={20}\r\n                            //     maxFiles={1}\r\n                            //     multiple={false}\r\n                            //     label={this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYFILE\" })}\r\n                            //     name=\"testfilename\"\r\n                            // />\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n                {this.props.Login.showModalPopup &&\r\n                    <ModalShow\r\n                        modalShow={true}\r\n                        modalTitle={this.props.intl.formatMessage({ id: this.props.Login.ModaTitle })}\r\n                        needSave={this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true}\r\n                        closeModal={this.closeModalShow}\r\n                        onSaveClick={this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        //needSave={ this.props.Login.ModaTitle === 'IDS_OPENDATE'?transactionStatus.YES:transactionStatus.NO}\r\n                        modalBody={\r\n                            this.props.Login.ModaTitle === 'IDS_OPENDATE' ? <AddMaterialOpenDate\r\n                                isMultiLingualLabel={true}\r\n                                label={'IDS_OPENDATE'}\r\n                                intl={this.props.intl.formatMessage}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                dateonly={true}\r\n                                onComboChange={this.onComboChangeopendate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChange={this.handleDateChange}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                            /> :\r\n                                this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ?\r\n                                    <Row>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_INVENTORYID'} message={'Inventory ID'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ?\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        {this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].sjsonobjstr,\r\n                                            this.props.Login.masterData.SelectedMaterialInventory.jsondata)}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_OPENDATE'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ?\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row> :\r\n                                    <Row>\r\n\r\n                                        {this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr,\r\n                                            this.props.Login.viewQuantityTransdetails)}\r\n                                        {/* <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_RETURNEDQTY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['IDS_RETURNEDQUANTITY'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['IDS_RETURNEDQUANTITY'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col> */}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_AVAILABLEQTY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_ISSUEDQUANTITY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                        }\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    quantityTransaction = (param) => {\r\n        if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\r\n            let ncontrolCode = this.props.Login.ncontrolCode\r\n            let openModal = this.props.Login.openModal\r\n            openModal = true\r\n            ncontrolCode = param;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal }\r\n            }\r\n            this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRELEASEDINVENTORY\" }));\r\n\r\n        }\r\n    }\r\n    viewQuantityTrans = (viewQuantityTransdetails) => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        let ModaTitle = this.props.Login.ModaTitle;\r\n        showModalPopup = true;\r\n        ModaTitle = 'IDS_QUANTITYTRANSACTION'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup, ModaTitle, viewQuantityTransdetails }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    accordianDesign = (Template, selectedmasterlistmain1) => {\r\n        let selectedmasterlistmain = [];\r\n        selectedmasterlistmain.push(selectedmasterlistmain1)\r\n        let designaccordian = [];\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.inputtype === 'combo') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            selectedmasterlistmain[0][component.label]['label'] : \"\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'date') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                          //  rearrangeDateFormatDateOnly(this.props.Login.userInfo, selectedmasterlistmain[0][component.label])\r\n                                             selectedmasterlistmain[0][component.label]\r\n                                            : \"-\"}\r\n\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'toggle') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] &&\r\n                                            selectedmasterlistmain[0][component.label] === transactionStatus.YES ?\r\n                                            'Yes' : 'No'}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (component.label !== undefined) {\r\n                            if (!component.needAccordian) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.inputtype === 'combo') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'date') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'toggle') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] &&\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ?\r\n                                                'Yes' : 'No'}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n        })\r\n        return designaccordian;\r\n    }\r\n    onComboChangeopendate = (comboData, control) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[control] = comboData;\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    onComboChangedynamic = (comboData, control, customName) => {\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.inputtype === 'date') {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[`tz${control.label}`] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (control.parent && control.parent === true) {\r\n            let data = [];\r\n            const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            data.push(component)\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    data.push(componentrow)\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let parentcolumnlist = []\r\n            comboComponents.map(columnList => {\r\n                if (columnList.hasOwnProperty('child')) {\r\n                    parentcolumnlist.push(columnList)\r\n                }\r\n            })\r\n            let childColumnList = {};\r\n            parentcolumnlist.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n            })\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getMaterialChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord,\r\n                parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0]\r\n                , childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData)\r\n        }\r\n        else {\r\n            if (control.label === 'IDS_TRANSACTIONTYPE') {\r\n                this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.templateData)\r\n            }\r\n            else {\r\n                selectedRecord[control.label] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n\r\n    }\r\n    viewMaterialInventoryDetails = () => {\r\n        console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory)\r\n        console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory)\r\n        if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\r\n            let showModalPopup = this.props.Login.showModalPopup;\r\n            let ModaTitle = this.props.Login.ModaTitle;\r\n            showModalPopup = true;\r\n            ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { showModalPopup, ModaTitle }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n        }\r\n    }\r\n    closeModalShow = () => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        showModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\"\r\n        });\r\n    }\r\n    onSaveMaterialFile = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n        let testFile = {\r\n            nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\r\n            nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0]));\r\n\r\n        let inputParam;\r\n        if (this.props.Login.operation === 'create') {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"create\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\"\r\n            }\r\n        }\r\n        else {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"update\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\"\r\n            }\r\n        }\r\n\r\n        return inputParam;\r\n    }\r\n\r\n    dynamicmandatoryFeilds = (Template) => {\r\n        let mandatoryFeildsMaterial = [];\r\n        // this.props.Login.masterData.selectedTemplate &&\r\n        //   this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map((row) => {\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.mandatory) {\r\n                        if (component.inputtype === 'combo') {\r\n                            mandatoryFeildsMaterial.push({\r\n                                \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                            })\r\n                        }\r\n                        else {\r\n                            mandatoryFeildsMaterial.push({\r\n                                \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                            })\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.mandatory) {\r\n                            if (componentrow.inputtype === 'combo') {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                            else {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                    \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        return mandatoryFeildsMaterial;\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        const tabMap = new Map();\r\n        {\r\n            let dataresultarr = []\r\n            this.props.Login.masterData[\"MaterialInventoryTrans\"] &&\r\n                this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp) => {\r\n                    dataresultarr.push(temp.jsondata)\r\n                })\r\n            tabMap.set(\"IDS_INVENTORYTRANSACTION\",\r\n                <InvenotryTransaction\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    dataResult={process(dataresultarr,\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\")\r\n                            ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\")\r\n                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    getTestDetails={this.props.getTestDetails}\r\n                    quantityTransaction={this.quantityTransaction}\r\n                    dataState={{ skip: 0, take: 10 }}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    viewQuantityTrans={this.viewQuantityTrans}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n                    intl={this.props.intl}\r\n                    screenName=\"IDS_QUANTITYTRANSACTION\"\r\n                />\r\n            );\r\n            tabMap.set(\"IDS_MATERIALINVENTORYFILE\",\r\n                <MaterialInvFileTab\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    MaterialFile={this.props.Login.masterData.MaterialInventoryFile || []}\r\n                    addMaterialFile={(param) => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory)}\r\n                    viewMaterialFile={this.viewMaterialFile}\r\n                    screenName=\"IDS_MATERIALINVENTORYFILE\"\r\n                    settings={this.props.settings}\r\n                />);\r\n\r\n\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onInputOnChangeFile = (event, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let isSelectedRecordChange = this.state.isSelectedRecordChange\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = optional2;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    updateMaterialStatus = (buttonId, nflag) => {\r\n        let inputParam = {}\r\n        let inputData = [];\r\n        let operation;\r\n        let masterData = this.props.Login.masterData\r\n        inputData[\"nflag\"] = nflag\r\n        operation = nflag === 1 ? 'RELEASED' : 'RETIRE'\r\n        inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode\r\n        inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcode\r\n        inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialcatcode\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo\r\n        inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: 'update',\r\n            selectedRecord: this.state.selectedRecord,\r\n            searchRef: this.searchRef,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    deleteRecordmain = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                ncontrolCode: deleteParam.ncontrolCode,\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: deleteParam.operation,\r\n            ncontrolCode: deleteParam.ncontrolCode,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_MATERIALINVENTORY\", dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_MATERIALINVENTORY\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\") {\r\n            if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\") {\r\n                inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n                inputData[\"materialCatList\"] = this.state.materialCatList;\r\n                inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value\r\n                inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n                const inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"getMaterialInventoryByID\",\r\n                    displayName: \"Material\",\r\n                    inputData: inputData\r\n                }\r\n                if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n                    this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo,\r\n                        this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIAL\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALCATEGORY\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        breadCrumbData.push(\r\n            {\r\n                \"label\": \"IDS_MATERIALTYPE\",\r\n                \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\",\r\n\r\n            }, {\r\n\r\n            \"label\": \"IDS_MATERIALCAT\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCategory ?\r\n                this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\",\r\n        }, {\r\n\r\n            \"label\": \"IDS_MATERIAL\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCrumb ?\r\n                this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\",\r\n        }\r\n        );\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let bool = false;\r\n        let { selectedRecord, selectedcombo, comboitem, filterData, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n            materialCatList, MaterialComboList, SelectedMaterialInventory } = this.state\r\n        let masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\r\n            bool = true;\r\n            selectedMaterialCat = this.props.Login.selectedMaterialCat\r\n        }\r\n        if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\r\n            bool = true;\r\n            SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory\r\n        }\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            bool = true;\r\n            comboitem = this.props.Login.comboitem\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.MaterialType !== undefined) {\r\n            if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\r\n                bool = true;\r\n                // const userrole = constructOptionList(this.props.Login.masterData.MaterialType || [], \"nmaterialtypecode\",\r\n                //     \"smaterialtypename\", undefined, undefined, undefined);\r\n                //          defaultStatusFieldName) \r\n                const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType,\r\n                    \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined,\r\n                    undefined, undefined,\r\n                    undefined, true, this.props.Login.userInfo.slanguagetypecode)\r\n                filterCatList = materialTypeList.get(\"OptionList\");\r\n\r\n                selectedcombo = {\r\n                    nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\r\n                        \"value\": masterData.MaterialType[0].nmaterialtypecode,\r\n                        \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\r\n                    } : \"\"\r\n                }\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\r\n            bool = true;\r\n            const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                \"smaterialcatname\", undefined, undefined, undefined);\r\n            materialCatList = MaterialCategoryMain.get(\"OptionList\");\r\n\r\n            selectedMaterialCat = {\r\n                nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\r\n                    \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\r\n                    \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\r\n\r\n            bool = true;\r\n            let MaterialComboArr = [];\r\n            this.props.Login.masterData.MaterialCombo.map((temp => {\r\n                MaterialComboArr.push(temp.jsondata)\r\n            }))\r\n            const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\",\r\n                \"smaterialname\", undefined, undefined, undefined);\r\n            MaterialComboList = MaterialCombo.get(\"OptionList\");\r\n            selectedMaterialcombo = {\r\n                nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\r\n                    \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\r\n                    \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData();\r\n        }\r\n\r\n\r\n        if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\r\n            if (this.props.Login.masterData.searchedData) {\r\n                if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\r\n                    this.setState({ skip: 0 });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord, comboitem, filterData, selectedcombo, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n                materialCatList, MaterialComboList, SelectedMaterialInventory\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handlePageChange = e => {\r\n\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        // if (this.props.Login.operations === 'IDS_OPENDATE') {\r\n        //     this.props.validateEsignCredential(inputParam, \"showModalPopup\");\r\n        // }\r\n        //   else {\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        // }\r\n    }\r\n    viewMaterialFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory\r\n                    && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n                materialinventoryfile: JSON.stringify(filedata['jsondata']),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedMaterialInventoryFile\",\r\n            screenname: \"IDS_MATERIALINVENTORY\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let showMaterialSection = this.props.Login.showMaterialSection\r\n        let isneedcombomulti = this.props.Login.isneedcombomulti;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showModalPopup = this.props.Login.showModalPopup\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                showModalPopup = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            showMaterialSection = false;\r\n            isneedcombomulti = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, showMaterialSection, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    // onComboChange = (comboData, fieldName) => {\r\n    //     if (comboData != null) {\r\n    //         if (fieldName === \"nmaterialtypecode\") {\r\n    //             const selectedcombo = this.state.selectedcombo || {};\r\n    //             selectedcombo[fieldName] = comboData;\r\n    //             this.searchRef.current.value = \"\";\r\n    //             const inputParamcombo = {\r\n    //                 nmaterialtypecode: comboData.item.nmaterialtypecode\r\n    //             };\r\n\r\n    //             const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n    //             this.props.initialcombochangeget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n    //         }\r\n    //         if (fieldName === \"nmaterialcode\") {\r\n    //             const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\r\n    //             selectedMaterialcombo[\"nmaterialcode\"] = comboData;\r\n    //             this.setState({ selectedMaterialcombo });\r\n\r\n    //         }\r\n    //         else if (fieldName === \"nmaterialcatcode\") {\r\n    //             const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n    //             selectedMaterialCat[fieldName] = comboData;\r\n    //             // this.setState({ selectedMaterialCat });\r\n    //             this.props.initialcombochangeget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n    //         }\r\n\r\n    //         else if (fieldName === \"nmaterialsectioncode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"nmaterialsectioncode\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName['valuemember'] === \"nstoragelocationcode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"IDS_STORAGELOCATION\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName['valuemember'] === \"nsuppliercode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"IDS_SUPPLIER\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName['valuemember'] === \"nmanufcode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"IDS_MANUFACTURER\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName['valuemember'] === \"nsectioncode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"IDS_SECTION\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName['valuemember'] === \"nmaterialgradecode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"IDS_GRADE\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //         else if (fieldName === \"nlinkcode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"nlinkcode\"] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n\r\n    //         else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\r\n    //             const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n    //             selectedMaterialCat[fieldName] = comboData;\r\n    //             this.setState({ selectedMaterialCat });\r\n\r\n    //             let comboName = fieldName.label\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             if (comboData) {\r\n    //                 selectedRecord[comboName] = comboData;\r\n    //             } else {\r\n    //                 selectedRecord[comboName] = []\r\n    //             }\r\n\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: { selectedRecord }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n\r\n    //         else if (fieldName.label === \"IDS_STORAGECONDITION\") {\r\n\r\n\r\n    //             let comboName = fieldName.label\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             if (comboData) {\r\n    //                 selectedRecord[comboName] = comboData;\r\n    //             } else {\r\n    //                 selectedRecord[comboName] = []\r\n    //             }\r\n\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: { selectedRecord }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n\r\n    //         //For Onchange\r\n    //         else if (fieldName.displaymember === \"smaterialcatname1\") {\r\n    //             let data = [];\r\n    //             const withoutCombocomponent = []\r\n\r\n    //         }\r\n\r\n\r\n    //         else if (fieldName === \"value\") {\r\n    //             const comboitem = this.state.comboitem || {};\r\n    //             comboitem[fieldName] = comboData;\r\n    //             this.setState({ comboitem });\r\n    //         }\r\n    //         else if (fieldName === \"nformcode\") {\r\n    //             const selectedRecord = this.state.selectedRecord || {};\r\n    //             selectedRecord[\"nformcode\"] = comboData;\r\n    //             let availableDatas = [];\r\n    //             this.state.selectedRecord.nformcode.map(data => {\r\n    //                 return availableDatas.push(data.item);\r\n    //             });\r\n\r\n\r\n    //             this.setState({ selectedRecord, availableDatas });\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nmaterialtypecode\") {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                const inputParamcombo = {\r\n                    nmaterialtypecode: comboData.item.nmaterialtypecode\r\n                };\r\n\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n            if (fieldName === \"nmaterialcode\") {\r\n                const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\r\n                selectedMaterialcombo[\"nmaterialcode\"] = comboData;\r\n                this.setState({ selectedMaterialcombo });\r\n\r\n            }\r\n            else if (fieldName === \"nmaterialcatcode\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                // this.setState({ selectedMaterialCat });\r\n                this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n\r\n            else if (fieldName === \"nmaterialsectioncode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nmaterialsectioncode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName === \"nlinkcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nlinkcode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                this.setState({ selectedMaterialCat });\r\n\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n            else if (fieldName.label === \"IDS_STORAGECONDITION\") {\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldName === \"value\") {\r\n                const comboitem = this.state.comboitem || {};\r\n                comboitem[fieldName] = comboData;\r\n                this.setState({ comboitem });\r\n            }\r\n        }\r\n    }\r\n    onInputOnChange = (event, optional1, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\r\n            if (event.target.type === 'checkbox') {\r\n                if (event.target.name === \"ntransactionstatus\")\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n                else\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\r\n            } else if (event.target.type === 'radio') {\r\n                selectedRecord[event.target.name] = optional2;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    saveClick = () => {\r\n        let operation = \"update\";\r\n        let operations = 'IDS_OPENDATE';\r\n        let inputData = [];\r\n        inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE &&\r\n            convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\r\n        inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\r\n        inputData[\"nflag\"] = 3;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode\r\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n        inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: operation\r\n        }\r\n\r\n        let masterData = this.props.Login.masterData\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operations, showModalPopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        let varmain = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\r\n            inputData[\"MaterialInventory\"] = {}\r\n            inputData[\"DateList\"] = []\r\n            const Layout = this.props.Login.masterData.selectedTemplate[0].sjsonobjstr\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            inputData[\"MaterialInventory\"][component.label] = {\r\n                                label: this.state.selectedRecord[component.label][\"label\"],\r\n                                value: this.state.selectedRecord[component.label][\"value\"]\r\n                            }\r\n                        }\r\n                        else if (component.inputtype === 'date') {\r\n                            if (this.state.selectedRecord[component.label]) {\r\n                                inputData[\"MaterialInventory\"][`tz${component.label}`] = {\r\n                                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                }\r\n                                inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                inputData[\"DateList\"].push(component.label)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label]\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] =\r\n                                    {\r\n                                        label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                        value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                    }\r\n                                }\r\n                                else if (componentrow.inputtype === 'date') {\r\n                                    if (this.state.selectedRecord[componentrow.label]) {\r\n                                        inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = {\r\n                                            label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                            value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                        }\r\n                                        inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label],\r\n                                            this.props.Login.userInfo)\r\n                                        inputData[\"DateList\"].push(componentrow.label)\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            inputData[\"MaterialInventory\"] = {\r\n                ...inputData[\"MaterialInventory\"],\r\n                \"IDS_INVENTORYTRANSACTIONTYPE\": {\r\n                    label: \"Outside\",\r\n                    value: 2\r\n                },\r\n                \"IDS_TRANSACTIONTYPE\": {\r\n                    label: \"Received\",\r\n                    value: 47\r\n                },\r\n                [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\r\n                    label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\r\n                    value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\r\n                },\r\n                \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RETURNEDQUANTITY'],\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                    transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n                \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\r\n            }\r\n\r\n            inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"])\r\n            inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n            inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n            if (this.props.Login.operation === 'create') {\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            else {\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                    this.ConfirmComponent()\r\n                }\r\n                else {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\r\n            let nflag = true;\r\n            if (this.state.selectedRecord['IDS_TRANSACTIONTYPE'].value === 47) {\r\n                nflag = false\r\n            }\r\n            if (nflag ? (this.state.selectedRecord['IDS_RETURNEDQUANTITY'] <= parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY'])) : true) {\r\n                const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr\r\n                let dynamicobj = {};\r\n                inputData[\"DateList\"] = [];\r\n                Layout.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.inputtype === 'combo') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = {\r\n                                        label: this.state.selectedRecord[component.label][\"label\"],\r\n                                        value: this.state.selectedRecord[component.label][\"value\"]\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'Numeric') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString()\r\n\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'date') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[`tz${component.label}`] = {\r\n                                        label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                        value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                    }\r\n                                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                    inputData[\"DateList\"].push(component.label)\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label]\r\n                                }\r\n                            }\r\n                            component.hasOwnProperty(\"children\") && component.children.map(\r\n                                (componentrow) => {\r\n                                    if (componentrow.inputtype === 'combo') {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] =\r\n                                            {\r\n                                                label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                                value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n                dynamicobj = {\r\n                    ...dynamicobj, \"ntransactiontype\":\r\n                        this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\r\n                    \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== undefined\r\n                        ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY :\r\n                        this.props.Login.navailableqtyref,\r\n                    \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\r\n\r\n                }\r\n                inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode\r\n                inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj)\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventoryTrans\",\r\n                    inputData: inputData,\r\n                    operation: 'create',\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n                let masterData = this.props.Login.masterData\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETURNEDLESSTHANAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\r\n            inputParam = this.onSaveMaterialFile();\r\n            let masterData = this.props.Login.masterData\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (this.props.Login.operation !== \"update\") {\r\n                let showMaterialSection = this.props.Login.showMaterialSection\r\n                let newarr = []\r\n                let newarrobj = []\r\n                inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                if (this.state.selectedRecord[\"nmaterialsectioncode\"].length > 1) {\r\n                    newarr = this.state.selectedRecord.nmaterialsectioncode.map(temp => {\r\n                        return {\r\n                            \"ssectionname\": temp.label,\r\n                            \"nsectioncode\": temp.value,\r\n                            \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                            \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    newarr.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                inputData[\"materialSectionJson\"] = JSON.stringify(newarr)\r\n                inputParam = {\r\n                    classUrl: \"material\",\r\n                    methodUrl: \"MaterialSection\",\r\n                    inputData: inputData,\r\n                    operation: \"create\",\r\n                    showMaterialSection: showMaterialSection,\r\n                    selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef\r\n                }\r\n            }\r\n            else {\r\n                let newarr = []\r\n                let newarrobj = []\r\n                inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                if (Array.isArray(this.state.selectedRecord[\"nmaterialsectioncode\"])) {\r\n                    newarrobj.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                else {\r\n                    newarrobj.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                inputData[\"materialSectionJson\"] = JSON.stringify(newarrobj)\r\n                inputData[\"MaterialSection\"] = {\r\n                    \"IDS_REORDERLEVEL\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"]\r\n\r\n                }\r\n                inputData[\"nmaterialsectioncode\"] = this.state.selectedRecord.nmaterialsectioncodeprimaryKeyValue\r\n\r\n                inputParam = {\r\n                    classUrl: \"material\",\r\n                    methodUrl: \"MaterialSection\",\r\n                    inputData: inputData,\r\n                    showMaterialSection: false,\r\n                    operation: \"update\",\r\n                    selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\r\n            this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\r\n            const fieldArray = [];\r\n            let postParam = {\r\n                inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\",\r\n                primaryKeyField: \"nmaterialinventorycode\",\r\n                primaryKeyValue: fieldArray,\r\n                fetchUrl: \"materialinventory/getMaterialInventory\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n\r\n\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n            }\r\n            modalName = 'openModal'\r\n\r\n            const inputParam = {\r\n                methodUrl: \"MaterialInventory\",\r\n                classUrl: \"materialinventory\",\r\n                inputData: {\r\n                    \"material\": this.props.Login.masterData.SelectedMaterial,\r\n                    \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                    \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\r\n                    \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    //\"nmaterialcode\": this.props.Login.masterData.SelectedMaterial && this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\r\n                    \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                },\r\n                operation: \"delete\", postParam,\r\n                displayName: \"Material\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                        operation: 'delete', screenName: \"Material\", id: \"material\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, modalName);\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTQUARENTINEINVENTORY\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n        inputData[\"materialCatList\"] = this.state.materialCatList;\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"getMaterialInventoryByID\",\r\n            displayName: \"MaterialInventory\",\r\n            inputData: inputData\r\n        }\r\n        this.setState({ sectionDataState: { skip: 0, take: 10 } })\r\n        if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n            // this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo,\r\n            //     this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n            this.props.getMaterialInventoryByID(inputParam, this.props.Login.masterData.SelectedMaterialType[0],\r\n                this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, getAddMaterialInventoryPopup, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getQuantityTransactionOnchange,\r\n    updateStore, initialcombochangeMaterialInvget, viewAttachment, getMaterialChildValues,\r\n    crudMaster, getMaterialInventoryDetails, getMaterialInventoryByID, addMaterialInventoryFile\r\n    , filterColumnData, validateEsignCredential\r\n})(injectIntl(MaterialInventory));\r\n\r\n"]},"metadata":{},"sourceType":"module"}