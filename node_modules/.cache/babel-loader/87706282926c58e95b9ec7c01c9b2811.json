{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleReceivingStorage.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport AddSampleReceiving from '../storagemanagement//AddSampleReceiving';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getComboSampleReceiving, getBarcodeDataRecord, saveReceiving, getActiveSampleReceivingById, getSampleReceiving, generateControlBasedReport } from '../../actions';\nimport { sortData, getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat, constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleReceivingStorage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'update') {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: \"IDS_STORAGESAMPLERECEIVING\",\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"fromDate\": fromDate,\n          \"toDate\": toDate,\n          \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\n          \"nstoragesamplereceivingcode\": deleteParam.selectedRecord['nstoragesamplereceivingcode'],\n          \"scollectiondate\": deleteParam.selectedRecord['scollectiondate'],\n          \"scomments\": deleteParam.selectedRecord['scomments']\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_STORAGESAMPLERECEIVING\"\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.checkNoRecord = inputData => {\n      var _inputData$SampleRece;\n\n      if (inputData === null || inputData === void 0 ? void 0 : (_inputData$SampleRece = inputData.SampleReceiving) === null || _inputData$SampleRece === void 0 ? void 0 : _inputData$SampleRece.jsondata) {\n        try {\n          const jsonData = JSON.parse(inputData.SampleReceiving.jsondata);\n          return jsonData.hasOwnProperty(\"NoRecord\");\n        } catch (error) {\n          console.error(\"Invalid JSON string:\", error);\n          return false;\n        }\n      } // Return false if jsondata does not exist\n\n\n      return false;\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let inputData = {};\n      const jsonDataCheck = this.state.barcodedata;\n\n      if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)) {\n        if (jsonDataCheck !== undefined && jsonDataCheck !== '' && jsonDataCheck != 0) {\n          inputData[\"SampleReceiving\"] = {};\n\n          if (this.props.Login.operation === \"create\") {\n            inputData[\"SampleReceiving\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.state.barcodedata));\n          }\n\n          inputData[\"SampleReceiving\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n\n          if (this.props.Login.operation === \"update\") {\n            inputData[\"SampleReceiving\"][\"nstoragesamplereceivingcode\"] = this.props.Login.selectedId;\n          }\n\n          inputData[\"SampleReceiving\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\n          inputData[\"SampleReceiving\"][\"dcollectiondate\"] = formatInputDate(selectedRecord[\"dcollectiondate\"], false);\n          inputData[\"SampleReceiving\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\n          inputData[\"SampleReceiving\"][\"ntzcollectiondatetime\"] = selectedRecord[\"ntzcollectiondatetime\"] && selectedRecord[\"ntzcollectiondatetime\"].value || transactionStatus.NA;\n          inputData[\"SampleReceiving\"][\"noffsetdcollectiondatetime\"] = selectedRecord[\"noffsetdcollectiondatetime\"] && selectedRecord[\"noffsetdcollectiondatetime\"].value || transactionStatus.NA;\n          let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          let fromDate = obj.fromDate;\n          let toDate = obj.toDate;\n          inputData[\"fromDate\"] = fromDate;\n          inputData[\"toDate\"] = toDate;\n          inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n          inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          };\n          const inputParam = {\n            nformcode: this.props.Login.userInfo.nformcode,\n            classUrl: \"samplereceiving\",\n            methodUrl: \"SampleReceiving\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            displayName: \"IDS_STORAGESAMPLERECEIVING\",\n            saveType,\n            formRef,\n            selectedRecord: this.state.selectedRecord || {}\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.saveReceiving(inputParam, masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CLICKENTERTOJSONRECORD\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDABARCODE\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nprojecttypecode\") {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: parseInt(comboData.value),\n          selectedProjectType: comboData,\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getSampleReceiving(inputParam);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChangeSlidout = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, fieldname) => {\n      const value = event.target.value; //const { selectedRecord } = this.state;\n\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldname === 'sbarcodeid') {\n        if (!/^\\s*$/.test(value) && value.length >= parseInt(this.props.Login.settings[37])) {\n          if (event.target.name === \"sbarcodeid\") {\n            selectedRecord[event.target.name] = value;\n          } else {\n            selectedRecord[event.target.name] = value;\n          }\n\n          const barcodenorecord = false;\n          this.setState({\n            selectedRecord: selectedRecord,\n            barcodenorecord: barcodenorecord\n          });\n        } else {\n          const str = true;\n          this.setState({\n            barcodenorecord: str\n          });\n        }\n      }\n\n      selectedRecord[event.target.name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.barcodeEnter = (event, fieldName) => {\n      const value = this.state.selectedRecord.sbarcodeid;\n\n      if (!/^\\s*$/.test(value) && value.length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) && event.keyCode === 13) {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          selectedRecord: this.state.selectedRecord,\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getBarcodeDataRecord(inputParam);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      if (dateName === 'todate') {\n        selectedRecord[dateName] = dateValue;\n      } else {\n        selectedRecord[dateName] = dateValue;\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n      let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: fromDate,\n          toDate: toDate,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\n        },\n        classUrl: 'samplereceiving',\n        methodUrl: \"SampleReceiving\",\n        displayName: \"IDS_STORAGESAMPLERECEIVING\",\n        userInfo: this.props.Login.userInfo,\n        selectedRecord\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.reloadData = (selectedRecord, isDateChange) => {\n      //this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          //ALPD-4684-Vignesh R(20-08-2024)\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType.value || -1,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate\n        },\n        classUrl: 'samplereceiving',\n        methodUrl: \"SampleReceiving\",\n        displayName: \"IDS_STORAGESAMPLERECEIVING\",\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {}\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.samplereceivingData = SampleReceivingReportId => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const filterTestParam = {\n        todate: toDate,\n        fromdate: fromDate,\n        nprojecttypecode: this.props.Login.masterData.selectedProjectType.value || -1,\n        nsitecode: this.props.Login.userInfo.nsitecode\n      };\n      this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\", this.state.selectedRecord.nsamplereceivingcode);\n    };\n\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showSaveContinue: true\n    };\n    let extractedColumnList1 = [];\n    extractedColumnList1 = [{\n      idsName: 'IDS_BARCODEID',\n      dataField: 'sbarcodeid',\n      width: '250px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: \"IDS_SAMPLETYPE\",\n      \"dataField\": \"sproductname\",\n      mandatoryLabel: \"IDS_ENTER\",\n      controlType: \"selectbox\"\n    }, {\n      idsName: \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\",\n      \"dataField\": \"stubename\",\n      mandatoryLabel: \"IDS_ENTER\",\n      controlType: \"selectbox\"\n    }, {\n      idsName: \"IDS_VISITNUMBER\",\n      \"dataField\": \"svisitnumber\",\n      mandatoryLabel: \"IDS_ENTER\",\n      controlType: \"selectbox\"\n    }, {\n      idsName: 'IDS_SAMPLEQTY',\n      dataField: 'nsampleqty',\n      width: '250px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_UNIT',\n      dataField: 'sunitname',\n      width: '250px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_SAMPLERECEIVINGDATE',\n      dataField: 'scollectiondate',\n      width: '250px'\n    }, {\n      idsName: 'IDS_COMMENTS',\n      dataField: 'scomments',\n      width: '250px'\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  gridfillingColumn(data, barcodeFields) {\n    const temparray1 = [{\n      idsName: 'IDS_BARCODEID',\n      dataField: 'sbarcodeid',\n      width: '250px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_SAMPLEQTY',\n      dataField: 'nsampleqty',\n      width: '250px',\n      mandatoryLabel: 'IDS_ENTER',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_UNIT',\n      dataField: 'sunitname',\n      width: '250px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_SAMPLERECEIVINGDATE',\n      dataField: 'scollectiondate',\n      width: '250px'\n    }, {\n      idsName: 'IDS_COMMENTS',\n      dataField: 'scomments',\n      width: '250px'\n    }];\n    /*let temparray2 = []\r\n    barcodeFields&&barcodeFields.forEach(item=>{\r\n        data && data.forEach((item) => {\r\n            const entries = Object.entries(item.jsondata);\r\n            if (entries.length > 0) {\r\n                entries.forEach(([key]) => {\r\n                    const keyExists = temparray2.some(column => column.idsName === key);\r\n                    if (!keyExists) {\r\n                        if(item.sfieldname===key){\r\n                            temparray2.push({\r\n                                idsName: key,\r\n                                dataField: key,\r\n                                width: '250px'\r\n                            });\r\n                        }\r\n                       \r\n                    }\r\n      \r\n                });\r\n            }\r\n        });\r\n    });*/\n\n    let temparray2 = [];\n    barcodeFields && barcodeFields.forEach(barcodeItem => {\n      data && data.forEach(dataItem => {\n        const entries = Object.entries(dataItem.jsondata);\n\n        if (entries.length > 0) {\n          entries.forEach(([key]) => {\n            const keyExists = temparray2.some(column => column.idsName === key);\n\n            if (!keyExists) {\n              if (barcodeItem.sfieldname === key) {\n                temparray2.push({\n                  idsName: key,\n                  dataField: key,\n                  width: '250px'\n                });\n              }\n            }\n          });\n        }\n      });\n    });\n    const newArray = [...temparray1, ...temparray2];\n    return newArray;\n  }\n\n  render() {\n    let fromDate = \"\";\n    let toDate = \"\";\n    const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving || [], this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\n    this.extractedColumnList = extractedColumnList;\n    const addId = this.state.controlMap.has(\"AddSampleReceiving\") && this.state.controlMap.get(\"AddSampleReceiving\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSampleReceiving\") && this.state.controlMap.get(\"EditSampleReceiving\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteSampleReceiving\") && this.state.controlMap.get(\"DeleteSampleReceiving\").ncontrolcode;\n    const SampleReceivingReportId = this.state.controlMap.has(\"SampleReceivingReport\") && this.state.controlMap.get(\"SampleReceivingReport\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.displayName,\n      operation: \"update\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      primaryKeyField: \"nstoragesamplereceivingcode\",\n      selectedRecord: this.state.selectedRecord || {},\n      dataState: this.state.dataState\n    };\n    const addParam = {\n      screenName: this.props.Login.displayName,\n      primaryKeyField: \"nstoragesamplereceivingcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId,\n      selectedRecord: this.state.selectedRecord,\n      masterData: this.props.Login.masterData\n    };\n    const deleteParam = {\n      deleteId: deleteId,\n      operation: \"delete\",\n      selectedRecord: this.state.selectedRecord\n    };\n    const samplereceivingreportParam = {\n      SampleReceivingReportId: SampleReceivingReportId,\n      masterData: this.props.Login.masterData,\n      selectedRecord: this.state.selectedRecord\n    };\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isSearchable: true,\n      name: \"nprojecttypecode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      isClearable: false,\n      options: this.state.projectType,\n      value: this.props.Login.masterData.selectedProjectType,\n      defaultValue: this.state.selectedRecord[\"nprojecttypecode\"],\n      onChange: event => this.onComboChange(event, \"nprojecttypecode\"),\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 37\n      }\n    }))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nstoragesamplereceivingcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      scrollable: \"scrollable\",\n      pageable: true,\n      isComponent: true,\n      gridHeight: '530px',\n      isToolBarRequired: true,\n      isActionRequired: true,\n      expandField: \"expanded\",\n      selectedId: 0,\n      addRecord: () => this.props.getComboSampleReceiving(addParam, this.props.Login.masterData),\n      isDownloadButtonOn: true //report \n      ,\n      samplereceivingData: this.samplereceivingData //report\n      ,\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      fetchRecord: this.props.getActiveSampleReceivingById,\n      editParam: editParam,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      size: 'lg',\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: true,\n      mandatoryFields: [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_BARCODEID\",\n        \"dataField\": \"sbarcodeid\",\n        \"width\": \"250px\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textinput\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_SAMPLERECEIVINGDATE\",\n        \"dataField\": \"dcollectiondate\",\n        \"width\": \"250px\",\n        \"fieldType\": 'dateOnlyFormat',\n        \"controlType\": \"textinput\"\n      }],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleReceiving, {\n        barcodedata: this.state.barcodedata,\n        barcodeFields: this.state.barcodeFields //barcodenorecord={this.state.barcodenorecord}\n        ,\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        barcodeEnter: this.barcodeEnter,\n        formatMessage: this.props.intl.formatMessage,\n        operation: this.props.Login.operation,\n        unit: this.props.Login.unit,\n        userInfo: this.props.Login.userInfo,\n        handleDateChangeSlidout: this.handleDateChangeSlidout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      projectType\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    } // if (this.props.Login.masterData.SampleReceiving !== previousProps.Login.masterData.SampleReceiving) {\n    //     let samplecollect = [];\n    //     samplecollect =\n    //         this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\n    //             const entries = Object.entries(sampleItem.jsondata);\n    //             if (entries.length > 0) {\n    //                 const newItem = { ...sampleItem };\n    //                 entries.forEach(([key, value]) => {\n    //                     newItem[key] = value;\n    //                 });\n    //                 return newItem;\n    //             }\n    //             return sampleItem;\n    //         });\n    //         let { dataState } = this.state;\n    //         if (dataState === undefined) {\n    //             dataState = { skip: 0, take: this.state.dataState.take }\n    //         }\n    //         if (this.state.dataResult.data) {\n    //             if (this.state.dataResult.data.length === 1) {\n    //                 let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\n    //                     this.state.dataState.skip\n    //                 dataState = { skip: skipcount, take: this.state.dataState.take }\n    //             }\n    //         }\n    //         this.setState({\n    //             data: samplecollect,\n    //             dataState,\n    //             dataResult: process(samplecollect || [], dataState),\n    //         });\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        let samplecollect = [];\n        samplecollect = this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        }); //     let { dataState } = this.state;\n        // if (dataState === undefined) {\n        //     dataState = { skip: 0, take: this.state.dataState.take }\n        // }\n        // if (this.state.dataResult.data) {\n        //     if (this.state.dataResult.data.length === 1) {\n        //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\n        //             this.state.dataState.skip\n        //         dataState = { skip: skipcount, take: this.state.dataState.take }\n        //     }\n        // }\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: samplecollect,\n          dataResult: process(samplecollect || [], this.state.dataState)\n        });\n      } else {\n        //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\n        let samplereceiving = [];\n        samplereceiving = this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        });\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: samplereceiving,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(samplereceiving || [], dataState),\n          dataState\n        });\n      } // else {\n      //     if (this.props.Login.masterData.SampleReceiving) {\n      //         let samplecollect = [];\n      //         samplecollect =\n      //             this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\n      //                 const entries = Object.entries(sampleItem.jsondata);\n      //                 if (entries.length > 0) {\n      //                     const newItem = { ...sampleItem };\n      //                     entries.forEach(([key, value]) => {\n      //                         newItem[key] = value;\n      //                     });\n      //                     return newItem;\n      //                 }\n      //                 return sampleItem;\n      //             });\n      //         this.setState({\n      //             data: samplecollect,\n      //             dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\n      //             dataResult: process(samplecollect || [], { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }),\n      //         });\n      //     }\n      // }\n\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } // if (this.props.Login.masterData.barcodenorecord !== previousProps.Login.masterData.barcodenorecord) {\n    //     this.setState({ barcodenorecord: this.props.Login.masterData.barcodenorecord });\n    // }\n\n\n    if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\n      const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields, \"ascending\", \"nsorter\");\n      this.setState({\n        jsondataBarcodeFields: retrievedData\n      });\n    }\n\n    if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\n      this.setState({\n        jsondataBarcodeFields: this.props.Login.masterData.jsondataBarcodeFields\n      });\n    }\n\n    if (this.props.Login.masterData.barcodeFields !== previousProps.Login.masterData.barcodeFields) {\n      this.setState({\n        barcodeFields: this.props.Login.masterData.barcodeFields\n      });\n    }\n\n    if (this.props.Login.masterData.barcodedata !== previousProps.Login.masterData.barcodedata) {\n      this.setState({\n        barcodedata: this.props.Login.masterData.barcodedata\n      });\n    } // if (this.props.Login.barcodenorecord !== previousProps.Login.barcodenorecord) {\n    //     this.setState({ barcodenorecord: false });\n    // }\n\n\n    if (bool) {\n      this.setState({\n        projectType\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getActiveSampleReceivingById,\n  getSampleReceiving,\n  generateControlBasedReport,\n  updateStore,\n  validateEsignCredential,\n  getComboSampleReceiving,\n  getBarcodeDataRecord,\n  saveReceiving\n})(injectIntl(SampleReceivingStorage));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/SampleReceivingStorage.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","DateTimePicker","ListWrapper","AddSampleReceiving","SlideOutModal","Esign","transactionStatus","DEFAULT_RETURN","FormSelectSearch","callService","crudMaster","updateStore","validateEsignCredential","getComboSampleReceiving","getBarcodeDataRecord","saveReceiving","getActiveSampleReceivingById","getSampleReceiving","generateControlBasedReport","sortData","getControlMap","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","constructOptionList","Lims_JSON_stringify","formatInputDate","showEsign","mapStateToProps","state","Login","SampleReceivingStorage","Component","constructor","props","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","dataState","validateEsign","inputParam","inputData","userInfo","sreason","nreasoncode","value","spredefinedreason","label","password","screenData","deleteRecord","deleteParam","obj","masterData","FromDate","ToDate","fromDate","toDate","classUrl","methodUrl","displayName","toLowerCase","selectedProjectType","userRoleControlRights","nformcode","ncontrolCode","screenName","intl","formatMessage","id","checkNoRecord","SampleReceiving","jsondata","jsonData","JSON","parse","hasOwnProperty","error","console","onSaveClick","saveType","formRef","jsonDataCheck","barcodedata","length","parseInt","nbarcodelength","undefined","stringify","NA","selectedId","sformname","smodulename","ncontrolcode","warn","onComboChange","comboData","fieldName","userinfo","nprojecttypecode","handleDateChangeSlidout","dateName","dateValue","onInputOnChange","fieldname","target","test","settings","name","barcodenorecord","str","barcodeEnter","sbarcodeid","keyCode","handleDateChange","Date","dateObj","reloadData","isDateChange","samplereceivingData","SampleReceivingReportId","filterTestParam","todate","fromdate","nsitecode","nsamplereceivingcode","searchRef","createRef","skip","take","masterStatus","controlMap","Map","showSaveContinue","extractedColumnList1","idsName","dataField","width","mandatoryLabel","controlType","getDerivedStateFromProps","gridfillingColumn","barcodeFields","temparray1","temparray2","forEach","barcodeItem","dataItem","entries","Object","key","keyExists","some","column","sfieldname","push","newArray","render","extractedColumnList","jsondataBarcodeFields","addId","has","get","editId","deleteId","editParam","primaryKeyField","addParam","primaryKeyValue","samplereceivingreportParam","ssitedate","date","projectType","unit","componentDidUpdate","previousProps","bool","projectTypeMap","values","map","item","samplecollect","sampleItem","newItem","samplereceiving","skipcount","retrievedData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AAIA,SACIC,WADJ,EACiBC,UADjB,EAEIC,WAFJ,EAEiBC,uBAFjB,EAE0CC,uBAF1C,EAEmEC,oBAFnE,EAGIC,aAHJ,EAGmBC,4BAHnB,EAGiDC,kBAHjD,EAGoEC,0BAHpE,QAIO,eAJP;AAKA,SAAQC,QAAR,EACIC,aADJ,EACmBC,aADnB,EACkCC,WADlC,EAC+CC,wBAD/C,EACyEC,mBADzE,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE8CC,eAF9C,EAE+DC,SAF/D,QAGO,+BAHP;;AAMA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,sBAAN,SAAqCvC,KAAK,CAACwC,SAA3C,CAAqD;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA+BnBC,UA/BmB,GA+BN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKF,KAAL,CAAWJ,KAAX,CAAiBM,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKH,KAAL,CAAWJ,KAAX,CAAiBO,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ,cAAtC;;AACA,UAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBM,SAArB,EAAgC;AAC5B,YAAI,KAAKF,KAAL,CAAWJ,KAAX,CAAiBS,SAAjB,KAA+B,QAAnC,EAA6C;AACzCH,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAG,EAAjB;AACH,SAJD,MAKK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACH;AACJ,OAXD,MAYK;AACDD,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAEL,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBE,UAAAA;AAAxB;AAFS,OAAnB;AAKA,WAAKJ,KAAL,CAAWxB,WAAX,CAAuB8B,UAAvB;AACH,KA1DkB;;AAAA,SAuGnBG,eAvGmB,GAuGAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEhD,OAAO,CAAC,KAAK+B,KAAL,CAAWa,IAAZ,EAAkBE,KAAK,CAACG,SAAxB,CADT;AAEVA,QAAAA,SAAS,EAAEH,KAAK,CAACG;AAFP,OAAd;AAIH,KA5GkB;;AAAA,SAuLnBC,aAvLmB,GAuLH,MAAM;AAClB,YAAMC,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QADZ;AAERC,YAAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWS,cAAX,CAA0B,eAA1B,CAFD;AAGRe,YAAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWS,cAAX,CAA0B,aAA1B,KAA4C,KAAKT,KAAL,CAAWS,cAAX,CAA0B,aAA1B,EAAyCgB,KAH1F;AAIRC,YAAAA,iBAAiB,EAAE,KAAK1B,KAAL,CAAWS,cAAX,CAA0B,aAA1B,KAA4C,KAAKT,KAAL,CAAWS,cAAX,CAA0B,aAA1B,EAAyCkB;AAJhG,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAK5B,KAAL,CAAWS,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfoB,QAAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiB4B;AAXd,OAAnB;;AAaA,UAAI,KAAKxB,KAAL,CAAWJ,KAAX,CAAiBS,SAAjB,KAA+B,QAAnC,EAA6C;AACzC,aAAKL,KAAL,CAAWvB,uBAAX,CAAmCsC,UAAnC,EAA+C,WAA/C;AACH,OAFD,MAIK;AACD,aAAKf,KAAL,CAAWvB,uBAAX,CAAmCsC,UAAnC,EAA+C,WAA/C;AACH;AACJ,KA5MkB;;AAAA,SA+XnBU,YA/XmB,GA+XHC,WAAD,IAAiB;AAC5B,UAAIC,GAAG,GAAGvC,wBAAwB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA7B,EAAuC,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAnE,EAA2E,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAA5F,CAAlC;AACA,UAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AACA,YAAMjB,UAAU,GAAG;AACfkB,QAAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBmB,UAAjB,CAA4BkB,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBmB,UAAjB,CAA4BmB,SAFxB;AAGfC,QAAAA,WAAW,EAAE,4BAHE;AAIfnB,QAAAA,SAAS,EAAE;AACP,WAAC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBmB,UAAjB,CAA4BmB,SAA5B,CAAsCE,WAAtC,EAAD,GAAuDV,WAAW,CAACtB,cAD5D;AAEP,sBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBqB,QAFtB;AAKP,sBAAYc,QALL;AAMP,oBAAUC,MANH;AAOP,8BAAoB,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAhD,IAAyD,CAAC,CAPvE;AAQP,yCAA+BM,WAAW,CAACtB,cAAZ,CAA2B,6BAA3B,CARxB;AASP,6BAAmBsB,WAAW,CAACtB,cAAZ,CAA2B,iBAA3B,CATZ;AAUP,uBAAasB,WAAW,CAACtB,cAAZ,CAA2B,WAA3B;AAVN,SAJI;AAiBfC,QAAAA,SAAS,EAAEqB,WAAW,CAACrB,SAjBR;AAkBfQ,QAAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWkB;AAlBP,OAAnB;;AAqBA,UAAIpB,SAAS,CAAC,KAAKO,KAAL,CAAWJ,KAAX,CAAiB0C,qBAAlB,EAAyC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAAnE,EAA8Eb,WAAW,CAACc,YAA1F,CAAb,EAAsH;AAClH,cAAMlC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEnC,cADK;AAEfoC,UAAAA,IAAI,EAAE;AACFN,YAAAA,SAAS,EAAE,IADT;AACesB,YAAAA,UAAU,EAAE;AAAET,cAAAA,UAAF;AAAca,cAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC;AAA3C,aAD3B;AAEFzB,YAAAA,SAAS,EAAE,IAFT;AAEesC,YAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAF3B;AAGFvC,YAAAA,SAAS,EAAEqB,WAAW,CAACrB;AAHrB;AAFS,SAAnB;AAQA,aAAKL,KAAL,CAAWxB,WAAX,CAAuB8B,UAAvB;AACH,OAVD,MAWK;AACD,aAAKN,KAAL,CAAWzB,UAAX,CAAsBwC,UAAtB,EAAkC,KAAKf,KAAL,CAAWJ,KAAX,CAAiBgC,UAAnD,EAA+D,WAA/D;AACH;AACJ,KAtakB;;AAAA,SAwanBiB,aAxamB,GAwaF7B,SAAD,IAAe;AAAA;;AAE3B,UAAIA,SAAJ,aAAIA,SAAJ,gDAAIA,SAAS,CAAE8B,eAAf,0DAAI,sBAA4BC,QAAhC,EAA0C;AACtC,YAAI;AAEA,gBAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWlC,SAAS,CAAC8B,eAAV,CAA0BC,QAArC,CAAjB;AAEA,iBAAOC,QAAQ,CAACG,cAAT,CAAwB,UAAxB,CAAP;AACH,SALD,CAKE,OAAOC,KAAP,EAAc;AAEZC,UAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACA,iBAAO,KAAP;AACH;AACJ,OAb0B,CAc3B;;;AACA,aAAO,KAAP;AACH,KAxbkB;;AAAA,SA4bnBE,WA5bmB,GA4bL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAIpD,cAAc,GAAG,KAAKT,KAAL,CAAWS,cAAX,IAA6B,EAAlD;AACA,UAAIY,SAAS,GAAG,EAAhB;AAEA,YAAMyC,aAAa,GAAG,KAAK9D,KAAL,CAAW+D,WAAjC;;AAEA,UAAItD,cAAc,CAAC,YAAD,CAAd,IAAgCA,cAAc,CAAC,YAAD,CAAd,CAA6BuD,MAA7B,KAAwCC,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BiC,cAA5B,IAA8C,KAAK7D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BiC,cAA3E,CAApF,EAAiL;AAC7K,YAAGJ,aAAa,KAAKK,SAAlB,IAA+BL,aAAa,KAAK,EAAjD,IAAuDA,aAAa,IAAG,CAA1E,EAA4E;AAE5EzC,UAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,EAA/B;;AACA,cAAI,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBS,SAAjB,KAA+B,QAAnC,EAA6C;AAEzCW,YAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,UAA7B,IAA2CzB,mBAAmB,CAAC0D,IAAI,CAACc,SAAL,CAAe,KAAKpE,KAAL,CAAW+D,WAA1B,CAAD,CAA9D;AACH;;AACD1C,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,kBAA7B,IAAmD,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAhD,IAAyDjD,iBAAiB,CAAC6F,EAA9H;;AACA,cAAI,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBS,SAAjB,KAA+B,QAAnC,EAA6C;AACzCW,YAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,6BAA7B,IAA8D,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqE,UAA/E;AACH;;AACDjD,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,YAA7B,IAA6CZ,cAAc,CAAC,YAAD,CAAd,GAA+BA,cAAc,CAAC,YAAD,CAA7C,GAA8D,CAAC,CAA5G;AAEAY,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,iBAA7B,IAAkDxB,eAAe,CAACY,cAAc,CAAC,iBAAD,CAAf,EAAoC,KAApC,CAAjE;AACAY,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,WAA7B,IAA4CZ,cAAc,CAAC,WAAD,CAAd,IAA+BA,cAAc,CAAC,WAAD,CAA7C,IAA8D,EAA1G;AACAY,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,uBAA7B,IAAwDZ,cAAc,CAAC,uBAAD,CAAd,IAA2CA,cAAc,CAAC,uBAAD,CAAd,CAAwCgB,KAAnF,IAA4FjD,iBAAiB,CAAC6F,EAAtK;AACAhD,UAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,4BAA7B,IAA6DZ,cAAc,CAAC,4BAAD,CAAd,IAAgDA,cAAc,CAAC,4BAAD,CAAd,CAA6CgB,KAA7F,IAAsGjD,iBAAiB,CAAC6F,EAArL;AACA,cAAIrC,GAAG,GAAGvC,wBAAwB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA7B,EAAuC,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAnE,EAA2E,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAA5F,CAAlC;AACA,cAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,cAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AACAhB,UAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBe,QAAxB;AACAf,UAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBgB,MAAtB;AACAhB,UAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAhD,IAAyDjD,iBAAiB,CAAC6F,EAA3G;AACAhD,UAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,EACpB,GAAG,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QADA;AAEpBiD,YAAAA,SAAS,EAAE3E,mBAAmB,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BiD,SAA3B,CAFV;AAGpBC,YAAAA,WAAW,EAAE5E,mBAAmB,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BkD,WAA3B;AAHZ,WAAxB;AAQA,gBAAMpD,UAAU,GAAG;AACfwB,YAAAA,SAAS,EAAE,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SADtB;AAEfN,YAAAA,QAAQ,EAAE,iBAFK;AAGfC,YAAAA,SAAS,EAAE,iBAHI;AAIflB,YAAAA,SAAS,EAAEA,SAJI;AAKfX,YAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS,SALb;AAMf8B,YAAAA,WAAW,EAAC,4BANG;AAOfoB,YAAAA,QAPe;AAOLC,YAAAA,OAPK;AAQfpD,YAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS,cAAX,IAA6B;AAR9B,WAAnB;AAWA,gBAAMwB,UAAU,GAAG,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC,UAApC;;AAEA,cAAInC,SAAS,CAAC,KAAKO,KAAL,CAAWJ,KAAX,CAAiB0C,qBAAlB,EAAyC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAAnE,EAA8E,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBwE,YAA/F,CAAb,EAA2H;AACvH,kBAAM9D,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAEnC,cADK;AAEfoC,cAAAA,IAAI,EAAE;AACFN,gBAAAA,SAAS,EAAE,IADT;AACesB,gBAAAA,UAAU,EAAE;AAAET,kBAAAA,UAAF;AAAca,kBAAAA;AAAd,iBAD3B;AACuD2B,gBAAAA;AADvD;AAFS,aAAnB;AAMA,iBAAKvD,KAAL,CAAWxB,WAAX,CAAuB8B,UAAvB;AACH,WARD,MASK;AACD,iBAAKN,KAAL,CAAWpB,aAAX,CAAyBmC,UAAzB,EAAqCa,UAArC;AACH;AACJ,SAxDG,MAyDK;AACDjE,UAAAA,KAAK,CAAC0G,IAAN,CACI,KAAKrE,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAC1BC,YAAAA,EAAE,EAAE;AADsB,WAA9B,CADJ;AAKH;AAEJ,OAlED,MAkEO;AAGCjF,QAAAA,KAAK,CAAC0G,IAAN,CACI,KAAKrE,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAC1BC,UAAAA,EAAE,EAAE;AADsB,SAA9B,CADJ;AAMH;AAIR,KAjhBkB;;AAAA,SAmhBnB0B,aAnhBmB,GAmhBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMpE,cAAc,GAAG,KAAKT,KAAL,CAAWS,cAAX,IAA6B,EAApD;;AAEA,UAAIoE,SAAS,KAAK,kBAAlB,EAAsC;AAClC,YAAIxD,SAAS,GAAG,EAAhB;AACA,YAAIW,GAAG,GAAGvC,wBAAwB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA7B,EAAuC,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAnE,EAA2E,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAA5F,CAAlC;AACA,YAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,YAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AACAhB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBe,QAAxB;AACAf,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBgB,MAAtB;AACAhB,QAAAA,SAAS,GAAG;AACRyD,UAAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBqB,QADnB;AAERyD,UAAAA,gBAAgB,EAAEd,QAAQ,CAACW,SAAS,CAACnD,KAAX,CAFlB;AAGRiB,UAAAA,mBAAmB,EAAEkC,SAHb;AAIRvC,UAAAA,MAAM,EAAEA,MAJA;AAKRD,UAAAA,QAAQ,EAAEA;AALF,SAAZ;AAOA,cAAMH,UAAU,GAAG,EAAE,GAAG,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC;AAAtB,SAAnB;AACA,cAAMb,UAAU,GAAG;AAAEa,UAAAA,UAAF;AAAcZ,UAAAA;AAAd,SAAnB;AACA,aAAKhB,KAAL,CAAWlB,kBAAX,CAA8BiC,UAA9B;AACH,OAjBD,MAiBO;AACHX,QAAAA,cAAc,CAACoE,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAK5D,QAAL,CAAc;AAAEP,UAAAA;AAAF,SAAd;AACH;AAEJ,KA5iBkB;;AAAA,SA8iBnBuE,uBA9iBmB,GA8iBO,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC/C,YAAMzE,cAAc,GAAG,KAAKT,KAAL,CAAWS,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACwE,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKlE,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KAljBkB;;AAAA,SAojBnB0E,eApjBmB,GAojBD,CAACpE,KAAD,EAAQqE,SAAR,KAAsB;AAEpC,YAAM3D,KAAK,GAAGV,KAAK,CAACsE,MAAN,CAAa5D,KAA3B,CAFoC,CAGpC;;AACA,YAAMhB,cAAc,GAAG,KAAKT,KAAL,CAAWS,cAAX,IAA6B,EAApD;;AAEA,UAAI2E,SAAS,KAAK,YAAlB,EAAgC;AAE5B,YAAI,CAAC,QAAQE,IAAR,CAAa7D,KAAb,CAAD,IAAwBA,KAAK,CAACuC,MAAN,IAAgBC,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBsF,QAAjB,CAA0B,EAA1B,CAAD,CAApD,EAAqF;AAEjF,cAAIxE,KAAK,CAACsE,MAAN,CAAaG,IAAb,KAAsB,YAA1B,EAAwC;AACpC/E,YAAAA,cAAc,CAACM,KAAK,CAACsE,MAAN,CAAaG,IAAd,CAAd,GAAoC/D,KAApC;AACH,WAFD,MAEO;AACHhB,YAAAA,cAAc,CAACM,KAAK,CAACsE,MAAN,CAAaG,IAAd,CAAd,GAAoC/D,KAApC;AACH;;AACD,gBAAMgE,eAAe,GAAG,KAAxB;AACA,eAAKzE,QAAL,CAAc;AAAEP,YAAAA,cAAc,EAAEA,cAAlB;AAAkCgF,YAAAA,eAAe,EAAEA;AAAnD,WAAd;AACH,SATD,MASO;AAEH,gBAAMC,GAAG,GAAG,IAAZ;AACA,eAAK1E,QAAL,CAAc;AAAEyE,YAAAA,eAAe,EAAEC;AAAnB,WAAd;AACH;AAEJ;;AAEDjF,MAAAA,cAAc,CAACM,KAAK,CAACsE,MAAN,CAAaG,IAAd,CAAd,GAAoC/D,KAApC;AACA,WAAKT,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KA/kBkB;;AAAA,SAilBnBkF,YAjlBmB,GAilBJ,CAAC5E,KAAD,EAAQ8D,SAAR,KAAsB;AACjC,YAAMpD,KAAK,GAAG,KAAKzB,KAAL,CAAWS,cAAX,CAA0BmF,UAAxC;;AAEA,UAAI,CAAC,QAAQN,IAAR,CAAa7D,KAAb,CAAD,IAAwBA,KAAK,CAACuC,MAAN,KAAiBC,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BiC,cAA5B,IAA8C,KAAK7D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BiC,cAA3E,CAAjD,IAA+InD,KAAK,CAAC8E,OAAN,KAAkB,EAArK,EAAyK;AAErK,YAAIxE,SAAS,GAAG,EAAhB;AACA,YAAIW,GAAG,GAAGvC,wBAAwB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA7B,EAC9B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MADE,EAE9B,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAFa,CAAlC;AAGA,YAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,YAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AACAhB,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBe,QAAxB;AACAf,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBgB,MAAtB;AACAhB,QAAAA,SAAS,GAAG;AACRyD,UAAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBqB,QADnB;AAERb,UAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS,cAFnB;AAGR4B,UAAAA,MAAM,EAAEA,MAHA;AAIRD,UAAAA,QAAQ,EAAEA;AAJF,SAAZ;AAMA,cAAMH,UAAU,GAAG,EAAE,GAAG,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC;AAAtB,SAAnB;AACA,cAAMb,UAAU,GAAG;AAAEa,UAAAA,UAAF;AAAcZ,UAAAA;AAAd,SAAnB;AACA,aAAKhB,KAAL,CAAWrB,oBAAX,CAAgCoC,UAAhC;AAEH;AAEJ,KA1mBkB;;AAAA,SAyyBnB0E,gBAzyBmB,GAyyBA,CAACb,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAEzE,QAAAA;AAAF,UAAqB,KAAKT,KAAhC;;AACA,UAAIkF,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIa,IAAJ,EAAZ;AACH;;AACD,UAAId,QAAQ,KAAK,QAAjB,EAA2B;AACvBxE,QAAAA,cAAc,CAACwE,QAAD,CAAd,GAA2BC,SAA3B;AAEH,OAHD,MAIK;AACDzE,QAAAA,cAAc,CAACwE,QAAD,CAAd,GAA2BC,SAA3B;AAEH;;AACDzE,MAAAA,cAAc,CAACwE,QAAD,CAAd,GAA2BC,SAA3B,CAbwC,CAcxC;AACA;;AAEA,UAAIc,OAAO,GAAG,EAAd;AACA,UAAIhE,GAAG,GAAGvC,wBAAwB,CAACgB,cAAc,CAAC,UAAD,CAAd,IAA8BA,cAAc,CAAC,UAAD,CAA5C,IAA4D,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAAzF,EAAmGzB,cAAc,CAAC,QAAD,CAAd,IAA4BA,cAAc,CAAC,QAAD,CAA1C,IAAwD,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAvL,EAA+L,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAAhN,CAAlC;AACA,UAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AAEA,YAAMjB,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QADtB;AAEPc,UAAAA,QAAQ,EAAEA,QAFH;AAGPC,UAAAA,MAAM,EAAEA,MAHD;AAIP0C,UAAAA,gBAAgB,EAAE,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,IAAmD,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAnG,IAA4G,CAAC;AAJxH,SADI;AAOfa,QAAAA,QAAQ,EAAE,iBAPK;AAQfC,QAAAA,SAAS,EAAE,iBARI;AASfC,QAAAA,WAAW,EAAE,4BATE;AAUflB,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,QAVZ;AAUsBb,QAAAA;AAVtB,OAAnB;AAYA,WAAKJ,KAAL,CAAW1B,WAAX,CAAuByC,UAAvB;AACH,KA50BkB;;AAAA,SA80BnB6E,UA90BmB,GA80BN,CAACxF,cAAD,EAAiByF,YAAjB,KAAkC;AAC3C;AACA,UAAI9D,QAAQ,GAAG,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA3C;AACA,UAAIG,MAAM,GAAG,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAzC;AAEA,UAAIH,GAAG,GAAGvC,wBAAwB,CAAC2C,QAAD,EAAWC,MAAX,EAAmB,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBqB,QAApC,EAA8C,IAA9C,CAAlC;AACA,YAAMF,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QADtB;AAEP;AACAyD,UAAAA,gBAAgB,EAAE,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAhD,IAAyD,CAAC,CAHrE;AAIPW,UAAAA,QAAQ,EAAEJ,GAAG,CAACI,QAJP;AAKPC,UAAAA,MAAM,EAAEL,GAAG,CAACK;AALL,SADI;AAQfC,QAAAA,QAAQ,EAAE,iBARK;AASfC,QAAAA,SAAS,EAAE,iBATI;AAUfC,QAAAA,WAAW,EAAE,4BAVE;AAWflB,QAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,QAXZ;AAYfb,QAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS,cAAX,IAA6B;AAZ9B,OAAnB;AAeA,WAAKJ,KAAL,CAAW1B,WAAX,CAAuByC,UAAvB;AACH,KAp2BkB;;AAAA,SAq2BnB+E,mBAr2BmB,GAq2BIC,uBAAD,IAA6B;AAE/C,UAAIpE,GAAG,GAAGvC,wBAAwB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA7B,EAC9B,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MADE,EAE9B,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBqB,QAFa,CAAlC;AAGA,UAAIc,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,UAAIC,MAAM,GAAGL,GAAG,CAACK,MAAjB;AAEA,YAAMgE,eAAe,GAAG;AACpBC,QAAAA,MAAM,EAAEjE,MADY;AAEpBkE,QAAAA,QAAQ,EAAEnE,QAFU;AAGpB2C,QAAAA,gBAAgB,EAAC,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,CAAgDjB,KAAhD,IAAyD,CAAC,CAHvD;AAIpB+E,QAAAA,SAAS,EAAC,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BkF;AAJhB,OAAxB;AAQA,WAAKnG,KAAL,CAAWjB,0BAAX,CAAsCgH,uBAAtC,EAA+DC,eAA/D,EAAgF,KAAKhG,KAAL,CAAWJ,KAA3F,EAAkG,sBAAlG,EACI,KAAKD,KAAL,CAAWS,cAAX,CAA0BgG,oBAD9B;AAGH,KAx3BkB;;AAEf,SAAKC,SAAL,GAAiB/I,KAAK,CAACgJ,SAAN,EAAjB;AAEA,UAAMzF,SAAS,GAAG;AACd0F,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAKxG,KAAL,CAAWJ,KAAX,CAAiBsF,QAAjB,GAA4BtB,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBsF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAKvF,KAAL,GAAa;AACTa,MAAAA,IAAI,EAAE,EADG;AACCiG,MAAAA,YAAY,EAAE,EADf;AACmBrD,MAAAA,KAAK,EAAE,EAD1B;AAC8BhD,MAAAA,cAAc,EAAE,EAD9C;AAETQ,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,SAAS,EAAEA,SAHF;AAITyB,MAAAA,qBAAqB,EAAE,EAJd;AAKToE,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EALH;AAMTC,MAAAA,gBAAgB,EAAE;AANT,KAAb;AAQA,QAAIC,oBAAoB,GAAG,EAA3B;AACAA,IAAAA,oBAAoB,GAAG,CACnB;AAAEC,MAAAA,OAAO,EAAE,eAAX;AAA4BC,MAAAA,SAAS,EAAE,YAAvC;AAAqDC,MAAAA,KAAK,EAAE,OAA5D;AAAqEC,MAAAA,cAAc,EAAE,WAArF;AAAkGC,MAAAA,WAAW,EAAE;AAA/G,KADmB,EAEnB;AAAEJ,MAAAA,OAAO,EAAE,gBAAX;AAA6B,mBAAa,cAA1C;AAA0DG,MAAAA,cAAc,EAAE,WAA1E;AAAuFC,MAAAA,WAAW,EAAE;AAApG,KAFmB,EAGnB;AAAEJ,MAAAA,OAAO,EAAE,mCAAX;AAAgD,mBAAa,WAA7D;AAA0EG,MAAAA,cAAc,EAAE,WAA1F;AAAuGC,MAAAA,WAAW,EAAE;AAApH,KAHmB,EAInB;AAAEJ,MAAAA,OAAO,EAAE,iBAAX;AAA8B,mBAAa,cAA3C;AAA2DG,MAAAA,cAAc,EAAE,WAA3E;AAAwFC,MAAAA,WAAW,EAAE;AAArG,KAJmB,EAKnB;AAAEJ,MAAAA,OAAO,EAAE,eAAX;AAA4BC,MAAAA,SAAS,EAAE,YAAvC;AAAqDC,MAAAA,KAAK,EAAE,OAA5D;AAAqEC,MAAAA,cAAc,EAAE,WAArF;AAAkGC,MAAAA,WAAW,EAAE;AAA/G,KALmB,EAMnB;AAAEJ,MAAAA,OAAO,EAAE,UAAX;AAAuBC,MAAAA,SAAS,EAAE,WAAlC;AAA+CC,MAAAA,KAAK,EAAE,OAAtD;AAA+DC,MAAAA,cAAc,EAAE,YAA/E;AAA6FC,MAAAA,WAAW,EAAE;AAA1G,KANmB,EAOnB;AAAEJ,MAAAA,OAAO,EAAE,yBAAX;AAAsCC,MAAAA,SAAS,EAAE,iBAAjD;AAAoEC,MAAAA,KAAK,EAAE;AAA3E,KAPmB,EAQnB;AAAEF,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,SAAS,EAAE,WAAtC;AAAmDC,MAAAA,KAAK,EAAE;AAA1D,KARmB,CAAvB;AAYH;;AAkF8B,SAAxBG,wBAAwB,CAACnH,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAY6G,YAAZ,KAA6B,EAA7B,IAAmCzG,KAAK,CAACJ,KAAN,CAAY6G,YAAZ,KAA6B9G,KAAK,CAAC8G,YAA1E,EAAwF;AACpF9I,MAAAA,KAAK,CAAC0G,IAAN,CAAWrE,KAAK,CAACJ,KAAN,CAAY6G,YAAvB;AACAzG,MAAAA,KAAK,CAACJ,KAAN,CAAY6G,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIzG,KAAK,CAACJ,KAAN,CAAYwD,KAAZ,KAAsBzD,KAAK,CAACyD,KAAhC,EAAuC;AACnCzF,MAAAA,KAAK,CAACyF,KAAN,CAAYpD,KAAK,CAACJ,KAAN,CAAYwD,KAAxB;AACApD,MAAAA,KAAK,CAACJ,KAAN,CAAYwD,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAEDgE,EAAAA,iBAAiB,CAAC5G,IAAD,EAAO6G,aAAP,EAAsB;AAEnC,UAAMC,UAAU,GAAG,CACf;AAAER,MAAAA,OAAO,EAAE,eAAX;AAA4BC,MAAAA,SAAS,EAAE,YAAvC;AAAqDC,MAAAA,KAAK,EAAE,OAA5D;AAAqEC,MAAAA,cAAc,EAAE,WAArF;AAAkGC,MAAAA,WAAW,EAAE;AAA/G,KADe,EAEf;AAAEJ,MAAAA,OAAO,EAAE,eAAX;AAA4BC,MAAAA,SAAS,EAAE,YAAvC;AAAqDC,MAAAA,KAAK,EAAE,OAA5D;AAAqEC,MAAAA,cAAc,EAAE,WAArF;AAAkGC,MAAAA,WAAW,EAAE;AAA/G,KAFe,EAGf;AAAEJ,MAAAA,OAAO,EAAE,UAAX;AAAuBC,MAAAA,SAAS,EAAE,WAAlC;AAA+CC,MAAAA,KAAK,EAAE,OAAtD;AAA+DC,MAAAA,cAAc,EAAE,YAA/E;AAA6FC,MAAAA,WAAW,EAAE;AAA1G,KAHe,EAIf;AAAEJ,MAAAA,OAAO,EAAE,yBAAX;AAAsCC,MAAAA,SAAS,EAAE,iBAAjD;AAAoEC,MAAAA,KAAK,EAAE;AAA3E,KAJe,EAKf;AAAEF,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,SAAS,EAAE,WAAtC;AAAmDC,MAAAA,KAAK,EAAE;AAA1D,KALe,CAAnB;AAQA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,QAAIO,UAAU,GAAG,EAAjB;AACAF,IAAAA,aAAa,IAAIA,aAAa,CAACG,OAAd,CAAsBC,WAAW,IAAI;AAClDjH,MAAAA,IAAI,IAAIA,IAAI,CAACgH,OAAL,CAAaE,QAAQ,IAAI;AAC7B,cAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeD,QAAQ,CAAC3E,QAAxB,CAAhB;;AACA,YAAI4E,OAAO,CAAChE,MAAR,GAAiB,CAArB,EAAwB;AACpBgE,UAAAA,OAAO,CAACH,OAAR,CAAgB,CAAC,CAACK,GAAD,CAAD,KAAW;AACvB,kBAAMC,SAAS,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,MAAM,IAAIA,MAAM,CAAClB,OAAP,KAAmBe,GAA7C,CAAlB;;AACA,gBAAI,CAACC,SAAL,EAAgB;AACZ,kBAAIL,WAAW,CAACQ,UAAZ,KAA2BJ,GAA/B,EAAoC;AAChCN,gBAAAA,UAAU,CAACW,IAAX,CAAgB;AACZpB,kBAAAA,OAAO,EAAEe,GADG;AAEZd,kBAAAA,SAAS,EAAEc,GAFC;AAGZb,kBAAAA,KAAK,EAAE;AAHK,iBAAhB;AAKH;AACJ;AACJ,WAXD;AAYH;AACJ,OAhBO,CAAR;AAiBH,KAlBgB,CAAjB;AAoBA,UAAMmB,QAAQ,GAAG,CAAC,GAAGb,UAAJ,EAAgB,GAAGC,UAAnB,CAAjB;AACA,WAAOY,QAAP;AACH;;AAwBDC,EAAAA,MAAM,GAAG;AAGL,QAAIrG,QAAQ,GAAG,EAAf;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMqG,mBAAmB,GAAG,KAAKjB,iBAAL,CAAuB,KAAKpH,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eAA5B,IAC5C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eADgB,IACG,EAD1B,EAC8B,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G,qBAA5B,IACvD,KAAKtI,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G,qBAFH,CAA5B;AAIA,SAAKD,mBAAL,GAA2BA,mBAA3B;AAEA,UAAME,KAAK,GAAG,KAAK5I,KAAL,CAAW+G,UAAX,CAAsB8B,GAAtB,CAA0B,oBAA1B,KAAmD,KAAK7I,KAAL,CAAW+G,UAAX,CAAsB+B,GAAtB,CAA0B,oBAA1B,EAAgDrE,YAAjH;AACA,UAAMsE,MAAM,GAAG,KAAK/I,KAAL,CAAW+G,UAAX,CAAsB8B,GAAtB,CAA0B,qBAA1B,KAAoD,KAAK7I,KAAL,CAAW+G,UAAX,CAAsB+B,GAAtB,CAA0B,qBAA1B,EAAiDrE,YAApH;AACA,UAAMuE,QAAQ,GAAG,KAAKhJ,KAAL,CAAW+G,UAAX,CAAsB8B,GAAtB,CAA0B,uBAA1B,KAAsD,KAAK7I,KAAL,CAAW+G,UAAX,CAAsB+B,GAAtB,CAA0B,uBAA1B,EAAmDrE,YAA1H;AACA,UAAM2B,uBAAuB,GAAG,KAAKpG,KAAL,CAAW+G,UAAX,CAAsB8B,GAAtB,CAA0B,uBAA1B,KAAsD,KAAK7I,KAAL,CAAW+G,UAAX,CAAsB+B,GAAtB,CAA0B,uBAA1B,EAAmDrE,YAAzI;AAGA,UAAMwE,SAAS,GAAG;AACdnG,MAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiBuC,WADf;AAEd9B,MAAAA,SAAS,EAAE,QAFG;AAGdY,MAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,QAHb;AAIdmD,MAAAA,YAAY,EAAEsE,MAJA;AAKd9G,MAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC,UALf;AAMdb,MAAAA,UAAU,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,UANf;AAOd8H,MAAAA,eAAe,EAAE,6BAPH;AAQdzI,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS,cAAX,IAA6B,EAR/B;AASdS,MAAAA,SAAS,EAAC,KAAKlB,KAAL,CAAWkB;AATP,KAAlB;AAYA,UAAMiI,QAAQ,GAAG;AACbrG,MAAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWJ,KAAX,CAAiBuC,WADhB;AAC6B0G,MAAAA,eAAe,EAAE,6BAD9C;AAC6EE,MAAAA,eAAe,EAAEjF,SAD9F;AAEbzD,MAAAA,SAAS,EAAE,QAFE;AAEQU,MAAAA,UAAU,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,UAFrC;AAEiDE,MAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,QAF5E;AAEsFmD,MAAAA,YAAY,EAAEmE,KAFpG;AAGbnI,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS,cAHd;AAIbwB,MAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC;AAJhB,KAAjB;AAMA,UAAMF,WAAW,GAAG;AAAEiH,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBtI,MAAAA,SAAS,EAAE,QAAjC;AAA2CD,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS;AAAtE,KAApB;AAEA,UAAM4I,0BAA0B,GAAG;AAAEjD,MAAAA,uBAAuB,EAAEA,uBAA3B;AAAmDnE,MAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAhF;AAA6FxB,MAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWS;AAAxH,KAAnC;;AAEA,QAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,IAA+B,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAA/D,EAAyE;AACrEE,MAAAA,QAAQ,GAAI,KAAKpC,KAAL,CAAWS,cAAX,CAA0B,UAA1B,KAAyClB,aAAa,CAAC,KAAKS,KAAL,CAAWS,cAAX,CAA0B,UAA1B,CAAD,CAAvD,IAAmGf,mBAAmB,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiBqB,QAAlB,EAA4B,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BC,QAAxD,CAAjI;AACAG,MAAAA,MAAM,GAAI,KAAKrC,KAAL,CAAWS,cAAX,CAA0B,QAA1B,KAAuCjB,WAAW,CAAC,KAAKQ,KAAL,CAAWS,cAAX,CAA0B,QAA1B,CAAD,CAAnD,IAA6Ff,mBAAmB,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiBqB,QAAlB,EAA4B,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BE,MAAxD,CAAzH;AACH;;AACD,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,UADV;AAEI,MAAA,KAAK,EAAE,KAAK9B,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKjD,KAAL,CAAWS,cAAX,CAA0B,UAA1B,KAAyC2B,QALvD;AAMI,MAAA,UAAU,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BgI,SAN1C;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,QAAQ,EAAEC,IAAI,IAAI,KAAKzD,gBAAL,CAAsB,UAAtB,EAAkCyD,IAAlC,CARtB;AASI,MAAA,KAAK,EAAE,KAAKvJ,KAAL,CAAWS,cAAX,CAA0B,UAA1B,KAAyC2B,QATpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAeI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,IAAI,EAAE,QADV;AAEI,MAAA,KAAK,EAAE,KAAK/B,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFX;AAGI,MAAA,SAAS,EAAC,cAHd;AAII,MAAA,eAAe,EAAC,eAJpB;AAKI,MAAA,QAAQ,EAAE,KAAKjD,KAAL,CAAWS,cAAX,CAA0B,QAA1B,KAAuC4B,MALrD;AAMI,MAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BgI,SAN1C;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,QAAQ,EAAEC,IAAI,IAAI,KAAKzD,gBAAL,CAAsB,QAAtB,EAAgCyD,IAAhC,CARtB;AASI,MAAA,KAAK,EAAE,KAAKvJ,KAAL,CAAWS,cAAX,CAA0B,QAA1B,KAAuC4B,MATlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAfJ,eA6BI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKhC,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,kBAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAK5C,KAAL,CAAW0C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,WAAW,EAAE,KAPjB;AAQI,MAAA,OAAO,EAAE,KAAKjD,KAAL,CAAWwJ,WARxB;AASI,MAAA,KAAK,EAAE,KAAKnJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBATvC;AAUI,MAAA,YAAY,EAAE,KAAK1C,KAAL,CAAWS,cAAX,CAA0B,kBAA1B,CAVlB;AAWI,MAAA,QAAQ,EAAGM,KAAD,IAAW,KAAK4D,aAAL,CAAmB5D,KAAnB,EAA0B,kBAA1B,CAXzB;AAYI,MAAA,iBAAiB,EAAE,IAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CA7BJ,CAHJ,EAmDK,KAAKf,KAAL,CAAWa,IAAX,gBAGG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,6BADrB;AAEI,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWiB,UAH3B;AAII,MAAA,SAAS,EAAE,KAAKjB,KAAL,CAAWkB,SAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKJ,eAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAK4H,mBAN9B;AAOI,MAAA,UAAU,EAAE,KAAKzC,UAPrB;AAQI,MAAA,UAAU,EAAE,KAAKjG,KAAL,CAAW+G,UAR3B;AASI,MAAA,qBAAqB,EAAE,KAAK/G,KAAL,CAAW2C,qBATtC;AAUI,MAAA,UAAU,EAAE,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBmB,UAVjC;AAWI,MAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBqB,QAX/B;AAYI,MAAA,UAAU,EAAE,YAZhB;AAaI,MAAA,QAAQ,EAAE,IAbd;AAcI,MAAA,WAAW,EAAE,IAdjB;AAeI,MAAA,UAAU,EAAE,OAfhB;AAgBI,MAAA,iBAAiB,EAAE,IAhBvB;AAiBI,MAAA,gBAAgB,EAAE,IAjBtB;AAkBI,MAAA,WAAW,EAAC,UAlBhB;AAmBI,MAAA,UAAU,EAAE,CAnBhB;AAoBI,MAAA,SAAS,EAAE,MAAM,KAAKjB,KAAL,CAAWtB,uBAAX,CAAmCoK,QAAnC,EAA4C,KAAK9I,KAAL,CAAWJ,KAAX,CAAiBgC,UAA7D,CApBrB;AAqBI,MAAA,kBAAkB,EAAE,IArBxB,CAqB8B;AArB9B;AAsBI,MAAA,mBAAmB,EAAE,KAAKkE,mBAtB9B,CAsBqD;AAtBrD;AAuBI,MAAA,WAAW,EAAEpE,WAvBjB;AAwBI,MAAA,YAAY,EAAE,KAAKD,YAxBvB;AAyBI,MAAA,WAAW,EAAE,KAAKzB,KAAL,CAAWnB,4BAzB5B;AA0BI,MAAA,SAAS,EAAE+J,SA1Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,GA+BK,EAlFV,CADJ,CADJ,CADJ,EAyFK,KAAK5I,KAAL,CAAWJ,KAAX,CAAiBO,SAAjB,iBACG,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKH,KAAL,CAAWJ,KAAX,CAAiBO,SAAtC;AACI,MAAA,UAAU,EAAE,KAAKF,UADrB;AAEI,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWJ,KAAX,CAAiBS,SAFhC;AAGI,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBmB,UAHjC;AAII,MAAA,UAAU,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiB6C,UAJjC;AAKI,MAAA,WAAW,EAAE,KAAKa,WALtB;AAMI,MAAA,IAAI,EAAE,IANV;AAOI,MAAA,KAAK,EAAE,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBM,SAP5B;AAQI,MAAA,aAAa,EAAE,KAAKY,aARxB;AASI,MAAA,YAAY,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiB6G,YATnC;AAUI,MAAA,WAAW,EAAE,KAAKzG,KAAL,CAAWxB,WAV5B;AAWI,MAAA,cAAc,EAAE,KAAKmB,KAAL,CAAWS,cAAX,IAA6B,EAXjD;AAYI,MAAA,gBAAgB,EAAE,IAZtB;AAaI,MAAA,eAAe,EAAE,CACb;AAAE,qBAAa,IAAf;AAAqB,mBAAW,eAAhC;AAAiD,qBAAa,YAA9D;AAA4E,iBAAS,OAArF;AAA8F,0BAAkB,WAAhH;AAA6H,uBAAe;AAA5I,OADa,EAEb;AAAE,qBAAa,IAAf;AAAqB,mBAAW,yBAAhC;AAA2D,qBAAa,iBAAxE;AAA2F,iBAAS,OAApG;AAA6G,qBAAa,gBAA1H;AAA4I,uBAAe;AAA3J,OAFa,CAbrB;AAiBI,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBM,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWJ,KAAX,CAAiBS,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKL,KAAL,CAAW0C,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAKmC,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK9E,KAAL,CAAWJ,KAAX,CAAiBmB,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWS,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAOR,oBAAC,kBAAD;AAEE,QAAA,WAAW,EAAE,KAAKT,KAAL,CAAW+D,WAF1B;AAGE,QAAA,aAAa,EAAE,KAAK/D,KAAL,CAAW0H,aAH5B,CAIE;AAJF;AAKE,QAAA,cAAc,EAAE,KAAK1H,KAAL,CAAWS,cAAX,IAA6B,EAL/C;AAME,QAAA,eAAe,EAAE,KAAK0E,eANxB;AAOE,QAAA,aAAa,EAAE,KAAKR,aAPtB;AAQE,QAAA,YAAY,EAAE,KAAKgB,YARrB;AASE,QAAA,aAAa,EAAE,KAAKtF,KAAL,CAAW0C,IAAX,CAAgBC,aATjC;AAUE,QAAA,SAAS,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBS,SAV9B;AAWE,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBwJ,IAXzB;AAYE,QAAA,QAAQ,EAAE,KAAKpJ,KAAL,CAAWJ,KAAX,CAAiBqB,QAZ7B;AAaE,QAAA,uBAAuB,EAAE,KAAK0D,uBAbhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1FR,CADJ;AAsIH;;AA8OD0E,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI;AAAEH,MAAAA;AAAF,QAAkB,KAAKxJ,KAA3B;AACA,QAAI4J,IAAI,GAAG,KAAX;;AACA,QAAI,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiBQ,cAAjB,KAAoCkJ,aAAa,CAAC1J,KAAd,CAAoBQ,cAA5D,EAA4E;AACxE,WAAKO,QAAL,CAAc;AAAEP,QAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ;AAAnC,OAAd;AACH;;AAED,QAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BuH,WAA5B,KAA4CG,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+BuH,WAA/E,EAA4F;AACxF,YAAMK,cAAc,GAAGlK,mBAAmB,CAAC,KAAKU,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BuH,WAA5B,IAA2C,EAA5C,EAAgD,kBAAhD,EACtC,kBADsC,EAClBrF,SADkB,EACPA,SADO,EACIA,SADJ,CAA1C;AAEAqF,MAAAA,WAAW,GAAGK,cAAc,CAACf,GAAf,CAAmB,YAAnB,CAAd;AACAc,MAAAA,IAAI,GAAG,IAAP;AACH,KAZ6B,CAc9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAI,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,KAAgC0H,aAAa,CAAC1J,KAAd,CAAoBgC,UAAxD,EAAoE;AAEhE,UAAI,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAA1B,KAAwC+G,aAAa,CAAC1J,KAAd,CAAoBqB,QAApB,CAA6BsB,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKtC,KAAL,CAAWJ,KAAX,CAAiB0C,qBAArB,EAA4C;AACxC,eAAKtC,KAAL,CAAWJ,KAAX,CAAiB0C,qBAAjB,CAAuC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAAjE,KAA+EqF,MAAM,CAAC6B,MAAP,CAAc,KAAKzJ,KAAL,CAAWJ,KAAX,CAAiB0C,qBAAjB,CAAuC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAAjE,CAAd,EAA2FmH,GAA3F,CAA+FC,IAAI,IAC9KrH,qBAAqB,CAAC4F,IAAtB,CAA2ByB,IAAI,CAACvF,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMsC,UAAU,GAAGzH,aAAa,CAAC,KAAKe,KAAL,CAAWJ,KAAX,CAAiB0C,qBAAlB,EAAyC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BsB,SAAnE,CAAhC;AACA,YAAIqH,aAAa,GAAG,EAApB;AACAA,QAAAA,aAAa,GACT,KAAK5J,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eAA5B,IAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eAA5B,CAA4C4G,GAA5C,CAAgDG,UAAU,IAAI;AACzG,gBAAMlC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAekC,UAAU,CAAC9G,QAA1B,CAAhB;;AACA,cAAI4E,OAAO,CAAChE,MAAR,GAAiB,CAArB,EAAwB;AACpB,kBAAMmG,OAAO,GAAG,EAAE,GAAGD;AAAL,aAAhB;AACAlC,YAAAA,OAAO,CAACH,OAAR,CAAgB,CAAC,CAACK,GAAD,EAAMzG,KAAN,CAAD,KAAkB;AAE9B0I,cAAAA,OAAO,CAACjC,GAAD,CAAP,GAAezG,KAAf;AAEH,aAJD;AAKA,mBAAO0I,OAAP;AACH;;AACD,iBAAOD,UAAP;AACH,SAZ8C,CADnD,CARgF,CAsBhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAKlJ,QAAL,CAAc;AACV2B,UAAAA,qBADU;AACaoE,UAAAA,UADb;AACyBlG,UAAAA,IAAI,EAAEoJ,aAD/B;AAEVhJ,UAAAA,UAAU,EAAEhD,OAAO,CAACgM,aAAa,IAAI,EAAlB,EAAqB,KAAKjK,KAAL,CAAWkB,SAAhC;AAFT,SAAd;AAIH,OArCD,MAqCM;AAEF;AAEA,YAAIkJ,eAAe,GAAG,EAAtB;AACAA,QAAAA,eAAe,GACX,KAAK/J,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eAA5B,IAA+C,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BkB,eAA5B,CAA4C4G,GAA5C,CAAgDG,UAAU,IAAI;AACzG,gBAAMlC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAekC,UAAU,CAAC9G,QAA1B,CAAhB;;AACA,cAAI4E,OAAO,CAAChE,MAAR,GAAiB,CAArB,EAAwB;AACpB,kBAAMmG,OAAO,GAAG,EAAE,GAAGD;AAAL,aAAhB;AACAlC,YAAAA,OAAO,CAACH,OAAR,CAAgB,CAAC,CAACK,GAAD,EAAMzG,KAAN,CAAD,KAAkB;AAE9B0I,cAAAA,OAAO,CAACjC,GAAD,CAAP,GAAezG,KAAf;AAEH,aAJD;AAKA,mBAAO0I,OAAP;AACH;;AACD,iBAAOD,UAAP;AACH,SAZ8C,CADnD;AAeA,YAAI;AAAChJ,UAAAA;AAAD,YAAY,KAAKlB,KAArB;;AACA,YAAG,KAAKK,KAAL,CAAWJ,KAAX,CAAiBiB,SAAjB,KAA6BiD,SAA7B,IAA2C,KAAK9D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4BS,mBAA5B,KAAoDiH,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+BS,mBAAjI,EAAqJ;AACjJxB,UAAAA,SAAS,GAAC;AAAC0F,YAAAA,IAAI,EAAC,CAAN;AAAQC,YAAAA,IAAI,EAAC,KAAK7G,KAAL,CAAWkB,SAAX,CAAqB2F;AAAlC,WAAV;AACH;;AACA,YAAG,KAAK7G,KAAL,CAAWiB,UAAX,CAAsBJ,IAAzB,EAA8B;AAC1B,cAAG,KAAKb,KAAL,CAAWiB,UAAX,CAAsBJ,IAAtB,CAA2BmD,MAA3B,KAAqC,CAAxC,EAA0C;AACvC,gBAAIqG,SAAS,GAAC,KAAKrK,KAAL,CAAWkB,SAAX,CAAqB0F,IAArB,GAA0B,CAA1B,GAA6B,KAAK5G,KAAL,CAAWkB,SAAX,CAAqB0F,IAArB,GAA0B,KAAK5G,KAAL,CAAWkB,SAAX,CAAqB2F,IAA5E,GACd,KAAK7G,KAAL,CAAWkB,SAAX,CAAqB0F,IADrB;AAEC1F,YAAAA,SAAS,GAAC;AAAC0F,cAAAA,IAAI,EAACyD,SAAN;AAAgBxD,cAAAA,IAAI,EAAC,KAAK7G,KAAL,CAAWkB,SAAX,CAAqB2F;AAA1C,aAAV;AACH;AACJ;;AACD,aAAK7F,QAAL,CAAc;AACXH,UAAAA,IAAI,EAAEuJ,eADK;AACY3J,UAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ,cAD7C;AAEXQ,UAAAA,UAAU,EAAEhD,OAAO,CAACmM,eAAe,IAAI,EAApB,EAAuBlJ,SAAvB,CAFR;AAGXA,UAAAA;AAHW,SAAd;AAKJ,OA3E+D,CA4EhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,KArGD,MAuGK,IAAI,KAAKb,KAAL,CAAWJ,KAAX,CAAiBQ,cAAjB,KAAoCkJ,aAAa,CAAC1J,KAAd,CAAoBQ,cAA5D,EAA4E;AAC7E,WAAKO,QAAL,CAAc;AAAEP,QAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ;AAAnC,OAAd;AACH,KA1J6B,CA4J9B;AACA;AACA;;;AACA,QAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G,qBAA5B,KAAsDgB,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+B0G,qBAAzF,EAAgH;AAC5G,YAAM2B,aAAa,GAAGjL,QAAQ,CAAC,KAAKgB,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G,qBAA7B,EAAmD,WAAnD,EAA+D,SAA/D,CAA9B;AACA,WAAK3H,QAAL,CAAc;AAAE2H,QAAAA,qBAAqB,EAAE2B;AAAzB,OAAd;AACH;;AAGD,QAAI,KAAKjK,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G,qBAA5B,KAAsDgB,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+B0G,qBAAzF,EAAgH;AAC5G,WAAK3H,QAAL,CAAc;AAAE2H,QAAAA,qBAAqB,EAAE,KAAKtI,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B0G;AAArD,OAAd;AACH;;AAED,QAAI,KAAKtI,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4ByF,aAA5B,KAA8CiC,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+ByF,aAAjF,EAAgG;AAC5F,WAAK1G,QAAL,CAAc;AAAE0G,QAAAA,aAAa,EAAE,KAAKrH,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4ByF;AAA7C,OAAd;AACH;;AAED,QAAI,KAAKrH,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B8B,WAA5B,KAA4C4F,aAAa,CAAC1J,KAAd,CAAoBgC,UAApB,CAA+B8B,WAA/E,EAA4F;AACxF,WAAK/C,QAAL,CAAc;AAAE+C,QAAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBgC,UAAjB,CAA4B8B;AAA3C,OAAd;AACH,KA/K6B,CAiL9B;AACA;AACA;;;AAEA,QAAI6F,IAAJ,EAAU;AACN,WAAK5I,QAAL,CAAc;AACVwI,QAAAA;AADU,OAAd;AAGH;AAEJ;;AAxyBgD;;AA+3BrD,eAAe5L,OAAO,CAACmC,eAAD,EAAkB;AACpCpB,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXM,EAAAA,4BADW;AACmBC,EAAAA,kBADnB;AACsCC,EAAAA,0BADtC;AAEpCP,EAAAA,WAFoC;AAEvBC,EAAAA,uBAFuB;AAEEC,EAAAA,uBAFF;AAE2BC,EAAAA,oBAF3B;AAEiDC,EAAAA;AAFjD,CAAlB,CAAP,CAGZpB,UAAU,CAACqC,sBAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport AddSampleReceiving from '../storagemanagement//AddSampleReceiving';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\n\r\n\r\nimport {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, getComboSampleReceiving, getBarcodeDataRecord,\r\n    saveReceiving, getActiveSampleReceivingById, getSampleReceiving,generateControlBasedReport\r\n} from '../../actions';\r\nimport {sortData,\r\n    getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat,\r\n    constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign\r\n} from '../../components/CommonScript'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleReceivingStorage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showSaveContinue: true\r\n        };\r\n        let extractedColumnList1 = [];\r\n        extractedColumnList1 = [\r\n            { idsName: 'IDS_BARCODEID', dataField: 'sbarcodeid', width: '250px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n            { idsName: \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", mandatoryLabel: \"IDS_ENTER\", controlType: \"selectbox\" },\r\n            { idsName: \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\", \"dataField\": \"stubename\", mandatoryLabel: \"IDS_ENTER\", controlType: \"selectbox\" },\r\n            { idsName: \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", mandatoryLabel: \"IDS_ENTER\", controlType: \"selectbox\" },\r\n            { idsName: 'IDS_SAMPLEQTY', dataField: 'nsampleqty', width: '250px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n            { idsName: 'IDS_UNIT', dataField: 'sunitname', width: '250px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n            { idsName: 'IDS_SAMPLERECEIVINGDATE', dataField: 'scollectiondate', width: '250px'},\r\n            { idsName: 'IDS_COMMENTS', dataField: 'scomments', width: '250px' }\r\n        ];\r\n\r\n\r\n    }\r\n    \r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // closeModal = () => {\r\n    //     let loadEsign = this.props.Login.loadEsign;\r\n    //     let openModal = this.props.Login.openModal;\r\n    //     let selectedRecord = this.props.Login.selectedRecord;\r\n    //     let jsondataBarcodeFields = this.props.Login.masterData.jsondataBarcodeFields;\r\n    //     let barcodeFields = this.props.Login.masterData.barcodeFields;\r\n    //     let barcodedata = this.props.Login.masterData.barcodedata;\r\n\r\n\r\n\r\n    //     if (this.props.Login.loadEsign) {\r\n    //         if (this.props.Login.operation === \"delete\") {\r\n    //             loadEsign = false;\r\n    //             openModal = false;\r\n    //             selectedRecord = {};\r\n    //         }\r\n    //         else {\r\n    //             loadEsign = false;\r\n    //             selectedRecord['esignpassword'] = \"\"\r\n    //             selectedRecord['esigncomments'] = \"\"\r\n    //         }\r\n    //     }\r\n    //     else {\r\n    //         openModal = false;\r\n    //         selectedRecord = {};\r\n    //         jsondataBarcodeFields = {};\r\n    //         barcodeFields = {};\r\n    //         barcodedata = {};\r\n    //     }\r\n\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { openModal, loadEsign, selectedRecord }\r\n    //     }\r\n\r\n    //     this.setState({ jsondataBarcodeFields: jsondataBarcodeFields, barcodeFields: jsondataBarcodeFields, barcodedata: jsondataBarcodeFields });\r\n\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    gridfillingColumn(data, barcodeFields) {\r\n        \r\n        const temparray1 = [\r\n            { idsName: 'IDS_BARCODEID', dataField: 'sbarcodeid', width: '250px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n            { idsName: 'IDS_SAMPLEQTY', dataField: 'nsampleqty', width: '250px', mandatoryLabel: 'IDS_ENTER', controlType: 'textinput' },\r\n            { idsName: 'IDS_UNIT', dataField: 'sunitname', width: '250px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n            { idsName: 'IDS_SAMPLERECEIVINGDATE', dataField: 'scollectiondate', width: '250px'},\r\n            { idsName: 'IDS_COMMENTS', dataField: 'scomments', width: '250px' }\r\n\r\n        ];\r\n        /*let temparray2 = []\r\n        barcodeFields&&barcodeFields.forEach(item=>{\r\n            data && data.forEach((item) => {\r\n                const entries = Object.entries(item.jsondata);\r\n                if (entries.length > 0) {\r\n                    entries.forEach(([key]) => {\r\n                        const keyExists = temparray2.some(column => column.idsName === key);\r\n                        if (!keyExists) {\r\n                            if(item.sfieldname===key){\r\n                                temparray2.push({\r\n                                    idsName: key,\r\n                                    dataField: key,\r\n                                    width: '250px'\r\n                                });\r\n                            }\r\n                           \r\n                        }\r\n    \r\n    \r\n                    });\r\n                }\r\n            });\r\n        });*/\r\n        let temparray2 = [];\r\n        barcodeFields && barcodeFields.forEach(barcodeItem => {\r\n            data && data.forEach(dataItem => {\r\n                const entries = Object.entries(dataItem.jsondata);\r\n                if (entries.length > 0) {\r\n                    entries.forEach(([key]) => {\r\n                        const keyExists = temparray2.some(column => column.idsName === key);\r\n                        if (!keyExists) {\r\n                            if (barcodeItem.sfieldname === key) {\r\n                                temparray2.push({\r\n                                    idsName: key,\r\n                                    dataField: key,\r\n                                    width: '250px'\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const newArray = [...temparray1, ...temparray2]\r\n        return newArray;\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'update') {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n    render() {\r\n\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n        const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleReceiving\r\n            && this.props.Login.masterData.SampleReceiving || [], this.props.Login.masterData.jsondataBarcodeFields\r\n        && this.props.Login.masterData.jsondataBarcodeFields);\r\n\r\n        this.extractedColumnList = extractedColumnList;\r\n\r\n        const addId = this.state.controlMap.has(\"AddSampleReceiving\") && this.state.controlMap.get(\"AddSampleReceiving\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSampleReceiving\") && this.state.controlMap.get(\"EditSampleReceiving\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSampleReceiving\") && this.state.controlMap.get(\"DeleteSampleReceiving\").ncontrolcode;\r\n        const SampleReceivingReportId = this.state.controlMap.has(\"SampleReceivingReport\") && this.state.controlMap.get(\"SampleReceivingReport\").ncontrolcode;\r\n\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.displayName,\r\n            operation: \"update\",\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            inputParam: this.props.Login.inputParam,\r\n            primaryKeyField: \"nstoragesamplereceivingcode\",\r\n            selectedRecord: this.state.selectedRecord || {},\r\n            dataState:this.state.dataState\r\n\r\n        };\r\n        const addParam = {\r\n            screenName: this.props.Login.displayName, primaryKeyField: \"nstoragesamplereceivingcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolcode: addId,\r\n            selectedRecord: this.state.selectedRecord,\r\n            masterData: this.props.Login.masterData\r\n        };\r\n        const deleteParam = { deleteId: deleteId, operation: \"delete\", selectedRecord: this.state.selectedRecord };\r\n\r\n        const samplereceivingreportParam = { SampleReceivingReportId: SampleReceivingReportId,masterData: this.props.Login.masterData,  selectedRecord: this.state.selectedRecord };\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"nprojecttypecode\"}\r\n                                        isDisabled={false}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        isClearable={false}\r\n                                        options={this.state.projectType}\r\n                                        value={this.props.Login.masterData.selectedProjectType}\r\n                                        defaultValue={this.state.selectedRecord[\"nprojecttypecode\"]}\r\n                                        onChange={(event) => this.onComboChange(event, \"nprojecttypecode\")}\r\n                                        closeMenuOnSelect={true}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>\r\n                            </Row>\r\n                           \r\n                            {this.state.data ?\r\n\r\n\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nstoragesamplereceivingcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    isComponent={true}\r\n                                    gridHeight={'530px'}\r\n                                    isToolBarRequired={true}\r\n                                    isActionRequired={true}\r\n                                    expandField=\"expanded\"\r\n                                    selectedId={0}\r\n                                    addRecord={() => this.props.getComboSampleReceiving(addParam,this.props.Login.masterData)}\r\n                                    isDownloadButtonOn={true} //report \r\n                                    samplereceivingData={this.samplereceivingData}   //report\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    fetchRecord={this.props.getActiveSampleReceivingById}\r\n                                    editParam={editParam}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        size={'lg'}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={true}\r\n                        mandatoryFields={[\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_BARCODEID\", \"dataField\": \"sbarcodeid\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textinput\" },\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_SAMPLERECEIVINGDATE\", \"dataField\": \"dcollectiondate\", \"width\": \"250px\", \"fieldType\": 'dateOnlyFormat', \"controlType\": \"textinput\" },\r\n                        ]}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddSampleReceiving\r\n\r\n                                barcodedata={this.state.barcodedata}\r\n                                barcodeFields={this.state.barcodeFields}\r\n                                //barcodenorecord={this.state.barcodenorecord}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                barcodeEnter={this.barcodeEnter}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                operation={this.props.Login.operation}\r\n                                unit={this.props.Login.unit}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChangeSlidout={this.handleDateChangeSlidout}\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    deleteRecord = (deleteParam) => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: \"IDS_STORAGESAMPLERECEIVING\",\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n\r\n\r\n                \"fromDate\": fromDate,\r\n                \"toDate\": toDate,\r\n                \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\r\n                \"nstoragesamplereceivingcode\": deleteParam.selectedRecord['nstoragesamplereceivingcode'],\r\n                \"scollectiondate\": deleteParam.selectedRecord['scollectiondate'],\r\n                \"scomments\": deleteParam.selectedRecord['scomments']\r\n\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_STORAGESAMPLERECEIVING\" }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    checkNoRecord = (inputData) => {\r\n     \r\n        if (inputData?.SampleReceiving?.jsondata) {\r\n            try {\r\n              \r\n                const jsonData = JSON.parse(inputData.SampleReceiving.jsondata);\r\n               \r\n                return jsonData.hasOwnProperty(\"NoRecord\");\r\n            } catch (error) {\r\n           \r\n                console.error(\"Invalid JSON string:\", error);\r\n                return false;\r\n            }\r\n        }\r\n        // Return false if jsondata does not exist\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let inputData = {};\r\n\r\n        const jsonDataCheck = this.state.barcodedata;\r\n\r\n        if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) ) {\r\n            if(jsonDataCheck !== undefined && jsonDataCheck !== '' && jsonDataCheck !=0){\r\n\r\n            inputData[\"SampleReceiving\"] = {};\r\n            if (this.props.Login.operation === \"create\") {\r\n\r\n                inputData[\"SampleReceiving\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.state.barcodedata));\r\n            }\r\n            inputData[\"SampleReceiving\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n            if (this.props.Login.operation === \"update\") {\r\n                inputData[\"SampleReceiving\"][\"nstoragesamplereceivingcode\"] = this.props.Login.selectedId;\r\n            }\r\n            inputData[\"SampleReceiving\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\r\n\r\n            inputData[\"SampleReceiving\"][\"dcollectiondate\"] = formatInputDate(selectedRecord[\"dcollectiondate\"], false);\r\n            inputData[\"SampleReceiving\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\r\n            inputData[\"SampleReceiving\"][\"ntzcollectiondatetime\"] = selectedRecord[\"ntzcollectiondatetime\"] && selectedRecord[\"ntzcollectiondatetime\"].value || transactionStatus.NA\r\n            inputData[\"SampleReceiving\"][\"noffsetdcollectiondatetime\"] = selectedRecord[\"noffsetdcollectiondatetime\"] && selectedRecord[\"noffsetdcollectiondatetime\"].value || transactionStatus.NA\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n            inputData[\"userinfo\"] = {\r\n                ...this.props.Login.userInfo,\r\n                sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n            }\r\n\r\n\r\n\r\n            const inputParam = {\r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                classUrl: \"samplereceiving\",\r\n                methodUrl: \"SampleReceiving\",\r\n                inputData: inputData,\r\n                operation: this.props.Login.operation,\r\n                displayName:\"IDS_STORAGESAMPLERECEIVING\",\r\n                saveType, formRef,\r\n                selectedRecord: this.state.selectedRecord || {}\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.saveReceiving(inputParam, masterData);\r\n            }\r\n        }\r\n            else {\r\n                toast.warn(\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_CLICKENTERTOJSONRECORD\",\r\n                    })\r\n                );\r\n            }\r\n        \r\n        } else {\r\n           \r\n\r\n                toast.warn(\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_INVALIDABARCODE\",\r\n                    })\r\n                );\r\n\r\n            }\r\n          \r\n        \r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === \"nprojecttypecode\") {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: parseInt(comboData.value),\r\n                selectedProjectType: comboData,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getSampleReceiving(inputParam)\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeSlidout = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onInputOnChange = (event, fieldname) => {\r\n\r\n        const value = event.target.value;\r\n        //const { selectedRecord } = this.state;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldname === 'sbarcodeid') {\r\n            \r\n            if (!/^\\s*$/.test(value) && value.length >= parseInt(this.props.Login.settings[37])) {\r\n                \r\n                if (event.target.name === \"sbarcodeid\") {\r\n                    selectedRecord[event.target.name] = value;\r\n                } else {\r\n                    selectedRecord[event.target.name] = value;\r\n                }\r\n                const barcodenorecord = false;\r\n                this.setState({ selectedRecord: selectedRecord, barcodenorecord: barcodenorecord });\r\n            } else {\r\n\r\n                const str = true;\r\n                this.setState({ barcodenorecord: str });\r\n            }\r\n\r\n        }\r\n\r\n        selectedRecord[event.target.name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    barcodeEnter = (event, fieldName) => {\r\n        const value = this.state.selectedRecord.sbarcodeid;\r\n\r\n        if (!/^\\s*$/.test(value) && value.length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) && event.keyCode === 13) {\r\n\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n                this.props.Login.masterData.ToDate,\r\n                this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedRecord: this.state.selectedRecord,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getBarcodeDataRecord(inputParam)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { projectType } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.SampleReceiving !== previousProps.Login.masterData.SampleReceiving) {\r\n        //     let samplecollect = [];\r\n        //     samplecollect =\r\n        //         this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\r\n        //             const entries = Object.entries(sampleItem.jsondata);\r\n        //             if (entries.length > 0) {\r\n        //                 const newItem = { ...sampleItem };\r\n        //                 entries.forEach(([key, value]) => {\r\n\r\n        //                     newItem[key] = value;\r\n\r\n        //                 });\r\n        //                 return newItem;\r\n        //             }\r\n        //             return sampleItem;\r\n        //         });\r\n\r\n        //         let { dataState } = this.state;\r\n        //         if (dataState === undefined) {\r\n        //             dataState = { skip: 0, take: this.state.dataState.take }\r\n        //         }\r\n        //         if (this.state.dataResult.data) {\r\n        //             if (this.state.dataResult.data.length === 1) {\r\n        //                 let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n        //                     this.state.dataState.skip\r\n        //                 dataState = { skip: skipcount, take: this.state.dataState.take }\r\n        //             }\r\n        //         }\r\n        //         this.setState({\r\n        //             data: samplecollect,\r\n        //             dataState,\r\n        //             dataResult: process(samplecollect || [], dataState),\r\n        //         });\r\n        // }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                let samplecollect = [];\r\n                samplecollect =\r\n                    this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n    \r\n                                newItem[key] = value;\r\n    \r\n                            });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n                //     let { dataState } = this.state;\r\n                // if (dataState === undefined) {\r\n                //     dataState = { skip: 0, take: this.state.dataState.take }\r\n                // }\r\n                // if (this.state.dataResult.data) {\r\n                //     if (this.state.dataResult.data.length === 1) {\r\n                //         let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                //             this.state.dataState.skip\r\n                //         dataState = { skip: skipcount, take: this.state.dataState.take }\r\n                //     }\r\n                // }\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: samplecollect,\r\n                    dataResult: process(samplecollect || [],this.state.dataState),\r\n                });\r\n            }else {\r\n\r\n                //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\r\n\r\n                let samplereceiving = [];\r\n                samplereceiving =\r\n                    this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n    \r\n                                newItem[key] = value;\r\n    \r\n                            });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined  || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                 if(this.state.dataResult.data){\r\n                     if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                         dataState={skip:skipcount,take:this.state.dataState.take}\r\n                     }\r\n                 } \r\n                 this.setState({\r\n                    data: samplereceiving, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(samplereceiving || [],dataState),\r\n                    dataState\r\n                });\r\n            }\r\n            // else {\r\n            //     if (this.props.Login.masterData.SampleReceiving) {\r\n            //         let samplecollect = [];\r\n            //         samplecollect =\r\n            //             this.props.Login.masterData.SampleReceiving && this.props.Login.masterData.SampleReceiving.map(sampleItem => {\r\n            //                 const entries = Object.entries(sampleItem.jsondata);\r\n            //                 if (entries.length > 0) {\r\n            //                     const newItem = { ...sampleItem };\r\n            //                     entries.forEach(([key, value]) => {\r\n\r\n            //                         newItem[key] = value;\r\n\r\n            //                     });\r\n            //                     return newItem;\r\n            //                 }\r\n            //                 return sampleItem;\r\n            //             });\r\n\r\n            //         this.setState({\r\n            //             data: samplecollect,\r\n            //             dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            //             dataResult: process(samplecollect || [], { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }),\r\n            //         });\r\n            //     }\r\n            // }\r\n        }\r\n\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        // if (this.props.Login.masterData.barcodenorecord !== previousProps.Login.masterData.barcodenorecord) {\r\n        //     this.setState({ barcodenorecord: this.props.Login.masterData.barcodenorecord });\r\n        // }\r\n        if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\r\n            const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields,\"ascending\",\"nsorter\");\r\n            this.setState({ jsondataBarcodeFields: retrievedData });\r\n        }\r\n\r\n\r\n        if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\r\n            this.setState({ jsondataBarcodeFields: this.props.Login.masterData.jsondataBarcodeFields });\r\n        }\r\n\r\n        if (this.props.Login.masterData.barcodeFields !== previousProps.Login.masterData.barcodeFields) {\r\n            this.setState({ barcodeFields: this.props.Login.masterData.barcodeFields });\r\n        }\r\n\r\n        if (this.props.Login.masterData.barcodedata !== previousProps.Login.masterData.barcodedata) {\r\n            this.setState({ barcodedata: this.props.Login.masterData.barcodedata });\r\n        }\r\n\r\n        // if (this.props.Login.barcodenorecord !== previousProps.Login.barcodenorecord) {\r\n        //     this.setState({ barcodenorecord: false });\r\n        // }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                projectType\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        if (dateName === 'todate') {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        // this.setState({ selectedRecord });\r\n        // this.reloadData(selectedRecord, true);\r\n\r\n        let dateObj = {};\r\n        let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\r\n            },\r\n            classUrl: 'samplereceiving',\r\n            methodUrl: \"SampleReceiving\",\r\n            displayName: \"IDS_STORAGESAMPLERECEIVING\",\r\n            userInfo: this.props.Login.userInfo, selectedRecord\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    reloadData = (selectedRecord, isDateChange) => {\r\n        //this.searchRef.current.value = \"\";\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                //ALPD-4684-Vignesh R(20-08-2024)\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value || -1,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate\r\n            },\r\n            classUrl: 'samplereceiving',\r\n            methodUrl: \"SampleReceiving\",\r\n            displayName: \"IDS_STORAGESAMPLERECEIVING\",\r\n            userInfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord || {}\r\n\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    samplereceivingData = (SampleReceivingReportId) => {\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n        const filterTestParam = {\r\n            todate: toDate,\r\n            fromdate: fromDate,\r\n            nprojecttypecode:this.props.Login.masterData.selectedProjectType.value || -1,\r\n            nsitecode:this.props.Login.userInfo.nsitecode\r\n        }\r\n\r\n\r\n        this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\",\r\n            this.state.selectedRecord.nsamplereceivingcode);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getActiveSampleReceivingById, getSampleReceiving,generateControlBasedReport,\r\n    updateStore, validateEsignCredential, getComboSampleReceiving, getBarcodeDataRecord, saveReceiving\r\n})(injectIntl(SampleReceivingStorage));"]},"metadata":{},"sourceType":"module"}