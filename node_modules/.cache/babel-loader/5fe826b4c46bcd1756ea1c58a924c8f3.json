{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\registrationtype\\\\RegistrationType.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { Row, Col, Nav } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById, updateStore, validateEsignCredential } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport Esign from '../../audittrail/Esign';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport AddSynonym from '../../../components/droparea/AddSynonym';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      const languageData = {};\n      Object.keys(this.state.selectedRecord.sregtypename).map(item => {\n        languageData[item] = this.state.selectedRecord.sregtypename[item];\n      });\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nregtypecode;\n        dataState = this.state.dataState;\n        inputData[\"registrationtype\"] = {\n          \"nregtypecode\": this.state.selectedRecord.nregtypecode ? this.state.selectedRecord.nregtypecode : -1,\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n          \"jsondata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename,\n            \"sdescription\": this.state.selectedRecord.sdescription\n          }\n        };\n        inputData[\"registrationtypeaudit\"] = {\n          \"jsonuidata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename['en-US'],\n            \"sdescription\": this.state.selectedRecord.sdescription,\n            \"ssampletypename\": this.state.selectedRecord.SampleTypes.label,\n            ...languageData\n          }\n        };\n      } else {\n        //add               \n        inputData[\"registrationtype\"] = {\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode ? this.state.selectedRecord.nsampletypecode : -1,\n          \"jsondata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename,\n            \"sdescription\": this.state.selectedRecord.sdescription\n          }\n        };\n        inputData[\"registrationtypeaudit\"] = {\n          \"jsonuidata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename['en-US'],\n            \"sdescription\": this.state.selectedRecord.sdescription,\n            \"ssampletypename\": this.state.selectedRecord.SampleTypes.item.ssampletypename,\n            ...languageData // this.props.Login.languageList.map(item=>item.value:this.state.selectedRecord.sregtypename[item.value])\n\n          }\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: {\n          \"registrationtype\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsSampleType: this.props.Login.optionsSampleType //,\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = (event, name) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (name === 'synonym') {\n          selectedRecord['sregtypename'] = { ...selectedRecord['sregtypename'],\n            [event.target.name]: event.target.value\n          };\n        } else if (name === 'sregtypename') {\n          const langArray = this.props.Login.languageList;\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedRecord['sregtypename'] = { ...selectedRecord['sregtypename'],\n            ...langDataObject\n          };\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const {\n        selectedRecord\n      } = this.state || {};\n\n      if (comboData) {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = comboData.value;\n      } else {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      action: \"\",\n      mandatoryFields: [{\n        \"idsName\": \"IDS_SAMPLETYPE\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPE\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\",\n        \"ismultilingual\": \"true\"\n      } //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n      ]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n    let selectedId = this.props.Login.selectedId;\n\n    if (this.state.showSynonym) {\n      this.setState({\n        showSynonym: false\n      });\n      return null;\n    }\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        loadEsign = false;\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n      selectedId = null;\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        optionsChecklistComponent: [],\n        optionsSampleType: [],\n        selectedId\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_SAMPLETYPE\",\n        \"dataField\": \"ssampletypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPE\",\n        \"dataField\": \"sregtypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nregtypecode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\") && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\") && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\n    const editParam = {\n      screenName: \"RegistrationType\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"RegistrationType\",\n      methodUrl: \"RegistrationType\",\n      operation: \"delete\",\n      key: 'registrationtype'\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchRegTypeById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.showRegTypeAddScreen(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: false,\n      hideSave: this.state.showSynonym,\n      closeLabel: this.state.showSynonym ? \"IDS_CLOSE\" : undefined,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 29\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"sregtypename\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nsampletypecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPE\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord.SampleTypes ? this.state.selectedRecord.SampleTypes : [],\n        options: this.props.Login.optionsSampleType ? this.props.Login.optionsSampleType : [],\n        optionId: \"nsampletypecode\",\n        optionValue: \"ssampletypename\",\n        isMandatory: true,\n        required: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"nsampletypecode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 11,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: this.props.Login.language,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPE\"\n        }),\n        onChange: event => this.onInputOnChange(event, 'sregtypename'),\n        className: \"\",\n        isMandatory: true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPE\"\n        }),\n        required: true,\n        value: this.state.selectedRecord.sregtypename ? this.state.selectedRecord.sregtypename[this.props.Login.language] : \"\",\n        maxLength: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 1,\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsynonym\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSYNONYMN\"\n        }) // data-for=\"tooltip_list_wrap\"\n        // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n        ,\n        className: \"btn btn-circle outline-grey mr-2\",\n        onClick: e => this.setState({\n          showSynonym: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 45\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sdescription\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        isMandatory: false,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        type: \"textarea\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.sdescription : \"\",\n        maxLength: \"255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\n          this.props.Login.inputParam.formRef.current.reset();\n        }\n\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {\n            sregtypename: '',\n            sdescription: ''\n          }\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let mandatoryFields = this.props.Login.mandatoryFields ? this.props.Login.mandatoryFields : [{\n        \"idsName\": \"IDS_SAMPLETYPE\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"textbox\",\n        \"ismultilingual\": \"false\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPE\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\",\n        \"ismultilingual\": \"true\"\n      } //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n      ];\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        mandatoryFields\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchRegTypeById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(RegistrationType));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/registrationtype/RegistrationType.jsx"],"names":["React","ListWrapper","Row","Col","Nav","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchRegTypeById","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormTextarea","FormSelectSearch","SlideOutModal","showEsign","getControlMap","Esign","FormInput","faLanguage","FontAwesomeIcon","AddSynonym","mapStateToProps","state","Login","RegistrationType","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","showSynonym","languageData","Object","keys","selectedRecord","sregtypename","map","item","operation","nregtypecode","nsampletypecode","sdescription","SampleTypes","label","ssampletypename","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","optionsSampleType","reloadData","userinfo","validateEsign","sreason","nreasoncode","value","spredefinedreason","password","onInputOnChange","name","target","type","checked","langArray","languageList","langDataObject","onComboChange","comboData","fieldName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","action","mandatoryFields","optionsChecklistComponent","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","key","intl","formatMessage","id","language","e","componentDidUpdate","previousProps","values","push","current","reset","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { ListWrapper } from '../../../components/client-group.styles'\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById, updateStore, validateEsignCredential } from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport Esign from '../../audittrail/Esign';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport AddSynonym from '../../../components/droparea/AddSynonym';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass RegistrationType extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            action: \"\",\r\n            mandatoryFields: [\r\n                { \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"SampleTypes\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"sregtypename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\",\"ismultilingual\":\"true\" },\r\n                //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    //to close side out\r\n    handleClose() {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, optionsChecklistComponent: [], optionsSampleType: [],selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        const languageData={}\r\n        Object.keys(this.state.selectedRecord.sregtypename).map(item=>{\r\n            languageData[item]= this.state.selectedRecord.sregtypename[item]\r\n        })\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nregtypecode\r\n            dataState = this.state.dataState\r\n            inputData[\"registrationtype\"] = {\r\n                \"nregtypecode\": this.state.selectedRecord.nregtypecode ? this.state.selectedRecord.nregtypecode : -1,\r\n                \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\r\n                \"jsondata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename,\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                }\r\n            }\r\n            inputData[\"registrationtypeaudit\"] =\r\n            {\r\n                \"jsonuidata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename['en-US'],\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                    \"ssampletypename\": this.state.selectedRecord.SampleTypes.label,\r\n                    ...languageData,\r\n                },\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"registrationtype\"] =\r\n            {\r\n                \"nsampletypecode\": this.state.selectedRecord.nsampletypecode ? this.state.selectedRecord.nsampletypecode : -1,\r\n                \"jsondata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename,\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                },\r\n            }\r\n\r\n            inputData[\"registrationtypeaudit\"] =\r\n            {\r\n                \"jsonuidata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename['en-US'],\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                    \"ssampletypename\": this.state.selectedRecord.SampleTypes.item.ssampletypename,\r\n                    ...languageData,\r\n                    // this.props.Login.languageList.map(item=>item.value:this.state.selectedRecord.sregtypename[item.value])\r\n                },\r\n            }\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    //to get the edit record\r\n\r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            dataState: this.state.dataState,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: {\r\n                \"registrationtype\": deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: deleteParam.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName, optionsSampleType: this.props.Login.optionsSampleType//,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    //to reload data\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"ssampletypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"sregtypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"150px\" },\r\n            ]\r\n            primaryKeyField = \"nregtypecode\";\r\n        }\r\n\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\")\r\n            && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\")\r\n            && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\r\n        const editParam = {\r\n            screenName: \"RegistrationType\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { screenName: \"RegistrationType\", methodUrl: \"RegistrationType\", operation: \"delete\", key: 'registrationtype' };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.fetchRegTypeById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    gridHeight={'600px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.showRegTypeAddScreen(this.props.Login.userInfo, addID)}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={false}\r\n                        hideSave={this.state.showSynonym}\r\n                        closeLabel={this.state.showSynonym ? \"IDS_CLOSE\" : undefined}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.state.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.state.showSynonym ?\r\n                                <AddSynonym\r\n                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    languages={this.props.Login.languageList || []}\r\n                                    fieldName=\"sregtypename\"\r\n                                    maxLength={100}\r\n                                />\r\n                                :\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                            name={\"nsampletypecode\"}\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                            value={this.state.selectedRecord.SampleTypes ? this.state.selectedRecord.SampleTypes : []}\r\n                                            options={this.props.Login.optionsSampleType ? this.props.Login.optionsSampleType : []}\r\n                                            optionId=\"nsampletypecode\"\r\n                                            optionValue=\"ssampletypename\"\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            as={\"select\"}\r\n                                            onChange={(event) => this.onComboChange(event, \"nsampletypecode\")}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={11}>\r\n                                        <FormInput\r\n                                            name={this.props.Login.language}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONTYPE\" })}\r\n                                            onChange={(event) => this.onInputOnChange(event, 'sregtypename')}\r\n                                            className=\"\"\r\n                                            isMandatory={true}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONTYPE\" })}\r\n                                            required={true}\r\n                                            value={this.state.selectedRecord.sregtypename ? this.state.selectedRecord.sregtypename[this.props.Login.language] : \"\"}\r\n                                            maxLength={\"100\"}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={1} className=\"p-0\">\r\n                                        <Nav.Link name=\"addsynonym\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSYNONYMN\" })}\r\n                                            // data-for=\"tooltip_list_wrap\"\r\n                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.setState({ showSynonym: true })}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faLanguage} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                    <Col md={12}>\r\n                                        <FormTextarea\r\n                                            name={\"sdescription\"}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            isMandatory={false}\r\n                                            rows=\"1\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                            type=\"textarea\"\r\n                                            value={this.state.selectedRecord ? this.state.selectedRecord.sdescription : \"\"}\r\n                                            maxLength={\"255\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\r\n                    this.props.Login.inputParam.formRef.current.reset();\r\n                }\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState,\r\n                    selectedRecord: { sregtypename: '', sdescription: '' }\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            let mandatoryFields = this.props.Login.mandatoryFields ? (this.props.Login.mandatoryFields) : [\r\n                { \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"SampleTypes\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\",\"ismultilingual\":\"false\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"sregtypename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\",\"ismultilingual\":\"true\"},\r\n                //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord, mandatoryFields });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, name) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            if (name === 'synonym') {               \r\n                selectedRecord['sregtypename'] = {\r\n                    ...selectedRecord['sregtypename'],\r\n                    [event.target.name]: event.target.value\r\n                }\r\n            } \r\n            else if (name === 'sregtypename'){\r\n                const langArray =  this.props.Login.languageList;\r\n                const langDataObject = {};\r\n                langArray.map(item=>\r\n                    langDataObject[item.value] = event.target.value);\r\n\r\n                selectedRecord['sregtypename'] = {\r\n                    ...selectedRecord['sregtypename'],\r\n                    ...langDataObject\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const { selectedRecord } = this.state || {};\r\n        if (comboData) {\r\n\r\n            fieldName = 'nsampletypecode';\r\n            selectedRecord['SampleTypes'] = comboData;\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }\r\n        else {\r\n            fieldName = 'nsampletypecode';\r\n            selectedRecord['SampleTypes'] = comboData;\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(RegistrationType));"]},"metadata":{},"sourceType":"module"}