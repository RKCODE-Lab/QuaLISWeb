{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\RetrieveOrDiposeSample.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport rsapi from '../../rsapi';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\n\nclass RetrieveOrDiposeSample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (!event.target.checked) {\n          selectedRecord['nunitcode'] && delete selectedRecord['nunitcode'];\n          selectedRecord['nquantity'] && delete selectedRecord['nquantity'];\n          selectedRecord['saliquotsampleid'] && delete selectedRecord['saliquotsampleid'];\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let constantvalue = value.target.value;\n\n      if (!isNaN(constantvalue)) {\n        selectedRecord[field] = constantvalue;\n        this.props.childDataChange(selectedRecord);\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.state = {\n      selectedRecord: this.props.selectedRecord,\n      dynamicfields: this.props.dynamicfields\n    };\n  }\n\n  getSelectedBarcodeData(e, inputParam) {\n    if (e.keyCode === 13) {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord || {};\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\n        nprojecttypecode: this.props.breadcrumbprojecttype.value,\n        spositionvalue: inputParam.spositionvalue,\n        userinfo: this.props.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let dynamicfields = []; //ALPD-4717--Vignesh R(23-08-2024)\n\n        let selectedBarcodeValue = [];\n        dynamicfields = [{\n          \"idsName\": \"IDS_SAMPLEID\",\n          \"dataField\": \"spositionvalue\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_POSITION\",\n          \"dataField\": \"sposition\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_QUANTITY\",\n          \"dataField\": \"nquantity\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }, {\n          \"idsName\": \"IDS_UNIT\",\n          \"dataField\": \"sunitname\",\n          \"width\": \"200px\",\n          \"staticField\": true\n        }];\n        const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map(option => {\n          return {\n            \"idsName\": option.sfieldname,\n            \"dataField\": option.sfieldname,\n            \"width\": \"200px\"\n          };\n        });\n        dynamicfields = [...dynamicfields, ...temparray2]; //ALPD-4717--Vignesh R(23-08-2024)\n\n        selectedBarcodeValue = { ...response[0].data['selectedBarcodeValue']\n        };\n\n        if (response[0].data['selectedBarcodeValue'].jsondata !== undefined) {\n          selectedBarcodeValue = { ...selectedBarcodeValue,\n            ...JSON.parse(response[0].data['selectedBarcodeValue'].jsondata.value)\n          };\n        }\n\n        this.setState({\n          dynamicfields,\n          selectedBarcodeValue: { ...selectedBarcodeValue\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            dynamicfields: [],\n            selectedBarcodeValue: {},\n            loading: false\n          });\n          toast.info(error.response.data);\n        }\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      dynamicfields\n    } = this.state;\n    let bool = false;\n\n    if (this.props.dynamicfields !== previousProps.dynamicfields) {\n      bool = true;\n      dynamicfields = this.props.dynamicfields || {};\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.selectedRecord || {};\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        dynamicfields\n      });\n    }\n  }\n\n  render() {\n    const retrieve = this.props.controlMap.has(\"Retrieve\") && this.props.controlMap.get(\"Retrieve\").ncontrolcode;\n    const dispose = this.props.controlMap.has(\"Dispose\") && this.props.controlMap.get(\"Dispose\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: 'spositionvalue',\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLEID\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLEID\"\n      }),\n      value: this.state.selectedRecord['spositionvalue'] ? this.state.selectedRecord['spositionvalue'] : \"\",\n      maxLength: 20,\n      isMandatory: true,\n      onKeyDown: event => this.getSelectedBarcodeData(event, this.state.selectedRecord),\n      onChange: event => this.onInputOnChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.props.CRUDSampleStorageTransaction({\n        sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\n        saliquotsampleid: this.state.selectedRecord.saliquotsampleid && this.state.selectedRecord.saliquotsampleid !== \"\" ? this.state.selectedRecord.saliquotsampleid : \"\",\n        nquantity: this.state.selectedRecord.nquantity && this.state.selectedRecord.nquantity !== \"\" ? this.state.selectedRecord.nquantity : 0,\n        ncontrolcode: retrieve,\n        'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n        userinfo: this.props.userInfo,\n        scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\" ? this.state.selectedRecord.scomments : \"-\",\n        isRetrieve: true,\n        spositionvalue: this.state.selectedRecord.spositionvalue,\n        nneedaliquot: this.state.selectedRecord.nneedaliquot && this.state.selectedRecord.nneedaliquot ? true : false,\n        nunitcode: this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode !== \"\" ? this.state.selectedRecord.nunitcode : 0\n      }, 'create'),\n      hidden: this.props.userRoleControlRights.indexOf(retrieve) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashRestore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_RETRIEVE\"\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.props.CRUDSampleStorageTransaction({\n        sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\n        saliquotsampleid: this.state.selectedRecord.saliquotsampleid && this.state.selectedRecord.saliquotsampleid !== \"\" ? this.state.selectedRecord.saliquotsampleid : \"\",\n        nquantity: this.state.selectedRecord.nquantity && this.state.selectedRecord.nquantity !== \"\" ? this.state.selectedRecord.nquantity : 0,\n        ncontrolcode: dispose,\n        'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n        userinfo: this.props.userInfo,\n        scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\" ? this.state.selectedRecord.scomments : \"-\",\n        isRetrieve: false,\n        spositionvalue: this.state.selectedRecord.spositionvalue,\n        nneedaliquot: this.state.selectedRecord.nneedaliquot && this.state.selectedRecord.nneedaliquot ? true : false\n      }, 'create'),\n      hidden: this.props.userRoleControlRights.indexOf(dispose) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 29\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_DISPOSE\"\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: 'scomments',\n      label: this.props.intl.formatMessage({\n        id: \"IDS_COMMENTS\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_COMMENTS\"\n      }),\n      value: this.state.selectedRecord['scomments'] ? this.state.selectedRecord['scomments'] : \"\",\n      maxLength: 255,\n      onChange: event => this.onInputOnChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      id: \"nneedaliquot\",\n      name: \"nneedaliquot\",\n      type: \"switch\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_INPUTFORALIQUOTSAMPLE\"\n      }),\n      className: \"custom-switch-md\",\n      checked: this.state.selectedRecord && this.state.selectedRecord[\"nneedaliquot\"] ? true : false,\n      onChange: this.onInputOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }\n    }))), this.state.selectedRecord[\"nneedaliquot\"] && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: 'saliquotsampleid',\n      label: this.props.intl.formatMessage({\n        id: \"IDS_NEWSAMPLEID\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_NEWSAMPLEID\"\n      }),\n      value: this.state.selectedRecord['saliquotsampleid'] ? this.state.selectedRecord['saliquotsampleid'] : \"\",\n      maxLength: 20,\n      isMandatory: true,\n      onChange: event => this.onInputOnChange(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(TestPopOver, {\n      intl: this.props.intl,\n      needIcon: true,\n      needPopoverTitleContent: true,\n      placement: \"right\",\n      stringList: ['The Sample will be Restored to the Same Position'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 42\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_QUANTITY\"\n      }),\n      name: \"nquantity\",\n      type: \"numeric\",\n      onChange: event => this.onNumericInputChange(event, 'nquantity'),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_QUANTITY\"\n      }),\n      value: this.state.selectedRecord[\"nquantity\"] ? this.state.selectedRecord[\"nquantity\"] || [] : [],\n      isMandatory: true,\n      required: true,\n      maxLength: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nunitcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nunitcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_UNITNAME\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"nunitcode\"] ? this.state.selectedRecord[\"nunitcode\"] || [] : [],\n      options: this.props.unitMapList ? this.props.unitMapList : [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, this.state.dynamicfields && this.state.dynamicfields.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \" mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 41\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEINFO\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 37\n      }\n    }, this.state.dynamicfields && this.state.dynamicfields.map((item, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        key: `specInfo_${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 65\n        }\n      }, item.hasOwnProperty('staticField') ? this.props.intl.formatMessage({\n        id: item.idsName\n      }) : item.idsName, \"  \"), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 65\n        }\n      }, this.state.selectedBarcodeValue[item.dataField] === \"\" || this.state.selectedBarcodeValue[item.dataField] === undefined || this.state.selectedBarcodeValue[item.dataField] === null ? \"-\" : this.state.selectedBarcodeValue[item.dataField]))));\n    })))))));\n  }\n\n}\n\nexport default injectIntl(RetrieveOrDiposeSample);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/storagemanagement/RetrieveOrDiposeSample.jsx"],"names":["React","Row","Col","Card","FormGroup","FormLabel","injectIntl","CustomSwitch","FormSelectSearch","toast","Axios","rsapi","FormInput","FontAwesomeIcon","faTrashAlt","faTrashRestore","ReadOnlyText","TestPopOver","RetrieveOrDiposeSample","Component","constructor","props","onInputOnChange","event","selectedRecord","state","target","type","checked","name","value","childDataChange","setState","onNumericInputChange","field","constantvalue","isNaN","onComboChange","comboData","fieldName","dynamicfields","getSelectedBarcodeData","e","inputParam","keyCode","loading","urlArray","url1","post","nprojecttypecode","breadcrumbprojecttype","spositionvalue","userinfo","userInfo","all","then","response","selectedBarcodeValue","temparray2","data","map","option","sfieldname","jsondata","undefined","JSON","parse","catch","error","status","message","info","componentDidUpdate","previousProps","bool","render","retrieve","controlMap","has","get","ncontrolcode","dispose","intl","formatMessage","id","float","marginRight","CRUDSampleStorageTransaction","sunitname","nunitcode","label","saliquotsampleid","nquantity","nsamplestoragetransactioncode","scomments","isRetrieve","nneedaliquot","userRoleControlRights","indexOf","unitMapList","length","display","marginTop","item","index","hasOwnProperty","idsName","dataField"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../../rsapi';\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\r\n\r\n\r\nclass RetrieveOrDiposeSample extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: this.props.selectedRecord,\r\n            dynamicfields: this.props.dynamicfields\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (!event.target.checked) {\r\n                selectedRecord['nunitcode'] && delete selectedRecord['nunitcode']\r\n                selectedRecord['nquantity'] && delete selectedRecord['nquantity']\r\n                selectedRecord['saliquotsampleid'] && delete selectedRecord['saliquotsampleid']\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let constantvalue = value.target.value;\r\n        if (!isNaN(constantvalue)) {\r\n            selectedRecord[field] = constantvalue;\r\n            this.props.childDataChange(selectedRecord);\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    }\r\n    getSelectedBarcodeData(e, inputParam) {\r\n        if (e.keyCode === 13) {\r\n            this.setState({ loading: true })\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestorageretrieval/getSelectedBarcodeData\", {\r\n                nprojecttypecode: this.props.breadcrumbprojecttype.value,\r\n                spositionvalue: inputParam.spositionvalue,\r\n                userinfo: this.props.userInfo\r\n            });\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let dynamicfields = [];\r\n\t\t\t\t\t//ALPD-4717--Vignesh R(23-08-2024)\r\n                    let selectedBarcodeValue = [];\r\n                    dynamicfields = [{ \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"spositionvalue\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_POSITION\", \"dataField\": \"sposition\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"nquantity\", \"width\": \"200px\", \"staticField\": true },\r\n                    { \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"width\": \"200px\", \"staticField\": true }];\r\n                    const temparray2 = response[0].data['selectedProjectTypeList'] && response[0].data['selectedProjectTypeList'].map((option) => {\r\n                        return { \"idsName\": option.sfieldname, \"dataField\": option.sfieldname, \"width\": \"200px\" };\r\n                    });\r\n                    dynamicfields = [...dynamicfields, ...temparray2]\r\n\t\t\t\t\t //ALPD-4717--Vignesh R(23-08-2024)\r\n                    selectedBarcodeValue={...response[0].data['selectedBarcodeValue']}\r\n                    if(response[0].data['selectedBarcodeValue'].jsondata!==undefined){\r\n                       selectedBarcodeValue={...selectedBarcodeValue,...JSON.parse(response[0].data['selectedBarcodeValue'].jsondata.value)}\r\n                    }\r\n                    this.setState({\r\n                        dynamicfields,\r\n                        selectedBarcodeValue: { ...selectedBarcodeValue  },\r\n                        loading: false\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    \r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n\t\t\t\t\t\tthis.setState({\r\n                        loading: false\r\n                    });\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            dynamicfields: [],\r\n                            selectedBarcodeValue: {},\r\n\t\t\t\t\t\t\t  loading: false,\r\n                        })\r\n                        toast.info(error.response.data);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let { selectedRecord , dynamicfields\r\n        } = this.state\r\n        let bool = false;\r\n\r\n        if (this.props.dynamicfields !== previousProps.dynamicfields) {\r\n            bool = true;\r\n            dynamicfields = this.props.dynamicfields || {};\r\n        }\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.selectedRecord || {};\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord , dynamicfields\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const retrieve = this.props.controlMap.has(\"Retrieve\") && this.props.controlMap.get(\"Retrieve\").ncontrolcode;\r\n        const dispose = this.props.controlMap.has(\"Dispose\") && this.props.controlMap.get(\"Dispose\").ncontrolcode;\r\n\r\n        return (\r\n            <Col md={12}>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <FormInput\r\n                            name={'spositionvalue'}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SAMPLEID\" })}\r\n                            value={this.state.selectedRecord['spositionvalue']\r\n                                ? this.state.selectedRecord['spositionvalue'] : \"\"}\r\n                            maxLength={20}\r\n                            isMandatory={true}\r\n                            onKeyDown={(event) => this.getSelectedBarcodeData(event, this.state.selectedRecord)}\r\n                            onChange={(event) => this.onInputOnChange(event)}\r\n                        />\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                            onClick={() => this.props.CRUDSampleStorageTransaction({\r\n                                sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\r\n                                saliquotsampleid: this.state.selectedRecord.saliquotsampleid\r\n                                    && this.state.selectedRecord.saliquotsampleid !== \"\"\r\n                                    ? this.state.selectedRecord.saliquotsampleid : \"\",\r\n                                nquantity: this.state.selectedRecord.nquantity\r\n                                    && this.state.selectedRecord.nquantity !== \"\"\r\n                                    ? this.state.selectedRecord.nquantity : 0,\r\n                                ncontrolcode: retrieve,\r\n                                'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                userinfo: this.props.userInfo,\r\n                                scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                    ? this.state.selectedRecord.scomments : \"-\",\r\n                                isRetrieve: true,\r\n                                spositionvalue: this.state.selectedRecord.spositionvalue,\r\n                                nneedaliquot: this.state.selectedRecord.nneedaliquot &&\r\n                                    this.state.selectedRecord.nneedaliquot ? true : false,\r\n                                nunitcode: this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode !== \"\"\r\n                                    ? this.state.selectedRecord.nunitcode : 0\r\n                            }, 'create')}\r\n                            hidden={this.props.userRoleControlRights.indexOf(retrieve) === -1}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrashRestore}></FontAwesomeIcon>{\"  \"}\r\n                            {this.props.intl.formatMessage({ id: \"IDS_RETRIEVE\" })}\r\n\r\n\r\n                        </button>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                            onClick={() => this.props.CRUDSampleStorageTransaction({\r\n                                sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\r\n                                saliquotsampleid: this.state.selectedRecord.saliquotsampleid\r\n                                    && this.state.selectedRecord.saliquotsampleid !== \"\"\r\n                                    ? this.state.selectedRecord.saliquotsampleid : \"\",\r\n                                nquantity: this.state.selectedRecord.nquantity\r\n                                    && this.state.selectedRecord.nquantity !== \"\"\r\n                                    ? this.state.selectedRecord.nquantity : 0,\r\n                                ncontrolcode: dispose,\r\n                                'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                userinfo: this.props.userInfo,\r\n                                scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                    ? this.state.selectedRecord.scomments : \"-\",\r\n                                isRetrieve: false,\r\n                                spositionvalue: this.state.selectedRecord.spositionvalue,\r\n                                nneedaliquot: this.state.selectedRecord.nneedaliquot &&\r\n                                    this.state.selectedRecord.nneedaliquot ? true : false\r\n                            }, 'create')}\r\n                            hidden={this.props.userRoleControlRights.indexOf(dispose) === -1}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>{\"  \"}\r\n                            {this.props.intl.formatMessage({ id: \"IDS_DISPOSE\" })}\r\n\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <FormInput\r\n                            name={'scomments'}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            value={this.state.selectedRecord['scomments']\r\n                                ? this.state.selectedRecord['scomments'] : \"\"}\r\n                            maxLength={255}\r\n                            onChange={(event) => this.onInputOnChange(event)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <CustomSwitch\r\n                            id={\"nneedaliquot\"}\r\n                            name={\"nneedaliquot\"}\r\n                            type={\"switch\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_INPUTFORALIQUOTSAMPLE\" })}\r\n                            className={\"custom-switch-md\"}\r\n                            checked={this.state.selectedRecord && this.state.selectedRecord[\"nneedaliquot\"] ? true : false}\r\n                            onChange={this.onInputOnChange}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                {this.state.selectedRecord[\"nneedaliquot\"] &&\r\n                    <>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    name={'saliquotsampleid'}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_NEWSAMPLEID\" })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_NEWSAMPLEID\" })}\r\n                                    value={this.state.selectedRecord['saliquotsampleid']\r\n                                        ? this.state.selectedRecord['saliquotsampleid'] : \"\"}\r\n                                    maxLength={20}\r\n                                    isMandatory={true}\r\n                                    onChange={(event) => this.onInputOnChange(event)}\r\n                                />\r\n                            </Col>\r\n                            <Col md={6}> <TestPopOver intl={this.props.intl} needIcon={true} needPopoverTitleContent={true}\r\n                                placement=\"right\" stringList={['The Sample will be Restored to the Same Position']}\r\n                            ></TestPopOver></Col>\r\n\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                                    name={\"nquantity\"}\r\n                                    type=\"numeric\"\r\n                                    onChange={(event) => this.onNumericInputChange(event, 'nquantity')}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                                    value={this.state.selectedRecord[\"nquantity\"] ? this.state.selectedRecord[\"nquantity\"] || [] : []}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={\"5\"} \r\n                                />\r\n                            </Col >\r\n                            <Col md={6}>\r\n                                <FormSelectSearch\r\n                                    name={\"nunitcode\"}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.onComboChange(event, 'nunitcode')}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_UNITNAME\" })}\r\n                                    isMandatory={true}\r\n                                    value={this.state.selectedRecord[\"nunitcode\"] ? this.state.selectedRecord[\"nunitcode\"] || [] : []}\r\n                                    options={this.props.unitMapList ? this.props.unitMapList : []}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isDisabled={false}\r\n                                    isSearchable={false}\r\n                                    isClearable={false} />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </>\r\n                }\r\n                <Row>\r\n                    {this.state.dynamicfields && this.state.dynamicfields.length > 0 && \r\n                        <div className=' mb-2'>\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                        <h4>{this.props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                    </span>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        {\r\n                                            this.state.dynamicfields && this.state.dynamicfields.map((item, index) => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <Col md={6} key={`specInfo_${index}`}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel>{\r\n                                                                    item.hasOwnProperty('staticField') ?\r\n                                                                        this.props.intl.formatMessage({ id: item.idsName }) : item.idsName}  </FormLabel>\r\n                                                                <ReadOnlyText>{this.state.selectedBarcodeValue[item.dataField] === \"\" ||\r\n                                                                    this.state.selectedBarcodeValue[item.dataField] === undefined ||\r\n                                                                    this.state.selectedBarcodeValue[item.dataField] === null ?\r\n                                                                    \"-\" : this.state.selectedBarcodeValue[item.dataField]}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>}\r\n                </Row>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default injectIntl(RetrieveOrDiposeSample);"]},"metadata":{},"sourceType":"module"}