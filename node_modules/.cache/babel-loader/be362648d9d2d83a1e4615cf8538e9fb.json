{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\reschedulelog\\\\ReScheduleLog.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\nimport { callService } from '../../../actions';\nimport { convertDateValuetoString, getControlMap, getEndOfDay, getStartOfDay, rearrangeDateFormat, convertDateTimetoString } from '../../../components/CommonScript';\nimport { ListWrapper } from '../../../components/client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ReScheduleLog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      let todate = this.props.Login.masterData.ToDate;\n\n      if (selectedRecord['todate']) {\n        todate = convertDateTimetoString(selectedRecord['todate'], this.props.Login.userInfo);\n      }\n\n      let dateObj = {};\n\n      if (dateName === \"fromdate\") {\n        //dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.toDate, this.props.Login.userInfo, true);\n        dateObj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo, true);\n      } else {\n        //dateObj = convertDateValuetoString(this.props.Login.masterData.toDate, dateValue, this.props.Login.userInfo, true);\n        dateObj = convertDateValuetoString(this.props.Login.masterData.FromDate, dateValue, this.props.Login.userInfo, true);\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: dateObj.fromDate,\n          toDate: dateObj.toDate\n        },\n        classUrl: 'reschedulelog',\n        methodUrl: \"ReScheduleLog\",\n        displayName: \"IDS_TRAININGRESCHEDULELOG\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.reloadData = (selectedRecord, isDateChange) => {\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate\n        },\n        classUrl: 'reschedulelog',\n        methodUrl: \"ReScheduleLog\",\n        displayName: \"IDS_TRAININGRESCHEDULELOG\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showSaveContinue: true\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TRAINERNAME\",\n      \"dataField\": \"strainername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCHEDULEDATETIME\",\n      \"dataField\": \"sscheduledate\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_RESCHEDULEDATETIME\",\n      \"dataField\": \"srescheduledate\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_RESCHEDULECREATEDDATETIME\",\n      \"dataField\": \"screateddate\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_REASON\",\n      \"dataField\": \"scomments\",\n      \"width\": \"250px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    // let fromDate = \"\";\n    // let toDate = \"\";\n    // if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n    //     fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n    //     toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\n    // }\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 37\n      }\n    }))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ntrainingreschedulecode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      scrollable: \"scrollable\",\n      pageable: true,\n      isComponent: true,\n      gridHeight: '600px',\n      isToolBarRequired: true,\n      selectedId: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.TrainingRescheduleLog,\n          dataResult: process(this.props.Login.masterData.TrainingRescheduleLog || [], this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.masterData.TrainingRescheduleLog) {\n          this.setState({\n            data: this.props.Login.masterData.TrainingRescheduleLog,\n            dataState: {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            },\n            dataResult: process(this.props.Login.masterData.TrainingRescheduleLog || [], {\n              skip: 0,\n              take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n            })\n          });\n        }\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(ReScheduleLog));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/competencemanagement/reschedulelog/ReScheduleLog.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","DateTimePicker","callService","convertDateValuetoString","getControlMap","getEndOfDay","getStartOfDay","rearrangeDateFormat","convertDateTimetoString","ListWrapper","mapStateToProps","state","Login","ReScheduleLog","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","handleDateChange","dateName","dateValue","selectedRecord","Date","todate","masterData","ToDate","userInfo","dateObj","FromDate","inputParam","inputData","fromDate","toDate","classUrl","methodUrl","displayName","reloadData","isDateChange","obj","searchRef","createRef","skip","take","settings","parseInt","masterStatus","error","userRoleControlRights","controlMap","Map","showSaveContinue","extractedColumnList","getDerivedStateFromProps","warn","render","intl","formatMessage","id","ssitedate","date","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push","ncontrolcode","TrainingRescheduleLog"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\r\nimport {callService} from '../../../actions';\r\nimport { convertDateValuetoString, getControlMap, getEndOfDay, getStartOfDay, rearrangeDateFormat,convertDateTimetoString } from '../../../components/CommonScript';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ReScheduleLog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showSaveContinue: true\r\n        };\r\n\r\n        this.extractedColumnList = [\r\n               { \"idsName\": \"IDS_TRAINERNAME\", \"dataField\": \"strainername\", \"width\": \"200px\" },\r\n               { \"idsName\": \"IDS_SCHEDULEDATETIME\", \"dataField\": \"sscheduledate\", \"width\": \"300px\" },\r\n               { \"idsName\": \"IDS_RESCHEDULEDATETIME\", \"dataField\": \"srescheduledate\", \"width\": \"250px\" },\r\n               { \"idsName\": \"IDS_RESCHEDULECREATEDDATETIME\", \"dataField\": \"screateddate\", \"width\": \"250px\" },\r\n               { \"idsName\": \"IDS_REASON\", \"dataField\": \"scomments\", \"width\": \"250px\" }\r\n\r\n        ];\r\n       \r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // let fromDate = \"\";\r\n        // let toDate = \"\";\r\n\r\n        // if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n        //     fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        //     toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\r\n        // }\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"ntrainingreschedulecode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    isComponent={true}\r\n                                    gridHeight={'600px'}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={0}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData.TrainingRescheduleLog,\r\n                    dataResult: process(this.props.Login.masterData.TrainingRescheduleLog || [], this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                if (this.props.Login.masterData.TrainingRescheduleLog) {\r\n                    this.setState({\r\n                        data: this.props.Login.masterData.TrainingRescheduleLog,\r\n                        dataState : {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5},\r\n                        dataResult: process(this.props.Login.masterData.TrainingRescheduleLog || [], {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n      let todate=this.props.Login.masterData.ToDate\r\n      if(selectedRecord['todate']){\r\n      todate=convertDateTimetoString( selectedRecord['todate'],  this.props.Login.userInfo)}\r\n       let dateObj = {};\r\n       if (dateName === \"fromdate\") {\r\n            //dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.toDate, this.props.Login.userInfo, true);\r\n            dateObj = convertDateValuetoString(dateValue,todate, this.props.Login.userInfo, true);\r\n\r\n        }\r\n       else{\r\n            //dateObj = convertDateValuetoString(this.props.Login.masterData.toDate, dateValue, this.props.Login.userInfo, true);\r\n            dateObj = convertDateValuetoString(this.props.Login.masterData.FromDate, dateValue, this.props.Login.userInfo, true);\r\n\r\n        }\r\n\r\n       const inputParam = {\r\n                                inputData: {\r\n                                    \"userinfo\": this.props.Login.userInfo,\r\n                                    fromDate:dateObj.fromDate, \r\n                                    toDate:dateObj.toDate,\r\n                                },\r\n                                classUrl: 'reschedulelog',\r\n                                methodUrl: \"ReScheduleLog\",\r\n                                displayName: \"IDS_TRAININGRESCHEDULELOG\",\r\n                                userInfo: this.props.Login.userInfo\r\n                            };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    reloadData = (selectedRecord, isDateChange) => {\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;       \r\n        let obj = convertDateValuetoString(fromDate,toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate:obj.fromDate, \r\n                toDate:obj.toDate,\r\n            },\r\n            classUrl: 'reschedulelog',\r\n            methodUrl: \"ReScheduleLog\",\r\n            displayName: \"IDS_TRAININGRESCHEDULELOG\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {callService})(injectIntl(ReScheduleLog));"]},"metadata":{},"sourceType":"module"}