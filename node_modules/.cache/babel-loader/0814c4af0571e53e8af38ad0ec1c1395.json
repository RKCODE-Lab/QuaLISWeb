{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\AddTraineeDocFile.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport DropZone from '../../../components/dropzone/dropzone.component';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport { attachmentType } from '../../../components/Enumeration';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\n\nconst AddTraineeDocFile = props => {\n  const {\n    nattachmenttypecode,\n    disabled\n  } = props.selectedRecord;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"nattachmenttypecode\",\n    type: \"radio\",\n    id: \"AddFiles\",\n    label: props.intl.formatMessage({\n      id: \"IDS_FTP\"\n    }),\n    inline: true,\n    onChange: event => props.onInputOnChange(event, attachmentType.FTP),\n    checked: nattachmenttypecode === attachmentType.FTP ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    name: \"nattachmenttypecode\",\n    type: \"radio\",\n    id: \"AddLink\",\n    label: props.intl.formatMessage({\n      id: \"IDS_LINK\"\n    }),\n    inline: true,\n    onChange: event => props.onInputOnChange(event, attachmentType.LINK),\n    checked: nattachmenttypecode === attachmentType.LINK ? true : false,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  })), props.selectedRecord && nattachmenttypecode === attachmentType.FTP && /*#__PURE__*/React.createElement(DropZone, {\n    name: \"sfilename\",\n    label: props.label,\n    isMandatory: true,\n    maxFiles: props.maxFiles,\n    minSize: 0,\n    maxSize: props.maxSize,\n    onDrop: event => props.onDrop(event, \"sfilename\", props.maxFiles),\n    actionType: props.actionType,\n    deleteAttachment: props.deleteAttachment,\n    multiple: props.multiple,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    fileSizeName: \"nfilesize\",\n    fileName: \"sfilename\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), props.selectedRecord && nattachmenttypecode === attachmentType.LINK && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"slinkfilename\",\n    label: props.intl.formatMessage({\n      id: \"IDS_FILENAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_FILENAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"slinkfilename\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_LINKNAME\"\n    }),\n    isSearchable: true,\n    name: \"nlinkcode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    showOption: true,\n    options: props.linkMaster || [],\n    optionId: \"nlinkcode\",\n    optionValue: \"slinkname\",\n    value: props.selectedRecord[\"nlinkcode\"],\n    onChange: value => props.onComboChange(value, \"nlinkcode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"sfiledesc\",\n    type: \"text\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sfiledesc\"],\n    isMandatory: false,\n    required: true,\n    maxLength: 50,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AddTraineeDocFile);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/trainingupdate/AddTraineeDocFile.jsx"],"names":["React","injectIntl","DropZone","Row","Col","Form","FormTextarea","attachmentType","FormInput","FormSelectSearch","AddTraineeDocFile","props","nattachmenttypecode","disabled","selectedRecord","intl","formatMessage","id","event","onInputOnChange","FTP","LINK","label","maxFiles","maxSize","onDrop","actionType","deleteAttachment","multiple","linkMaster","value","onComboChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport { attachmentType } from '../../../components/Enumeration';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\n\r\n\r\nconst AddTraineeDocFile = props => {\r\n    const { nattachmenttypecode, disabled } = props.selectedRecord;\r\n\r\n    return (\r\n        <Row>\r\n            <Col md=\"12\">\r\n            <Form.Group>\r\n                    <Form.Check\r\n                        name=\"nattachmenttypecode\"\r\n                        type=\"radio\"\r\n                        id=\"AddFiles\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_FTP\" })}\r\n                        inline={true}\r\n                        onChange={(event) => props.onInputOnChange(event, attachmentType.FTP)}\r\n                        checked={nattachmenttypecode === attachmentType.FTP ? true : false}\r\n                        disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n                    <Form.Check\r\n                        name=\"nattachmenttypecode\"\r\n                        type=\"radio\"\r\n                        id=\"AddLink\"\r\n                        label={props.intl.formatMessage({ id: \"IDS_LINK\" })}\r\n                        inline={true}\r\n                        onChange={(event) => props.onInputOnChange(event, attachmentType.LINK)}\r\n                        checked={nattachmenttypecode === attachmentType.LINK ? true : false}\r\n                        disabled={disabled}\r\n                    >\r\n                    </Form.Check>\r\n                </Form.Group>\r\n                {props.selectedRecord && nattachmenttypecode === attachmentType.FTP &&\r\n                    <DropZone\r\n                        name={\"sfilename\"}\r\n                        label={props.label}\r\n                        isMandatory={true}\r\n                        maxFiles={props.maxFiles}\r\n                        minSize={0}\r\n                        maxSize={props.maxSize}\r\n                        onDrop={(event) => props.onDrop(event, \"sfilename\", props.maxFiles)}\r\n                        actionType={props.actionType}\r\n                        deleteAttachment={props.deleteAttachment}\r\n                        multiple={props.multiple}\r\n                        editFiles={props.selectedRecord ? props.selectedRecord : {}}\r\n                        fileSizeName=\"nfilesize\"\r\n                        fileName=\"sfilename\"\r\n                    />}\r\n\r\n{props.selectedRecord && nattachmenttypecode === attachmentType.LINK &&\r\n                    <>\r\n                        <FormInput\r\n                            name={\"slinkfilename\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"slinkfilename\"] : \"\"}\r\n                            isMandatory=\"*\"\r\n                            required={true}\r\n                            maxLength={100}\r\n                        />\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_LINKNAME\" })}\r\n                            isSearchable={true}\r\n                            name={\"nlinkcode\"}\r\n                            isDisabled={false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            showOption={true}\r\n                            options={props.linkMaster || []}\r\n                            optionId='nlinkcode'\r\n                            optionValue='slinkname'\r\n                            value={props.selectedRecord[\"nlinkcode\"]}\r\n                            onChange={value => props.onComboChange(value, \"nlinkcode\", 1)}\r\n                            alphabeticalSort={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    </>}\r\n            \r\n                <FormTextarea\r\n                    name={\"sfiledesc\"}\r\n                    type=\"text\"\r\n                    label={ props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}                  \r\n                    placeholder={ props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                    value ={ props.selectedRecord[\"sfiledesc\"]}\r\n                    isMandatory={false}\r\n                    required={true}\r\n                    maxLength={50}\r\n                    onChange={(event)=> props.onInputOnChange(event)}\r\n                >\r\n                </FormTextarea>\r\n                \r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTraineeDocFile);"]},"metadata":{},"sourceType":"module"}