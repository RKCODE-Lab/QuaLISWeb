{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\nimport { ageCalculate, ageCalculateOnlyForYear, childComboClear, comboChild, convertDateTimetoString, extractFieldHeader, filterRecordBasedOnTwoArrays, formatDate, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, removeSpaceFromFirst, showEsign, sortByField, validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify, checkFilterIsEmptyQueryBuilder, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, callService, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler, testPackageTest, rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration, insertRegSample, testSectionTest } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport Esign from '../audittrail/Esign';\nimport { ThemeConsumer } from 'styled-components';\nimport PatientMaster from '../contactmaster/PatientMaster';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList'; //import SplitterLayout from 'react-splitter-layout';\n\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\nimport AddImportFileData from './AddImportFileData';\nimport AddImportSampleCountData from './AddImportSampleCountData';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { checkBoxOperation } from '../../components/Enumeration';\nimport rsapi from '../../rsapi.js';\nimport Axios from 'axios';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      selectedTestPackageData: {},\n      selectPackage: {},\n      selectSection: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      specBasedTestPackage: false,\n      selectedMaster: [],\n      exportFiled: []\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const filterQueryTreeStr = QbUtils.getTree(immutableTree);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery,\n          filterQueryTreeStr\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const filterquery = this.props.Login.filterquery;\n      const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\n      let isFilterEmpty = checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date') && isFilterEmpty) {\n        const val = removeSpaceFromFirst(filterquery, '');\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: val\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEVALUESFORINPUTS\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component[\"childFields\"]) {\n        const index = this.props.Login.masterIndex;\n        let selectedRecord = this.state.selectedMaster || {};\n        component[\"childFields\"].map(item => {\n          let data = item1[item.columnname];\n\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            //combocontrol\n            data = {\n              label: item1[item.sdisplaymember],\n              value: item1[item.svaluemember]\n            };\n          } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            //Date picker control\n            data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\n          }\n\n          selectedRecord[index][item.columnname] = data;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: selectedRecord,\n            loadCustomSearchFilter: false,\n            screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const newdata = {\n          label: item1[component['displaymember']],\n          value: item1[component['valuemember']],\n          item: {\n            jsondata: { ...item1,\n              jsondata: { ...item1\n              }\n            }\n          }\n        };\n        this.onComboChange(newdata, component, component['label']);\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord; // console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.addMaster) {\n        const masterIndex = this.props.Login.masterIndex;\n        mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true);\n        selectedRecord = this.state.selectedMaster[masterIndex];\n      } else if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              // console.log(\"component1:\", component);\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                //  console.log(\"componentrow:\", componentrow);\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      //componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadImportFileData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"files\"\n        }];\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) === -1) {\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                }\n\n                return null;\n              }) : this.props.sampleexportfields.findIndex(x => x === component.label) === -1 ? component.mandatory === true ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      } else if (this.props.Login.loadImportSampleCountData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SAMPLECOUNT\",\n          \"dataField\": \"nsamplecount\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          //\"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          // \"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } //  console.log(\"mandate fields:\", mandatoryFields);\n\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.addMaster) {\n            this.onSaveMasterRecord(saveType, this.formRef);\n          } else if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            let selectedSpecCheck = { ...this.state.selectedSpec\n            };\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_COMPONENT\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            let inputvalues = {};\n\n            if (this.state.selectedRecord[\"nallottedspeccode\"] !== selectedSpecCheck.nallottedspeccode) {\n              inputvalues = {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            } else {\n              inputvalues = {\n                loadSpec: false,\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: { // selectedTestData: [],\n                // selectComponent: [],\n                // selectedComponent: {},\n                // loadSpec: false,\n                // SelectedTest: [],\n                // Test: [],\n                // Component: [],\n                // subSampleDataGridList: [],\n                // selectedSpec: { ...selectedSpec },\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\n                //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                // specBasedComponent\n                ...inputvalues\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else if (this.props.Login.loadImportFileData) {\n            this.onSaveClickImport('1', this.formRef);\n          } else if (this.props.Login.loadImportSampleCountData) {\n            this.onSaveClickImport('2', this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.MandatoryCheckSubSample = () => {\n      let mandatoryFields = [];\n      let exportFields = [];\n      let comboComponent = [];\n      let exportFieldProperties = [];\n      let subSampleFields = [];\n\n      if (this.state.specBasedComponent) {\n        exportFieldProperties = [{\n          \"nquerybuildertablecode\": 32,\n          \"valumeber\": \"ncomponentcode\",\n          \"inputtype\": \"combo\",\n          \"displaymember\": \"scomponentname\",\n          \"label\": \"ncomponentcode\",\n          \"source\": \"component\"\n        }];\n        mandatoryFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\",\n          \"mandatory\": true\n        }]; // mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\n\n        exportFields = [\"ncomponentcode\"];\n        subSampleFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode_child\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                subSampleFields.push({\n                  \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": componentrow.label,\n                  \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                  \"label\": componentrow.label\n                });\n\n                if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push(componentrow.label);\n                  exportFieldProperties.push(componentrow);\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              subSampleFields.push({\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                \"label\": component.label\n              });\n\n              if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push(component.label);\n                exportFieldProperties.push(component);\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        subSampleFields,\n        comboComponent,\n        exportFieldProperties\n      };\n    };\n\n    this.MandatoryCheck = () => {\n      const mandatoryFields = [];\n      const exportFields = [];\n      const exportFieldProperties = [];\n      const comboComponent = [];\n      this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push(componentrow.label);\n                  exportFieldProperties.push(componentrow);\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push(component.label);\n                exportFieldProperties.push(component);\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        comboComponent,\n        exportFieldProperties\n      };\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {}; //console.log(\"Control:\", control);\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        let project = false;\n        let nprojectmastercode = -1;\n        let childSpec = false;\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n\n        if (nsampletypecode === SampleType.CLINICALTYPE) {\n          if (control.table.item.nquerybuildertablecode === 228 && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\n            selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid'];\n          }\n        }\n\n        if (control.name === \"manualorderid\") {\n          selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid'];\n        }\n\n        const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired) : transactionStatus.NO;\n        const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired) : transactionStatus.NO;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009       \n            if (ncategorybasedflow !== transactionStatus.YES) {\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow !== transactionStatus.YES) {\n              product = true;\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n            }\n          }\n        } else if (control.name === 'Instrument Name') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009\n            if (ncategorybasedflow === transactionStatus.YES) {\n              //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            } else {\n              const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow === transactionStatus.YES) {\n              productCategory = true;\n            } else {\n              inputParem[\"ProductName\"] = Product[0].label;\n              product = true;\n            }\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        } else if (control.name === 'Project Code') {\n          //project = true;\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            // nproductcode = selectedRecord[Product[0].label] &&\n            //     selectedRecord[Product[0].label].value;\n            nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n          }\n\n          nprojectmastercode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            project = true;\n          } // else{\n          //     if (ncategorybasedflow === 3) {\n          //         productCategory = true;\n          //     }\n          //     else{\n          //         product =true;\n          //     }\n          // }\n\n        }\n\n        if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n          product = false;\n          productCategory = false;\n          materialType = false;\n          instrument = false;\n          instrumentCategory = false;\n          material = false;\n          materialCategory = false;\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // let childTemplateMandatory = {}\n          // if (!(product ||\n          //     productCategory ||\n          //     materialType ||\n          //     instrument ||\n          //     instrumentCategory ||\n          //     material ||\n          //     materialCategory ||\n          //     project)) {\n          //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\n          //     if (TemplateMandatory && TemplateMandatory.length > 0) {\n          //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\n          //         const Product = childComboList.filter(x => x.name === \"Product\");\n          //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\n          //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\n          //         const Material = childComboList.filter(x => x.name === \"Material\");\n          //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\n          //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\n          //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\n          //         childTemplateMandatory = {\n          //             ProductCategory, Product\n          //             , InstrumentCategory\n          //             , MaterialCategory, Material\n          //             , MaterialType, MaterialType\n          //             , ProjectCode, Instrument\n          //         }\n          //         if (ProductCategory || Product\n          //             || InstrumentCategory\n          //             || MaterialCategory || Material\n          //             || MaterialType || MaterialType\n          //             || ProjectCode || Instrument) {\n          //             childSpec = true;\n          //         }\n          //     }\n          //     else {\n          //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\n          //         if (TemplateChild&& TemplateChild.length> 0) {\n          //             TemplateChild.map(x=>{\n          //                 x.child&&x.child.map(y=>{\n          //                 const data=this.props.comboComponents(x=>x.label===y.label)  \n          //                 if(data&&data[0].templatemandatory){\n          //                     const name=data[0].name\n          //                     if(name===\"Product Category\"||name===\"Instrument Category\"\n          //                     ||name===\"Product\"||name===\"Material Category\"\n          //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\n          //                         childSpec = true;\n          //                         childTemplateMandatory={childSpec:true}\n          //                     }\n          //                 }\n          //                 })\n          //             })\n          //         }\n          //     }\n          // }\n\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode,\n            nprojectmastercode,\n            nprojectSpecReqd,\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired // ...childTemplateMandatory\n\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType, undefined, project, this.props.comboComponents);\n        } else {\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType || project) {\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode,\n              nprojectmastercode,\n              nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, undefined, undefined, project);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord,\n                loadCustomSearchFilter: false\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, control, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } //ALPD-3596 Start\n\n\n        if (event.target.name === \"importTest\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n\n          if (event.target.checked === false) {\n            let needTest = event.target.checked;\n            this.testForImport(needTest);\n          }\n        } //ALPD-3596 End\n        else {\n          const value = selectedRecord[event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            if (value.includes(radiotext)) {\n              const index = value.indexOf(radiotext);\n\n              if (index !== -1) {\n                if (index === 0) {\n                  const indexcomma = value.indexOf(\",\");\n\n                  if (indexcomma !== -1) {\n                    selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                  } else {\n                    selectedRecord[event.target.name] = \"\";\n                  }\n                } else {\n                  if (value.slice(index).indexOf(\",\") !== -1) {\n                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                  } else {\n                    selectedRecord[event.target.name] = value.slice(0, index - 1);\n                  }\n                }\n              }\n            } else {\n              selectedRecord[event.target.name] = value + ',' + radiotext;\n            }\n          } else {\n            selectedRecord[event.target.name] = radiotext;\n          }\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // if (control.isnumeric === true\n        //      && control.label===radiotext) {\n        //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        // } else {\n        //     selectedRecord[event.target.name] = event.target.value;\n        // }\n        //  selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, control, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // if (control.isnumeric === true\n        //     && control.label===radiotext) { \n        //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        //     } else {\n        //         selectComponent[event.target.name] = event.target.value;\n        //     }\n        // selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: \"IDS_SUBSAMPLE\"\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n        const age = ageCalculate(dateValue);\n        selectedRecord[ageComp[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATION\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.testForImport = needTest => {\n      const selectedSpecification = {\n        nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        slno: 1\n      };\n      this.getTestForImport(selectedSpecification, this.props.Login, this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedRecord, needTest, this.state.specBasedComponent);\n    };\n\n    this.getTestForImport = (objComponent, LoginProps, nneedsubsample, selectedRecord, needTest, specBasedComponent) => {\n      if (!this.state.specBasedComponent) {\n        const urlArray = [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nspecsampletypecode: objComponent.nspecsampletypecode,\n          slno: objComponent.slno,\n          nneedsubsample: nneedsubsample,\n          nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = TestGet;\n        Axios.all(urlArray).then(response => {\n          let TestData = response[0].data;\n          let Test = LoginProps.Test || [];\n          let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n          let TestCombinedForImport = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n          selectedRecord['importTest'] = needTest ? transactionStatus.YES : transactionStatus.NO;\n          this.setState({\n            TestCombinedForImport,\n            // AllTest: TestData,\n            // screenName: intl.formatMessage({ id: \"IDS_IMPORT\" }),\n            selectedTestData: [],\n            selectedRecord: selectedRecord,\n            // loadImportFileData: true,\n            loading: false\n          });\n        }).catch(error => {\n          toast.error(error.message);\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    this.AddImportFile = selectedRecord => {\n      if (this.state.selectedSpec.nallottedspeccode) {\n        //ALPD-3596 \n        selectedRecord['importTest'] = transactionStatus.YES;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadImportFileData: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_IMPORT\"\n            }),\n            selectedRecord: selectedRecord //ALPD-3596\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.AddSampleCount = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLECOUNT\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let isValid = true;\n        const selectedSpecification = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        let selectedRecord = selectedComponent; //  if(componentBasedSpec){\n\n        if (nneedsubsample) {\n          if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n            delete selectedComponent[\"selected\"];\n          } else {\n            isValid = false;\n          }\n        } else {\n          selectedRecord = selectedSpecification;\n        } // }\n        // else{\n        //     selectedRecord = selectedSpecification;          \n        // }\n\n\n        if (isValid) {\n          this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        } // } \n        // else {\n        //     const selectedComponent1 = {\n        //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        //         slno: 1\n        //     }\n        //     this.props.getTest(selectedComponent1,\n        //         this.props.Login,\n        //         nneedsubsample, specBasedComponent);\n        // }\n\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportFileData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData: {},\n          //ALPD-3596 \n          loadImportFileData: false,\n          TestCombinedForImport: [],\n          //ALPD-3596 \n          selectedRecord: { ...{ ...this.state.selectedRecord,\n              sfilename: undefined\n            },\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportSampleCountData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeAddMaster = e => {\n      let masterIndex = this.props.Login.masterIndex;\n      let updateInfo = {};\n\n      if (masterIndex !== 0) {\n        const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n        const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex);\n        const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex);\n        const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n        const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex);\n        const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex);\n        const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n        const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n        const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n        const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex);\n        const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex);\n        const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex);\n        masterIndex = masterIndex - 1;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster,\n            selectedControl,\n            masterextractedColumnList,\n            masterfieldList,\n            masterdataList,\n            mastercomboComponents,\n            masterwithoutCombocomponent,\n            masterComboColumnFiled,\n            masterDesign,\n            masterIndex,\n            screenName,\n            masterOperation,\n            masterEditObject\n          }\n        };\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: [],\n            selectedControl: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            addMaster: false,\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterEditObject: [],\n            masterOperation: [],\n            masterIndex: undefined,\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeDynamicView = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isDynamicViewSlideOut: false,\n          selectedDynamicViewControl: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\",\n          TestPackage: [],\n          //Test:[]\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode; // selectComponent[\"nneedsubsample\"] = nneedsubsample;\n\n          selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\n      const selectPackage = this.state.selectPackage || {};\n      const selectedTestData = this.state.selectedTestData || {};\n      const selectSection = this.state.selectSection;\n\n      if (comboData !== null) {\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action);\n      } else {\n        let availableTest = [];\n        let availableTestSection = [];\n\n        if (selectPackage[\"ntestpackagecode\"]) {\n          //ALPD-3404\n          delete selectPackage[\"ntestpackagecode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          delete selectSection[\"nsectioncode\"];\n          let Test = action !== \"AddSubSample\" ? this.props.Login.Test || [] : [];\n          let testData = this.props.Login.AllTest || [];\n          let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n          availableTestSection = this.props.Login.AllSection || [];\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n          availableTestSection = this.props.Login.AllSection || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectPackage,\n            selectSection,\n            TestCombined: availableTest,\n            TestSection: availableTestSection\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onTestSectionChange = (comboData, fieldName, nneedsubsample, action) => {\n      const selectPackage = this.state.selectPackage;\n      const selectSection = this.state.selectSection || {};\n      const selectedTestData = this.state.selectedTestData || {};\n\n      if (comboData !== null) {\n        selectSection[fieldName] = comboData;\n        selectSection[\"ssectionname\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testSectionTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action);\n      } else {\n        let availableTest = [];\n\n        if (selectSection[\"nsectioncode\"]) {\n          delete selectSection[\"nsectioncode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          let Test = action !== \"AddSubSample\" ? this.props.Login.Test || [] : [];\n          let testData = this.props.Login.AllTest || [];\n          let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || [] : filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectSection,\n            TestCombined: availableTest,\n            TestSection: this.props.Login.TestSection || []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        //  let slno = Component[index].slno\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]; // const preList = comp1.splice(0, index);\n        // const afterList = comp1.splice(index, comp1.length);\n        // preList.map(x => {\n        //     Test[incslno] = Test && Test[x.slno]\n        //     x.slno = incslno;\n        //     incslno = incslno - 1;\n        //     return null;\n        // })\n\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        } //const Component1 = [...preList, ...afterList];\n        // Component1.map(x => {\n        //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\n        // })\n        //sortByField(subSampleDataGridList, 'desc', 'slno')\n\n\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent && selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = (specBasedComponent, specBasedTestPackage) => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistration(true);\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onSaveClickImport = (saveType, formRef) => {\n      let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      let isFileupload = false;\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let Map = {};\n\n        if (nneedsubsample === false || !this.state.specBasedComponent) {\n          Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode;\n        }\n\n        Map[\"specBasedComponnet\"] = this.state.specBasedComponent;\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        const fields = this.MandatoryCheck();\n        Map[\"MandatoryList\"] = fields.mandatoryFields;\n        Map[\"exportFieldProperties\"] = fields.exportFieldProperties; //  Map[\"ExportList\"] = fields.exportFields\n\n        Map[\"exportFields\"] = [...fields.exportFields];\n        Map[\"comboComponent\"] = fields.comboComponent;\n        Map[\"SampleFieldsString\"] = [...fields.exportFields]; //ALPD-3596 \n\n        Map[\"TestGroupTestCode\"] = this.state.selectedTestData && Object.keys(this.state.selectedTestData).length !== 0 ? this.state.selectedTestData.ntestgrouptestcode.map(value => value.item.ntestgrouptestcode).join(\",\") : \"\";\n        Map[\"importTest\"] = this.state.selectedRecord && this.state.selectedRecord.importTest;\n\n        if (nneedsubsample) {\n          const subSample = this.MandatoryCheckSubSample();\n          Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent];\n          Map[\"MandatoryList\"] = [...fields.mandatoryFields, ...subSample.mandatoryFields];\n          Map[\"SubSampleFields\"] = subSample.subSampleFields;\n          Map[\"exportFields\"] = [...fields.exportFields, ...subSample.exportFields];\n          Map[\"exportFieldProperties\"] = [...fields.exportFieldProperties, ...subSample.exportFieldProperties]; //  Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\n        } // Map[\"SampleFields\"] = this.SampleFields();\n\n\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          }\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        const formData = new FormData();\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0]);\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        };\n        this.props.insertRegSample(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleExportClick = () => {\n      if (this.state.selectedSpec.nallottedspeccode) {\n        const exportFiled = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        const subSampleLayout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (this.state.specBasedComponent) {\n          exportFiled.push({\n            \"displayname\": \"IDS_COMPONENT\",\n            \"idsField\": true,\n            \"label\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"combo\"\n          });\n        }\n\n        const mandatoryCheck = [];\n\n        if (subSampleLayout !== undefined) {\n          subSampleLayout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  } else if (componentrow.mandatory) {\n                    mandatoryCheck.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : component.mandatory ? mandatoryCheck.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        if (exportFiled.length > 0) {\n          if (this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true) {\n            if (mandatoryCheck.length === 0) {\n              this.setState({\n                exportFiled,\n                export: true\n              });\n            } else {\n              toast.info(this.props.intl.formatMessage({\n                id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\"\n              }));\n            }\n          } else {\n            this.setState({\n              exportFiled,\n              export: true\n            });\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_EXPORTFIELDSNOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        // selectedMaster[masterIndex][event.target.name] = event.target.value;\n        if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ? event.target.value : selectedMaster[masterIndex][event.target.name];\n          } else {\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let isEmailCheck = true;\n      let isFileupload = false;\n      const formData = new FormData();\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        isFileupload = true;\n        inputData[\"isFileupload\"] = false;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify({ ...inputData\n        })));\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 43) {\n        //added by vignesh for ALPD-3010\n        this.state.selectedRecord = { ...this.state.selectedRecord,\n          \"spatientid\": this.state.selectedMaster[masterIndex][\"spatientid\"]\n        };\n        inputData[\"noneedfilter\"] = 2; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"selectbox\") {\n              fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              fieldName = item.tableDataField;\n            }\n\n            inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n            return inputData[methodUrl];\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n\n              if (fieldName === 'ssubmittername') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  ssubmitterfirstname: this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\n                  ssubmitterlastname: this.state.selectedMaster[masterIndex][fieldName].item.slastname,\n                  ssubmitteremail: this.state.selectedMaster[masterIndex][fieldName].item.semail,\n                  sshortname: this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\n                  ssubmittercode: this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\n                  ssubmitterid: this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\n                  stelephone: this.state.selectedMaster[masterIndex][fieldName].item.stelephone\n                };\n              }\n\n              if (fieldName === 'sinstitutionsitename') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionsitename: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename\n                };\n              }\n\n              if (fieldName === 'sinstitutionname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\n                  sinstitutioncode: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode\n                };\n              }\n\n              if (fieldName === 'sinstitutioncatname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutioncatname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname\n                };\n              }\n\n              if (fieldName === 'sdistrictname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutiondistrictname: this.state.selectedMaster[masterIndex][fieldName].label\n                };\n              }\n\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n        inputData[methodUrl][\"nproductcode\"] = -1; //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\n        //inputData[methodUrl][\"sexternalorderid\"] = 1;\n\n        inputData[methodUrl][\"nordertypecode\"] = 1;\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent : this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents : this.props.Login.comboComponents,\n        selectedRecord: this.props.Login.loadSubSample ? this.state.selectComponent : this.state.selectedRecord,\n        selectedRecordName: this.props.Login.loadSubSample ? 'selectComponent' : 'selectedRecord',\n        loadSubSample: this.props.Login.loadSubSample,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.loadSubSample ? this.props.Login.SubSamplecomboData : this.props.Login.comboData,\n        comboName: this.props.Login.loadSubSample ? 'SubSamplecomboData' : 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        saveType,\n        formRef,\n        screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\n        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation,\n        formData: formData,\n        isFileupload\n      };\n\n      if (isEmailCheck) {\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + this.props.intl.formatMessage({\n          id: \"IDS_\" + selectedControl.label.toUpperCase()\n        }));\n      }\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterOperation,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, control, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectComponent,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachmentSubSample = (event, file, fieldName) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file);\n      this.setState({\n        selectComponent,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENT\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false; // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\n      //     this.props.Login.userRoleControlRights !== undefined ? true : false\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      this.subSampleDataGridList = [];\n      this.subSampleDataDetailGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                } else {\n                  this.subSampleDataDetailGridList.push({\n                    \"mandatory\": false,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"50px\",\n                    columnSize: \"2\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) {\n                this.subSampleDataGridList.push({\n                  \"mandatory\": true,\n                  // \"idsName\": component.label,\n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  width: \"150px\"\n                });\n              } else {\n                this.subSampleDataDetailGridList.push({\n                  \"mandatory\": false,\n                  //\"idsName\": componentrow.label, \n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  width: \"50px\",\n                  columnSize: \"2\"\n                });\n              }\n\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent,\n        specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\n      this.setState({\n        selectedTestPackageData: this.props.Login.selectedTestPackageData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\n      this.setState({\n        selectPackage: this.props.Login.selectPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectSection !== this.PrevoiusLoginData.Login.selectSection) {\n      this.setState({\n        selectSection: this.props.Login.selectSection\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\n      this.setState({\n        specBasedTestPackage: this.props.Login.specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.info(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || []; // START ALPD-3673 VISHAKH\n\n      let dateList = subSampleDetail.dateList;\n      let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'],\n        ...saveComponent\n      };\n\n      if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\n        dateList.map(dateLst => {\n          if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\n            subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\n          }\n        });\n      }\n\n      subSampleDataGridList.push(subSampleCurrentDataGridList); // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\n      // END ALPD-3673 VISHAKH\n      // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\",\n          selectedComponentWithFile: objcomponent\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || []; // START ALPD-3673 VISHAKH\n\n      let dateList = subSampleDetail.dateList;\n      let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'],\n        ...saveComponent\n      };\n\n      if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\n        dateList.map(dateLst => {\n          if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\n            subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\n          }\n        });\n      }\n\n      subSampleDataGridList.push(subSampleCurrentDataGridList); // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\n      // END ALPD-3673 VISHAKH\n\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        TestCombined: this.props.Login.TestCombined,\n        //selectComponent:C.saveContinueData,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList,\n        //selectedTestData: {}\n        specBasedTestPackage: this.state.specBasedTestPackage,\n        saveContinueData: this.props.Login.saveContinueData,\n        selectedComponentWithFile: objcomponent\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let isFileupload = false;\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      //ntype:2,\n      ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      // checkBoxOperation: 3,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; //inputData[\"checkBoxOperation\"] = 3;\n\n    inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\n    let tempData = {};\n    const formData = new FormData();\n    this.props.Login.withoutCombocomponent.map(item => {\n      if (item.inputtype === \"files\") {\n        if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\n          this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n            const fileName = create_UUID();\n            const splittedFileName = item1.name.split('.');\n            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = fileName + '.' + fileExtension;\n            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n            tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n            formData.append(\"uploadedFile\" + index, item1);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\n            formData.append(\"isFileEdited\", transactionStatus.YES);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            inputData['isFileupload'] = true;\n            inputData[\"registration\"]['jsondata'] = { ...inputData[\"registration\"]['jsondata'],\n              ...tempData\n            };\n            inputData[\"registration\"]['jsonuidata'] = { ...inputData[\"registration\"]['jsonuidata'],\n              ...tempData\n            };\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\n            isFileupload = true;\n          });\n        }\n      }\n    }); // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      isFileupload,\n      formData: formData // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertMultipleRegistration(saveType) {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24]; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        }); // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n        formData.append(\"filecount\", count);\n        let dateList = [];\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === 'date') {//dateList.push(item.label)\n          }\n        });\n\n        if (saveType === '1') {\n          this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\n            isFileupload = true;\n            Map[\"isFile\"] = true;\n            formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false));\n            formData.append(\"readFile\", item);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          });\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        } else {\n          isFileupload = true;\n          Map[\"isFile\"] = false;\n          Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n          formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        }\n\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nportalrequired\"] = this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; //  Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n        Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\n        Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n          Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label;\n          Map[\"extrenalOrderTypeCode\"] = Map[\"Registration\"]['jsonuidata'].nexternalordertypecode;\n          Map[\"RegistrationSample\"].map((x, i) => {\n            Map[\"RegistrationSample\"][i]['jsondata'] = { ...x['jsondata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n            Map[\"RegistrationSample\"][i]['jsonuidata'] = { ...x['jsonuidata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n          });\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        });\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"filecount\", count);\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4754,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4772,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4773,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4776,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4778,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4780,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4784,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4789,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4795,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView : this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.Login.loadImportFileData ? this.closeImportFileData : this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4800,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4809,\n        columnNumber: 25\n      }\n    })), this.props.Login.operation === \"create\" && !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleExportClick(),\n      hidden: this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4819,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4824,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXPORTTEMPLATE\",\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4825,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      hidden: this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1,\n      onClick: () => this.AddImportFile(this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4828,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4831,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_IMPORTTEMPLATE\",\n      defaultMessage: \"IDS_IMPORTTEMPLATE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4832,\n        columnNumber: 33\n      }\n    }))) : \"\", this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4838,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4839,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4840,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4844,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4845,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4846,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4849,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4850,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4851,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4854,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4855,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4856,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4860,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4863,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? - /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4866,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4867,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4868,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter || !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.importData ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4878,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4879,\n        columnNumber: 57\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4880,\n        columnNumber: 57\n      }\n    }))), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false) ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4885,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4886,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4887,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4893,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4894,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4895,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"popup-fixed-center-headed-full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4899,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4900,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4901,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4911,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4912,\n        columnNumber: 33\n      }\n    }, this.props.Login.patientRegistration ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4915,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4916,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PatientMaster, {\n      Login: this.props.Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4917,\n        columnNumber: 49\n      }\n    }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n      dynamicExternalSample: this.props.Login.dynamicExternalSample,\n      dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n      dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n      selectedRecord: this.state.selectedRecord,\n      selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4920,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4930,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4942,\n        columnNumber: 58\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4957,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      TestPackage: this.props.Login.TestPackage || [],\n      selectPackage: this.state.selectPackage,\n      selectSection: this.state.selectSection,\n      onTestPackageChange: this.onTestPackageChange,\n      onTestSectionChange: this.onTestSectionChange,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      TestSection: this.props.Login.TestSection || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4969,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4982,\n        columnNumber: 61\n      }\n    }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n      selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n      fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n      extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n      ,\n      selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n      onInputOnChange: this.onInputOnChangeMaster,\n      onComboChange: this.onComboChangeMaster,\n      handleDateChange: this.handleDateChangeMaster,\n      dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n      onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n      masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n      mastertimeZoneList: this.props.Login.mastertimeZoneList,\n      masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n      onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n      handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n      onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n      onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n      onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n      userInfo: this.props.Login.userInfo,\n      Login: this.props.Login,\n      addMasterRecord: this.addMasterRecord,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      masterIndex: this.props.Login.masterIndex,\n      custombuttonclick: this.custombuttonclick,\n      editMasterRecord: this.editMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5000,\n        columnNumber: 65\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      selectPackage: this.state.selectPackage,\n      selectSection: this.state.selectSection,\n      selectedTestPackageData: this.state.selectedTestPackageData,\n      TestPackage: this.props.Login.TestPackage || [],\n      TestSection: this.props.Login.TestSection || [],\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      onTestPackageChange: this.onTestPackageChange,\n      onTestSectionChange: this.onTestSectionChange,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onDropFile: this.onDropFileSubSample,\n      deleteAttachment: this.deleteAttachmentSubSample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5029,\n        columnNumber: 69\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5068,\n        columnNumber: 73\n      }\n    }) : this.props.Login.loadImportFileData ? /*#__PURE__*/React.createElement(AddImportFileData //ALPD-3596                                                                  \n    , {\n      TestCombined: this.state.TestCombinedForImport || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      specBasedComponent: this.state.specBasedComponent,\n      userInfo: this.props.Login.userInfo,\n      selectedRecord: this.state.selectedRecord,\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      onInputOnChange: this.onInputOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5075,\n        columnNumber: 77\n      }\n    }) : this.props.Login.loadImportSampleCountData ? /*#__PURE__*/React.createElement(AddImportSampleCountData, {\n      selectedRecord: this.state.selectedRecord,\n      userInfo: this.props.Login.userInfo,\n      onNumericInputChange: this.onNumericInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5089,\n        columnNumber: 81\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut //addPatient={this.addPatient}\n    , {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userRoleControlRights1: this.props.Login.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      specBasedTestPackage: this.state.specBasedTestPackage,\n      custombuttonclick: this.custombuttonclick,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onClickView: this.onClickView,\n      comboComponents: this.props.Login.comboComponents,\n      sampleType: {\n        \"label\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\n        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        \"item\": this.props.Login.masterData.RealSampleTypeValue\n      },\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      AddImportFile: this.AddImportFile,\n      AddSampleCount: this.AddSampleCount,\n      importData: this.props.Login.importData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5094,\n        columnNumber: 83\n      }\n    })), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5167,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: (this.props.Login.screenName && this.props.Login.screenName) + \"_\" + this.state.selectedSpec.nallottedspeccode.label,\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5168,\n        columnNumber: 41\n      }\n    }, [...this.state.exportFiled].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.label,\n      title: (item.idsField ? this.props.intl.formatMessage({\n        id: item.displayname\n      }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? item.dateonly ? '(yyyy-mm-dd)' : item.timeonly ? '(HH:mm:ss)' : '(yyyy-mm-dd  HH:mm:ss)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5176,\n        columnNumber: 49\n      }\n    })))) : \"\")))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  callService,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler,\n  testPackageTest,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail,\n  getEditMaster,\n  insertMultipleRegistration,\n  insertRegSample,\n  testSectionTest\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","Row","Col","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","SampleType","transactionStatus","formCode","designComponents","faCalculator","faFileExport","faFileImport","ageCalculate","ageCalculateOnlyForYear","childComboClear","comboChild","convertDateTimetoString","extractFieldHeader","filterRecordBasedOnTwoArrays","formatDate","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","removeIndex","removeSpaceFromFirst","showEsign","sortByField","validateEmail","validatePhoneNumber","conditionBasedInput","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","Lims_JSON_stringify","checkFilterIsEmptyQueryBuilder","convertDateTimetoStringDBFormat","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","callService","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","testPackageTest","rearrangeDateFormatforKendoDataTool","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","getEditMaster","insertMultipleRegistration","insertRegSample","testSectionTest","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","ThemeConsumer","PatientMaster","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrderSlideout","AddImportFileData","AddImportSampleCountData","ExcelExport","ExcelExportColumn","LocalizationProvider","checkBoxOperation","rsapi","Axios","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","selectedTestPackageData","selectPackage","selectSection","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","specBasedTestPackage","selectedMaster","exportFiled","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","filterQueryTreeStr","getTree","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","isFilterEmpty","undefined","includes","val","seletedFilterComponent","info","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","index","masterIndex","map","item","columnname","ndesigncomponentcode","COMBOBOX","label","sdisplaymember","value","svaluemember","DATEPICKER","loadCustomSearchFilter","screenName","addMaster","selectedControl","displayname","slanguagetypecode","masterData","RealRegSubTypeValue","sregsubtypename","newdata","jsondata","onComboChange","handleSaveClick","saveType","startLabel","mandatoryFields","masterextractedColumnList","x","mandatory","loadComponent","loadSubSample","SubSampleTemplate","row","children","column","hasOwnProperty","componentrow","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","loadTest","loadImportFileData","registrationTemplate","sampleexportfields","findIndex","loadImportSampleCountData","loadSpec","esign","loadEsign","forEach","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","validateEsign","onSaveMasterRecord","selectedSpecCheck","ncomponentrequired","YES","subSampleDataGridList","width","inputvalues","nallottedspeccode","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClickImport","onSaveClick","MandatoryCheckSubSample","exportFields","comboComponent","exportFieldProperties","subSampleFields","subsampleexportfields","templatemandatory","MandatoryCheck","TestChange","comboData","fieldName","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","project","nprojectmastercode","childSpec","nsampletypecode","RealSampleTypeValue","CLINICALTYPE","table","nquerybuildertablecode","name","sampleTypeCatBasedFlow","ncategorybasedflowrequired","nprojectSpecReqd","nprojectspecrequired","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","ProductCategory","comboComponents","ncategorybasedflow","PROJECTSAMPLETYPE","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","withoutCombocomponent","mapOfFilter","nneedsubsample","nportalrequired","temp","components","temp1","onInputOnChange","radiotext","target","type","checked","needTest","testForImport","indexOf","indexcomma","slice","defaultValue","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","SampleTypeValue","ageComp","age","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","selectedSpecification","slno","getTestForImport","objComponent","LoginProps","urlArray","TestGet","post","nspecsampletypecode","all","then","response","TestData","TestCombinedForImport","loading","catch","error","message","AddImportFile","warn","AddSampleCount","addTestslide","componentBasedSpec","isValid","Object","keys","closeSpec","closeImportFileData","sfilename","closeImportSampleCountData","closeKendoFilter","logic","filters","closeAddMaster","masterfieldList","masterdataList","mastercomboComponents","masterComboColumnFiled","masterwithoutCombocomponent","masterDesign","masterOperation","masterEditObject","closeDynamicView","isDynamicViewSlideOut","selectedDynamicViewControl","closeComponent","closeTest","TestCombined","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","TestPackage","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","onTestPackageChange","action","selectedComponentData","availableTest","availableTestSection","testData","AllTest","AllSection","TestSection","onTestSectionChange","TestPakageTest","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","isFileupload","findSubsampleDateList","PREREGISTER","ndesigntemplatemappingcode","RealApprovalConfigVersionValue","napproveconfversioncode","RegSubTypeValue","nneedtemplatebasedflow","SINGLESELECT","param","defaultTimeZone","dateList","fields","join","importTest","subSample","sampleeditable","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","activeTestTab","activeSampleTab","activeSubSampleTab","nneedjoballocation","dateComp","genderComp","orderType","ndefaulttemplatecode","formData","FormData","append","JSON","stringify","postParamList","onNumericBlur","handleExportClick","subSampleLayout","mandatoryCheck","export","onComboChangeMaster","nformcode","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","toLowerCase","nmastersitecode","isEmailCheck","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","jsonuidata","slideoutdesign","loadcurrentdate","Date","PATIENTMASTER","isJsonField","jsonObjectName","controlType","dateField","controlName","fieldData","ssubmitterfirstname","sfirstname","ssubmitterlastname","slastname","ssubmitteremail","semail","sshortname","ssubmittercode","ssubmitterid","stelephone","sinstitutionsitename","sinstitutionname","sinstitutioncode","sinstitutioncatname","sinstitutiondistrictname","selectedRecordName","classUrl","onClickView","toUpperCase","fieldList","extractedColumnList","get","values","primaryKeyField","masterprimaryKeyField","editMasterRecord","editObject","onComboChangeMasterDyanmic","childParam","mastedataList","onInputOnChangeMasterDynamic","test","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onDropFileSubSample","deleteAttachmentSubSample","myRef","PrevoiusLoginData","componentColumnList","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","userRoleControlRights","TESTPACKAGE","subSampleDataDetailGridList","columnSize","_excelExportHeader","save","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","subSampleCurrentDataGridList","dateLst","selectedComponentWithFile","saveContinueData","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","RealDesignTemplateMappingValue","selectedSample","tempData","fileName","splittedFileName","split","fileExtension","uniquefilename","susername","suserrolename","size","displayName","sloginid","showConfirmAlert","resultDataState","testCommentDataState","ncontrolCode","screenData","openModal","openPortal","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","SelectedScheduler","count","item12","nsamplecount","ncontrolcode","noutsourcerequired","loadAdhocTest","nexternalordertypecode","i","nordertypecode","sordertypename","externalorderid","render","ignoreFormValidation","buttonLabel","idsLabel","concat","className","closeModal","graphView","loginoperation","exportTemplateId","importTemplateId","showValidate","showCalculate","showParam","showExecute","noSave","resetView","importData","showSave","patientRegistration","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","hideQualisForms","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","mastertimeZoneList","masterdefaultTimeZone","loadPreregister","handleChange","ssampletypename","exporter","idsField","dateonly","timeonly"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\r\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ageCalculate,\r\n    ageCalculateOnlyForYear,\r\n    childComboClear,\r\n    comboChild, convertDateTimetoString,\r\n    extractFieldHeader,\r\n    filterRecordBasedOnTwoArrays,\r\n    formatDate,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays,\r\n    rearrangeDateFormat,\r\n    rearrangeDateFormatforUI,\r\n    removeIndex,\r\n    removeSpaceFromFirst,\r\n    showEsign,\r\n    sortByField,\r\n    validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify,\r\n    checkFilterIsEmptyQueryBuilder, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, callService,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest,\r\n    rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration,\r\n    insertRegSample, testSectionTest\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport Esign from '../audittrail/Esign';\r\nimport { ThemeConsumer } from 'styled-components';\r\nimport PatientMaster from '../contactmaster/PatientMaster';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n//import SplitterLayout from 'react-splitter-layout';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\r\nimport AddImportFileData from './AddImportFileData';\r\nimport AddImportSampleCountData from './AddImportSampleCountData';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { checkBoxOperation } from '../../components/Enumeration';\r\nimport rsapi from '../../rsapi.js';\r\nimport Axios from 'axios';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        selectedTestPackageData: {},\r\n        selectPackage: {},\r\n        selectSection: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        specBasedTestPackage: false,\r\n        selectedMaster: [],\r\n        exportFiled: []\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n\r\n    // searchClickedItemParent(treeData) {\r\n    //     let ParentItem = { ...treeData };\r\n    //     let isFilterEmpty=true;\r\n    //         let childArray = ParentItem.children1;\r\n    //         if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n    //             for (var i = 0; i < childArray.length; i++) {\r\n    //                 let childData = childArray[i]\r\n    //                 if (!childData.hasOwnProperty('children1')) {\r\n    //                     if( childData.properties.field !== null && childData.properties.operator!==\"is_empty\"\r\n    //                       && childData.properties.operator!==\"is_not_empty\"\r\n    //                       && childData.properties.operator!==\"is_null\"\r\n    //                       && childData.properties.operator!==\"is_not_null\" ){\r\n    //                         if( childData.properties.field !== null && (childData.properties.operator===\"not_equal\"||childData.properties.operator===\"equal\") &&\r\n    //                         childData.properties.valueSrc[0]==='func'){\r\n    //                        isFilterEmpty= childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==\"\" && \r\n    //                        childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==undefined ? true:false;\r\n    //                         }else{\r\n    //                         isFilterEmpty= (childData.properties.value[0]!==\"\" && childData.properties.value[0]!==undefined)? true:false;\r\n    //                         }\r\n    //                         if(!isFilterEmpty){\r\n    //                         return isFilterEmpty;\r\n    //                     }\r\n    //                 }\r\n    //                 } else {\r\n    //                     if (childData) {\r\n    //                         ParentItem = this.searchClickedItemParent(childData)\r\n    //                         if(!ParentItem){\r\n    //                             return ParentItem;\r\n    //                         }\r\n    //                     } \r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         return isFilterEmpty;\r\n    // }\r\n\r\n    handleExecuteClick = (event) => {\r\n        const filterquery = this.props.Login.filterquery\r\n        const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\r\n        let isFilterEmpty = checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\r\n        if (filterquery !== \"\" && filterquery !== undefined\r\n            && !filterquery.includes('Invalid date') && isFilterEmpty) {\r\n            const val = removeSpaceFromFirst(filterquery, '')\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: val\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        if (component[\"childFields\"]) {\r\n            const index = this.props.Login.masterIndex;\r\n            let selectedRecord = this.state.selectedMaster || {};\r\n\r\n            component[\"childFields\"].map(item => {\r\n                let data = item1[item.columnname];\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    //combocontrol\r\n                    data = { label: item1[item.sdisplaymember], value: item1[item.svaluemember] };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    //Date picker control\r\n                    data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\r\n                }\r\n                selectedRecord[index][item.columnname] = data;\r\n            })\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: selectedRecord, loadCustomSearchFilter: false,\r\n                    screenName: this.props.Login.addMaster === true\r\n                        ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                        : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            const newdata = {\r\n                label: item1[component['displaymember']],\r\n                value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n            }\r\n\r\n\r\n            this.onComboChange(newdata, component, component['label'])\r\n        }\r\n    };\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         if (this.props.Login.loadSubSample) {\r\n    //             const selectComponent = this.state.selectComponent;\r\n    //             component.child.map(y => {\r\n    //                 const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 // if (readonlyfields !== -1) {\r\n\r\n    //                 //     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                 //             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n    //                 //     } else {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                 //     }\r\n    //                 // }\r\n\r\n    //                 if (readonlyfields !== -1) {\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectComponent[y.label + 'value'] = selectComponent[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectComponent[y.label]);\r\n\r\n    //                                     selectComponent[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     } else {\r\n    //                         if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                     selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         } else {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         }\r\n    //                     }\r\n\r\n\r\n    //                 } else {\r\n    //                     const comboComponents = this.state.SubSamplecomboComponents;\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n\r\n    //                             const val = this.props.Login.SubSamplecomboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectComponent[y.label] = val[0]\r\n\r\n    //                             //selectComponent[y.label] = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectComponent,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: \"SubSample\",\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         } else {\r\n    //             const selectedRecord = this.state.selectedRecord;\r\n    //             component.child.map(y => {\r\n    //                 // component.filterfields.filter(x=>x.)\r\n    //                 const withoutCombocomponent = this.props.withoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                     selectedRecord[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     }\r\n    //                     else if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 } else {\r\n    //                     const comboComponents = this.props.comboComponents || [];\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n    //                             const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectedRecord[y.label] = val[0]\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectedRecord,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // console.log(\"handle save:\", selectedRecord);\r\n\r\n        if (this.props.Login.addMaster) {\r\n            const masterIndex = this.props.Login.masterIndex\r\n            mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true)\r\n            selectedRecord = this.state.selectedMaster[masterIndex]\r\n        }\r\n        else if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // console.log(\"component1:\", component);\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    //  console.log(\"componentrow:\", componentrow);\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label,\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        } else if (this.props.Login.loadImportFileData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"files\" },\r\n            ]\r\n\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) === -1) {\r\n                                        if (componentrow.mandatory === true) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : this.props.sampleexportfields.findIndex(x => x === component.label) === -1 ? component.mandatory === true ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n\r\n        }\r\n        else if (this.props.Login.loadImportSampleCountData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SAMPLECOUNT\", \"dataField\": \"nsamplecount\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            ]\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        //\"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        // \"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        //  console.log(\"mandate fields:\", mandatoryFields);\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.addMaster) {\r\n                    this.onSaveMasterRecord(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    let selectedSpecCheck = { ...this.state.selectedSpec }\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    let inputvalues = {};\r\n                    if (this.state.selectedRecord[\"nallottedspeccode\"] !== selectedSpecCheck.nallottedspeccode) {\r\n                        inputvalues = {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec: { ...selectedSpec },\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    } else {\r\n                        inputvalues = {\r\n                            loadSpec: false,\r\n                            selectedSpec: { ...selectedSpec },\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            // selectedTestData: [],\r\n                            // selectComponent: [],\r\n                            // selectedComponent: {},\r\n                            // loadSpec: false,\r\n                            // SelectedTest: [],\r\n                            // Test: [],\r\n                            // Component: [],\r\n                            // subSampleDataGridList: [],\r\n                            // selectedSpec: { ...selectedSpec },\r\n                            // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                            //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            // specBasedComponent\r\n                            ...inputvalues\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadImportFileData) {\r\n                    this.onSaveClickImport('1', this.formRef);\r\n                }\r\n                else if (this.props.Login.loadImportSampleCountData) {\r\n                    this.onSaveClickImport('2', this.formRef);\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    MandatoryCheckSubSample = () => {\r\n\r\n        let mandatoryFields = []\r\n        let exportFields = []\r\n        let comboComponent = []\r\n        let exportFieldProperties = []\r\n\r\n        let subSampleFields = []\r\n        if (this.state.specBasedComponent) {\r\n            exportFieldProperties = [{ \"nquerybuildertablecode\": 32, \"valumeber\": \"ncomponentcode\", \"inputtype\": \"combo\", \"displaymember\": \"scomponentname\", \"label\": \"ncomponentcode\", \"source\": \"component\" }]\r\n            mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\", \"mandatory\": true, }]\r\n            // mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            exportFields = [\"ncomponentcode\"]\r\n            subSampleFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n        }\r\n\r\n\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n                                subSampleFields.push({\r\n                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    \"dataField\": componentrow.label,\r\n                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                        \"selectbox\" : \"textbox\",\r\n                                    \"label\": componentrow.label\r\n                                })\r\n\r\n\r\n                                if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    exportFields.push(componentrow.label\r\n                                    )\r\n                                    exportFieldProperties.push(componentrow)\r\n                                }\r\n\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n                            subSampleFields.push({\r\n                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                \"dataField\": component.label,\r\n                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                \"controlType\": component.inputtype === \"combo\" ?\r\n                                    \"selectbox\" : \"textbox\",\r\n                                \"label\": component.label\r\n                            })\r\n\r\n                            if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                exportFields.push(\r\n                                    component.label\r\n                                )\r\n                                exportFieldProperties.push(component)\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, subSampleFields, comboComponent, exportFieldProperties };\r\n    }\r\n\r\n    // SubSampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n    // SampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n\r\n    MandatoryCheck = () => {\r\n        const mandatoryFields = []\r\n        const exportFields = []\r\n        const exportFieldProperties = []\r\n        const comboComponent = []\r\n        this.props.Login.masterData.registrationTemplate &&\r\n            this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n\r\n                                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    exportFields.push(componentrow.label)\r\n                                    exportFieldProperties.push(componentrow)\r\n                                }\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n\r\n                            if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                exportFields.push(component.label\r\n                                )\r\n                                exportFieldProperties.push(component)\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory && this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, comboComponent, exportFieldProperties };\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //console.log(\"Control:\", control);\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            let project = false;\r\n            let nprojectmastercode = -1;\r\n            let childSpec = false;\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                : 1\r\n\r\n            if (nsampletypecode === SampleType.CLINICALTYPE) {\r\n                if (control.table.item.nquerybuildertablecode === 228\r\n                    && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\r\n                    selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid']\r\n                }\r\n            }\r\n\r\n            if (control.name === \"manualorderid\") {\r\n                selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid']\r\n            }\r\n\r\n            const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired)\r\n                : transactionStatus.NO\r\n\r\n            const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired)\r\n                : transactionStatus.NO;\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                    this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                    \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n                };\r\n\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009       \r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n                        product = true;\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument Name') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE\r\n                    && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n\r\n                        //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                    else {\r\n\r\n                        const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n                        productCategory = true;\r\n                    }\r\n                    else {\r\n                        inputParem[\"ProductName\"] = Product[0].label;\r\n                        product = true;\r\n                    }\r\n\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n            else if (control.name === 'Project Code') {\r\n                //project = true;\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\r\n\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    // nproductcode = selectedRecord[Product[0].label] &&\r\n                    //     selectedRecord[Product[0].label].value;\r\n                    nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n                }\r\n                nprojectmastercode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    project = true;\r\n                }\r\n                // else{\r\n                //     if (ncategorybasedflow === 3) {\r\n                //         productCategory = true;\r\n                //     }\r\n                //     else{\r\n                //         product =true;\r\n                //     }\r\n                // }\r\n\r\n            }\r\n\r\n            if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                product = false;\r\n                productCategory = false;\r\n                materialType = false;\r\n                instrument = false;\r\n                instrumentCategory = false;\r\n                material = false;\r\n                materialCategory = false;\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                // let childTemplateMandatory = {}\r\n                // if (!(product ||\r\n                //     productCategory ||\r\n                //     materialType ||\r\n                //     instrument ||\r\n                //     instrumentCategory ||\r\n                //     material ||\r\n                //     materialCategory ||\r\n                //     project)) {\r\n                //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\r\n                //     if (TemplateMandatory && TemplateMandatory.length > 0) {\r\n                //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\r\n                //         const Product = childComboList.filter(x => x.name === \"Product\");\r\n                //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\r\n                //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\r\n                //         const Material = childComboList.filter(x => x.name === \"Material\");\r\n                //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\r\n                //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\r\n                //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\r\n\r\n                //         childTemplateMandatory = {\r\n                //             ProductCategory, Product\r\n                //             , InstrumentCategory\r\n                //             , MaterialCategory, Material\r\n                //             , MaterialType, MaterialType\r\n                //             , ProjectCode, Instrument\r\n                //         }\r\n                //         if (ProductCategory || Product\r\n                //             || InstrumentCategory\r\n                //             || MaterialCategory || Material\r\n                //             || MaterialType || MaterialType\r\n                //             || ProjectCode || Instrument) {\r\n                //             childSpec = true;\r\n                //         }\r\n                //     }\r\n                //     else {\r\n                //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\r\n                //         if (TemplateChild&& TemplateChild.length> 0) {\r\n\r\n                //             TemplateChild.map(x=>{\r\n                //                 x.child&&x.child.map(y=>{\r\n                //                 const data=this.props.comboComponents(x=>x.label===y.label)  \r\n                //                 if(data&&data[0].templatemandatory){\r\n                //                     const name=data[0].name\r\n                //                     if(name===\"Product Category\"||name===\"Instrument Category\"\r\n                //                     ||name===\"Product\"||name===\"Material Category\"\r\n                //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\r\n                //                         childSpec = true;\r\n                //                         childTemplateMandatory={childSpec:true}\r\n                //                     }\r\n                //                 }\r\n                //                 })\r\n                //             })\r\n                //         }\r\n\r\n                //     }\r\n                // }\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                    nprojectmastercode, nprojectSpecReqd,\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n                    nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired\r\n                    // ...childTemplateMandatory\r\n                }\r\n                this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType,\r\n                    undefined, project, this.props.comboComponents)\r\n            }\r\n            else {\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType\r\n                    || project) {\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                        nprojectmastercode,\r\n                        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material,\r\n                        undefined, undefined, project)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, loadCustomSearchFilter: false, }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, control, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n            //ALPD-3596 Start\r\n            if (event.target.name === \"importTest\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n                if (event.target.checked === false) {\r\n                    let needTest = event.target.checked\r\n                    this.testForImport(needTest)\r\n                }\r\n            }\r\n            //ALPD-3596 End\r\n\r\n            else {\r\n\r\n                const value = selectedRecord[event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    if (value.includes(radiotext)) {\r\n                        const index = value.indexOf(radiotext);\r\n                        if (index !== -1) {\r\n                            if (index === 0) {\r\n                                const indexcomma = value.indexOf(\",\")\r\n                                if (indexcomma !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = \"\"\r\n                                }\r\n                            } else {\r\n                                if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = radiotext;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // if (control.isnumeric === true\r\n            //      && control.label===radiotext) {\r\n            //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            // } else {\r\n            //     selectedRecord[event.target.name] = event.target.value;\r\n            // }\r\n            //  selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, control, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // if (control.isnumeric === true\r\n            //     && control.label===radiotext) { \r\n            //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            //     } else {\r\n            //         selectComponent[event.target.name] = event.target.value;\r\n            //     }\r\n            // selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, source: control.source } : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: \"IDS_SUBSAMPLE\"\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode,\r\n                source: control.source\r\n            };\r\n\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n            const age = ageCalculate(dateValue);\r\n            selectedRecord[ageComp[0].label] = age;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n\r\n        if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n            check = true;\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n            // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n            //     this.props.Login.userRoleControlRights !== undefined ? true : false\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            this.subSampleDataGridList = []\r\n            this.subSampleDataDetailGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"150px\"\r\n                                        })\r\n                                    } else {\r\n                                        this.subSampleDataDetailGridList.push({\r\n                                            \"mandatory\": false,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"50px\", columnSize: \"2\"\r\n                                        })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory) {\r\n                                    this.subSampleDataGridList.push({\r\n                                        \"mandatory\": true,// \"idsName\": component.label,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"150px\",\r\n                                    });\r\n                                } else {\r\n                                    this.subSampleDataDetailGridList.push({\r\n                                        \"mandatory\": false,\r\n                                        //\"idsName\": componentrow.label, \r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"50px\", columnSize: \"2\"\r\n                                    })\r\n                                }\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent, specBasedTestPackage\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\r\n            this.setState({ selectedTestPackageData: this.props.Login.selectedTestPackageData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\r\n            this.setState({ selectPackage: this.props.Login.selectPackage });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectSection !== this.PrevoiusLoginData.Login.selectSection) {\r\n            this.setState({ selectSection: this.props.Login.selectSection });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\r\n            this.setState({ specBasedTestPackage: this.props.Login.specBasedTestPackage });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.info(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    //ALPD-3596 Start\r\n\r\n    testForImport = (needTest) => {\r\n        const selectedSpecification = {\r\n            nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            slno: 1\r\n        };\r\n        this.getTestForImport(selectedSpecification, this.props.Login,\r\n            (this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample), this.state.selectedRecord, needTest, this.state.specBasedComponent);\r\n    }\r\n    getTestForImport = (objComponent, LoginProps, nneedsubsample, selectedRecord, needTest, specBasedComponent) => {\r\n        if (!this.state.specBasedComponent) {\r\n            const urlArray = []\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n\r\n            });\r\n            urlArray[0] = TestGet;\r\n            Axios.all(urlArray).then(response => {\r\n\r\n                let TestData = response[0].data;\r\n                let Test = LoginProps.Test || [];\r\n                let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                let TestCombinedForImport = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                selectedRecord['importTest'] = needTest ? transactionStatus.YES : transactionStatus.NO;\r\n                this.setState({\r\n                    TestCombinedForImport,\r\n                    // AllTest: TestData,\r\n                    // screenName: intl.formatMessage({ id: \"IDS_IMPORT\" }),\r\n                    selectedTestData: [],\r\n                    selectedRecord: selectedRecord,\r\n                    // loadImportFileData: true,\r\n                    loading: false,\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    this.setState({ loading: false });\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n    //ALPD-3596 End\r\n\r\n    AddImportFile = (selectedRecord) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            //ALPD-3596 \r\n            selectedRecord['importTest'] = transactionStatus.YES;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadImportFileData: true,\r\n                    screenName: this.props.intl.formatMessage({ id: \"IDS_IMPORT\" }),\r\n                    selectedRecord: selectedRecord \t\t//ALPD-3596\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        } else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n    AddSampleCount = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SAMPLECOUNT\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let isValid = true;\r\n            const selectedSpecification = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            };\r\n            let selectedRecord = selectedComponent;\r\n            //  if(componentBasedSpec){\r\n            if (nneedsubsample) {\r\n                if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                    delete selectedComponent[\"selected\"];\r\n                }\r\n                else {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = selectedSpecification;\r\n            }\r\n            // }\r\n            // else{\r\n            //     selectedRecord = selectedSpecification;          \r\n            // }\r\n\r\n            if (isValid) {\r\n                this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n            // } \r\n            // else {\r\n            //     const selectedComponent1 = {\r\n            //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            //         slno: 1\r\n            //     }\r\n            //     this.props.getTest(selectedComponent1,\r\n            //         this.props.Login,\r\n            //         nneedsubsample, specBasedComponent);\r\n            // }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeImportFileData = (e) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedTestData: {}, \t\t//ALPD-3596 \r\n                loadImportFileData: false,\r\n                TestCombinedForImport: [], \t\t//ALPD-3596 \r\n                selectedRecord: { ...{ ...this.state.selectedRecord, sfilename: undefined }, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeImportSampleCountData = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.addMaster === true\r\n                    ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                    : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n\r\n\r\n    closeAddMaster = (e) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let updateInfo = {}\r\n        if (masterIndex !== 0) {\r\n\r\n            const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n            const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex)\r\n            const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n            const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n            const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex)\r\n            const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n            const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n            const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n            const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex)\r\n            const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex)\r\n            const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex)\r\n            masterIndex = masterIndex - 1;\r\n\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster,\r\n                    selectedControl,\r\n                    masterextractedColumnList,\r\n                    masterfieldList,\r\n                    masterdataList,\r\n                    mastercomboComponents,\r\n                    masterwithoutCombocomponent,\r\n                    masterComboColumnFiled,\r\n                    masterDesign,\r\n                    masterIndex,\r\n                    screenName,\r\n                    masterOperation,\r\n                    masterEditObject,\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: [],\r\n                    selectedControl: [],\r\n                    masterextractedColumnList: [],\r\n                    masterfieldList: [],\r\n                    addMaster: false,\r\n                    masterdataList: [],\r\n                    mastercomboComponents: [],\r\n                    masterwithoutCombocomponent: [],\r\n                    masterComboColumnFiled: [],\r\n                    masterDesign: [],\r\n                    masterEditObject: [],\r\n                    masterOperation: [],\r\n                    masterIndex: undefined,\r\n                    screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeDynamicView = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isDynamicViewSlideOut: false,\r\n                selectedDynamicViewControl: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                TestCombined: [],\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\",\r\n                TestPackage: [],\r\n                //Test:[]\r\n                TestCombined: [],\r\n\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                // selectComponent[\"nneedsubsample\"] = nneedsubsample;\r\n                selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\r\n        const selectPackage = this.state.selectPackage || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        const selectSection = this.state.selectSection;\r\n\r\n        if (comboData !== null) {\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            let availableTestSection = [];\r\n            if (selectPackage[\"ntestpackagecode\"]) {\r\n                //ALPD-3404\r\n                delete selectPackage[\"ntestpackagecode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n                delete selectSection[\"nsectioncode\"];\r\n                let Test = (action !== \"AddSubSample\") ? (this.props.Login.Test || []) : [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n                availableTestSection = this.props.Login.AllSection || [];\r\n\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n                availableTestSection = this.props.Login.AllSection || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectPackage, selectSection, TestCombined: availableTest, TestSection: availableTestSection }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n    //ALPD-3404\r\n    onTestSectionChange = (comboData, fieldName, nneedsubsample, action) => {\r\n        const selectPackage = this.state.selectPackage;\r\n        const selectSection = this.state.selectSection || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n\r\n        if (comboData !== null) {\r\n            selectSection[fieldName] = comboData;\r\n            selectSection[\"ssectionname\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testSectionTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            if (selectSection[\"nsectioncode\"]) {\r\n                delete selectSection[\"nsectioncode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n                let Test = (action !== \"AddSubSample\") ? (this.props.Login.Test || []) : [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || []\r\n                    : filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectSection, TestCombined: availableTest, TestSection: this.props.Login.TestSection || [] }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            // START ALPD-3673 VISHAKH\r\n            let dateList = subSampleDetail.dateList;\r\n            let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'], ...saveComponent };\r\n            if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\r\n                dateList.map(dateLst => {\r\n                    if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\r\n                        subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\r\n                    }\r\n                })\r\n            }\r\n            subSampleDataGridList.push(subSampleCurrentDataGridList);\r\n            // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n            // END ALPD-3673 VISHAKH\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\", selectedComponentWithFile: objcomponent,\r\n\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            // START ALPD-3673 VISHAKH\r\n            let dateList = subSampleDetail.dateList;\r\n            let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'], ...saveComponent };\r\n            if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\r\n                dateList.map(dateLst => {\r\n                    if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\r\n                        subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\r\n                    }\r\n                })\r\n            }\r\n            subSampleDataGridList.push(subSampleCurrentDataGridList);\r\n            // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n            // END ALPD-3673 VISHAKH\r\n\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                TestCombined: this.props.Login.TestCombined,\r\n                //selectComponent:C.saveContinueData,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList,\r\n                //selectedTestData: {}\r\n                specBasedTestPackage: this.state.specBasedTestPackage,\r\n                saveContinueData: this.props.Login.saveContinueData,\r\n                selectedComponentWithFile: objcomponent\r\n            }\r\n\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1 = this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo = {};\r\n        let incslno = comp1.length - 1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            // const preList = comp1.splice(0, index);\r\n            // const afterList = comp1.splice(index, comp1.length);\r\n\r\n\r\n            // preList.map(x => {\r\n            //     Test[incslno] = Test && Test[x.slno]\r\n            //     x.slno = incslno;\r\n            //     incslno = incslno - 1;\r\n            //     return null;\r\n            // })\r\n\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n\r\n            //const Component1 = [...preList, ...afterList];\r\n\r\n            // Component1.map(x => {\r\n            //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            // })\r\n            //sortByField(subSampleDataGridList, 'desc', 'slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent && selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\",\r\n\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent, specBasedTestPackage) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                        || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    onSaveClickImport = (saveType, formRef) => {\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let Map = {};\r\n            if (nneedsubsample === false || !this.state.specBasedComponent) {\r\n                Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n            }\r\n\r\n            Map[\"specBasedComponnet\"] = this.state.specBasedComponent\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            const fields = this.MandatoryCheck();\r\n\r\n            Map[\"MandatoryList\"] = fields.mandatoryFields\r\n            Map[\"exportFieldProperties\"] = fields.exportFieldProperties\r\n            //  Map[\"ExportList\"] = fields.exportFields\r\n\r\n            Map[\"exportFields\"] = [...fields.exportFields]\r\n\r\n            Map[\"comboComponent\"] = fields.comboComponent\r\n\r\n            Map[\"SampleFieldsString\"] = [...fields.exportFields];\r\n            //ALPD-3596 \r\n            Map[\"TestGroupTestCode\"] = this.state.selectedTestData && Object.keys(this.state.selectedTestData).length !== 0 ? this.state.selectedTestData.ntestgrouptestcode.map(value => value.item.ntestgrouptestcode).join(\",\") : \"\";\r\n            Map[\"importTest\"] = this.state.selectedRecord && this.state.selectedRecord.importTest;\r\n\r\n\r\n            if (nneedsubsample) {\r\n\r\n\r\n                const subSample = this.MandatoryCheckSubSample()\r\n\r\n\r\n                Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent]\r\n\r\n\r\n                Map[\"MandatoryList\"] = [...fields.mandatoryFields, ...subSample.mandatoryFields]\r\n\r\n                Map[\"SubSampleFields\"] = subSample.subSampleFields\r\n\r\n                Map[\"exportFields\"] = [...fields.exportFields, ...subSample.exportFields]\r\n                Map[\"exportFieldProperties\"] = [...fields.exportFieldProperties, ...subSample.exportFieldProperties]\r\n\r\n                //  Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\r\n\r\n            }\r\n            // Map[\"SampleFields\"] = this.SampleFields();\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n            Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n            Map[\"nflag\"] = 2;\r\n            Map[\"url\"] = this.props.Login.settings[24];\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n            Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n\r\n            if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                    Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                }\r\n                if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                    Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n                }\r\n                Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                let orderType = {\r\n                    \"Order Type\": {\r\n                        \"pkey\": \"nordertypecode\",\r\n                        \"label\": \"NA\",\r\n                        \"value\": -1,\r\n                        \"source\": \"ordertype\",\r\n                        \"nordertypecode\": -1,\r\n                        \"nquerybuildertablecode\": 246\r\n                    }\r\n                };\r\n                if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                    //external order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"External\",\r\n                            \"value\": 2,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 2,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n\r\n                }\r\n                else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                    //manual order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"Manual\",\r\n                            \"value\": 1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n                }\r\n\r\n                Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n            }\r\n            Map[\"skipmethodvalidity\"] = false;\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n            formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0])\r\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\",\r\n                formData: formData,\r\n                isFileupload\r\n            }\r\n            this.props.insertRegSample(inputParam, this.props.Login.masterData)\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n        let isFileupload = false;\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            //ntype:2,\r\n            ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            // checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        //inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        let tempData = {}\r\n        const formData = new FormData();\r\n        this.props.Login.withoutCombocomponent.map(item => {\r\n            if (item.inputtype === \"files\") {\r\n                if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\r\n                    this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                        const fileName = create_UUID();\r\n                        const splittedFileName = item1.name.split('.');\r\n                        const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n\r\n                        tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                        tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                        tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                        tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                        tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                        formData.append(\"uploadedFile\" + index, item1);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\r\n                        formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        inputData['isFileupload'] = true;\r\n                        inputData[\"registration\"]['jsondata'] = {\r\n                            ...inputData[\"registration\"]['jsondata'],\r\n                            ...tempData\r\n                        };\r\n                        inputData[\"registration\"]['jsonuidata'] = {\r\n                            ...inputData[\"registration\"]['jsonuidata'],\r\n                            ...tempData\r\n                        };\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\r\n                        isFileupload = true;\r\n                    }\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            isFileupload, formData: formData\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    insertMultipleRegistration(saveType) {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                // Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                }\r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                let dateList = []\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === 'date') {\r\n                        //dateList.push(item.label)\r\n                    }\r\n                })\r\n                if (saveType === '1') {\r\n                    this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\r\n                        isFileupload = true\r\n                        Map[\"isFile\"] = true;\r\n                        formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false))\r\n                        formData.append(\"readFile\", item);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                    })\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                } else {\r\n                    isFileupload = true\r\n                    Map[\"isFile\"] = false;\r\n                    Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                    formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                }\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nportalrequired\"]=this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                //  Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode;\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\r\n                Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                    Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label\r\n                    Map[\"extrenalOrderTypeCode\"] = Map[\"Registration\"]['jsonuidata'].nexternalordertypecode;\r\n                    Map[\"RegistrationSample\"].map((x, i) => {\r\n                        Map[\"RegistrationSample\"][i]['jsondata'] = { ...x['jsondata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                        Map[\"RegistrationSample\"][i]['jsonuidata'] = { ...x['jsonuidata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                    })\r\n                }\r\n                \r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    handleExportClick = () => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            const exportFiled = [];\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) ?\r\n                                    exportFiled.push(component) : \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            const subSampleLayout = this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (this.state.specBasedComponent) {\r\n                exportFiled.push({ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n            }\r\n            const mandatoryCheck = []\r\n\r\n            if (subSampleLayout !== undefined) {\r\n                subSampleLayout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    else if (componentrow.mandatory) {\r\n                                        mandatoryCheck.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) ?\r\n                                    exportFiled.push(component) : component.mandatory ? mandatoryCheck.push(component) : \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            if (exportFiled.length > 0) {\r\n                if (this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true) {\r\n                    if (mandatoryCheck.length === 0) {\r\n                        this.setState({ exportFiled, export: true });\r\n                    } else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\" }))\r\n                    }\r\n                } else {\r\n                    this.setState({ exportFiled, export: true });\r\n                }\r\n\r\n\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_EXPORTFIELDSNOTAVAILABLE\" }))\r\n            }\r\n\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\"\r\n                        onClick={this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView :\r\n                            this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter :\r\n                                this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ?\r\n                                    this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                                        this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                            this.props.Login.loadImportFileData ? this.closeImportFileData :\r\n                                                this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData :\r\n                                                    this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.Login.operation === \"create\" && (!this.props.Login.addMaster &&\r\n                        !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                        !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                        !this.props.Login.loadImportFileData && !this.props.Login.loadEsign\r\n                        && !this.props.Login.loadSpec\r\n                        && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE) ?\r\n                        <>\r\n\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                onClick={() => this.handleExportClick()}\r\n                                hidden={this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1}\r\n\r\n                            >\r\n                                <FontAwesomeIcon icon={faFileExport} /> { }\r\n                                <FormattedMessage id={\"IDS_EXPORTTEMPLATE\"} defaultMessage={buttonLabel} />\r\n                            </Button>\r\n\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                hidden={this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1}\r\n                                onClick={() => this.AddImportFile(this.state.selectedRecord)}>\r\n                                <FontAwesomeIcon icon={faFileImport} /> { }\r\n                                <FormattedMessage id={\"IDS_IMPORTTEMPLATE\"} defaultMessage={\"IDS_IMPORTTEMPLATE\"} />\r\n                            </Button>\r\n                        </>\r\n                        : \"\"}\r\n\r\n                    {this.props.Login.loadEsign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? -\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter || ((!this.props.Login.addMaster &&\r\n                                                !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                                                !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                                                !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec)\r\n                                                && this.props.Login.importData) ? \"\" :\r\n                                                <>\r\n\r\n\r\n                                                    <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                        <FontAwesomeIcon icon={faSave} /> { }\r\n                                                        <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                    </Button>\r\n                                                </>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && (this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false)) ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body className='popup-fixed-center-headed-full-width'>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n\r\n                                    {this.props.Login.patientRegistration ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <PatientMaster Login={this.props.Login} />\r\n                                            </Col>\r\n                                        </Row> : this.props.Login.isDynamicViewSlideOut ?\r\n                                            <ExternalOrderSlideout\r\n                                                dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                                dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                                dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                            />\r\n\r\n                                            : this.props.Login.loadCustomSearchFilter ?\r\n                                                this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                                    <KendoDatatoolFilter\r\n                                                        filter={this.props.Login.kendoFilter}\r\n                                                        handleFilterChange={this.handleFilterChange}\r\n                                                        filterData={this.props.Login.lstPatient || []}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        fields={this.props.Login.fields || []}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                    /> : <FilterQueryBuilder\r\n                                                        fields={this.props.Login.fields || {}}\r\n                                                        onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                        tree={this.props.Login.awesomeTree}\r\n                                                        config={this.props.Login.awesomeConfig}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        filterData={this.props.Login.lstPatient}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        handleExecuteClick={this.handleExecuteClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                    /> :\r\n                                                this.props.Login.loadSpec ?\r\n                                                    <AddSpecification\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        handleTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.ActiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                    />\r\n                                                    : this.props.Login.loadTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.props.Login.selectedTestData}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            selectPackage={this.state.selectPackage}\r\n                                                            selectSection={this.state.selectSection}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            onTestSectionChange={this.onTestSectionChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                            TestSection={this.props.Login.TestSection || []}\r\n\r\n                                                        /> : this.props.Login.loadComponent ?\r\n                                                            <AddComponentPopUp\r\n                                                                ref={this.myScrollRef}\r\n                                                                selectComponent={this.state.selectComponent || {}}\r\n                                                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                                formatMessage={this.props.intl.formatMessage}\r\n                                                                handleDateChange={this.handleDateChangeComp}\r\n                                                                Component={this.props.Login.lstComponent || []}\r\n                                                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                // onComboChange={this.onComponentComboChange}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                onComponentChange={this.onComponentChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                                CurrentTime={this.props.Login.CurrentTime}\r\n                                                            /> : this.props.Login.addMaster ?\r\n                                                                <AddMasterRecords\r\n                                                                    selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                                    fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                                    extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                                    // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                                    selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                                    onInputOnChange={this.onInputOnChangeMaster}\r\n                                                                    onComboChange={this.onComboChangeMaster}\r\n                                                                    handleDateChange={this.handleDateChangeMaster}\r\n                                                                    dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                                    onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                                    masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                                    mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                                    masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                                    onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                                    handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                                    onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                                    onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                                    onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    Login={this.props.Login}\r\n                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                    userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                    masterIndex={this.props.Login.masterIndex}\r\n                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                    editMasterRecord={this.editMasterRecord}\r\n\r\n                                                                />\r\n                                                                : this.props.Login.loadSubSample ?\r\n                                                                    <AddSubSample\r\n                                                                        Component={this.props.Login.lstComponent || []}\r\n                                                                        selectComponent={this.state.selectComponent}\r\n                                                                        selectedRecord={this.state.selectedRecord}\r\n                                                                        onComponentChange={this.onComponentChange}\r\n                                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                                        TestChange={this.TestChange}\r\n                                                                        selectedTestData={this.state.selectedTestData}\r\n                                                                        selectPackage={this.state.selectPackage}\r\n                                                                        selectSection={this.state.selectSection}\r\n                                                                        selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                                        TestSection={this.props.Login.TestSection || []}\r\n                                                                        childoperation={this.props.Login.childoperation}\r\n                                                                        specBasedComponent={this.state.specBasedComponent}\r\n                                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                                        onTestSectionChange={this.onTestSectionChange}\r\n                                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                                        addMasterRecord={this.addMasterRecord}\r\n                                                                        editMasterRecord={this.editMasterRecord}\r\n                                                                        onDropFile={this.onDropFileSubSample}\r\n                                                                        deleteAttachment={this.deleteAttachmentSubSample}\r\n\r\n                                                                    />\r\n                                                                    : this.props.Login.loadEsign ?\r\n\r\n                                                                        <Esign\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                                                        />\r\n                                                                        : this.props.Login.loadImportFileData ?\r\n                                                                            <AddImportFileData\r\n                                                                                //ALPD-3596                                                                  \r\n                                                                                TestCombined={this.state.TestCombinedForImport || []}\r\n                                                                                TestChange={this.TestChange}\r\n                                                                                selectedTestData={this.state.selectedTestData}\r\n                                                                                specBasedComponent={this.state.specBasedComponent}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                                onDropFile={this.onDropFile}\r\n                                                                                deleteAttachment={this.deleteAttachment}\r\n                                                                                onInputOnChange={this.onInputOnChange}\r\n\r\n                                                                            />\r\n                                                                            : this.props.Login.loadImportSampleCountData ?\r\n                                                                                <AddImportSampleCountData\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                />\r\n                                                                                : <RegisterSlideOut\r\n                                                                                    //addPatient={this.addPatient}\r\n                                                                                    editfield={this.sampleeditable &&\r\n                                                                                        this.sampleeditable['sampleeditable']}\r\n                                                                                    ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                                        this.props.Login.masterData.selectedSample.length > 0\r\n                                                                                        && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                                    loadPreregister={this.props.Login.loadPreregister}\r\n                                                                                    selectedSpec={this.state.selectedSpec}\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    selectedComponent={this.props.Login.selectedComponent}\r\n                                                                                    subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                                    SelectedTest={this.props.Login.SelectedTest}\r\n                                                                                    selectedTestData={this.state.selectedTestData}\r\n                                                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                                    userRoleControlRights1={this.props.Login.userRoleControlRights}\r\n                                                                                    templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                                        this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                                        this.props.Login.masterData.schedulerTemplate ?\r\n                                                                                            this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                                    handleChange={this.props.handleChange}\r\n                                                                                    handleDateChange={this.handleDateChange}\r\n                                                                                    onInputOnChange={this.onInputOnChange}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                    onNumericBlur={this.onNumericBlur}\r\n                                                                                    comboData={this.props.Login.comboData}\r\n                                                                                    onComboChange={this.onComboChange}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                                                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                                    AddSpec={this.AddSpec}\r\n                                                                                    addTest={this.addTestslide}\r\n                                                                                    handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                                    nneedsubsample={this.props.Login.masterData\r\n                                                                                        && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                                    specBasedComponent={this.state.specBasedComponent}\r\n                                                                                    AddComponent={this.AddComponent}\r\n                                                                                    deleteComponent={this.deleteComponent}\r\n                                                                                    deleteTest={this.deleteTest}\r\n                                                                                    editComponent={this.editComponent}\r\n                                                                                    componentColumnList={this.componentColumnList}\r\n                                                                                    Component={this.props.Login.Component}\r\n                                                                                    TestChange={this.TestChange}\r\n                                                                                    testDataState={this.state.testDataState}\r\n                                                                                    subSampleDataState={this.state.subSampleDataState}\r\n                                                                                    testDataStateChange={this.testDataStateChange}\r\n                                                                                    subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                                    addsubSample={this.addsubSample}\r\n                                                                                    editSubSample={this.editSubSample}\r\n                                                                                    subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                                    selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                                    operation={this.props.Login.operation}\r\n                                                                                    specBasedTestPackage={this.state.specBasedTestPackage}\r\n                                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                                    editMasterRecord={this.editMasterRecord}\r\n                                                                                    onClickView={this.onClickView}\r\n                                                                                    comboComponents={this.props.Login.comboComponents}\r\n                                                                                    sampleType={{\r\n                                                                                        \"label\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\r\n                                                                                        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                                                                                        \"item\": this.props.Login.masterData.RealSampleTypeValue,\r\n                                                                                    }}\r\n                                                                                    onDropFile={this.onDropFile}\r\n                                                                                    deleteAttachment={this.deleteAttachment}\r\n                                                                                    AddImportFile={this.AddImportFile}\r\n                                                                                    AddSampleCount={this.AddSampleCount}\r\n                                                                                    importData={this.props.Login.importData}\r\n                                                                                />\r\n                                    }\r\n                                </Form>\r\n                                {this.state.export ?\r\n                                    <LocalizationProvider>\r\n                                        <ExcelExport\r\n                                            data={[]}\r\n                                            collapsible={true}\r\n                                            fileName={(this.props.Login.screenName && this.props.Login.screenName) + \"_\" + this.state.selectedSpec.nallottedspeccode.label}\r\n                                            ref={(exporter) => {\r\n                                                this._excelExportHeader = exporter;\r\n                                            }}>\r\n                                            {[...this.state.exportFiled].map((item, index) =>\r\n                                                <ExcelExportColumn\r\n                                                    field={item.label} title={(item.idsField ? this.props.intl.formatMessage({ id: item.displayname }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? item.dateonly ? '(yyyy-mm-dd)' : item.timeonly ? '(HH:mm:ss)' : '(yyyy-mm-dd  HH:mm:ss)' : \"\")} width={200} />\r\n                                            )\r\n\r\n                                            }\r\n                                        </ExcelExport>\r\n                                    </LocalizationProvider > : \"\"}\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ?\r\n                        event.target.value : selectedMaster[masterIndex][event.target.name];\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        let isEmailCheck = true;\r\n        let isFileupload = false;\r\n        const formData = new FormData();\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ?\r\n                    this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            isFileupload = true;\r\n            inputData[\"isFileupload\"] = false;\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                    selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                        selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify({ ...inputData })));\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 43) {\r\n            //added by vignesh for ALPD-3010\r\n            this.state.selectedRecord = { ...this.state.selectedRecord, \"spatientid\": this.state.selectedMaster[masterIndex][\"spatientid\"] };\r\n            inputData[\"noneedfilter\"] = 2; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    else if (item.controlType === \"selectbox\") {\r\n                        fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        fieldName = item.tableDataField;\r\n                    }\r\n                    inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    }\r\n                    return inputData[methodUrl];\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n\r\n                        if (fieldName === 'ssubmittername') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                ssubmitterfirstname: this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\r\n                                ssubmitterlastname: this.state.selectedMaster[masterIndex][fieldName].item.slastname,\r\n                                ssubmitteremail: this.state.selectedMaster[masterIndex][fieldName].item.semail,\r\n                                sshortname: this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\r\n                                ssubmittercode: this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\r\n                                ssubmitterid: this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\r\n                                stelephone: this.state.selectedMaster[masterIndex][fieldName].item.stelephone,\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutionsitename') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutionsitename: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename,\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutionname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutionname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\r\n                                sinstitutioncode: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode,\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutioncatname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutioncatname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname,\r\n\r\n                            }\r\n                        }\r\n\r\n                        if (fieldName === 'sdistrictname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutiondistrictname: this.state.selectedMaster[masterIndex][fieldName].label,\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n            inputData[methodUrl][\"nproductcode\"] = -1;\r\n            //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\r\n            //inputData[methodUrl][\"sexternalorderid\"] = 1;\r\n            inputData[methodUrl][\"nordertypecode\"] = 1;\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n        const inputParam = {\r\n            withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent\r\n                : this.props.Login.withoutCombocomponent,\r\n            comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents\r\n                : this.props.Login.comboComponents,\r\n            selectedRecord: this.props.Login.loadSubSample ?\r\n                this.state.selectComponent\r\n                : this.state.selectedRecord,\r\n            selectedRecordName: this.props.Login.loadSubSample ?\r\n                'selectComponent'\r\n                : 'selectedRecord',\r\n            loadSubSample: this.props.Login.loadSubSample,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.loadSubSample ?\r\n                this.props.Login.SubSamplecomboData : this.props.Login.comboData,\r\n            comboName: this.props.Login.loadSubSample ?\r\n                'SubSamplecomboData' : 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex],\r\n            saveType, formRef,\r\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\r\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation,\r\n            formData: formData,\r\n            isFileupload\r\n\r\n        }\r\n        if (isEmailCheck) {\r\n            this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + this.props.intl.formatMessage({ id: \"IDS_\" + selectedControl.label.toUpperCase() }));\r\n        }\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterOperation,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                masterOperation,\r\n                selectedMaster,\r\n\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, control, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectComponent, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachmentSubSample = (event, file, fieldName) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file)\r\n\r\n        this.setState({\r\n            selectComponent, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, callService,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster,\r\n    insertMultipleRegistration, insertRegSample, testSectionTest\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}