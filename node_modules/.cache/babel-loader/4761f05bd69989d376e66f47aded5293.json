{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupParameterAccordion.jsx\";\nimport React, { useState } from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Row, Col, Nav, FormGroup, FormLabel, Card } from 'react-bootstrap';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport { parameterType } from '../../components/Enumeration';\nimport PredefinedParameterTab from '../testmanagement/PredefinedParameterTab';\nimport NumericParameterTab from './NumericParameterTab';\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { AtTableWrap } from '../../components/client-group.styles';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\nimport { ContentPanel } from '../product/product.styled';\n\nconst TestGroupParameterAccordion = props => {\n  const isActionRequired = true;\n  const gridHeight = 'auto';\n  const parameterFieldName = [{\n    \"sparametersynonym\": \"IDS_PARAMETERSYNONYM\"\n  }, {\n    \"sdisplaystatus\": \"IDS_PARAMETERTYPE\"\n  }, {\n    \"nsorter\": \"IDS_SORTER\"\n  }, {\n    \"schecklistname\": \"IDS_CHECKLISTNAME\"\n  }, {\n    \"schecklistversionname\": \"IDS_CHECKLISTVERSION\"\n  }, {\n    \"nroundingdigits\": \"IDS_ROUNDINGDIGITS\",\n    \"nparametertypecode\": parameterType.NUMERIC\n  }, {\n    \"sunitname\": \"IDS_UNIT\",\n    \"nparametertypecode\": parameterType.NUMERIC\n  }, {\n    \"sreportmandatory\": \"IDS_REPORTMANDATORY\"\n  }, {\n    \"sresultmandatory\": \"IDS_RESULTMANDATORY\"\n  }, {\n    \"sspecdesc\": \"IDS_SPECDESCRIPTION\"\n  }];\n  const specLimitFieldName = [{\n    \"sminb\": \"IDS_MINB\"\n  }, {\n    \"smaxb\": \"IDS_MAXB\"\n  }, {\n    \"sresultvalue\": \"IDS_DEFAULTRESULT\"\n  }];\n  const formulaFieldName = [{\n    \"sformulaname\": \"IDS_FORMULANAME\"\n  }, {\n    \"sformulacalculationdetail\": \"IDS_FORMULA\"\n  }];\n  const editParameterId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\n  const editViewCLId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\n  const {\n    selectedParameter,\n    userInfo,\n    userRoleControlRights,\n    testGroupTestFormula,\n    testGroupTestNumericParameter,\n    testGroupTestPredefinedParameter,\n    testGroupCharParameter,\n    selectedSpecification,\n    filterData,\n    testGroupTestClinicalSpec,\n    optionalData\n  } = props;\n  const viewCheckListParam = {\n    nchecklistversioncode: selectedParameter.nchecklistversioncode,\n    flag: 1,\n    ntransactionresultcode: 0,\n    userinfo: userInfo\n  };\n  const addClinicalSpec = props.controlMap && props.controlMap.has(\"AddClinicalSpec\") && props.controlMap.get(\"AddClinicalSpec\").ncontrolcode;\n  const editClinicalSpec = props.controlMap && props.controlMap.has(\"EditClinicalSpec\") && props.controlMap.get(\"EditClinicalSpec\").ncontrolcode;\n  const deleteClinicalSpec = props.controlMap && props.controlMap.has(\"DeleteClinicalSpec\") && props.controlMap.get(\"DeleteClinicalSpec\").ncontrolcode;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fixed_list_height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    className: \"d-flex justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, selectedParameter && selectedParameter.nchecklistversioncode !== -1 && /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: userRoleControlRights.indexOf(editViewCLId) === -1,\n    onClick: () => props.viewTestGroupCheckList(viewCheckListParam),\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_VIEW\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEye,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: userRoleControlRights.indexOf(editParameterId) === -1,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }),\n    onClick: () => props.editTestGroupParameter(\"update\", selectedParameter, userInfo, editParameterId, selectedSpecification, filterData, props.masterData),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPencilAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, parameterFieldName.map(item => {\n    return item.nparametertypecode === undefined || item.nparametertypecode && item.nparametertypecode === props.testgrouptestparameter.nparametertypecode ? Object.keys(item)[0] === \"sparametersynonym\" || Object.keys(item)[0] === \"sspecdesc\" ? /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }, selectedParameter[Object.keys(item)[0]]))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 41\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 41\n      }\n    }, selectedParameter[Object.keys(item)[0]] === \"NA\" ? '-' : selectedParameter[Object.keys(item)[0]]))) : \"\";\n  })), selectedParameter.nparametertypecode === parameterType.NUMERIC && /*#__PURE__*/React.createElement(React.Fragment, null, testGroupTestNumericParameter && testGroupTestNumericParameter.length > 0 && selectedSpecification.nclinicalspec !== 3 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, specLimitFieldName.map(item => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 49\n      }\n    }, testGroupTestNumericParameter[0][Object.keys(item)[0]])));\n  }))), testGroupTestFormula && testGroupTestFormula.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, formulaFieldName.map(item => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 49\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 49\n      }\n    }, testGroupTestFormula[0][Object.keys(item)[0]])));\n  }))), selectedSpecification.nclinicalspec === 3 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Nav.Item, {\n    className: \"add-txt-btn\",\n    name: \"addclinicalspec\",\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_CLINICALSPEC\"\n    }),\n    hidden: userRoleControlRights.indexOf(addClinicalSpec) === -1,\n    onClick: () => props.openModal(\"create\", selectedParameter, userInfo, optionalData, props.masterData),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 45\n    }\n  }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_CLINICALSPEC\",\n    defaultMessage: \"Clinical Spec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 45\n    }\n  }))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, Object.assign({\n    primaryKeyField: \"ntestgrouptestclinicspeccode\",\n    expandField: \"expanded\" //detailedFieldList={props.detailedFieldList || []}\n    ,\n    gridHeight: gridHeight + 'px',\n    extractedColumnList: props.extractedColumnList || [] //inputParam={props.inputParam}\n    ,\n    userInfo: props.userInfo,\n    scrollable: \"scrollable\" //gridHeight={'200px'}\n    ,\n    isActionRequired: true //fixedScroll={true}\n    ,\n    data: props.data,\n    total: props.data && props.data.length || 0,\n    dataState: props.dataState,\n    dataStateChange: props.dataStateChange,\n    dataResult: process(testGroupTestClinicalSpec || [], props.dataState)\n  }, props.dataState, {\n    controlMap: props.controlMap,\n    userRoleControlRights: [],\n    methodUrl: \"testgrouptestclinicspeccode\",\n    pageable: true,\n    selectedId: props.selectedId,\n    hasDynamicColSize: props.hasDynamicColSize,\n    hideDetailBand: true,\n    actionIcons: [{\n      title: props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      controlname: \"faPencilAlt\",\n      objectName: \"mastertoedit\",\n      hidden: userRoleControlRights.indexOf(editClinicalSpec) === -1,\n      //onClick: (viewdetails) => this.ViewAuditDetails(viewdetails)\n      onClick: viewdetails => props.EditSpecDetails(viewdetails, editClinicalSpec)\n    }, {\n      title: props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      controlname: \"faTrashAlt\",\n      objectName: \"mastertodelete\",\n      hidden: userRoleControlRights.indexOf(deleteClinicalSpec) === -1,\n      onClick: viewdetails => props.DeleteSpecDetails(viewdetails, deleteClinicalSpec)\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 49\n    }\n  })))))), selectedParameter.nparametertypecode === parameterType.PREDEFINED && /*#__PURE__*/React.createElement(PredefinedParameterTab, {\n    primaryKeyName: \"ntestgrouptestpredefcode\",\n    predefinedParameterList: testGroupTestPredefinedParameter,\n    selectedParameter: selectedParameter,\n    userInfo: userInfo,\n    optionalData: {\n      testgroupspecification: selectedSpecification\n    },\n    methodUrl: \"TestGroupPredefParameter\",\n    addId: props.controlMap.has(\"AddCodedResult\") && props.controlMap.get(\"AddCodedResult\").ncontrolcode,\n    editId: props.controlMap.has(\"EditCodedResult\") && props.controlMap.get(\"EditCodedResult\").ncontrolcode,\n    deleteId: props.controlMap.has(\"DeleteCodedResult\") && props.controlMap.get(\"DeleteCodedResult\").ncontrolcode,\n    userRoleControlRights: props.userRoleControlRights,\n    deleteAction: props.deleteAction,\n    onSwitchChange: props.onSwitchChange,\n    openModal: props.addTestGroupCodedResult,\n    masterData: props.masterData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }), selectedParameter.nparametertypecode === parameterType.CHARACTER && testGroupCharParameter.length > 0 && props.testGroupCharParameter[0].scharname && props.testGroupCharParameter[0].scharname !== \"null\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_TESTCHARACTER\"\n  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 29\n    }\n  }, props.testGroupCharParameter[0].scharname)))));\n};\n\nexport default injectIntl(TestGroupParameterAccordion);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/TestGroupParameterAccordion.jsx"],"names":["React","useState","injectIntl","FormattedMessage","faPencilAlt","faPlus","faTrashAlt","process","FontAwesomeIcon","Row","Col","Nav","FormGroup","FormLabel","Card","ReadOnlyText","parameterType","PredefinedParameterTab","NumericParameterTab","faEye","DataGrid","AtTableWrap","Grid","GridColumn","ConfirmDialog","ContentPanel","TestGroupParameterAccordion","props","isActionRequired","gridHeight","parameterFieldName","NUMERIC","specLimitFieldName","formulaFieldName","editParameterId","controlMap","has","get","ncontrolcode","editViewCLId","selectedParameter","userInfo","userRoleControlRights","testGroupTestFormula","testGroupTestNumericParameter","testGroupTestPredefinedParameter","testGroupCharParameter","selectedSpecification","filterData","testGroupTestClinicalSpec","optionalData","viewCheckListParam","nchecklistversioncode","flag","ntransactionresultcode","userinfo","addClinicalSpec","editClinicalSpec","deleteClinicalSpec","indexOf","viewTestGroupCheckList","intl","formatMessage","id","editTestGroupParameter","masterData","map","item","nparametertypecode","undefined","testgrouptestparameter","Object","keys","values","length","nclinicalspec","openModal","extractedColumnList","data","dataState","dataStateChange","selectedId","hasDynamicColSize","title","controlname","objectName","hidden","onClick","viewdetails","EditSpecDetails","DeleteSpecDetails","PREDEFINED","testgroupspecification","deleteAction","onSwitchChange","addTestGroupCodedResult","CHARACTER","scharname"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Row, Col, Nav, FormGroup, FormLabel, Card } from 'react-bootstrap';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport { parameterType } from '../../components/Enumeration';\r\nimport PredefinedParameterTab from '../testmanagement/PredefinedParameterTab';\r\nimport NumericParameterTab from './NumericParameterTab';\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { AtTableWrap } from '../../components/client-group.styles';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { ContentPanel } from '../product/product.styled';\r\n\r\n\r\n\r\nconst TestGroupParameterAccordion = (props) => {\r\n    const isActionRequired = true;\r\n    const gridHeight = 'auto'\r\n    const parameterFieldName = [\r\n        { \"sparametersynonym\": \"IDS_PARAMETERSYNONYM\" },\r\n        { \"sdisplaystatus\": \"IDS_PARAMETERTYPE\" },\r\n        { \"nsorter\": \"IDS_SORTER\" },\r\n        { \"schecklistname\": \"IDS_CHECKLISTNAME\" },\r\n        { \"schecklistversionname\": \"IDS_CHECKLISTVERSION\" },\r\n        { \"nroundingdigits\": \"IDS_ROUNDINGDIGITS\", \"nparametertypecode\": parameterType.NUMERIC },\r\n        { \"sunitname\": \"IDS_UNIT\", \"nparametertypecode\": parameterType.NUMERIC },\r\n        { \"sreportmandatory\": \"IDS_REPORTMANDATORY\" }, { \"sresultmandatory\": \"IDS_RESULTMANDATORY\" },\r\n        { \"sspecdesc\": \"IDS_SPECDESCRIPTION\" }\r\n    ];\r\n\r\n\r\n    const specLimitFieldName = [\r\n        { \"sminb\": \"IDS_MINB\" }, { \"smaxb\": \"IDS_MAXB\" },\r\n        { \"sresultvalue\": \"IDS_DEFAULTRESULT\" }\r\n    ];\r\n    const formulaFieldName = [{ \"sformulaname\": \"IDS_FORMULANAME\" }, { \"sformulacalculationdetail\": \"IDS_FORMULA\" }];\r\n    const editParameterId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const editViewCLId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const { selectedParameter, userInfo, userRoleControlRights, testGroupTestFormula, testGroupTestNumericParameter,\r\n        testGroupTestPredefinedParameter, testGroupCharParameter, selectedSpecification, filterData, testGroupTestClinicalSpec, optionalData } = props;\r\n    const viewCheckListParam = { nchecklistversioncode: selectedParameter.nchecklistversioncode, flag: 1, ntransactionresultcode: 0, userinfo: userInfo };\r\n    const addClinicalSpec = props.controlMap && props.controlMap.has(\"AddClinicalSpec\") && props.controlMap.get(\"AddClinicalSpec\").ncontrolcode;\r\n    const editClinicalSpec = props.controlMap && props.controlMap.has(\"EditClinicalSpec\") && props.controlMap.get(\"EditClinicalSpec\").ncontrolcode;\r\n    const deleteClinicalSpec = props.controlMap && props.controlMap.has(\"DeleteClinicalSpec\") && props.controlMap.get(\"DeleteClinicalSpec\").ncontrolcode;\r\n\r\n    return (\r\n\r\n        <div className=\"fixed_list_height\">\r\n            <Row>\r\n                <Col md={12} className=\"d-flex justify-content-end\">\r\n                    {selectedParameter && selectedParameter.nchecklistversioncode !== -1 &&\r\n                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" hidden={userRoleControlRights.indexOf(editViewCLId) === -1}\r\n                            onClick={() => props.viewTestGroupCheckList(viewCheckListParam)}\r\n                            data-tip={props.intl.formatMessage({ id: \"IDS_VIEW\" })}>\r\n                            <FontAwesomeIcon icon={faEye} />\r\n                        </Nav.Link>\r\n                    }\r\n                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                        hidden={userRoleControlRights.indexOf(editParameterId) === -1}\r\n                        data-tip={props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                        onClick={() => props.editTestGroupParameter(\"update\", selectedParameter, userInfo, editParameterId, selectedSpecification, filterData,\r\n                            props.masterData)}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                    </Nav.Link>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n            <Row>\r\n\r\n                {parameterFieldName.map(item => {\r\n                    return (\r\n                        item.nparametertypecode === undefined\r\n                            || (item.nparametertypecode\r\n                                && item.nparametertypecode === props.testgrouptestparameter.nparametertypecode) ?\r\n                            (Object.keys(item)[0] === \"sparametersynonym\" || Object.keys(item)[0] === \"sspecdesc\") ?\r\n                                <Col md=\"12\">\r\n                                    <FormGroup>\r\n                                        <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                        <ReadOnlyText>{selectedParameter[Object.keys(item)[0]]}</ReadOnlyText>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                : <Col md=\"6\">\r\n                                    <FormGroup>\r\n                                        <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                        <ReadOnlyText>{selectedParameter[Object.keys(item)[0]] === \"NA\" ? '-' : selectedParameter[Object.keys(item)[0]]}</ReadOnlyText>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            : \"\"\r\n\r\n                    )\r\n                }\r\n                )}\r\n            </Row>\r\n\r\n            {selectedParameter.nparametertypecode === parameterType.NUMERIC &&\r\n                <>\r\n                    {testGroupTestNumericParameter && testGroupTestNumericParameter.length > 0 && selectedSpecification.nclinicalspec !== 3 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {specLimitFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"4\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestNumericParameter[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                    {testGroupTestFormula && testGroupTestFormula.length > 0 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {formulaFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"6\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestFormula[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n\r\n                    {selectedSpecification.nclinicalspec === 3 &&\r\n                        <>\r\n                            <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\">\r\n                                <Col md={12}>\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <Nav.Item className=\"add-txt-btn\" name=\"addclinicalspec\"\r\n                                            data-tip={props.intl.formatMessage({ id: \"IDS_CLINICALSPEC\" })}\r\n                                            hidden={ userRoleControlRights.indexOf(addClinicalSpec) === -1}\r\n                                            onClick={() => props.openModal(\"create\", selectedParameter, userInfo, optionalData, props.masterData)}>\r\n                                            <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>{\" \"}\r\n                                            {/* <FormattedMessage id=\"IDS_ADD\" defaultMessage=\"Add\" /> */}\r\n                                            <FormattedMessage id='IDS_CLINICALSPEC' defaultMessage='Clinical Spec' />\r\n                                        </Nav.Item>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* {props.siteAddress.nmanufsitecode === props.masterData.ManufacturerSiteAddress.nmanufsitecode ? */}\r\n                            <Row>\r\n                                <Col>\r\n                                    {/* <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            <Card.Body className='form-static-wrap padding-class'> */}\r\n                                                <DataGrid\r\n                                                    primaryKeyField={\"ntestgrouptestclinicspeccode\"}\r\n                                                    expandField=\"expanded\"\r\n\r\n                                                    //detailedFieldList={props.detailedFieldList || []}\r\n                                                    gridHeight={gridHeight + 'px'}\r\n                                                    extractedColumnList={props.extractedColumnList || []}\r\n                                                    //inputParam={props.inputParam}\r\n                                                    userInfo={props.userInfo}\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    //gridHeight={'200px'}\r\n                                                    isActionRequired={true}\r\n                                                    //fixedScroll={true}\r\n                                                    data={props.data}\r\n                                                    total={props.data && props.data.length || 0}\r\n                                                    dataState={props.dataState}\r\n                                                    dataStateChange={props.dataStateChange}\r\n                                                    dataResult={process(testGroupTestClinicalSpec || [], props.dataState)}{...props.dataState}\r\n                                                    controlMap={props.controlMap}\r\n                                                    userRoleControlRights={[]}\r\n                                                    methodUrl=\"testgrouptestclinicspeccode\"\r\n                                                    pageable={true}\r\n                                                    selectedId={props.selectedId}\r\n                                                    hasDynamicColSize={props.hasDynamicColSize}\r\n                                                    hideDetailBand={true}\r\n                                                    actionIcons={[{\r\n                                                        title: props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                        controlname: \"faPencilAlt\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: userRoleControlRights.indexOf(editClinicalSpec) === -1,\r\n                                                        //onClick: (viewdetails) => this.ViewAuditDetails(viewdetails)\r\n                                                        onClick: (viewdetails) => props.EditSpecDetails(viewdetails,editClinicalSpec)\r\n\r\n                                                    },\r\n                                                    {\r\n                                                        title: props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        controlname: \"faTrashAlt\",\r\n                                                        objectName: \"mastertodelete\",\r\n                                                        hidden: userRoleControlRights.indexOf(deleteClinicalSpec) === -1,\r\n                                                        onClick: (viewdetails) => props.DeleteSpecDetails(viewdetails,deleteClinicalSpec)\r\n                                                    }\r\n                                                    ]}\r\n\r\n\r\n\r\n                                                >\r\n                                                </DataGrid>\r\n\r\n                                            {/* </Card.Body>\r\n                                        </Card>\r\n                                    </ContentPanel> */}\r\n                                </Col>\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                </>\r\n            }\r\n            {selectedParameter.nparametertypecode === parameterType.PREDEFINED &&\r\n                <PredefinedParameterTab\r\n                    primaryKeyName=\"ntestgrouptestpredefcode\"\r\n                    predefinedParameterList={testGroupTestPredefinedParameter}\r\n                    selectedParameter={selectedParameter}\r\n                    userInfo={userInfo}\r\n                    optionalData={{ testgroupspecification: selectedSpecification }}\r\n                    methodUrl=\"TestGroupPredefParameter\"\r\n                    addId={props.controlMap.has(\"AddCodedResult\") && props.controlMap.get(\"AddCodedResult\").ncontrolcode}\r\n                    editId={props.controlMap.has(\"EditCodedResult\") && props.controlMap.get(\"EditCodedResult\").ncontrolcode}\r\n                    deleteId={props.controlMap.has(\"DeleteCodedResult\") && props.controlMap.get(\"DeleteCodedResult\").ncontrolcode}\r\n                    userRoleControlRights={props.userRoleControlRights}\r\n                    deleteAction={props.deleteAction}\r\n                    onSwitchChange={props.onSwitchChange}\r\n                    openModal={props.addTestGroupCodedResult}\r\n                    masterData={props.masterData}\r\n                />\r\n            }\r\n            {selectedParameter.nparametertypecode === parameterType.CHARACTER &&\r\n                testGroupCharParameter.length > 0 && props.testGroupCharParameter[0].scharname &&\r\n                props.testGroupCharParameter[0].scharname !== \"null\" &&\r\n                <>\r\n                    <Row>\r\n                        <Col >\r\n                            <div className=\"horizontal-line\"></div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Col md={12}>\r\n                        <FormGroup>\r\n                            <FormLabel>{props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}</FormLabel>\r\n                            <ReadOnlyText>{props.testGroupCharParameter[0].scharname}</ReadOnlyText>\r\n                        </FormGroup>\r\n                    </Col>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TestGroupParameterAccordion);\r\n"]},"metadata":{},"sourceType":"module"}