{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{sortData,constructOptionList,rearrangeDateFormat}from'../components/CommonScript';import{intl}from'../components/App';import{transactionStatus}from'../components/Enumeration';export function getGoodsInFilterSubmit(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"goodsin/getGoodsInData\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);delete inputParam.masterData.searchedData;var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getGoodsInComboService(inputParam){return function(dispatch){// if(inputParam.operation === \"update\" && inputParam.masterData.selectedGoodsIn.ntransactionstatus=== transactionStatus.APPROVED){\n//     toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORDTOEDIT\" }));\n// }else {\nvar urlArray=[];var selectedId=null;var Client=null;var Project=null;var addGoodsInService=rsapi.post(\"goodsin/getGoodsInAdd\",{userinfo:inputParam.userInfo});if(inputParam.operation===\"create\"){urlArray=[addGoodsInService];}else if(inputParam.operation===\"update\"){var _rsapi$post;var clientService=rsapi.post(\"goodsin/getClient\",{\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"userinfo\":inputParam.userInfo});var projectTypeService=rsapi.post(\"goodsin/getProjectType\",{\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"nclientcode\":inputParam.masterData.selectedGoodsIn.nclientcode,\"userinfo\":inputParam.userInfo});var projectService=rsapi.post(\"goodsin/getProjectMaster\",{\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"nclientcode\":inputParam.masterData.selectedGoodsIn.nclientcode,\"nprojecttypecode\":inputParam.masterData.selectedGoodsIn.nprojecttypecode,\"userinfo\":inputParam.userInfo});var GoodsInById=rsapi.post(\"goodsin/getGoodsInEdit\",(_rsapi$post={},_defineProperty(_rsapi$post,inputParam.primaryKeyField,inputParam.masterData.selectedGoodsIn[inputParam.primaryKeyField]),_defineProperty(_rsapi$post,\"userinfo\",inputParam.userInfo),_rsapi$post));urlArray=[addGoodsInService,clientService,projectService,GoodsInById];selectedId=inputParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var data=response[0].data;var clientCatList=constructOptionList(data[\"ClientCategory\"]||[],\"nclientcatcode\",\"sclientcatname\",undefined,undefined,false);var ClientCategory=clientCatList.get(\"OptionList\");var projectTypeList=constructOptionList(data[\"ProjectType\"]||[],\"nprojecttypecode\",\"sprojecttypename\",undefined,undefined,false);var ProjectType=projectTypeList.get(\"OptionList\");var courierList=constructOptionList(data[\"Courier\"]||[],\"ncouriercode\",\"scouriername\",undefined,undefined,false);var Courier=courierList.get(\"OptionList\");var timezoneList=constructOptionList(data[\"TimeZone\"]||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,false);var TimeZone=timezoneList.get(\"OptionList\");if(inputParam.operation===\"update\"){var clientList=constructOptionList(response[1].data[\"Client\"]||[],\"nclientcode\",\"sclientname\",undefined,undefined,false);Client=clientList.get(\"OptionList\");var projectList=constructOptionList(response[2].data[\"ProjectMaster\"]||[],\"nprojectmastercode\",\"sprojectname\",undefined,undefined,false);Project=projectList.get(\"OptionList\");var editData=response[3].data.selectedGoodsIn;selectedRecord[\"nnoofpackages\"]=editData.nnoofpackages;selectedRecord[\"sconsignmentno\"]=editData.sconsignmentno;selectedRecord[\"noutofhours\"]=editData.noutofhours;selectedRecord[\"ssecurityrefno\"]=editData.ssecurityrefno;selectedRecord[\"scomments\"]=editData.scomments;selectedRecord[\"dgoodsindatetime\"]=rearrangeDateFormat(inputParam.userInfo,editData.sgoodsindatetime);selectedRecord[\"nclientcatcode\"]={\"value\":editData[\"nclientcatcode\"],\"label\":editData[\"sclientcatname\"]};selectedRecord[\"nclientcode\"]={\"value\":editData[\"nclientcode\"],\"label\":editData[\"sclientname\"]};selectedRecord[\"nprojecttypecode\"]={\"value\":editData[\"nprojecttypecode\"],\"label\":editData[\"sprojecttypename\"]};selectedRecord[\"nprojectmastercode\"]={\"value\":editData[\"nprojectmastercode\"],\"label\":editData[\"sprojectname\"]};selectedRecord[\"ncouriercode\"]={\"value\":editData[\"ncouriercode\"],\"label\":editData[\"scouriername\"]};selectedRecord=_objectSpread({},selectedRecord);}dispatch({type:DEFAULT_RETURN,payload:{ClientCategory:ClientCategory,Client:Client,ProjectType:ProjectType,Project:Project,Courier:Courier,TimeZone:TimeZone,selectedRecord:selectedRecord,openModal:true,operation:inputParam.operation,screenName:inputParam.screenName,ncontrolCode:inputParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};//}\n}export function getClient(nclientcatcode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"goodsin/getClient\",{\"nclientcatcode\":nclientcatcode,\"userinfo\":userInfo}).then(function(response){var Client=[];var ProjectType=[];var Project=[];var ClientMap=constructOptionList(response.data.Client||[],\"nclientcode\",\"sclientname\",undefined,undefined,false);Client=ClientMap.get(\"OptionList\");selectedRecord[\"nclientcode\"]=\"\";var ProjectTypeMap=constructOptionList(response.data.ProjectType||[],\"nprojecttypecode\",\"sprojecttypename\",undefined,undefined,false);ProjectType=ProjectTypeMap.get(\"OptionList\");selectedRecord[\"nprojecttypecode\"]=\"\";var ProjectMap=constructOptionList(response.data.ProjectMaster||[],\"nprojectmastercode\",\"sprojectname\",undefined,undefined,false);Project=ProjectMap.get(\"OptionList\");selectedRecord[\"nprojectmastercode\"]=\"\";dispatch({type:DEFAULT_RETURN,payload:{Client:Client,ProjectType:ProjectType,Project:Project,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getProjectType(nclientcatcode,nclientcode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"goodsin/getProjectType\",{\"nclientcatcode\":nclientcatcode,\"nclientcode\":nclientcode,\"userinfo\":userInfo}).then(function(response){var ProjectType=[];var Project=[];var ProjectTypeMap=constructOptionList(response.data.ProjectType||[],\"nprojecttypecode\",\"sprojecttypename\",undefined,undefined,false);ProjectType=ProjectTypeMap.get(\"OptionList\");selectedRecord[\"nprojecttypecode\"]=\"\";var ProjectMap=constructOptionList(response.data.ProjectMaster||[],\"nprojectmastercode\",\"sprojectname\",undefined,undefined,false);Project=ProjectMap.get(\"OptionList\");selectedRecord[\"nprojectmastercode\"]=\"\";dispatch({type:DEFAULT_RETURN,payload:{ProjectType:ProjectType,Project:Project,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getProject(nclientcatcode,nclientcode,nprojecttypecode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"goodsin/getProjectMaster\",{\"nclientcatcode\":nclientcatcode,\"nclientcode\":nclientcode,\"nprojecttypecode\":nprojecttypecode,\"userinfo\":userInfo}).then(function(response){var Project=[];var ProjectMap=constructOptionList(response.data.ProjectMaster||[],\"nprojectmastercode\",\"sprojectname\",undefined,undefined,false);Project=ProjectMap.get(\"OptionList\");selectedRecord[\"nprojectmastercode\"]=\"\";dispatch({type:DEFAULT_RETURN,payload:{Project:Project,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export var getGoodsInDetail=function getGoodsInDetail(goodsInItem,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/goodsin/getActiveGoodsInById\",{ngoodsincode:goodsInItem.ngoodsincode,userinfo:userInfo}).then(function(response){var masterData1=_objectSpread(_objectSpread({},masterData),response.data);masterData=masterData1;sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{// masterData,\nloading:false,dataState:undefined,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export function viewInformation(ngoodsincode,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/goodsin/getActiveGoodsInById\",{ngoodsincode:ngoodsincode,userinfo:userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedRecordView:response.data.selectedGoodsIn}),loading:false,operation:\"view\",openModal:true,screenName:\"IDS_GOODSIN\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function checkListGoodsIn(masterData,selectedGoodsIn,Checklist,ncontrolCode,userInfo){return function(dispatch){dispatch(initRequest(true));if(Checklist&&Checklist.nchecklistversioncode!==undefined){rsapi.post(\"/goodsin/getChecklistDesign\",{nchecklistversioncode:Checklist.nchecklistversioncode,ngoodsincode:selectedGoodsIn.ngoodsincode,userinfo:userInfo}).then(function(response){var selectedRecord={};var lsteditedQB=[];selectedRecord={sgoodsinid:selectedGoodsIn.sgoodsinid,sclientname:selectedGoodsIn.sclientname,ngoodsincode:selectedGoodsIn.ngoodsincode};response.data.ChecklistData.map(function(checklist){selectedRecord[checklist.nchecklistversionqbcode]={nchecklistqbcode:checklist.nchecklistqbcode,nchecklistversioncode:checklist.nchecklistversioncode,nchecklistversionqbcode:checklist.nchecklistversionqbcode,sdefaultvalue:checklist.nchecklistcomponentcode===7?rearrangeDateFormat(userInfo,checklist.sdefaultvalue):checklist.sdefaultvalue,//  sdefaultvalue: checklist.sdefaultvalue,\nsgoodsinid:selectedGoodsIn.sgoodsinid,sclientname:selectedGoodsIn.sclientname};lsteditedQB.push(checklist.nchecklistversionqbcode);return null;});response.data.ChecklistData.map(function(checklist){selectedRecord['jsondata']=_objectSpread(_objectSpread({},selectedRecord['jsondata']),{},_defineProperty({},checklist.nchecklistversionqbcode,checklist.sdefaultvalue));return null;});selectedRecord[\"editedQB\"]=lsteditedQB;dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),//selectedId: response.data.selectedId,\nselectedRecord:selectedRecord,loading:false,screenName:\"IDS_GOODSINCHECKLIST\",openTemplateModal:true,needSaveButton:true,operation:\"checklist\",ncontrolCode:ncontrolCode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_CONFIGURETHECHECKLIST\"}));}};}export function downloadGoodsIn(masterData,selectedRecord,userInfo,REPORTTYPE,ncontrolcode){return function(dispatch){if(selectedRecord.ntransactionstatus===transactionStatus.RECEIVED||selectedRecord.ntransactionstatus===transactionStatus.APPROVED){//|| transactionStatus.APPROVED\ndispatch(initRequest(true));rsapi.post(\"/goodsin/goodsinReport\",{masterData:masterData,ngoodsincode:selectedRecord.ngoodsincode,userinfo:userInfo,nreporttypecode:REPORTTYPE,ncontrolcode:ncontrolcode}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false,showConfirmAlert:false}});document.getElementById(\"download_data\").setAttribute(\"href\",response.data.filepath);document.getElementById(\"download_data\").click();}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTDOENLOADRECEIVEAPPROVE\"}));}};}export function onSaveGoodsInCheckList(inputParam){return function(dispatch){var listResultCheckList=[];if(inputParam.selectedRecord&&inputParam.selectedRecord.jsondata){inputParam.selectedRecord.editedQB.map(function(qbcode){return listResultCheckList.push(inputParam.selectedRecord[qbcode]);});var inputParamData={ngoodsincode:inputParam.selectedRecord.ngoodsincode,GoodsInCheckList:{nchecklistversioncode:listResultCheckList[0].nchecklistversioncode,nchecklistqbcode:listResultCheckList[0].nchecklistqbcode,jsondata:inputParam.selectedRecord.jsondata,ngoodsincode:inputParam.selectedRecord.ngoodsincode},userinfo:inputParam.inputData.userinfo,ndesigntemplatemappingcode:inputParam.inputData[\"ndesigntemplatemappingcode\"],ncontrolcode:-1};dispatch(initRequest(true));rsapi.post(\"goodsin/createGoodsInChecklist\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},templateData:undefined,openTemplateModal:false,openModal:false,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{openTemplateModal:false,selectedRecord:{},loading:false,loadEsign:false}});}};}export function validateEsignGoodsIn(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=inputParam.screenData.inputParam.methodUrl;inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}dispatch(dispatchMethods(inputParam[\"screenData\"]));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}function dispatchMethods(screenData){return function(dispatch){var action=screenData.inputParam.operation;switch(action){case\"checklist\":dispatch(onSaveGoodsInCheckList(screenData.inputParam,screenData.masterData));break;default:break;}};}// export function getEditGoodsInSampleService(goodsinSampleEditParam, columnList,selectedRecord1, childColumnList, comboComponents,\n//     withoutCombocomponent) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         const { userInfo, operation } = { ...goodsinSampleEditParam };\n//         let masterData = goodsinSampleEditParam[\"masterData\"];\n//         if (masterData[\"selectedSample\"].length > 1 ||\n//             masterData[\"selectedSample\"]\n//                 .findIndex(x => x[goodsinSampleEditParam.primaryKeyName] === goodsinSampleEditParam[\"editrow\"][goodsinSampleEditParam.primaryKeyName])\n//             === -1) {\n//             inputParam.editRegParam[\"getSampleChildDetail\"] = true;\n//         }\n//         masterData[\"selectedSample\"] = [];\n//         masterData[\"selectedSample\"].push(goodsinSampleEditParam[\"editrow\"]);\n//         const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n//         let urlArray = [];\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//         // const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\n//         //     ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\n//         //     childcolumnlist: childColumnList,\n//         //     userinfo: userInfo\n//         // })\n//         const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n//             datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n//             userinfo: userInfo\n//         })\n//         urlArray = [timeZoneService,  dateService]\n//         Axios.all(urlArray)\n//             .then(response => {\n//                 let selectedRecord = { ...response[1].data[\"EditData\"] };\n//                 selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\n//                 const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                 const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }              \n//                     const languagetypeCode = undefined\n//                     const comboData = response[1].data;\n//                     delete comboData['EditData']\n//                     let comboValues = {}\n//                     if (columnList.length > 0) {\n//                         columnList.map(x => {\n//                             if (x.inputtype === 'combo') {\n//                                 if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n//                                 {\n//                                     if (comboData[x.label].length > 0) {\n//                                         if (comboData[x.label][0].label === undefined) {\n//                                             const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\n//                                             comboData[x.label] = optionList.get(\"OptionList\");\n//                                         } else {\n//                                             comboData[x.label] = comboData[x.label]\n//                                             const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\n//                                         }\n//                                     } else {\n//                                         comboData[x.label] = []\n//                                     }\n//                                     //comboValues = childComboLoad(x, comboData, selectedRecord, \n//                                     //   childColumnList, withoutCombocomponent)\\\n//                                     comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\n//                                         childColumnList, withoutCombocomponent)\n//                                 } else {\n//                                     comboValues = {\n//                                         \"comboData\": comboData,\n//                                     }\n//                                 }\n//                             } else {\n//                                 comboValues = {\n//                                     comboData: comboData,\n//                                     ...comboValues\n//                                 }\n//                             }\n//                         })\n//                     }\n//                     else {\n//                         comboValues = {\n//                             \"comboData\": comboData,\n//                         }\n//                     }\n//                     withoutCombocomponent.map(date => {\n//                         if (date.inputtype === 'date') {\n//                             selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n//                                 rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\n//                             if (date.nperiodcode) {\n//                                 selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\n//                                     new Date(response[2].data[date.label][\"datevalue\"]) : null;\n//                             } else {\n//                                 selectedRecord[date.label + \"value\"] = new Date();\n//                             }\n//                             if (date.hidebeforedate) {\n//                                 selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\n//                             }\n//                             if (date.hideafterdate) {\n//                                 selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\n//                             }\n//                         }\n//                     })\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             operation: goodsinSampleEditParam.operation,\n//                             screenName: goodsinSampleEditParam.screenName,\n//                             timeZoneList,\n//                             defaultTimeZone,\n//                             selectedRecord,\n//                             ncontrolCode: goodsinSampleEditParam.ncontrolCode,\n//                             loadPreregister: true,\n//                             parentPopUpSize: \"xl\",\n//                             loading: false,\n//                             showSample: undefined,\n//                             comboData: comboValues.comboData,\n//                             childColumnList, comboComponents,\n//                             withoutCombocomponent,\n//                             columnList,\n//                             masterData\n//                         }\n//                     })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.info(intl.formatMessage({\n//                         id: error.response.data\n//                     }));\n//                 }\n//             })\n//     }\n// }\n// export function getGoodsInComboService(goodsInParam) {\n//     return function (dispatch) {\n//         const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", { userinfo: goodsInParam.userInfo });\n//         const courierService = rsapi.post(\"courier/getAllActiveCourier\", { userinfo: goodsInParam.userInfo });\n//         const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", { userinfo: goodsInParam.userInfo });\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//         const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: goodsInParam.userInfo });\n//         let urlArray = [];\n//         let selectedId = null;\n//         if (goodsInParam.operation === \"create\") {\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\n//         }\n//         else {\n//             const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\n//             const goodsInById = rsapi.post(url, { [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue, \"userinfo\": goodsInParam.userInfo });\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\n//             selectedId = goodsInParam.primaryKeyValue;\n//         }\n//         dispatch(initRequest(true));\n//         Axios.all(urlArray)\n//             .then(response => {\n//                 const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\",\n//                     \"smanufname\", undefined, undefined, true);\n//                 const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\",\n//                     \"scouriername\", undefined, undefined, false);\n//                 const recipientMap = constructOptionList(response[2].data || [], \"nusercode\",\n//                     \"susername\", undefined, undefined, true);\n//                 const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\n//                     \"stimezoneid\", undefined, undefined, true);\n//                 const manufacturerList = manufacturerMap.get(\"OptionList\");\n//                 const courierList = courierMap.get(\"OptionList\");\n//                 const recipientList = recipientMap.get(\"OptionList\");\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                 //const currentTime = new Date(response[4].data);\n//                 const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n//                 let validRecord = true;\n//                 let selectedRecord = {\n//                     //\"dgoodsindate\": new Date(response[4].data),\n//                     \"ntzgoodsindate\": {\n//                         \"value\": goodsInParam.userInfo.ntimezonecode,\n//                         \"label\": goodsInParam.userInfo.stimezoneid\n//                     },\n//                     \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\n//                 };\n//                 if (goodsInParam.operation === \"update\") {\n//                     if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\n//                         validRecord = false;\n//                     }\n//                     else {\n//                         let manufacturer = [];\n//                         let courier = [];\n//                         let user = [];\n//                         let timeZone = [];\n//                         selectedRecord = response[5].data;\n//                         manufacturer.push({ \"value\": response[5].data[\"nmanufcode\"], \"label\": response[5].data[\"smanufname\"] });\n//                         if (response[5].data[\"ncouriercode\"] !== -1) {\n//                             courier.push({ \"value\": response[5].data[\"ncouriercode\"], \"label\": response[5].data[\"scouriername\"] });\n//                             selectedRecord[\"ncouriercode\"] = courier[0];\n//                         }\n//                         else {\n//                             selectedRecord[\"ncouriercode\"] = undefined;\n//                         }\n//                         user.push({ \"value\": response[5].data[\"nrecipientcode\"], \"label\": response[5].data[\"suserfullname\"] });\n//                         timeZone.push({ \"value\": response[5].data[\"ntzgoodsindate\"], \"label\": response[5].data[\"stzgoodsindate\"] });\n//                         selectedRecord[\"nmanufcode\"] = manufacturer[0];\n//                         selectedRecord[\"nrecipientcode\"] = user[0];\n//                         //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\n//                         selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\n//                         selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\n//                         selectedRecord[\"stzgoodsindate\"] = timeZone[0].label;\n//                        //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\n//                        selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\n//                     }\n//                 }\n//                 else {\n//                     //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\n//                     selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n//                     selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\n//                     selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\n//                     selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\");\n//                     // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\n//                     //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\n//                 }\n//                 if (validRecord) {\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             currentTime,\n//                             manufacturerList,//:response[0].data || [], \n//                             courierList,//:response[1].data  || [], \n//                             recipientList,//:response[2].data  || [],   \n//                             timeZoneList,//:response[3].data  || [],                                                                                     \n//                             operation: goodsInParam.operation, screenName: goodsInParam.screenName,\n//                             selectedRecord,\n//                             openModal: true,\n//                             ncontrolCode: goodsInParam.ncontrolCode,\n//                             loading: false, selectedId\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINALREADYRECEIVED\" }));\n//                 }\n//             })\n//             .catch(error => {              \n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n// export function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"goodsin/getGoodsIn\", { nrmsno: goodsIn.nrmsno, fromDate, toDate, userinfo: userInfo })\n//             .then(response => {\n//                 masterData = { ...masterData, ...response.data };\n//                 sortData(masterData);\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(intl.formatMessage({ id: error.message }));\n//                 }\n//                 else {\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\n//                 }\n//             })\n//     }\n// }\n// export function getChainCustodyComboDataService(chainCustodyParam) {\n//     return function (dispatch) {\n//         // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\n//         //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\n//         // }\n//         // else {\n//         let selectedId = null;\n//         let selectedRecord = {\n//             \"dreceiveddate\": new Date(),\n//             \"ntzreceiveddate\": {\n//                 \"value\": chainCustodyParam.userInfo.ntimezonecode,\n//                 \"label\": chainCustodyParam.userInfo.stimezoneid\n//             },\n//             \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\n//         };\n//         if (chainCustodyParam.operation === \"update\") {\n//             if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\n//                 selectedId = chainCustodyParam.primaryKeyValue;\n//                 const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//                 const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo });\n//                 const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\n//                 const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\n//                 dispatch(initRequest(true));\n//                 Axios.all(urlArray)\n//                     // dispatch(initRequest(true));\n//                     // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\n//                     .then(response => {\n//                         selectedRecord = response[1].data;\n//                         let timeZone = [];\n//                         timeZone.push({ \"value\": response[1].data[\"ntzreceiveddate\"], \"label\": response[1].data[\"stzreceiveddate\"] });\n//                         const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\n//                             \"stimezoneid\", undefined, undefined, true);\n//                         const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                         selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\n//                         selectedRecord[\"stzreceiveddate\"] = timeZone[0].label;\n//                         //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\n//                         selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\n//                         dispatch({\n//                             type: DEFAULT_RETURN, payload: {\n//                                 timeZoneList,//:response[0].data  || [],                                                                                 \n//                                 operation: chainCustodyParam.operation,\n//                                 screenName: chainCustodyParam.screenName,\n//                                 selectedRecord,\n//                                 openChildModal: true,\n//                                 ncontrolCode: chainCustodyParam.ncontrolCode,\n//                                 loading: false, selectedId,\n//                                 //currentTime:new Date(response[2].data)\n//                                 currentTime:rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\n//                             }\n//                         });\n//                     })\n//                     .catch(error => {\n//                         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                         if (error.response.status === 500) {\n//                             toast.error(intl.formatMessage({ id: error.message }));\n//                         }\n//                         else {\n//                             toast.warn(intl.formatMessage({ id: error.response.data }));\n//                         }\n//                     })\n//             }\n//             else {\n//                 toast.warn(intl.formatMessage({ id: \"IDS_INVALIDOWNERTOEDIT\" }));\n//             }\n//         }\n//         else {\n//             dispatch(initRequest(true));\n//             const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//             const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\n//             const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\n//                 nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\n//                 userinfo: chainCustodyParam.userInfo\n//             });\n//             let urlArray = [timeZoneService, UTCtimeZoneService,validateGoodsIn];\n//             return Axios.all(urlArray)\n//                 .then(response => {\n//                     const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\n//                         \"stimezoneid\", undefined, undefined, true);\n//                     const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             timeZoneList,//:response.data  || [],\n//                             operation: chainCustodyParam.operation,\n//                             selectedRecord: { ...selectedRecord, \n//                                 //dreceiveddate: new Date(response[1].data) \n//                                 dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n//                             },\n//                             openChildModal: true,\n//                             screenName: chainCustodyParam.screenName,\n//                             ncontrolCode: chainCustodyParam.ncontrolCode,\n//                             loading: false, selectedId,\n//                             //currentTime:new Date(response[1].data)\n//                             currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(intl.formatMessage({ id: error.message }));\n//                     }\n//                     else {\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\n//                     }\n//                 })\n//         }\n//     }\n//     // }\n// }\n// export function getGoodsInPrinterComboService(inputParam) {\n//     return (dispatch) => {\n//         dispatch(initRequest(true))\n//         rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\n//             .then(response => {\n//                 let selectedRecord = {\n//                     sprintername: {\n//                         value: response.data[0].sprintername,\n//                         label: response.data[0].sprintername,\n//                         item: response.data[0]\n//                     }\n//                 };\n//                 const printerList = constructOptionList(response.data || [], \"sprintername\",\n//                     \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         printerList,\n//                         selectedRecord,\n//                         operation: \"printer\",\n//                         screenName: \"PrintBarcode\",\n//                         dataToPrint: inputParam.selectedGoodsIn.nrmsno,\n//                         ncontrolcode: inputParam.ncontrolcode,\n//                         loading: false,\n//                         openModal: true\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\n//                 }\n//             });\n//     }\n// }\n// export function reloadGoodsIn(inputParam) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"goodsin/getGoodsIn\", {...inputParam.inputData})\n//             .then(response => {\n//                 let responseData = { ...response.data }\n//                 responseData = sortData(responseData)\n//                 let masterData = {\n//                     ...inputParam.masterData,\n//                     ...responseData,\n//                 }\n//                 if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n//                     inputParam.searchRef.current.value = \"\";\n//                     masterData['searchedData'] = undefined\n//                 }\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData,\n//                         loading: false,\n//                         showFilter: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/GoodsInAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","sortData","constructOptionList","rearrangeDateFormat","intl","transactionStatus","getGoodsInFilterSubmit","inputParam","dispatch","post","inputData","then","response","responseData","data","masterData","searchedData","type","payload","loading","catch","error","status","message","warn","getGoodsInComboService","urlArray","selectedId","Client","Project","addGoodsInService","userinfo","userInfo","operation","clientService","selectedGoodsIn","nclientcatcode","projectTypeService","nclientcode","projectService","nprojecttypecode","GoodsInById","primaryKeyField","primaryKeyValue","all","selectedRecord","clientCatList","undefined","ClientCategory","get","projectTypeList","ProjectType","courierList","Courier","timezoneList","TimeZone","clientList","projectList","editData","nnoofpackages","sconsignmentno","noutofhours","ssecurityrefno","scomments","sgoodsindatetime","openModal","screenName","ncontrolCode","getClient","ClientMap","ProjectTypeMap","ProjectMap","ProjectMaster","getProjectType","getProject","getGoodsInDetail","goodsInItem","ngoodsincode","masterData1","dataState","viewInformation","selectedRecordView","checkListGoodsIn","Checklist","nchecklistversioncode","lsteditedQB","sgoodsinid","sclientname","ChecklistData","map","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","nchecklistcomponentcode","push","openTemplateModal","needSaveButton","formatMessage","id","downloadGoodsIn","REPORTTYPE","ncontrolcode","ntransactionstatus","RECEIVED","APPROVED","nreporttypecode","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click","onSaveGoodsInCheckList","listResultCheckList","jsondata","editedQB","qbcode","inputParamData","GoodsInCheckList","ndesigntemplatemappingcode","templateData","validateEsignGoodsIn","methodUrl","screenData","toLowerCase","dispatchMethods","info","action"],"mappings":"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":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getGoodsInFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"goodsin/getGoodsInData\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                delete inputParam.masterData.searchedData\r\n\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }               \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,                       \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getGoodsInComboService (inputParam) {\r\n    return function (dispatch){\r\n\r\n        // if(inputParam.operation === \"update\" && inputParam.masterData.selectedGoodsIn.ntransactionstatus=== transactionStatus.APPROVED){\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORDTOEDIT\" }));\r\n        // }else {\r\n            \r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        let Client =null;\r\n        let Project =null;\r\n      \r\n            const addGoodsInService =rsapi.post(\"goodsin/getGoodsInAdd\",{userinfo:inputParam.userInfo});\r\n            \r\n            if (inputParam.operation === \"create\") {\r\n\r\n                urlArray = [addGoodsInService];\r\n            }else if(inputParam.operation === \"update\"){\r\n\r\n                const clientService = rsapi.post(\"goodsin/getClient\", {\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"userinfo\": inputParam.userInfo });\r\n                const projectTypeService = rsapi.post(\"goodsin/getProjectType\",{\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"nclientcode\":inputParam.masterData.selectedGoodsIn.nclientcode,\"userinfo\": inputParam.userInfo})\r\n                const projectService = rsapi.post(\"goodsin/getProjectMaster\", {\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"nclientcode\":inputParam.masterData.selectedGoodsIn.nclientcode,\"nprojecttypecode\":inputParam.masterData.selectedGoodsIn.nprojecttypecode,\"userinfo\": inputParam.userInfo });\r\n                const GoodsInById = rsapi.post(\"goodsin/getGoodsInEdit\", { [inputParam.primaryKeyField]: inputParam.masterData.selectedGoodsIn[inputParam.primaryKeyField], \"userinfo\": inputParam.userInfo });\r\n\r\n                urlArray = [addGoodsInService,clientService,projectService,GoodsInById];\r\n                selectedId = inputParam.primaryKeyValue;\r\n\r\n            }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n        .then(response => {\r\n            let selectedRecord = {};\r\n          \r\n                let data=response[0].data;\r\n                const clientCatList = constructOptionList(data[\"ClientCategory\"] || [], \"nclientcatcode\",\"sclientcatname\", undefined, undefined, false);   \r\n                const ClientCategory = clientCatList.get(\"OptionList\");\r\n\r\n                const projectTypeList = constructOptionList(data[\"ProjectType\"] || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\r\n                const ProjectType = projectTypeList.get(\"OptionList\");\r\n                             \r\n                const courierList = constructOptionList(data[\"Courier\"] || [], \"ncouriercode\", \"scouriername\", undefined, undefined, false);\r\n                const Courier = courierList.get(\"OptionList\");\r\n\r\n                const timezoneList = constructOptionList(data[\"TimeZone\"] || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\r\n                const TimeZone = timezoneList.get(\"OptionList\");\r\n\r\n\r\n                if(inputParam.operation === \"update\"){\r\n\r\n                    const clientList = constructOptionList( response[1].data[\"Client\"] || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);   \r\n                    Client = clientList.get(\"OptionList\");\r\n    \r\n                    const projectList = constructOptionList( response[2].data[\"ProjectMaster\"] || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, false);\r\n                    Project = projectList.get(\"OptionList\");\r\n\r\n                    const editData = response[3].data.selectedGoodsIn;\r\n                    \r\n                    selectedRecord[\"nnoofpackages\"] = editData.nnoofpackages;\r\n                    selectedRecord[\"sconsignmentno\"] = editData.sconsignmentno;\r\n                    selectedRecord[\"noutofhours\"] = editData.noutofhours;\r\n                    selectedRecord[\"ssecurityrefno\"] = editData.ssecurityrefno;\r\n                    selectedRecord[\"scomments\"] = editData.scomments;\r\n                    selectedRecord[\"dgoodsindatetime\"] = rearrangeDateFormat(inputParam.userInfo,editData.sgoodsindatetime);\r\n                    selectedRecord[\"nclientcatcode\"] ={\r\n                        \"value\": editData[\"nclientcatcode\"],\r\n                        \"label\": editData[\"sclientcatname\"]\r\n                    };\r\n                    selectedRecord[\"nclientcode\"] ={\r\n                        \"value\": editData[\"nclientcode\"],\r\n                        \"label\": editData[\"sclientname\"]\r\n                    };\r\n                    selectedRecord[\"nprojecttypecode\"] ={\r\n                        \"value\": editData[\"nprojecttypecode\"],\r\n                        \"label\": editData[\"sprojecttypename\"]\r\n                    };\r\n                    selectedRecord[\"nprojectmastercode\"] ={\r\n                        \"value\": editData[\"nprojectmastercode\"],\r\n                        \"label\": editData[\"sprojectname\"]\r\n                    };\r\n                    selectedRecord[\"ncouriercode\"] ={\r\n                        \"value\": editData[\"ncouriercode\"],\r\n                        \"label\": editData[\"scouriername\"]\r\n                    };            \r\n\r\n                    selectedRecord = {...selectedRecord}\r\n                }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    ClientCategory,\r\n                    Client,\r\n                    ProjectType,\r\n                    Project,\r\n                    Courier,\r\n                    TimeZone,\r\n                    selectedRecord, \r\n                    openModal: true,\r\n                    operation: inputParam.operation, \r\n                    screenName: inputParam.screenName,\r\n                    ncontrolCode: inputParam.ncontrolCode, \r\n                    loading: false,\r\n                    selectedId\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n        }\r\n\r\n\r\n\r\n    //}\r\n}\r\n\r\nexport function getClient(nclientcatcode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getClient\", {\"nclientcatcode\": nclientcatcode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Client = [];  \r\n                let ProjectType =[];\r\n                let Project = [];\r\n\r\n                const ClientMap = constructOptionList(response.data.Client || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);\r\n                Client = ClientMap.get(\"OptionList\");\r\n                selectedRecord[\"nclientcode\"]=\"\";\r\n\r\n                const ProjectTypeMap = constructOptionList(response.data.ProjectType || [], \"nprojecttypecode\",\"sprojecttypename\", undefined, undefined, false);\r\n                ProjectType = ProjectTypeMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojecttypecode\"]=\"\";\r\n\r\n                 \r\n                const ProjectMap = constructOptionList(response.data.ProjectMaster || [], \"nprojectmastercode\",\"sprojectname\", undefined, undefined, false);\r\n                Project = ProjectMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojectmastercode\"]=\"\"; \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Client,\r\n                        ProjectType,\r\n                        Project,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getProjectType(nclientcatcode,nclientcode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getProjectType\", {\"nclientcatcode\": nclientcatcode,\"nclientcode\":nclientcode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let ProjectType = [];  \r\n                let Project = [];\r\n                const ProjectTypeMap = constructOptionList(response.data.ProjectType || [], \"nprojecttypecode\",\"sprojecttypename\", undefined, undefined, false);\r\n                ProjectType = ProjectTypeMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojecttypecode\"]=\"\";\r\n\r\n                const ProjectMap = constructOptionList(response.data.ProjectMaster || [], \"nprojectmastercode\",\"sprojectname\", undefined, undefined, false);\r\n                Project = ProjectMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojectmastercode\"]=\"\";    \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ProjectType,\r\n                        Project,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getProject(nclientcatcode,nclientcode,nprojecttypecode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getProjectMaster\", {\"nclientcatcode\":nclientcatcode,\"nclientcode\":nclientcode,\"nprojecttypecode\": nprojecttypecode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Project = []; \r\n                const ProjectMap = constructOptionList(response.data.ProjectMaster || [], \"nprojectmastercode\",\"sprojectname\", undefined, undefined, false);\r\n                Project = ProjectMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojectmastercode\"]=\"\";        \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Project,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const getGoodsInDetail = (goodsInItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/goodsin/getActiveGoodsInById\", {ngoodsincode: goodsInItem.ngoodsincode,userinfo: userInfo })\r\n            .then(response => {\r\n                \r\n\r\n                    let masterData1  = {...masterData, ...response.data }\r\n\r\n                    masterData=masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function viewInformation(ngoodsincode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/goodsin/getActiveGoodsInById\", {ngoodsincode:ngoodsincode,userinfo: userInfo })        \r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            selectedRecordView : response.data.selectedGoodsIn\r\n                        },\r\n                        loading: false,\r\n                        operation: \"view\",\r\n                        openModal: true,\r\n                        screenName: \"IDS_GOODSIN\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function checkListGoodsIn(masterData,selectedGoodsIn,Checklist,ncontrolCode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        if(Checklist && Checklist.nchecklistversioncode !==undefined){\r\n            rsapi.post(\"/goodsin/getChecklistDesign\", {nchecklistversioncode:Checklist.nchecklistversioncode,ngoodsincode:selectedGoodsIn.ngoodsincode ,userinfo: userInfo })        \r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n\r\n                selectedRecord = {\r\n                    sgoodsinid: selectedGoodsIn.sgoodsinid,\r\n                    sclientname: selectedGoodsIn.sclientname,\r\n                    ngoodsincode: selectedGoodsIn.ngoodsincode\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.nchecklistcomponentcode ===7  ? rearrangeDateFormat(userInfo,checklist.sdefaultvalue) :checklist.sdefaultvalue,\r\n                      //  sdefaultvalue: checklist.sdefaultvalue,\r\n\r\n                        sgoodsinid: selectedGoodsIn.sgoodsinid,\r\n                        sclientname: selectedGoodsIn.sclientname,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata'] = {\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        //selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_GOODSINCHECKLIST\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: true,\r\n                        operation: \"checklist\",\r\n                        ncontrolCode:ncontrolCode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n       \r\n        }else{\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CONFIGURETHECHECKLIST\" }));\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport function downloadGoodsIn(masterData,selectedRecord,userInfo,REPORTTYPE,ncontrolcode) {\r\n    return (dispatch) => {\r\n        if(selectedRecord.ntransactionstatus===transactionStatus.RECEIVED  || selectedRecord.ntransactionstatus===transactionStatus.APPROVED ){ //|| transactionStatus.APPROVED\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/goodsin/goodsinReport\", {masterData:masterData,ngoodsincode: selectedRecord.ngoodsincode,userinfo: userInfo, nreporttypecode: REPORTTYPE,ncontrolcode:ncontrolcode})        \r\n\r\n       \r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTDOENLOADRECEIVEAPPROVE\"}));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function onSaveGoodsInCheckList(inputParam) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (inputParam.selectedRecord && inputParam.selectedRecord.jsondata) {\r\n            inputParam.selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(inputParam.selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n\r\n                ngoodsincode: inputParam.selectedRecord.ngoodsincode,\r\n                GoodsInCheckList: {\r\n                    nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: inputParam.selectedRecord.jsondata,\r\n                    ngoodsincode: inputParam.selectedRecord.ngoodsincode,\r\n                },\r\n                userinfo: inputParam.inputData.userinfo,\r\n                ndesigntemplatemappingcode: inputParam.inputData[\"ndesigntemplatemappingcode\"],\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"goodsin/createGoodsInChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignGoodsIn(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.operation\r\n        switch (action) {\r\n            case \"checklist\":\r\n                dispatch(onSaveGoodsInCheckList(screenData.inputParam, screenData.masterData));\r\n                break;                          \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}   \r\n\r\n// export function getEditGoodsInSampleService(goodsinSampleEditParam, columnList,selectedRecord1, childColumnList, comboComponents,\r\n//     withoutCombocomponent) {\r\n//     return function (dispatch) {\r\n\r\n//         dispatch(initRequest(true));\r\n//         const { userInfo, operation } = { ...goodsinSampleEditParam };\r\n//         let masterData = goodsinSampleEditParam[\"masterData\"];\r\n\r\n//         if (masterData[\"selectedSample\"].length > 1 ||\r\n//             masterData[\"selectedSample\"]\r\n//                 .findIndex(x => x[goodsinSampleEditParam.primaryKeyName] === goodsinSampleEditParam[\"editrow\"][goodsinSampleEditParam.primaryKeyName])\r\n//             === -1) {\r\n//             inputParam.editRegParam[\"getSampleChildDetail\"] = true;\r\n//         }\r\n//         masterData[\"selectedSample\"] = [];\r\n//         masterData[\"selectedSample\"].push(goodsinSampleEditParam[\"editrow\"]);\r\n\r\n//         const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n//         let urlArray = [];\r\n\r\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n       \r\n//         // const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\r\n//         //     ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\r\n//         //     childcolumnlist: childColumnList,\r\n//         //     userinfo: userInfo\r\n//         // })\r\n\r\n//         const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n//             datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n//             userinfo: userInfo\r\n//         })\r\n\r\n//         urlArray = [timeZoneService,  dateService]\r\n\r\n//         Axios.all(urlArray)\r\n//             .then(response => {\r\n//                 let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n//                 selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n               \r\n\r\n\r\n//                 const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                 const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }              \r\n\r\n               \r\n//                     const languagetypeCode = undefined\r\n//                     const comboData = response[1].data;\r\n//                     delete comboData['EditData']\r\n//                     let comboValues = {}\r\n//                     if (columnList.length > 0) {\r\n//                         columnList.map(x => {\r\n//                             if (x.inputtype === 'combo') {\r\n//                                 if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n//                                 {\r\n//                                     if (comboData[x.label].length > 0) {\r\n//                                         if (comboData[x.label][0].label === undefined) {\r\n//                                             const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n//                                             comboData[x.label] = optionList.get(\"OptionList\");\r\n//                                         } else {\r\n//                                             comboData[x.label] = comboData[x.label]\r\n//                                             const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n//                                         }\r\n//                                     } else {\r\n//                                         comboData[x.label] = []\r\n//                                     }\r\n//                                     //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n//                                     //   childColumnList, withoutCombocomponent)\\\r\n//                                     comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n//                                         childColumnList, withoutCombocomponent)\r\n//                                 } else {\r\n//                                     comboValues = {\r\n//                                         \"comboData\": comboData,\r\n//                                     }\r\n//                                 }\r\n//                             } else {\r\n//                                 comboValues = {\r\n//                                     comboData: comboData,\r\n//                                     ...comboValues\r\n//                                 }\r\n//                             }\r\n//                         })\r\n//                     }\r\n//                     else {\r\n//                         comboValues = {\r\n//                             \"comboData\": comboData,\r\n//                         }\r\n//                     }\r\n\r\n//                     withoutCombocomponent.map(date => {\r\n//                         if (date.inputtype === 'date') {\r\n//                             selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n//                                 rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n//                             if (date.nperiodcode) {\r\n//                                 selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n//                                     new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n//                             } else {\r\n//                                 selectedRecord[date.label + \"value\"] = new Date();\r\n//                             }\r\n\r\n//                             if (date.hidebeforedate) {\r\n//                                 selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n//                             }\r\n//                             if (date.hideafterdate) {\r\n//                                 selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n//                             }\r\n//                         }\r\n//                     })\r\n\r\n                  \r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n                           \r\n//                             operation: goodsinSampleEditParam.operation,\r\n//                             screenName: goodsinSampleEditParam.screenName,\r\n//                             timeZoneList,\r\n//                             defaultTimeZone,\r\n//                             selectedRecord,\r\n//                             ncontrolCode: goodsinSampleEditParam.ncontrolCode,\r\n//                             loadPreregister: true,\r\n//                             parentPopUpSize: \"xl\",\r\n//                             loading: false,\r\n//                             showSample: undefined,\r\n//                             comboData: comboValues.comboData,\r\n//                             childColumnList, comboComponents,\r\n//                             withoutCombocomponent,\r\n//                             columnList,\r\n//                             masterData\r\n\r\n//                         }\r\n//                     })\r\n                \r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.info(intl.formatMessage({\r\n//                         id: error.response.data\r\n//                     }));\r\n//                 }\r\n//             })\r\n\r\n//     }\r\n// }\r\n\r\n// export function getGoodsInComboService(goodsInParam) {\r\n//     return function (dispatch) {\r\n\r\n//         const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", { userinfo: goodsInParam.userInfo });\r\n//         const courierService = rsapi.post(\"courier/getAllActiveCourier\", { userinfo: goodsInParam.userInfo });\r\n//         const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", { userinfo: goodsInParam.userInfo });\r\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//         const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: goodsInParam.userInfo });\r\n//         let urlArray = [];\r\n//         let selectedId = null;\r\n//         if (goodsInParam.operation === \"create\") {\r\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\r\n//         }\r\n//         else {\r\n//             const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\r\n\r\n//             const goodsInById = rsapi.post(url, { [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue, \"userinfo\": goodsInParam.userInfo });\r\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\r\n//             selectedId = goodsInParam.primaryKeyValue;\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         Axios.all(urlArray)\r\n//             .then(response => {\r\n//                 const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\",\r\n//                     \"smanufname\", undefined, undefined, true);\r\n\r\n//                 const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\",\r\n//                     \"scouriername\", undefined, undefined, false);\r\n\r\n//                 const recipientMap = constructOptionList(response[2].data || [], \"nusercode\",\r\n//                     \"susername\", undefined, undefined, true);\r\n\r\n//                 const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n//                     \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                 const manufacturerList = manufacturerMap.get(\"OptionList\");\r\n//                 const courierList = courierMap.get(\"OptionList\");\r\n//                 const recipientList = recipientMap.get(\"OptionList\");\r\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                 //const currentTime = new Date(response[4].data);\r\n//                 const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n\r\n//                 let validRecord = true;\r\n//                 let selectedRecord = {\r\n//                     //\"dgoodsindate\": new Date(response[4].data),\r\n//                     \"ntzgoodsindate\": {\r\n//                         \"value\": goodsInParam.userInfo.ntimezonecode,\r\n//                         \"label\": goodsInParam.userInfo.stimezoneid\r\n//                     },\r\n//                     \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\r\n//                 };\r\n//                 if (goodsInParam.operation === \"update\") {\r\n//                     if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\r\n//                         validRecord = false;\r\n//                     }\r\n//                     else {\r\n//                         let manufacturer = [];\r\n//                         let courier = [];\r\n//                         let user = [];\r\n//                         let timeZone = [];\r\n//                         selectedRecord = response[5].data;\r\n\r\n//                         manufacturer.push({ \"value\": response[5].data[\"nmanufcode\"], \"label\": response[5].data[\"smanufname\"] });\r\n//                         if (response[5].data[\"ncouriercode\"] !== -1) {\r\n//                             courier.push({ \"value\": response[5].data[\"ncouriercode\"], \"label\": response[5].data[\"scouriername\"] });\r\n//                             selectedRecord[\"ncouriercode\"] = courier[0];\r\n//                         }\r\n//                         else {\r\n//                             selectedRecord[\"ncouriercode\"] = undefined;\r\n//                         }\r\n//                         user.push({ \"value\": response[5].data[\"nrecipientcode\"], \"label\": response[5].data[\"suserfullname\"] });\r\n//                         timeZone.push({ \"value\": response[5].data[\"ntzgoodsindate\"], \"label\": response[5].data[\"stzgoodsindate\"] });\r\n\r\n//                         selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n//                         selectedRecord[\"nrecipientcode\"] = user[0];\r\n//                         //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\r\n//                         selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\r\n//                         selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\r\n//                         selectedRecord[\"stzgoodsindate\"] = timeZone[0].label;\r\n\r\n//                        //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\r\n\r\n//                        selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\r\n//                     }\r\n\r\n//                 }\r\n//                 else {\r\n//                     //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\r\n//                     selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n                  \r\n                  \r\n//                     selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\r\n//                     selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\r\n//                     selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\");\r\n//                     // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\r\n//                     //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\r\n//                 }\r\n//                 if (validRecord) {\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             currentTime,\r\n//                             manufacturerList,//:response[0].data || [], \r\n//                             courierList,//:response[1].data  || [], \r\n//                             recipientList,//:response[2].data  || [],   \r\n//                             timeZoneList,//:response[3].data  || [],                                                                                     \r\n//                             operation: goodsInParam.operation, screenName: goodsInParam.screenName,\r\n//                             selectedRecord,\r\n//                             openModal: true,\r\n//                             ncontrolCode: goodsInParam.ncontrolCode,\r\n//                             loading: false, selectedId\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 else {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINALREADYRECEIVED\" }));\r\n//                 }\r\n//             })\r\n//             .catch(error => {              \r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"goodsin/getGoodsIn\", { nrmsno: goodsIn.nrmsno, fromDate, toDate, userinfo: userInfo })\r\n//             .then(response => {\r\n\r\n//                 masterData = { ...masterData, ...response.data };\r\n//                 sortData(masterData);\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(intl.formatMessage({ id: error.message }));\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getChainCustodyComboDataService(chainCustodyParam) {\r\n//     return function (dispatch) {\r\n\r\n//         // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\r\n//         //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\r\n//         // }\r\n//         // else {\r\n//         let selectedId = null;\r\n//         let selectedRecord = {\r\n//             \"dreceiveddate\": new Date(),\r\n//             \"ntzreceiveddate\": {\r\n//                 \"value\": chainCustodyParam.userInfo.ntimezonecode,\r\n//                 \"label\": chainCustodyParam.userInfo.stimezoneid\r\n//             },\r\n//             \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\r\n//         };\r\n\r\n//         if (chainCustodyParam.operation === \"update\") {\r\n//             if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\r\n//                 selectedId = chainCustodyParam.primaryKeyValue;\r\n//                 const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//                 const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo });\r\n//                 const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n           \r\n//                 const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\r\n\r\n//                 dispatch(initRequest(true));\r\n//                 Axios.all(urlArray)\r\n//                     // dispatch(initRequest(true));\r\n//                     // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\r\n//                     .then(response => {\r\n//                         selectedRecord = response[1].data;\r\n\r\n//                         let timeZone = [];\r\n//                         timeZone.push({ \"value\": response[1].data[\"ntzreceiveddate\"], \"label\": response[1].data[\"stzreceiveddate\"] });\r\n\r\n//                         const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n//                             \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                         const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n//                         selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\r\n//                         selectedRecord[\"stzreceiveddate\"] = timeZone[0].label;\r\n\r\n//                         //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\r\n\r\n//                         selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\r\n//                         dispatch({\r\n//                             type: DEFAULT_RETURN, payload: {\r\n//                                 timeZoneList,//:response[0].data  || [],                                                                                 \r\n//                                 operation: chainCustodyParam.operation,\r\n//                                 screenName: chainCustodyParam.screenName,\r\n//                                 selectedRecord,\r\n//                                 openChildModal: true,\r\n//                                 ncontrolCode: chainCustodyParam.ncontrolCode,\r\n//                                 loading: false, selectedId,\r\n//                                 //currentTime:new Date(response[2].data)\r\n//                                 currentTime:rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\r\n//                             }\r\n//                         });\r\n\r\n//                     })\r\n//                     .catch(error => {\r\n//                         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                         if (error.response.status === 500) {\r\n//                             toast.error(intl.formatMessage({ id: error.message }));\r\n//                         }\r\n//                         else {\r\n//                             toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                         }\r\n//                     })\r\n//             }\r\n//             else {\r\n//                 toast.warn(intl.formatMessage({ id: \"IDS_INVALIDOWNERTOEDIT\" }));\r\n//             }\r\n//         }\r\n//         else {\r\n//             dispatch(initRequest(true));\r\n//             const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//             const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n//             const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\r\n//                 nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\r\n//                 userinfo: chainCustodyParam.userInfo\r\n//             });\r\n//             let urlArray = [timeZoneService, UTCtimeZoneService,validateGoodsIn];\r\n//             return Axios.all(urlArray)\r\n//                 .then(response => {\r\n\r\n//                     const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n//                         \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                     const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             timeZoneList,//:response.data  || [],\r\n//                             operation: chainCustodyParam.operation,\r\n//                             selectedRecord: { ...selectedRecord, \r\n//                                 //dreceiveddate: new Date(response[1].data) \r\n//                                 dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n//                             },\r\n//                             openChildModal: true,\r\n//                             screenName: chainCustodyParam.screenName,\r\n//                             ncontrolCode: chainCustodyParam.ncontrolCode,\r\n//                             loading: false, selectedId,\r\n//                             //currentTime:new Date(response[1].data)\r\n//                             currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n//                         }\r\n//                     })\r\n//                 })\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(intl.formatMessage({ id: error.message }));\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                     }\r\n//                 })\r\n//         }\r\n//     }\r\n//     // }\r\n// }\r\n\r\n// export function getGoodsInPrinterComboService(inputParam) {\r\n//     return (dispatch) => {\r\n//         dispatch(initRequest(true))\r\n//         rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\r\n//             .then(response => {\r\n//                 let selectedRecord = {\r\n//                     sprintername: {\r\n//                         value: response.data[0].sprintername,\r\n//                         label: response.data[0].sprintername,\r\n//                         item: response.data[0]\r\n//                     }\r\n//                 };\r\n//                 const printerList = constructOptionList(response.data || [], \"sprintername\",\r\n//                     \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         printerList,\r\n//                         selectedRecord,\r\n//                         operation: \"printer\",\r\n//                         screenName: \"PrintBarcode\",\r\n//                         dataToPrint: inputParam.selectedGoodsIn.nrmsno,\r\n//                         ncontrolcode: inputParam.ncontrolcode,\r\n//                         loading: false,\r\n//                         openModal: true\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                 }\r\n//             });\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// export function reloadGoodsIn(inputParam) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"goodsin/getGoodsIn\", {...inputParam.inputData})\r\n//             .then(response => {\r\n//                 let responseData = { ...response.data }\r\n//                 responseData = sortData(responseData)\r\n//                 let masterData = {\r\n//                     ...inputParam.masterData,\r\n//                     ...responseData,\r\n//                 }\r\n//                 if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n//                     inputParam.searchRef.current.value = \"\";\r\n//                     masterData['searchedData'] = undefined\r\n//                 }\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData,\r\n//                         loading: false,\r\n//                         showFilter: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}