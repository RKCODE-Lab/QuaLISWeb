{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import Axios from'axios';//import {constructOptionList} from '../components/CommonScript';\nimport{initRequest}from'./LoginAction';import{toast}from'react-toastify';import{intl}from'../components/App';export function fetchRecordComponent(fetchRecordParam){return function(dispatch){var urlArray=[];var selectedId=null;if(fetchRecordParam.operation===\"update\"){var _rsapi$post;var component=rsapi.post(fetchRecordParam.inputParam.classUrl+\"/getActive\"+fetchRecordParam.inputParam.methodUrl+\"ById\",(_rsapi$post={},_defineProperty(_rsapi$post,fetchRecordParam.primaryKeyField,fetchRecordParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",fetchRecordParam.userInfo),_rsapi$post));urlArray=[component];selectedId=fetchRecordParam.primaryKeyValue;}else{urlArray=[];}dispatch(initRequest(true));Axios.all(urlArray).then(Axios.spread(function(){var selectedRecord={};if(fetchRecordParam.operation===\"update\"){for(var _len=arguments.length,response=new Array(_len),_key=0;_key<_len;_key++){response[_key]=arguments[_key];}selectedRecord=response[0].data;}dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:fetchRecordParam.operation===\"update\"?selectedRecord:selectedRecord,operation:fetchRecordParam.operation,screenName:fetchRecordParam.screenName,openModal:true,ncontrolCode:fetchRecordParam.ncontrolCode,loading:false,selectedId:selectedId}});})).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});//console.log(\"Error In Component : \", error);\nif(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/ComponentAction.js"],"names":["rsapi","DEFAULT_RETURN","Axios","initRequest","toast","intl","fetchRecordComponent","fetchRecordParam","dispatch","urlArray","selectedId","operation","component","post","inputParam","classUrl","methodUrl","primaryKeyField","primaryKeyValue","userInfo","all","then","spread","selectedRecord","response","data","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"4LAAA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CACA,OAASC,cAAT,KAA+B,cAA/B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAASC,IAAT,KAAqB,mBAArB,CAEA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,gBAA9B,CAAgD,CACnD,MAAO,UAAUC,QAAV,CAAoB,CACvB,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CAEA,GAAIC,CAAAA,UAAU,CAAG,IAAjB,CACA,GAAIH,gBAAgB,CAACI,SAAjB,GAA+B,QAAnC,CAA6C,iBACzC,GAAMC,CAAAA,SAAS,CAAGZ,KAAK,CAACa,IAAN,CAAWN,gBAAgB,CAACO,UAAjB,CAA4BC,QAA5B,CAAuC,YAAvC,CAAsDR,gBAAgB,CAACO,UAAjB,CAA4BE,SAAlF,CAA8F,MAAzG,6CAAoHT,gBAAgB,CAACU,eAArI,CAAuJV,gBAAgB,CAACW,eAAxK,8BAAyL,UAAzL,CAAqMX,gBAAgB,CAACY,QAAtN,eAAlB,CAEAV,QAAQ,CAAG,CAAEG,SAAF,CAAX,CACAF,UAAU,CAAGH,gBAAgB,CAACW,eAA9B,CACH,CALD,IAMK,CACDT,QAAQ,CAAG,EAAX,CACH,CACDD,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR,CACAD,KAAK,CAACkB,GAAN,CAAUX,QAAV,EACKY,IADL,CACUnB,KAAK,CAACoB,MAAN,CAAa,UAAiB,CAEhC,GAAIC,CAAAA,cAAc,CAAG,EAArB,CAEA,GAAIhB,gBAAgB,CAACI,SAAjB,GAA+B,QAAnC,CAA6C,+BAJ1Ba,QAI0B,0CAJ1BA,QAI0B,wBACzCD,cAAc,CAAGC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B,CACH,CACDjB,QAAQ,CAAC,CACLkB,IAAI,CAAEzB,cADD,CAEL0B,OAAO,CAAE,CACLJ,cAAc,CAAEhB,gBAAgB,CAACI,SAAjB,GAA+B,QAA/B,CAA0CY,cAA1C,CAA2DA,cADtE,CAELZ,SAAS,CAAEJ,gBAAgB,CAACI,SAFvB,CAGLiB,UAAU,CAAErB,gBAAgB,CAACqB,UAHxB,CAILC,SAAS,CAAE,IAJN,CAIYC,YAAY,CAAEvB,gBAAgB,CAACuB,YAJ3C,CAKLC,OAAO,CAAE,KALJ,CAKWrB,UAAU,CAAVA,UALX,CAFJ,CAAD,CAAR,CAUH,CAjBK,CADV,EAoBKsB,KApBL,CAoBW,SAAAC,KAAK,CAAI,CACZzB,QAAQ,CAAC,CAAEkB,IAAI,CAAEzB,cAAR,CAAwB0B,OAAO,CAAE,CAAEI,OAAO,CAAE,KAAX,CAAjC,CAAD,CAAR,CACA;AACA,GAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,GAA0B,GAA9B,CAAmC,CAC/B9B,KAAK,CAAC6B,KAAN,CAAY5B,IAAI,CAAC8B,aAAL,CAAmB,CAAEC,EAAE,CAAEH,KAAK,CAACI,OAAZ,CAAnB,CAAZ,EACH,CAFD,IAGK,CACDjC,KAAK,CAACkC,IAAN,CAAWjC,IAAI,CAAC8B,aAAL,CAAmB,CAAEC,EAAE,CAAEH,KAAK,CAACT,QAAN,CAAeC,IAArB,CAAnB,CAAX,EACH,CACJ,CA7BL,EA+BH,CA7CD,CA8CH","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport Axios from 'axios';\r\n//import {constructOptionList} from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\nexport function fetchRecordComponent(fetchRecordParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        let selectedId = null;\r\n        if (fetchRecordParam.operation === \"update\") {\r\n            const component = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n            urlArray = [ component];\r\n            selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let selectedRecord = {};\r\n\r\n                if (fetchRecordParam.operation === \"update\") {\r\n                    selectedRecord = response[0].data;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : selectedRecord,\r\n                        operation: fetchRecordParam.operation,\r\n                        screenName: fetchRecordParam.screenName,\r\n                        openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                //console.log(\"Error In Component : \", error);\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}