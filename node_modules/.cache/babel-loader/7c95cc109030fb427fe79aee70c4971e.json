{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\nimport { ageCalculate, ageCalculateOnlyForYear, childComboClear, comboChild, convertDateTimetoString, extractFieldHeader, filterRecordBasedOnTwoArrays, formatDate, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, removeSpaceFromFirst, showEsign, sortByField, validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify, checkFilterIsEmptyQueryBuilder, convertDateTimetoStringDBFormat } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, callService, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler, testPackageTest, rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration, insertRegSample, testSectionTest, insertSchedulerConfig, updateSchedulerConfig, getSchedulerMasteDetails, uploadSamplesData } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport { getSchedulerConfig } from '../Scheduler//SchedulerValidation.jsx';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport Esign from '../audittrail/Esign';\nimport PatientMaster from '../contactmaster/PatientMaster';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\nimport AddImportFileData from './AddImportFileData';\nimport AddImportSampleCountData from './AddImportSampleCountData';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { checkBoxOperation } from '../../components/Enumeration';\nimport rsapi from '../../rsapi.js';\nimport Axios from 'axios';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      selectedTestPackageData: {},\n      selectPackage: {},\n      selectSection: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      specBasedTestPackage: false,\n      selectedMaster: [],\n      exportFiled: [],\n      importSampleRawData: 0\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const filterQueryTreeStr = QbUtils.getTree(immutableTree);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery,\n          filterQueryTreeStr\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const filterquery = this.props.Login.filterquery;\n      const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\n      let isFilterEmpty = checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date') && isFilterEmpty) {\n        const val = removeSpaceFromFirst(filterquery, '');\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: val\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEVALUESFORINPUTS\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component[\"childFields\"]) {\n        const index = this.props.Login.masterIndex;\n        let selectedRecord = this.state.selectedMaster || {};\n        component[\"childFields\"].map(item => {\n          let data = item1[item.columnname];\n\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            //combocontrol\n            data = {\n              label: item1[item.sdisplaymember],\n              value: item1[item.svaluemember]\n            };\n          } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            //Date picker control\n            data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\n          }\n\n          selectedRecord[index][item.columnname] = data;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: selectedRecord,\n            loadCustomSearchFilter: false,\n            screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const newdata = {\n          label: item1[component['displaymember']],\n          value: item1[component['valuemember']],\n          item: {\n            jsondata: { ...item1,\n              jsondata: { ...item1\n              }\n            }\n          }\n        };\n        this.onComboChange(newdata, component, component['label']);\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord; // console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.addMaster) {\n        const masterIndex = this.props.Login.masterIndex;\n        mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true);\n        selectedRecord = this.state.selectedMaster[masterIndex];\n      } else if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              // console.log(\"component1:\", component);\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                //  console.log(\"componentrow:\", componentrow);\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      //componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadImportFileData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"files\"\n        }];\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) === -1) {\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                }\n\n                return null;\n              }) : this.props.sampleexportfields.findIndex(x => x === component.label) === -1 ? component.mandatory === true ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      } else if (this.props.Login.loadImportSampleCountData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SAMPLECOUNT\",\n          \"dataField\": \"nsamplecount\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          //\"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          // \"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } //  console.log(\"mandate fields:\", mandatoryFields);\n\n      /* if(this.props.Login.userInfo.nformcode===241 && this.props.Login.masterData.RealSampleTypeValue &&\r\n           this.props.Login.masterData.RealSampleTypeValue.nsampletypecode===2){\r\n           mandatoryFields.unshift( { \"idsName\": \"IDS_SITE\", \"dataField\": \"SchedulerSite\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n           )\r\n       }*/\n\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.addMaster) {\n            this.onSaveMasterRecord(saveType, this.formRef);\n          } else if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            let selectedSpecCheck = { ...this.state.selectedSpec\n            };\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubSample\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_COMPONENT\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            let inputvalues = {};\n\n            if (this.state.selectedRecord[\"nallottedspeccode\"] !== selectedSpecCheck.nallottedspeccode) {\n              inputvalues = {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            } else {\n              inputvalues = {\n                loadSpec: false,\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: { // selectedTestData: [],\n                // selectComponent: [],\n                // selectedComponent: {},\n                // loadSpec: false,\n                // SelectedTest: [],\n                // Test: [],\n                // Component: [],\n                // subSampleDataGridList: [],\n                // selectedSpec: { ...selectedSpec },\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\n                //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                // specBasedComponent\n                ...inputvalues\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else if (this.props.Login.loadImportFileData) {\n            this.onSaveClickImport('1', this.formRef);\n          } else if (this.props.Login.loadImportSampleCountData) {\n            this.onSaveClickImport('2', this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.MandatoryCheckSubSample = () => {\n      let mandatoryFields = [];\n      let exportFields = [];\n      let comboComponent = [];\n      let exportFieldProperties = [];\n      let subSampleFields = [];\n\n      if (this.state.specBasedComponent) {\n        exportFieldProperties = [{\n          \"nquerybuildertablecode\": 32,\n          \"valumeber\": \"ncomponentcode\",\n          \"inputtype\": \"combo\",\n          \"displaymember\": \"scomponentname\",\n          \"label\": \"ncomponentcode\",\n          \"source\": \"component\"\n        }];\n        mandatoryFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\",\n          \"mandatory\": true\n        }]; // mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\n\n        exportFields = [\"ncomponentcode\"];\n        subSampleFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode_child\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                subSampleFields.push({\n                  \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": componentrow.label,\n                  \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                  \"label\": componentrow.label\n                });\n\n                if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push(componentrow.label);\n                  exportFieldProperties.push(componentrow);\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              subSampleFields.push({\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                \"label\": component.label\n              });\n\n              if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push(component.label);\n                exportFieldProperties.push(component);\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        subSampleFields,\n        comboComponent,\n        exportFieldProperties\n      };\n    };\n\n    this.MandatoryCheck = () => {\n      const mandatoryFields = [];\n      const exportFields = [];\n      const exportFieldProperties = [];\n      const comboComponent = [];\n      this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push(componentrow.label);\n                  exportFieldProperties.push(componentrow);\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push(component.label);\n                exportFieldProperties.push(component);\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        comboComponent,\n        exportFieldProperties\n      };\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSchedulerComboChange = (event, fieldName) => {\n      if (event !== null) {\n        let Map = {};\n        let selectedRecord = this.state.selectedRecord;\n        Map[\"nschedulecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        selectedRecord[fieldName] = event;\n        this.props.getSchedulerMasteDetails(Map, selectedRecord, this.props.Login.masterData);\n      }\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {}; //console.log(\"Control:\", control);\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        let project = false;\n        let nprojectmastercode = -1;\n        let childSpec = false;\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? this.props.Login.masterData.RealSampleTypeValue.nsampletypecode === SampleType.STABILITY ? 1 : parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n\n        if (nsampletypecode === SampleType.CLINICALTYPE) {\n          if (control.table && control.table.item.nquerybuildertablecode === 228 && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\n            selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid'];\n          }\n        }\n\n        if (control.name === \"manualorderid\") {\n          selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid'];\n        }\n\n        const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired) : transactionStatus.NO;\n        const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired) : transactionStatus.NO;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009       \n            if (ncategorybasedflow !== transactionStatus.YES) {\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow !== transactionStatus.YES) {\n              product = true;\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n            }\n          }\n        } else if (control.name === 'Instrument Name') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009\n            if (ncategorybasedflow === transactionStatus.YES) {\n              //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            } else {\n              const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow === transactionStatus.YES) {\n              productCategory = true;\n            } else {\n              inputParem[\"ProductName\"] = Product[0].label;\n              product = true;\n            }\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        } else if (control.name === 'Project Code') {\n          //project = true;\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            // nproductcode = selectedRecord[Product[0].label] &&\n            //     selectedRecord[Product[0].label].value;\n            nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n          }\n\n          nprojectmastercode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            project = true;\n          } // else{\n          //     if (ncategorybasedflow === 3) {\n          //         productCategory = true;\n          //     }\n          //     else{\n          //         product =true;\n          //     }\n          // }\n\n        }\n\n        if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n          product = false;\n          productCategory = false;\n          materialType = false;\n          instrument = false;\n          instrumentCategory = false;\n          material = false;\n          materialCategory = false;\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // let childTemplateMandatory = {}\n          // if (!(product ||\n          //     productCategory ||\n          //     materialType ||\n          //     instrument ||\n          //     instrumentCategory ||\n          //     material ||\n          //     materialCategory ||\n          //     project)) {\n          //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\n          //     if (TemplateMandatory && TemplateMandatory.length > 0) {\n          //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\n          //         const Product = childComboList.filter(x => x.name === \"Product\");\n          //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\n          //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\n          //         const Material = childComboList.filter(x => x.name === \"Material\");\n          //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\n          //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\n          //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\n          //         childTemplateMandatory = {\n          //             ProductCategory, Product\n          //             , InstrumentCategory\n          //             , MaterialCategory, Material\n          //             , MaterialType, MaterialType\n          //             , ProjectCode, Instrument\n          //         }\n          //         if (ProductCategory || Product\n          //             || InstrumentCategory\n          //             || MaterialCategory || Material\n          //             || MaterialType || MaterialType\n          //             || ProjectCode || Instrument) {\n          //             childSpec = true;\n          //         }\n          //     }\n          //     else {\n          //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\n          //         if (TemplateChild&& TemplateChild.length> 0) {\n          //             TemplateChild.map(x=>{\n          //                 x.child&&x.child.map(y=>{\n          //                 const data=this.props.comboComponents(x=>x.label===y.label)  \n          //                 if(data&&data[0].templatemandatory){\n          //                     const name=data[0].name\n          //                     if(name===\"Product Category\"||name===\"Instrument Category\"\n          //                     ||name===\"Product\"||name===\"Material Category\"\n          //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\n          //                         childSpec = true;\n          //                         childTemplateMandatory={childSpec:true}\n          //                     }\n          //                 }\n          //                 })\n          //             })\n          //         }\n          //     }\n          // }\n\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode,\n            nprojectmastercode,\n            nprojectSpecReqd,\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\n            ntestgroupspecrequired: this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired === true ? transactionStatus.YES : transactionStatus.NO //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to backend\n            // ...childTemplateMandatory\n\n          };\n          /*  if(this.props.Login.userInfo.nformcode===241){\r\n            childComboList = childComboList.map(item => {\r\n                if (item.label === 'Instrument ID') {\r\n                    return { ...item, conditionstring: \"\" };\r\n                }\r\n                return item;\r\n            });\r\n          }*/\n\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType, undefined, project, this.props.comboComponents);\n        } else {\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType || project) {\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode,\n              nprojectmastercode,\n              nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n              ntestgroupspecrequired: this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired === true ? transactionStatus.YES : transactionStatus.NO //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to backend\n\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, undefined, undefined, project);\n          } else {\n            //let sitevalue=comboData.value;\n            let comboData = this.props.Login.comboData; //   if(sitevalue===selectedRecord['SchedulerSite'].value){\n\n            if (customName === 'SchedulerSite') {\n              this.props.comboComponents.forEach(item => {\n                if (item.name === 'Instrument Category' || item.name === 'Instrument Name' || item.name === 'Instrument') {\n                  delete selectedRecord[item.label];\n                  if (item.name !== 'Instrument Category') comboData[item.label] = '';\n                }\n              });\n            } // }\n\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord,\n                loadCustomSearchFilter: false,\n                comboData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, control, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } //ALPD-3596 Start\n\n\n        if (event.target.name === \"importTest\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n\n          if (event.target.checked === false) {\n            let needTest = event.target.checked;\n            this.testForImport(needTest);\n          }\n        } //ALPD-3596 End\n        else {\n          const value = selectedRecord[event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            if (value.includes(radiotext)) {\n              const index = value.indexOf(radiotext);\n\n              if (index !== -1) {\n                if (index === 0) {\n                  const indexcomma = value.indexOf(\",\");\n\n                  if (indexcomma !== -1) {\n                    selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                  } else {\n                    selectedRecord[event.target.name] = \"\";\n                  }\n                } else {\n                  if (value.slice(index).indexOf(\",\") !== -1) {\n                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                  } else {\n                    selectedRecord[event.target.name] = value.slice(0, index - 1);\n                  }\n                }\n              }\n            } else {\n              selectedRecord[event.target.name] = value + ',' + radiotext;\n            }\n          } else {\n            selectedRecord[event.target.name] = radiotext;\n          }\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // if (control.isnumeric === true\n        //      && control.label===radiotext) {\n        //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        // } else {\n        //     selectedRecord[event.target.name] = event.target.value;\n        // }\n        //  selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, control, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // if (control.isnumeric === true\n        //     && control.label===radiotext) { \n        //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        //     } else {\n        //         selectComponent[event.target.name] = event.target.value;\n        //     }\n        // selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: \"IDS_SUBSAMPLE\"\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n        const age = ageCalculate(dateValue);\n        selectedRecord[ageComp[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATION\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.testForImport = needTest => {\n      const selectedSpecification = {\n        nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        slno: 1\n      };\n      this.getTestForImport(selectedSpecification, this.props.Login, this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedRecord, needTest, this.state.specBasedComponent);\n    };\n\n    this.getTestForImport = (objComponent, LoginProps, nneedsubsample, selectedRecord, needTest, specBasedComponent) => {\n      if (!this.state.specBasedComponent) {\n        const urlArray = [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nspecsampletypecode: objComponent.nspecsampletypecode,\n          slno: objComponent.slno,\n          nneedsubsample: nneedsubsample,\n          nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = TestGet;\n        Axios.all(urlArray).then(response => {\n          let TestData = response[0].data;\n          let Test = LoginProps.Test || [];\n          let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n          let TestCombinedForImport = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n          selectedRecord['importTest'] = needTest ? transactionStatus.YES : transactionStatus.NO;\n          this.setState({\n            TestCombinedForImport,\n            // AllTest: TestData,\n            // screenName: intl.formatMessage({ id: \"IDS_IMPORT\" }),\n            selectedTestData: [],\n            selectedRecord: selectedRecord,\n            // loadImportFileData: true,\n            loading: false\n          });\n        }).catch(error => {\n          toast.error(error.message);\n          this.setState({\n            loading: false\n          });\n        });\n      }\n    };\n\n    this.AddImportFile = (selectedRecord, event) => {\n      var buttonName = event.target.innerText;\n\n      if (this.state.selectedSpec.nallottedspeccode) {\n        if (buttonName.indexOf('Upload Data')) {\n          this.setState({\n            importSampleRawData: 1\n          });\n          selectedRecord['importTest'] = transactionStatus.NO;\n        } else {\n          //ALPD-3596\n          selectedRecord['importTest'] = transactionStatus.YES;\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadImportFileData: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_IMPORT\"\n            }),\n            selectedRecord: selectedRecord //ALPD-3596\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.AddSampleCount = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLECOUNT\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let isValid = true;\n        const selectedSpecification = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        let selectedRecord = selectedComponent; //  if(componentBasedSpec){\n\n        if (nneedsubsample) {\n          if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n            delete selectedComponent[\"selected\"];\n          } else {\n            isValid = false;\n          }\n        } else {\n          selectedRecord = selectedSpecification;\n        } // }\n        // else{\n        //     selectedRecord = selectedSpecification;          \n        // }\n\n\n        if (isValid) {\n          this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        } // } \n        // else {\n        //     const selectedComponent1 = {\n        //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        //         slno: 1\n        //     }\n        //     this.props.getTest(selectedComponent1,\n        //         this.props.Login,\n        //         nneedsubsample, specBasedComponent);\n        // }\n\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportFileData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData: {},\n          //ALPD-3596 \n          loadImportFileData: false,\n          TestCombinedForImport: [],\n          //ALPD-3596 \n          selectedRecord: { ...{ ...this.state.selectedRecord,\n              sfilename: undefined\n            },\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportSampleCountData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeAddMaster = e => {\n      let masterIndex = this.props.Login.masterIndex;\n      let updateInfo = {};\n\n      if (masterIndex !== 0) {\n        const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n        const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex);\n        const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex);\n        const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n        const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex);\n        const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex);\n        const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n        const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n        const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n        const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex);\n        const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex);\n        const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex);\n        masterIndex = masterIndex - 1;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster,\n            selectedControl,\n            masterextractedColumnList,\n            masterfieldList,\n            masterdataList,\n            mastercomboComponents,\n            masterwithoutCombocomponent,\n            masterComboColumnFiled,\n            masterDesign,\n            masterIndex,\n            screenName,\n            masterOperation,\n            masterEditObject\n          }\n        };\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: [],\n            selectedControl: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            addMaster: false,\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterEditObject: [],\n            masterOperation: [],\n            masterIndex: undefined,\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeDynamicView = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isDynamicViewSlideOut: false,\n          selectedDynamicViewControl: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\",\n          TestPackage: [],\n          //Test:[]\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        ntestgroupspecrequired: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired ? transactionStatus.YES : transactionStatus.NO : transactionStatus.NO,\n        // ALPD-5259    Added ntestgroupspecrequired key to send it to backend by Vishakh\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode; // selectComponent[\"nneedsubsample\"] = nneedsubsample;\n\n          selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\n      const selectPackage = this.state.selectPackage || {};\n      const selectedTestData = this.state.selectedTestData || {};\n      const selectSection = this.state.selectSection;\n\n      if (comboData !== null) {\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action);\n      } else {\n        let availableTest = [];\n        let availableTestSection = [];\n\n        if (selectPackage[\"ntestpackagecode\"]) {\n          //ALPD-3404\n          delete selectPackage[\"ntestpackagecode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          delete selectSection[\"nsectioncode\"];\n          let Test = action !== \"AddSubSample\" ? this.props.Login.Test || [] : [];\n          let testData = this.props.Login.AllTest || []; // ALPD-4919, Added condition to when this.props.Login.selectedComponent is undefined then should return empty array\n\n          let componentTest = this.props.Login.selectedComponent && Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n          availableTestSection = this.props.Login.AllSection || [];\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n          availableTestSection = this.props.Login.AllSection || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectPackage,\n            selectSection,\n            TestCombined: availableTest,\n            TestSection: availableTestSection\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onTestSectionChange = (comboData, fieldName, nneedsubsample, action) => {\n      const selectPackage = this.state.selectPackage;\n      const selectSection = this.state.selectSection || {};\n      const selectedTestData = this.state.selectedTestData || {};\n\n      if (comboData !== null) {\n        selectSection[fieldName] = comboData;\n        selectSection[\"ssectionname\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testSectionTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action);\n      } else {\n        let availableTest = [];\n\n        if (selectSection[\"nsectioncode\"]) {\n          delete selectSection[\"nsectioncode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          let Test = action !== \"AddSubSample\" ? this.props.Login.Test || [] : [];\n          let testData = this.props.Login.AllTest || []; // ALPD-4919, Added condition to when this.props.Login.selectedComponent is undefined then should return empty array\n\n          let componentTest = this.props.Login.selectedComponent && Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || [] : filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectSection,\n            TestCombined: availableTest,\n            TestSection: this.props.Login.TestSection || []\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        //  let slno = Component[index].slno\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]; // const preList = comp1.splice(0, index);\n        // const afterList = comp1.splice(index, comp1.length);\n        // preList.map(x => {\n        //     Test[incslno] = Test && Test[x.slno]\n        //     x.slno = incslno;\n        //     incslno = incslno - 1;\n        //     return null;\n        // })\n\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        } //const Component1 = [...preList, ...afterList];\n        // Component1.map(x => {\n        //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\n        // })\n        //sortByField(subSampleDataGridList, 'desc', 'slno')\n\n\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent && selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = (specBasedComponent, specBasedTestPackage) => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata; //Added by Dhanushya for jira ETICA-22\n\n        const orderTypeComp = this.props.Login.comboComponents.filter(item => item.name === \"manualordertype\"); //Added by sonia  on 1 August 2024 for Sub Sample Add\n\n        if (this.state.selectedRecord.hasOwnProperty(orderTypeComp.length > 0 && orderTypeComp[0].label)) {\n          Map[\"orderTypeCombCode\"] = this.state.selectedRecord[orderTypeComp[0].label].value;\n        } else {\n          Map[\"orderTypeCombCode\"] = -1;\n        }\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation; // ALPD-4914 Added codes for scheduler configuration screen\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode === formCode.SCHEDULERCONFIGURATION) {\n          if (operation === \"create\") {\n            this.insertSchedulerConfig(true);\n          } else if (operation === \"update\") {\n            this.updateSchedulerConfig(true);\n          }\n        } else {\n          if (operation === \"update\") {\n            this.onUpdateRegistration(saveType, formRef, operation);\n          } else {\n            if (operation === \"create\") {\n              this.insertRegistration(true);\n            }\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onSaveClickImport = (saveType, formRef) => {\n      let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      let isFileupload = false;\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let Map = {};\n\n        if (nneedsubsample === false || !this.state.specBasedComponent) {\n          Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode;\n        }\n\n        Map[\"specBasedComponnet\"] = this.state.specBasedComponent;\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        const fields = this.MandatoryCheck();\n        Map[\"MandatoryList\"] = fields.mandatoryFields;\n        Map[\"exportFieldProperties\"] = fields.exportFieldProperties; //  Map[\"ExportList\"] = fields.exportFields\n\n        Map[\"exportFields\"] = [...fields.exportFields];\n        Map[\"comboComponent\"] = fields.comboComponent;\n        Map[\"SampleFieldsString\"] = [...fields.exportFields]; //ALPD-3596 \n\n        Map[\"TestGroupTestCode\"] = this.state.selectedTestData && Object.keys(this.state.selectedTestData).length !== 0 ? this.state.selectedTestData.ntestgrouptestcode.map(value => value.item.ntestgrouptestcode).join(\",\") : \"\";\n        Map[\"importTest\"] = this.state.selectedRecord && this.state.selectedRecord.importTest;\n\n        if (nneedsubsample) {\n          const subSample = this.MandatoryCheckSubSample();\n          Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent];\n          Map[\"MandatoryList\"] = [...fields.mandatoryFields, ...subSample.mandatoryFields];\n          Map[\"SubSampleFields\"] = subSample.subSampleFields;\n          Map[\"exportFields\"] = [...fields.exportFields, ...subSample.exportFields];\n          Map[\"exportFieldProperties\"] = [...fields.exportFieldProperties, ...subSample.exportFieldProperties]; //  Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\n        } // Map[\"SampleFields\"] = this.SampleFields();\n\n\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n            Map[\"sDob\"] = convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          }\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n\n        if (this.state.importSampleRawData === 0) {\n          const formData = new FormData();\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n          formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0]);\n          formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          const inputParam = {\n            inputData: Map,\n            postParamList: this.props.postParamList,\n            action: \"preregister\",\n            formData: formData,\n            isFileupload\n          };\n          this.props.insertRegSample(inputParam, this.props.Login.masterData);\n        } else {\n          const uploadedData = new FormData();\n          uploadedData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n          uploadedData.append(\"uploadedFile\", this.state.selectedRecord['sfilename'][0]);\n          uploadedData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          uploadedData.append(\"ndesigntemplatemappingcode\", this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode);\n          const parameters = {\n            inputData: Map,\n            postParamList: this.props.postParamList,\n            action: \"preregister\",\n            formData: uploadedData,\n            isFileupload\n          };\n          this.props.uploadSamplesData(parameters, this.props.Login.masterData);\n          this.setState({\n            importSampleRawData: 0\n          });\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleExportClick = () => {\n      if (this.state.selectedSpec.nallottedspeccode) {\n        const exportFiled = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        const subSampleLayout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (this.state.specBasedComponent) {\n          exportFiled.push({\n            \"displayname\": \"IDS_COMPONENT\",\n            \"idsField\": true,\n            \"label\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"combo\"\n          });\n        }\n\n        const mandatoryCheck = [];\n\n        if (subSampleLayout !== undefined) {\n          subSampleLayout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  } else if (componentrow.mandatory) {\n                    mandatoryCheck.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : component.mandatory ? mandatoryCheck.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        if (exportFiled.length > 0) {\n          if (this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true) {\n            if (mandatoryCheck.length === 0) {\n              this.setState({\n                exportFiled,\n                export: true\n              });\n            } else {\n              toast.info(this.props.intl.formatMessage({\n                id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\"\n              }));\n            }\n          } else {\n            this.setState({\n              exportFiled,\n              export: true\n            });\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_EXPORTFIELDSNOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        // selectedMaster[masterIndex][event.target.name] = event.target.value;\n        if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ? event.target.value : selectedMaster[masterIndex][event.target.name];\n          } else {\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let isEmailCheck = true;\n      let isFileupload = false;\n      const formData = new FormData();\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        isFileupload = true;\n        inputData[\"isFileupload\"] = false;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify({ ...inputData\n        })));\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 43) {\n        //added by vignesh for ALPD-3010\n        this.state.selectedRecord = { ...this.state.selectedRecord,\n          \"spatientid\": this.state.selectedMaster[masterIndex][\"spatientid\"]\n        };\n        inputData[\"noneedfilter\"] = 2; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"selectbox\") {\n              fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              fieldName = item.tableDataField;\n            }\n\n            inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n            return inputData[methodUrl];\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n\n              if (fieldName === 'ssubmittername') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  ssubmitterfirstname: this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\n                  ssubmitterlastname: this.state.selectedMaster[masterIndex][fieldName].item.slastname,\n                  ssubmitteremail: this.state.selectedMaster[masterIndex][fieldName].item.semail,\n                  sshortname: this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\n                  ssubmittercode: this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\n                  ssubmitterid: this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\n                  stelephone: this.state.selectedMaster[masterIndex][fieldName].item.stelephone\n                };\n              }\n\n              if (fieldName === 'sinstitutionsitename') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionsitename: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename\n                };\n              }\n\n              if (fieldName === 'sinstitutionname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\n                  sinstitutioncode: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode\n                };\n              }\n\n              if (fieldName === 'sinstitutioncatname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutioncatname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname\n                };\n              }\n\n              if (fieldName === 'sdistrictname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutiondistrictname: this.state.selectedMaster[masterIndex][fieldName].label\n                };\n              }\n\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n        inputData[methodUrl][\"nproductcode\"] = -1; //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\n        //inputData[methodUrl][\"sexternalorderid\"] = 1;\n\n        inputData[methodUrl][\"nordertypecode\"] = 1;\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent : this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents : this.props.Login.comboComponents,\n        selectedRecord: this.props.Login.loadSubSample ? this.state.selectComponent : this.state.selectedRecord,\n        selectedRecordName: this.props.Login.loadSubSample ? 'selectComponent' : 'selectedRecord',\n        loadSubSample: this.props.Login.loadSubSample,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.loadSubSample ? this.props.Login.SubSamplecomboData : this.props.Login.comboData,\n        comboName: this.props.Login.loadSubSample ? 'SubSamplecomboData' : 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        saveType,\n        formRef,\n        screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\n        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation,\n        formData: formData,\n        isFileupload\n      };\n\n      if (isEmailCheck) {\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + this.props.intl.formatMessage({\n          id: \"IDS_\" + selectedControl.label.toUpperCase()\n        }));\n      }\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterOperation,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, control, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue); // selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectComponent,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachmentSubSample = (event, file, fieldName) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file);\n      this.setState({\n        selectComponent,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENT\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false; // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\n      //     this.props.Login.userRoleControlRights !== undefined ? true : false\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      this.subSampleDataGridList = [];\n      this.subSampleDataDetailGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubSample\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_COMPONENT\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                } else {\n                  this.subSampleDataDetailGridList.push({\n                    \"mandatory\": false,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"50px\",\n                    columnSize: \"2\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) {\n                this.subSampleDataGridList.push({\n                  \"mandatory\": true,\n                  // \"idsName\": component.label,\n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  width: \"150px\"\n                });\n              } else {\n                this.subSampleDataDetailGridList.push({\n                  \"mandatory\": false,\n                  //\"idsName\": componentrow.label, \n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  width: \"50px\",\n                  columnSize: \"2\"\n                });\n              }\n\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent,\n        specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\n      this.setState({\n        selectedTestPackageData: this.props.Login.selectedTestPackageData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\n      this.setState({\n        selectPackage: this.props.Login.selectPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectSection !== this.PrevoiusLoginData.Login.selectSection) {\n      this.setState({\n        selectSection: this.props.Login.selectSection\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\n      this.setState({\n        specBasedTestPackage: this.props.Login.specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.info(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || []; // START ALPD-3673 VISHAKH\n\n      let dateList = subSampleDetail.dateList;\n      let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'],\n        ...saveComponent\n      };\n\n      if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\n        dateList.map(dateLst => {\n          if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\n            subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\n          }\n        });\n      }\n\n      subSampleDataGridList.push(subSampleCurrentDataGridList); // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\n      // END ALPD-3673 VISHAKH\n      // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\",\n          selectedComponentWithFile: objcomponent\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || []; // START ALPD-3673 VISHAKH\n\n      let dateList = subSampleDetail.dateList;\n      let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'],\n        ...saveComponent\n      };\n\n      if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\n        dateList.map(dateLst => {\n          if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\n            subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\n          }\n        });\n      }\n\n      subSampleDataGridList.push(subSampleCurrentDataGridList); // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\n      // END ALPD-3673 VISHAKH\n\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        TestCombined: this.props.Login.TestCombined,\n        //selectComponent:C.saveContinueData,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList,\n        //selectedTestData: {}\n        specBasedTestPackage: this.state.specBasedTestPackage,\n        saveContinueData: this.props.Login.saveContinueData,\n        selectedComponentWithFile: objcomponent\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let isFileupload = false;\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      //ntype:2,\n      ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      // checkBoxOperation: 3,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; //inputData[\"checkBoxOperation\"] = 3;\n\n    inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\n    let tempData = {};\n    const formData = new FormData();\n    this.props.Login.withoutCombocomponent.map(item => {\n      if (item.inputtype === \"files\") {\n        if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\n          this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n            const fileName = create_UUID();\n            const splittedFileName = item1.name.split('.');\n            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = fileName + '.' + fileExtension;\n            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n            tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n            formData.append(\"uploadedFile\" + index, item1);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\n            formData.append(\"isFileEdited\", transactionStatus.YES);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            inputData['isFileupload'] = true;\n            inputData[\"registration\"]['jsondata'] = { ...inputData[\"registration\"]['jsondata'],\n              ...tempData\n            };\n            inputData[\"registration\"]['jsonuidata'] = { ...inputData[\"registration\"]['jsonuidata'],\n              ...tempData\n            };\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\n            isFileupload = true;\n          });\n        }\n      }\n    }); // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      isFileupload,\n      formData: formData // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  updateSchedulerConfig(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let isFileupload = false;\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus == 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      nflag: 2,\n      //ntype:2,\n      ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\n      nschedulersamplecode: String(this.state.selectedRecord.nschedulersamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nregsubtypeversioncode: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypeversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      checkBoxOperation: checkBoxOperation.SINGLESELECT,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      nsampleschedulerconfigtypecode: this.props.Login.masterData.SchedulerConfigTypeValue && this.props.Login.masterData.SchedulerConfigTypeValue.nsampleschedulerconfigtypecode\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getSchedulerConfig(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"schedulerconfiguration\"] = param.sampleRegistration;\n    inputData[\"schedulerconfiguration\"][\"jsonuidata\"][\"nschedulersamplecode\"] = String(this.state.selectedRecord.nschedulersamplecode);\n    inputData[\"schedulerconfiguration\"][\"nschedulersamplecode\"] = String(this.state.selectedRecord.nschedulersamplecode);\n    inputData[\"schedulerconfiguration\"][\"nschedulecode\"] = this.state.selectedRecord['SchedulerMaster'] && this.state.selectedRecord['SchedulerMaster'].value || -1;\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\n    let tempData = {};\n    const formData = new FormData();\n    this.props.Login.withoutCombocomponent.map(item => {\n      if (item.inputtype === \"files\") {\n        if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\n          this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n            const fileName = create_UUID();\n            const splittedFileName = item1.name.split('.');\n            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = fileName + '.' + fileExtension;\n            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n            tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n            formData.append(\"uploadedFile\" + index, item1);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\n            formData.append(\"isFileEdited\", transactionStatus.YES);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            inputData['isFileupload'] = true;\n            inputData[\"registration\"]['jsondata'] = { ...inputData[\"registration\"]['jsondata'],\n              ...tempData\n            };\n            inputData[\"registration\"]['jsonuidata'] = { ...inputData[\"registration\"]['jsonuidata'],\n              ...tempData\n            };\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\n            isFileupload = true;\n          });\n        }\n      }\n    });\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SchedulerConfig\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSchedulerConfig',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      // testCommentDataState: this.state.testCommentDataState,\n      isFileupload,\n      formData: formData // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateSchedulerConfig(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertMultipleRegistration(saveType) {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; // Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24]; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n            Map[\"sDob\"] = convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        }); // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n        formData.append(\"filecount\", count);\n        let dateList = [];\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === 'date') {//dateList.push(item.label)\n          }\n        });\n\n        if (saveType === '1') {\n          this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\n            isFileupload = true;\n            Map[\"isFile\"] = true;\n            formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false));\n            formData.append(\"readFile\", item);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          });\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        } else {\n          isFileupload = true;\n          Map[\"isFile\"] = false;\n          Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n          formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        }\n\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nportalrequired\"] = this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; //  Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        Map[\"nneedmyjob\"] = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob ? this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob : false;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n        Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\n        Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n            Map[\"sDob\"] = convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n          Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label;\n          Map[\"extrenalOrderTypeCode\"] = Map[\"Registration\"]['jsonuidata'].nexternalordertypecode;\n          Map[\"RegistrationSample\"].map((x, i) => {\n            Map[\"RegistrationSample\"][i]['jsondata'] = { ...x['jsondata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n            Map[\"RegistrationSample\"][i]['jsonuidata'] = { ...x['jsonuidata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n          });\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        });\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"filecount\", count);\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  } // ALPD-4914 Added insertSchedulerConfig method for scheduler configuration screen\n\n\n  insertSchedulerConfig() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"SchedulerConfigSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"SchedulerConfigSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nportalrequired\"] = this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\n        Map[\"nschedulerconfigtypecode\"] = this.props.Login.masterData.RealSchedulerConfigTypeValue.nschedulerconfigtypecode;\n        Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus == 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n        Map[\"nsampleschedulerconfigtypecode\"] = this.props.Login.masterData.SchedulerConfigTypeValue && this.props.Login.masterData.SchedulerConfigTypeValue.nsampleschedulerconfigtypecode;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nregsubtypeversioncode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypeversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample; //  Map[\"checkBoxOperation\"] = 3;\n\n        Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n        Map[\"nneedmyjob\"] = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob ? this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob : false;\n        const param = getSchedulerConfig(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"SchedulerConfig\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n        Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\n        Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"SchedulerConfig\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"SchedulerConfig\"]['jsondata'] = { ...Map[\"SchedulerConfig\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"SchedulerConfig\"]['jsondata'] = { ...Map[\"SchedulerConfig\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n          Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label;\n          Map[\"extrenalOrderTypeCode\"] = Map[\"SchedulerConfig\"]['jsonuidata'].nexternalordertypecode;\n          Map[\"SchedulerConfigSample\"].map((x, i) => {\n            Map[\"SchedulerConfigSample\"][i]['jsondata'] = { ...x['jsondata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n            Map[\"SchedulerConfigSample\"][i]['jsonuidata'] = { ...x['jsonuidata'],\n              nordertypecode: Map[\"orderTypeValue\"],\n              sordertypename: Map[\"orderTypelabel\"],\n              externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label\n            };\n          });\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"SchedulerConfig\"]['jsondata'] = { ...Map[\"SchedulerConfig\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"SchedulerConfig\"]['jsonuidata'] = { ...Map[\"SchedulerConfig\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"SchedulerConfigSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"SchedulerConfigSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"SchedulerConfigSample\"][index].uniquefilename;\n              delete Map[\"SchedulerConfigSample\"][index][item && item.label];\n            });\n          }\n        });\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"filecount\", count);\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"create\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertSchedulerConfig(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOADD\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5238,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5241,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5243,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5245,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5249,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5254,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5260,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView : this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.Login.loadImportFileData ? this.closeImportFileData : this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5265,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5274,\n        columnNumber: 25\n      }\n    })), this.props.Login.operation === \"create\" && !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleExportClick(),\n      hidden: this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5284,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5288,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXPORTTEMPLATE\",\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5289,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      hidden: this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1,\n      onClick: event => this.AddImportFile(this.state.selectedRecord, event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5291,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5294,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_IMPORTTEMPLATE\",\n      defaultMessage: \"IDS_IMPORTTEMPLATE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5295,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      hidden: this.props.userRoleControlRights.indexOf(this.props.uploadsampledata) === -1,\n      onClick: event => this.AddImportFile(this.state.selectedRecord, event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5297,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5300,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_UPLOAD_DATA\",\n      defaultMessage: \"IDS_UPLOAD_DATA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5301,\n        columnNumber: 33\n      }\n    }))) : \"\", this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5307,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5308,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5309,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5313,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5314,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5315,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5318,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5319,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5320,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5323,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5324,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5325,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5329,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5332,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? - /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5335,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5336,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5337,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter || !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.importData ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5347,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5348,\n        columnNumber: 57\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5349,\n        columnNumber: 57\n      }\n    }))), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false) ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5354,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5355,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5356,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5362,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5363,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5364,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"popup-fixed-center-headed-full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5368,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5369,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5370,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5380,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5381,\n        columnNumber: 33\n      }\n    }, this.props.Login.patientRegistration ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5384,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5385,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PatientMaster, {\n      Login: this.props.Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5386,\n        columnNumber: 49\n      }\n    }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n      dynamicExternalSample: this.props.Login.dynamicExternalSample,\n      dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n      dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n      selectedRecord: this.state.selectedRecord,\n      selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5389,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5399,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5411,\n        columnNumber: 58\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5426,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      TestPackage: this.props.Login.TestPackage || [],\n      selectPackage: this.state.selectPackage,\n      selectSection: this.state.selectSection,\n      onTestPackageChange: this.onTestPackageChange,\n      onTestSectionChange: this.onTestSectionChange,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      TestSection: this.props.Login.TestSection || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5438,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5451,\n        columnNumber: 61\n      }\n    }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n      selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n      fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n      extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n      ,\n      selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n      onInputOnChange: this.onInputOnChangeMaster,\n      onComboChange: this.onComboChangeMaster,\n      handleDateChange: this.handleDateChangeMaster,\n      dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n      onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n      masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n      mastertimeZoneList: this.props.Login.mastertimeZoneList,\n      masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n      onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n      handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n      onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n      onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n      onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n      userInfo: this.props.Login.userInfo,\n      Login: this.props.Login,\n      addMasterRecord: this.addMasterRecord,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      masterIndex: this.props.Login.masterIndex,\n      custombuttonclick: this.custombuttonclick,\n      editMasterRecord: this.editMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5469,\n        columnNumber: 65\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      genericLabel: this.props.Login.genericLabel,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      selectPackage: this.state.selectPackage,\n      selectSection: this.state.selectSection,\n      selectedTestPackageData: this.state.selectedTestPackageData,\n      TestPackage: this.props.Login.TestPackage || [],\n      TestSection: this.props.Login.TestSection || [],\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      onTestPackageChange: this.onTestPackageChange,\n      onTestSectionChange: this.onTestSectionChange,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onDropFile: this.onDropFileSubSample,\n      deleteAttachment: this.deleteAttachmentSubSample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5498,\n        columnNumber: 69\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5538,\n        columnNumber: 73\n      }\n    }) : this.props.Login.loadImportFileData ? /*#__PURE__*/React.createElement(AddImportFileData //ALPD-3596                                                                  \n    , {\n      TestCombined: this.state.TestCombinedForImport || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      specBasedComponent: this.state.specBasedComponent,\n      userInfo: this.props.Login.userInfo,\n      selectedRecord: this.state.selectedRecord,\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      onInputOnChange: this.onInputOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5545,\n        columnNumber: 77\n      }\n    }) : this.props.Login.loadImportSampleCountData ? /*#__PURE__*/React.createElement(AddImportSampleCountData, {\n      selectedRecord: this.state.selectedRecord,\n      userInfo: this.props.Login.userInfo,\n      onNumericInputChange: this.onNumericInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5559,\n        columnNumber: 81\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut //addPatient={this.addPatient}\n    , {\n      onSchedulerComboChange: this.onSchedulerComboChange,\n      siteList: this.props.siteList || [],\n      nsampleschedulerconfigtypecode: this.props.nsampleschedulerconfigtypecode,\n      nschedulerconfigtypecode: this.props.nschedulerconfigtypecode,\n      schedulerList: this.props.schedulerList || [],\n      scheduleMasterDetails: this.props.scheduleMasterDetails || [],\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userRoleControlRights1: this.props.Login.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      specBasedTestPackage: this.state.specBasedTestPackage,\n      custombuttonclick: this.custombuttonclick,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onClickView: this.onClickView,\n      comboComponents: this.props.Login.comboComponents,\n      sampleType: {\n        \"label\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\n        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        \"item\": this.props.Login.masterData.RealSampleTypeValue\n      },\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      AddImportFile: this.AddImportFile,\n      AddSampleCount: this.AddSampleCount,\n      importData: this.props.Login.importData,\n      ntestgroupspecrequired: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired : false //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to RegisterSlideOut component\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5564,\n        columnNumber: 83\n      }\n    })), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5649,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: (this.props.Login.screenName && this.props.Login.screenName) + \"_\" + this.state.selectedSpec.nallottedspeccode.label,\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5650,\n        columnNumber: 41\n      }\n    }, [...this.state.exportFiled].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.label,\n      title: (item.idsField ? this.props.intl.formatMessage({\n        id: item.displayname\n      }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? item.dateonly ? '(yyyy-mm-dd)' : item.timeonly ? '(HH:mm:ss)' : '(yyyy-mm-dd  HH:mm:ss)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5658,\n        columnNumber: 49\n      }\n    })))) : \"\")))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  callService,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler,\n  testPackageTest,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail,\n  getEditMaster,\n  insertMultipleRegistration,\n  insertRegSample,\n  testSectionTest,\n  insertSchedulerConfig,\n  updateSchedulerConfig,\n  getSchedulerMasteDetails,\n  uploadSamplesData\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","Row","Col","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","SampleType","transactionStatus","formCode","designComponents","faCalculator","faFileExport","faFileImport","ageCalculate","ageCalculateOnlyForYear","childComboClear","comboChild","convertDateTimetoString","extractFieldHeader","filterRecordBasedOnTwoArrays","formatDate","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","removeIndex","removeSpaceFromFirst","showEsign","sortByField","validateEmail","validatePhoneNumber","conditionBasedInput","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","Lims_JSON_stringify","checkFilterIsEmptyQueryBuilder","convertDateTimetoStringDBFormat","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","callService","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","testPackageTest","rearrangeDateFormatforKendoDataTool","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","getEditMaster","insertMultipleRegistration","insertRegSample","testSectionTest","insertSchedulerConfig","updateSchedulerConfig","getSchedulerMasteDetails","uploadSamplesData","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","getSchedulerConfig","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","PatientMaster","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrderSlideout","AddImportFileData","AddImportSampleCountData","ExcelExport","ExcelExportColumn","LocalizationProvider","checkBoxOperation","rsapi","Axios","faUpload","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","selectedTestPackageData","selectPackage","selectSection","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","specBasedTestPackage","selectedMaster","exportFiled","importSampleRawData","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","filterQueryTreeStr","getTree","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","isFilterEmpty","undefined","includes","val","seletedFilterComponent","info","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","index","masterIndex","map","item","columnname","ndesigncomponentcode","COMBOBOX","label","sdisplaymember","value","svaluemember","DATEPICKER","loadCustomSearchFilter","screenName","addMaster","selectedControl","displayname","slanguagetypecode","masterData","RealRegSubTypeValue","sregsubtypename","newdata","jsondata","onComboChange","handleSaveClick","saveType","startLabel","mandatoryFields","masterextractedColumnList","x","mandatory","loadComponent","loadSubSample","SubSampleTemplate","row","children","column","hasOwnProperty","componentrow","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","loadTest","loadImportFileData","registrationTemplate","sampleexportfields","findIndex","loadImportSampleCountData","loadSpec","esign","loadEsign","forEach","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","validateEsign","onSaveMasterRecord","selectedSpecCheck","ncomponentrequired","YES","subSampleDataGridList","genericLabel","width","inputvalues","nallottedspeccode","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClickImport","onSaveClick","MandatoryCheckSubSample","exportFields","comboComponent","exportFieldProperties","subSampleFields","subsampleexportfields","templatemandatory","MandatoryCheck","TestChange","comboData","fieldName","onSchedulerComboChange","Map","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","project","nprojectmastercode","childSpec","nsampletypecode","RealSampleTypeValue","STABILITY","CLINICALTYPE","table","nquerybuildertablecode","name","sampleTypeCatBasedFlow","ncategorybasedflowrequired","nprojectSpecReqd","nprojectspecrequired","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","ProductCategory","comboComponents","ncategorybasedflow","PROJECTSAMPLETYPE","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","withoutCombocomponent","mapOfFilter","nneedsubsample","nportalrequired","ntestgroupspecrequired","temp","components","temp1","onInputOnChange","radiotext","target","type","checked","needTest","testForImport","indexOf","indexcomma","slice","defaultValue","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","SampleTypeValue","ageComp","age","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","selectedSpecification","slno","getTestForImport","objComponent","LoginProps","urlArray","TestGet","post","nspecsampletypecode","all","then","response","TestData","TestCombinedForImport","loading","catch","error","message","AddImportFile","buttonName","innerText","warn","AddSampleCount","addTestslide","componentBasedSpec","isValid","Object","keys","closeSpec","closeImportFileData","sfilename","closeImportSampleCountData","closeKendoFilter","logic","filters","closeAddMaster","masterfieldList","masterdataList","mastercomboComponents","masterComboColumnFiled","masterwithoutCombocomponent","masterDesign","masterOperation","masterEditObject","closeDynamicView","isDynamicViewSlideOut","selectedDynamicViewControl","closeComponent","closeTest","TestCombined","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","TestPackage","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","onTestPackageChange","action","selectedComponentData","availableTest","availableTestSection","testData","AllTest","AllSection","TestSection","onTestSectionChange","TestPakageTest","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","orderTypeComp","nformcode","SCHEDULERCONFIGURATION","onUpdateRegistration","isFileupload","findSubsampleDateList","PREREGISTER","ndesigntemplatemappingcode","RealApprovalConfigVersionValue","napproveconfversioncode","RegSubTypeValue","nneedtemplatebasedflow","SINGLESELECT","param","defaultTimeZone","dateList","fields","join","importTest","subSample","sampleeditable","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","activeTestTab","activeSampleTab","activeSubSampleTab","nneedjoballocation","dateComp","genderComp","Date","orderType","ndefaulttemplatecode","formData","FormData","append","JSON","stringify","postParamList","uploadedData","parameters","onNumericBlur","handleExportClick","subSampleLayout","mandatoryCheck","export","onComboChangeMaster","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","toLowerCase","nmastersitecode","isEmailCheck","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","jsonuidata","slideoutdesign","loadcurrentdate","PATIENTMASTER","isJsonField","jsonObjectName","controlType","dateField","controlName","fieldData","ssubmitterfirstname","sfirstname","ssubmitterlastname","slastname","ssubmitteremail","semail","sshortname","ssubmittercode","ssubmitterid","stelephone","sinstitutionsitename","sinstitutionname","sinstitutioncode","sinstitutioncatname","sinstitutiondistrictname","selectedRecordName","classUrl","onClickView","toUpperCase","fieldList","extractedColumnList","get","values","primaryKeyField","masterprimaryKeyField","editMasterRecord","editObject","onComboChangeMasterDyanmic","childParam","mastedataList","onInputOnChangeMasterDynamic","test","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onDropFileSubSample","deleteAttachmentSubSample","myRef","PrevoiusLoginData","componentColumnList","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","userRoleControlRights","TESTPACKAGE","subSampleDataDetailGridList","columnSize","_excelExportHeader","save","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","subSampleCurrentDataGridList","dateLst","selectedComponentWithFile","saveContinueData","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","RealDesignTemplateMappingValue","selectedSample","tempData","fileName","splittedFileName","split","fileExtension","uniquefilename","susername","suserrolename","size","displayName","sloginid","showConfirmAlert","resultDataState","testCommentDataState","ncontrolCode","screenData","openModal","openPortal","FilterStatus","nschedulersamplecode","nregsubtypeversioncode","nsampleschedulerconfigtypecode","SchedulerConfigTypeValue","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","SelectedScheduler","count","item12","nsamplecount","nneedmyjob","ncontrolcode","noutsourcerequired","loadAdhocTest","nexternalordertypecode","i","nordertypecode","sordertypename","externalorderid","RealSchedulerConfigTypeValue","nschedulerconfigtypecode","render","ignoreFormValidation","buttonLabel","idsLabel","concat","className","closeModal","graphView","loginoperation","exportTemplateId","importTemplateId","uploadsampledata","showValidate","showCalculate","showParam","showExecute","noSave","resetView","importData","showSave","patientRegistration","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","hideQualisForms","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","mastertimeZoneList","masterdefaultTimeZone","siteList","schedulerList","scheduleMasterDetails","loadPreregister","handleChange","ssampletypename","exporter","idsField","dateonly","timeonly"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\r\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ageCalculate,\r\n    ageCalculateOnlyForYear,\r\n    childComboClear,\r\n    comboChild, convertDateTimetoString,\r\n    extractFieldHeader,\r\n    filterRecordBasedOnTwoArrays,\r\n    formatDate,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays,\r\n    rearrangeDateFormat,\r\n    rearrangeDateFormatforUI,\r\n    removeIndex,\r\n    removeSpaceFromFirst,\r\n    showEsign,\r\n    sortByField,\r\n    validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify,\r\n    checkFilterIsEmptyQueryBuilder, convertDateTimetoStringDBFormat\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, callService,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest,\r\n    rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration,\r\n    insertRegSample, testSectionTest, insertSchedulerConfig,updateSchedulerConfig,getSchedulerMasteDetails,\r\n    uploadSamplesData\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport {\r\n    getSchedulerConfig\r\n} from '../Scheduler//SchedulerValidation.jsx';\r\n\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport Esign from '../audittrail/Esign';\r\nimport PatientMaster from '../contactmaster/PatientMaster';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\r\nimport AddImportFileData from './AddImportFileData';\r\nimport AddImportSampleCountData from './AddImportSampleCountData';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { checkBoxOperation } from '../../components/Enumeration';\r\nimport rsapi from '../../rsapi.js';\r\nimport Axios from 'axios';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        selectedTestPackageData: {},\r\n        selectPackage: {},\r\n        selectSection: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        specBasedTestPackage: false,\r\n        selectedMaster: [],\r\n        exportFiled: [],\r\n        importSampleRawData:0\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n\r\n    // searchClickedItemParent(treeData) {\r\n    //     let ParentItem = { ...treeData };\r\n    //     let isFilterEmpty=true;\r\n    //         let childArray = ParentItem.children1;\r\n    //         if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n    //             for (var i = 0; i < childArray.length; i++) {\r\n    //                 let childData = childArray[i]\r\n    //                 if (!childData.hasOwnProperty('children1')) {\r\n    //                     if( childData.properties.field !== null && childData.properties.operator!==\"is_empty\"\r\n    //                       && childData.properties.operator!==\"is_not_empty\"\r\n    //                       && childData.properties.operator!==\"is_null\"\r\n    //                       && childData.properties.operator!==\"is_not_null\" ){\r\n    //                         if( childData.properties.field !== null && (childData.properties.operator===\"not_equal\"||childData.properties.operator===\"equal\") &&\r\n    //                         childData.properties.valueSrc[0]==='func'){\r\n    //                        isFilterEmpty= childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==\"\" && \r\n    //                        childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==undefined ? true:false;\r\n    //                         }else{\r\n    //                         isFilterEmpty= (childData.properties.value[0]!==\"\" && childData.properties.value[0]!==undefined)? true:false;\r\n    //                         }\r\n    //                         if(!isFilterEmpty){\r\n    //                         return isFilterEmpty;\r\n    //                     }\r\n    //                 }\r\n    //                 } else {\r\n    //                     if (childData) {\r\n    //                         ParentItem = this.searchClickedItemParent(childData)\r\n    //                         if(!ParentItem){\r\n    //                             return ParentItem;\r\n    //                         }\r\n    //                     } \r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         return isFilterEmpty;\r\n    // }\r\n\r\n    handleExecuteClick = (event) => {\r\n        const filterquery = this.props.Login.filterquery\r\n        const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\r\n        let isFilterEmpty = checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\r\n        if (filterquery !== \"\" && filterquery !== undefined\r\n            && !filterquery.includes('Invalid date') && isFilterEmpty) {\r\n            const val = removeSpaceFromFirst(filterquery, '')\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: val\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        if (component[\"childFields\"]) {\r\n            const index = this.props.Login.masterIndex;\r\n            let selectedRecord = this.state.selectedMaster || {};\r\n\r\n            component[\"childFields\"].map(item => {\r\n                let data = item1[item.columnname];\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    //combocontrol\r\n                    data = { label: item1[item.sdisplaymember], value: item1[item.svaluemember] };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    //Date picker control\r\n                    data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\r\n                }\r\n                selectedRecord[index][item.columnname] = data;\r\n            })\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: selectedRecord, loadCustomSearchFilter: false,\r\n                    screenName: this.props.Login.addMaster === true\r\n                        ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                        : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            const newdata = {\r\n                label: item1[component['displaymember']],\r\n                value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n            }\r\n\r\n\r\n            this.onComboChange(newdata, component, component['label'])\r\n        }\r\n    };\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         if (this.props.Login.loadSubSample) {\r\n    //             const selectComponent = this.state.selectComponent;\r\n    //             component.child.map(y => {\r\n    //                 const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 // if (readonlyfields !== -1) {\r\n\r\n    //                 //     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                 //             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n    //                 //     } else {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                 //     }\r\n    //                 // }\r\n\r\n    //                 if (readonlyfields !== -1) {\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectComponent[y.label + 'value'] = selectComponent[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectComponent[y.label]);\r\n\r\n    //                                     selectComponent[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     } else {\r\n    //                         if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                     selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         } else {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         }\r\n    //                     }\r\n\r\n\r\n    //                 } else {\r\n    //                     const comboComponents = this.state.SubSamplecomboComponents;\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n\r\n    //                             const val = this.props.Login.SubSamplecomboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectComponent[y.label] = val[0]\r\n\r\n    //                             //selectComponent[y.label] = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectComponent,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: \"SubSample\",\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         } else {\r\n    //             const selectedRecord = this.state.selectedRecord;\r\n    //             component.child.map(y => {\r\n    //                 // component.filterfields.filter(x=>x.)\r\n    //                 const withoutCombocomponent = this.props.withoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                     selectedRecord[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     }\r\n    //                     else if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 } else {\r\n    //                     const comboComponents = this.props.comboComponents || [];\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n    //                             const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectedRecord[y.label] = val[0]\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectedRecord,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // console.log(\"handle save:\", selectedRecord);\r\n\r\n        if (this.props.Login.addMaster) {\r\n            const masterIndex = this.props.Login.masterIndex\r\n            mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true)\r\n            selectedRecord = this.state.selectedMaster[masterIndex]\r\n        }\r\n        else if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // console.log(\"component1:\", component);\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    //  console.log(\"componentrow:\", componentrow);\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label,\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        } else if (this.props.Login.loadImportFileData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"files\" },\r\n            ]\r\n\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) === -1) {\r\n                                        if (componentrow.mandatory === true) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : this.props.sampleexportfields.findIndex(x => x === component.label) === -1 ? component.mandatory === true ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n\r\n        }\r\n        else if (this.props.Login.loadImportSampleCountData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SAMPLECOUNT\", \"dataField\": \"nsamplecount\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            ]\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        //\"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        // \"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        //  console.log(\"mandate fields:\", mandatoryFields);\r\n       /* if(this.props.Login.userInfo.nformcode===241 && this.props.Login.masterData.RealSampleTypeValue &&\r\n            this.props.Login.masterData.RealSampleTypeValue.nsampletypecode===2){\r\n            mandatoryFields.unshift( { \"idsName\": \"IDS_SITE\", \"dataField\": \"SchedulerSite\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            )\r\n        }*/\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.addMaster) {\r\n                    this.onSaveMasterRecord(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    let selectedSpecCheck = { ...this.state.selectedSpec }\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": this.props.Login.genericLabel ? \r\n                            this.props.Login.genericLabel[\"SubSample\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\r\n                            :\"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    let inputvalues = {};\r\n                    if (this.state.selectedRecord[\"nallottedspeccode\"] !== selectedSpecCheck.nallottedspeccode) {\r\n                        inputvalues = {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec: { ...selectedSpec },                         \r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    } else {\r\n                        inputvalues = {\r\n                            loadSpec: false,\r\n                            selectedSpec: { ...selectedSpec },                          \r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            // selectedTestData: [],\r\n                            // selectComponent: [],\r\n                            // selectedComponent: {},\r\n                            // loadSpec: false,\r\n                            // SelectedTest: [],\r\n                            // Test: [],\r\n                            // Component: [],\r\n                            // subSampleDataGridList: [],\r\n                            // selectedSpec: { ...selectedSpec },\r\n                            // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                            //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            // specBasedComponent\r\n                            ...inputvalues\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadImportFileData) {\r\n                    this.onSaveClickImport('1', this.formRef);\r\n                }\r\n                else if (this.props.Login.loadImportSampleCountData) {\r\n                    this.onSaveClickImport('2', this.formRef);\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    MandatoryCheckSubSample = () => {\r\n\r\n        let mandatoryFields = []\r\n        let exportFields = []\r\n        let comboComponent = []\r\n        let exportFieldProperties = []\r\n\r\n        let subSampleFields = []\r\n        if (this.state.specBasedComponent) {\r\n            exportFieldProperties = [{ \"nquerybuildertablecode\": 32, \"valumeber\": \"ncomponentcode\", \"inputtype\": \"combo\", \"displaymember\": \"scomponentname\", \"label\": \"ncomponentcode\", \"source\": \"component\" }]\r\n            mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\", \"mandatory\": true, }]\r\n            // mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            exportFields = [\"ncomponentcode\"]\r\n            subSampleFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n        }\r\n\r\n\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n                                subSampleFields.push({\r\n                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    \"dataField\": componentrow.label,\r\n                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                        \"selectbox\" : \"textbox\",\r\n                                    \"label\": componentrow.label\r\n                                })\r\n\r\n\r\n                                if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    exportFields.push(componentrow.label\r\n                                    )\r\n                                    exportFieldProperties.push(componentrow)\r\n                                }\r\n\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n                            subSampleFields.push({\r\n                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                \"dataField\": component.label,\r\n                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                \"controlType\": component.inputtype === \"combo\" ?\r\n                                    \"selectbox\" : \"textbox\",\r\n                                \"label\": component.label\r\n                            })\r\n\r\n                            if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                exportFields.push(\r\n                                    component.label\r\n                                )\r\n                                exportFieldProperties.push(component)\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, subSampleFields, comboComponent, exportFieldProperties };\r\n    }\r\n\r\n    // SubSampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n    // SampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n\r\n    MandatoryCheck = () => {\r\n        const mandatoryFields = []\r\n        const exportFields = []\r\n        const exportFieldProperties = []\r\n        const comboComponent = []\r\n        this.props.Login.masterData.registrationTemplate &&\r\n            this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n\r\n                                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    exportFields.push(componentrow.label)\r\n                                    exportFieldProperties.push(componentrow)\r\n                                }\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n\r\n                            if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                exportFields.push(component.label\r\n                                )\r\n                                exportFieldProperties.push(component)\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory && this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, comboComponent, exportFieldProperties };\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSchedulerComboChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            let selectedRecord = this.state.selectedRecord;\r\n            Map[\"nschedulecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n           \r\n            selectedRecord[fieldName] = event;\r\n            this.props.getSchedulerMasteDetails(Map, selectedRecord, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //console.log(\"Control:\", control);\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            let project = false;\r\n            let nprojectmastercode = -1;\r\n            let childSpec = false;\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n            this.props.Login.masterData.RealSampleTypeValue.nsampletypecode===SampleType.STABILITY?1:\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                : 1\r\n\r\n            if (nsampletypecode === SampleType.CLINICALTYPE) {\r\n                if (control.table && control.table.item.nquerybuildertablecode === 228\r\n                    && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\r\n                    selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid']\r\n                }\r\n            }\r\n\r\n            if (control.name === \"manualorderid\") {\r\n                selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid']\r\n            }\r\n\r\n            const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired)\r\n                : transactionStatus.NO\r\n\r\n            const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired)\r\n                : transactionStatus.NO;\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                    this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                    \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n                };\r\n\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009       \r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n                        product = true;\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument Name') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE\r\n                    && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n\r\n                        //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                    else {\r\n\r\n                        const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n                        productCategory = true;\r\n                    }\r\n                    else {\r\n                        inputParem[\"ProductName\"] = Product[0].label;\r\n                        product = true;\r\n                    }\r\n\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n            else if (control.name === 'Project Code') {\r\n                //project = true;\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\r\n\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    // nproductcode = selectedRecord[Product[0].label] &&\r\n                    //     selectedRecord[Product[0].label].value;\r\n                    nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n                }\r\n                nprojectmastercode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    project = true;\r\n                }\r\n                // else{\r\n                //     if (ncategorybasedflow === 3) {\r\n                //         productCategory = true;\r\n                //     }\r\n                //     else{\r\n                //         product =true;\r\n                //     }\r\n                // }\r\n\r\n            }\r\n\r\n            if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                product = false;\r\n                productCategory = false;\r\n                materialType = false;\r\n                instrument = false;\r\n                instrumentCategory = false;\r\n                material = false;\r\n                materialCategory = false;\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                // let childTemplateMandatory = {}\r\n                // if (!(product ||\r\n                //     productCategory ||\r\n                //     materialType ||\r\n                //     instrument ||\r\n                //     instrumentCategory ||\r\n                //     material ||\r\n                //     materialCategory ||\r\n                //     project)) {\r\n                //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\r\n                //     if (TemplateMandatory && TemplateMandatory.length > 0) {\r\n                //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\r\n                //         const Product = childComboList.filter(x => x.name === \"Product\");\r\n                //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\r\n                //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\r\n                //         const Material = childComboList.filter(x => x.name === \"Material\");\r\n                //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\r\n                //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\r\n                //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\r\n\r\n                //         childTemplateMandatory = {\r\n                //             ProductCategory, Product\r\n                //             , InstrumentCategory\r\n                //             , MaterialCategory, Material\r\n                //             , MaterialType, MaterialType\r\n                //             , ProjectCode, Instrument\r\n                //         }\r\n                //         if (ProductCategory || Product\r\n                //             || InstrumentCategory\r\n                //             || MaterialCategory || Material\r\n                //             || MaterialType || MaterialType\r\n                //             || ProjectCode || Instrument) {\r\n                //             childSpec = true;\r\n                //         }\r\n                //     }\r\n                //     else {\r\n                //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\r\n                //         if (TemplateChild&& TemplateChild.length> 0) {\r\n\r\n                //             TemplateChild.map(x=>{\r\n                //                 x.child&&x.child.map(y=>{\r\n                //                 const data=this.props.comboComponents(x=>x.label===y.label)  \r\n                //                 if(data&&data[0].templatemandatory){\r\n                //                     const name=data[0].name\r\n                //                     if(name===\"Product Category\"||name===\"Instrument Category\"\r\n                //                     ||name===\"Product\"||name===\"Material Category\"\r\n                //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\r\n                //                         childSpec = true;\r\n                //                         childTemplateMandatory={childSpec:true}\r\n                //                     }\r\n                //                 }\r\n                //                 })\r\n                //             })\r\n                //         }\r\n\r\n                //     }\r\n                // }\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                    nprojectmastercode, nprojectSpecReqd,\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n                    nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\r\n                    ntestgroupspecrequired: this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired === true ? transactionStatus.YES : transactionStatus.NO  //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to backend\r\n                    // ...childTemplateMandatory\r\n                }\r\n              /*  if(this.props.Login.userInfo.nformcode===241){\r\n                childComboList = childComboList.map(item => {\r\n                    if (item.label === 'Instrument ID') {\r\n                        return { ...item, conditionstring: \"\" };\r\n                    }\r\n                    return item;\r\n                });\r\n            }*/\r\n                \r\n                this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType,\r\n                    undefined, project, this.props.comboComponents)\r\n            }\r\n            else {\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType\r\n                    || project) {\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                        nprojectmastercode,\r\n                        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n                        ntestgroupspecrequired: this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired === true ? transactionStatus.YES : transactionStatus.NO  //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to backend\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material,\r\n                        undefined, undefined, project)\r\n                } else {\r\n                    //let sitevalue=comboData.value;\r\n                        let comboData=this.props.Login.comboData;\r\n\r\n                    //   if(sitevalue===selectedRecord['SchedulerSite'].value){\r\n                     if(customName==='SchedulerSite'){\r\n\r\n                            this.props.comboComponents.forEach(item=>{\r\n                            if(item.name==='Instrument Category' || item.name==='Instrument Name' || item.name==='Instrument'){\r\n                             delete  selectedRecord[item.label];\r\n                             if(item.name!=='Instrument Category')\r\n                             comboData[item.label]='';\r\n\r\n                            }\r\n                            });\r\n                           \r\n                    \r\n                    }\r\n               // }\r\n                   \r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, loadCustomSearchFilter: false,comboData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, control, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n            //ALPD-3596 Start\r\n            if (event.target.name === \"importTest\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n                if (event.target.checked === false) {\r\n                    let needTest = event.target.checked\r\n                    this.testForImport(needTest)\r\n                }\r\n            }\r\n            //ALPD-3596 End\r\n\r\n            else {\r\n\r\n                const value = selectedRecord[event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    if (value.includes(radiotext)) {\r\n                        const index = value.indexOf(radiotext);\r\n                        if (index !== -1) {\r\n                            if (index === 0) {\r\n                                const indexcomma = value.indexOf(\",\")\r\n                                if (indexcomma !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = \"\"\r\n                                }\r\n                            } else {\r\n                                if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = radiotext;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // if (control.isnumeric === true\r\n            //      && control.label===radiotext) {\r\n            //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            // } else {\r\n            //     selectedRecord[event.target.name] = event.target.value;\r\n            // }\r\n            //  selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, control, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // if (control.isnumeric === true\r\n            //     && control.label===radiotext) { \r\n            //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            //     } else {\r\n            //         selectComponent[event.target.name] = event.target.value;\r\n            //     }\r\n            // selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, source: control.source } : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: \"IDS_SUBSAMPLE\"\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode,\r\n                source: control.source\r\n            };\r\n\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n            const age = ageCalculate(dateValue);\r\n            selectedRecord[ageComp[0].label] = age;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n\r\n        if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n            check = true;\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n            // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n            //     this.props.Login.userRoleControlRights !== undefined ? true : false\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            this.subSampleDataGridList = []\r\n            this.subSampleDataDetailGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": this.props.Login.genericLabel ? \r\n                    this.props.Login.genericLabel[\"SubSample\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\r\n                    :\"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"150px\"\r\n                                        })\r\n                                    } else {\r\n                                        this.subSampleDataDetailGridList.push({\r\n                                            \"mandatory\": false,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"50px\", columnSize: \"2\"\r\n                                        })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory) {\r\n                                    this.subSampleDataGridList.push({\r\n                                        \"mandatory\": true,// \"idsName\": component.label,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"150px\",\r\n                                    });\r\n                                } else {\r\n                                    this.subSampleDataDetailGridList.push({\r\n                                        \"mandatory\": false,\r\n                                        //\"idsName\": componentrow.label, \r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"50px\", columnSize: \"2\"\r\n                                    })\r\n                                }\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent, specBasedTestPackage\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\r\n            this.setState({ selectedTestPackageData: this.props.Login.selectedTestPackageData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\r\n            this.setState({ selectPackage: this.props.Login.selectPackage });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectSection !== this.PrevoiusLoginData.Login.selectSection) {\r\n            this.setState({ selectSection: this.props.Login.selectSection });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\r\n            this.setState({ specBasedTestPackage: this.props.Login.specBasedTestPackage });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.info(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    //ALPD-3596 Start\r\n\r\n    testForImport = (needTest) => {\r\n        const selectedSpecification = {\r\n            nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            slno: 1\r\n        };\r\n        this.getTestForImport(selectedSpecification, this.props.Login,\r\n            (this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample), this.state.selectedRecord, needTest, this.state.specBasedComponent);\r\n    }\r\n    getTestForImport = (objComponent, LoginProps, nneedsubsample, selectedRecord, needTest, specBasedComponent) => {\r\n        if (!this.state.specBasedComponent) {\r\n            const urlArray = []\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n\r\n            });\r\n            urlArray[0] = TestGet;\r\n            Axios.all(urlArray).then(response => {\r\n\r\n                let TestData = response[0].data;\r\n                let Test = LoginProps.Test || [];\r\n                let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                let TestCombinedForImport = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                selectedRecord['importTest'] = needTest ? transactionStatus.YES : transactionStatus.NO;\r\n                this.setState({\r\n                    TestCombinedForImport,\r\n                    // AllTest: TestData,\r\n                    // screenName: intl.formatMessage({ id: \"IDS_IMPORT\" }),\r\n                    selectedTestData: [],\r\n                    selectedRecord: selectedRecord,\r\n                    // loadImportFileData: true,\r\n                    loading: false,\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    this.setState({ loading: false });\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n    //ALPD-3596 End\r\n\r\n\r\n    AddImportFile = (selectedRecord,event) => {\r\n        var buttonName = event.target.innerText;\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            if(buttonName.indexOf('Upload Data')){\r\n                this.setState({importSampleRawData:1});\r\n                selectedRecord['importTest'] = transactionStatus.NO;\r\n            }\r\n            else{\r\n                 //ALPD-3596\r\n                selectedRecord['importTest'] = transactionStatus.YES;\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadImportFileData: true,\r\n                    screenName: this.props.intl.formatMessage({ id: \"IDS_IMPORT\" }),\r\n                    selectedRecord: selectedRecord \t\t//ALPD-3596\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n    AddSampleCount = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SAMPLECOUNT\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let isValid = true;\r\n            const selectedSpecification = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            };\r\n            let selectedRecord = selectedComponent;\r\n            //  if(componentBasedSpec){\r\n            if (nneedsubsample) {\r\n                if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                    delete selectedComponent[\"selected\"];\r\n                }\r\n                else {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = selectedSpecification;\r\n            }\r\n            // }\r\n            // else{\r\n            //     selectedRecord = selectedSpecification;          \r\n            // }\r\n\r\n            if (isValid) {\r\n                this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n            // } \r\n            // else {\r\n            //     const selectedComponent1 = {\r\n            //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            //         slno: 1\r\n            //     }\r\n            //     this.props.getTest(selectedComponent1,\r\n            //         this.props.Login,\r\n            //         nneedsubsample, specBasedComponent);\r\n            // }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeImportFileData = (e) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedTestData: {}, \t\t//ALPD-3596 \r\n                loadImportFileData: false,\r\n                TestCombinedForImport: [], \t\t//ALPD-3596 \r\n                selectedRecord: { ...{ ...this.state.selectedRecord, sfilename: undefined }, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeImportSampleCountData = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.addMaster === true\r\n                    ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                    : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n\r\n\r\n    closeAddMaster = (e) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let updateInfo = {}\r\n        if (masterIndex !== 0) {\r\n\r\n            const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n            const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex)\r\n            const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n            const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n            const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex)\r\n            const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n            const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n            const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n            const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex)\r\n            const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex)\r\n            const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex)\r\n            masterIndex = masterIndex - 1;\r\n\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster,\r\n                    selectedControl,\r\n                    masterextractedColumnList,\r\n                    masterfieldList,\r\n                    masterdataList,\r\n                    mastercomboComponents,\r\n                    masterwithoutCombocomponent,\r\n                    masterComboColumnFiled,\r\n                    masterDesign,\r\n                    masterIndex,\r\n                    screenName,\r\n                    masterOperation,\r\n                    masterEditObject,\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: [],\r\n                    selectedControl: [],\r\n                    masterextractedColumnList: [],\r\n                    masterfieldList: [],\r\n                    addMaster: false,\r\n                    masterdataList: [],\r\n                    mastercomboComponents: [],\r\n                    masterwithoutCombocomponent: [],\r\n                    masterComboColumnFiled: [],\r\n                    masterDesign: [],\r\n                    masterEditObject: [],\r\n                    masterOperation: [],\r\n                    masterIndex: undefined,\r\n                    screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeDynamicView = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isDynamicViewSlideOut: false,\r\n                selectedDynamicViewControl: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                TestCombined: [],\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\",\r\n                TestPackage: [],\r\n                //Test:[]\r\n                TestCombined: [],\r\n\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n            ntestgroupspecrequired: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? \r\n                this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired ? transactionStatus.YES : \r\n                transactionStatus.NO : transactionStatus.NO,    // ALPD-5259    Added ntestgroupspecrequired key to send it to backend by Vishakh\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                // selectComponent[\"nneedsubsample\"] = nneedsubsample;\r\n                selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\r\n        const selectPackage = this.state.selectPackage || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        const selectSection = this.state.selectSection;\r\n\r\n        if (comboData !== null) {\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            let availableTestSection = [];\r\n            if (selectPackage[\"ntestpackagecode\"]) {\r\n                //ALPD-3404\r\n                delete selectPackage[\"ntestpackagecode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n                delete selectSection[\"nsectioncode\"];\r\n                let Test = (action !== \"AddSubSample\") ? (this.props.Login.Test || []) : [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                // ALPD-4919, Added condition to when this.props.Login.selectedComponent is undefined then should return empty array\r\n                let componentTest = this.props.Login.selectedComponent && Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n                availableTestSection = this.props.Login.AllSection || [];\r\n\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n                availableTestSection = this.props.Login.AllSection || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectPackage, selectSection, TestCombined: availableTest, TestSection: availableTestSection }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n    //ALPD-3404\r\n    onTestSectionChange = (comboData, fieldName, nneedsubsample, action) => {\r\n        const selectPackage = this.state.selectPackage;\r\n        const selectSection = this.state.selectSection || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n\r\n        if (comboData !== null) {\r\n            selectSection[fieldName] = comboData;\r\n            selectSection[\"ssectionname\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testSectionTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, selectSection, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            if (selectSection[\"nsectioncode\"]) {\r\n                delete selectSection[\"nsectioncode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n                let Test = (action !== \"AddSubSample\") ? (this.props.Login.Test || []) : [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                // ALPD-4919, Added condition to when this.props.Login.selectedComponent is undefined then should return empty array\r\n                let componentTest = this.props.Login.selectedComponent && Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = selectPackage['ntestpackagecode'] ? this.props.Login.TestPakageTest || []\r\n                    : filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectSection, TestCombined: availableTest, TestSection: this.props.Login.TestSection || [] }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            // START ALPD-3673 VISHAKH\r\n            let dateList = subSampleDetail.dateList;\r\n            let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'], ...saveComponent };\r\n            if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\r\n                dateList.map(dateLst => {\r\n                    if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\r\n                        subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\r\n                    }\r\n                })\r\n            }\r\n            subSampleDataGridList.push(subSampleCurrentDataGridList);\r\n            // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n            // END ALPD-3673 VISHAKH\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\", selectedComponentWithFile: objcomponent,\r\n\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            // START ALPD-3673 VISHAKH\r\n            let dateList = subSampleDetail.dateList;\r\n            let subSampleCurrentDataGridList = { ...saveComponent['jsonuidata'], ...saveComponent };\r\n            if (dateList && dateList.length > 0 && subSampleCurrentDataGridList) {\r\n                dateList.map(dateLst => {\r\n                    if (subSampleCurrentDataGridList.hasOwnProperty(dateLst)) {\r\n                        subSampleCurrentDataGridList[dateLst] = convertDateTimetoString(new Date(subSampleCurrentDataGridList[dateLst]), this.props.Login.userInfo);\r\n                    }\r\n                })\r\n            }\r\n            subSampleDataGridList.push(subSampleCurrentDataGridList);\r\n            // subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n            // END ALPD-3673 VISHAKH\r\n\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                TestCombined: this.props.Login.TestCombined,\r\n                //selectComponent:C.saveContinueData,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList,\r\n                //selectedTestData: {}\r\n                specBasedTestPackage: this.state.specBasedTestPackage,\r\n                saveContinueData: this.props.Login.saveContinueData,\r\n                selectedComponentWithFile: objcomponent\r\n            }\r\n\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1 = this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo = {};\r\n        let incslno = comp1.length - 1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            // const preList = comp1.splice(0, index);\r\n            // const afterList = comp1.splice(index, comp1.length);\r\n\r\n\r\n            // preList.map(x => {\r\n            //     Test[incslno] = Test && Test[x.slno]\r\n            //     x.slno = incslno;\r\n            //     incslno = incslno - 1;\r\n            //     return null;\r\n            // })\r\n\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n\r\n            //const Component1 = [...preList, ...afterList];\r\n\r\n            // Component1.map(x => {\r\n            //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            // })\r\n            //sortByField(subSampleDataGridList, 'desc', 'slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent && selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\",\r\n\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent, specBasedTestPackage) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            //Added by Dhanushya for jira ETICA-22\r\n            const orderTypeComp = this.props.Login.comboComponents.filter(item => item.name === \"manualordertype\");\r\n                //Added by sonia  on 1 August 2024 for Sub Sample Add\r\n                if (this.state.selectedRecord.hasOwnProperty(orderTypeComp.length >0 && orderTypeComp[0].label)) {\r\n                    Map[\"orderTypeCombCode\"] = this.state.selectedRecord[orderTypeComp[0].label].value;\r\n                }else{\r\n                    Map[\"orderTypeCombCode\"] =-1; \r\n                }\r\n\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                        || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        // ALPD-4914 Added codes for scheduler configuration screen\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if(this.props.Login.userInfo && this.props.Login.userInfo.nformcode === formCode.SCHEDULERCONFIGURATION){\r\n                if (operation === \"create\") {\r\n                    this.insertSchedulerConfig(true);\r\n                }\r\n                else if(operation===\"update\"){\r\n                    this.updateSchedulerConfig(true);\r\n\r\n                }\r\n            } else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        }\r\n        }\r\n        else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    onSaveClickImport = (saveType, formRef) => {\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let Map = {};\r\n            if (nneedsubsample === false || !this.state.specBasedComponent) {\r\n                Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n            }\r\n\r\n            Map[\"specBasedComponnet\"] = this.state.specBasedComponent\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            const fields = this.MandatoryCheck();\r\n\r\n            Map[\"MandatoryList\"] = fields.mandatoryFields\r\n            Map[\"exportFieldProperties\"] = fields.exportFieldProperties\r\n            //  Map[\"ExportList\"] = fields.exportFields\r\n\r\n            Map[\"exportFields\"] = [...fields.exportFields]\r\n\r\n            Map[\"comboComponent\"] = fields.comboComponent\r\n\r\n            Map[\"SampleFieldsString\"] = [...fields.exportFields];\r\n            //ALPD-3596 \r\n            Map[\"TestGroupTestCode\"] = this.state.selectedTestData && Object.keys(this.state.selectedTestData).length !== 0 ? this.state.selectedTestData.ntestgrouptestcode.map(value => value.item.ntestgrouptestcode).join(\",\") : \"\";\r\n            Map[\"importTest\"] = this.state.selectedRecord && this.state.selectedRecord.importTest;\r\n\r\n\r\n            if (nneedsubsample) {\r\n\r\n\r\n                const subSample = this.MandatoryCheckSubSample()\r\n\r\n\r\n                Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent]\r\n\r\n\r\n                Map[\"MandatoryList\"] = [...fields.mandatoryFields, ...subSample.mandatoryFields]\r\n\r\n                Map[\"SubSampleFields\"] = subSample.subSampleFields\r\n\r\n                Map[\"exportFields\"] = [...fields.exportFields, ...subSample.exportFields]\r\n                Map[\"exportFieldProperties\"] = [...fields.exportFieldProperties, ...subSample.exportFieldProperties]\r\n\r\n                //  Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\r\n\r\n            }\r\n            // Map[\"SampleFields\"] = this.SampleFields();\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n            Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n            Map[\"nflag\"] = 2;\r\n            Map[\"url\"] = this.props.Login.settings[24];\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n            Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n\r\n            if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                    Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    Map[\"sDob\"]= convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\r\n\r\n                }\r\n                if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                    Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n                }\r\n                Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                let orderType = {\r\n                    \"Order Type\": {\r\n                        \"pkey\": \"nordertypecode\",\r\n                        \"label\": \"NA\",\r\n                        \"value\": -1,\r\n                        \"source\": \"ordertype\",\r\n                        \"nordertypecode\": -1,\r\n                        \"nquerybuildertablecode\": 246\r\n                    }\r\n                };\r\n                if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                    //external order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"External\",\r\n                            \"value\": 2,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 2,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n\r\n                }\r\n                else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                    //manual order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"Manual\",\r\n                            \"value\": 1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n                }\r\n\r\n                Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n            }\r\n            Map[\"skipmethodvalidity\"] = false;\r\n                        if(this.state.importSampleRawData===0) {\r\n                        const formData = new FormData();\r\n                        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                        formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0])\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n                        const inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.props.postParamList,\r\n                            action: \"preregister\",\r\n                            formData: formData,\r\n                            isFileupload\r\n                        }\r\n                        this.props.insertRegSample(inputParam, this.props.Login.masterData)\r\n\r\n                    }\r\n                    else{      \r\n                        const uploadedData = new FormData();\r\n                        uploadedData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                        uploadedData.append(\"uploadedFile\", this.state.selectedRecord['sfilename'][0]);\r\n                        uploadedData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        uploadedData.append(\"ndesigntemplatemappingcode\",this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode);\r\n                        const parameters = {\r\n                            inputData: Map,\r\n                            postParamList: this.props.postParamList,\r\n                            action: \"preregister\",\r\n                            formData:uploadedData,\r\n                            isFileupload           \r\n                        }\r\n                        this.props.uploadSamplesData(parameters, this.props.Login.masterData); \r\n                        this.setState({importSampleRawData:0});\r\n                      }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n        let isFileupload = false;\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            //ntype:2,\r\n            ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            // checkBoxOperation: 3,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        //inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        let tempData = {}\r\n        const formData = new FormData();\r\n        this.props.Login.withoutCombocomponent.map(item => {\r\n            if (item.inputtype === \"files\") {\r\n                if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\r\n                    this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                        const fileName = create_UUID();\r\n                        const splittedFileName = item1.name.split('.');\r\n                        const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n\r\n                        tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                        tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                        tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                        tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                        tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                        formData.append(\"uploadedFile\" + index, item1);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\r\n                        formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        inputData['isFileupload'] = true;\r\n                        inputData[\"registration\"]['jsondata'] = {\r\n                            ...inputData[\"registration\"]['jsondata'],\r\n                            ...tempData\r\n                        };\r\n                        inputData[\"registration\"]['jsonuidata'] = {\r\n                            ...inputData[\"registration\"]['jsonuidata'],\r\n                            ...tempData\r\n                        };\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\r\n                        isFileupload = true;\r\n                    }\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            isFileupload, formData: formData\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    updateSchedulerConfig(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n        let isFileupload = false;\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus==0 ? this.props.Login.masterData.FilterStatus.map(item =>item.ntransactionstatus).join(\",\") :this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nflag: 2,\r\n            //ntype:2,\r\n            ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\r\n            nschedulersamplecode: String(this.state.selectedRecord.nschedulersamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nregsubtypeversioncode: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue &&this.props.Login.masterData.RealRegSubTypeValue.nregsubtypeversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            checkBoxOperation: checkBoxOperation.SINGLESELECT,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            nsampleschedulerconfigtypecode:this.props.Login.masterData.SchedulerConfigTypeValue&&this.props.Login.masterData.SchedulerConfigTypeValue.nsampleschedulerconfigtypecode\r\n\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getSchedulerConfig(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"schedulerconfiguration\"] = param.sampleRegistration\r\n        inputData[\"schedulerconfiguration\"][\"jsonuidata\"][\"nschedulersamplecode\"] = String(this.state.selectedRecord.nschedulersamplecode)\r\n        inputData[\"schedulerconfiguration\"][\"nschedulersamplecode\"] = String(this.state.selectedRecord.nschedulersamplecode)\r\n        inputData[\"schedulerconfiguration\"][\"nschedulecode\"] =this.state.selectedRecord['SchedulerMaster'] && this.state.selectedRecord['SchedulerMaster'].value ||-1;\r\n\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        let tempData = {}\r\n        const formData = new FormData();\r\n        this.props.Login.withoutCombocomponent.map(item => {\r\n            if (item.inputtype === \"files\") {\r\n                if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\r\n                    this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                        const fileName = create_UUID();\r\n                        const splittedFileName = item1.name.split('.');\r\n                        const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n\r\n                        tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                        tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                        tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                        tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                        tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                        formData.append(\"uploadedFile\" + index, item1);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\r\n                        formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        inputData['isFileupload'] = true;\r\n                        inputData[\"registration\"]['jsondata'] = {\r\n                            ...inputData[\"registration\"]['jsondata'],\r\n                            ...tempData\r\n                        };\r\n                        inputData[\"registration\"]['jsonuidata'] = {\r\n                            ...inputData[\"registration\"]['jsonuidata'],\r\n                            ...tempData\r\n                        };\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\r\n                        isFileupload = true;\r\n                    }\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SchedulerConfig\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSchedulerConfig',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n           // testCommentDataState: this.state.testCommentDataState,\r\n            isFileupload, formData: formData\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateSchedulerConfig(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    insertMultipleRegistration(saveType) {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                // Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                        Map[\"sDob\"]= convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\r\n\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                }\r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                let dateList = []\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === 'date') {\r\n                        //dateList.push(item.label)\r\n                    }\r\n                })\r\n                if (saveType === '1') {\r\n                    this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\r\n                        isFileupload = true\r\n                        Map[\"isFile\"] = true;\r\n                        formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false))\r\n                        formData.append(\"readFile\", item);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                    })\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                } else {\r\n                    isFileupload = true\r\n                    Map[\"isFile\"] = false;\r\n                    Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                    formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                }\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nportalrequired\"]=this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                //  Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n                Map[\"nneedmyjob\"] = this.props.Login.masterData.RealRegSubTypeValue&&this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob ? this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob : false;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode;\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\r\n                Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                        Map[\"sDob\"]= convertDateTimetoString(new Date(this.state.selectedRecord[dateComp[0].label]), this.props.Login.userInfo);\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                    Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label\r\n                    Map[\"extrenalOrderTypeCode\"] = Map[\"Registration\"]['jsonuidata'].nexternalordertypecode;\r\n                    Map[\"RegistrationSample\"].map((x, i) => {\r\n                        Map[\"RegistrationSample\"][i]['jsondata'] = { ...x['jsondata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                        Map[\"RegistrationSample\"][i]['jsonuidata'] = { ...x['jsonuidata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                    })\r\n                }\r\n                \r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    // ALPD-4914 Added insertSchedulerConfig method for scheduler configuration screen\r\n    insertSchedulerConfig() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"SchedulerConfigSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"SchedulerConfigSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nportalrequired\"]=this.props.Login.masterData.RealSampleTypeValue.nportalrequired;\r\n                Map[\"nschedulerconfigtypecode\"] = this.props.Login.masterData.RealSchedulerConfigTypeValue.nschedulerconfigtypecode;\r\n                Map[\"nfilterstatus\"]= this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus==0 ? this.props.Login.masterData.FilterStatus.map(item =>item.ntransactionstatus).join(\",\") :this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"nsampleschedulerconfigtypecode\"]= this.props.Login.masterData.SchedulerConfigTypeValue&&this.props.Login.masterData.SchedulerConfigTypeValue.nsampleschedulerconfigtypecode;\r\n\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nregsubtypeversioncode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypeversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                //  Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n                Map[\"nneedmyjob\"] = this.props.Login.masterData.RealRegSubTypeValue&&this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob ? this.props.Login.masterData.RealRegSubTypeValue.nneedmyjob : false;\r\n                const param = getSchedulerConfig(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"SchedulerConfig\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                Map[\"ncontrolcode\"] = this.props.Login.ncontrolcode;\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\r\n                Map[\"loadAdhocTest\"] = this.props.Login.loadAdhocTest == true ? true : false;\r\n\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"SchedulerConfig\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"SchedulerConfig\"]['jsondata'] = {\r\n                            ...Map[\"SchedulerConfig\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"SchedulerConfig\"]['jsondata'] = {\r\n                            ...Map[\"SchedulerConfig\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                    Map[\"orderTypelabel\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].label\r\n                    Map[\"extrenalOrderTypeCode\"] = Map[\"SchedulerConfig\"]['jsonuidata'].nexternalordertypecode;\r\n                    Map[\"SchedulerConfigSample\"].map((x, i) => {\r\n                        Map[\"SchedulerConfigSample\"][i]['jsondata'] = { ...x['jsondata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                        Map[\"SchedulerConfigSample\"][i]['jsonuidata'] = { ...x['jsonuidata'], nordertypecode: Map[\"orderTypeValue\"], sordertypename: Map[\"orderTypelabel\"], externalorderid: this.state.selectedRecord['Order'] && this.state.selectedRecord['Order'].label }\r\n                    })\r\n                }\r\n                \r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"SchedulerConfig\"]['jsondata'] = {\r\n                                ...Map[\"SchedulerConfig\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"SchedulerConfig\"]['jsonuidata'] = {\r\n                                ...Map[\"SchedulerConfig\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"SchedulerConfigSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"SchedulerConfigSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"SchedulerConfigSample\"][index].uniquefilename);\r\n                            delete (Map[\"SchedulerConfigSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"create\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertSchedulerConfig(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOADD\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    handleExportClick = () => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            const exportFiled = [];\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) ?\r\n                                    exportFiled.push(component) : \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            const subSampleLayout = this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (this.state.specBasedComponent) {\r\n                exportFiled.push({ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n            }\r\n            const mandatoryCheck = []\r\n\r\n            if (subSampleLayout !== undefined) {\r\n                subSampleLayout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    else if (componentrow.mandatory) {\r\n                                        mandatoryCheck.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) ?\r\n                                    exportFiled.push(component) : component.mandatory ? mandatoryCheck.push(component) : \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            if (exportFiled.length > 0) {\r\n                if (this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true) {\r\n                    if (mandatoryCheck.length === 0) {\r\n                        this.setState({ exportFiled, export: true });\r\n                    } else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\" }))\r\n                    }\r\n                } else {\r\n                    this.setState({ exportFiled, export: true });\r\n                }\r\n\r\n\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_EXPORTFIELDSNOTAVAILABLE\" }))\r\n            }\r\n\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\"\r\n                        onClick={this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView :\r\n                            this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter :\r\n                                this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ?\r\n                                    this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                                        this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                            this.props.Login.loadImportFileData ? this.closeImportFileData :\r\n                                                this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData :\r\n                                                    this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.Login.operation === \"create\" && (!this.props.Login.addMaster &&\r\n                        !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                        !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                        !this.props.Login.loadImportFileData && !this.props.Login.loadEsign\r\n                        && !this.props.Login.loadSpec\r\n                        && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE) ?\r\n                        <>\r\n\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                onClick={() => this.handleExportClick()}\r\n                                hidden={this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1}\r\n                            >\r\n                                <FontAwesomeIcon icon={faFileExport} /> { }\r\n                                <FormattedMessage id={\"IDS_EXPORTTEMPLATE\"} defaultMessage={buttonLabel} />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                hidden={this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1}\r\n                                onClick={(event) => this.AddImportFile(this.state.selectedRecord,event)}>\r\n                                <FontAwesomeIcon icon={faFileImport} /> { }\r\n                                <FormattedMessage id={\"IDS_IMPORTTEMPLATE\"} defaultMessage={\"IDS_IMPORTTEMPLATE\"} />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                hidden={this.props.userRoleControlRights.indexOf(this.props.uploadsampledata) === -1}\r\n                                onClick={(event) => this.AddImportFile(this.state.selectedRecord,event)}>\r\n                                <FontAwesomeIcon icon={faUpload} /> { }\r\n                                <FormattedMessage id={\"IDS_UPLOAD_DATA\"} defaultMessage={\"IDS_UPLOAD_DATA\"} />\r\n                            </Button>\r\n                        </>\r\n                        : \"\"}\r\n\r\n                    {this.props.Login.loadEsign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? -\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter || ((!this.props.Login.addMaster &&\r\n                                                !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                                                !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                                                !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec)\r\n                                                && this.props.Login.importData) ? \"\" :\r\n                                                <>\r\n\r\n\r\n                                                    <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                        <FontAwesomeIcon icon={faSave} /> { }\r\n                                                        <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                    </Button>\r\n                                                </>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && (this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false)) ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body className='popup-fixed-center-headed-full-width'>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n\r\n                                    {this.props.Login.patientRegistration ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <PatientMaster Login={this.props.Login} />\r\n                                            </Col>\r\n                                        </Row> : this.props.Login.isDynamicViewSlideOut ?\r\n                                            <ExternalOrderSlideout\r\n                                                dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                                dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                                dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                            />\r\n\r\n                                            : this.props.Login.loadCustomSearchFilter ?\r\n                                                this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                                    <KendoDatatoolFilter\r\n                                                        filter={this.props.Login.kendoFilter}\r\n                                                        handleFilterChange={this.handleFilterChange}\r\n                                                        filterData={this.props.Login.lstPatient || []}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        fields={this.props.Login.fields || []}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                    /> : <FilterQueryBuilder\r\n                                                        fields={this.props.Login.fields || {}}\r\n                                                        onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                        tree={this.props.Login.awesomeTree}\r\n                                                        config={this.props.Login.awesomeConfig}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        filterData={this.props.Login.lstPatient}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        handleExecuteClick={this.handleExecuteClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                    /> :\r\n                                                this.props.Login.loadSpec ?\r\n                                                    <AddSpecification\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        handleTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.ActiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                    />\r\n                                                    : this.props.Login.loadTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.props.Login.selectedTestData}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            selectPackage={this.state.selectPackage}\r\n                                                            selectSection={this.state.selectSection}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            onTestSectionChange={this.onTestSectionChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                            TestSection={this.props.Login.TestSection || []}\r\n\r\n                                                        /> : this.props.Login.loadComponent ?\r\n                                                            <AddComponentPopUp\r\n                                                                ref={this.myScrollRef}\r\n                                                                selectComponent={this.state.selectComponent || {}}\r\n                                                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                                formatMessage={this.props.intl.formatMessage}\r\n                                                                handleDateChange={this.handleDateChangeComp}\r\n                                                                Component={this.props.Login.lstComponent || []}\r\n                                                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                // onComboChange={this.onComponentComboChange}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                onComponentChange={this.onComponentChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                                CurrentTime={this.props.Login.CurrentTime}\r\n                                                            /> : this.props.Login.addMaster ?\r\n                                                                <AddMasterRecords\r\n                                                                    selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                                    fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                                    extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                                    // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                                    selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                                    onInputOnChange={this.onInputOnChangeMaster}\r\n                                                                    onComboChange={this.onComboChangeMaster}\r\n                                                                    handleDateChange={this.handleDateChangeMaster}\r\n                                                                    dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                                    onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                                    masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                                    mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                                    masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                                    onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                                    handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                                    onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                                    onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                                    onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    Login={this.props.Login}\r\n                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                    userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                    masterIndex={this.props.Login.masterIndex}\r\n                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                    editMasterRecord={this.editMasterRecord}\r\n\r\n                                                                />\r\n                                                                : this.props.Login.loadSubSample ?\r\n                                                                    <AddSubSample\r\n                                                                        Component={this.props.Login.lstComponent || []}\r\n                                                                        selectComponent={this.state.selectComponent}\r\n                                                                        selectedRecord={this.state.selectedRecord}\r\n                                                                        onComponentChange={this.onComponentChange}\r\n                                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        genericLabel={this.props.Login.genericLabel}\r\n                                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                                        TestChange={this.TestChange}\r\n                                                                        selectedTestData={this.state.selectedTestData}\r\n                                                                        selectPackage={this.state.selectPackage}\r\n                                                                        selectSection={this.state.selectSection}\r\n                                                                        selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                                        TestSection={this.props.Login.TestSection || []}\r\n                                                                        childoperation={this.props.Login.childoperation}\r\n                                                                        specBasedComponent={this.state.specBasedComponent}\r\n                                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                                        onTestSectionChange={this.onTestSectionChange}\r\n                                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                                        addMasterRecord={this.addMasterRecord}\r\n                                                                        editMasterRecord={this.editMasterRecord}\r\n                                                                        onDropFile={this.onDropFileSubSample}\r\n                                                                        deleteAttachment={this.deleteAttachmentSubSample}\r\n\r\n                                                                    />\r\n                                                                    : this.props.Login.loadEsign ?\r\n\r\n                                                                        <Esign\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                                                        />\r\n                                                                        : this.props.Login.loadImportFileData ?\r\n                                                                            <AddImportFileData\r\n                                                                                //ALPD-3596                                                                  \r\n                                                                                TestCombined={this.state.TestCombinedForImport || []}\r\n                                                                                TestChange={this.TestChange}\r\n                                                                                selectedTestData={this.state.selectedTestData}\r\n                                                                                specBasedComponent={this.state.specBasedComponent}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                                onDropFile={this.onDropFile}\r\n                                                                                deleteAttachment={this.deleteAttachment}\r\n                                                                                onInputOnChange={this.onInputOnChange}\r\n\r\n                                                                            />\r\n                                                                            : this.props.Login.loadImportSampleCountData ?\r\n                                                                                <AddImportSampleCountData\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                />\r\n                                                                                : <RegisterSlideOut\r\n                                                                                    //addPatient={this.addPatient}\r\n                                                                                    onSchedulerComboChange={this.onSchedulerComboChange}\r\n                                                                                    siteList={this.props.siteList || []}\r\n                                                                                    nsampleschedulerconfigtypecode={this.props.nsampleschedulerconfigtypecode}\r\n                                                                                    nschedulerconfigtypecode={this.props.nschedulerconfigtypecode}\r\n\r\n                                                                                    schedulerList={this.props.schedulerList || []}\r\n                                                                                    scheduleMasterDetails={this.props.scheduleMasterDetails || []}\r\n                                                                                   \r\n\r\n                                                                                    editfield={this.sampleeditable &&\r\n                                                                                        this.sampleeditable['sampleeditable']}\r\n                                                                                    ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                                        this.props.Login.masterData.selectedSample.length > 0\r\n                                                                                        && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                                    loadPreregister={this.props.Login.loadPreregister}\r\n                                                                                    selectedSpec={this.state.selectedSpec}\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    selectedComponent={this.props.Login.selectedComponent}\r\n                                                                                    subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                                    SelectedTest={this.props.Login.SelectedTest}\r\n                                                                                    selectedTestData={this.state.selectedTestData}\r\n                                                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                                    userRoleControlRights1={this.props.Login.userRoleControlRights}\r\n                                                                                    templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                                        this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                                        this.props.Login.masterData.schedulerTemplate ?\r\n                                                                                            this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                                    handleChange={this.props.handleChange}\r\n                                                                                    handleDateChange={this.handleDateChange}\r\n                                                                                    onInputOnChange={this.onInputOnChange}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                    onNumericBlur={this.onNumericBlur}\r\n                                                                                    comboData={this.props.Login.comboData}\r\n                                                                                    onComboChange={this.onComboChange}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                                                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                                    AddSpec={this.AddSpec}\r\n                                                                                    addTest={this.addTestslide}\r\n                                                                                    handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                                    nneedsubsample={this.props.Login.masterData\r\n                                                                                        && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                                    specBasedComponent={this.state.specBasedComponent}\r\n                                                                                    AddComponent={this.AddComponent}\r\n                                                                                    deleteComponent={this.deleteComponent}\r\n                                                                                    deleteTest={this.deleteTest}\r\n                                                                                    editComponent={this.editComponent}\r\n                                                                                    componentColumnList={this.componentColumnList}\r\n                                                                                    Component={this.props.Login.Component}\r\n                                                                                    TestChange={this.TestChange}\r\n                                                                                    testDataState={this.state.testDataState}\r\n                                                                                    subSampleDataState={this.state.subSampleDataState}\r\n                                                                                    testDataStateChange={this.testDataStateChange}\r\n                                                                                    subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                                    addsubSample={this.addsubSample}\r\n                                                                                    editSubSample={this.editSubSample}\r\n                                                                                    subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                                    selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                                    operation={this.props.Login.operation}\r\n                                                                                    specBasedTestPackage={this.state.specBasedTestPackage}\r\n                                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                                    editMasterRecord={this.editMasterRecord}\r\n                                                                                    onClickView={this.onClickView}\r\n                                                                                    comboComponents={this.props.Login.comboComponents}\r\n                                                                                    sampleType={{\r\n                                                                                        \"label\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\r\n                                                                                        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                                                                                        \"item\": this.props.Login.masterData.RealSampleTypeValue,\r\n                                                                                    }}\r\n                                                                                    onDropFile={this.onDropFile}\r\n                                                                                    deleteAttachment={this.deleteAttachment}\r\n                                                                                    AddImportFile={this.AddImportFile}\r\n                                                                                    AddSampleCount={this.AddSampleCount}\r\n                                                                                    importData={this.props.Login.importData}\r\n                                                                                    ntestgroupspecrequired={this.props.Login.masterData\r\n                                                                                        && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                        this.props.Login.masterData.RealRegSubTypeValue.ntestgroupspecrequired : false} //ALPD-4834, Vishakh, Added ntestgroupspecrequired key to send value to RegisterSlideOut component\r\n                                                                                />\r\n                                    }\r\n                                </Form>\r\n                                {this.state.export ?\r\n                                    <LocalizationProvider>\r\n                                        <ExcelExport\r\n                                            data={[]}\r\n                                            collapsible={true}\r\n                                            fileName={(this.props.Login.screenName && this.props.Login.screenName) + \"_\" + this.state.selectedSpec.nallottedspeccode.label}\r\n                                            ref={(exporter) => {\r\n                                                this._excelExportHeader = exporter;\r\n                                            }}>\r\n                                            {[...this.state.exportFiled].map((item, index) =>\r\n                                                <ExcelExportColumn\r\n                                                    field={item.label} title={(item.idsField ? this.props.intl.formatMessage({ id: item.displayname }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? item.dateonly ? '(yyyy-mm-dd)' : item.timeonly ? '(HH:mm:ss)' : '(yyyy-mm-dd  HH:mm:ss)' : \"\")} width={200} />\r\n                                            )\r\n\r\n                                            }\r\n                                        </ExcelExport>\r\n                                    </LocalizationProvider > : \"\"}\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ?\r\n                        event.target.value : selectedMaster[masterIndex][event.target.name];\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        let isEmailCheck = true;\r\n        let isFileupload = false;\r\n        const formData = new FormData();\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ?\r\n                    this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            isFileupload = true;\r\n            inputData[\"isFileupload\"] = false;\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                    selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                        selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify({ ...inputData })));\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 43) {\r\n            //added by vignesh for ALPD-3010\r\n            this.state.selectedRecord = { ...this.state.selectedRecord, \"spatientid\": this.state.selectedMaster[masterIndex][\"spatientid\"] };\r\n            inputData[\"noneedfilter\"] = 2; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    else if (item.controlType === \"selectbox\") {\r\n                        fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        fieldName = item.tableDataField;\r\n                    }\r\n                    inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    }\r\n                    return inputData[methodUrl];\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n\r\n                        if (fieldName === 'ssubmittername') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                ssubmitterfirstname: this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\r\n                                ssubmitterlastname: this.state.selectedMaster[masterIndex][fieldName].item.slastname,\r\n                                ssubmitteremail: this.state.selectedMaster[masterIndex][fieldName].item.semail,\r\n                                sshortname: this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\r\n                                ssubmittercode: this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\r\n                                ssubmitterid: this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\r\n                                stelephone: this.state.selectedMaster[masterIndex][fieldName].item.stelephone,\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutionsitename') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutionsitename: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename,\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutionname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutionname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\r\n                                sinstitutioncode: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode,\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (fieldName === 'sinstitutioncatname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutioncatname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname,\r\n\r\n                            }\r\n                        }\r\n\r\n                        if (fieldName === 'sdistrictname') {\r\n                            inputData[methodUrl]['jsondata'] =\r\n                            {\r\n                                ...inputData[methodUrl]['jsondata'],\r\n                                sinstitutiondistrictname: this.state.selectedMaster[masterIndex][fieldName].label,\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n            inputData[methodUrl][\"nproductcode\"] = -1;\r\n            //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\r\n            //inputData[methodUrl][\"sexternalorderid\"] = 1;\r\n            inputData[methodUrl][\"nordertypecode\"] = 1;\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n        const inputParam = {\r\n            withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent\r\n                : this.props.Login.withoutCombocomponent,\r\n            comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents\r\n                : this.props.Login.comboComponents,\r\n            selectedRecord: this.props.Login.loadSubSample ?\r\n                this.state.selectComponent\r\n                : this.state.selectedRecord,\r\n            selectedRecordName: this.props.Login.loadSubSample ?\r\n                'selectComponent'\r\n                : 'selectedRecord',\r\n            loadSubSample: this.props.Login.loadSubSample,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.loadSubSample ?\r\n                this.props.Login.SubSamplecomboData : this.props.Login.comboData,\r\n            comboName: this.props.Login.loadSubSample ?\r\n                'SubSamplecomboData' : 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex],\r\n            saveType, formRef,\r\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\r\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation,\r\n            formData: formData,\r\n            isFileupload\r\n\r\n        }\r\n        if (isEmailCheck) {\r\n            this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + this.props.intl.formatMessage({ id: \"IDS_\" + selectedControl.label.toUpperCase() }));\r\n        }\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterOperation,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                masterOperation,\r\n                selectedMaster,\r\n\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, control, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext, event.target.defaultValue)\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectComponent, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachmentSubSample = (event, file, fieldName) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file)\r\n\r\n        this.setState({\r\n            selectComponent, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, callService,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster,\r\n    insertMultipleRegistration, insertRegSample, testSectionTest,insertSchedulerConfig,updateSchedulerConfig,getSchedulerMasteDetails,uploadSamplesData\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}