{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { numericGrade } from '../pages/ResultEntryBySample/ResultEntryValidation';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, compareArrays, CF_encryptionData } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: inputData.nflag || 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey,\n      //nneedsubsample: inputData.masterData.nneedsubsample,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.nneedtemplatebasedflow,\n      nworlistcode: inputData.nworlistcode,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        // if (response.data.DynamicGetSamples) {\n        //     sortData(response.data.DynamicGetSamples, \"\", \"\");\n        // }\n        // if (response.data.DynamicGetTests) {\n        //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n        // }\n        sortData(response.data); // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\n        // responseData = sortData(responseData)\n\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample;\n        RESelectedSubSample = inputData.masterData.realRegSubTypeValue.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample\n        }; // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        //     inputData.searchSampleRef.current.value = \"\";\n        //     masterData['searchedSample'] = undefined\n        // }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n\n        subSampleSkip = 0; // bool = true\n        // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        }; // }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let RegistrationComment = []; // let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          let npreregno;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n            npreregno = masterData.RESelectedSample[0].npreregno;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \" sampleChangeDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              dbData = response.data.RegistrationComment || [];\n              list = [...inputData.masterData.RegistrationComment, ...dbData];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          //getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleCommentsDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          let list = [];\n\n          if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                RESelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n            }\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleChangeDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment,\n          RegistrationComment // RegistrationSampleAttachment\n\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            subSampleSkip: undefined,\n            subSampleTake: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      //let isGrandChildGetRequired = false;\n\n      let oldSelectedSubSample = inputData.masterData.RESelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSample = inputData.RESelectedSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\n        let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE;\n\n        if (inputData.masterData.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let masterData = { ...inputData.masterData,\n          RESelectedSample,\n          RESelectedSubSample,\n          RESelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          ntransactionsamplecode,\n          RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey,\n          masterData\n        };\n\n        if (RESelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]\n          };\n          dispatch(getTestChildTabREDetail(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"RE_TEST\"]\n          };\n          dispatch(getTestREDetail(inputData, true));\n        }\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          // RESelectedSample: inputData.RESelectedSample,\n          // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\n          RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  RESelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RE_TEST\"];\n                subsamplecheck = false;\n                dispatch(getTestREDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              RESelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode; // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\n        } //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSample: inputData.RESelectedSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample,\n      nworlistcode: inputData.nworlistcode,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    const subSample = inputData.nneedsubsample; // dispatch(initRequest(true));\n    // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData).then(response => {\n        // let responseData = {\n        //     ...response.data,\n        //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n        //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n        //     // RESelectedTest: inputData.masterData.RESelectedTest\n        // }\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n        // if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subSampleSkip) {\n\n        subSampleSkip = 0; // bool = true\n        // }\n        // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        }; // }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n            // case \"IDS_SAMPLECOMMENTS\":\n            //         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\n            //         activeName = \"RegistrationComment\"\n            //         dataStateName = \"sampleChangeDataState\"\n            //         break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            RESelectedTest: [testList[0]],\n            RE_TEST: testList // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n            // case \"IDS_TESTCOMMENTS\":\n            //     dbData = response.data.RegistrationTestComment || []\n            //     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n            //     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n            //     break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            ...skipInfo,\n            subSampleSkip: undefined,\n            subSampleTake: undefined\n          }\n        });\n      }).catch(error => {\n        console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      // let isGrandChildGetRequired = false;\n      // if (TestSelected.length > 0) {\n      //     isGrandChildGetRequired = true;\n      // } else {\n      //     isGrandChildGetRequired = false;\n      // }\n\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSubSample = inputData.RESelectedSubSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : []; // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\n\n        inputData = { ...inputData,\n          childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n          ntransactiontestcode,\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabREDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSubSample: inputData.RESelectedSubSample\n        };\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        } // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //     ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSubSample: inputData.RESelectedSubSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getSampleChildTabREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let url = \"\";\n\n    switch (inputData.activeSampleKey) {\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLECOMMENTS\":\n        url = \"comments/getSampleComment\";\n        break;\n\n      default:\n        url = \"attachment/getSampleAttachment\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(url, inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSample: inputData.RESelectedSample\n          },\n          loading: false,\n          showFilter: false,\n          activeSampleKey: inputData.activeSampleKey,\n          screenName: inputData.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        activeName = \"ResultUsedInstrument\";\n        dataStateName = \"instrumentDataState\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        activeName = \"ResultUsedMaterial\";\n        dataStateName = \"materialDataState\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        activeName = \"ResultUsedTasks\";\n        dataStateName = \"taskDataState\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"documentDataState\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        activeName = \"ResultChangeHistory\";\n        dataStateName = \"resultChangeDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n          RESelectedTest: inputData.RESelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RESelectedTest: inputData.RESelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestKey,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        RESelectedTest: inputData.RESelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData[dataStateName] && inputData[dataStateName].skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function getRERegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            defaultSampleType: inputData.defaultSampleType,\n            ...response.data,\n            realDesignTemplateMapping: inputData.realDesignTemplateMapping,\n            realApproveConfigVersion: inputData.realApproveConfigVersion,\n            realApprovalConfigVersionList: inputData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realFilterStatusList: inputData.realFilterStatusList,\n            realRegistrationSubTypeList: inputData.realRegistrationSubTypeList,\n            realRegistrationTypeList: inputData.realRegistrationTypeList,\n            realTestvaluesList: inputData.realTestvaluesList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRERegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\n            defaultRegistrationType: inputData.defaultRegistrationType,\n            realDesignTemplateMapping: inputData.realDesignTemplateMapping,\n            realApproveConfigVersion: inputData.realApproveConfigVersion,\n            realApprovalConfigVersionList: inputData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realFilterStatusList: inputData.realFilterStatusList,\n            realRegistrationSubTypeList: inputData.realRegistrationSubTypeList,\n            realRegistrationTypeList: inputData.realRegistrationTypeList,\n            realTestvaluesList: inputData.realTestvaluesList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREApprovalConfigVersion(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData).then(response => {\n      let nneedsubsample = inputData.defaultRegistrationSubType && inputData.defaultRegistrationSubType.nneedsubsample;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            nneedsubsample,\n            ...response.data,\n            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\n            // fromDate: inputData.fromdate,\n            //  toDate: inputData.todate\n            realDesignTemplateMapping: inputData.realDesignTemplateMapping,\n            realApproveConfigVersion: inputData.realApproveConfigVersion,\n            realApprovalConfigVersionList: inputData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realFilterStatusList: inputData.realFilterStatusList,\n            realRegistrationTypeList: inputData.realRegistrationTypeList,\n            realTestvaluesList: inputData.realTestvaluesList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFilterStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultjobstatus: inputData.defaultjobstatus // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREJobStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getResultEntryDetails(inputParamData) {\n  let masterData = { ...inputParamData.masterData\n  };\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData,\n      nneedsubsample: //inputParamData.masterData.nneedsubsample\n      inputParamData.masterData.realRegSubTypeValue.nneedsubsample\n    }).then(response => {\n      //let masterData = { ...inputParamData.masterData }\n      if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\n        inputParamData.refs.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\n        inputParamData.refs.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\n        inputParamData.refs.searchTestRef.current.value = \"\"; // masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } //sortData(response.data)\n\n\n      sortData(response.data, 'ascending', 'ntransactionresultcode');\n\n      if (response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\") {\n        toast.warning(intl.formatMessage({\n          id: \"IDS_USERNOTINRESULTENTRYFLOW\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            realFromDate: response.data[\"fromDate\"],\n            realToDate: response.data[\"toDate\"]\n          },\n          loading: false,\n          showTest: inputParamData.inputData.showTest,\n          showSample: inputParamData.inputData.showSample,\n          activeTestKey: inputParamData.inputData.activeTestKey,\n          skip: 0,\n          take: inputParamData.inputData.take,\n          testskip: 0,\n          testtake: inputParamData.inputData.testtake,\n          resultDataState: { ...inputParamData.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParamData.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParamData.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParamData.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParamData.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParamData.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParamData.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParamData.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response.status === 401) {\n        toast.warn(intl.formatMessage({\n          id: error.response.data.rtn\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData: { ...masterData,\n              ...error.response.data,\n              realFromDate: error.response.data[\"fromDate\"],\n              realToDate: error.response.data[\"toDate\"]\n            }\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let TestList = inputData.searchedTest ? [...inputData.searchedTest] : [...inputData.RE_TEST];\n    TestList = TestList.splice(testskip, testskip + testtake);\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\n\n    if (acceptTestList && acceptTestList.length > 0) {\n      if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\n        let inputParamData = {\n          ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData).then(response => {\n          let selectedResultGrade = [];\n          let paremterResultcode = [];\n          const parameterResults = response.data.ResultParameter;\n          let predefDefaultFlag = false;\n          parameterResults.map((param, index) => {\n            selectedResultGrade[index] = {\n              ngradecode: param.ngradecode\n            };\n            paremterResultcode[index] = param.ntransactionresultcode;\n            let jsondata = JSON.parse(param.jsondata['value']);\n\n            if (jsondata.hasOwnProperty('additionalInfo')) {\n              additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n            }\n\n            predefDefaultFlag = false;\n            response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n              // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n              //     if (!predefDefaultFlag) {\n              //         predefDefaultFlag = true;\n              //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n              //             undefined, undefined).get(\"OptionList\");\n              //     }\n              // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n              //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n              //         undefined, undefined).get(\"OptionList\");\n              //     if (response.data.ResultParameter[index].sresult === null) {\n              //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n              //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n              //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n              //         response.data.ResultParameter[index].editable = true;\n              //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n              //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n              //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n              //             &&predefinedvalue.spredefinedcomments;\n              //         }\n              //     }\n              // }\n              //  else {\n              if (!predefDefaultFlag) {\n                predefDefaultFlag = true;\n                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n              } //   }\n              //return null;\n\n            });\n            param['editable'] = false; //return null;\n            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n            // undefined, undefined).get(\"OptionList\");\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData,\n                //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n                ...response.data,\n                paremterResultcode //,\n                //selectedResultGrade ,\n\n              },\n              selectedRecord: {\n                additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n                selectedResultGrade: selectedResultGrade,\n                ResultParameter: response.data.ResultParameter\n              },\n              parameterResults: response.data.ResultParameter,\n              isParameterInitialRender: true,\n              loading: false,\n              screenName: \"IDS_RESULTENTRY\",\n              openModal: true,\n              operation: \"update\",\n              activeTestKey: \"IDS_RESULTS\",\n              ncontrolcode: ncontrolcode\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); //}\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTTESTTOENTERRESULT\"\n        }));\n      }\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTTESTTOENTERRESULT\"\n      }));\n    }\n  };\n}\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId, booleanFlag, param) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        basedrulesengine: param.basedrulesengine,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/completeTest\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let onlySampleService = false;\n        let responseData = sortData(response.data, 'ascending', 'ntransactionresultcode'); //response.data\n        //Added\n\n        if (inputData.masterData[\"searchedTest\"] && responseData[\"RE_TEST\"]) {\n          inputData.masterData[\"searchedTest\"] = getSameRecordFromTwoArrays(inputData.masterData[\"searchedTest\"], responseData[\"RE_TEST\"], \"ntransactiontestcode\");\n        }\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          //Added\n          if (inputData.masterData.realRegSubTypeValue.nneedsubsample //.nneedsubsample\n          ) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"RE_SAMPLE\"], responseData[\"RE_SAMPLE\"], \"npreregno\"); //inputData.masterData[\"RE_SAMPLE\"];\n          //Added\n\n          let selectedSampleArray = inputData.masterData[\"RESelectedSample\"];\n          let subSampleArray = RE_SUBSAMPLE.map(x => x.npreregno);\n          let selectPreregNOBefore = selectedSampleArray.map(x => x.npreregno);\n          selectedSampleArray = selectedSampleArray.filter(item => subSampleArray.includes(item.npreregno)).map(x => x.npreregno);\n          let unwantedPreregno = selectPreregNOBefore.filter(function (x) {\n            return !selectedSampleArray.some(function (y) {\n              return x === y;\n            });\n          });\n          RE_SAMPLE = RE_SAMPLE.filter(item => !unwantedPreregno.includes(item.npreregno)); //RE_SAMPLE= filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_SUBSAMPLE , \"npreregno\");\n        } else {\n          RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"RE_SAMPLE\"], responseData[\"RE_SAMPLE\"], \"npreregno\");\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(RE_SAMPLE, RE_TEST, \"npreregno\");\n        } //  const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        //Added\n\n\n        const RESelectedSample = RE_SUBSAMPLE.length > 0 ? inputData.masterData[\"RESelectedSample\"] : RE_SAMPLE;\n        let boolSelectedSubSample;\n        let searchedSubSample = undefined;\n        let RESelectedSubSample = [];\n        let backfrontTest = getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactiontestcode\");\n\n        if (inputData.masterData[\"searchedSubSample\"]) {\n          searchedSubSample = inputData.masterData[\"searchedSubSample\"];\n          boolSelectedSubSample = searchedSubSample.some(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n          let searchedSubSamplebefore = inputData.masterData[\"RESelectedSubSample\"].map(x => x.ntransactionsamplecode);\n          searchedSubSample = inputData.masterData[\"RESelectedSubSample\"].filter(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n          let searchedSubSampleaftere = searchedSubSample.map(x => x.ntransactionsamplecode);\n          let unwantedSamplecode = searchedSubSamplebefore.filter(function (x) {\n            return !searchedSubSampleaftere.some(function (y) {\n              return x === y;\n            });\n          });\n          inputData.masterData[\"searchedSubSample\"] = inputData.masterData[\"searchedSubSample\"].filter(item => !unwantedSamplecode.includes(item.ntransactionsamplecode));\n        } else {\n          boolSelectedSubSample = RE_SUBSAMPLE.some(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n        }\n\n        if (inputData.masterData[\"searchedSubSample\"] //&&inputData.masterData[\"searchedSubSample\"].length>0\n        ) {\n          RESelectedSubSample = boolSelectedSubSample ? inputData.masterData[\"RESelectedSubSample\"] : inputData.masterData[\"searchedSubSample\"][0] ? [inputData.masterData[\"searchedSubSample\"][0]] : [];\n        } else {\n          RESelectedSubSample = boolSelectedSubSample ? inputData.masterData[\"RESelectedSubSample\"] : RE_SUBSAMPLE;\n        } //  const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n\n\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"searchedSample\"], responseData[\"RE_SAMPLE\"], \"npreregno\");\n          searchedSample = filterRecordBasedOnTwoArrays(RE_SAMPLE //inputData.masterData[\"searchedSample\"]\n          , RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RESelectedTest: response.data.hasOwnProperty('RegistrationTestAlert') && Object.keys(response.data['RegistrationTestAlert']).length !== 0 || response.data.hasOwnProperty('NewTestGroupTestAlert') && Object.keys(response.data['NewTestGroupTestAlert']).length !== 0 ? inputData.masterData[\"RESelectedTest\"] : //RESelectedTest2\n          inputData.masterData[\"searchedTest\"] && inputData.masterData[\"searchedTest\"].length > 0 ? [inputData.masterData[\"searchedTest\"][0]] : responseData.RESelectedTest,\n          //  RE_TEST:compareArrays(responseData[\"RE_TEST\"],inputData.masterData[\"RE_TEST\"])?\n          //  inputData.masterData[\"RE_TEST\"]: responseData[\"RE_TEST\"]\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {}; // if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) { //ALPD-2230\n\n        if (masterData.RE_SUBSAMPLE && masterData.RE_SUBSAMPLE.length == 0 && masterData.RE_TEST && masterData.RE_TEST.length == 0) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        } // }\n\n\n        if (masterData.RE_SUBSAMPLE && masterData.RE_SUBSAMPLE.length <= inputParam.subSampleTake) {\n          skipInfo = { ...skipInfo,\n            subSampleSkip: 0,\n            subSampleTake: inputParam.subSampleTake\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = {\n          RegistrationTestAlert: response.data.hasOwnProperty('RegistrationTestAlert') //&&response.data.RegistrationTestAlert.length>0\n          ? response.data.RegistrationTestAlert : {},\n          NewTestGroupTestAlert: response.data.hasOwnProperty('NewTestGroupTestAlert') //&&response.data.NewTestGroupTestAlert.length>0\n          ? response.data.NewTestGroupTestAlert : {},\n          showAlertGrid: response.data.hasOwnProperty('RegistrationTestAlert') && Object.keys(response.data['RegistrationTestAlert']).length !== 0 || response.data.hasOwnProperty('NewTestGroupTestAlert') && Object.keys(response.data['NewTestGroupTestAlert']).length !== 0 //&&response.data.RegistrationTestAlert.length>0||\n          // response.data.hasOwnProperty('NewTestGroupTestAlert')&&response.data.NewTestGroupTestAlert.length>0\n          ? true : false,\n          showAlertForPredefined: false,\n          additionalInfoView: false,\n          ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample //&& RESelectedSample.length === 0 \n        && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RE_SAMPLE.length > 0) {\n          let inputParameter;\n\n          if (RESelectedSample.length === 0 || RE_SUBSAMPLE.length == 0) {\n            onlySampleService = true;\n            let paramList = inputParam.postParamList[0];\n            inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n              fetchUrl: paramList.fetchUrl,\n              [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n              ntype: 2,\n              nflag: 2\n            };\n            respObject = { ...respObject,\n              masterData: { ...masterData,\n                RESelectedSample: [RE_SAMPLE[0]]\n              }\n            };\n            dispatch(fetchSelectedData({ ...inputParameter,\n              checkBoxOperation: 3\n            }, respObject));\n          }\n\n          if (boolSelectedSubSample === false ? boolSelectedSubSample === false && onlySampleService === false && RESelectedSubSample.length !== 0 //&&!searchedSubSample\n          : RESelectedSubSample.length === 0 && RE_SUBSAMPLE.length > 0) {\n            let paramList = inputParam.postParamList[1];\n            inputParameter = { ...paramList.fecthInputObject,\n              fetchUrl: paramList.fetchUrl,\n              [paramList.primaryKeyField]: String(RE_SUBSAMPLE[0][paramList.primaryKeyField]),\n              ntype: 3,\n              nflag: 3\n            };\n            respObject = { ...respObject,\n              masterData: { ...masterData,\n                RESelectedSubSample: [RE_SUBSAMPLE[0]]\n              }\n            };\n            dispatch(fetchSelectedData({ ...inputParameter,\n              checkBoxOperation: 3\n            }, respObject));\n          } else {\n            respObject = { ...respObject,\n              masterData\n            };\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject,\n                loading: false\n              }\n            });\n          }\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\n        nneedsubsample: inputParam.inputData.subSampleNeeded\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/testInitiated\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let onlySampleService = false;\n        let childTabsKey = [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]; //let responseData = response.data \n\n        let responseData = sortData(response.data, 'ascending', 'ntransactionresultcode');\n        fillRecordBasedOnCheckBoxSelection(responseData, inputData.masterData, childTabsKey, 3, \"ntransactionsamplecode\", []);\n        responseData[\"RESelectedTest\"] = getSameRecordFromTwoArrays(responseData.RE_TEST, inputParam.RESelectedTest, \"ntransactiontestcode\");\n\n        if (inputData.masterData[\"searchedTest\"] && responseData[\"RE_TEST\"]) {\n          inputData.masterData[\"searchedTest\"] = getSameRecordFromTwoArrays(inputData.masterData[\"searchedTest\"], responseData[\"RE_TEST\"], \"ntransactiontestcode\");\n        }\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.realRegSubTypeValue.nneedsubsample) //.nneedsubsample)\n            {\n              //RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\n              RE_TEST = getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactiontestcode\");\n            } else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\"), \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          //    let selectedSampleArray= inputData.masterData[\"RESelectedSample\"]; \n          //    let selectPreregNOBefore=selectedSampleArray.map(x=>x.npreregno)\n          //    selectedSampleArray=selectedSampleArray.filter(objx=>RE_TEST.some(objy=>objx['npreregno']===objy['npreregno']))\n          //    let selectedTestPreregno=inputData.masterData[\"RESelectedTest\"].map(x=>x.npreregno);\n          //    let selectPreregNOafter=selectedSampleArray.map(x=>x.npreregno)\n          //    let unwantedPreregno= selectPreregNOBefore.filter(item => !selectPreregNOafter.includes(item))\n          //                         .filter(item => !selectPreregNOafter.includes(item)&& !selectedTestPreregno.includes(item));\n          //    RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"].filter(objx=>unwantedPreregno.every(npreregno=>npreregno!==objx['npreregno'])) \n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n          let selectedSampleArray = inputData.masterData[\"RESelectedSample\"];\n          let subSampleArray = RE_SUBSAMPLE.map(x => x.npreregno);\n          let selectPreregNOBefore = selectedSampleArray.map(x => x.npreregno);\n          selectedSampleArray = selectedSampleArray.filter(item => subSampleArray.includes(item.npreregno)).map(x => x.npreregno);\n          let unwantedPreregno = selectPreregNOBefore.filter(function (x) {\n            return !selectedSampleArray.some(function (y) {\n              return x === y;\n            });\n          });\n          RE_SAMPLE = RE_SAMPLE.filter(item => !unwantedPreregno.includes(item.npreregno)); //RE_SAMPLE= filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_SUBSAMPLE , \"npreregno\");\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = RE_SUBSAMPLE.length > 0 ? inputData.masterData[\"RESelectedSample\"] : [RE_SAMPLE[0]]; //const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        // let x=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\") \n        // let boolSelectedSubSample=x.some(objx=>RE_TEST.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode']))\n        // const RESelectedSubSample =boolSelectedSubSample? filterRecordBasedOnTwoArrays (inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\"):\n        // getSameRecordFromTwoArrays (inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n\n        let boolSelectedSubSample;\n        let searchedSubSample = undefined;\n        let RESelectedSubSample = [];\n        let backfrontTest = getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactiontestcode\");\n\n        if (inputData.masterData[\"searchedSubSample\"]) {\n          searchedSubSample = inputData.masterData[\"searchedSubSample\"];\n          boolSelectedSubSample = searchedSubSample.some(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n          let searchedSubSamplebefore = inputData.masterData[\"RESelectedSubSample\"].map(x => x.ntransactionsamplecode);\n          searchedSubSample = inputData.masterData[\"RESelectedSubSample\"].filter(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n          let searchedSubSampleaftere = searchedSubSample.map(x => x.ntransactionsamplecode);\n          let unwantedSamplecode = searchedSubSamplebefore.filter(function (x) {\n            return !searchedSubSampleaftere.some(function (y) {\n              return x === y;\n            });\n          });\n          inputData.masterData[\"searchedSubSample\"] = inputData.masterData[\"searchedSubSample\"].filter(item => !unwantedSamplecode.includes(item.ntransactionsamplecode));\n        } else {\n          boolSelectedSubSample = RE_SUBSAMPLE.some(objx => backfrontTest.some(objy => objx['ntransactionsamplecode'] === objy['ntransactionsamplecode']));\n        }\n\n        if (inputData.masterData[\"searchedSubSample\"] //&&inputData.masterData[\"searchedSubSample\"].length>0\n        ) {\n          RESelectedSubSample = boolSelectedSubSample ? inputData.masterData[\"RESelectedSubSample\"] : inputData.masterData[\"searchedSubSample\"][0] ? [inputData.masterData[\"searchedSubSample\"][0]] : [];\n        } else {\n          RESelectedSubSample = boolSelectedSubSample ? inputData.masterData[\"RESelectedSubSample\"] : [RE_SUBSAMPLE[0]];\n        } // let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        // let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\n        // RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\n\n\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { // ...inputData.masterData,\n          // //...responseData,\n          // //RE_SAMPLE,\n          // //RE_SUBSAMPLE,\n          // //RESelectedSubSample,\n          // searchedSample,\n          // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\n          // //RESelectedSample,\n          // //RESelectedTest: RESelectedTest2,\n          // //RE_TEST: responseData[\"RE_TEST\"]\n          ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: inputData.masterData[\"searchedTest\"] && inputData.masterData[\"searchedTest\"].length > 0 ? [inputData.masterData[\"searchedTest\"][0]] : responseData.RESelectedTest,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample // && RESelectedSample.length === 0 \n        && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RE_SAMPLE.length > 0) {\n          let inputParameter; // let paramList = inputParam.postParamList[0];\n          // let inputParameter = {\n          //     ...paramList.fecthInputObject.fecthInputObject,\n          //     fetchUrl: paramList.fetchUrl,\n          //     [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n          //     ntype: 2,\n          //     nflag: 2\n          // };\n          // respObject = {\n          //     ...respObject,\n          //     masterData: {\n          //         ...masterData,\n          //         RESelectedSample: [RE_SAMPLE[0]]\n          //     }\n          // }\n\n          if (RESelectedSample.length === 0 || RE_SUBSAMPLE.length == 0) {\n            onlySampleService = true;\n            let paramList = inputParam.postParamList[0];\n            inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n              fetchUrl: paramList.fetchUrl,\n              [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n              ntype: 2,\n              nflag: 2\n            };\n            respObject = { ...respObject,\n              masterData: { ...masterData,\n                RESelectedSample: [RE_SAMPLE[0]]\n              }\n            };\n            dispatch(fetchSelectedData({ ...inputParameter,\n              checkBoxOperation: 3\n            }, respObject));\n          }\n\n          if (boolSelectedSubSample === false ? boolSelectedSubSample === false && onlySampleService === false && RESelectedSubSample.length !== 0 //&&!searchedSubSample\n          : RESelectedSubSample.length === 0 && RE_SUBSAMPLE.length > 0) {\n            let paramList = inputParam.postParamList[1];\n            inputParameter = { ...paramList.fecthInputObject,\n              fetchUrl: paramList.fetchUrl,\n              [paramList.primaryKeyField]: String(RE_SUBSAMPLE[0][paramList.primaryKeyField]),\n              ntype: 3,\n              nflag: 3\n            };\n            respObject = { ...respObject,\n              masterData: { ...masterData,\n                RESelectedSubSample: [RE_SUBSAMPLE[0]]\n              }\n            };\n            dispatch(fetchSelectedData({ ...inputParameter,\n              checkBoxOperation: 3\n            }, respObject));\n          } // if(RESelectedTest.length === 0)\n          // {\n          //     let paramList = inputParam.postParamList[2];\n          //     inputParameter = {\n          //         ...paramList.fecthInputObject,\n          //         fetchUrl: paramList.fetchUrl,\n          //         [paramList.primaryKeyField]: String(RE_TEST[0][paramList.primaryKeyField]),\n          //         ntype: 3,\n          //         nflag: 3\n          //     };\n          //     respObject = {\n          //         ...respObject,\n          //         masterData: {\n          //             ...masterData,\n          //             RESelectedTest: [RE_TEST[0]]\n          //         }\n          //     }\n          //     dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\n          // }\n          else {\n            respObject = { ...respObject,\n              masterData\n            };\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject,\n                loading: false\n              }\n            });\n          }\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOINITIATE\"\n    }));\n  }\n} //Compare two array and return the first array which is available in second array\n\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\n  const filterArray = firstArray.filter(function (x) {\n    return secondArray.some(function (y) {\n      return x[PrimaryKey] === y[PrimaryKey];\n    });\n  });\n  return filterArray;\n}\n\nfunction fetchSelectedData(inputParam, respObject) {\n  return dispatch => {\n    rsapi.post(inputParam.fetchUrl, { ...inputParam\n    }).then(response => {\n      if (response.data.RE_SUBSAMPLE && response.data.RE_SUBSAMPLE.length > 0) {\n        sortData(response.data.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode');\n      }\n\n      sortData(response.data.RE_TEST, 'ascending', 'ntransactionresultcode');\n      const masterData = { ...respObject.masterData,\n        ...response.data,\n        RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function testMethodSourceEdit(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode,\n      ntestcode: inputData.test.ntestcode,\n      ncontrolcode: inputData.editSourceMethodId,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData).then(response => {\n      const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\", \"ssourcename\", undefined, undefined, undefined);\n      const TagListSource = TagSource.get(\"OptionList\");\n      const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\", \"smethodname\", undefined, undefined, undefined);\n      const TagListMethod = TagMethod.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            SourceData: TagListSource,\n            MethodData: TagListMethod,\n            RESelectedSubSample: inputData.masterData.RESelectedSubSample\n          },\n          selectedRecord: {\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            stestsynonym: inputData.test.jsondata.stestsynonym,\n            nsourcecode: response.data.SourceDataValue,\n            nmethodcode: response.data.MethodDataValue\n          },\n          loading: false,\n          screenName: \"IDS_TESTMETHODSOURCE\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.editSourceMethodId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateParameterComments(inputData, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      ntransactionresultcode: inputData.ntransactionresultcode,\n      sresultcomment: inputData.sresultcomment,\n      transactiontestcode: inputData.transactiontestcode,\n      userinfo: inputData.userinfo,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      ncontrolcode: inputData.ncontrolcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false,\n          loadEsign: false,\n          screenName: \"IDS_RESULT\",\n          openModal: false,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode //ncontrolcode:inputData.editSourceMethodId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREInstrument(inputData) {\n  return function (dispatch) {\n    let urlArray = [];\n    const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\n      userinfo: inputData.userInfo,\n      ntestgrouptestcode: inputData.masterData.RESelectedTest.ntestgrouptestcode\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputData.userInfo\n    });\n    urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory\n          },\n          selectedId: null,\n          // selectedRecord\n          selectedRecordInstrumentForm: {\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\n            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\n            npreregno: inputData.test.npreregno,\n            //dtodate: new Date(response[2].data),//new Date(),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            //dfromdate: new Date(response[2].data),//new Date(),\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            ntzfromdate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            },\n            ntztodate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            }\n          },\n          timeZoneList: TagListTimeZone || [],\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"create\",\n          isInstrumentInitialRender: true,\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          //selectedRecord\n          selectedRecordMaterialForm: {\n            ntestgroupmaterial: transactionStatus.YES,\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            nsectioncode: inputData.test.nsectioncode,\n            ssectionname: inputData.test.ssectionname,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            npreregno: inputData.test.npreregno,\n            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\n            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          isMaterialInitialRender: true,\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedMaterailId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialComboGet(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode,\n      ntestgrouptestcode: inputData.ntestgrouptestcode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: {\n            ntestgroupmaterial: inputData.ntestgroupmaterial,\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            nsectioncode: inputData.test.nsectioncode,\n            ssectionname: inputData.test.ssectionname,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            npreregno: inputData.test.npreregno,\n            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\n            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"create\" //activeTestKey: \"IDS_INSTRUMENT\",\n          //ncontrolcode: inputData.addResultUsedMaterailId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialCategoryByType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcode: materialMap.get(\"DefaultValue\") || {},\n            nmaterialinventorycode: materialInventoryMap.get(\"DefaultValue\") || {},\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {}\n          },\n          materialCat,\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialByCategory(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcode: materialMap.get(\"OptionList\")[0],\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\n            savailablequantity: response.data.MaterialInventory ? response.data.MaterialInventory[0].savailablequatity : \"\",\n            sunitname: response.data.MaterialInventory ? response.data.MaterialInventory[0].sunitname : \"\"\n          },\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialInvertoryByMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            sunitname: response.data.MaterialInventory ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAvailableMaterialQuantity(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\n      ntestgrouptestcode: inputData.ntestgrouptestcode,\n      nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\n            sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\n          },\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false,\n          selectedId: null\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function deleteInstrumentRecord(inputData) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n//             userinfo: inputData.userInfo,\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\n//             .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             ...response.data\n//                         },\n//                         loading: false,\n//                         operation: \"delete\",\n//                         openModal: false,\n//                         loadEsign: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function fetchInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let urlArray = []; //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\n\n    const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\n      nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo\n    });\n    const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [timeZoneService, getResultUsedInstrument];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory,\n            // ...response[0].data,\n            ...response[1].data //...response[2].data\n\n          },\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          //  selectedRecord\n          selectedRecordInstrumentForm: {\n            ssamplearno: response[0].data.EditResultUsedInstrument[0].ssamplearno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            ninstrumentcatcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\n            },\n            ninstrumentcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\n            },\n            ntzfromdate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\n            },\n            ntztodate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\n            },\n            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\n          },\n          isInstrumentInitialRender: true,\n          timeZoneList: TagListTimeZone || [],\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchMaterialRecord(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\n      nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          selectedRecord: { ...EditResultUsedMaterial,\n            stestsynonym: inputData.editRow.jsondata.stestsynonym,\n            npreregno: EditResultUsedMaterial.npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            nmaterialtypecode: {\n              label: EditResultUsedMaterial.jsondata.smaterialtypename,\n              value: EditResultUsedMaterial.nmaterialtypecode\n            },\n            nmaterialcatcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcategorycode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\n            },\n            nmaterialcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialname\n            },\n            nmaterialinventorycode: {\n              \"value\": EditResultUsedMaterial.ninventorycode,\n              \"label\": EditResultUsedMaterial.jsondata.sinventoryid\n            },\n            ntztodate: {\n              \"value\": EditResultUsedMaterial.ntztodate,\n              \"label\": EditResultUsedMaterial.stztodate\n            },\n            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\n            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\n            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\n            sremarks: EditResultUsedMaterial.jsondata.sremarks,\n            savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity : \"\",\n            sunitname: response.data.inventory ? response.data.inventory.sunitname : \"\"\n          },\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteTaskRecord(inputData, userInfo) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false,\n          selectedId: null\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchTaskRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\n          //      selectedRecord: {\n          selectedRecordTaskForm: {\n            npreregno: response.data.EditResultUsedTasks[0].npreregno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\n            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\n            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\n            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\n            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\n            staskprocedure: response.data.EditResultUsedTasks[0].jsondata.staskprocedure,\n            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\n          },\n          isTaskInitialRender: true,\n          loading: false,\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function parameterRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ncontrolcode: inputData.controlcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          selectedId: response.data.ParameterComments.ntransactionresultcode,\n          selectedRecord: {\n            sresultcomment: response.data.ParameterComments.sresultcomment,\n            stestsynonym: inputData.selectedRecord.stestsynonym,\n            sparametersynonym: inputData.selectedRecord.sparametersynonym,\n            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\n            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n            ncontrolcode: inputData.controlcode\n          },\n          loading: false,\n          screenName: \"IDS_PARAMETERCOMMENTS\",\n          openModal: true,\n          operation: \"updateParameterComments\",\n          ncontrolcode: inputData.controlcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkListRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\n      ncontrolcode: inputData.ncontrolcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let lsteditedQB = [];\n      selectedRecord = {\n        sarno: inputData.selectedRecord.sarno,\n        ssamplearno: inputData.selectedRecord.ssamplearno,\n        npreregno: inputData.selectedRecord.npreregno,\n        stestsynonym: inputData.selectedRecord.stestsynonym,\n        sparametersynonym: inputData.selectedRecord.sparametersynonym,\n        ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\n        ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n        transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\n      };\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord[checklist.nchecklistversionqbcode] = {\n          nchecklistqbcode: checklist.nchecklistqbcode,\n          nchecklistversioncode: checklist.nchecklistversioncode,\n          nchecklistversionqbcode: checklist.nchecklistversionqbcode,\n          sdefaultvalue: checklist.sdefaultvalue,\n          sarno: inputData.selectedRecord.sarno,\n          ssamplearno: inputData.selectedRecord.ssamplearno,\n          stestsynonym: inputData.selectedRecord.stestsynonym,\n          sparametersynonym: inputData.selectedRecord.sparametersynonym\n        };\n        lsteditedQB.push(checklist.nchecklistversionqbcode);\n        return null;\n      });\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n          [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\n        };\n        return null;\n      });\n      selectedRecord[\"editedQB\"] = lsteditedQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.selectedId,\n          selectedRecord: selectedRecord,\n          loading: false,\n          screenName: \"IDS_CHECKLISTRESULT\",\n          openTemplateModal: true,\n          needSaveButton: inputData.needSaveButton,\n          operation: \"create\",\n          ncontrolCode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\n  return function (dispatch) {\n    let listResultCheckList = [];\n\n    if (selectedRecord && selectedRecord.jsondata) {\n      selectedRecord.editedQB.map(qbcode => listResultCheckList.push(selectedRecord[qbcode]));\n      let inputParamData = {\n        ntransactionresultcode: selectedRecord.ntransactionresultcode,\n        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n        transactiontestcode: selectedRecord.transactiontestcode,\n        npreregno: selectedRecord.npreregno,\n        ResultCheckList: {\n          nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\n          nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\n          jsondata: selectedRecord.jsondata,\n          npreregno: selectedRecord.npreregno,\n          ntransactionresultcode: selectedRecord.ntransactionresultcode\n        },\n        //jsondata: selectedRecord.jsondata,\n        userinfo: userInfo,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n        ncontrolcode: -1\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            openModal: false,\n            loading: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }\n  };\n}\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\n  if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\n    return function (dispatch) {\n      let inputParamData = {\n        userinfo: inputData.userinfo,\n        ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\n        npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        //ndesigntemplatemappingcode:ndesigntemplatemappingcode,\n        ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n        ncontrolcode: inputData.ncontrolcode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...response.data,\n              TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\n              RESelectedSubSample: inputData.masterData.RESelectedSubSample\n            },\n            loading: false,\n            activeTestKey: \"IDS_RESULTS\",\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      nformulacode: parameterData.ntestgrouptestformulacode,\n      userinfo: userInfo,\n      npreregno: parameterData.npreregno,\n      ntransactionsamplecode: parameterData.ntransactionsamplecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData).then(response => {\n      const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\n        return {\n          \"idsName\": \"IDS_FILLALLFIELDS\",\n          \"dataField\": index,\n          \"mandatory\": true\n        };\n      });\n      let selectedForumulaInput = [];\n      let selectedForumulaInput1 = [];\n      let selectedMandatory = []; //           selectedRecord.ResultParameter = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\n\n      response.data.DynamicFormulaFields.map((fields, index) => {\n        let dynamicformulafields = {};\n        let selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, fields.ndynamicformulafieldcode, \"ntestparametercode\");\n\n        if (selectedTestParameters.length > 0) {\n          selectedTestParameters = selectedTestParameters.filter(element => {\n            return element.sresult !== null && element.sresult != '';\n          });\n          const nisaverageneed = selectedTestParameters.length;\n          const maxResultCode = selectedTestParameters.length > 0 ? Math.max(...selectedTestParameters.map(o => o.ntransactionresultcode)) : -1; // const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\n          //                 return element.sresult !== null && element.sresult !='';\n          //               }).map(o => o.ntransactionresultcode)));\n\n          const paramValue = getRecordBasedOnPrimaryKeyName(selectedTestParameters, maxResultCode, \"ntransactionresultcode\");\n\n          if (paramValue.length == 0) {\n            dynamicformulafields.svalues = \"\";\n            dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; //dynamicformulafields.nisaverageneed = 0;\n\n            dynamicformulafields.senableAverage = false;\n            response.data.DynamicFormulaFields[index].nisaverageneed = 0;\n            selectedForumulaInput.push(dynamicformulafields);\n            selectedMandatory.push(\"\");\n          } else {\n            if ((maxResultCode >= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false) || (response.data.DynamicFormulaFields[index].svalue != \"\" && response.data.DynamicFormulaFields[index].svalue != null ? maxResultCode <= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false : \"\")) {\n              dynamicformulafields.svalues = paramValue[0].sresult;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; //dynamicformulafields.nisaverageneed = nisaverageneed;\n\n              dynamicformulafields.senableAverage = false;\n              response.data.DynamicFormulaFields[index].nisaverageneed = nisaverageneed;\n              selectedForumulaInput.push(dynamicformulafields);\n              selectedMandatory.push(paramValue[0].sresult);\n            } else {\n              dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\n              dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\n\n              dynamicformulafields.senableAverage = false;\n              selectedForumulaInput.push(dynamicformulafields);\n              selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\n            }\n          }\n        } else {\n          dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\n          dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription; // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\n\n          selectedForumulaInput.push(dynamicformulafields);\n          selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\n        }\n\n        return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)[0]);\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            parameterData: parameterData,\n            naverageroundingdigits: parameterData.nroundingdigits,\n            sformulacalculationdetail: response.data.query,\n            formulainput: response.data.Formula,\n            resultindex: index,\n            DynamicFormulaFields: response.data.DynamicFormulaFields,\n            //selectedForumulaInput: []\n            //  DynamicFormulaFields.map((fields, index) => {\n            //     return {\n            //         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n            //     }\n            //  });\n            // response.data.DynamicFields.map((fields, index) =>\n            selectedForumulaInput,\n            selectedMandatory // selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n            // )\n\n          },\n          validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function calculateFormula(inputDataValue) {\n  return function (dispatch) {\n    const inputData = {\n      ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\n      sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\n      nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\n      userinfo: inputDataValue.userInfo,\n      dynamicformulafields: inputDataValue.lstDynamicFields\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/calculateFormula\", inputData).then(response => {\n      // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n      // {\n      //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n      //     sresult: response.data.Result,\n      //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n      //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n      //     parameter: inputDataValue.selectedRecord.parameterData\n      // }\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\n      inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\n        ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputDataValue.masterData //selectedResultData: inputDataValue.selectedResultData,\n            //selectedResultGrade: inputDataValue.selectedResultGrade,\n            //ResultParameter: inputDataValue.ResultParameter\n\n          },\n          selectedRecord: {\n            selectedResultGrade: inputDataValue.selectedResultGrade,\n            ResultParameter: inputDataValue.ResultParameter\n          },\n          parameterResults: inputDataValue.ResultParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          screenName: \"IDS_RESULTENTRY\",\n          showFormula: false,\n          operation: \"update\",\n          showValidate: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  };\n}\nexport function getREFilterTestData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultFilterStatus: inputData.defaultFilterStatus,\n            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,\n            //inputData.defaultRegistrationSubType,\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterTemplate(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,\n            //inputData.defaultRegistrationSubType,\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateTestMethodSource(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\n          },\n          loading: false,\n          openModal: false,\n          loadEsign: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultImportFile(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n\n      if (response.data.returnStatus && response.data.returnStatus !== \"\") {\n        toast.info(response.data.returnStatus);\n      } else {\n        toast.warn(response.data.returnStatus);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialComplete(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"testinitiate\") {\n          dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\n          dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo, '', '', {\n            basedrulesengine: inputParam[\"screenData\"][\"inputParam\"][\"basedrulesengine\"]\n          }));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\n          dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\n          dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\n          dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\n          dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\n          dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\n          let {\n            selectedRecord,\n            userInfo,\n            nregtypecode,\n            nregsubtypecode,\n            ndesigntemplatemappingcode\n          } = inputParam[\"screenData\"];\n          delete selectedRecord.esignpassword;\n          delete selectedRecord.esigncomments;\n          delete selectedRecord.esignreason;\n          delete selectedRecord.agree;\n          delete inputParam.inputData.password;\n          userInfo = inputParam.inputData.userinfo;\n          dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMeanCalculationTestParameter(meanParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: meanParam.selectedRecord.npreregno,\n      ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\n      userinfo: meanParam.userInfo\n    };\n    return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData).then(response => {\n      const list = response.data || []; // const optionList = [];\n      // list.map(item=>{\n      //     console.log(\"item:\", item);\n      //         optionList.push({item:item, \n      //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n      //                         value:item.ntransactionresultcode})\n      //     })\n      // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          meanTestParameterList: list,\n          screenName: \"IDS_MEANPARAMETER\",\n          ncontrolcode: meanParam.ncontrolCode,\n          selectedTestParameterMean: meanParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/\n\nexport function getAverageResult(parameterData, index, selectedForumulaInput, userInfo, masterData, selectedRecord) {\n  return function (dispatch) {\n    let selectedTestParameters = selectedRecord.ResultParameter.filter(element => {\n      return element.editable == true;\n    });\n    selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, selectedRecord.parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\n    selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, parameterData.ndynamicformulafieldcode, \"ntestparametercode\");\n    let ResultParameterNew = [];\n\n    if (selectedTestParameters.length > 0) {\n      selectedTestParameters.map(Parameter => {\n        let resultParameterValues = {};\n        resultParameterValues.ntransactionresultcode = Parameter.ntransactionresultcode;\n        resultParameterValues.sresult = Parameter.sresult;\n        resultParameterValues.ntestparametercode = Parameter.ntestparametercode;\n        ResultParameterNew.push(resultParameterValues);\n      });\n    }\n\n    let inputParamData = {\n      naverageroundingdigits: selectedRecord.naverageroundingdigits,\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      ntestparametercode: parameterData.ndynamicformulafieldcode,\n      userinfo: userInfo,\n      ntransactionsamplecode: parameterData.ntransactionsamplecode,\n      ResultParameter: ResultParameterNew\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getAverageResult\", inputParamData).then(response => {\n      selectedForumulaInput[index].soldvalue = selectedForumulaInput[index].svalues;\n      selectedForumulaInput[index].svalues = response.data.AverageResult.sresult;\n      selectedForumulaInput[index].senableAverage = true; //selectedForumulaInput[index].svaluesold = \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            selectedForumulaInput\n          },\n          // selectedRecord: {\n          //     ...selectedRecord,\n          //     parameterData: parameterData,\n          //     sformulacalculationdetail: response.data.query,\n          //     formulainput: response.data.Formula,\n          //     resultindex: index,\n          //     selectedForumulaInput,\n          //     selectedMandatory\n          // },\n          // validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getPredefinedData(inputData,selectedRecord,currentAlertResultCode,masterData,currentntestgrouptestpredefcode) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\n//             .then(response => {\n//                 let showMultiSelectCombo=false;  \n//                 let ResultParameter=selectedRecord['ResultParameter']\n//                 let onlyAlertMsgAvailable=false; \n//                 let testgrouptestpredefsubresult=response.data['testgrouptestpredefsubresult']\n//                 if(inputData['nneedsubcodedresult']===transactionStatus.YES){\n//                     showMultiSelectCombo=true\n//                     masterData['testgrouptestpredefsubresultOptions']=testgrouptestpredefsubresult  \n//                 }\n//                 else\n//                 {\n//                     onlyAlertMsgAvailable=true; \n//                 }\n//                // ResultParameter.map(Parameter=>\n//                     for(const Parameter of ResultParameter) \n//                     {\n//                         if(Parameter.additionalInfoUidata||Parameter.additionalInfoUidata===\"\"){\n//                             let additionalInfoUidata=typeof Parameter.additionalInfoUidata==='string'?Parameter.additionalInfoUidata===\"\"?\"\":JSON.parse(Parameter.additionalInfoUidata) :\n//                             Parameter.additionalInfoUidata\n//                             if(Parameter['ntransactionresultcode']===currentAlertResultCode&&\n//                             Parameter['ntestgrouptestpredefcode']===inputData['ntestgrouptestpredefcode']){\n//                             if(Parameter.additionalInfoUidata){\n//                                 selectedRecord[\"ntestgrouptestpredefsubcode\"]=additionalInfoUidata['ntestgrouptestpredefsubcode'] \n//                                 break;\n//                             }\n//                             }else{\n//                             if(selectedRecord[\"ntestgrouptestpredefsubcode\"]){\n//                                 delete selectedRecord[\"ntestgrouptestpredefsubcode\"] \n//                             }\n//                             }\n//                         }\n//                     };  \n//                 masterData['salertmessage']=inputData.salertmessage \n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: { \n//                         loading: false,\n//                         masterData, \n//                         showAlertGrid: inputData.nneedresultentryalert===transactionStatus.NO?false:true,\n//                          showAlertForPredefined: true,\n//                          showMultiSelectCombo,\n//                          onlyAlertMsgAvailable,\n//                          additionalInfoView:false,\n//                          selectedRecord,\n//                          currentAlertResultCode,\n//                          currentntestgrouptestpredefcode\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function getPredefinedData(inputData, selectedRecord, currentAlertResultCode, masterData, currentntestgrouptestpredefcode) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData).then(response => {\n      let showMultiSelectCombo = false;\n      let ResultParameter = selectedRecord['ResultParameter'];\n      let onlyAlertMsgAvailable = false;\n      let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult'];\n\n      if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\n        showMultiSelectCombo = true;\n        masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult;\n      } else {\n        onlyAlertMsgAvailable = true;\n      } // ResultParameter.map(Parameter=>\n\n\n      for (const Parameter of ResultParameter) {\n        if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\n          let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) : Parameter.additionalInfoUidata;\n\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode && Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\n            if (Parameter.additionalInfoUidata) {\n              selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode'];\n              break;\n            }\n          } else {\n            if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\n              delete selectedRecord[\"ntestgrouptestpredefsubcode\"];\n            }\n          }\n        }\n      }\n\n      ;\n      masterData['salertmessage'] = inputData.salertmessage;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          showAlert: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\n          showAlertForPredefined: true,\n          showMultiSelectCombo,\n          onlyAlertMsgAvailable,\n          additionalInfoView: false,\n          selectedRecord,\n          currentAlertResultCode,\n          currentntestgrouptestpredefcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getELNTestValidation(inputData, integrationSettings) {\n  return function (dispatch) {\n    //console.log(localStorage);\n    //localStorage.removeItem(\"linkedorder\");\n    const inputs = {\n      npreregno: inputData.test.npreregno,\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      userInfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getELNTestValidation\", inputs).then(response => {\n      let enlLink = \"\";\n\n      if (response.data) {\n        let link = \"\";\n        let detail = CF_encryptionData(\"-1//Sheet\").EncryptData; // let encryptedbatchid = CF_encryptionData(inputData.test.npreregno +'-' +inputData.test.ntransactionsamplecode +'-' + inputData.test.ntestcode +'-' + inputData.userInfo.nsitecode).EncryptData;\n        //let encryptedbatchid = CF_encryptionData(\"TR-23-0014-TR-23-0014-01-TestNew\").EncryptData;\n        // let encryptedbatchid = CF_encryptionData(inputData.test.sarno +'-' +inputData.test.ssamplearno +'-'+ inputData.test.stestsynonym+'-'+inputData.userInfo.ssitename).EncryptData;\n\n        const settedId = inputData.test.npreregno + '-' + inputData.test.ntransactionsamplecode + '-' + inputData.test.ntestcode + '-' + inputData.test.ntestrepeatno + '-' + inputData.test.ntestretestno + '-' + inputData.userInfo.nsitecode; //console.log(settedId);\n\n        let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\n        const userObject = {\n          usercode: inputData.elnUserInfo.nelncode,\n          username: inputData.elnUserInfo.selnuserid,\n          userfullname: inputData.elnUserInfo.selnusername,\n          lsusergroup: {\n            usergroupcode: inputData.elnUserInfo.nelnusergroupcode,\n            usergroupname: inputData.elnUserInfo.nelnusergroupcode\n          },\n          lssitemaster: {\n            sitecode: inputData.elnSite.nelnsitecode\n          }\n        };\n        let encrypteduser = CF_encryptionData(userObject).EncryptData; //const baseURL = \"http://localhost:9090/ELN\";\n\n        const baseURL = integrationSettings[1].slinkname;\n        link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}'; // let a=\"/vieworder\" + '#{\"d\":\"' + inputData.test.npreregno +'-' +inputData.test.ntransactionsamplecode +'-'+ inputData.test.ntestcode+'-'+ inputData.test.ntestrepeatno+'-'+ inputData.test.ntestretestno+'-'+inputData.userInfo.nsitecode + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\n        // // return link;\n        // //   }\n        // let hashobject = JSON.parse(a);\n        //                     let batchid = \"\";\n        //  if (link.batchid !== undefined) {\n        // // eslint-disable-next-line no-useless-escape\n        // batchid = CF_decrypt(link.batchid ).replaceAll('\\\"', '');\n        //  }\n        // const encrypteduser1 = CF_decrypt(link);\n        //enlLink = link;\n        // console.log(\"--->\"+link);\n        //console.log(\"--->\"+batchid);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              //defaultSampleType: inputData.defaultSampleType,\n              ...response.data,\n              enlLink: link\n            },\n            openELNSheet: true,\n            loading: false,\n            enlLink: link // enlLink:enlLink\n\n          }\n        }); //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);    \n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOSHEETFORTHISTEST\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              //defaultSampleType: inputData.defaultSampleType,\n              ...response.data,\n              enlLink: \"\"\n            },\n            enlLink: \"\",\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getConfigurationFilter(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getConfigurationFilter\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\n            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBasedBatchWorklist(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedBatchWorklist\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data // defaultTestvalues: inputData.defaultTestvalues //,\n            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\n            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREAdhocParamter(inputDataObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"resultentrybysample/getAdhocParamter\", inputDataObj).then(response => {\n      let AdhocParamter = constructOptionList(response.data['AdhocParamter'] || [], 'ntestparametercode', 'sparametersynonym', undefined, undefined, undefined);\n      AdhocParamter = AdhocParamter.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...inputDataObj.masterData,\n            AdhocParamter: AdhocParamter\n          },\n          screenName: 'IDS_ADHOCPARAMETER',\n          adhoctransactiontestcode: inputDataObj.ntransactiontestcode,\n          adhocpreregno: inputDataObj.npreregno,\n          openModal: true,\n          operation: \"IDS_ADD\",\n          selectedRecord: {},\n          adhocId: inputDataObj.adhocId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function createAdhocParamter(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"resultentrybysample/createAdhocParamter\", inputParam.inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...inputParam.inputData.masterData,\n            ...response.data\n          },\n          screenName: 'IDS_ADHOCPARAMETER',\n          openModal: false,\n          activeTestTab: \"IDS_RESULTS\",\n          activeTabIndex: 1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function enforceResult(inputParam, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = [];\n    url.push(rsapi.post(\"/grade/getGrade\", {\n      userinfo: userInfo\n    }));\n    url.push(rsapi.post(\"resultentrybysample/getenforceResult\", {\n      ncontrolcode: inputParam['ncontrolcode'],\n      ntransactiontestcode: inputParam['dataItem']['ntransactiontestcode'],\n      ntransactionresultcode: inputParam['dataItem']['ntransactionresultcode'],\n      userinfo: userInfo\n    }));\n    Axios.all(url).then(response => {\n      const Grade = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n      let selectedRecord = {};\n      let savedResultparameter = response[1].data['savedResultparameter'];\n      selectedRecord = //savedResultparameter['sgradename']&&savedResultparameter['sgradename']!=='NA'?\n      {\n        'senforceresult': savedResultparameter['sfinal'] && savedResultparameter['sfinal'],\n        // 'ngradecode':{\n        //     'label':savedResultparameter['sgradename']&&savedResultparameter['sgradename'],\n        //     'value': savedResultparameter['ngradecode']&&savedResultparameter['ngradecode']\n        // } ,\n        'senforceresultcomment': savedResultparameter['senforceresultcomment'] && savedResultparameter['senforceresultcomment'],\n        ntransactionresultcode: savedResultparameter['ntransactionresultcode'],\n        ntransactiontestcode: savedResultparameter['ntransactiontestcode']\n      }; //        : {\n      //         'senforceresult':savedResultparameter['sfinal']&&savedResultparameter['sfinal'],\n      //         'senforceresultcomment':savedResultparameter['senforceresultcomment']&&savedResultparameter['senforceresultcomment'],\n      //         // 'ngradecode':{\n      //         //     'label':savedResultparameter['sgradename']&&savedResultparameter['sgradename'],\n      //         //     'value': savedResultparameter['ngradecode']&&savedResultparameter['ngradecode']\n      //         // } ,\n      //         ntransactionresultcode:savedResultparameter['ntransactionresultcode'],\n      //         ntransactiontestcode:savedResultparameter['ntransactiontestcode']\n      //    };\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: {\n            'GradeList': Grade.get(\"OptionList\"),\n            ...inputParam.masterData,\n            ...response.data\n          },\n          ncontrolcode: inputParam['ncontrolcode'],\n          selectedRecord,\n          screenName: \"IDS_ENFORCERESULT\",\n          openModal: true,\n          operation: \"update\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ResultEntryViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const selectedRecord = {\n      ntestcode: viewdetails.test.ntestcode\n    };\n    rsapi.post(\"worklist/getSampleViewDetails\", {\n      selectedRecord,\n      PatientId: viewdetails.test.PatientId,\n      npreregno: viewdetails.test.npreregno,\n      userinfo: userInfo\n    }).then(response => {\n      masterData['AuditModifiedComments'] = [];\n      masterData['AuditModifiedComments'] = response.data['AuditModifiedComments'];\n      masterData['viewdetails'] = [];\n      masterData['viewdetails'] = response.data['viewdetails'][0]; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_PREVIOUSRESULTVIEW\",\n          operation: \"\",\n          loading: false,\n          openModal: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","compareArrays","CF_encryptionData","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","nneedtemplatebasedflow","nworlistcode","nbatchmastercode","activeName","dataStateName","post","checkBoxOperation","then","response","data","oldSelectedTest","RESelectedTest","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","subSampleSkip","subSampleTake","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedMaterial","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","RegistrationComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","activeTabIndex","catch","error","status","message","warn","oldSelectedSubSample","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","bool","showFilter","activeSampleTab","subSample","responseData","RegistrationSampleComment","RegistrationSampleAttachment","testList","wholeSubsampleList","selectedSubSample","activeSubSampleTab","activeTestTab","screenName","console","log","getSampleChildTabREDetail","url","activeTabId","getRERegistrationType","defaultSampleType","realDesignTemplateMapping","realApproveConfigVersion","realApprovalConfigVersionList","realDesignTemplateMappingList","realFilterStatusList","realRegistrationSubTypeList","realRegistrationTypeList","realTestvaluesList","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","rtn","warning","formatMessage","id","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","additionalInfo","TestList","searchedTest","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","predefDefaultFlag","param","ngradecode","ntransactionresultcode","jsondata","JSON","parse","hasOwnProperty","PredefinedValues","predefinedvalue","get","selectedRecord","isParameterInitialRender","openModal","operation","completeTest","inputParam","acceptList","completeResultId","booleanFlag","testChildGetREParam","basedrulesengine","napprovalconfigcode","transactiontestcode","RE_SAMPLE","onlySampleService","selectedSampleArray","subSampleArray","selectPreregNOBefore","unwantedPreregno","some","y","boolSelectedSubSample","searchedSubSample","backfrontTest","objx","objy","searchedSubSamplebefore","searchedSubSampleaftere","unwantedSamplecode","RESelectedTest1","RESelectedTest2","searchedSample","keys","respObject","RegistrationTestAlert","NewTestGroupTestAlert","showAlertGrid","showAlertForPredefined","additionalInfoView","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","testStart","subSampleNeeded","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","selectedRecordInstrumentForm","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","isInstrumentInitialRender","addResultUsedInstrumentId","addREMaterial","nsectioncode","materialTypeMap","MaterialType","materialType","materialCatMap","MaterialCategory","materialCat","materialMap","Material","material","materialInventoryMap","MaterialInventory","materialInventory","selectedRecordMaterialForm","ntestgroupmaterial","YES","ssectionname","nmaterialtypecode","nmaterialcatcode","nmaterialcode","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","isMaterialInitialRender","addResultUsedMaterailId","getREMaterialComboGet","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","inventory","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","fetchMaterialRecord","nresultusedmaterialcode","EditResultUsedMaterial","label","smaterialtypename","nmaterialcategorycode","smaterialcatname","smaterialname","ninventorycode","sinventoryid","susedquantity","nqtyused","scarriergas","smobilephase","sremarks","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","selectedRecordTaskForm","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","staskprocedure","isTaskInitialRender","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","selectedForumulaInput","selectedForumulaInput1","selectedMandatory","fields","dynamicformulafields","selectedTestParameters","ndynamicformulafieldcode","element","sresult","nisaverageneed","maxResultCode","Math","max","o","paramValue","svalues","sparameter","sdescription","senableAverage","svalue","ntestparametercode","naverageroundingdigits","nroundingdigits","sformulacalculationdetail","query","formulainput","Formula","resultindex","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","DesignTemplateMappingValue","getREFilterTemplate","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","esignreason","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean","getAverageResult","editable","ResultParameterNew","Parameter","resultParameterValues","soldvalue","AverageResult","getPredefinedData","currentAlertResultCode","currentntestgrouptestpredefcode","ntestgrouptestpredefcode","showMultiSelectCombo","onlyAlertMsgAvailable","testgrouptestpredefsubresult","additionalInfoUidata","salertmessage","showAlert","nneedresultentryalert","NO","getELNTestValidation","integrationSettings","inputs","enlLink","link","detail","EncryptData","settedId","ntestrepeatno","ntestretestno","nsitecode","encryptedbatchid","userObject","usercode","elnUserInfo","nelncode","username","selnuserid","userfullname","selnusername","lsusergroup","usergroupcode","nelnusergroupcode","usergroupname","lssitemaster","sitecode","elnSite","nelnsitecode","encrypteduser","baseURL","slinkname","openELNSheet","getConfigurationFilter","getTestBasedBatchWorklist","addREAdhocParamter","inputDataObj","AdhocParamter","adhoctransactiontestcode","adhocpreregno","adhocId","createAdhocParamter","enforceResult","Grade","savedResultparameter","ResultEntryViewPatientDetails","viewdetails","PatientId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACIC,cADJ,QAEO,cAFP;AAGA,SACIC,KADJ,QAEO,gBAFP;AAGA,SACIC,WADJ,QAEO,eAFP;AAGA,SACIC,IADJ,QAEO,mBAFP;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,YADJ,QAEO,oDAFP;AAGA,SACIC,mBADJ,EAEIC,kCAFJ,EAGIC,4BAHJ,EAIIC,8BAJJ,EAKIC,0BALJ,EAMIC,oBANJ,EAOIC,QAPJ,EAQIC,2BARJ,EAQiCC,mBARjC,EAQsDC,iCARtD,EAQyFC,eARzF,EAQ0GC,aAR1G,EAQwHC,iBARxH,QASO,4BATP;AAUA,SACIC,iBADJ,QAEO,2BAFP;AAIA,OAAO,SAASC,oBAAT,CAA8BC,SAA9B,EAAyCC,iBAAzC,EAA4D;AAC/D,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBC,MAAAA,KAAK,EAAE,CADU;AAEjBC,MAAAA,KAAK,EAAEL,SAAS,CAACK,KAAV,IAAmB,CAFT;AAGjBC,MAAAA,eAAe,EAAEN,SAAS,CAACM,eAHV;AAIjBC,MAAAA,YAAY,EAAEP,SAAS,CAACO,YAJP;AAKjBC,MAAAA,eAAe,EAAER,SAAS,CAACQ,eALV;AAMjBC,MAAAA,SAAS,EAAET,SAAS,CAACS,SANJ;AAOjBC,MAAAA,UAAU,EAAEC,MAAM,CAACX,SAAS,CAACY,kBAAX,CAPD;AAQjBC,MAAAA,oBAAoB,EAAE,CARL;AASjBC,MAAAA,QAAQ,EAAEd,SAAS,CAACc,QATH;AAUjBC,MAAAA,SAAS,EAAEf,SAAS,CAACe,SAVJ;AAWjBC,MAAAA,oBAAoB,EAAEhB,SAAS,CAACgB,oBAXf;AAYjBC,MAAAA,QAAQ,EAAEjB,SAAS,CAACiB,QAZH;AAajBC,MAAAA,MAAM,EAAElB,SAAS,CAACkB,MAbD;AAcjBC,MAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAdR;AAejBC,MAAAA,eAAe,EAAEpB,SAAS,CAACoB,eAfV;AAgBjB;AACAC,MAAAA,cAAc,EAAErB,SAAS,CAACsB,UAAV,CAAqBC,mBAArB,CAAyCF,cAjBxC;AAkBjBG,MAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BAlBrB;AAmBjBC,MAAAA,sBAAsB,EAAEzB,SAAS,CAACyB,sBAnBjB;AAoBjBC,MAAAA,YAAY,EAAE1B,SAAS,CAAC0B,YApBP;AAqBjBC,MAAAA,gBAAgB,EAAC3B,SAAS,CAAC2B;AArBV,KAArB;AAuBA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB,CAzBuB,CA0BvB;AACA;;AACA3B,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;;AACA,QAAIoB,iBAAJ,EAAuB;AACnBvB,MAAAA,KAAK,CAACoD,IAAN,CAAW,2CAAX,EAAwD,EAAE,GAAG3B,cAAL;AAAqB4B,QAAAA,iBAAiB,EAAE/B,SAAS,CAAC+B;AAAlD,OAAxD,EACKC,IADL,CACUC,QAAQ,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA1C,QAAAA,QAAQ,CAAC0C,QAAQ,CAACC,IAAV,CAAR,CAPc,CAQd;AACA;;AACA,YAAIC,eAAe,GAAGnC,SAAS,CAACsB,UAAV,CAAqBc,cAA3C;AACAlD,QAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuBW,QAAQ,CAACC,IAAhC,EAAsClC,SAAS,CAACqC,YAAhD,EAA8DrC,SAAS,CAAC+B,iBAAxE,EAA2F,WAA3F,EAAwG/B,SAAS,CAACsC,sBAAlH,CAAlC;AACA,YAAIC,mBAAmB,GAAGvC,SAAS,CAAC+B,iBAAV,KAAgC,CAAhC,IAAqC/B,SAAS,CAAC+B,iBAAV,KAAgC,CAArE,GAAyEE,QAAQ,CAACC,IAAT,CAAcK,mBAAvF,GAA6GvC,SAAS,CAACsB,UAAV,CAAqBiB,mBAA5J;AACAA,QAAAA,mBAAmB,GAAGvC,SAAS,CAACsB,UAAV,CAAqBC,mBAArB,CAAyCF,cAAzC,GAA0DkB,mBAA1D,GAAgFvC,SAAS,CAACsB,UAAV,CAAqBkB,YAA3H;AAIA,YAAIlB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEb;AACAc,UAAAA,cAAc,EAAEpC,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAHjF;AAIbE,UAAAA,gBAAgB,EAAE3C,SAAS,CAAC2C,gBAJf;AAKbJ,UAAAA;AALa,SAAjB,CAjBc,CAwBd;AACA;AACA;AACA;;AACA,YAAIvC,SAAS,CAAC4C,kBAAV,KAAiCC,SAAjC,IAA8C7C,SAAS,CAAC4C,kBAAV,CAA6BE,OAA7B,KAAyC,IAA3F,EAAiG;AAC7F9C,UAAAA,SAAS,CAAC4C,kBAAV,CAA6BE,OAA7B,CAAqCC,KAArC,GAA6C,EAA7C;AACAzB,UAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkCuB,SAAlC;AACH;;AACD,YAAI7C,SAAS,CAACgD,aAAV,KAA4BH,SAA5B,IAAyC7C,SAAS,CAACgD,aAAV,CAAwBF,OAAxB,KAAoC,IAAjF,EAAuF;AACnF9C,UAAAA,SAAS,CAACgD,aAAV,CAAwBF,OAAxB,CAAgCC,KAAhC,GAAwC,EAAxC;AACAzB,UAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BuB,SAA7B;AACH;;AACD,YAAI;AACAI,UAAAA,QADA;AAEAC,UAAAA,QAFA;AAGEC,UAAAA,aAHF;AAGiBC,UAAAA;AAHjB,YAIApD,SAJJ,CApCc,CAyCd;AACA;;AACA,YAAIqD,QAAQ,GAAG,EAAf,CA3Cc,CA4Cd;;AACIJ,QAAAA,QAAQ,GAAG,CAAX,CA7CU,CA8CV;AACJ;;AACAE,QAAAA,aAAa,GAAG,CAAhB,CAhDc,CAiDd;AACA;;AACIE,QAAAA,QAAQ,GAAG;AACPJ,UAAAA,QADO;AAEPC,UAAAA,QAFO;AAGLC,UAAAA,aAHK;AAGUC,UAAAA;AAHV,SAAX,CAnDU,CAwDd;;AACA,YAAIE,cAAc,GAAG,EAArB;AACA,YAAIC,oBAAoB,GAAG,EAA3B;AACA,YAAIC,kBAAkB,GAAG,EAAzB;AACA,YAAIC,eAAe,GAAG,EAAtB;AACA,YAAIC,0BAA0B,GAAG,EAAjC;AACA,YAAIC,mBAAmB,GAAG,EAA1B;AACA,YAAIC,uBAAuB,GAAG,EAA9B;AACA,YAAIC,mBAAmB,GAAG,EAA1B,CAhEc,CAiEd;;AAEA,YAAI7D,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AACnC;AACA,cAAI+B,aAAa,GAAGxC,UAAU,CAACmB,OAAX,CAAmBsB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACnD,oBAA9B,CAApB;AACAsB,UAAAA,eAAe,CAAC4B,GAAhB,CAAoB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACjC,gBAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,IAAI,CAACpD,oBAA5B,CAAL,EAAwD;AACpDsB,cAAAA,eAAe,CAACiC,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACH;;AACD,mBAAO,IAAP;AACH,WALD;AAMA,cAAIG,OAAO,GAAG,KAAd;AACA,cAAIxD,oBAAJ;AACA,cAAIJ,SAAJ;;AACA,cAAI0B,eAAe,CAACO,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B2B,YAAAA,OAAO,GAAG,IAAV;AACA/C,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,cAAAA,cAAc,EAAED;AAFP,aAAb;AAIH,WAND,MAMO;AACHtB,YAAAA,oBAAoB,GAAGS,UAAU,CAACc,cAAX,CAA0B,CAA1B,EAA6BvB,oBAApD;AACAJ,YAAAA,SAAS,GAAGa,UAAU,CAACqB,gBAAX,CAA4B,CAA5B,EAA+BlC,SAA3C;AACH;;AACD,kBAAQT,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACImC,cAAAA,cAAc,GAAGe,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBgC,cAAxB,GAAyClE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAA/F;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,iBAAK,gBAAL;AACI0B,cAAAA,oBAAoB,GAAGc,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAxB,GAA+CnE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiC,oBAAtB,EAA4C1C,oBAA5C,EAAkE,sBAAlE,CAA3G;AACAe,cAAAA,UAAU,GAAG,sBAAb;AACAC,cAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,iBAAK,cAAL;AACI2B,cAAAA,kBAAkB,GAAGa,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAxB,GAA6CpE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBkC,kBAAtB,EAA0C3C,oBAA1C,EAAgE,sBAAhE,CAAvG;AACAe,cAAAA,UAAU,GAAG,oBAAb;AACAC,cAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,iBAAK,UAAL;AACI4B,cAAAA,eAAe,GAAGY,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBmC,eAAxB,GAA0CrE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBmC,eAAtB,EAAuC5C,oBAAvC,EAA6D,sBAA7D,CAAjG;AACAe,cAAAA,UAAU,GAAG,iBAAb;AACAC,cAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,iBAAK,qBAAL;AACI6B,cAAAA,0BAA0B,GAAGW,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAxB,GAAqDtE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBoC,0BAAtB,EAAkD7C,oBAAlD,EAAwE,sBAAxE,CAAvH;AACAe,cAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,iBAAK,yBAAL;AACI+B,cAAAA,mBAAmB,GAAGU,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAxB,GAA8CvE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBqC,mBAAtB,EAA2C9C,oBAA3C,EAAiE,sBAAjE,CAAzG;AACAe,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,iBAAK,kBAAL;AACI+B,cAAAA,uBAAuB,GAAGS,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAxB,GAAkDxE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBsC,uBAAtB,EAA+C/C,oBAA/C,EAAqE,sBAArE,CAAjH;AACAe,cAAAA,UAAU,GAAG,yBAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,iBAAK,oBAAL;AACIgC,cAAAA,mBAAmB,GAAGQ,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBuC,mBAAxB,GAA8CzE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBuC,mBAAtB,EAA2CpD,SAA3C,EAAsD,WAAtD,CAAzG;AACAmB,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,wBAAhB;AACA;;AAGJ;AACIyB,cAAAA,cAAc,GAAGe,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBgC,cAAxB,GAAyClE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAA/F;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;AA9CR;AAkDH,SAxED,MAwEO,IAAI7B,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AAC1C,cAAIuC,IAAI,GAAG,EAAX;AACA,cAAIC,MAAM,GAAG,EAAb;;AACA,kBAAQvE,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACIoD,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBgC,cAAzB,EAAyC,GAAGrB,QAAQ,CAACC,IAAT,CAAcoB,cAA1D,CAAP;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACA;;AACJ,iBAAK,gBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAzB,EAA+C,GAAGtB,QAAQ,CAACC,IAAT,CAAcqB,oBAAhE,CAAP;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACA;;AACJ,iBAAK,cAAL;AACIyD,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAzB,EAA6C,GAAGvB,QAAQ,CAACC,IAAT,CAAcsB,kBAA9D,CAAP;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACA;;AACJ,iBAAK,UAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,IAAiC,EAA1C;AACAa,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBmC,eAAzB,EAA0C,GAAGc,MAA7C,CAAP;AACAD,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACA;;AACJ,iBAAK,qBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,IAA4C,EAArD;AACAY,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAzB,EAAqD,GAAGa,MAAxD,CAAP;AACAb,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACA;;AACJ,iBAAK,yBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,IAAqC,EAA9C;AACAW,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAzB,EAA8C,GAAGY,MAAjD,CAAP;AACAZ,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACA;;AACJ,iBAAK,kBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAc0B,uBAAd,IAAyC,EAAlD;AACAU,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAzB,EAAkD,GAAGW,MAArD,CAAP;AACAX,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAxD;AACA;;AACJ,iBAAK,oBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAc2B,mBAAd,IAAqC,EAA9C;AACAS,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBuC,mBAAzB,EAA8C,GAAGU,MAAjD,CAAP;AACAV,cAAAA,mBAAmB,GAAGzE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAAC2C,gBAAV,CAA2BD,MAA3B,GAAoC,CAApC,GAAwC1C,SAAS,CAAC2C,gBAAV,CAA2B,CAA3B,EAA8BlC,SAAtE,GAAkF,EAAzF,EAA6F,WAA7F,CAApD;AACA;;AACJ;AACI8D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBgC,cAAzB,EAAyC,GAAGiB,MAA5C,CAAP;AACAjB,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACA;AA7CR;AA+CH,SAlDM,MAmDF,IAAIb,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AAExC;AAEA,cAAIuC,IAAI,GAAG,EAAX;;AACA,kBAAQtE,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACImD,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,iBAAK,gBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcqB,oBAAd,GAAqChE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcqB,oBAAf,EAAqC,YAArC,EAAmD,2BAAnD,CAA7C,GAA+H,EAAtI;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACAe,cAAAA,UAAU,GAAG,sBAAb;AACAC,cAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,iBAAK,cAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcsB,kBAAd,GAAmCjE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcsB,kBAAf,EAAmC,YAAnC,EAAiD,yBAAjD,CAA3C,GAAyH,EAAhI;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACAe,cAAAA,UAAU,GAAG,oBAAb;AACAC,cAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,iBAAK,UAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,GAAgClE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcuB,eAAf,EAAgC,YAAhC,EAA8C,qBAA9C,CAAxC,GAA+G,EAAtH;AACAa,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACAe,cAAAA,UAAU,GAAG,iBAAb;AACAC,cAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,iBAAK,qBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,GAA2CnE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcwB,0BAAf,EAA2C,YAA3C,EAAyD,qBAAzD,CAAnD,GAAqI,EAA5I;AACAA,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACAe,cAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,iBAAK,yBAAL;AACI0C,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,GAAoCpE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcyB,mBAAf,EAAoC,YAApC,EAAkD,0BAAlD,CAA5C,GAA4H,EAAnI;AACAA,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACAe,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,iBAAK,kBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAc0B,uBAAd,GAAwCrE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAc0B,uBAAf,EAAwC,YAAxC,EAAsD,kBAAtD,CAAhD,GAA4H,EAAnI;AACAA,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAxD;AACAe,cAAAA,UAAU,GAAG,yBAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;AACA;;AACJ,iBAAK,oBAAL;AAEIgC,cAAAA,mBAAmB,GAAG5B,QAAQ,CAACC,IAAT,CAAc2B,mBAAd,GAAoC,CAAC,GAAG5B,QAAQ,CAACC,IAAT,CAAc2B,mBAAlB,CAApC,GAA6E,EAAnG;AACAjC,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,yBAAhB;AACA;;AACJ;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;AAvDR;AA2DH,SAhEI,MAiEA;AACD,cAAIyC,IAAI,GAAG,EAAX;;AACA,cAAI,CAACtE,SAAS,CAACsB,UAAV,CAAqBC,mBAArB,CAAyCF,cAA9C,EAA8D;AAC1D,gBAAIyC,aAAa,GAAGxC,UAAU,CAACmB,OAAX,CAAmBsB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACnD,oBAA9B,CAApB;AACAsB,YAAAA,eAAe,CAAC4B,GAAhB,CAAoB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACjC,kBAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,IAAI,CAACpD,oBAA5B,CAAL,EAAwD;AACpDsB,gBAAAA,eAAe,CAACiC,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACH;;AACD,qBAAO,IAAP;AACH,aALD;AAMA,gBAAIG,OAAO,GAAG,KAAd;AACA,gBAAIxD,oBAAJ;;AACA,gBAAIsB,eAAe,CAACO,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B2B,cAAAA,OAAO,GAAG,IAAV;AACA/C,cAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,gBAAAA,cAAc,EAAED;AAFP,eAAb;AAIH,aAND,MAMO;AACHtB,cAAAA,oBAAoB,GAAGS,UAAU,CAACc,cAAX,CAA0B,CAA1B,EAA6BvB,oBAApD;AACH;AACJ;;AACD,kBAAQb,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACImD,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,iBAAK,gBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcqB,oBAAd,GAAqChE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcqB,oBAAf,EAAqC,YAArC,EAAmD,2BAAnD,CAA7C,GAA+H,EAAtI;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACAe,cAAAA,UAAU,GAAG,sBAAb;AACAC,cAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,iBAAK,cAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcsB,kBAAd,GAAmCjE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcsB,kBAAf,EAAmC,YAAnC,EAAiD,yBAAjD,CAA3C,GAAyH,EAAhI;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACAe,cAAAA,UAAU,GAAG,oBAAb;AACAC,cAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,iBAAK,UAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,GAAgClE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcuB,eAAf,EAAgC,YAAhC,EAA8C,qBAA9C,CAAxC,GAA+G,EAAtH;AACAa,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACAe,cAAAA,UAAU,GAAG,iBAAb;AACAC,cAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,iBAAK,qBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,GAA2CnE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcwB,0BAAf,EAA2C,YAA3C,EAAyD,qBAAzD,CAAnD,GAAqI,EAA5I;AACAA,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACAe,cAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,iBAAK,yBAAL;AACI0C,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,GAAoCpE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcyB,mBAAf,EAAoC,YAApC,EAAkD,0BAAlD,CAA5C,GAA4H,EAAnI;AACAA,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACAe,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,iBAAK,kBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAc0B,uBAAd,GAAwCrE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAc0B,uBAAf,EAAwC,YAAxC,EAAsD,kBAAtD,CAAhD,GAA4H,EAAnI;AACAA,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAxD;AACAe,cAAAA,UAAU,GAAG,yBAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,iBAAK,oBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAc2B,mBAAd,GAAoCtE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAc2B,mBAAf,EAAoC,YAApC,EAAkD,iBAAlD,CAA5C,GAAmH,EAA1H;AACAA,cAAAA,mBAAmB,GAAGzE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAAC2C,gBAAV,CAA2BD,MAA3B,GAAoC,CAApC,GAAwC1C,SAAS,CAAC2C,gBAAV,CAA2B,CAA3B,EAA8BlC,SAAtE,GAAkF,EAAzF,EAA6F,WAA7F,CAApD;AACAmB,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AAEJ;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;AAvDR;AAyDH;;AAEDP,QAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET;AACAgC,UAAAA,cAHS;AAIT;AACAC,UAAAA,oBALS;AAMTC,UAAAA,kBANS;AAOT;AACAC,UAAAA,eARS;AAST;AACAC,UAAAA,0BAVS;AAWT;AACAC,UAAAA,mBAZS;AAaT;AACAC,UAAAA,uBAdS;AAgBTC,UAAAA,mBAhBS,CAiBT;;AAjBS,SAAb;;AAmBA,YAAI7D,SAAS,CAAC6B,aAAD,CAAT,IAA4BP,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAA1F,EAAgG;AAE5FtB,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,cAAAA,IAAI,EAAE,CAFO;AAGbC,cAAAA,IAAI,EAAE/B,SAHO;AAIbgC,cAAAA,MAAM,EAAEhC;AAJK;AAFV,WAAX;AASH,SAXD,MAWO;AACHQ,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,cAAAA,IAAI,EAAE/B,SAFO;AAGbgC,cAAAA,MAAM,EAAEhC;AAHK;AAFV,WAAX;AAQH;;AACD3C,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UADK;AAEL0D,YAAAA,OAAO,EAAE,KAFJ;AAGLL,YAAAA,IAAI,EAAE9B,SAHD;AAILoC,YAAAA,IAAI,EAAEpC,SAJD;AAKLM,YAAAA,aAAa,EAAEN,SALV;AAMLO,YAAAA,aAAa,EAAEP,SANV;AAOL,eAAGQ,QAPE;AAQL6B,YAAAA,cAAc,EAAElF,SAAS,CAACkF;AARrB;AAFJ,SAAD,CAAR;AAaH,OAtYL,EAuYKC,KAvYL,CAuYWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OAnZL;AAoZH,KArZD,MAqZO;AACH,UAAIC,eAAe,GAAGnC,SAAS,CAACsB,UAAV,CAAqBc,cAA3C,CADG,CAEH;AACA;;AACA,UAAIoD,oBAAoB,GAAGxF,SAAS,CAACsB,UAAV,CAAqBiB,mBAAhD;AACA,UAAI;AAAEkD,QAAAA,aAAF;AAAiBC,QAAAA;AAAjB,UAAmC1F,SAAvC;AACA,UAAIqD,QAAQ,GAAG,EAAf;AACA,UAAIsC,YAAY,GAAG,EAAnB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AACA,UAAI5F,SAAS,CAAC,YAAD,CAAb,EAA6B;AACzB2F,QAAAA,YAAY,GAAGvG,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBc,cAAtB,EAAsCpC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA1E,EAAqF,WAArF,CAA7C;AACAmF,QAAAA,iBAAiB,GAAGxG,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiB,mBAAtB,EAA2CvC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA/E,EAA0F,WAA1F,CAAlD;AACH,OAHD,MAIK;AACDkF,QAAAA,YAAY,GAAGjG,iCAAiC,CAACM,SAAS,CAACsB,UAAV,CAAqBc,cAAtB,EAAsCpC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA1E,EAAqF,WAArF,CAAhD;AACAmF,QAAAA,iBAAiB,GAAGlG,iCAAiC,CAACM,SAAS,CAACsB,UAAV,CAAqBiB,mBAAtB,EAA2CvC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA/E,EAA0F,WAA1F,CAArD;AACH;;AAED,UAAIoF,uBAAuB,GAAG,KAA9B;;AACA,UAAIF,YAAY,CAACjD,MAAb,GAAsB,CAA1B,EAA6B;AACzBmD,QAAAA,uBAAuB,GAAG,KAA1B;AACH,OAFD,MAEO;AACHA,QAAAA,uBAAuB,GAAG,IAA1B;AACH;;AACD3G,MAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuBtB,SAAS,CAAC2C,gBAAjC,EAAmD3C,SAAS,CAACqC,YAA7D,EAA2ErC,SAAS,CAAC+B,iBAArF,EAAwG,WAAxG,EAAqH/B,SAAS,CAACsC,sBAA/H,CAAlC;;AACA,UAAIuD,uBAAJ,EAA6B;AACzB,YAAIhF,oBAAoB,GAAGb,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAAhC,CAAqDiF,QAArD,EAA1C,GAA4G,EAAvI;AACA,YAAInD,gBAAgB,GAAG3C,SAAS,CAAC2C,gBAAjC;AACA,YAAIP,cAAc,GAAGpC,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAAnG;AACA,YAAIF,mBAAmB,GAAGvC,SAAS,CAACsB,UAAV,CAAqBkB,YAA/C;;AAGA,YAAIxC,SAAS,CAACsB,UAAV,CAAqBD,cAAzB,EAAyC;AACrC,cAAI0E,uBAAuB,GAAG1G,0BAA0B,CAACmG,oBAAD,EAAuBxF,SAAS,CAACsB,UAAV,CAAqBkB,YAA5C,EAA0D,wBAA1D,CAAxD;AACAD,UAAAA,mBAAmB,GAAGwD,uBAAuB,CAACrD,MAAxB,GAAiC,CAAjC,GAAqCqD,uBAArC,GAA+D,CAAC/F,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkC,CAAlC,CAAD,CAArF;;AACA,cAAIxC,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkCE,MAAlC,IAA4C1C,SAAS,CAAC0F,aAA1D,EAAyE;AACrEA,YAAAA,aAAa,GAAG,CAAhB;AACArC,YAAAA,QAAQ,GAAG;AAAEoC,cAAAA,aAAF;AAAiBC,cAAAA;AAAjB,aAAX;AACH;AACJ;;AACD,YAAIM,sBAAsB,GAAGzD,mBAAmB,CAACwB,GAApB,CAAwBkC,SAAS,IAAIA,SAAS,CAACD,sBAA/C,EAAuEE,IAAvE,CAA4E,GAA5E,CAA7B;AACA,YAAI5E,UAAU,GAAG,EAAE,GAAGtB,SAAS,CAACsB,UAAf;AAA2BqB,UAAAA,gBAA3B;AAA6CJ,UAAAA,mBAA7C;AAAkEH,UAAAA;AAAlE,SAAjB;AACApC,QAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERa,UAAAA,oBAFQ;AAGRmF,UAAAA,sBAHQ;AAIRrD,UAAAA,gBAJQ;AAKRP,UAAAA,cALQ;AAMRG,UAAAA,mBANQ;AAORR,UAAAA,iBAAiB,EAAE,CAPX;AAQRZ,UAAAA,aAAa,EAAEnB,SAAS,CAACmB,aARjB;AAQgCG,UAAAA;AARhC,SAAZ;;AAWA,YAAIc,cAAc,CAACM,MAAf,GAAwB,CAA5B,EAA+B;AAC3B1C,UAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERqC,YAAAA,YAAY,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,EAA2C,oBAA3C,EAAiE,iBAAjE,EAAoF,4BAApF,EACV,qBADU,EACa,yBADb,EACwC,qBADxC;AAFN,WAAZ;AAMAnC,UAAAA,QAAQ,CAACiG,uBAAuB,CAACnG,SAAD,EAAY,IAAZ,CAAxB,CAAR;AACH,SARD,MAQO;AACHA,UAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AACMsB,YAAAA,UADN;AAERe,YAAAA,YAAY,EAAE,CAAC,SAAD;AAFN,WAAZ;AAIAnC,UAAAA,QAAQ,CAACkG,eAAe,CAACpG,SAAD,EAAY,IAAZ,CAAhB,CAAR;AACH;AACJ,OA3CD,MA2CO;AACH;AACA,YAAIsB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEb;AACA;AACA;AACAc,UAAAA,cAAc,EAAEuD,YAAY,GAAGA,YAAH,GAAkB3F,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAL/G;AAMbE,UAAAA,gBAAgB,EAAE3C,SAAS,CAAC2C,gBANf;AAObJ,UAAAA,mBAAmB,EAAEqD,iBAAiB,GAAGA,iBAAH,GAAuB5F,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkCE,MAAlC,GAA2C,CAA3C,GAA+C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkC,CAAlC,CAAD,CAA/C,GAAwF;AAPxI,SAAjB;AAUA,YAAI6D,cAAc,GAAG,IAArB;;AACA,YAAIrG,SAAS,CAACsB,UAAV,CAAqBD,cAAzB,EAAyC;AACrC,cAAIiF,iBAAiB,GAAGlH,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiB,mBAAtB,EAA2CvC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA/E,EAA0F,WAA1F,CAAtD;;AACA,cAAI6F,iBAAiB,CAAC5D,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,gBAAIqD,uBAAuB,GAAG1G,0BAA0B,CAACmG,oBAAD,EAAuBxF,SAAS,CAACsB,UAAV,CAAqBkB,YAA5C,EAA0D,wBAA1D,CAAxD;;AACA,gBAAIuD,uBAAuB,CAACrD,MAAxB,KAAmC,CAAvC,EAA0C;AACtC,kBAAI6D,cAAc,GAAGjF,UAAU,CAACkB,YAAX,CAAwBuB,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,CAACgC,sBAAnC,CAArB;AACAR,cAAAA,oBAAoB,CAACgB,OAArB,CAA6B,CAACvC,IAAD,EAAOC,KAAP,KAAiB;AAC1C,oBAAI,CAACqC,cAAc,CAACpC,QAAf,CAAwBF,IAAI,CAAC+B,sBAA7B,CAAL,EAA2D;AACvDR,kBAAAA,oBAAoB,CAACpB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACH;;AACD,uBAAO,IAAP;AACH,eALD;;AAMA,kBAAIsB,oBAAoB,CAAC9C,MAArB,KAAgC,CAAhC,IAAqC6D,cAAc,CAAC7D,MAAf,GAAwB,CAA7D,IACGpB,UAAU,CAACmF,YAAX,CAAwB/D,MAAxB,KAAmC,CAD1C,EAC6C;AACzC,sBAAMgE,kBAAkB,GAAG,CAAC1G,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkC,CAAlC,CAAD,CAA3B;AACAlB,gBAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETiB,kBAAAA,mBAAmB,EAAEmE,kBAFZ;AAGTD,kBAAAA,YAAY,EAAE;AAHL,iBAAb;AAKAzG,gBAAAA,SAAS,GAAG,EAAE,GAAGA,SAAL;AAAgB,qBAAGsB;AAAnB,iBAAZ;AACAtB,gBAAAA,SAAS,CAAC,WAAD,CAAT,GAAyB0G,kBAAkB,CAAC3C,GAAnB,CAAuB4C,CAAC,IAAIA,CAAC,CAAClG,SAA9B,EAAyCyF,IAAzC,CAA8C,GAA9C,CAAzB;AACAlG,gBAAAA,SAAS,CAAC,wBAAD,CAAT,GAAsC0G,kBAAkB,CAAC3C,GAAnB,CAAuB4C,CAAC,IAAIA,CAAC,CAACX,sBAA9B,EAAsDE,IAAtD,CAA2D,GAA3D,CAAtC;AACAlG,gBAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiC,CAAjC;AACAA,gBAAAA,SAAS,CAAC,cAAD,CAAT,GAA4B,CAAC,SAAD,CAA5B;AACAqG,gBAAAA,cAAc,GAAG,KAAjB;AACAnG,gBAAAA,QAAQ,CAACkG,eAAe,CAACpG,SAAD,EAAY,IAAZ,CAAhB,CAAR;AAEH;AACJ,aAzBD,MAyBO;AACHwF,cAAAA,oBAAoB,GAAGO,uBAAvB;AACH;AAEJ,WA/BD,MA+BO;AACH,gBAAIQ,cAAc,GAAGjF,UAAU,CAACkB,YAAX,CAAwBuB,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,CAACgC,sBAAnC,CAArB;AACAR,YAAAA,oBAAoB,CAACgB,OAArB,CAA6B,CAACvC,IAAD,EAAOC,KAAP,KAAiB;AAC1C,kBAAI,CAACqC,cAAc,CAACpC,QAAf,CAAwBF,IAAI,CAAC+B,sBAA7B,CAAL,EAA2D;AACvDR,gBAAAA,oBAAoB,CAACpB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACH;;AACD,qBAAO,IAAP;AACH,aALD;AAMH;;AAED,cAAImC,cAAJ,EAAoB;AAChB/E,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETiB,cAAAA,mBAAmB,EAAEiD;AAFZ,aAAb;AAIH;;AACD,cAAIxF,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkCE,MAAlC,IAA4C1C,SAAS,CAAC0F,aAA1D,EAAyE;AACrEA,YAAAA,aAAa,GAAG,CAAhB;AACArC,YAAAA,QAAQ,GAAG;AAAEqC,cAAAA,aAAF;AAAiBD,cAAAA;AAAjB,aAAX;AACH;AACJ;;AACD,YAAI3B,aAAa,GAAGxC,UAAU,CAACmB,OAAX,CAAmBsB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACnD,oBAA9B,CAApB;AACAsB,QAAAA,eAAe,CAAC4B,GAAhB,CAAoB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACjC,cAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,IAAI,CAACpD,oBAA5B,CAAL,EAAwD;AACpDsB,YAAAA,eAAe,CAACiC,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACH;;AACD,iBAAO,IAAP;AACH,SALD;AAMA,YAAIG,OAAO,GAAG,KAAd;AACA,YAAIxD,oBAAJ;;AACA,YAAIsB,eAAe,CAACO,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B2B,UAAAA,OAAO,GAAG,IAAV;AACA/C,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,YAAAA,cAAc,EAAED;AAFP,WAAb;AAIH,SAND,MAMO;AACHtB,UAAAA,oBAAoB,GAAGb,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAAvD,CADG,CAEH;AACH,SArFE,CAsFH;AACA;;;AACA,cAAMyC,cAAc,GAAGe,OAAO,GAAGrE,SAAS,CAAC,YAAD,CAAT,GAA0BZ,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCtD,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA1E,EAAqF,WAArF,CAAxD,GAA4Jf,iCAAiC,CAACM,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCtD,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC7B,SAA1E,EAAqF,WAArF,CAAhM,GAAoSrB,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAAhW;AAEA,cAAM0C,oBAAoB,GAAGc,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAxB,GAA+CnE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiC,oBAArB,IAA6C,EAA9C,EAC7G1C,oBAD6G,EACvF,sBADuF,CAAjH;AAEA,cAAM2C,kBAAkB,GAAGa,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAxB,GAA6CpE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBkC,kBAArB,IAA2C,EAA5C,EACzG3C,oBADyG,EACnF,sBADmF,CAA7G;AAEA,cAAM4C,eAAe,GAAGY,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBmC,eAAxB,GAA0CrE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBmC,eAArB,IAAwC,EAAzC,EACnG5C,oBADmG,EAC7E,sBAD6E,CAAvG;AAEA,cAAM6C,0BAA0B,GAAGW,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAxB,GAAqDtE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBoC,0BAArB,IAAmD,EAApD,EACzH7C,oBADyH,EACnG,sBADmG,CAA7H;AAEA,cAAM+C,uBAAuB,GAAGS,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAxB,GAAkDxE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBsC,uBAArB,IAAgD,EAAjD,EACnH/C,oBADmH,EAC7F,sBAD6F,CAAvH;AAEA,cAAM8C,mBAAmB,GAAGU,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAxB,GAA8CvE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBqC,mBAArB,IAA4C,EAA7C,EAC3G9C,oBAD2G,EACrF,sBADqF,CAA/G;AAEA,YAAI;AAAEoC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAAyBlD,SAA7B;AACA,YAAI4G,IAAI,GAAG,KAAX;AACA,YAAIvD,QAAQ,GAAG,EAAf;;AACA,YAAIrD,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,IAAuC1C,SAAS,CAACiD,QAArD,EAA+D;AAC3DA,UAAAA,QAAQ,GAAG,CAAX;AACA2D,UAAAA,IAAI,GAAG,IAAP;AACH;;AACD,YAAIA,IAAJ,EAAU;AACNvD,UAAAA,QAAQ,GAAG;AACPJ,YAAAA,QADO;AAEPC,YAAAA;AAFO,WAAX;AAIH;;AACDhD,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,cAAAA,gBAAgB,EAAE3C,SAAS,CAAC2C,gBAFpB;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACAW,cAAAA,cAVQ;AAWRC,cAAAA,oBAXQ;AAYRC,cAAAA,kBAZQ;AAaRC,cAAAA,eAbQ;AAcRC,cAAAA,0BAdQ;AAeRE,cAAAA,uBAfQ;AAgBRD,cAAAA,mBAhBQ,CAiBR;;AAjBQ,aADP;AAoBLqB,YAAAA,OAAO,EAAE,KApBJ;AAqBL6B,YAAAA,UAAU,EAAE,KArBP;AAsBLC,YAAAA,eAAe,EAAE9G,SAAS,CAAC8G,eAtBtB;AAuBL3F,YAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAvBpB;AAwBL,eAAGkC;AAxBE;AAFJ,SAAD,CAAR;AA6BH;AACJ;AACJ,GAxoBD;AAyoBH;AAED,OAAO,SAAS+C,eAAT,CAAyBpG,SAAzB,EAAoCC,iBAApC,EAAuD;AAC1D,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAI0B,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,QAAI1B,cAAc,GAAG;AACjBE,MAAAA,KAAK,EAAE,CADU;AAEjBD,MAAAA,KAAK,EAAE,CAFU;AAGjBE,MAAAA,eAAe,EAAEN,SAAS,CAACM,eAHV;AAIjBC,MAAAA,YAAY,EAAEP,SAAS,CAACO,YAJP;AAKjBC,MAAAA,eAAe,EAAER,SAAS,CAACQ,eALV;AAMjBC,MAAAA,SAAS,EAAET,SAAS,CAACS,SANJ;AAOjBI,MAAAA,oBAAoB,EAAE,CAPL;AAQjBH,MAAAA,UAAU,EAAEV,SAAS,CAACY,kBAAV,CAA6BkF,QAA7B,EARK;AASjBE,MAAAA,sBAAsB,EAAEhG,SAAS,CAACgG,sBATjB;AAUjBlF,MAAAA,QAAQ,EAAEd,SAAS,CAACc,QAVH;AAWjBC,MAAAA,SAAS,EAAEf,SAAS,CAACe,SAXJ;AAYjBI,MAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAZR;AAajBK,MAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BAbrB;AAcjBO,MAAAA,iBAAiB,EAAE/B,SAAS,CAAC+B,iBAdZ;AAejBV,MAAAA,cAAc,EAAErB,SAAS,CAACqB,cAfT;AAgBjBK,MAAAA,YAAY,EAAE1B,SAAS,CAAC0B,YAhBP;AAiBjBC,MAAAA,gBAAgB,EAAC3B,SAAS,CAAC2B;AAjBV,KAArB;AAmBA,UAAMoF,SAAS,GAAG/G,SAAS,CAACqB,cAA5B,CAtBuB,CAuBvB;AACA;;AACA,QAAIpB,iBAAJ,EAAuB;AACnBC,MAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,MAAAA,KAAK,CAACoD,IAAN,CAAW,oDAAX,EAAiE3B,cAAjE,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA,YAAI+E,YAAY,GAAG,EAAE,GAAG/E,QAAQ,CAACC;AAAd,SAAnB;AACA8E,QAAAA,YAAY,GAAGzH,QAAQ,CAACyH,YAAD,EAAe,YAAf,EAA6B,WAA7B,CAAvB;AACA,YAAI7E,eAAe,GAAGnC,SAAS,CAACsB,UAAV,CAAqBc,cAA3C;AACA,YAAIoD,oBAAoB,GAAGxF,SAAS,CAACsB,UAAV,CAAqBiB,mBAArB,IAA4C,EAAvE;AACArD,QAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuBW,QAAQ,CAACC,IAAhC,EAAsClC,SAAS,CAACqC,YAAhD,EAA8DrC,SAAS,CAAC+B,iBAAxE,EAA2F,WAA3F,EAAwG/B,SAAS,CAACsC,sBAAlH,CAAlC;AACA,YAAIhB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEb;AACAc,UAAAA,cAAc,EAAEpC,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAHjF;AAIbE,UAAAA,gBAAgB,EAAE3C,SAAS,CAACsB,UAAV,CAAqBqB,gBAJ1B;AAKbJ,UAAAA,mBAAmB,EAAEvC,SAAS,CAACuC,mBAAV,IAAiCvC,SAAS,CAACsB,UAAV,CAAqBiB;AAL9D,SAAjB;;AAOA,YAAIvC,SAAS,CAACgD,aAAV,KAA4BH,SAA5B,IAAyC7C,SAAS,CAACgD,aAAV,CAAwBF,OAAxB,KAAoC,IAAjF,EAAuF;AACnF9C,UAAAA,SAAS,CAACgD,aAAV,CAAwBF,OAAxB,CAAgCC,KAAhC,GAAwC,EAAxC;AACAzB,UAAAA,UAAU,CAAC,eAAD,CAAV,GAA8BuB,SAA9B;AACH;;AACD,YAAI;AACAI,UAAAA,QADA;AAEAC,UAAAA,QAFA;AAGEC,UAAAA,aAHF;AAGiBC,UAAAA;AAHjB,YAIApD,SAJJ,CAvBc,CA4Bd;AACA;;AACA,YAAIqD,QAAQ,GAAG,EAAf,CA9Bc,CA+Bd;;AACIJ,QAAAA,QAAQ,GAAG,CAAX,CAhCU,CAiCV;AACJ;AACA;;AACIE,QAAAA,aAAa,GAAG,CAAhB,CApCU,CAqCV;AACJ;AACA;;AACIE,QAAAA,QAAQ,GAAG;AACPJ,UAAAA,QADO;AAEPC,UAAAA,QAFO;AAGLC,UAAAA,aAHK;AAGUC,UAAAA;AAHV,SAAX,CAxCU,CA6Cd;;AACA,YAAIE,cAAc,GAAG,EAArB;AACA,YAAIC,oBAAoB,GAAG,EAA3B;AACA,YAAIC,kBAAkB,GAAG,EAAzB;AACA,YAAIC,eAAe,GAAG,EAAtB;AACA,YAAIC,0BAA0B,GAAG,EAAjC;AACA,YAAIC,mBAAmB,GAAG,EAA1B;AACA,YAAIC,uBAAuB,GAAG,EAA9B;AACA,YAAIqD,yBAAyB,GAAG,EAAhC;AACA,YAAIC,4BAA4B,GAAG,EAAnC;;AAEA,YAAIlH,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AACnC;AACA,cAAI+B,aAAa,GAAGxC,UAAU,CAACmB,OAAX,CAAmBsB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACnD,oBAA9B,CAApB;AACAsB,UAAAA,eAAe,CAAC4B,GAAhB,CAAoB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACjC,gBAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,IAAI,CAACpD,oBAA5B,CAAL,EAAwD;AACpDsB,cAAAA,eAAe,CAACiC,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACH;;AACD,mBAAO,IAAP;AACH,WALD;AAMA,cAAIG,OAAO,GAAG,KAAd;AACA,cAAIxD,oBAAJ;;AACA,cAAIsB,eAAe,CAACO,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B2B,YAAAA,OAAO,GAAG,IAAV;AACA/C,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,cAAAA,cAAc,EAAED;AAFP,aAAb;AAIH,WAND,MAMO;AACHtB,YAAAA,oBAAoB,GAAGS,UAAU,CAACc,cAAX,CAA0B,CAA1B,EAA6BvB,oBAApD;AACH;;AACD,kBAAQb,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACImC,cAAAA,cAAc,GAAGe,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBgC,cAAxB,GAAyClE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAA/F;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,iBAAK,gBAAL;AACI0B,cAAAA,oBAAoB,GAAGc,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAxB,GAA+CnE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiC,oBAAtB,EAA4C1C,oBAA5C,EAAkE,sBAAlE,CAA3G;AACAe,cAAAA,UAAU,GAAG,sBAAb;AACAC,cAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,iBAAK,cAAL;AACI2B,cAAAA,kBAAkB,GAAGa,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAxB,GAA6CpE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBkC,kBAAtB,EAA0C3C,oBAA1C,EAAgE,sBAAhE,CAAvG;AACAe,cAAAA,UAAU,GAAG,oBAAb;AACAC,cAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,iBAAK,UAAL;AACI4B,cAAAA,eAAe,GAAGY,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBmC,eAAxB,GAA0CrE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBmC,eAAtB,EAAuC5C,oBAAvC,EAA6D,sBAA7D,CAAjG;AACAe,cAAAA,UAAU,GAAG,iBAAb;AACAC,cAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,iBAAK,qBAAL;AACI6B,cAAAA,0BAA0B,GAAGW,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAxB,GAAqDtE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBoC,0BAAtB,EAAkD7C,oBAAlD,EAAwE,sBAAxE,CAAvH;AACAe,cAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,iBAAK,yBAAL;AACI+B,cAAAA,mBAAmB,GAAGU,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAxB,GAA8CvE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBqC,mBAAtB,EAA2C9C,oBAA3C,EAAiE,sBAAjE,CAAzG;AACAe,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,iBAAK,kBAAL;AACI+B,cAAAA,uBAAuB,GAAGS,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAxB,GAAkDxE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBsC,uBAAtB,EAA+C/C,oBAA/C,EAAqE,sBAArE,CAAjH;AACAe,cAAAA,UAAU,GAAG,yBAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;AACJ;AACA;AACA;AACA;AACA;;AACA;AACIyB,cAAAA,cAAc,GAAGe,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBgC,cAAxB,GAAyClE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAA/F;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;AA5CR;AA+CH,SAnED,MAmEO,IAAI7B,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AAC1C,cAAIuC,IAAI,GAAG,EAAX;AACA,cAAIC,MAAM,GAAG,EAAb;;AACA,kBAAQvE,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACIoD,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBgC,cAAzB,EAAyC,GAAGrB,QAAQ,CAACC,IAAT,CAAcoB,cAA1D,CAAP;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACA;;AACJ,iBAAK,gBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAzB,EAA+C,GAAGtB,QAAQ,CAACC,IAAT,CAAcqB,oBAAhE,CAAP;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACA;;AACJ,iBAAK,cAAL;AACIyD,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAzB,EAA6C,GAAGvB,QAAQ,CAACC,IAAT,CAAcsB,kBAA9D,CAAP;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACA;;AACJ,iBAAK,UAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,IAAiC,EAA1C;AACAa,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBmC,eAAzB,EAA0C,GAAGc,MAA7C,CAAP;AACAD,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACA;;AACJ,iBAAK,qBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,IAA4C,EAArD;AACAY,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAzB,EAAqD,GAAGa,MAAxD,CAAP;AACAb,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACA;;AACJ,iBAAK,yBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,IAAqC,EAA9C;AACAW,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAzB,EAA8C,GAAGY,MAAjD,CAAP;AACAZ,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACA;;AACJ,iBAAK,kBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAc0B,uBAAd,IAAyC,EAAlD;AACAU,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAzB,EAAkD,GAAGW,MAArD,CAAP;AACAX,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAxD;AACA;;AACJ;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBgC,cAAzB,EAAyC,GAAGiB,MAA5C,CAAP;AACAjB,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACA;AAxCR;AA0CH,SA7CM,MA6CA,IAAIb,SAAS,CAAC+B,iBAAV,KAAgC,CAApC,EAAuC;AAC1C,cAAIuC,IAAI,GAAG,EAAX;AACA,cAAIC,MAAM,GAAG,EAAb;AACA,cAAI4C,QAAQ,GAAGxH,eAAe,CAACK,SAAS,CAACsB,UAAV,CAAqBkB,YAAtB,EAAoCwE,YAAY,CAACvE,OAAjD,EAA0D,wBAA1D,CAA9B;AACAnB,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,YAAAA,cAAc,EAAE,CAAC+E,QAAQ,CAAC,CAAD,CAAT,CAFP;AAGT1E,YAAAA,OAAO,EAAE0E,QAHA,CAIT;;AAJS,WAAb;;AAOA,kBAAQnH,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACIoD,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAlB,CAAP;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAO6C,QAAQ,CAACzE,MAAT,GAAkB,CAAlB,GAAsByE,QAAQ,CAAC,CAAD,CAAR,CAAYtG,oBAAlC,GAAyD,EAAhE,EAAoE,sBAApE,CAA/C;AACA;;AACJ,iBAAK,gBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAzB,EAA+C,GAAGtB,QAAQ,CAACC,IAAT,CAAcqB,oBAAhE,CAAP;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACA;;AACJ,iBAAK,cAAL;AACIyD,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAzB,EAA6C,GAAGvB,QAAQ,CAACC,IAAT,CAAcsB,kBAA9D,CAAP;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACA;;AACJ,iBAAK,UAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,IAAiC,EAA1C;AACAa,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBmC,eAAzB,EAA0C,GAAGc,MAA7C,CAAP;AACAD,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACA;;AACJ,iBAAK,qBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,IAA4C,EAArD;AACAY,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAzB,EAAqD,GAAGa,MAAxD,CAAP;AACAb,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACA;;AACJ,iBAAK,yBAAL;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,IAAqC,EAA9C;AACAW,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAzB,EAA8C,GAAGY,MAAjD,CAAP;AACAZ,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACA;AACJ;AACA;AACA;AACA;AACA;;AACA;AACI0D,cAAAA,MAAM,GAAGtC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,IAAgC,EAAzC;AACAgB,cAAAA,IAAI,GAAG,CAAC,GAAGtE,SAAS,CAACsB,UAAV,CAAqBgC,cAAzB,EAAyC,GAAGiB,MAA5C,CAAP;AACAjB,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACA;AAxCR;AA2CH,SAtDM,MAsDA;AACH,cAAIyD,IAAI,GAAG,EAAX;;AACA,kBAAQtE,SAAS,CAACmB,aAAlB;AACI,iBAAK,aAAL;AACImD,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,iBAAK,gBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcqB,oBAAd,GAAqChE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcqB,oBAAf,EAAqC,YAArC,EAAmD,2BAAnD,CAA7C,GAA+H,EAAtI;AACAA,cAAAA,oBAAoB,GAAGnE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAArD;AACAe,cAAAA,UAAU,GAAG,sBAAb;AACAC,cAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,iBAAK,cAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcsB,kBAAd,GAAmCjE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcsB,kBAAf,EAAmC,YAAnC,EAAiD,yBAAjD,CAA3C,GAAyH,EAAhI;AACAA,cAAAA,kBAAkB,GAAGpE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAnD;AACAe,cAAAA,UAAU,GAAG,oBAAb;AACAC,cAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,iBAAK,UAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcuB,eAAd,GAAgClE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcuB,eAAf,EAAgC,YAAhC,EAA8C,qBAA9C,CAAxC,GAA+G,EAAtH;AACAa,cAAAA,IAAI,CAACE,MAAL,CAAY,CAACC,MAAD,EAASC,IAAT,KAAkBD,MAAM,CAACN,QAAP,CAAgBO,IAAhB,IAAwBD,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAA/D,EAAkF,EAAlF;AACAjB,cAAAA,eAAe,GAAGrE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAhD;AACAe,cAAAA,UAAU,GAAG,iBAAb;AACAC,cAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,iBAAK,qBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcwB,0BAAd,GAA2CnE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcwB,0BAAf,EAA2C,YAA3C,EAAyD,qBAAzD,CAAnD,GAAqI,EAA5I;AACAA,cAAAA,0BAA0B,GAAGtE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA3D;AACAe,cAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,iBAAK,yBAAL;AACI0C,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcyB,mBAAd,GAAoCpE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcyB,mBAAf,EAAoC,YAApC,EAAkD,0BAAlD,CAA5C,GAA4H,EAAnI;AACAA,cAAAA,mBAAmB,GAAGvE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAApD;AACAe,cAAAA,UAAU,GAAG,qBAAb;AACAC,cAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,iBAAK,kBAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAc0B,uBAAd,GAAwCrE,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAc0B,uBAAf,EAAwC,YAAxC,EAAsD,kBAAtD,CAAhD,GAA4H,EAAnI;AACAA,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAAxD;AACAe,cAAAA,UAAU,GAAG,yBAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,iBAAK,0BAAL;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAc+E,yBAAd,GAA0C1H,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAc+E,yBAAf,EAA0C,YAA1C,EAAwD,kBAAxD,CAAlD,GAAgI,EAAvI;AACArD,cAAAA,uBAAuB,GAAGxE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkCE,MAAlC,GAA2C,CAA3C,GAA+C1C,SAAS,CAACsB,UAAV,CAAqBkB,YAArB,CAAkC,CAAlC,EAAqCwD,sBAApF,GAA6G,EAApH,EAAwH,wBAAxH,CAAxD;AACApE,cAAAA,UAAU,GAAG,2BAAb;AACAC,cAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ;AACIyC,cAAAA,IAAI,GAAGrC,QAAQ,CAACC,IAAT,CAAcoB,cAAd,GAA+B/D,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+B,WAA/B,EAA4C,wBAA5C,CAAvC,GAA+G,EAAtH;AACAA,cAAAA,cAAc,GAAGlE,8BAA8B,CAACkF,IAAD,EAAOtE,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAA1E,GAAiG,EAAxG,EAA4G,sBAA5G,CAA/C;AACAe,cAAAA,UAAU,GAAG,gBAAb;AACAC,cAAAA,aAAa,GAAG,iBAAhB;AACA;AAtDR;AAwDH;;AACD,YAAIkF,SAAJ,EAAe;AACX,cAAIK,kBAAkB,GAAG9F,UAAU,CAACkB,YAAX,CAAwBuB,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,CAACgC,sBAAnC,CAAzB;AACAR,UAAAA,oBAAoB,CAACzB,GAArB,CAAyB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACtC,gBAAI,CAACkD,kBAAkB,CAACjD,QAAnB,CAA4BF,IAAI,CAAC+B,sBAAjC,CAAL,EAA+D;AAC3DR,cAAAA,oBAAoB,CAACpB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACH;;AACD,mBAAO,IAAP;AACH,WALD;AAMA,cAAIG,OAAO,GAAG,KAAd;AACA,cAAI2B,sBAAJ;;AACA,cAAIR,oBAAoB,CAAC9C,MAArB,GAA8B,CAAlC,EAAqC;AACjC2B,YAAAA,OAAO,GAAG,IAAV;AACH,WAFD,MAEO;AACH2B,YAAAA,sBAAsB,GAAG1E,UAAU,CAAC+F,iBAAX,CAA6B,CAA7B,EAAgCrB,sBAAzD;AACH;;AAED,kBAAQhG,SAAS,CAACsH,kBAAlB;AACI,iBAAK,uBAAL;AACIL,cAAAA,yBAAyB,GAAG5C,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqB2F,yBAAxB,GAAoD7H,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqB2F,yBAAtB,EAAiDjB,sBAAjD,EAAyE,wBAAzE,CAArH;AACApE,cAAAA,UAAU,GAAG,2BAAb;AACAC,cAAAA,aAAa,GAAG,2BAAhB;AACA;;AACJ;AACIqF,cAAAA,4BAA4B,GAAG7C,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqB4F,4BAAxB,GAAuD9H,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqB4F,4BAAtB,EAAoDlB,sBAApD,EAA4E,wBAA5E,CAA3H;AACApE,cAAAA,UAAU,GAAG,8BAAb;AACAC,cAAAA,aAAa,GAAG,8BAAhB;AACA;AAVR;AAYH;;AACDP,QAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET;AACAgC,UAAAA,cAHS;AAIT;AACAC,UAAAA,oBALS;AAMTC,UAAAA,kBANS;AAOT;AACAC,UAAAA,eARS;AAST;AACAC,UAAAA,0BAVS;AAWT;AACAC,UAAAA,mBAZS;AAaT;AACAC,UAAAA,uBAdS;AAeTqD,UAAAA,yBAfS;AAgBTC,UAAAA;AAhBS,SAAb;;AAkBA,YAAIlH,SAAS,CAAC6B,aAAD,CAAT,IAA4BP,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAA1F,EAAgG;AAE5FtB,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,cAAAA,IAAI,EAAE,CAFO;AAGbC,cAAAA,IAAI,EAAE/B,SAHO;AAIbgC,cAAAA,MAAM,EAAEhC;AAJK;AAFV,WAAX;AASH,SAXD,MAWO;AACHQ,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,cAAAA,IAAI,EAAE/B,SAFO;AAGbgC,cAAAA,MAAM,EAAEhC;AAHK;AAFV,WAAX;AAQH;;AAED3C,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UADK;AAEL0D,YAAAA,OAAO,EAAE,KAFJ;AAGL6B,YAAAA,UAAU,EAAE,KAHP;AAIL1F,YAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAJpB;AAKLoG,YAAAA,aAAa,EAAEvH,SAAS,CAACmB,aALpB;AAMLqG,YAAAA,UAAU,EAAExH,SAAS,CAACmB,aANjB;AAOL,eAAGkC,QAPE;AAQLF,YAAAA,aAAa,EAAEN,SARV;AASLO,YAAAA,aAAa,EAAEP;AATV;AAFJ,SAAD,CAAR;AAcH,OA7WL,EA8WKsC,KA9WL,CA8WWC,KAAK,IAAI;AACZqC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBtC,KAAtB;AACAlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OA3XL;AA4XH,KA9XD,MA8XO;AACH;AAEA,UAAIC,eAAe,GAAGnC,SAAS,CAACsB,UAAV,CAAqBc,cAA3C,CAHG,CAIH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIuD,YAAY,GACZ3F,SAAS,CAAC,YAAD,CAAT,GACIZ,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBc,cAAtB,EAAsCpC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC0D,sBAA1E,EAAkG,wBAAlG,CADlC,GAEItG,iCAAiC,CAACM,SAAS,CAACsB,UAAV,CAAqBc,cAAtB,EAAsCpC,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC0D,sBAA1E,EAAkG,wBAAlG,CAHzC;AAIA,UAAIH,uBAAuB,GAAG,KAA9B;;AACA,UAAIF,YAAY,CAACjD,MAAb,GAAsB,CAA1B,EAA6B;AACzBmD,QAAAA,uBAAuB,GAAG,KAA1B;AACH,OAFD,MAEO;AACHA,QAAAA,uBAAuB,GAAG,IAA1B;AACH;;AACD3G,MAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuBtB,SAAS,CAACuC,mBAAjC,EAAsDvC,SAAS,CAACqC,YAAhE,EAA8ErC,SAAS,CAAC+B,iBAAxF,EAA2G,wBAA3G,EAAqI/B,SAAS,CAACsC,sBAA/I,CAAlC;;AACA,UAAIuD,uBAAJ,EAA6B;AACzB,YAAIhF,oBAAoB,GAAGb,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,EAAgC5B,oBAAhC,CAAqDiF,QAArD,EAA1C,GAA4G,EAAvI;AACA,YAAIvD,mBAAmB,GAAGvC,SAAS,CAACuC,mBAApC;AACA,YAAIH,cAAc,GAAGpC,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAAnG,CAHyB,CAIzB;;AAEAzC,QAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAERqC,UAAAA,YAAY,EAAE,CAAC,gBAAD,EAAmB,sBAAnB,EAA2C,oBAA3C,EAAiE,iBAAjE,EAAoF,4BAApF,EACV,qBADU,EACa,yBADb,EACwC,qBADxC,CAFN;AAKRxB,UAAAA,oBALQ;AAMR8B,UAAAA,gBAAgB,EAAE3C,SAAS,CAACsB,UAAV,CAAqBqB,gBAN/B;AAORP,UAAAA,cAPQ;AAQRG,UAAAA,mBARQ;AASRR,UAAAA,iBAAiB,EAAE,CATX;AAURZ,UAAAA,aAAa,EAAEnB,SAAS,CAACmB;AAVjB,SAAZ;AAYAjB,QAAAA,QAAQ,CAACiG,uBAAuB,CAACnG,SAAD,EAAY,IAAZ,CAAxB,CAAR;AACH,OAnBD,MAmBO;AACH;AACA,YAAIsB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEbc,UAAAA,cAAc,EAAEpC,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,GAAsC,CAAtC,GAA0C,CAAC1C,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6B,CAA7B,CAAD,CAA1C,GAA8E,EAFjF;AAGbF,UAAAA,mBAAmB,EAAEvC,SAAS,CAACuC;AAHlB,SAAjB;AAKA,YAAIuB,aAAa,GAAGxC,UAAU,CAACmB,OAAX,CAAmBsB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACnD,oBAA9B,CAApB;AACAsB,QAAAA,eAAe,CAAC4B,GAAhB,CAAoB,CAACE,IAAD,EAAOC,KAAP,KAAiB;AACjC,cAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,IAAI,CAACpD,oBAA5B,CAAL,EAAwD;AACpDsB,YAAAA,eAAe,CAACiC,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACH;;AACD,iBAAO,IAAP;AACH,SALD;AAMA,YAAIG,OAAO,GAAG,KAAd;AACA,YAAIxD,oBAAJ;;AACA,YAAIsB,eAAe,CAACO,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B2B,UAAAA,OAAO,GAAG,IAAV;AACA/C,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETc,YAAAA,cAAc,EAAED;AAFP,WAAb;AAIH,SAND,MAMO;AACHtB,UAAAA,oBAAoB,GAAGS,UAAU,CAACmB,OAAX,CAAmB,CAAnB,EAAsB5B,oBAA7C;AACH,SAxBE,CAyBH;AACA;;;AACA,cAAMyC,cAAc,GAAGe,OAAO,GAC1BrE,SAAS,CAAC,YAAD,CAAT,GACIZ,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCtD,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC0D,sBAA1E,EAAkG,wBAAlG,CADlC,GAEItG,iCAAiC,CAACM,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCtD,SAAS,CAACsC,sBAAV,CAAiC,CAAjC,EAAoC0D,sBAA1E,EAAkG,wBAAlG,CAHX,GAGyI5G,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBgC,cAAtB,EAAsCzC,oBAAtC,EAA4D,sBAA5D,CAHrM;AAKA,cAAM0C,oBAAoB,GAAGc,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBiC,oBAAxB,GAA+CnE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBiC,oBAArB,IAA6C,EAA9C,EAC7G1C,oBAD6G,EACvF,sBADuF,CAAjH;AAEA,cAAM2C,kBAAkB,GAAGa,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBkC,kBAAxB,GAA6CpE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBkC,kBAArB,IAA2C,EAA5C,EACzG3C,oBADyG,EACnF,sBADmF,CAA7G;AAEA,cAAM4C,eAAe,GAAGY,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBmC,eAAxB,GAA0CrE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBmC,eAArB,IAAwC,EAAzC,EACnG5C,oBADmG,EAC7E,sBAD6E,CAAvG;AAEA,cAAM6C,0BAA0B,GAAGW,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBoC,0BAAxB,GAAqDtE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBoC,0BAArB,IAAmD,EAApD,EACzH7C,oBADyH,EACnG,sBADmG,CAA7H;AAEA,cAAM+C,uBAAuB,GAAGS,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBsC,uBAAxB,GAAkDxE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBsC,uBAArB,IAAgD,EAAjD,EACnH/C,oBADmH,EAC7F,sBAD6F,CAAvH;AAEA,cAAM8C,mBAAmB,GAAGU,OAAO,GAAGrE,SAAS,CAACsB,UAAV,CAAqBqC,mBAAxB,GAA8CvE,8BAA8B,CAACY,SAAS,CAACsB,UAAV,CAAqBqC,mBAArB,IAA4C,EAA7C,EAC3G9C,oBAD2G,EACrF,sBADqF,CAA/G;AAEA,YAAI;AAAEoC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAAyBlD,SAA7B;AACA,YAAI4G,IAAI,GAAG,KAAX;AACA,YAAIvD,QAAQ,GAAG,EAAf;;AACA,YAAIrD,SAAS,CAACsB,UAAV,CAAqBmB,OAArB,CAA6BC,MAA7B,IAAuC1C,SAAS,CAACiD,QAArD,EAA+D;AAC3DA,UAAAA,QAAQ,GAAG,CAAX;AACA2D,UAAAA,IAAI,GAAG,IAAP;AACH;;AACD,YAAIA,IAAJ,EAAU;AACNvD,UAAAA,QAAQ,GAAG;AACPJ,YAAAA,QADO;AAEPC,YAAAA;AAFO,WAAX;AAIH;;AACDhD,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERiB,cAAAA,mBAAmB,EAAEvC,SAAS,CAACuC,mBAFvB;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACAe,cAAAA,cAVQ;AAWRC,cAAAA,oBAXQ;AAYRC,cAAAA,kBAZQ;AAaRC,cAAAA,eAbQ;AAcRC,cAAAA,0BAdQ;AAeRE,cAAAA,uBAfQ;AAgBRD,cAAAA;AAhBQ,aADP;AAmBLqB,YAAAA,OAAO,EAAE,KAnBJ;AAoBL6B,YAAAA,UAAU,EAAE,KApBP;AAqBLC,YAAAA,eAAe,EAAE9G,SAAS,CAAC8G,eArBtB;AAsBL3F,YAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAtBpB;AAuBLoG,YAAAA,aAAa,EAAEvH,SAAS,CAACmB,aAvBpB;AAwBL,eAAGkC;AAxBE;AAFJ,SAAD,CAAR;AA6BH;AACJ;AACJ,GAzhBD;AA0hBH;AAKD,OAAO,SAASsE,yBAAT,CAAmC3H,SAAnC,EAA8C;AACjD,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBU,MAAAA,oBAAoB,EAAEb,SAAS,CAACa,oBADf;AAEjBJ,MAAAA,SAAS,EAAET,SAAS,CAACS,SAFJ;AAGjBK,MAAAA,QAAQ,EAAEd,SAAS,CAACc;AAHH,KAArB;AAKA,QAAI8G,GAAG,GAAG,EAAV;;AACA,YAAQ5H,SAAS,CAACoB,eAAlB;AACI,WAAK,eAAL;AACIwG,QAAAA,GAAG,GAAG,gCAAN;AACA;;AACJ,WAAK,uBAAL;AACIA,QAAAA,GAAG,GAAG,gCAAN;AACA;;AACJ,WAAK,qBAAL;AACIA,QAAAA,GAAG,GAAG,8CAAN;AACA;;AACJ,WAAK,oBAAL;AACIA,QAAAA,GAAG,GAAG,2BAAN;AACA;;AACJ;AACIA,QAAAA,GAAG,GAAG,gCAAN;AACA;AAfR;;AAiBA1H,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW8F,GAAX,EAAgBzH,cAAhB,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI+E,YAAY,GAAG,EACf,GAAG/E,QAAQ,CAACC;AADG,OAAnB,CADc,CAId;;AACAhD,MAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuB0F,YAAvB,EAAqChH,SAAS,CAACqC,YAA/C,EAA6DrC,SAAS,CAAC+B,iBAAvE,EAA0F,WAA1F,EAAuG/B,SAAS,CAACsC,sBAAjH,CAAlC;AAEApC,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGRS,YAAAA,gBAAgB,EAAE3C,SAAS,CAAC2C;AAHpB,WADP;AAMLqC,UAAAA,OAAO,EAAE,KANJ;AAOL6B,UAAAA,UAAU,EAAE,KAPP;AAQLzF,UAAAA,eAAe,EAAEpB,SAAS,CAACoB,eARtB;AASLoG,UAAAA,UAAU,EAAExH,SAAS,CAACwH;AATjB;AAFJ,OAAD,CAAR;AAcH,KAtBL,EAuBKrC,KAvBL,CAuBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAnCL;AAoCH,GA7DD;AA8DH;AAED,OAAO,SAASiE,uBAAT,CAAiCnG,SAAjC,EAA4CC,iBAA5C,EAA+D;AAClE,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBU,MAAAA,oBAAoB,EAAEb,SAAS,CAACoC,cAAV,CAAyB2B,GAAzB,CAA6BE,IAAI,IAAIA,IAAI,CAACpD,oBAA1C,EAAgEqF,IAAhE,CAAqE,GAArE,CADL;AAEjBzF,MAAAA,SAAS,EAAET,SAAS,CAACS,SAFJ;AAGjBK,MAAAA,QAAQ,EAAEd,SAAS,CAACc;AAHH,KAArB;AAKA,QAAIc,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB,CAPuB,CAQvB;AACA;;AACA,QAAI+F,GAAG,GAAG,2CAAV;;AACA,YAAQ5H,SAAS,CAACmB,aAAlB;AACI,WAAK,aAAL;AACIyG,QAAAA,GAAG,GAAG,2CAAN;AACAhG,QAAAA,UAAU,GAAG,gBAAb;AACAC,QAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,WAAK,gBAAL;AACI+F,QAAAA,GAAG,GAAG,6CAAN;AACAhG,QAAAA,UAAU,GAAG,sBAAb;AACAC,QAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,WAAK,cAAL;AACI+F,QAAAA,GAAG,GAAG,2CAAN;AACAhG,QAAAA,UAAU,GAAG,oBAAb;AACAC,QAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,WAAK,UAAL;AACI+F,QAAAA,GAAG,GAAG,uCAAN;AACAhG,QAAAA,UAAU,GAAG,iBAAb;AACAC,QAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,WAAK,qBAAL;AACI+F,QAAAA,GAAG,GAAG,8BAAN;AACAhG,QAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,WAAK,kBAAL;AACIgG,QAAAA,GAAG,GAAG,yBAAN;AACAhG,QAAAA,UAAU,GAAG,yBAAb;AACAC,QAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,WAAK,eAAL;AACI+F,QAAAA,GAAG,GAAG,gCAAN;AACAhG,QAAAA,UAAU,GAAG,EAAb;AACAC,QAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,WAAK,yBAAL;AACI+F,QAAAA,GAAG,GAAG,4CAAN;AACAhG,QAAAA,UAAU,GAAG,qBAAb;AACAC,QAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,WAAK,uBAAL;AACI+F,QAAAA,GAAG,GAAG,gCAAN;AACAhG,QAAAA,UAAU,GAAG,EAAb;AACAC,QAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ;AACI+F,QAAAA,GAAG,GAAG,2CAAN;AACAhG,QAAAA,UAAU,GAAG,gBAAb;AACAC,QAAAA,aAAa,GAAG,iBAAhB;AACA;AAjDR;;AAmDA3B,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;;AACA,QAAIoB,iBAAJ,EAAuB;AACnBvB,MAAAA,KAAK,CAACoD,IAAN,CAAW8F,GAAX,EAAgBzH,cAAhB,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,YAAI+E,YAAY,GAAG,EACf,GAAG/E,QAAQ,CAACC,IADG;AAEfS,UAAAA,gBAAgB,EAAE3C,SAAS,CAAC2C,gBAAV,IAA8B3C,SAAS,CAACsB,UAAV,CAAqBqB,gBAFtD;AAGfP,UAAAA,cAAc,EAAEpC,SAAS,CAACoC,cAHX;AAIf8C,UAAAA,cAAc,EAAElF,SAAS,CAACkF,cAJX;AAKf2C,UAAAA,WAAW,EAAE7H,SAAS,CAAC6H;AALR,SAAnB;AAOA,YAAIxE,QAAQ,GAAG,EAAf;AACAnE,QAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuB0F,YAAvB,EAAqChH,SAAS,CAACqC,YAA/C,EAA6DrC,SAAS,CAAC+B,iBAAvE,EAA0F,WAA1F,EAAuG/B,SAAS,CAACsC,sBAAjH,CAAlC;AACA,YAAIhB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEb,aAAG0F,YAFU;AAGb5E,UAAAA,cAAc,EAAEpC,SAAS,CAACoC;AAHb,SAAjB;;AAKA,YAAIpC,SAAS,CAAC6B,aAAD,CAAT,IAA4BP,UAAU,CAACM,UAAD,CAAtC,IAAsDN,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAApH,EAA0H;AAEtHtB,UAAAA,QAAQ,GAAG;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,cAAAA,IAAI,EAAE,CAFO;AAGbC,cAAAA,IAAI,EAAE/B,SAHO;AAIbgC,cAAAA,MAAM,EAAEhC;AAJK;AAFV,WAAX;AASH,SAXD,MAWO;AACHQ,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,cAAAA,IAAI,EAAE/B,SAFO;AAGbgC,cAAAA,MAAM,EAAEhC;AAHK;AAFV,WAAX;AAQH;;AACD3C,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UADK;AAEL4D,YAAAA,cAAc,EAAElF,SAAS,CAACkF,cAFrB;AAGL2C,YAAAA,WAAW,EAAE7H,SAAS,CAAC6H,WAHlB;AAILN,YAAAA,aAAa,EAAEvH,SAAS,CAACmB,aAJpB;AAKL6D,YAAAA,OAAO,EAAE,KALJ;AAML7D,YAAAA,aAAa,EAAEnB,SAAS,CAACmB,aANpB;AAOLqG,YAAAA,UAAU,EAAExH,SAAS,CAACmB,aAPjB;AAQL8B,YAAAA,QAAQ,EAAEJ,SARL;AASLK,YAAAA,QAAQ,EAAEL,SATL;AAUL,eAAGQ;AAVE;AAFJ,SAAD,CAAR;AAeH,OApDL,EAqDK8B,KArDL,CAqDWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OAjEL;AAkEH,KAnED,MAmEO;AACH;AACAhD,MAAAA,kCAAkC,CAACc,SAAS,CAACsB,UAAX,EAAuBtB,SAAS,CAACoC,cAAjC,EAAiDpC,SAAS,CAACqC,YAA3D,EAAyErC,SAAS,CAAC+B,iBAAnF,EAAsG,sBAAtG,EAA8H/B,SAAS,CAACsC,sBAAxI,CAAlC;AACA,UAAIe,QAAQ,GAAG,EAAf;AACA,UAAI/B,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEbc,QAAAA,cAAc,EAAEpC,SAAS,CAACoC;AAFb,OAAjB;;AAIA,UAAId,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAA1C,IAA6D7B,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAA1F,EAAgG;AAE5FtB,QAAAA,QAAQ,GAAG;AAEP,WAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,YAAAA,IAAI,EAAE,CAFO;AAGbC,YAAAA,IAAI,EAAE/B,SAHO;AAIbgC,YAAAA,MAAM,EAAEhC;AAJK;AAFV,SAAX;AASH,OAXD,MAWO;AACHQ,QAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,WAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,YAAAA,IAAI,EAAE/B,SAFO;AAGbgC,YAAAA,MAAM,EAAEhC;AAHK;AAFV,SAAX;AAQH;;AACD3C,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UADK;AAEL0D,UAAAA,OAAO,EAAE,KAFJ;AAGL6B,UAAAA,UAAU,EAAE,KAHP;AAIL1F,UAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAJpB;AAKLqG,UAAAA,UAAU,EAAExH,SAAS,CAACwH,UALjB;AAML,aAAGnE;AANE;AAFJ,OAAD,CAAR;AAWH;AACJ,GA3KD;AA4KH;AAED,OAAO,SAASyE,qBAAT,CAA+B9H,SAA/B,EAA0C;AAC7C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,yCAAX,EAAsD9B,SAAtD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAERyG,YAAAA,iBAAiB,EAAE/H,SAAS,CAAC+H,iBAFrB;AAGR,eAAG9F,QAAQ,CAACC,IAHJ;AAIR8F,YAAAA,yBAAyB,EAAChI,SAAS,CAACgI,yBAJ5B;AAKRC,YAAAA,wBAAwB,EAACjI,SAAS,CAACiI,wBAL3B;AAMRC,YAAAA,6BAA6B,EAAClI,SAAS,CAACkI,6BANhC;AAORC,YAAAA,6BAA6B,EAACnI,SAAS,CAACmI,6BAPhC;AAQRC,YAAAA,oBAAoB,EAACpI,SAAS,CAACoI,oBARvB;AASRC,YAAAA,2BAA2B,EAACrI,SAAS,CAACqI,2BAT9B;AAURC,YAAAA,wBAAwB,EAACtI,SAAS,CAACsI,wBAV3B;AAWRC,YAAAA,kBAAkB,EAACvI,SAAS,CAACuI;AAXrB,WADP;AAcLvD,UAAAA,OAAO,EAAE;AAdJ;AAFJ,OAAD,CAAR;AAmBH,KArBL,EAsBKG,KAtBL,CAsBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAlCL;AAmCH,GArCD;AAsCH;AAED,OAAO,SAASsG,wBAAT,CAAkCxI,SAAlC,EAA6C;AAChD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,4CAAX,EAAyD9B,SAAzD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGR;AACAuG,YAAAA,uBAAuB,EAAEzI,SAAS,CAACyI,uBAJ3B;AAKRT,YAAAA,yBAAyB,EAAChI,SAAS,CAACgI,yBAL5B;AAMRC,YAAAA,wBAAwB,EAACjI,SAAS,CAACiI,wBAN3B;AAORC,YAAAA,6BAA6B,EAAClI,SAAS,CAACkI,6BAPhC;AAQRC,YAAAA,6BAA6B,EAACnI,SAAS,CAACmI,6BARhC;AASRC,YAAAA,oBAAoB,EAACpI,SAAS,CAACoI,oBATvB;AAURC,YAAAA,2BAA2B,EAACrI,SAAS,CAACqI,2BAV9B;AAWRC,YAAAA,wBAAwB,EAACtI,SAAS,CAACsI,wBAX3B;AAYRC,YAAAA,kBAAkB,EAACvI,SAAS,CAACuI;AAZrB,WADP;AAeLvD,UAAAA,OAAO,EAAE;AAfJ;AAFJ,OAAD,CAAR;AAoBH,KAtBL,EAuBKG,KAvBL,CAuBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAnCL;AAoCH,GAtCD;AAuCH;AAED,OAAO,SAASwG,0BAAT,CAAoC1I,SAApC,EAA+C;AAClD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,8CAAX,EAA2D9B,SAA3D,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd,UAAIZ,cAAc,GAAGrB,SAAS,CAAC2I,0BAAV,IAAwC3I,SAAS,CAAC2I,0BAAV,CAAqCtH,cAAlG;AACAnB,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAERD,YAAAA,cAFQ;AAGR,eAAGY,QAAQ,CAACC,IAHJ;AAIRyG,YAAAA,0BAA0B,EAAE3I,SAAS,CAAC2I,0BAJ9B;AAKR;AACA;AACAX,YAAAA,yBAAyB,EAAChI,SAAS,CAACgI,yBAP5B;AAQRC,YAAAA,wBAAwB,EAACjI,SAAS,CAACiI,wBAR3B;AASRC,YAAAA,6BAA6B,EAAClI,SAAS,CAACkI,6BAThC;AAURC,YAAAA,6BAA6B,EAACnI,SAAS,CAACmI,6BAVhC;AAWRC,YAAAA,oBAAoB,EAACpI,SAAS,CAACoI,oBAXvB;AAYRE,YAAAA,wBAAwB,EAACtI,SAAS,CAACsI,wBAZ3B;AAaRC,YAAAA,kBAAkB,EAACvI,SAAS,CAACuI;AAbrB,WADP;AAgBLvD,UAAAA,OAAO,EAAE;AAhBJ;AAFJ,OAAD,CAAR;AAqBH,KAxBL,EAyBKG,KAzBL,CAyBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KArCL;AAsCH,GAxCD;AAyCH;AAED,OAAO,SAAS0G,iBAAT,CAA2B5I,SAA3B,EAAsC;AACzC,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,qCAAX,EAAkD9B,SAAlD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGR2G,YAAAA,gBAAgB,EAAE7I,SAAS,CAAC6I,gBAHpB,CAIR;AACA;;AALQ,WADP;AAQL7D,UAAAA,OAAO,EAAE;AARJ;AAFJ,OAAD,CAAR;AAaH,KAfL,EAgBKG,KAhBL,CAgBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AAGD,OAAO,SAAS4G,cAAT,CAAwB9I,SAAxB,EAAmC;AACtC,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,8DAAX,EAA2E9B,SAA3E,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGR6G,YAAAA,4BAA4B,EAAE/I,SAAS,CAAC+I,4BAHhC,CAIR;AACA;;AALQ,WADP;AAQL/D,UAAAA,OAAO,EAAE;AARJ;AAFJ,OAAD,CAAR;AAaH,KAfL,EAgBKG,KAhBL,CAgBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AAED,OAAO,SAAS8G,qBAAT,CAA+B7I,cAA/B,EAA+C;AAClD,MAAImB,UAAU,GAAG,EAAE,GAAGnB,cAAc,CAACmB;AAApB,GAAjB;AACA,SAAO,UAAUpB,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,2CAAX,EAAwD,EAAE,GAAG3B,cAAc,CAACH,SAApB;AAA+BqB,MAAAA,cAAc,EAAE;AACvGlB,MAAAA,cAAc,CAACmB,UAAf,CAA0BC,mBAA1B,CAA8CF;AADU,KAAxD,EAGKW,IAHL,CAGUC,QAAQ,IAAI;AACd;AACA,UAAI9B,cAAc,CAAC8I,IAAf,CAAoBC,eAApB,KAAwCrG,SAAxC,IAAqD1C,cAAc,CAAC8I,IAAf,CAAoBC,eAApB,CAAoCpG,OAApC,KAAgD,IAAzG,EAA+G;AAC3G3C,QAAAA,cAAc,CAAC8I,IAAf,CAAoBC,eAApB,CAAoCpG,OAApC,CAA4CC,KAA5C,GAAoD,EAApD;AACAzB,QAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+BuB,SAA/B;AACH;;AACD,UAAI1C,cAAc,CAAC8I,IAAf,CAAoBrG,kBAApB,KAA2CC,SAA3C,IAAwD1C,cAAc,CAAC8I,IAAf,CAAoBrG,kBAApB,CAAuCE,OAAvC,KAAmD,IAA/G,EAAqH;AACjH3C,QAAAA,cAAc,CAAC8I,IAAf,CAAoBrG,kBAApB,CAAuCE,OAAvC,CAA+CC,KAA/C,GAAuD,EAAvD;AACAzB,QAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkCuB,SAAlC;AACH;;AACD,UAAI1C,cAAc,CAAC8I,IAAf,CAAoBjG,aAApB,KAAsCH,SAAtC,IAAmD1C,cAAc,CAAC8I,IAAf,CAAoBjG,aAApB,CAAkCF,OAAlC,KAA8C,IAArG,EAA2G;AACvG3C,QAAAA,cAAc,CAAC8I,IAAf,CAAoBjG,aAApB,CAAkCF,OAAlC,CAA0CC,KAA1C,GAAkD,EAAlD,CADuG,CAEvG;;AACAzB,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BuB,SAA7B;AACH,OAda,CAed;;;AACAtD,MAAAA,QAAQ,CAAC0C,QAAQ,CAACC,IAAV,EAAgB,WAAhB,EAA6B,wBAA7B,CAAR;;AACA,UAAGD,QAAQ,CAACC,IAAT,CAAciH,GAAd,IAAqB,8BAAxB,EACA;AACAvK,QAAAA,KAAK,CAACwK,OAAN,CAActK,IAAI,CAACuK,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB,CAAd;AACC;;AACDpJ,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGRqH,YAAAA,YAAY,EAAEtH,QAAQ,CAACC,IAAT,CAAc,UAAd,CAHN;AAIRsH,YAAAA,UAAU,EAAEvH,QAAQ,CAACC,IAAT,CAAc,QAAd;AAJJ,WADP;AAOL8C,UAAAA,OAAO,EAAE,KAPJ;AAQLyE,UAAAA,QAAQ,EAAEtJ,cAAc,CAACH,SAAf,CAAyByJ,QAR9B;AASLC,UAAAA,UAAU,EAAEvJ,cAAc,CAACH,SAAf,CAAyB0J,UAThC;AAULvI,UAAAA,aAAa,EAAEhB,cAAc,CAACH,SAAf,CAAyBmB,aAVnC;AAWLwD,UAAAA,IAAI,EAAE,CAXD;AAYLM,UAAAA,IAAI,EAAE9E,cAAc,CAACH,SAAf,CAAyBiF,IAZ1B;AAaLhC,UAAAA,QAAQ,EAAE,CAbL;AAcLC,UAAAA,QAAQ,EAAE/C,cAAc,CAACH,SAAf,CAAyBkD,QAd9B;AAeLyG,UAAAA,eAAe,EAAE,EAAE,GAAGxJ,cAAc,CAACwJ,eAApB;AAAqC/E,YAAAA,IAAI,EAAE/B,SAA3C;AAAsDgC,YAAAA,MAAM,EAAEhC;AAA9D,WAfZ;AAgBL+G,UAAAA,mBAAmB,EAAE,EAAE,GAAGzJ,cAAc,CAACyJ,mBAApB;AAAyChF,YAAAA,IAAI,EAAE/B,SAA/C;AAA0DgC,YAAAA,MAAM,EAAEhC;AAAlE,WAhBhB;AAiBLgH,UAAAA,iBAAiB,EAAE,EAAE,GAAG1J,cAAc,CAAC0J,iBAApB;AAAuCjF,YAAAA,IAAI,EAAE/B,SAA7C;AAAwDgC,YAAAA,MAAM,EAAEhC;AAAhE,WAjBd;AAkBLiH,UAAAA,aAAa,EAAE,EAAE,GAAG3J,cAAc,CAAC2J,aAApB;AAAmClF,YAAAA,IAAI,EAAE/B,SAAzC;AAAoDgC,YAAAA,MAAM,EAAEhC;AAA5D,WAlBV;AAmBLkH,UAAAA,iBAAiB,EAAE,EAAE,GAAG5J,cAAc,CAAC4J,iBAApB;AAAuCnF,YAAAA,IAAI,EAAE/B,SAA7C;AAAwDgC,YAAAA,MAAM,EAAEhC;AAAhE,WAnBd;AAoBLmH,UAAAA,qBAAqB,EAAE,EAAE,GAAG7J,cAAc,CAAC6J,qBAApB;AAA2CpF,YAAAA,IAAI,EAAE/B,SAAjD;AAA4DgC,YAAAA,MAAM,EAAEhC;AAApE,WApBlB;AAqBLoH,UAAAA,oBAAoB,EAAE,EAAE,GAAG9J,cAAc,CAAC8J,oBAApB;AAA0CrF,YAAAA,IAAI,EAAE/B,SAAhD;AAA2DgC,YAAAA,MAAM,EAAEhC;AAAnE,WArBjB;AAsBLqH,UAAAA,gBAAgB,EAAE,EAAE,GAAG/J,cAAc,CAAC+J,gBAApB;AAAsCtF,YAAAA,IAAI,EAAE/B,SAA5C;AAAuDgC,YAAAA,MAAM,EAAEhC;AAA/D,WAtBb;AAuBLsH,UAAAA,2BAA2B,EAAE,EAAE,GAAGhK,cAAc,CAACgK,2BAApB;AAAiDvF,YAAAA,IAAI,EAAE/B,SAAvD;AAAkEgC,YAAAA,MAAM,EAAEhC;AAA1E,WAvBxB;AAwBLuH,UAAAA,sBAAsB,EAAE,EAAE,GAAGjK,cAAc,CAACiK,sBAApB;AAA4CxF,YAAAA,IAAI,EAAE/B,SAAlD;AAA6DgC,YAAAA,MAAM,EAAEhC;AAArE;AAxBnB;AAFJ,OAAD,CAAR;AA6BH,KArDL,EAsDKsC,KAtDL,CAsDWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO,IAAGF,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA7B,EAAkC;AACrCzG,QAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAACC,UAAAA,EAAE,EAAClE,KAAK,CAACnD,QAAN,CAAeC,IAAf,CAAoBiH;AAAxB,SAAnB,CAAX;AACAjJ,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE,KADJ;AAEL1D,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAER,iBAAG8D,KAAK,CAACnD,QAAN,CAAeC,IAFV;AAGRqH,cAAAA,YAAY,EAAEnE,KAAK,CAACnD,QAAN,CAAeC,IAAf,CAAoB,UAApB,CAHN;AAIRsH,cAAAA,UAAU,EAAEpE,KAAK,CAACnD,QAAN,CAAeC,IAAf,CAAoB,QAApB;AAJJ;AAFP;AAFJ,SAAD,CAAR;AAYH,OAdM,MAeH;AACAtD,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAjFL;AAkFH,GApFD;AAqFH;AAED,OAAO,SAASmI,eAAT,CAAyBrK,SAAzB,EAAoCsK,QAApC,EAA8CC,YAA9C,EAA4DtH,QAA5D,EAAsEC,QAAtE,EAAgF;AACnF,SAAO,UAAUhD,QAAV,EAAoB;AACvB,QAAIsK,cAAc,GAAC,EAAnB;AACA,QAAIC,QAAQ,GAAGzK,SAAS,CAAC0K,YAAV,GAAyB,CAAC,GAAG1K,SAAS,CAAC0K,YAAd,CAAzB,GAAuD,CAAC,GAAG1K,SAAS,CAACyC,OAAd,CAAtE;AACAgI,IAAAA,QAAQ,GAAGA,QAAQ,CAACrG,MAAT,CAAgBnB,QAAhB,EAA0BA,QAAQ,GAAGC,QAArC,CAAX;AACA,QAAIyH,cAAc,GAAGtL,0BAA0B,CAACoL,QAAD,EAAWzK,SAAS,CAACoC,cAArB,EAAqC,sBAArC,CAA/C;;AACA,QAAIuI,cAAc,IAAIA,cAAc,CAACjI,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,UAAIkI,MAAM,CAACC,MAAP,CAAc7K,SAAd,EAAyB0C,MAAzB,GAAkC,CAAlC,IAAuC1C,SAAS,CAACoC,cAAV,CAAyBM,MAAzB,GAAkC,CAA7E,EAAgF;AAC5E,YAAIvC,cAAc,GAAG;AACjBU,UAAAA,oBAAoB,EAAE8J,cAAc,GAAGA,cAAc,CAAC5G,GAAf,CAAmBE,IAAI,IAAIA,IAAI,CAACpD,oBAAhC,EAAsDqF,IAAtD,CAA2D,GAA3D,CAAH,GAAqE,EADxF;AAEjBpF,UAAAA,QAAQ,EAAEwJ;AAFO,SAArB;AAIApK,QAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,QAAAA,KAAK,CAACoD,IAAN,CAAW,2CAAX,EAAwD3B,cAAxD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,cAAI6I,mBAAmB,GAAG,EAA1B;AACA,cAAIC,kBAAkB,GAAG,EAAzB;AACA,gBAAMC,gBAAgB,GAAG/I,QAAQ,CAACC,IAAT,CAAc+I,eAAvC;AACA,cAAIC,iBAAiB,GAAG,KAAxB;AACAF,UAAAA,gBAAgB,CAACjH,GAAjB,CAAqB,CAACoH,KAAD,EAAQjH,KAAR,KAAkB;AACnC4G,YAAAA,mBAAmB,CAAC5G,KAAD,CAAnB,GAA6B;AAAEkH,cAAAA,UAAU,EAAED,KAAK,CAACC;AAApB,aAA7B;AACAL,YAAAA,kBAAkB,CAAC7G,KAAD,CAAlB,GAA4BiH,KAAK,CAACE,sBAAlC;AACA,gBAAIC,QAAQ,GAACC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACG,QAAN,CAAe,OAAf,CAAX,CAAb;;AACA,gBAAGA,QAAQ,CAACG,cAAT,CAAwB,gBAAxB,CAAH,EAA6C;AACzCjB,cAAAA,cAAc,CAACW,KAAK,CAACE,sBAAP,CAAd,GAA6CC,QAAQ,CAAC,gBAAD,CAArD;AACH;;AACDJ,YAAAA,iBAAiB,GAAG,KAApB;AACCjJ,YAAAA,QAAQ,CAACC,IAAT,CAAcwJ,gBAAd,IAAkCzJ,QAAQ,CAACC,IAAT,CAAcwJ,gBAAd,CAA+BV,gBAAgB,CAAC9G,KAAD,CAAhB,CAAwBmH,sBAAvD,CAAnC,IACIpJ,QAAQ,CAACC,IAAT,CAAcwJ,gBAAd,CAA+BV,gBAAgB,CAAC9G,KAAD,CAAhB,CAAwBmH,sBAAvD,EAA+EtH,GAA/E,CAAmF4H,eAAe,IAAI;AAClG;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACM,kBAAI,CAACT,iBAAL,EAAwB;AACpBA,gBAAAA,iBAAiB,GAAG,IAApB;AACAjJ,gBAAAA,QAAQ,CAACC,IAAT,CAAcwJ,gBAAd,CAA+BV,gBAAgB,CAAC9G,KAAD,CAAhB,CAAwBmH,sBAAvD,IAAiFpM,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwJ,gBAAd,CAA+BV,gBAAgB,CAAC9G,KAAD,CAAhB,CAAwBmH,sBAAvD,KAAkF,EAAnF,EAAuF,uBAAvF,EAAgH,uBAAhH,EAAyIxI,SAAzI,EAChGA,SADgG,EACrFA,SADqF,CAAnB,CACvD+I,GADuD,CACnD,YADmD,CAAjF;AAEH,eA3B6F,CA6BrG;AACG;;AAEH,aAhCD,CADJ;AAkCIT,YAAAA,KAAK,CAAC,UAAD,CAAL,GAAoB,KAApB,CA1C+B,CA2CnC;AACA;AACA;AACH,WA9CD;AAiDAjL,UAAAA,QAAQ,CAAC;AACL4E,YAAAA,IAAI,EAAEnG,cADD;AAELoG,YAAAA,OAAO,EAAE;AACLzD,cAAAA,UAAU,EAAE,EACR,GAAGtB,SADK;AAER;AACA,mBAAGiC,QAAQ,CAACC,IAHJ;AAIR6I,gBAAAA,kBAJQ,CAIU;AAClB;;AALQ,eADP;AASLc,cAAAA,cAAc,EAAE;AACZrB,gBAAAA,cAAc,EAACA,cAAc,CAAC9H,MAAf,GAAsB,CAAtB,GAAwB8H,cAAxB,GAAuC,EAD1C;AAEZM,gBAAAA,mBAAmB,EAAEA,mBAFT;AAGZG,gBAAAA,eAAe,EAAEhJ,QAAQ,CAACC,IAAT,CAAc+I;AAHnB,eATX;AAeHD,cAAAA,gBAAgB,EAAC/I,QAAQ,CAACC,IAAT,CAAc+I,eAf5B;AAgBHa,cAAAA,wBAAwB,EAAC,IAhBtB;AAiBL9G,cAAAA,OAAO,EAAE,KAjBJ;AAkBLwC,cAAAA,UAAU,EAAE,iBAlBP;AAmBLuE,cAAAA,SAAS,EAAE,IAnBN;AAoBLC,cAAAA,SAAS,EAAE,QApBN;AAqBL7K,cAAAA,aAAa,EAAE,aArBV;AAsBLoJ,cAAAA,YAAY,EAAEA;AAtBT;AAFJ,WAAD,CAAR;AA2BH,SAlFL,EAmFKpF,KAnFL,CAmFWC,KAAK,IAAI;AACZlF,UAAAA,QAAQ,CAAC;AACL4E,YAAAA,IAAI,EAAEnG,cADD;AAELoG,YAAAA,OAAO,EAAE;AACLC,cAAAA,OAAO,EAAE;AADJ;AAFJ,WAAD,CAAR;;AAMA,cAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,YAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAEO;AACH1G,YAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,SA/FL,EAN4E,CAsG5E;AACH,OAvGD,MAuGO;AACHhC,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;AAMApG,QAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE;AADsB,SAAnB,CAAX;AAGH;AACJ,KAnHD,MAmHO;AACHpJ,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMApG,MAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GAnID;AAqIH;AAED,OAAO,SAAS2C,YAAT,CAAsBC,UAAtB,EAAkCC,UAAlC,EAA8C7B,QAA9C,EAAwD8B,gBAAxD,EAAyEC,WAAzE,EAAqFlB,KAArF,EAA4F;AAC/F,MAAIgB,UAAU,KAAKtJ,SAAf,IAA4BsJ,UAAU,CAACzJ,MAAX,GAAoB,CAApD,EAAuD;AACnD,WAAO,UAAUxC,QAAV,EAAoB;AACvB,UAAIF,SAAS,GAAGkM,UAAU,CAACI,mBAA3B;AACA,UAAInM,cAAc,GAAG;AACjBC,QAAAA,KAAK,EAAE,CADU;AAEjBC,QAAAA,KAAK,EAAE,CAFU;AAGjBkM,QAAAA,gBAAgB,EAACpB,KAAK,CAACoB,gBAHN;AAIjBjM,QAAAA,eAAe,EAAEN,SAAS,CAACM,eAJV;AAKjBC,QAAAA,YAAY,EAAEP,SAAS,CAACO,YALP;AAMjBC,QAAAA,eAAe,EAAER,SAAS,CAACQ,eANV;AAOjBC,QAAAA,SAAS,EAAET,SAAS,CAACS,SAPJ;AAQjBC,QAAAA,UAAU,EAAEC,MAAM,CAACX,SAAS,CAACY,kBAAX,CARD;AASjBI,QAAAA,oBAAoB,EAAEhB,SAAS,CAACgB,oBATf;AAUjBwL,QAAAA,mBAAmB,EAAExM,SAAS,CAACwM,mBAVd;AAWjBxG,QAAAA,sBAAsB,EAAEhG,SAAS,CAACgG,sBAXjB;AAYjBlF,QAAAA,QAAQ,EAAEwJ,QAZO;AAajBrJ,QAAAA,QAAQ,EAAEjB,SAAS,CAACiB,QAbH;AAcjBC,QAAAA,MAAM,EAAElB,SAAS,CAACkB,MAdD;AAejBH,QAAAA,SAAS,EAAEf,SAAS,CAACe,SAfJ;AAgBjB0L,QAAAA,mBAAmB,EAAEN,UAAU,GAAGA,UAAU,CAACpI,GAAX,CAAeE,IAAI,IAAIA,IAAI,CAACpD,oBAA5B,EAAkDqF,IAAlD,CAAuD,GAAvD,CAAH,GAAiE,EAhB/E;AAiBjBrF,QAAAA,oBAAoB,EAAE,CAjBL;AAkBjBM,QAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAlBR;AAmBjBoJ,QAAAA,YAAY,EAAE2B,UAAU,CAAClM,SAAX,CAAqBuK,YAnBlB;AAoBjBlJ,QAAAA,cAAc,EAAErB,SAAS,CAACsB,UAAV,CAAqBD,cApBpB;AAqBjBG,QAAAA,0BAA0B,EAAExB,SAAS,CAACsB,UAAV,CAAqBE;AArBhC,OAArB;AAuBA,UAAII,UAAU,GAAG,EAAjB;AACA,UAAIC,aAAa,GAAG,EAApB,CA1BuB,CA2BvB;AACA;AACA;;AACA,cAAQ7B,SAAS,CAACmB,aAAlB;AACI,aAAK,aAAL;AACIS,UAAAA,UAAU,GAAG,gBAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,aAAK,gBAAL;AACID,UAAAA,UAAU,GAAG,sBAAb;AACAC,UAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,aAAK,cAAL;AACID,UAAAA,UAAU,GAAG,oBAAb;AACAC,UAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,aAAK,UAAL;AACID,UAAAA,UAAU,GAAG,iBAAb;AACAC,UAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,aAAK,qBAAL;AACID,UAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,aAAK,kBAAL;AACIA,UAAAA,UAAU,GAAG,yBAAb;AACAC,UAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,aAAK,eAAL;AACID,UAAAA,UAAU,GAAG,EAAb;AACAC,UAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,aAAK,yBAAL;AACID,UAAAA,UAAU,GAAG,qBAAb;AACAC,UAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,aAAK,uBAAL;AACID,UAAAA,UAAU,GAAG,EAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ;AACID,UAAAA,UAAU,GAAG,gBAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;AAvCR;;AAyCA3B,MAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,MAAAA,KAAK,CAACoD,IAAN,CAAW,kCAAX,EAA+C3B,cAA/C,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,YAAIyK,SAAS,GAAG,EAAhB;AACA,YAAIlK,YAAY,GAAG,EAAnB;AACA,YAAIC,OAAO,GAAG,EAAd;AACA,YAAIkK,iBAAiB,GAAC,KAAtB;AACA,YAAI3F,YAAY,GAAIzH,QAAQ,CAAC0C,QAAQ,CAACC,IAAV,EAAgB,WAAhB,EAA6B,wBAA7B,CAA5B,CALc,CAKoE;AAClF;;AACA,YAAGlC,SAAS,CAACsB,UAAV,CAAqB,cAArB,KAAsC0F,YAAY,CAAC,SAAD,CAArD,EAAiE;AAC7DhH,UAAAA,SAAS,CAACsB,UAAV,CAAqB,cAArB,IAAsCjC,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,cAArB,CAAD,EAAsC0F,YAAY,CAAC,SAAD,CAAlD,EAA8D,sBAA9D,CAAhE;AACA;;AAGJ,YAAIA,YAAY,CAAC,SAAD,CAAZ,CAAwBtE,MAAxB,GAAiC,CAArC,EAAwC;AACnC;AACD,cAAI1C,SAAS,CAACsB,UAAV,CAAqBC,mBAArB,CAAyCF,cAA7C,CAA2D;AAA3D,YAEIoB,OAAO,GAAGtD,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAkC0F,YAAY,CAAC,SAAD,CAA9C,EAA2D,wBAA3D,CAAtC,CAFJ,KAIIvE,OAAO,GAAGtD,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAkC0F,YAAY,CAAC,SAAD,CAA9C,EAA2D,WAA3D,CAAtC;AACP,SAPD,MAOO;AACHvE,UAAAA,OAAO,GAAGzC,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAV;AACH;;AAEDkB,QAAAA,YAAY,GAAGrD,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,cAArB,CAAD,EAAuCmB,OAAvC,EAAgD,wBAAhD,CAA3C;;AACA,YAAID,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AACzBgK,UAAAA,SAAS,GAAGrN,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,WAArB,CAAD,EAAqC0F,YAAY,CAAC,WAAD,CAAjD,EAAgE,WAAhE,CAAtC,CADyB,CAEzB;AACC;;AACD,cAAI4F,mBAAmB,GAAE5M,SAAS,CAACsB,UAAV,CAAqB,kBAArB,CAAzB;AACA,cAAIuL,cAAc,GAACrK,YAAY,CAACuB,GAAb,CAAiB4C,CAAC,IAAEA,CAAC,CAAClG,SAAtB,CAAnB;AACA,cAAIqM,oBAAoB,GAACF,mBAAmB,CAAC7I,GAApB,CAAwB4C,CAAC,IAAEA,CAAC,CAAClG,SAA7B,CAAzB;AACAmM,UAAAA,mBAAmB,GAACA,mBAAmB,CAAC/H,MAApB,CAA2BH,IAAI,IAAImI,cAAc,CAAC1I,QAAf,CAAwBO,IAAI,CAACjE,SAA7B,CAAnC,EAA4EsD,GAA5E,CAAgF4C,CAAC,IAAEA,CAAC,CAAClG,SAArF,CAApB;AACA,cAAIsM,gBAAgB,GAAGD,oBAAoB,CAACjI,MAArB,CAA4B,UAAU8B,CAAV,EAAa;AAC5D,mBAAO,CAACiG,mBAAmB,CAACI,IAApB,CAAyB,UAAUC,CAAV,EAAa;AAC5C,qBAAOtG,CAAC,KAAMsG,CAAd;AACD,aAFO,CAAR;AAGD,WAJoB,CAAvB;AAKAP,UAAAA,SAAS,GAAEA,SAAS,CAAC7H,MAAV,CAAiBH,IAAI,IAAI,CAACqI,gBAAgB,CAAC5I,QAAjB,CAA0BO,IAAI,CAACjE,SAA/B,CAA1B,CAAX,CAbyB,CAczB;AACH,SAfD,MAeO;AACHiM,UAAAA,SAAS,GAAGrN,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,WAArB,CAAD,EAAqC0F,YAAY,CAAC,WAAD,CAAjD,EAAgE,WAAhE,CAAtC;AAEA0F,UAAAA,SAAS,GAAGvN,4BAA4B,CAACuN,SAAD,EAAYjK,OAAZ,EAAqB,WAArB,CAAxC;AACH,SA3Ca,CA4ChB;AACA;;;AACA,cAAME,gBAAgB,GAAGH,YAAY,CAACE,MAAb,GAAsB,CAAtB,GAA0B1C,SAAS,CAACsB,UAAV,CAAqB,kBAArB,CAA1B,GAAsEoL,SAA/F;AAIA,YAAIQ,qBAAJ;AACA,YAAIC,iBAAiB,GAAGtK,SAAxB;AACA,YAAIN,mBAAmB,GAAC,EAAxB;AACA,YAAI6K,aAAa,GAAE/N,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAiC0F,YAAY,CAAC,SAAD,CAA7C,EAAyD,sBAAzD,CAA7C;;AACC,YAAGhH,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAH,EAA6C;AACzC6L,UAAAA,iBAAiB,GAAEnN,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAnB;AACA4L,UAAAA,qBAAqB,GAACC,iBAAiB,CAACH,IAAlB,CAAuBK,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAA7B,CAAtB;AAEA,cAAIC,uBAAuB,GAACvN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,EAA4CyC,GAA5C,CAAgD4C,CAAC,IAAEA,CAAC,CAACX,sBAArD,CAA5B;AACAmH,UAAAA,iBAAiB,GAAEnN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,EAA4CuD,MAA5C,CAAmDwI,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAAzD,CAAnB;AACA,cAAIE,uBAAuB,GAACL,iBAAiB,CAACpJ,GAAlB,CAAsB4C,CAAC,IAAEA,CAAC,CAACX,sBAA3B,CAA5B;AACA,cAAIyH,kBAAkB,GAAGF,uBAAuB,CAAC1I,MAAxB,CAA+B,UAAU8B,CAAV,EAAa;AAClE,mBAAO,CAAC6G,uBAAuB,CAACR,IAAxB,CAA6B,UAAUC,CAAV,EAAa;AAChD,qBAAOtG,CAAC,KAAMsG,CAAd;AACD,aAFO,CAAR;AAGD,WAJuB,CAAzB;AAKCjN,UAAAA,SAAS,CAACsB,UAAV,CAAqB,mBAArB,IAA0CtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0CuD,MAA1C,CAAiDH,IAAI,IAAI,CAAC+I,kBAAkB,CAACtJ,QAAnB,CAA4BO,IAAI,CAACsB,sBAAjC,CAA1D,CAA1C;AACH,SAbF,MAaM;AACHkH,UAAAA,qBAAqB,GAAC1K,YAAY,CAACwK,IAAb,CAAkBK,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAAxB,CAAtB;AACD;;AAEH,YAAGtN,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAH,CAA4C;AAA5C,UACC;AACGiB,UAAAA,mBAAmB,GAAG2K,qBAAqB,GAAElN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,CAAF,GAC3CtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0C,CAA1C,IAA8C,CAACtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0C,CAA1C,CAAD,CAA9C,GAA6F,EAD7F;AAEH,SAJD,MAIK;AACDiB,UAAAA,mBAAmB,GAAG2K,qBAAqB,GAAElN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,CAAF,GAAiDkB,YAA5F;AACH,SA7Ee,CA8EhB;;;AACE,YAAIkL,eAAe,GAAGvO,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAAD,EAAyC6K,UAAzC,EAAqD,sBAArD,CAAlD;AACA,YAAIwB,eAAe,GAAGnO,2BAA2B,CAACkO,eAAD,EAAkB1G,YAAY,CAAC5E,cAA/B,CAAjD;AAEA,YAAIwL,cAAc,GAAG/K,SAArB;;AACA,YAAI7C,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAAJ,EAA4C;AACxCoL,UAAAA,SAAS,GAAGrN,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAAD,EAA0C0F,YAAY,CAAC,WAAD,CAAtD,EAAqE,WAArE,CAAtC;AAEA4G,UAAAA,cAAc,GAAGzO,4BAA4B,CAACuN,SAAD,CAAU;AAAV,YAE5CjK,OAF4C,EAEnC,WAFmC,CAA7C;AAGH;;AAED,YAAInB,UAAU,GAAG,EACb,GAAGtB,SAAS,CAACsB,UADA;AAEb,aAAG0F,YAFU;AAGb0F,UAAAA,SAHa;AAIblK,UAAAA,YAJa;AAKbD,UAAAA,mBALa;AAMbqL,UAAAA,cANa;AAObjL,UAAAA,gBAPa;AAQ9BP,UAAAA,cAAc,EAAEuL,eARc;AASZvL,UAAAA,cAAc,EAAEH,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,KACdb,MAAM,CAACiD,IAAP,CAAY5L,QAAQ,CAACC,IAAT,CAAc,uBAAd,CAAZ,EAAoDQ,MAApD,KAA+D,CADjD,IAEdT,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,KACFb,MAAM,CAACiD,IAAP,CAAY5L,QAAQ,CAACC,IAAT,CAAc,uBAAd,CAAZ,EAAoDQ,MAApD,KAA+D,CAH/C,GAIhB1C,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAJgB,GAIuB;AACvCtB,UAAAA,SAAS,CAACsB,UAAV,CAAqB,cAArB,KACAtB,SAAS,CAACsB,UAAV,CAAqB,cAArB,EAAqCoB,MAArC,GAA4C,CAD5C,GAC8C,CAAC1C,SAAS,CAACsB,UAAV,CAAqB,cAArB,EAAqC,CAArC,CAAD,CAD9C,GAEA0F,YAAY,CAAC5E,cAhBD;AAmBb;AACA;AACAK,UAAAA,OAAO,EAAEuE,YAAY,CAAC,SAAD;AArBR,SAAjB;AAwBA,YAAI3D,QAAQ,GAAG,EAAf,CAnHc,CAoHd;;AACA,YAAI/B,UAAU,CAACkB,YAAX,IAA2BlB,UAAU,CAACkB,YAAX,CAAwBE,MAAxB,IAAkC,CAA7D,IAAkEpB,UAAU,CAACmB,OAA7E,IAAwFnB,UAAU,CAACmB,OAAX,CAAmBC,MAAnB,IAA6B,CAAzH,EAA2H;AACvHW,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPsB,YAAAA,IAAI,EAAE,CAFC;AAGPM,YAAAA,IAAI,EAAEiH,UAAU,CAACjH;AAHV,WAAX;AAKH,SA3Ha,CA4Hd;;;AACA,YAAI3D,UAAU,CAACkB,YAAX,IAA2BlB,UAAU,CAACkB,YAAX,CAAwBE,MAAxB,IAAkCwJ,UAAU,CAAC9I,aAA5E,EAA0F;AACtFC,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPF,YAAAA,aAAa,EAAE,CAFR;AAGPC,YAAAA,aAAa,EAAE8I,UAAU,CAAC9I;AAHnB,WAAX;AAKH;;AACD,YAAI9B,UAAU,CAACmB,OAAX,IAAsBnB,UAAU,CAACmB,OAAX,CAAmBC,MAAnB,IAA6BwJ,UAAU,CAACjJ,QAAlE,EAA4E;AACxEI,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPJ,YAAAA,QAAQ,EAAE,CAFH;AAGPC,YAAAA,QAAQ,EAAEgJ,UAAU,CAAChJ;AAHd,WAAX;AAKH;;AACD,YAAIlD,SAAS,CAAC6B,aAAD,CAAT,IAA4BP,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAA1F,EAAgG;AAE5FtB,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,cAAAA,IAAI,EAAE,CAFO;AAGbC,cAAAA,IAAI,EAAE/B,SAHO;AAIbgC,cAAAA,MAAM,EAAEhC;AAJK;AAFV,WAAX;AASH,SAXD,MAWO;AACHQ,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,cAAAA,IAAI,EAAE/B,SAFO;AAGbgC,cAAAA,MAAM,EAAEhC;AAHK;AAFV,WAAX;AAQH;;AACD,YAAIiL,UAAU,GAAG;AACbC,UAAAA,qBAAqB,EAAE9L,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,EAAqD;AAArD,YACtBxJ,QAAQ,CAACC,IAAT,CAAc6L,qBADQ,GACc,EAFxB;AAGbC,UAAAA,qBAAqB,EAAC/L,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,EAAqD;AAArD,YACrBxJ,QAAQ,CAACC,IAAT,CAAc8L,qBADO,GACe,EAJxB;AAKbC,UAAAA,aAAa,EAAChM,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,KAAuDb,MAAM,CAACiD,IAAP,CAAY5L,QAAQ,CAACC,IAAT,CAAc,uBAAd,CAAZ,EAAoDQ,MAApD,KAA+D,CAAtH,IACZT,QAAQ,CAACC,IAAT,CAAcuJ,cAAd,CAA6B,uBAA7B,KAAuDb,MAAM,CAACiD,IAAP,CAAY5L,QAAQ,CAACC,IAAT,CAAc,uBAAd,CAAZ,EAAoDQ,MAApD,KAA+D,CAD1G,CAC2G;AAC1H;AAFe,YAGb,IAHa,GAGR,KARO;AASbwL,UAAAA,sBAAsB,EAAC,KATV;AAUbC,UAAAA,kBAAkB,EAAC,KAVN;AAWb,aAAGhO,cAAc,CAACH,SAXL;AAYb+L,UAAAA,SAAS,EAAE,KAZE;AAabqC,UAAAA,SAAS,EAAE,KAbE;AAcbC,UAAAA,gBAAgB,EAAE,KAdL;AAeb;AACArJ,UAAAA,OAAO,EAAE,KAhBI;AAiBbwC,UAAAA,UAAU,EAAExH,SAAS,CAACmB,aAjBT;AAkBb,aAAGkC;AAlBU,SAAjB;;AAoBA,YAAIuK,cAAc,CAAC;AAAD,WACXA,cAAc,CAAClL,MAAf,GAAwB,CAD/B,EACkC;AAC9B,gBAAM4L,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAlB;AACA,gBAAMC,cAAc,GAAG,EACnB,GAAGF,SAAS,CAACG,gBAAV,CAA2BA,gBADX;AAEnBC,YAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFD;AAGnB,aAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAACiN,cAAc,CAAC,CAAD,CAAd,CAAkBU,SAAS,CAACK,eAA5B,CAAD,CAHhB;AAInBvO,YAAAA,KAAK,EAAE,CAJY;AAKnBC,YAAAA,KAAK,EAAE;AALY,WAAvB;AAOAyN,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,cAAAA,gBAAgB,EAAE,CAACiL,cAAc,CAAC,CAAD,CAAf;AAFV;AAFH,WAAb;AAOA1N,UAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,YAAAA,iBAAiB,EAAE;AAAxC,WAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH,SAlBD,MAkBO,IAAI,CAACF,cAAD,IAAmBjL,gBAAgB,CAACD,MAAjB,KAA4B,CAA/C,IAAoDgK,SAAS,CAAChK,MAAV,GAAmB,CAA3E,EAA8E;AACjF,gBAAM4L,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAlB;AACA,gBAAMC,cAAc,GAAG,EACnB,GAAGF,SAAS,CAACG,gBAAV,CAA2BA,gBADX;AAEnBC,YAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFD;AAGnB,aAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAAC+L,SAAS,CAAC,CAAD,CAAT,CAAa4B,SAAS,CAACK,eAAvB,CAAD,CAHhB;AAInBvO,YAAAA,KAAK,EAAE,CAJY;AAKnBC,YAAAA,KAAK,EAAE;AALY,WAAvB;AAOAyN,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,cAAAA,gBAAgB,EAAE,CAAC+J,SAAS,CAAC,CAAD,CAAV;AAFV;AAFH,WAAb;AAOAxM,UAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,YAAAA,iBAAiB,EAAE;AAAxC,WAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH,SAjBM,MAiBD,IAAI,CAACF,cAAD,IAAmBlB,SAAS,CAAChK,MAAV,GAAmB,CAA1C,EAA6C;AAC/C,cAAI8L,cAAJ;;AACA,cAAG7L,gBAAgB,CAACD,MAAjB,KAA4B,CAA5B,IAAiCF,YAAY,CAACE,MAAb,IAAuB,CAA3D,EACA;AACIiK,YAAAA,iBAAiB,GAAC,IAAlB;AACA,gBAAI2B,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAhB;AACAC,YAAAA,cAAc,GAAG,EACb,GAAGF,SAAS,CAACG,gBAAV,CAA2BA,gBADjB;AAEbC,cAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFP;AAGb,eAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAAC+L,SAAS,CAAC,CAAD,CAAT,CAAa4B,SAAS,CAACK,eAAvB,CAAD,CAHtB;AAIbvO,cAAAA,KAAK,EAAE,CAJM;AAKbC,cAAAA,KAAK,EAAE;AALM,aAAjB;AAQAyN,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,gBAAAA,gBAAgB,EAAE,CAAC+J,SAAS,CAAC,CAAD,CAAV;AAFV;AAFH,aAAb;AAOAxM,YAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,cAAAA,iBAAiB,EAAE;AAAxC,aAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH;;AAED,cAAGZ,qBAAqB,KAAG,KAAxB,GAA+BA,qBAAqB,KAAG,KAAxB,IAA+BP,iBAAiB,KAAG,KAAnD,IAA0DpK,mBAAmB,CAACG,MAApB,KAA+B,CAAxH,CACC;AADD,YAGDH,mBAAmB,CAACG,MAApB,KAA+B,CAA/B,IAAoCF,YAAY,CAACE,MAAb,GAAsB,CAH5D,EAIA;AACI,gBAAI4L,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAhB;AACAC,YAAAA,cAAc,GAAG,EACb,GAAGF,SAAS,CAACG,gBADA;AAEbC,cAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFP;AAGb,eAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAAC6B,YAAY,CAAC,CAAD,CAAZ,CAAgB8L,SAAS,CAACK,eAA1B,CAAD,CAHtB;AAIbvO,cAAAA,KAAK,EAAE,CAJM;AAKbC,cAAAA,KAAK,EAAE;AALM,aAAjB;AAQAyN,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERiB,gBAAAA,mBAAmB,EAAE,CAACC,YAAY,CAAC,CAAD,CAAb;AAFb;AAFH,aAAb;AAOAtC,YAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,cAAAA,iBAAiB,EAAE;AAAxC,aAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH,WAtBD,MAuBK;AACDA,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA;AAFS,aAAb;AAIApB,YAAAA,QAAQ,CAAC;AACL4E,cAAAA,IAAI,EAAEnG,cADD;AAELoG,cAAAA,OAAO,EAAE,EACL,GAAG+I,UADE;AAEL9I,gBAAAA,OAAO,EAAE;AAFJ;AAFJ,aAAD,CAAR;AAOH;AAGJ,SA9DK,MA+DD;AACD8I,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,YAAAA;AAFS,WAAb;AAIApB,UAAAA,QAAQ,CAAC;AACL4E,YAAAA,IAAI,EAAEnG,cADD;AAELoG,YAAAA,OAAO,EAAE,EACL,GAAG+I,UADE;AAEL9I,cAAAA,OAAO,EAAE;AAFJ;AAFJ,WAAD,CAAR;AAOH;AACJ,OApSL,EAqSKG,KArSL,CAqSWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACC1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACP;AACJ,OAjTL;AAkTH,KA1XD;AA2XH,GA5XD,MA4XO;AACHtD,IAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,MAAAA,EAAE,EAAE;AADsB,KAAnB,CAAX;AAGH;AAEJ;AAOD,OAAO,SAASuF,SAAT,CAAmB3C,UAAnB,EAA+BC,UAA/B,EAA2C7B,QAA3C,EAAqD8B,gBAArD,EAAuE;AAC1E,MAAID,UAAU,KAAKtJ,SAAf,IAA4BsJ,UAAU,CAACzJ,MAAX,GAAoB,CAApD,EAAuD;AACnD,WAAO,UAAUxC,QAAV,EAAoB;AACvB,UAAIF,SAAS,GAAGkM,UAAU,CAACI,mBAA3B;AACA,UAAInM,cAAc,GAAG;AACjBC,QAAAA,KAAK,EAAE,CADU;AAEjBC,QAAAA,KAAK,EAAE,CAFU;AAGjBC,QAAAA,eAAe,EAAEN,SAAS,CAACM,eAHV;AAIjBC,QAAAA,YAAY,EAAEP,SAAS,CAACO,YAJP;AAKjBC,QAAAA,eAAe,EAAER,SAAS,CAACQ,eALV;AAMjBC,QAAAA,SAAS,EAAET,SAAS,CAACS,SANJ;AAOjBC,QAAAA,UAAU,EAAEC,MAAM,CAACX,SAAS,CAACY,kBAAX,CAPD;AAQjBI,QAAAA,oBAAoB,EAAEhB,SAAS,CAACgB,oBARf;AASjBwL,QAAAA,mBAAmB,EAAExM,SAAS,CAACwM,mBATd;AAUjBxG,QAAAA,sBAAsB,EAAEhG,SAAS,CAACgG,sBAVjB;AAWjBlF,QAAAA,QAAQ,EAAEwJ,QAXO;AAYjBrJ,QAAAA,QAAQ,EAAEjB,SAAS,CAACiB,QAZH;AAajBC,QAAAA,MAAM,EAAElB,SAAS,CAACkB,MAbD;AAcjBH,QAAAA,SAAS,EAAEf,SAAS,CAACe,SAdJ;AAejB0L,QAAAA,mBAAmB,EAAEN,UAAU,GAAGA,UAAU,CAACpI,GAAX,CAAeE,IAAI,IAAIA,IAAI,CAACpD,oBAA5B,EAAkDqF,IAAlD,CAAuD,GAAvD,CAAH,GAAiE,EAf/E;AAgBjB;AACArF,QAAAA,oBAAoB,EAAE,CAjBL;AAkBjBM,QAAAA,aAAa,EAAEnB,SAAS,CAACmB,aAlBR;AAmBjBoJ,QAAAA,YAAY,EAAE2B,UAAU,CAAClM,SAAX,CAAqBuK,YAnBlB;AAoBjB/I,QAAAA,0BAA0B,EAAExB,SAAS,CAACsB,UAAV,CAAqBE,0BApBhC;AAqBjBH,QAAAA,cAAc,EAAG6K,UAAU,CAAClM,SAAX,CAAqB8O;AArBrB,OAArB;AAuBA,UAAIlN,UAAU,GAAG,EAAjB;AACA,UAAIC,aAAa,GAAG,EAApB,CA1BuB,CA2BvB;AACA;AACA;;AACA,cAAQ7B,SAAS,CAACmB,aAAlB;AACI,aAAK,aAAL;AACIS,UAAAA,UAAU,GAAG,gBAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ,aAAK,gBAAL;AACID,UAAAA,UAAU,GAAG,sBAAb;AACAC,UAAAA,aAAa,GAAG,qBAAhB;AACA;;AACJ,aAAK,cAAL;AACID,UAAAA,UAAU,GAAG,oBAAb;AACAC,UAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,aAAK,UAAL;AACID,UAAAA,UAAU,GAAG,iBAAb;AACAC,UAAAA,aAAa,GAAG,eAAhB;AACA;;AACJ,aAAK,qBAAL;AACID,UAAAA,UAAU,GAAG,4BAAb;AACA;;AACJ,aAAK,kBAAL;AACIA,UAAAA,UAAU,GAAG,yBAAb;AACAC,UAAAA,aAAa,GAAG,sBAAhB;AACA;;AACJ,aAAK,eAAL;AACID,UAAAA,UAAU,GAAG,EAAb;AACAC,UAAAA,aAAa,GAAG,mBAAhB;AACA;;AACJ,aAAK,yBAAL;AACID,UAAAA,UAAU,GAAG,qBAAb;AACAC,UAAAA,aAAa,GAAG,uBAAhB;AACA;;AACJ,aAAK,uBAAL;AACID,UAAAA,UAAU,GAAG,EAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;;AACJ;AACID,UAAAA,UAAU,GAAG,gBAAb;AACAC,UAAAA,aAAa,GAAG,iBAAhB;AACA;AAvCR;;AAyCA3B,MAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,MAAAA,KAAK,CAACoD,IAAN,CAAW,mCAAX,EAAgD3B,cAAhD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,YAAIyK,SAAS,GAAG,EAAhB;AACA,YAAIlK,YAAY,GAAG,EAAnB;AACA,YAAIC,OAAO,GAAG,EAAd;AACA,YAAIkK,iBAAiB,GAAC,KAAtB;AACA,YAAItK,YAAY,GAAG,CAAC,gBAAD,EAAmB,sBAAnB,EAA2C,iBAA3C,EAA8D,4BAA9D,EACX,qBADW,EACY,yBADZ,EACuC,qBADvC,CAAnB,CALc,CAOd;;AACA,YAAI2E,YAAY,GAAKzH,QAAQ,CAAC0C,QAAQ,CAACC,IAAV,EAAgB,WAAhB,EAA6B,wBAA7B,CAA7B;AACAhD,QAAAA,kCAAkC,CAAC8H,YAAD,EAAehH,SAAS,CAACsB,UAAzB,EAAqCe,YAArC,EAAmD,CAAnD,EAAsD,wBAAtD,EAAgF,EAAhF,CAAlC;AACA2E,QAAAA,YAAY,CAAC,gBAAD,CAAZ,GAAiC3H,0BAA0B,CAAC2H,YAAY,CAACvE,OAAd,EAAsByJ,UAAU,CAAC9J,cAAjC,EAAgD,sBAAhD,CAA3D;;AACA,YAAGpC,SAAS,CAACsB,UAAV,CAAqB,cAArB,KAAsC0F,YAAY,CAAC,SAAD,CAArD,EAAiE;AAC7DhH,UAAAA,SAAS,CAACsB,UAAV,CAAqB,cAArB,IAAsCjC,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,cAArB,CAAD,EAAsC0F,YAAY,CAAC,SAAD,CAAlD,EAA8D,sBAA9D,CAAhE;AACA;;AACJ,YAAIA,YAAY,CAAC,SAAD,CAAZ,CAAwBtE,MAAxB,GAAiC,CAArC,EAAwC;AACpC,cAAI1C,SAAS,CAACsB,UAAV,CAAqBC,mBAArB,CAAyCF,cAA7C,EAA4D;AAC5D;AACG;AAECoB,cAAAA,OAAO,GAAGpD,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAiC0F,YAAY,CAAC,SAAD,CAA7C,EAAyD,sBAAzD,CAApC;AACH,aALD,MAOIvE,OAAO,GAAGtD,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAkC0F,YAAY,CAAC,SAAD,CAA9C,EAA2D,WAA3D,CAAtC;AACP,SATD,MASO;AACHvE,UAAAA,OAAO,GAAGzC,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAV;AACH;;AACDkB,QAAAA,YAAY,GAAGrD,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,cAArB,CAAD,EAAuCnC,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAkC0F,YAAY,CAAC,SAAD,CAA9C,EAA2D,wBAA3D,CAAnE,EAAyJ,wBAAzJ,CAA3C;;AACA,YAAIxE,YAAY,CAACE,MAAb,GAAsB,CAA1B,EAA6B;AAC7B;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAgK,UAAAA,SAAS,GAAC1M,SAAS,CAACsB,UAAV,CAAqB,WAArB,CAAV;AACA,cAAIsL,mBAAmB,GAAE5M,SAAS,CAACsB,UAAV,CAAqB,kBAArB,CAAzB;AACA,cAAIuL,cAAc,GAACrK,YAAY,CAACuB,GAAb,CAAiB4C,CAAC,IAAEA,CAAC,CAAClG,SAAtB,CAAnB;AACA,cAAIqM,oBAAoB,GAACF,mBAAmB,CAAC7I,GAApB,CAAwB4C,CAAC,IAAEA,CAAC,CAAClG,SAA7B,CAAzB;AACAmM,UAAAA,mBAAmB,GAACA,mBAAmB,CAAC/H,MAApB,CAA2BH,IAAI,IAAImI,cAAc,CAAC1I,QAAf,CAAwBO,IAAI,CAACjE,SAA7B,CAAnC,EAA4EsD,GAA5E,CAAgF4C,CAAC,IAAEA,CAAC,CAAClG,SAArF,CAApB;AACA,cAAIsM,gBAAgB,GAAGD,oBAAoB,CAACjI,MAArB,CAA4B,UAAU8B,CAAV,EAAa;AAC5D,mBAAO,CAACiG,mBAAmB,CAACI,IAApB,CAAyB,UAAUC,CAAV,EAAa;AAC5C,qBAAOtG,CAAC,KAAMsG,CAAd;AACD,aAFO,CAAR;AAGD,WAJoB,CAAvB;AAKAP,UAAAA,SAAS,GAAEA,SAAS,CAAC7H,MAAV,CAAiBH,IAAI,IAAI,CAACqI,gBAAgB,CAAC5I,QAAjB,CAA0BO,IAAI,CAACjE,SAA/B,CAA1B,CAAX,CArB6B,CAsB7B;AACC,SAvBD,MAuBO;AACHiM,UAAAA,SAAS,GAAGvN,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,WAArB,CAAD,EAAoCmB,OAApC,EAA6C,WAA7C,CAAxC;AACH;;AAGD,cAAME,gBAAgB,GAAGH,YAAY,CAACE,MAAb,GAAsB,CAAtB,GAA0B1C,SAAS,CAACsB,UAAV,CAAqB,kBAArB,CAA1B,GAAqE,CAACoL,SAAS,CAAC,CAAD,CAAV,CAA9F,CAvDc,CAyDd;AAEA;AACA;AACA;AACA;;AACA,YAAIQ,qBAAJ;AACA,YAAIC,iBAAiB,GAAGtK,SAAxB;AACA,YAAIN,mBAAmB,GAAC,EAAxB;AACA,YAAI6K,aAAa,GAAE/N,0BAA0B,CAACW,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAD,EAAiC0F,YAAY,CAAC,SAAD,CAA7C,EAAyD,sBAAzD,CAA7C;;AACC,YAAGhH,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAH,EAA6C;AACzC6L,UAAAA,iBAAiB,GAAEnN,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAnB;AACA4L,UAAAA,qBAAqB,GAACC,iBAAiB,CAACH,IAAlB,CAAuBK,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAA7B,CAAtB;AAEA,cAAIC,uBAAuB,GAACvN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,EAA4CyC,GAA5C,CAAgD4C,CAAC,IAAEA,CAAC,CAACX,sBAArD,CAA5B;AACAmH,UAAAA,iBAAiB,GAAEnN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,EAA4CuD,MAA5C,CAAmDwI,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAAzD,CAAnB;AACA,cAAIE,uBAAuB,GAACL,iBAAiB,CAACpJ,GAAlB,CAAsB4C,CAAC,IAAEA,CAAC,CAACX,sBAA3B,CAA5B;AACA,cAAIyH,kBAAkB,GAAGF,uBAAuB,CAAC1I,MAAxB,CAA+B,UAAU8B,CAAV,EAAa;AAClE,mBAAO,CAAC6G,uBAAuB,CAACR,IAAxB,CAA6B,UAAUC,CAAV,EAAa;AAChD,qBAAOtG,CAAC,KAAMsG,CAAd;AACD,aAFO,CAAR;AAGD,WAJuB,CAAzB;AAKCjN,UAAAA,SAAS,CAACsB,UAAV,CAAqB,mBAArB,IAA0CtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0CuD,MAA1C,CAAiDH,IAAI,IAAI,CAAC+I,kBAAkB,CAACtJ,QAAnB,CAA4BO,IAAI,CAACsB,sBAAjC,CAA1D,CAA1C;AACH,SAbF,MAaM;AACHkH,UAAAA,qBAAqB,GAAC1K,YAAY,CAACwK,IAAb,CAAkBK,IAAI,IAAED,aAAa,CAACJ,IAAd,CAAmBM,IAAI,IAAED,IAAI,CAAC,wBAAD,CAAJ,KAAiCC,IAAI,CAAC,wBAAD,CAA9D,CAAxB,CAAtB;AACD;;AAEH,YAAGtN,SAAS,CAACsB,UAAV,CAAqB,mBAArB,CAAH,CAA4C;AAA5C,UACC;AACGiB,UAAAA,mBAAmB,GAAG2K,qBAAqB,GAAElN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,CAAF,GAC3CtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0C,CAA1C,IAA8C,CAACtB,SAAS,CAACsB,UAAV,CAAqB,mBAArB,EAA0C,CAA1C,CAAD,CAA9C,GAA6F,EAD7F;AAEH,SAJD,MAIK;AACDiB,UAAAA,mBAAmB,GAAG2K,qBAAqB,GAAElN,SAAS,CAACsB,UAAV,CAAqB,qBAArB,CAAF,GAAiD,CAACkB,YAAY,CAAC,CAAD,CAAb,CAA5F;AACH,SA1Fa,CA2Fd;AACA;AACA;;;AAEA,YAAIoL,cAAc,GAAG/K,SAArB;;AACA,YAAI7C,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAAJ,EAA4C;AACxCsM,UAAAA,cAAc,GAAGzO,4BAA4B,CAACa,SAAS,CAACsB,UAAV,CAAqB,gBAArB,CAAD,EAAyCmB,OAAzC,EAAkD,WAAlD,CAA7C;AACH;;AAED,YAAInB,UAAU,GAAG,EACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAGtB,SAAS,CAACsB,UAXA;AAYb,aAAG0F,YAZU;AAab0F,UAAAA,SAba;AAcblK,UAAAA,YAda;AAebD,UAAAA,mBAfa;AAgBbqL,UAAAA,cAhBa;AAiBbjL,UAAAA,gBAjBa;AAkBbP,UAAAA,cAAc,EAACpC,SAAS,CAACsB,UAAV,CAAqB,cAArB,KACftB,SAAS,CAACsB,UAAV,CAAqB,cAArB,EAAqCoB,MAArC,GAA4C,CAD7B,GAC+B,CAAC1C,SAAS,CAACsB,UAAV,CAAqB,cAArB,EAAqC,CAArC,CAAD,CAD/B,GAC0E0F,YAAY,CAAC5E,cAnBzF;AAoBbK,UAAAA,OAAO,EAAEuE,YAAY,CAAC,SAAD;AApBR,SAAjB;AAsBA,YAAI3D,QAAQ,GAAG,EAAf;;AACA,YAAI/B,UAAU,CAACoL,SAAX,IAAwBpL,UAAU,CAACoL,SAAX,CAAqBhK,MAArB,IAA+BwJ,UAAU,CAACvH,IAAtE,EAA4E;AACxEtB,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPsB,YAAAA,IAAI,EAAE,CAFC;AAGPM,YAAAA,IAAI,EAAEiH,UAAU,CAACjH;AAHV,WAAX;AAKH;;AACD,YAAI3D,UAAU,CAACmB,OAAX,IAAsBnB,UAAU,CAACmB,OAAX,CAAmBC,MAAnB,IAA6BwJ,UAAU,CAACjJ,QAAlE,EAA4E;AACxEI,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEPJ,YAAAA,QAAQ,EAAE,CAFH;AAGPC,YAAAA,QAAQ,EAAEgJ,UAAU,CAAChJ;AAHd,WAAX;AAKH;;AACD,YAAIlD,SAAS,CAAC6B,aAAD,CAAT,IAA4BP,UAAU,CAACM,UAAD,CAAtC,IAAsDN,UAAU,CAACM,UAAD,CAAV,CAAuBc,MAAvB,IAAiC1C,SAAS,CAAC6B,aAAD,CAAT,CAAyB8C,IAApH,EAA0H;AAEtHtB,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb8C,cAAAA,IAAI,EAAE,CAFO;AAGbC,cAAAA,IAAI,EAAE/B,SAHO;AAIbgC,cAAAA,MAAM,EAAEhC;AAJK;AAFV,WAAX;AASH,SAXD,MAWO;AACHQ,UAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,aAACxB,aAAD,GAAiB,EACb,GAAG7B,SAAS,CAAC6B,aAAD,CADC;AAEb+C,cAAAA,IAAI,EAAE/B,SAFO;AAGbgC,cAAAA,MAAM,EAAEhC;AAHK;AAFV,WAAX;AAQH;;AACD,YAAIiL,UAAU,GAAG,EACb,GAAG3N,cAAc,CAACH,SADL;AAEb+L,UAAAA,SAAS,EAAE,KAFE;AAGbqC,UAAAA,SAAS,EAAE,KAHE;AAIbC,UAAAA,gBAAgB,EAAE,KAJL;AAKb;AACArJ,UAAAA,OAAO,EAAE,KANI;AAObwC,UAAAA,UAAU,EAAExH,SAAS,CAACmB,aAPT;AAQb,aAAGkC;AARU,SAAjB;;AAUA,YAAIuK,cAAc;AAAA,WACXA,cAAc,CAAClL,MAAf,GAAwB,CAD/B,EACkC;AAC9B,gBAAM4L,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAlB;AACA,gBAAMC,cAAc,GAAG,EACnB,GAAGF,SAAS,CAACG,gBAAV,CAA2BA,gBADX;AAEnBC,YAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFD;AAGnB,aAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAACiN,cAAc,CAAC,CAAD,CAAd,CAAkBU,SAAS,CAACK,eAA5B,CAAD,CAHhB;AAInBvO,YAAAA,KAAK,EAAE,CAJY;AAKnBC,YAAAA,KAAK,EAAE;AALY,WAAvB;AAOAyN,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,YAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,cAAAA,gBAAgB,EAAE,CAACiL,cAAc,CAAC,CAAD,CAAf;AAFV;AAFH,WAAb;AAOA1N,UAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,YAAAA,iBAAiB,EAAE;AAAxC,WAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH,SAlBD,MAkBO,IAAI,CAACF,cAAD,IAAmBlB,SAAS,CAAChK,MAAV,GAAmB,CAA1C,EAA6C;AAChD,cAAI8L,cAAJ,CADgD,CAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAG7L,gBAAgB,CAACD,MAAjB,KAA4B,CAA5B,IAAiCF,YAAY,CAACE,MAAb,IAAuB,CAA3D,EACA;AACIiK,YAAAA,iBAAiB,GAAC,IAAlB;AACA,gBAAI2B,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAhB;AACAC,YAAAA,cAAc,GAAG,EACb,GAAGF,SAAS,CAACG,gBAAV,CAA2BA,gBADjB;AAEbC,cAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFP;AAGb,eAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAAC+L,SAAS,CAAC,CAAD,CAAT,CAAa4B,SAAS,CAACK,eAAvB,CAAD,CAHtB;AAIbvO,cAAAA,KAAK,EAAE,CAJM;AAKbC,cAAAA,KAAK,EAAE;AALM,aAAjB;AAQAyN,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERqB,gBAAAA,gBAAgB,EAAE,CAAC+J,SAAS,CAAC,CAAD,CAAV;AAFV;AAFH,aAAb;AAOAxM,YAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,cAAAA,iBAAiB,EAAE;AAAxC,aAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH;;AAED,cAAGZ,qBAAqB,KAAG,KAAxB,GAA+BA,qBAAqB,KAAG,KAAxB,IAA+BP,iBAAiB,KAAG,KAAnD,IAA0DpK,mBAAmB,CAACG,MAApB,KAA+B,CAAxH,CACC;AADD,YAGDH,mBAAmB,CAACG,MAApB,KAA+B,CAA/B,IAAoCF,YAAY,CAACE,MAAb,GAAsB,CAH5D,EAIA;AACI,gBAAI4L,SAAS,GAAGpC,UAAU,CAACqC,aAAX,CAAyB,CAAzB,CAAhB;AACAC,YAAAA,cAAc,GAAG,EACb,GAAGF,SAAS,CAACG,gBADA;AAEbC,cAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAFP;AAGb,eAACJ,SAAS,CAACK,eAAX,GAA6BhO,MAAM,CAAC6B,YAAY,CAAC,CAAD,CAAZ,CAAgB8L,SAAS,CAACK,eAA1B,CAAD,CAHtB;AAIbvO,cAAAA,KAAK,EAAE,CAJM;AAKbC,cAAAA,KAAK,EAAE;AALM,aAAjB;AAQAyN,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERiB,gBAAAA,mBAAmB,EAAE,CAACC,YAAY,CAAC,CAAD,CAAb;AAFb;AAFH,aAAb;AAOAtC,YAAAA,QAAQ,CAAC0O,iBAAiB,CAAC,EAAE,GAAGJ,cAAL;AAAqBzM,cAAAA,iBAAiB,EAAE;AAAxC,aAAD,EAA8C+L,UAA9C,CAAlB,CAAR;AACH,WAtBD,CAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA,eA2CK;AACDA,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,cAAAA;AAFS,aAAb;AAIApB,YAAAA,QAAQ,CAAC;AACL4E,cAAAA,IAAI,EAAEnG,cADD;AAELoG,cAAAA,OAAO,EAAE,EACL,GAAG+I,UADE;AAEL9I,gBAAAA,OAAO,EAAE;AAFJ;AAFJ,aAAD,CAAR;AAOH;AAGJ,SAlGM,MAkGA;AACH8I,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETxM,YAAAA;AAFS,WAAb;AAIApB,UAAAA,QAAQ,CAAC;AACL4E,YAAAA,IAAI,EAAEnG,cADD;AAELoG,YAAAA,OAAO,EAAE,EACL,GAAG+I,UADE;AAEL9I,cAAAA,OAAO,EAAE;AAFJ;AAFJ,WAAD,CAAR;AAOH;AACJ,OA1SL,EA2SKG,KA3SL,CA2SWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFJ,SAAD,CAAR;;AAMA,YAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OAvTL;AAwTH,KAhYD;AAiYH,GAlYD,MAkYO;AACHtD,IAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,MAAAA,EAAE,EAAE;AADsB,KAAnB,CAAX;AAGH;AAEJ,C,CACD;;AACA,OAAO,SAASyF,eAAT,CAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,UAAlD,EAA8D;AACjE,QAAMC,WAAW,GAAGH,UAAU,CAACnK,MAAX,CAAkB,UAAU8B,CAAV,EAAa;AAC/C,WAAOsI,WAAW,CAACjC,IAAZ,CAAiB,UAAUC,CAAV,EAAa;AACjC,aAAOtG,CAAC,CAACuI,UAAD,CAAD,KAAkBjC,CAAC,CAACiC,UAAD,CAA1B;AACH,KAFM,CAAP;AAGH,GAJmB,CAApB;AAKA,SAAOC,WAAP;AACH;;AAED,SAASP,iBAAT,CAA2B1C,UAA3B,EAAuC4B,UAAvC,EAAmD;AAC/C,SAAQ5N,QAAD,IAAc;AACjBxB,IAAAA,KAAK,CAACoD,IAAN,CAAWoK,UAAU,CAACwC,QAAtB,EAAgC,EAC5B,GAAGxC;AADyB,KAAhC,EAGKlK,IAHL,CAGUC,QAAQ,IAAI;AAEd,UAAIA,QAAQ,CAACC,IAAT,CAAcM,YAAd,IAA8BP,QAAQ,CAACC,IAAT,CAAcM,YAAd,CAA2BE,MAA3B,GAAoC,CAAtE,EACA;AACInD,QAAAA,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcM,YAAf,EAA4B,YAA5B,EAA0C,wBAA1C,CAAR;AACH;;AACDjD,MAAAA,QAAQ,CAAC0C,QAAQ,CAACC,IAAT,CAAcO,OAAf,EAAuB,WAAvB,EAAoC,wBAApC,CAAR;AACA,YAAMnB,UAAU,GAAG,EACf,GAAGwM,UAAU,CAACxM,UADC;AAEf,WAAGW,QAAQ,CAACC,IAFG;AAGfS,QAAAA,gBAAgB,EAAEV,QAAQ,CAACC,IAAT,CAAcS,gBAAd,IAAkCmL,UAAU,CAACxM,UAAX,CAAsBqB,gBAAxD,IAA4E;AAH/E,OAAnB,CAPc,CAYd;;AACAzC,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE,EACL,GAAG+I,UADE;AAELxM,UAAAA,UAFK;AAGL0D,UAAAA,OAAO,EAAE;AAHJ;AAFJ,OAAD,CAAR;AAQH,KAxBL,EAyBKG,KAzBL,CAyBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KArCL;AAsCH,GAvCD;AAwCH;;AAGD,OAAO,SAASkN,oBAAT,CAA8BpP,SAA9B,EAAyC;AAC5C,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBU,MAAAA,oBAAoB,EAAEb,SAAS,CAACiE,IAAV,CAAepD,oBADpB;AAEjBwO,MAAAA,kBAAkB,EAAErP,SAAS,CAACiE,IAAV,CAAeoL,kBAFlB;AAGjBtO,MAAAA,SAAS,EAAEf,SAAS,CAACiE,IAAV,CAAelD,SAHT;AAIjBwJ,MAAAA,YAAY,EAAEvK,SAAS,CAACsP,kBAJP;AAKjBxO,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AALH,KAArB;AAOApK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,yCAAX,EAAsD3B,cAAtD,EACK6B,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMsN,SAAS,GAAGtQ,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcsN,UAAd,IAA4B,EAA7B,EAAiC,aAAjC,EACjC,aADiC,EAClB3M,SADkB,EACPA,SADO,EACIA,SADJ,CAArC;AAEA,YAAM4M,aAAa,GAAGF,SAAS,CAAC3D,GAAV,CAAc,YAAd,CAAtB;AAEA,YAAM8D,SAAS,GAAGzQ,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcyN,UAAd,IAA4B,EAA7B,EAAiC,aAAjC,EACjC,aADiC,EAClB9M,SADkB,EACPA,SADO,EACIA,SADJ,CAArC;AAEA,YAAM+M,aAAa,GAAGF,SAAS,CAAC9D,GAAV,CAAc,YAAd,CAAtB;AAGA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAERkO,YAAAA,UAAU,EAAEC,aAFJ;AAGRE,YAAAA,UAAU,EAAEC,aAHJ;AAIRrN,YAAAA,mBAAmB,EAAEvC,SAAS,CAACsB,UAAV,CAAqBiB;AAJlC,WADP;AAOLsJ,UAAAA,cAAc,EAAE;AACZhL,YAAAA,oBAAoB,EAAEb,SAAS,CAACiE,IAAV,CAAepD,oBADzB;AAEZgP,YAAAA,YAAY,EAAE7P,SAAS,CAACiE,IAAV,CAAeqH,QAAf,CAAwBuE,YAF1B;AAGZC,YAAAA,WAAW,EAAE7N,QAAQ,CAACC,IAAT,CAAc6N,eAHf;AAIZC,YAAAA,WAAW,EAAE/N,QAAQ,CAACC,IAAT,CAAc+N;AAJf,WAPX;AAaLjL,UAAAA,OAAO,EAAE,KAbJ;AAcLwC,UAAAA,UAAU,EAAE,sBAdP;AAeLuE,UAAAA,SAAS,EAAE,IAfN;AAgBLC,UAAAA,SAAS,EAAE,QAhBN;AAiBLzB,UAAAA,YAAY,EAAEvK,SAAS,CAACsP;AAjBnB;AAFJ,OAAD,CAAR;AAsBH,KAlCL,EAmCKnK,KAnCL,CAmCWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA/CL;AAgDH,GAzDD;AA0DH;AAED,OAAO,SAASgO,uBAAT,CAAiClQ,SAAjC,EAA4CsB,UAA5C,EAAwD;AAC3D,SAAO,UAAUpB,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBU,MAAAA,oBAAoB,EAAEb,SAAS,CAACa,oBADf;AAEjBwK,MAAAA,sBAAsB,EAAErL,SAAS,CAACqL,sBAFjB;AAGjB8E,MAAAA,cAAc,EAAEnQ,SAAS,CAACmQ,cAHT;AAIjB1D,MAAAA,mBAAmB,EAAEzM,SAAS,CAACyM,mBAJd;AAKjB3L,MAAAA,QAAQ,EAAEd,SAAS,CAACc,QALH;AAMjBP,MAAAA,YAAY,EAAEP,SAAS,CAACO,YANP;AAOjBC,MAAAA,eAAe,EAAER,SAAS,CAACQ,eAPV;AAQjBgB,MAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BARrB;AASjB+I,MAAAA,YAAY,EAAEvK,SAAS,CAACuK;AATP,KAArB;AAWArK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,6CAAX,EAA0D3B,cAA1D,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKL8C,UAAAA,OAAO,EAAE,KALJ;AAMLoJ,UAAAA,SAAS,EAAE,KANN;AAOL5G,UAAAA,UAAU,EAAE,YAPP;AAQLuE,UAAAA,SAAS,EAAE,KARN;AASLC,UAAAA,SAAS,EAAE,QATN;AAULzB,UAAAA,YAAY,EAAEvK,SAAS,CAACuK,YAVnB,CAWL;;AAXK;AAFJ,OAAD,CAAR;AAgBH,KAlBL,EAmBKpF,KAnBL,CAmBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA/BL;AAgCH,GA7CD;AA8CH;AAGD,OAAO,SAASkO,eAAT,CAAyBpQ,SAAzB,EAAoC;AACvC,SAAO,UAAUE,QAAV,EAAoB;AAEvB,QAAImQ,QAAQ,GAAG,EAAf;AACA,UAAMC,oBAAoB,GAAG5R,KAAK,CAACoD,IAAN,CAAW,kDAAX,EAA+D;AACxFhB,MAAAA,QAAQ,EAAEd,SAAS,CAACsK,QADoE;AAC3D+E,MAAAA,kBAAkB,EAACrP,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoCiN;AADI,KAA/D,CAA7B;AAGA,UAAMkB,eAAe,GAAG7R,KAAK,CAACoD,IAAN,CAAW,sBAAX,CAAxB;AACA,UAAM0O,kBAAkB,GAAG9R,KAAK,CAACoD,IAAN,CAAW,6BAAX,EAA0C;AAAEhB,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAAtB,KAA1C,CAA3B;AACA+F,IAAAA,QAAQ,GAAG,CAACC,oBAAD,EAAuBC,eAAvB,EAAwCC,kBAAxC,CAAX;AAEAtQ,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAE,IAAAA,KAAK,CAAC0R,GAAN,CAAUJ,QAAV,EACKrO,IADL,CACUC,QAAQ,IAAI;AACd,YAAMyO,aAAa,GAAGzR,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByO,UAAjB,IAA+B,EAAhC,EAAoC,iBAApC,EACrC,eADqC,EACpB9N,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEA,YAAM+N,iBAAiB,GAAGF,aAAa,CAAC9E,GAAd,CAAkB,YAAlB,CAA1B;AAGA,YAAMiF,qBAAqB,GAAG5R,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB4O,kBAAjB,IAAuC,EAAxC,EAA4C,oBAA5C,EAC7C,oBAD6C,EACvBjO,SADuB,EACZA,SADY,EACDA,SADC,CAAjD;AAEA,YAAMkO,yBAAyB,GAAGF,qBAAqB,CAACjF,GAAtB,CAA0B,YAA1B,CAAlC;AAEA,YAAMoF,WAAW,GAAG/R,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,eAAzB,EACnC,aADmC,EACpBW,SADoB,EACTA,SADS,EACEA,SADF,CAAvC;AAEA,YAAMoO,eAAe,GAAGD,WAAW,CAACpF,GAAZ,CAAgB,YAAhB,CAAxB;AAEA1L,MAAAA,QAAQ,CAAC;AAGL4E,QAAAA,IAAI,EAAEnG,cAHD;AAILoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAERqP,YAAAA,UAAU,EAAEC,iBAFJ;AAGRE,YAAAA,kBAAkB,EAAEC;AAHZ,WADP;AAOLG,UAAAA,UAAU,EAAE,IAPP;AAQN;AACAC,UAAAA,4BAA4B,EAAG;AAC1BC,YAAAA,KAAK,EAAEpR,SAAS,CAACiE,IAAV,CAAemN,KADI;AAE1BC,YAAAA,WAAW,EAAErR,SAAS,CAACiE,IAAV,CAAeoN,WAFF;AAG1BxB,YAAAA,YAAY,EAAE7P,SAAS,CAACiE,IAAV,CAAe4L,YAHH;AAI1BpD,YAAAA,mBAAmB,EAAEzM,SAAS,CAACoC,cAAV,GAA2BpC,SAAS,CAACoC,cAAV,CAAyB2B,GAAzB,CAA6BE,IAAI,IAAIA,IAAI,CAACpD,oBAA1C,EAAgEqF,IAAhE,CAAqE,GAArE,EAA0EJ,QAA1E,EAA3B,GAAkH,EAJ7G;AAK1BjF,YAAAA,oBAAoB,EAAEb,SAAS,CAACiE,IAAV,CAAepD,oBALX;AAM1ByQ,YAAAA,kBAAkB,EAAET,qBAAqB,CAACjF,GAAtB,CAA0B,cAA1B,IAA4CiF,qBAAqB,CAACjF,GAAtB,CAA0B,cAA1B,CAA5C,GAAwF,EANlF;AAO1B2F,YAAAA,eAAe,EAAEb,aAAa,CAAC9E,GAAd,CAAkB,cAAlB,IAAoC8E,aAAa,CAAC9E,GAAd,CAAkB,cAAlB,CAApC,GAAwE,EAP/D;AAQ1BnL,YAAAA,SAAS,EAAET,SAAS,CAACiE,IAAV,CAAexD,SARA;AAS1B;AACA+Q,YAAAA,OAAO,EAAE/R,mBAAmB,CAACO,SAAS,CAACsK,QAAX,EAAqBrI,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAjC,CAVF;AAUyC;AACnE;AACAuP,YAAAA,SAAS,EAAEhS,mBAAmB,CAACO,SAAS,CAACsK,QAAX,EAAqBrI,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAjC,CAZJ;AAY2C;AACrEwP,YAAAA,WAAW,EAAE;AACT,uBAAS1R,SAAS,CAACsK,QAAV,CAAmBqH,aADnB;AAET,uBAAS3R,SAAS,CAACsK,QAAV,CAAmBsH;AAFnB,aAba;AAiB1BC,YAAAA,SAAS,EAAE;AACP,uBAAS7R,SAAS,CAACsK,QAAV,CAAmBqH,aADrB;AAEP,uBAAS3R,SAAS,CAACsK,QAAV,CAAmBsH;AAFrB;AAjBe,WATzB;AA+BLE,UAAAA,YAAY,EAAEb,eAAe,IAAI,EA/B5B;AAgCLjM,UAAAA,OAAO,EAAE,KAhCJ;AAiCLwC,UAAAA,UAAU,EAAE,gBAjCP;AAkCLuE,UAAAA,SAAS,EAAE,IAlCN;AAmCLC,UAAAA,SAAS,EAAE,QAnCN;AAoCL+F,UAAAA,yBAAyB,EAAC,IApCrB;AAqCL;AACAxH,UAAAA,YAAY,EAAEvK,SAAS,CAACgS;AAtCnB;AAJJ,OAAD,CAAR;AA6CH,KA5DL,EA6DK7M,KA7DL,CA6DWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzEL;AA0EH,GArFD;AAsFH;AACD,OAAO,SAAS+P,aAAT,CAAuBjS,SAAvB,EAAkC;AACrC,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,gDAAX,EAA6D;AAAEhB,MAAAA,QAAQ,EAAEd,SAAS,CAACsK,QAAtB;AAAgC4H,MAAAA,YAAY,EAAElS,SAAS,CAACiE,IAAV,CAAeiO,YAA7D;AAA2E7C,MAAAA,kBAAkB,EAAErP,SAAS,CAACiE,IAAV,CAAeoL;AAA9G,KAA7D,EACKrN,IADL,CACUC,QAAQ,IAAI;AACd,YAAMkQ,eAAe,GAAGlT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAckQ,YAAd,IAA8B,EAA/B,EAAmC,mBAAnC,EAAwD,mBAAxD,EAA6EvP,SAA7E,EAAwFA,SAAxF,EAAmGA,SAAnG,CAA3C;AACA,YAAMwP,YAAY,GAAGF,eAAe,CAACvG,GAAhB,CAAoB,YAApB,CAArB;AACA,YAAM0G,cAAc,GAAGrT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcqQ,gBAAd,IAAkC,EAAnC,EAAuC,kBAAvC,EAA2D,kBAA3D,EAA+E1P,SAA/E,EAA0FA,SAA1F,EAAqGA,SAArG,CAA1C;AACA,YAAM2P,WAAW,GAAGF,cAAc,CAAC1G,GAAf,CAAmB,YAAnB,CAApB;AACA,YAAM6G,WAAW,GAAGxT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwQ,QAAd,IAA0B,EAA3B,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE7P,SAAjE,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAvC;AACA,YAAM8P,QAAQ,GAAGF,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,CAAjB;AACA,YAAMgH,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAEL;AACA6B,UAAAA,0BAA0B,EAAG;AACzBC,YAAAA,kBAAkB,EAAGlT,iBAAiB,CAACmT,GADd;AAEzB7B,YAAAA,KAAK,EAAEpR,SAAS,CAACiE,IAAV,CAAemN,KAFG;AAGzBC,YAAAA,WAAW,EAAErR,SAAS,CAACiE,IAAV,CAAeoN,WAHH;AAIzBxB,YAAAA,YAAY,EAAE7P,SAAS,CAACiE,IAAV,CAAe4L,YAJJ;AAKzBqC,YAAAA,YAAY,EAAElS,SAAS,CAACiE,IAAV,CAAeiO,YALJ;AAMzBgB,YAAAA,YAAY,EAAElT,SAAS,CAACiE,IAAV,CAAeiP,YANJ;AAOzBzG,YAAAA,mBAAmB,EAAEzM,SAAS,CAACoC,cAAV,GAA2BpC,SAAS,CAACoC,cAAV,CAAyB2B,GAAzB,CAA6BE,IAAI,IAAIA,IAAI,CAACpD,oBAA1C,EAAgEqF,IAAhE,CAAqE,GAArE,EAA0EJ,QAA1E,EAA3B,GAAkH,EAP9G;AAQzBjF,YAAAA,oBAAoB,EAAEb,SAAS,CAACiE,IAAV,CAAepD,oBARZ;AASzBJ,YAAAA,SAAS,EAAET,SAAS,CAACiE,IAAV,CAAexD,SATD;AAUzB0S,YAAAA,iBAAiB,EAAEhB,eAAe,CAACvG,GAAhB,CAAoB,cAApB,CAVM;AAWzBwH,YAAAA,gBAAgB,EAAEd,cAAc,CAAC1G,GAAf,CAAmB,cAAnB,CAXO;AAYzByH,YAAAA,aAAa,EAAEZ,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,EAA8BlJ,MAA9B,GAAuC,CAAvC,GAA2C+P,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,EAA8B,CAA9B,CAA3C,GAA8E,EAZpE;AAazB0H,YAAAA,sBAAsB,EAAEV,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,EAAuClJ,MAAvC,GAAgD,CAAhD,GAAoDkQ,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,EAAuC,CAAvC,CAApD,GAAgG,EAb/F;AAczB2H,YAAAA,SAAS,EAAEtR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,KAAoChQ,SAApC,GAAgDZ,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCU,SAAnF,GAA+F,EAdjF;AAezBC,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,KAAoChQ,SAApC,GAAgDZ,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCY,iBAAnF,GAAuG;AAflG,WAHxB;AAoBLC,UAAAA,uBAAuB,EAAC,IApBnB;AAqBLrB,UAAAA,YArBK;AAsBLG,UAAAA,WAtBK;AAuBLG,UAAAA,QAvBK;AAwBLG,UAAAA,iBAxBK;AAyBL9N,UAAAA,OAAO,EAAE,KAzBJ;AA0BLwC,UAAAA,UAAU,EAAE,cA1BP;AA2BLuE,UAAAA,SAAS,EAAE,IA3BN;AA4BLC,UAAAA,SAAS,EAAE,QA5BN;AA6BL;AACAzB,UAAAA,YAAY,EAAEvK,SAAS,CAAC2T;AA9BnB;AAFJ,OAAD,CAAR;AAmCH,KA7CL,EA8CKxO,KA9CL,CA8CWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA1DL;AA2DH,GA7DD;AA8DH;AAED,OAAO,SAAS0R,qBAAT,CAA+B5T,SAA/B,EAA0C;AAC7C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,gDAAX,EAA6D;AAAEhB,MAAAA,QAAQ,EAAEd,SAAS,CAACsK,QAAtB;AAAgC4H,MAAAA,YAAY,EAAElS,SAAS,CAACiE,IAAV,CAAeiO,YAA7D;AAA2E7C,MAAAA,kBAAkB,EAAErP,SAAS,CAACqP;AAAzG,KAA7D,EACKrN,IADL,CACUC,QAAQ,IAAI;AACd,YAAMkQ,eAAe,GAAGlT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAckQ,YAAd,IAA8B,EAA/B,EAAmC,mBAAnC,EAAwD,mBAAxD,EAA6EvP,SAA7E,EAAwFA,SAAxF,EAAmGA,SAAnG,CAA3C;AACA,YAAMwP,YAAY,GAAGF,eAAe,CAACvG,GAAhB,CAAoB,YAApB,CAArB;AACA,YAAM0G,cAAc,GAAGrT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcqQ,gBAAd,IAAkC,EAAnC,EAAuC,kBAAvC,EAA2D,kBAA3D,EAA+E1P,SAA/E,EAA0FA,SAA1F,EAAqGA,SAArG,CAA1C;AACA,YAAM2P,WAAW,GAAGF,cAAc,CAAC1G,GAAf,CAAmB,YAAnB,CAApB;AACA,YAAM6G,WAAW,GAAGxT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwQ,QAAd,IAA0B,EAA3B,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE7P,SAAjE,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAvC;AACA,YAAM8P,QAAQ,GAAGF,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,CAAjB;AACA,YAAMgH,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAELrF,UAAAA,cAAc,EAAE;AACZmH,YAAAA,kBAAkB,EAAGhT,SAAS,CAACgT,kBADnB;AAEZ5B,YAAAA,KAAK,EAAEpR,SAAS,CAACiE,IAAV,CAAemN,KAFV;AAGZC,YAAAA,WAAW,EAAErR,SAAS,CAACiE,IAAV,CAAeoN,WAHhB;AAIZxB,YAAAA,YAAY,EAAE7P,SAAS,CAACiE,IAAV,CAAe4L,YAJjB;AAKZqC,YAAAA,YAAY,EAAElS,SAAS,CAACiE,IAAV,CAAeiO,YALjB;AAMZgB,YAAAA,YAAY,EAAElT,SAAS,CAACiE,IAAV,CAAeiP,YANjB;AAOZzG,YAAAA,mBAAmB,EAAEzM,SAAS,CAACoC,cAAV,GAA2BpC,SAAS,CAACoC,cAAV,CAAyB2B,GAAzB,CAA6BE,IAAI,IAAIA,IAAI,CAACpD,oBAA1C,EAAgEqF,IAAhE,CAAqE,GAArE,EAA0EJ,QAA1E,EAA3B,GAAkH,EAP3H;AAQZjF,YAAAA,oBAAoB,EAAEb,SAAS,CAACiE,IAAV,CAAepD,oBARzB;AASZJ,YAAAA,SAAS,EAAET,SAAS,CAACiE,IAAV,CAAexD,SATd;AAUZ0S,YAAAA,iBAAiB,EAAEhB,eAAe,CAACvG,GAAhB,CAAoB,cAApB,IAAsCuG,eAAe,CAACvG,GAAhB,CAAoB,cAApB,CAAtC,GAA4E,EAVnF;AAWZwH,YAAAA,gBAAgB,EAAEd,cAAc,CAAC1G,GAAf,CAAmB,cAAnB,IAAqC0G,cAAc,CAAC1G,GAAf,CAAmB,cAAnB,CAArC,GAA0E,EAXhF;AAYZyH,YAAAA,aAAa,EAAEZ,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,EAA8BlJ,MAA9B,GAAuC,CAAvC,GAA2C+P,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,EAA8B,CAA9B,CAA3C,GAA8E,EAZjF;AAaZ0H,YAAAA,sBAAsB,EAAEV,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,EAAuClJ,MAAvC,GAAgD,CAAhD,GAAoDkQ,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,EAAuC,CAAvC,CAApD,GAAgG,EAb5G;AAcZ2H,YAAAA,SAAS,EAAEtR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,KAAoChQ,SAApC,GAAgDZ,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCU,SAAnF,GAA+F,EAd9F;AAeZC,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,KAAoChQ,SAApC,GAAgDZ,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCY,iBAAnF,GAAuG;AAf/G,WAFX;AAmBLpB,UAAAA,YAnBK;AAoBLG,UAAAA,WApBK;AAqBLG,UAAAA,QArBK;AAsBLG,UAAAA,iBAtBK;AAuBL9N,UAAAA,OAAO,EAAE,KAvBJ;AAwBLwC,UAAAA,UAAU,EAAE,cAxBP;AAyBLuE,UAAAA,SAAS,EAAE,IAzBN;AA0BLC,UAAAA,SAAS,EAAE,QA1BN,CA2BL;AACA;;AA5BK;AAFJ,OAAD,CAAR;AAiCH,KA3CL,EA4CK7G,KA5CL,CA4CWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAxDL;AAyDH,GA3DD;AA4DH;AAED,OAAO,SAAS2R,2BAAT,CAAqC7T,SAArC,EAAgD;AACnD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,iDAAX,EAA8D;AAC1DuN,MAAAA,kBAAkB,EAAGrP,SAAS,CAACqP,kBAD2B;AAE1D8D,MAAAA,iBAAiB,EAAEnT,SAAS,CAAC6L,cAAV,CAAyBsH,iBAAzB,CAA2CpQ,KAFJ;AAG1DjC,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAHsC,KAA9D,EAKKtI,IALL,CAKUC,QAAQ,IAAI;AACd,YAAMqQ,cAAc,GAAGrT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcqQ,gBAAd,IAAkC,EAAnC,EAAuC,kBAAvC,EAA2D,kBAA3D,EAA+E1P,SAA/E,EAA0FA,SAA1F,EAAqGA,SAArG,CAA1C;AACA,YAAM2P,WAAW,GAAGF,cAAc,CAAC1G,GAAf,CAAmB,YAAnB,CAApB;AACA,YAAM6G,WAAW,GAAGxT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwQ,QAAd,IAA0B,EAA3B,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE7P,SAAjE,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAvC;AACA,YAAM8P,QAAQ,GAAGF,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,CAAjB;AACA,YAAMgH,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAELrF,UAAAA,cAAc,EAAE,EACZ,GAAG7L,SAAS,CAAC6L,cADD;AAEZwH,YAAAA,aAAa,EAACZ,WAAW,CAAC7G,GAAZ,CAAgB,cAAhB,KAAkC,EAFpC;AAGZ0H,YAAAA,sBAAsB,EAACV,oBAAoB,CAAChH,GAArB,CAAyB,cAAzB,KAA2C,EAHtD;AAIZwH,YAAAA,gBAAgB,EAAEd,cAAc,CAAC1G,GAAf,CAAmB,cAAnB,KAAsC;AAJ5C,WAFX;AAQL4G,UAAAA,WARK;AASLG,UAAAA,QATK;AAULG,UAAAA,iBAVK;AAWL9N,UAAAA,OAAO,EAAE;AAXJ;AAFJ,OAAD,CAAR;AAgBH,KA5BL,EA6BKG,KA7BL,CA6BWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzCL;AA0CH,GA5CD;AA6CH;AACD,OAAO,SAAS4R,uBAAT,CAAiC9T,SAAjC,EAA4C;AAC/C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,6CAAX,EAA0D;AACtDuN,MAAAA,kBAAkB,EAAGrP,SAAS,CAACqP,kBADuB;AAEtD8D,MAAAA,iBAAiB,EAAEnT,SAAS,CAAC6L,cAAV,CAAyBsH,iBAAzB,CAA2CpQ,KAFR;AAGtDqQ,MAAAA,gBAAgB,EAAEpT,SAAS,CAAC6L,cAAV,CAAyBuH,gBAAzB,CAA0CrQ,KAHN;AAItDmP,MAAAA,YAAY,EAAElS,SAAS,CAAC6L,cAAV,CAAyBqG,YAJe;AAKtDpR,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AALkC,KAA1D,EAOKtI,IAPL,CAOUC,QAAQ,IAAI;AACd,YAAMwQ,WAAW,GAAGxT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwQ,QAAd,IAA0B,EAA3B,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE7P,SAAjE,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAvC;AACA,YAAM8P,QAAQ,GAAGF,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,CAAjB;AACA,YAAMgH,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAELrF,UAAAA,cAAc,EAAE,EACZ,GAAG7L,SAAS,CAAC6L,cADD;AAEZwH,YAAAA,aAAa,EAAEZ,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,EAA8B,CAA9B,CAFH;AAGZ0H,YAAAA,sBAAsB,EAAEV,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,EAAuC,CAAvC,CAHZ;AAIZ4H,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,GAAkC5Q,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCY,iBAArE,GAAuF,EAJ/F;AAKZF,YAAAA,SAAS,EAACtR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,GAAiC5Q,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCU,SAApE,GAA+E;AAL7E,WAFX;AASLZ,UAAAA,QATK;AAULG,UAAAA,iBAVK;AAWL9N,UAAAA,OAAO,EAAE;AAXJ;AAFJ,OAAD,CAAR;AAgBH,KA5BL,EA6BKG,KA7BL,CA6BWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzCL;AA0CH,GA5CD;AA6CH;AACD,OAAO,SAAS6R,gCAAT,CAA0C/T,SAA1C,EAAqD;AACxD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,sDAAX,EAAmE;AAC/DuN,MAAAA,kBAAkB,EAAGrP,SAAS,CAACqP,kBADgC;AAE/DgE,MAAAA,aAAa,EAAErT,SAAS,CAAC6L,cAAV,CAAyBwH,aAAzB,CAAuCtQ,KAFS;AAG/DmP,MAAAA,YAAY,EAAElS,SAAS,CAAC6L,cAAV,CAAyBqG,YAHwB;AAI/DpR,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAJ2C,KAAnE,EAMKtI,IANL,CAMUC,QAAQ,IAAI;AACd,YAAM2Q,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAELrF,UAAAA,cAAc,EAAE,EACZ,GAAG7L,SAAS,CAAC6L,cADD;AAEZ0H,YAAAA,SAAS,EAAEtR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,GAAkC5Q,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCU,SAArE,GAAgF,EAF/E;AAGZC,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,GAAiC5Q,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,CAAgC,CAAhC,EAAmCY,iBAApE,GAAwF;AAHhG,WAFX;AAOLX,UAAAA,iBAPK;AAQL9N,UAAAA,OAAO,EAAE,KARJ;AASLwC,UAAAA,UAAU,EAAE,cATP;AAULuE,UAAAA,SAAS,EAAE,IAVN;AAWL;AACA;AACAxB,UAAAA,YAAY,EAAEvK,SAAS,CAACgS;AAbnB;AAFJ,OAAD,CAAR;AAkBH,KA3BL,EA4BK7M,KA5BL,CA4BWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAxCL;AAyCH,GA3CD;AA4CH;AACD,OAAO,SAAS8R,4BAAT,CAAsChU,SAAtC,EAAiD;AACpD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,kDAAX,EAA+D;AAC3DuN,MAAAA,kBAAkB,EAAGrP,SAAS,CAACqP,kBAD4B;AAE3DiE,MAAAA,sBAAsB,EAAEtT,SAAS,CAAC6L,cAAV,CAAyByH,sBAAzB,CAAgDvQ,KAFb;AAG3DmP,MAAAA,YAAY,EAAElS,SAAS,CAAC6L,cAAV,CAAyBqG,YAHoB;AAI3DpR,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAJuC,KAA/D,EAMKtI,IANL,CAMUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAE,IADP;AAELrF,UAAAA,cAAc,EAAE,EACZ,GAAG7L,SAAS,CAAC6L,cADD;AAEZ2H,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc+R,SAAd,GAA0BhS,QAAQ,CAACC,IAAT,CAAc+R,SAAd,CAAwBR,iBAAlD,GAAqE,EAF7E;AAGZF,YAAAA,SAAS,EAAEtR,QAAQ,CAACC,IAAT,CAAc+R,SAAd,GAA0BhS,QAAQ,CAACC,IAAT,CAAc+R,SAAd,CAAwBV,SAAlD,GAA6D;AAH5D,WAFX;AAOLvO,UAAAA,OAAO,EAAE,KAPJ;AAQLwC,UAAAA,UAAU,EAAE,cARP;AASLuE,UAAAA,SAAS,EAAE,IATN;AAUL;AACA;AACAxB,UAAAA,YAAY,EAAEvK,SAAS,CAACgS;AAZnB;AAFJ,OAAD,CAAR;AAiBH,KAxBL,EAyBK7M,KAzBL,CAyBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KArCL;AAsCH,GAxCD;AAyCH;AACD,OAAO,SAASgS,sBAAT,CAAgClU,SAAhC,EAA2C;AAC9C,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBgU,MAAAA,yBAAyB,EAAEnU,SAAS,CAAC6L,cAAV,CAAyBsI,yBADnC;AAEjBrT,MAAAA,QAAQ,EAAEd,SAAS,CAACsK,QAFH;AAGjBzJ,MAAAA,oBAAoB,EAAEb,SAAS,CAACsB,UAAV,CAAqBc,cAArB,GAClBpC,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoC2B,GAApC,CAAwCE,IAAI,IAAIA,IAAI,CAACpD,oBAArD,EAA2EqF,IAA3E,CAAgF,GAAhF,EAAqFJ,QAArF,EADkB,GACgF,EAJrF;AAKjBvF,MAAAA,YAAY,EAAEP,SAAS,CAACsB,UAAV,CAAqBmH,uBAArB,CAA6ClI,YAL1C;AAMjBC,MAAAA,eAAe,EAAER,SAAS,CAACsB,UAAV,CAAqBqH,0BAArB,CAAgDnI,eANhD;AAOjBgB,MAAAA,0BAA0B,EAAExB,SAAS,CAACwB;AAPrB,KAArB;AASAtB,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,gDAAX,EAA6D3B,cAA7D,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKL8C,UAAAA,OAAO,EAAE,KALJ;AAMLgH,UAAAA,SAAS,EAAE,QANN;AAOLD,UAAAA,SAAS,EAAE,KAPN;AAQLqC,UAAAA,SAAS,EAAE,KARN;AASL8C,UAAAA,UAAU,EAAG;AATR;AAFJ,OAAD,CAAR;AAcH,KAhBL,EAiBK/L,KAjBL,CAiBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAzCD;AA0CH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,OAAO,SAASkS,qBAAT,CAA+BpU,SAA/B,EAA0C;AAC7C,SAAO,UAAUE,QAAV,EAAoB;AAEvB,QAAImQ,QAAQ,GAAG,EAAf,CAFuB,CAGvB;;AACA,UAAME,eAAe,GAAG7R,KAAK,CAACoD,IAAN,CAAW,6CAAX,EAA0D;AAC9EqS,MAAAA,yBAAyB,EAAEnU,SAAS,CAACqU,OAAV,CAAkBF,yBADiC;AAE9ErT,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAF0D,KAA1D,CAAxB;AAIA,UAAMgK,uBAAuB,GAAG5V,KAAK,CAACoD,IAAN,CAAW,sBAAX,CAAhC;AACAuO,IAAAA,QAAQ,GAAG,CAACE,eAAD,EAAkB+D,uBAAlB,CAAX;AAEApU,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAE,IAAAA,KAAK,CAAC0R,GAAN,CAAUJ,QAAV,EACKrO,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMyO,aAAa,GAAGzR,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiByO,UAAjB,IAA+B,EAAhC,EAAoC,iBAApC,EACrC,eADqC,EACpB9N,SADoB,EACTA,SADS,EACEA,SADF,CAAzC;AAEA,YAAM+N,iBAAiB,GAAGF,aAAa,CAAC9E,GAAd,CAAkB,YAAlB,CAA1B;AAGA,YAAMiF,qBAAqB,GAAG5R,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB4O,kBAAjB,IAAuC,EAAxC,EAA4C,oBAA5C,EAC7C,oBAD6C,EACvBjO,SADuB,EACZA,SADY,EACDA,SADC,CAAjD;AAEA,YAAMkO,yBAAyB,GAAGF,qBAAqB,CAACjF,GAAtB,CAA0B,YAA1B,CAAlC;AAEA,YAAMoF,WAAW,GAAG/R,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,eAAzB,EACnC,aADmC,EACpBW,SADoB,EACTA,SADS,EACEA,SADF,CAAvC;AAEA,YAAMoO,eAAe,GAAGD,WAAW,CAACpF,GAAZ,CAAgB,YAAhB,CAAxB;AAEA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAERqP,YAAAA,UAAU,EAAEC,iBAFJ;AAGRE,YAAAA,kBAAkB,EAAEC,yBAHZ;AAIR;AACA,eAAG9O,QAAQ,CAAC,CAAD,CAAR,CAAYC,IALP,CAMR;;AANQ,WADP;AASLgP,UAAAA,UAAU,EAAElR,SAAS,CAACqU,OAAV,CAAkBF,yBATzB;AAUP;AACEhD,UAAAA,4BAA4B,EAC1B;AACEE,YAAAA,WAAW,EAACpP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6ClD,WAD3D;AAEExB,YAAAA,YAAY,EAAE7P,SAAS,CAACqU,OAAV,CAAkBxE,YAFlC;AAGEpP,YAAAA,SAAS,EAAEwB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6C9T,SAH1D;AAIEI,YAAAA,oBAAoB,EAAEb,SAAS,CAACqU,OAAV,CAAkBxT,oBAJ1C;AAKEsT,YAAAA,yBAAyB,EAAEnU,SAAS,CAACqU,OAAV,CAAkBF,yBAL/C;AAME7C,YAAAA,kBAAkB,EAAE;AAChB,uBAASrP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CjD,kBADtC;AAEhB,uBAASrP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CC;AAFtC,aANtB;AAUEjD,YAAAA,eAAe,EAAE;AACb,uBAAStP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6ChD,eADzC;AAEb,uBAAStP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CE;AAFzC,aAVnB;AAcE/C,YAAAA,WAAW,EAAE;AACT,uBAASzP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6C7C,WAD7C;AAET,uBAASzP,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CG;AAF7C,aAdf;AAkBE7C,YAAAA,SAAS,EAAE;AACP,uBAAS5P,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6C1C,SAD/C;AAEP,uBAAS5P,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CI;AAF/C,aAlBb;AAsBE;AACA;AACAlD,YAAAA,SAAS,EAAEhS,mBAAmB,CAACO,SAAS,CAACsK,QAAX,EAAqBrI,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CK,SAAlE,CAxBhC;AAyBEpD,YAAAA,OAAO,EAAE/R,mBAAmB,CAACO,SAAS,CAACsK,QAAX,EAAqBrI,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBqS,wBAAjB,CAA0C,CAA1C,EAA6CM,OAAlE;AAzB9B,WAZG;AAuCL9C,UAAAA,yBAAyB,EAAC,IAvCrB;AAwCLD,UAAAA,YAAY,EAAEb,eAAe,IAAI,EAxC5B;AAyCL1G,UAAAA,YAAY,EAAEvK,SAAS,CAAC8U,YAzCnB;AA0CL9P,UAAAA,OAAO,EAAE,KA1CJ;AA2CLwC,UAAAA,UAAU,EAAE,gBA3CP;AA4CLuE,UAAAA,SAAS,EAAE,IA5CN;AA6CLC,UAAAA,SAAS,EAAE;AA7CN;AAFJ,OAAD,CAAR;AAkDH,KAlEL,EAmEK7G,KAnEL,CAmEWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA/EL;AAgFH,GA5FD;AA6FH;AAED,OAAO,SAAS6S,mBAAT,CAA6B/U,SAA7B,EAAwC;AAC3C,SAAO,UAAUE,QAAV,EAAoB;AAIvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,2CAAX,EAAwD;AACpDkT,MAAAA,uBAAuB,EAAEhV,SAAS,CAACqU,OAAV,CAAkBW,uBADS;AAEpDlU,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAFgC,KAAxD,EAIKtI,IAJL,CAIUC,QAAQ,IAAI;AAEd,YAAMkQ,eAAe,GAAGlT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAckQ,YAAd,IAA8B,EAA/B,EAAmC,mBAAnC,EAAwD,mBAAxD,EAA6EvP,SAA7E,EAAwFA,SAAxF,EAAmGA,SAAnG,CAA3C;AACA,YAAMwP,YAAY,GAAGF,eAAe,CAACvG,GAAhB,CAAoB,YAApB,CAArB;AACA,YAAM0G,cAAc,GAAGrT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcqQ,gBAAd,IAAkC,EAAnC,EAAuC,kBAAvC,EAA2D,kBAA3D,EAA+E1P,SAA/E,EAA0FA,SAA1F,EAAqGA,SAArG,CAA1C;AACA,YAAM2P,WAAW,GAAGF,cAAc,CAAC1G,GAAf,CAAmB,YAAnB,CAApB;AACA,YAAM6G,WAAW,GAAGxT,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAcwQ,QAAd,IAA0B,EAA3B,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE7P,SAAjE,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAvC;AACA,YAAM8P,QAAQ,GAAGF,WAAW,CAAC7G,GAAZ,CAAgB,YAAhB,CAAjB;AACA,YAAMgH,oBAAoB,GAAG3T,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc2Q,iBAAd,IAAmC,EAApC,EAAwC,wBAAxC,EAAkE,cAAlE,EAAkFhQ,SAAlF,EAA6FA,SAA7F,EAAwGA,SAAxG,CAAhD;AACA,YAAMiQ,iBAAiB,GAAGF,oBAAoB,CAAChH,GAArB,CAAyB,YAAzB,CAA1B;AACA,YAAMqJ,sBAAsB,GAAGhT,QAAQ,CAACC,IAAT,CAAc+S,sBAAd,CAAqC,CAArC,CAA/B;AACA/U,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLmM,UAAAA,UAAU,EAAElR,SAAS,CAACqU,OAAV,CAAkBF,yBADzB;AAEL9B,UAAAA,YAFK;AAGLG,UAAAA,WAHK;AAILG,UAAAA,QAJK;AAKLG,UAAAA,iBALK;AAMLjH,UAAAA,cAAc,EAAE,EACZ,GAAGoJ,sBADS;AAEZpF,YAAAA,YAAY,EAAE7P,SAAS,CAACqU,OAAV,CAAkB/I,QAAlB,CAA2BuE,YAF7B;AAGZpP,YAAAA,SAAS,EAAEwU,sBAAsB,CAACxU,SAHtB;AAIZI,YAAAA,oBAAoB,EAAEb,SAAS,CAACqU,OAAV,CAAkBxT,oBAJ5B;AAKZsT,YAAAA,yBAAyB,EAAEnU,SAAS,CAACqU,OAAV,CAAkBF,yBALjC;AAMZhB,YAAAA,iBAAiB,EAAE;AACf+B,cAAAA,KAAK,EAAED,sBAAsB,CAAC3J,QAAvB,CAAgC6J,iBADxB;AAEfpS,cAAAA,KAAK,EAAEkS,sBAAsB,CAAC9B;AAFf,aANP;AAUZC,YAAAA,gBAAgB,EAAE;AACd,uBAAS6B,sBAAsB,CAACG,qBADlB;AAEd,uBAASH,sBAAsB,CAAC3J,QAAvB,CAAgC+J;AAF3B,aAVN;AAcZhC,YAAAA,aAAa,EAAE;AACX,uBAAS4B,sBAAsB,CAAC5B,aADrB;AAEX,uBAAS4B,sBAAsB,CAAC3J,QAAvB,CAAgCgK;AAF9B,aAdH;AAkBZhC,YAAAA,sBAAsB,EAAE;AACpB,uBAAS2B,sBAAsB,CAACM,cADZ;AAEpB,uBAASN,sBAAsB,CAAC3J,QAAvB,CAAgCkK;AAFrB,aAlBZ;AAsBZ3D,YAAAA,SAAS,EAAE;AACP,uBAASoD,sBAAsB,CAACpD,SADzB;AAEP,uBAASoD,sBAAsB,CAACN;AAFzB,aAtBC;AA0BZc,YAAAA,aAAa,EAAER,sBAAsB,CAAC3J,QAAvB,CAAgCoK,QA1BnC;AA2BZC,YAAAA,WAAW,EAAEV,sBAAsB,CAAC3J,QAAvB,CAAgCqK,WA3BjC;AA4BZC,YAAAA,YAAY,EAAEX,sBAAsB,CAAC3J,QAAvB,CAAgCsK,YA5BlC;AA6BZC,YAAAA,QAAQ,EAAEZ,sBAAsB,CAAC3J,QAAvB,CAAgCuK,QA7B9B;AA8BZrC,YAAAA,kBAAkB,EAAEvR,QAAQ,CAACC,IAAT,CAAc+R,SAAd,GAA2BhS,QAAQ,CAACC,IAAT,CAAc+R,SAAd,CAAwBR,iBAAnD,GAAsE,EA9B9E;AA+BZF,YAAAA,SAAS,EAAEtR,QAAQ,CAACC,IAAT,CAAc+R,SAAd,GAA0BhS,QAAQ,CAACC,IAAT,CAAc+R,SAAd,CAAwBV,SAAlD,GAA6D;AA/B5D,WANX;AAuCLhJ,UAAAA,YAAY,EAAEvK,SAAS,CAAC8U,YAvCnB;AAwCL9P,UAAAA,OAAO,EAAE,KAxCJ;AAyCLwC,UAAAA,UAAU,EAAE,cAzCP;AA0CLuE,UAAAA,SAAS,EAAE,IA1CN;AA2CLC,UAAAA,SAAS,EAAE;AA3CN;AAFJ,OAAD,CAAR;AAgDH,KA/DL,EAgEK7G,KAhEL,CAgEWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5EL;AA6EH,GAlFD;AAmFH;AAED,OAAO,SAAS4T,gBAAT,CAA0B9V,SAA1B,EAAqCsK,QAArC,EAA+C;AAClD,SAAO,UAAUpK,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjB4V,MAAAA,mBAAmB,EAAE/V,SAAS,CAAC6L,cAAV,CAAyBkK,mBAD7B;AAEjBjV,MAAAA,QAAQ,EAAEd,SAAS,CAACsK,QAFH;AAGjBzJ,MAAAA,oBAAoB,EAAEb,SAAS,CAACsB,UAAV,CAAqBc,cAArB,GAClBpC,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoC2B,GAApC,CAAwCE,IAAI,IAAIA,IAAI,CAACpD,oBAArD,EAA2EqF,IAA3E,CAAgF,GAAhF,EAAqFJ,QAArF,EADkB,GACgF,EAJrF;AAKjBvF,MAAAA,YAAY,EAAEP,SAAS,CAACsB,UAAV,CAAqBmH,uBAArB,CAA6ClI,YAL1C;AAMjBC,MAAAA,eAAe,EAAER,SAAS,CAACsB,UAAV,CAAqBqH,0BAArB,CAAgDnI,eANhD;AAOjBgB,MAAAA,0BAA0B,EAAExB,SAAS,CAACwB;AAPrB,KAArB;AASAtB,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,2CAAX,EAAwD3B,cAAxD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKL8C,UAAAA,OAAO,EAAE,KALJ;AAMLgH,UAAAA,SAAS,EAAE,QANN;AAOLD,UAAAA,SAAS,EAAE,KAPN;AAQLqC,UAAAA,SAAS,EAAE,KARN;AASL8C,UAAAA,UAAU,EAAE;AATP;AAFJ,OAAD,CAAR;AAcH,KAhBL,EAiBK/L,KAjBL,CAiBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAzCD;AA0CH;AAGD,OAAO,SAAS8T,eAAT,CAAyBhW,SAAzB,EAAoC;AACvC,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjB4V,MAAAA,mBAAmB,EAAE/V,SAAS,CAACqU,OAAV,CAAkB0B,mBADtB;AAEjBjV,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAFH,KAArB;AAIApK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,uCAAX,EAAoD3B,cAApD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKLgP,UAAAA,UAAU,EAAEjP,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqCF,mBAL5C;AAMX;AACEG,UAAAA,sBAAsB,EAAC;AACfzV,YAAAA,SAAS,EAAEwB,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqCxV,SADjC;AAEfoP,YAAAA,YAAY,EAAE7P,SAAS,CAACqU,OAAV,CAAkBxE,YAFjB;AAGfsG,YAAAA,aAAa,EAAElU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8C6K,aAH9C;AAIfC,YAAAA,SAAS,EAAEnU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8C8K,SAJ1C;AAKfC,YAAAA,gBAAgB,EAAEpU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8C+K,gBALjD;AAMfC,YAAAA,gBAAgB,EAAErU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8CgL,gBANjD;AAOfC,YAAAA,SAAS,EAAEtU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8CiL,SAP1C;AAQfC,YAAAA,cAAc,EAAEvU,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqC3K,QAArC,CAA8CkL,cAR/C;AASfT,YAAAA,mBAAmB,EAAE9T,QAAQ,CAACC,IAAT,CAAc+T,mBAAd,CAAkC,CAAlC,EAAqCF;AAT3C,WAPd;AAkBLU,UAAAA,mBAAmB,EAAC,IAlBf;AAmBLzR,UAAAA,OAAO,EAAE,KAnBJ;AAoBLwC,UAAAA,UAAU,EAAE,UApBP;AAqBLuE,UAAAA,SAAS,EAAE,IArBN;AAsBLC,UAAAA,SAAS,EAAE,QAtBN;AAuBLzB,UAAAA,YAAY,EAAEvK,SAAS,CAACuK;AAvBnB;AAFJ,OAAD,CAAR;AA4BH,KA9BL,EA+BKpF,KA/BL,CA+BWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA3CL;AA4CH,GAlDD;AAmDH;AAED,OAAO,SAASwU,eAAT,CAAyB1W,SAAzB,EAAoC;AACvC,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBkL,MAAAA,sBAAsB,EAAErL,SAAS,CAAC6L,cAAV,CAAyBR,sBADhC;AAEjBxK,MAAAA,oBAAoB,EAAEb,SAAS,CAACsB,UAAV,CAAqBc,cAArB,GAAsCpC,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoC2B,GAApC,CAAwCE,IAAI,IAAIA,IAAI,CAACpD,oBAArD,EAA2EqF,IAA3E,CAAgF,GAAhF,CAAtC,GAA6H,EAFlI;AAGjBqE,MAAAA,YAAY,EAAEvK,SAAS,CAAC2W,WAHP;AAIjB7V,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AAJH,KAArB;AAMApK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,0CAAX,EAAuD3B,cAAvD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB;AADL,WADP;AAIL4P,UAAAA,UAAU,EAAEjP,QAAQ,CAACC,IAAT,CAAc0U,iBAAd,CAAgCvL,sBAJvC;AAKLQ,UAAAA,cAAc,EAAE;AACZsE,YAAAA,cAAc,EAAElO,QAAQ,CAACC,IAAT,CAAc0U,iBAAd,CAAgCzG,cADpC;AAEZN,YAAAA,YAAY,EAAE7P,SAAS,CAAC6L,cAAV,CAAyBgE,YAF3B;AAGZgH,YAAAA,iBAAiB,EAAE7W,SAAS,CAAC6L,cAAV,CAAyBgL,iBAHhC;AAIZpK,YAAAA,mBAAmB,EAAExK,QAAQ,CAACC,IAAT,CAAc0U,iBAAd,CAAgC/V,oBAJzC;AAKZwK,YAAAA,sBAAsB,EAAEpJ,QAAQ,CAACC,IAAT,CAAc0U,iBAAd,CAAgCvL,sBAL5C;AAMZxK,YAAAA,oBAAoB,EAAEb,SAAS,CAACsB,UAAV,CAAqBc,cAArB,GAAsCpC,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoC2B,GAApC,CAAwCE,IAAI,IAAIA,IAAI,CAACpD,oBAArD,EAA2EqF,IAA3E,CAAgF,GAAhF,CAAtC,GAA6H,EANvI;AAOZqE,YAAAA,YAAY,EAAEvK,SAAS,CAAC2W;AAPZ,WALX;AAcL3R,UAAAA,OAAO,EAAE,KAdJ;AAeLwC,UAAAA,UAAU,EAAE,uBAfP;AAgBLuE,UAAAA,SAAS,EAAE,IAhBN;AAiBLC,UAAAA,SAAS,EAAE,yBAjBN;AAkBLzB,UAAAA,YAAY,EAAEvK,SAAS,CAAC2W;AAlBnB;AAFJ,OAAD,CAAR;AAuBH,KAzBL,EA0BKxR,KA1BL,CA0BWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAtCL;AAuCH,GA/CD;AAgDH;AAGD,OAAO,SAAS4U,eAAT,CAAyB9W,SAAzB,EAAoC;AAEvC,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBkL,MAAAA,sBAAsB,EAAErL,SAAS,CAAC6L,cAAV,CAAyBR,sBADhC;AAEjB0L,MAAAA,sBAAsB,EAAE/W,SAAS,CAAC6L,cAAV,CAAyBkL,sBAFhC;AAGjBC,MAAAA,qBAAqB,EAAEhX,SAAS,CAAC6L,cAAV,CAAyBmL,qBAH/B;AAIjBnW,MAAAA,oBAAoB,EAAEb,SAAS,CAAC6L,cAAV,CAAyBhL,oBAAzB,CAA8CiF,QAA9C,EAJL;AAKjByE,MAAAA,YAAY,EAAEvK,SAAS,CAACuK,YALP;AAMjBzJ,MAAAA,QAAQ,EAAEd,SAAS,CAACsK;AANH,KAArB;AAQApK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,wCAAX,EAAqD3B,cAArD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI4J,cAAc,GAAG,EAArB;AACA,UAAIoL,WAAW,GAAG,EAAlB;AACApL,MAAAA,cAAc,GAAG;AACbuF,QAAAA,KAAK,EAAEpR,SAAS,CAAC6L,cAAV,CAAyBuF,KADnB;AAEbC,QAAAA,WAAW,EAAErR,SAAS,CAAC6L,cAAV,CAAyBwF,WAFzB;AAGb5Q,QAAAA,SAAS,EAAET,SAAS,CAAC6L,cAAV,CAAyBpL,SAHvB;AAIboP,QAAAA,YAAY,EAAE7P,SAAS,CAAC6L,cAAV,CAAyBgE,YAJ1B;AAKbgH,QAAAA,iBAAiB,EAAE7W,SAAS,CAAC6L,cAAV,CAAyBgL,iBAL/B;AAMbhW,QAAAA,oBAAoB,EAAEb,SAAS,CAAC6L,cAAV,CAAyBhL,oBANlC;AAObwK,QAAAA,sBAAsB,EAAErL,SAAS,CAAC6L,cAAV,CAAyBR,sBAPpC;AAQboB,QAAAA,mBAAmB,EAAEzM,SAAS,CAACsB,UAAV,CAAqBc,cAArB,GAAsCpC,SAAS,CAACsB,UAAV,CAAqBc,cAArB,CAAoC2B,GAApC,CAAwCE,IAAI,IAAIA,IAAI,CAACpD,oBAArD,EAA2EqF,IAA3E,CAAgF,GAAhF,CAAtC,GAA6H;AARrI,OAAjB;AAWAjE,MAAAA,QAAQ,CAACC,IAAT,CAAcgV,aAAd,CAA4BnT,GAA5B,CAAgCoT,SAAS,IAAI;AACzCtL,QAAAA,cAAc,CAACsL,SAAS,CAACC,uBAAX,CAAd,GAAoD;AAChDC,UAAAA,gBAAgB,EAAEF,SAAS,CAACE,gBADoB;AAEhDL,UAAAA,qBAAqB,EAAEG,SAAS,CAACH,qBAFe;AAGhDI,UAAAA,uBAAuB,EAAED,SAAS,CAACC,uBAHa;AAIhDE,UAAAA,aAAa,EAAEH,SAAS,CAACG,aAJuB;AAKhDlG,UAAAA,KAAK,EAAEpR,SAAS,CAAC6L,cAAV,CAAyBuF,KALgB;AAMhDC,UAAAA,WAAW,EAAErR,SAAS,CAAC6L,cAAV,CAAyBwF,WANU;AAOhDxB,UAAAA,YAAY,EAAE7P,SAAS,CAAC6L,cAAV,CAAyBgE,YAPS;AAQhDgH,UAAAA,iBAAiB,EAAE7W,SAAS,CAAC6L,cAAV,CAAyBgL;AARI,SAApD;AAUAI,QAAAA,WAAW,CAACM,IAAZ,CAAiBJ,SAAS,CAACC,uBAA3B;AACA,eAAO,IAAP;AACH,OAbD;AAeAnV,MAAAA,QAAQ,CAACC,IAAT,CAAcgV,aAAd,CAA4BnT,GAA5B,CAAgCoT,SAAS,IAAI;AACzCtL,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,EACzB,GAAGA,cAAc,CAAC,UAAD,CADQ;AAEzB,WAACsL,SAAS,CAACC,uBAAX,GAAqCD,SAAS,CAACG;AAFtB,SAA7B;AAIA,eAAO,IAAP;AACH,OAND;AAOAzL,MAAAA,cAAc,CAAC,UAAD,CAAd,GAA6BoL,WAA7B;AACA/W,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKLgP,UAAAA,UAAU,EAAEjP,QAAQ,CAACC,IAAT,CAAcgP,UALrB;AAMLrF,UAAAA,cAAc,EAAEA,cANX;AAOL7G,UAAAA,OAAO,EAAE,KAPJ;AAQLwC,UAAAA,UAAU,EAAE,qBARP;AASLgQ,UAAAA,iBAAiB,EAAE,IATd;AAULC,UAAAA,cAAc,EAAEzX,SAAS,CAACyX,cAVrB;AAWLzL,UAAAA,SAAS,EAAE,QAXN;AAYL8I,UAAAA,YAAY,EAAE9U,SAAS,CAACuK;AAZnB;AAFJ,OAAD,CAAR;AAiBH,KAvDL,EAwDKpF,KAxDL,CAwDWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KApEL;AAqEH,GA/ED;AAgFH;AAED,OAAO,SAASwV,eAAT,CAAyB7L,cAAzB,EAAyCvB,QAAzC,EAAmD/J,YAAnD,EAAiEC,eAAjE,EAAkFgB,0BAAlF,EAA8G;AAEjH,SAAO,UAAUtB,QAAV,EAAoB;AAEvB,QAAIyX,mBAAmB,GAAG,EAA1B;;AACA,QAAI9L,cAAc,IAAIA,cAAc,CAACP,QAArC,EAA+C;AAC3CO,MAAAA,cAAc,CAAC+L,QAAf,CAAwB7T,GAAxB,CAA4B8T,MAAM,IAC9BF,mBAAmB,CAACJ,IAApB,CAAyB1L,cAAc,CAACgM,MAAD,CAAvC,CADJ;AAGA,UAAI1X,cAAc,GAAG;AACjBkL,QAAAA,sBAAsB,EAAEQ,cAAc,CAACR,sBADtB;AAEjBxK,QAAAA,oBAAoB,EAAEgL,cAAc,CAAChL,oBAAf,CAAoCiF,QAApC,EAFL;AAGjB2G,QAAAA,mBAAmB,EAAEZ,cAAc,CAACY,mBAHnB;AAIjBhM,QAAAA,SAAS,EAAEoL,cAAc,CAACpL,SAJT;AAKjBqX,QAAAA,eAAe,EAAE;AACbd,UAAAA,qBAAqB,EAAEW,mBAAmB,CAAC,CAAD,CAAnB,CAAuBX,qBADjC;AAEbK,UAAAA,gBAAgB,EAAEM,mBAAmB,CAAC,CAAD,CAAnB,CAAuBN,gBAF5B;AAGb/L,UAAAA,QAAQ,EAAEO,cAAc,CAACP,QAHZ;AAIb7K,UAAAA,SAAS,EAAEoL,cAAc,CAACpL,SAJb;AAKb4K,UAAAA,sBAAsB,EAAEQ,cAAc,CAACR;AAL1B,SALA;AAYjB;AACAvK,QAAAA,QAAQ,EAAEwJ,QAbO;AAcjB/J,QAAAA,YAAY,EAAEA,YAdG;AAejBC,QAAAA,eAAe,EAAEA,eAfA;AAgBjBgB,QAAAA,0BAA0B,EAAEA,0BAhBX;AAkBjB+I,QAAAA,YAAY,EAAE,CAAC;AAlBE,OAArB;AAqBArK,MAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,MAAAA,KAAK,CAACoD,IAAN,CAAW,gDAAX,EAA6D3B,cAA7D,EAEK6B,IAFL,CAEUC,QAAQ,IAAI;AACd/B,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACL8G,YAAAA,cAAc,EAAE,EADX;AAELkM,YAAAA,YAAY,EAAElV,SAFT;AAGL2U,YAAAA,iBAAiB,EAAE,KAHd;AAILzL,YAAAA,SAAS,EAAE,KAJN;AAKL/G,YAAAA,OAAO,EAAE,KALJ;AAMLoJ,YAAAA,SAAS,EAAE;AANN;AAFJ,SAAD,CAAR;AAWH,OAdL,EAeKjJ,KAfL,CAeWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE,KADJ;AAELoJ,YAAAA,SAAS,EAAE;AAFN;AAFJ,SAAD,CAAR;;AAOA,YAAIhJ,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OA5BL;AA6BH,KAvDD,MAuDO;AAEHhC,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLyS,UAAAA,iBAAiB,EAAE,KADd;AAEL3L,UAAAA,cAAc,EAAE,EAFX;AAGL7G,UAAAA,OAAO,EAAE,KAHJ;AAILoJ,UAAAA,SAAS,EAAE;AAJN;AAFJ,OAAD,CAAR;AASH;AACJ,GAtED;AAuEH;AAED,OAAO,SAAS4J,WAAT,CAAqBhY,SAArB,EAAgCoC,cAAhC,EAAgDO,gBAAhD,EAAkEpC,YAAlE,EAAgFC,eAAhF,EAAiGgB,0BAAjG,EAA6H;AAChI,MAAIY,cAAc,KAAKS,SAAnB,IAAgCT,cAAc,CAACM,MAAf,GAAwB,CAA5D,EAA+D;AAC3D,WAAO,UAAUxC,QAAV,EAAoB;AACvB,UAAIC,cAAc,GAAG;AACjBW,QAAAA,QAAQ,EAAEd,SAAS,CAACc,QADH;AAEjBD,QAAAA,oBAAoB,EAAEuB,cAAc,GAAGA,cAAc,CAAC2B,GAAf,CAAmBE,IAAI,IAAIA,IAAI,CAACpD,oBAAhC,EAAsDqF,IAAtD,CAA2D,GAA3D,CAAH,GAAqE,EAFxF;AAGjBmJ,QAAAA,kBAAkB,EAAEjN,cAAc,GAAGA,cAAc,CAAC2B,GAAf,CAAmBE,IAAI,IAAIA,IAAI,CAACoL,kBAAhC,EAAoDnJ,IAApD,CAAyD,GAAzD,CAAH,GAAmE,EAHpF;AAIjBzF,QAAAA,SAAS,EAAE2B,cAAc,GAAGA,cAAc,CAAC2B,GAAf,CAAmBkU,QAAQ,IAAIA,QAAQ,CAACxX,SAAxC,EAAmDyF,IAAnD,CAAwD,GAAxD,CAAH,GAAkE,EAJ1E;AAKjB;AACA3F,QAAAA,YAAY,EAAEA,YANG;AAOjBC,QAAAA,eAAe,EAAEA,eAPA;AAQjB;AACAgB,QAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BATrB;AAUjB+I,QAAAA,YAAY,EAAEvK,SAAS,CAACuK;AAVP,OAArB;AAYArK,MAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,MAAAA,KAAK,CAACoD,IAAN,CAAW,wCAAX,EAAqD3B,cAArD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd/B,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,iBAAGW,QAAQ,CAACC,IAFJ;AAGRoB,cAAAA,cAAc,EAAEhE,oBAAoB,CAAC2C,QAAQ,CAACC,IAAT,CAAcoB,cAAf,EAA+BtD,SAAS,CAACsB,UAAV,CAAqBgC,cAApD,EAAoE,wBAApE,CAH5B;AAIRf,cAAAA,mBAAmB,EAAEvC,SAAS,CAACsB,UAAV,CAAqBiB;AAJlC,aADP;AAOLyC,YAAAA,OAAO,EAAE,KAPJ;AAQL7D,YAAAA,aAAa,EAAE,aARV;AASL4K,YAAAA,SAAS,EAAE,KATN;AAULqC,YAAAA,SAAS,EAAE;AAVN;AAFJ,SAAD,CAAR;AAeH,OAjBL,EAkBKjJ,KAlBL,CAkBWC,KAAK,IAAI;AACZlF,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE,KADJ;AAEL+G,YAAAA,SAAS,EAAE,KAFN;AAGLqC,YAAAA,SAAS,EAAE;AAHN;AAFJ,SAAD,CAAR;;AAQA,YAAIhJ,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,UAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH1G,UAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,OAhCL;AAiCH,KA/CD;AAgDH,GAjDD,MAiDO;AACHtD,IAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,MAAAA,EAAE,EAAE;AADsB,KAAnB,CAAX;AAGH;AAEJ;AAED,OAAO,SAAS4O,UAAT,CAAoBC,aAApB,EAAmC7N,QAAnC,EAA6ChJ,UAA7C,EAAyD4C,KAAzD,EAAgE2H,cAAhE,EAAgF;AACnF,SAAO,UAAU3L,QAAV,EAAoB;AAEvB,QAAIC,cAAc,GAAG;AACjBU,MAAAA,oBAAoB,EAAEsX,aAAa,CAACtX,oBADnB;AAEjBuX,MAAAA,YAAY,EAAED,aAAa,CAACE,yBAFX;AAGjBvX,MAAAA,QAAQ,EAAEwJ,QAHO;AAIjB7J,MAAAA,SAAS,EAAE0X,aAAa,CAAC1X,SAJR;AAKjBuF,MAAAA,sBAAsB,EAAEmS,aAAa,CAACnS;AALrB,KAArB;AAUA9F,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,sCAAX,EAAmD3B,cAAnD,EACK6B,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMqW,0BAA0B,GAAGrW,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCxU,GAAnC,CAAuC,CAACW,IAAD,EAAOR,KAAP,KAAiB;AACvF,eAAO;AACH,qBAAW,mBADR;AAEH,uBAAaA,KAFV;AAGH,uBAAa;AAHV,SAAP;AAKH,OANkC,CAAnC;AAQA,UAAIsU,qBAAqB,GAAG,EAA5B;AACA,UAAIC,sBAAsB,GAAG,EAA7B;AACA,UAAIC,iBAAiB,GAAG,EAAxB,CAZc,CAa3B;;AAEazW,MAAAA,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCxU,GAAnC,CAAuC,CAAC4U,MAAD,EAASzU,KAAT,KAAmB;AACtD,YAAI0U,oBAAoB,GAAG,EAA3B;AACA,YAAIC,sBAAsB,GAAGzZ,8BAA8B,CAACyM,cAAc,CAACZ,eAAhB,EAAiC0N,MAAM,CAACG,wBAAxC,EAAkE,oBAAlE,CAA3D;;AAEA,YAAID,sBAAsB,CAACnW,MAAvB,GAAgC,CAApC,EAAuC;AAEnCmW,UAAAA,sBAAsB,GAAGA,sBAAsB,CAAChU,MAAvB,CAA8BkU,OAAO,IAAI;AAC9D,mBAAOA,OAAO,CAACC,OAAR,KAAoB,IAApB,IAA4BD,OAAO,CAACC,OAAR,IAAmB,EAAtD;AACH,WAFwB,CAAzB;AAIA,gBAAMC,cAAc,GAAGJ,sBAAsB,CAACnW,MAA9C;AAEA,gBAAMwW,aAAa,GAAGL,sBAAsB,CAACnW,MAAvB,GAAgC,CAAhC,GAAoCyW,IAAI,CAACC,GAAL,CAAS,GAAGP,sBAAsB,CAAC9U,GAAvB,CAA2BsV,CAAC,IAAIA,CAAC,CAAChO,sBAAlC,CAAZ,CAApC,GAA6G,CAAC,CAApI,CARmC,CAWnC;AACA;AACA;;AAEA,gBAAMiO,UAAU,GAAGla,8BAA8B,CAACyZ,sBAAD,EAAyBK,aAAzB,EAAwC,wBAAxC,CAAjD;;AACA,cAAII,UAAU,CAAC5W,MAAX,IAAqB,CAAzB,EAA4B;AACxBkW,YAAAA,oBAAoB,CAACW,OAArB,GAA+B,EAA/B;AACAX,YAAAA,oBAAoB,CAACY,UAArB,GAAkCvX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CuV,YAA5E,CAFwB,CAGxB;;AACAb,YAAAA,oBAAoB,CAACc,cAArB,GAAsC,KAAtC;AACAzX,YAAAA,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0C+U,cAA1C,GAA2D,CAA3D;AACAT,YAAAA,qBAAqB,CAACjB,IAAtB,CAA2BqB,oBAA3B;AACAF,YAAAA,iBAAiB,CAACnB,IAAlB,CAAuB,EAAvB;AAEH,WATD,MAUK;AACD,gBAAI,CAAC2B,aAAa,IAAIjX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CmH,sBAA3D,IAAqFiO,UAAU,CAAC5W,MAAX,GAAoB,CAAzG,GAA6G4W,UAAU,CAAC,CAAD,CAAV,CAAcN,OAAd,IAAyB,EAAtI,GAA2I,KAA5I,MACI/W,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAA1C,IAAoD,EAApD,IAA0D1X,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAA1C,IAAoD,IAA9G,GACET,aAAa,IAAIjX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CmH,sBAA3D,IAAqFiO,UAAU,CAAC5W,MAAX,GAAoB,CAAzG,GAA6G4W,UAAU,CAAC,CAAD,CAAV,CAAcN,OAAd,IAAyB,EAAtI,GAA2I,KAD7I,GACqJ,EAFzJ,CAAJ,EAEkK;AAC9JJ,cAAAA,oBAAoB,CAACW,OAArB,GAA+BD,UAAU,CAAC,CAAD,CAAV,CAAcN,OAA7C;AACAJ,cAAAA,oBAAoB,CAACY,UAArB,GAAkCvX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CuV,YAA5E;AACAb,cAAAA,oBAAoB,CAACY,UAArB,GAAkCvX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CuV,YAA5E,CAH8J,CAI9J;;AACAb,cAAAA,oBAAoB,CAACc,cAArB,GAAsC,KAAtC;AACAzX,cAAAA,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0C+U,cAA1C,GAA2DA,cAA3D;AACAT,cAAAA,qBAAqB,CAACjB,IAAtB,CAA2BqB,oBAA3B;AACAF,cAAAA,iBAAiB,CAACnB,IAAlB,CAAuB+B,UAAU,CAAC,CAAD,CAAV,CAAcN,OAArC;AACH,aAXD,MAYK;AACDJ,cAAAA,oBAAoB,CAACW,OAArB,GAA+BtX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAAzE;AACAf,cAAAA,oBAAoB,CAACY,UAArB,GAAkCvX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CuV,YAA5E,CAFC,CAGD;;AACAb,cAAAA,oBAAoB,CAACc,cAArB,GAAsC,KAAtC;AACAlB,cAAAA,qBAAqB,CAACjB,IAAtB,CAA2BqB,oBAA3B;AACAF,cAAAA,iBAAiB,CAACnB,IAAlB,CAAuBtV,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAAjE;AACH;AACJ;AAEJ,SAjDD,MAkDK;AACDf,UAAAA,oBAAoB,CAACW,OAArB,GAA+BtX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAAzE;AACAf,UAAAA,oBAAoB,CAACY,UAArB,GAAkCvX,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CuV,YAA5E,CAFC,CAGD;;AACAjB,UAAAA,qBAAqB,CAACjB,IAAtB,CAA2BqB,oBAA3B;AACAF,UAAAA,iBAAiB,CAACnB,IAAlB,CAAuBtV,QAAQ,CAACC,IAAT,CAAcqW,oBAAd,CAAmCrU,KAAnC,EAA0CyV,MAAjE;AACH;;AACD,eAAOlB,sBAAsB,CAAClB,IAAvB,CAA4B1L,cAAc,CAACZ,eAAf,CAA+BpG,MAA/B,CAAsC8B,CAAC,IAAIA,CAAC,CAACiT,kBAAF,KAAyBjB,MAAM,CAACG,wBAA3E,EAAqG,CAArG,CAA5B,CAAP;AAGH,OAhED;AAkEA5Y,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKL2J,UAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZsM,YAAAA,aAAa,EAAEA,aAFH;AAGZ0B,YAAAA,sBAAsB,EAAE1B,aAAa,CAAC2B,eAH1B;AAIZC,YAAAA,yBAAyB,EAAE9X,QAAQ,CAACC,IAAT,CAAc8X,KAJ7B;AAKZC,YAAAA,YAAY,EAAEhY,QAAQ,CAACC,IAAT,CAAcgY,OALhB;AAMZC,YAAAA,WAAW,EAAEjW,KAND;AAOZqU,YAAAA,oBAAoB,EAAEtW,QAAQ,CAACC,IAAT,CAAcqW,oBAPxB;AAQZ;AACA;AACA;AACA;AAEA;AAEA;AACA;AACAC,YAAAA,qBAjBY;AAkBZE,YAAAA,iBAlBY,CAmBZ;AACA;;AApBY,WALX;AA2BLJ,UAAAA,0BA3BK;AA4BLtT,UAAAA,OAAO,EAAE,KA5BJ;AA6BLwC,UAAAA,UAAU,EAAE,mBA7BP;AA8BL4S,UAAAA,WAAW,EAAE,IA9BR;AA+BLpO,UAAAA,SAAS,EAAE,UA/BN;AAgCLqO,UAAAA,YAAY,EAAE;AAhCT;AAFJ,OAAD,CAAR;AAqCH,KAvHL,EAwHKlV,KAxHL,CAwHWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KApIL;AAqIH,GAlJD;AAmJH;AAED,OAAO,SAASoY,gBAAT,CAA0BC,cAA1B,EAA0C;AAC7C,SAAO,UAAUra,QAAV,EAAoB;AACvB,UAAMF,SAAS,GAAG;AACda,MAAAA,oBAAoB,EAAE0Z,cAAc,CAAC1O,cAAf,CAA8BsM,aAA9B,CAA4CtX,oBADpD;AAEdwK,MAAAA,sBAAsB,EAAEkP,cAAc,CAAC1O,cAAf,CAA8BsM,aAA9B,CAA4C9M,sBAFtD;AAGd5K,MAAAA,SAAS,EAAE8Z,cAAc,CAAC1O,cAAf,CAA8BsM,aAA9B,CAA4C1X,SAHzC;AAId+Z,MAAAA,uBAAuB,EAAED,cAAc,CAAC1O,cAAf,CAA8BkO,yBAJzC;AAKd3B,MAAAA,YAAY,EAAEmC,cAAc,CAAC1O,cAAf,CAA8BsM,aAA9B,CAA4CE,yBAL5C;AAMdvX,MAAAA,QAAQ,EAAEyZ,cAAc,CAACjQ,QANX;AAOdsO,MAAAA,oBAAoB,EAAE2B,cAAc,CAACE;AAPvB,KAAlB;AAUAva,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,6BAAX,EAA0C9B,SAA1C,EACKgC,IADL,CACUC,QAAQ,IAAI;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAsY,MAAAA,cAAc,CAACtP,eAAf,CAA+BsP,cAAc,CAAC1O,cAAf,CAA8BsO,WAA7D,EAA0E,QAA1E,IAAsFlY,QAAQ,CAACC,IAAT,CAAcwY,MAApG;AACAH,MAAAA,cAAc,CAACtP,eAAf,CAA+BsP,cAAc,CAAC1O,cAAf,CAA8BsO,WAA7D,EAA0E,SAA1E,IAAuFlY,QAAQ,CAACC,IAAT,CAAcwY,MAArG;AACAH,MAAAA,cAAc,CAACtP,eAAf,CAA+BsP,cAAc,CAAC1O,cAAf,CAA8BsO,WAA7D,EAA0E,UAA1E,IAAwF,IAAxF;AACAI,MAAAA,cAAc,CAACtP,eAAf,CAA+BsP,cAAc,CAAC1O,cAAf,CAA8BsO,WAA7D,EAA0E,mBAA1E,IAAiG,CAAjG;AACAI,MAAAA,cAAc,CAACzP,mBAAf,CAAmCyP,cAAc,CAAC1O,cAAf,CAA8BsO,WAAjE,IAAgF;AAC5E/O,QAAAA,UAAU,EAAEpM,YAAY,CAACub,cAAc,CAAC1O,cAAf,CAA8BsM,aAA/B,EAA8CwC,QAAQ,CAAC1Y,QAAQ,CAACC,IAAT,CAAcwY,MAAf,CAAtD;AADoD,OAAhF;AAIAxa,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGiZ,cAAc,CAACjZ,UADV,CAER;AACA;AACA;;AAJQ,WADP;AAOLuK,UAAAA,cAAc,EAAE;AACZf,YAAAA,mBAAmB,EAAEyP,cAAc,CAACzP,mBADxB;AAEZG,YAAAA,eAAe,EAAEsP,cAAc,CAACtP;AAFpB,WAPX;AAWHD,UAAAA,gBAAgB,EAACuP,cAAc,CAACtP,eAX7B;AAYLa,UAAAA,wBAAwB,EAAC,IAZpB;AAaL9G,UAAAA,OAAO,EAAE,KAbJ;AAcLwC,UAAAA,UAAU,EAAE,iBAdP;AAeL4S,UAAAA,WAAW,EAAE,KAfR;AAgBLpO,UAAAA,SAAS,EAAE,QAhBN;AAiBLqO,UAAAA,YAAY,EAAE;AAjBT;AAFJ,OAAD,CAAR;AAsBH,KA3CL,EA4CKlV,KA5CL,CA4CWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AAAE4E,QAAAA,IAAI,EAAEnG,cAAR;AAAwBoG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH;AACA1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAAf,CAAoB,QAApB,CAAX;AACH;AACJ,KApDL;AAqDH,GAjED;AAkEH;AAED,OAAO,SAAS0Y,mBAAT,CAA6B5a,SAA7B,EAAwC;AAC3C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,yCAAX,EAAsD9B,SAAtD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGR2Y,YAAAA,mBAAmB,EAAE7a,SAAS,CAAC6a,mBAHvB;AAIRlS,YAAAA,0BAA0B,EAAE3I,SAAS,CAACsB,UAAV,CAAqBqH,0BAJzC;AAIoE;AAC5EnH,YAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BAL9B;AAMRsZ,YAAAA,0BAA0B,EAAE9a,SAAS,CAAC8a;AAN9B,WADP;AASL9V,UAAAA,OAAO,EAAE;AATJ;AAFJ,OAAD,CAAR;AAcH,KAhBL,EAiBKG,KAjBL,CAiBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAhCD;AAiCH;AAED,OAAO,SAAS6Y,mBAAT,CAA6B/a,SAA7B,EAAwC;AAC3C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,yCAAX,EAAsD9B,SAAtD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ;AAGRyG,YAAAA,0BAA0B,EAAE3I,SAAS,CAACsB,UAAV,CAAqBqH,0BAHzC;AAGoE;AAC5EnH,YAAAA,0BAA0B,EAAExB,SAAS,CAACwB,0BAJ9B;AAKRsZ,YAAAA,0BAA0B,EAAE9a,SAAS,CAAC8a;AAL9B,WADP;AAQL9V,UAAAA,OAAO,EAAE;AARJ;AAFJ,OAAD,CAAR;AAaH,KAfL,EAgBKG,KAhBL,CAgBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AAED,OAAO,SAAS8Y,sBAAT,CAAgChb,SAAhC,EAA2CsB,UAA3C,EAAuD;AAC1D,SAAO,UAAUpB,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,4CAAX,EAAyD9B,SAAzD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERmB,YAAAA,OAAO,EAAEnD,oBAAoB,CAAC2C,QAAQ,CAACC,IAAT,CAAcO,OAAf,EAAwBnB,UAAU,CAACmB,OAAnC,EAA4C,sBAA5C;AAFrB,WADP;AAKLuC,UAAAA,OAAO,EAAE,KALJ;AAML+G,UAAAA,SAAS,EAAE,KANN;AAOLqC,UAAAA,SAAS,EAAE,KAPN,CASL;;AATK;AAFJ,OAAD,CAAR;AAcH,KAhBL,EAiBKjJ,KAjBL,CAiBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAhCD;AAiCH;AAED,OAAO,SAAS+Y,gBAAT,CAA0Bjb,SAA1B,EAAqCsB,UAArC,EAAiD;AACpD,SAAO,UAAUpB,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,0CAAX,EAAuD9B,SAAvD,EACKgC,IADL,CACUC,QAAQ,IAAI;AAGd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA;AADK,WADP;AAIL0D,UAAAA,OAAO,EAAE,KAJJ;AAKL+G,UAAAA,SAAS,EAAE,KALN,CAML;;AANK;AAFJ,OAAD,CAAR;;AAYA,UAAI9J,QAAQ,CAACC,IAAT,CAAcgZ,YAAd,IAA8BjZ,QAAQ,CAACC,IAAT,CAAcgZ,YAAd,KAA+B,EAAjE,EAAqE;AACjEtc,QAAAA,KAAK,CAACuc,IAAN,CAAWlZ,QAAQ,CAACC,IAAT,CAAcgZ,YAAzB;AACH,OAFD,MAGK;AACDtc,QAAAA,KAAK,CAAC2G,IAAN,CAAWtD,QAAQ,CAACC,IAAT,CAAcgZ,YAAzB;AACH;AACJ,KAtBL,EAuBK/V,KAvBL,CAuBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAnCL;AAoCH,GAtCD;AAuCH;AAED,OAAO,SAASkZ,+BAAT,CAAyClP,UAAzC,EAAqD;AACxD,SAAQhM,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOH,KAAK,CAACoD,IAAN,CAAW,+BAAX,EAA4CoK,UAAU,CAAClM,SAAvD,EACFgC,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,KAAkB,SAAtB,EAAiC;AAI7B,cAAMmZ,SAAS,GAAG,eAAlB;AACAnP,QAAAA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,UAApD,IAAkEA,UAAU,CAAClM,SAAX,CAAqBc,QAAvF;;AAEA,YAAIoL,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,KACApP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CADJ,EACmG;AAC/F,iBAAOpP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,iBAAOpP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,iBAAOpP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,EAA6E,aAA7E,CAAP;AACA,iBAAOpP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDmP,SAAS,CAACC,WAAV,EAApD,EAA6E,OAA7E,CAAP;AACH;;AACD,YAAIpP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,cAA5D,EAA4E;AACxEhM,UAAAA,QAAQ,CAAC2O,SAAS,CAAC3C,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAAD,EAAyCA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,CAAzC,EAAmGA,UAAU,CAAClM,SAAX,CAAqBc,QAAxH,CAAV,CAAR;AACH,SAFD,MAGK,IAAIoL,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,UAA5D,EAAwE;AACzEhM,UAAAA,QAAQ,CAAC+L,YAAY,CAACC,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAAD,EAAyCA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,CAAzC,EAAmGA,UAAU,CAAClM,SAAX,CAAqBc,QAAxH,EAAiI,EAAjI,EAAoI,EAApI,EAAuI;AAACyL,YAAAA,gBAAgB,EAACL,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,kBAAvC;AAAlB,WAAvI,CAAb,CAAR;AACH,SAFI,MAEE,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,SAA5D,EAAuE;AAC1EhM,UAAAA,QAAQ,CAAC8X,WAAW,CAAC9L,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,qBAAvC,CAAD,EAAgEA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,CAAhE,EAA0HA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,kBAAvC,CAA1H,EAAsLA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,cAApD,CAAtL,EAA2PA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,iBAApD,CAA3P,CAAZ,CAAR;AACH,SAFM,MAEA,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,kBAA5D,EAAgF;AACnFhM,UAAAA,QAAQ,CAACgU,sBAAsB,CAAChI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,CAAD,CAAvB,CAAR;AACH,SAFM,MAEA,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,cAA5D,EAA4E;AAC/EhM,UAAAA,QAAQ,CAAC8a,sBAAsB,CAAC9O,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,CAAD,EAAsDA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,YAAvC,CAAtD,CAAvB,CAAR;AACH,SAFM,MAEA,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,YAA5D,EAA0E;AAC7EhM,UAAAA,QAAQ,CAAC4V,gBAAgB,CAAC5J,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,CAAD,CAAjB,CAAR;AACH,SAFM,MAEA,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,MAAwD,yBAA5D,EAAuF;AAC1FhM,UAAAA,QAAQ,CAACgQ,uBAAuB,CAAChE,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,CAAD,EAAsDA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,YAAvC,CAAtD,CAAxB,CAAR;AACH,SAFM,MAEA,IAAIA,UAAU,CAAC,YAAD,CAAV,CAAyB,WAAzB,MAA0C,iBAA9C,EAAiE;AACpE,cAAI;AAAEL,YAAAA,cAAF;AAAkBvB,YAAAA,QAAlB;AAA4B/J,YAAAA,YAA5B;AAA0CC,YAAAA,eAA1C;AAA2DgB,YAAAA;AAA3D,cAA0F0K,UAAU,CAAC,YAAD,CAAxG;AACA,iBAAOL,cAAc,CAAC0P,aAAtB;AACA,iBAAO1P,cAAc,CAAC2P,aAAtB;AACA,iBAAO3P,cAAc,CAAC4P,WAAtB;AACA,iBAAO5P,cAAc,CAAC6P,KAAtB;AACA,iBAAOxP,UAAU,CAAClM,SAAX,CAAqB2b,QAA5B;AACArR,UAAAA,QAAQ,GAAG4B,UAAU,CAAClM,SAAX,CAAqBc,QAAhC;AACAZ,UAAAA,QAAQ,CAACwX,eAAe,CAAC7L,cAAD,EAAiBvB,QAAjB,EAA2B/J,YAA3B,EAAyCC,eAAzC,EAA0DgB,0BAA1D,CAAhB,CAAR;AACH;AACJ;AACJ,KA1CE,EA2CF2D,KA3CE,CA2CIC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvDE,CAAP;AAwDH,GA1DD;AA2DH;AAED,OAAO,SAAS0Z,+BAAT,CAAyCC,SAAzC,EAAoD;AACvD,SAAQ3b,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMmB,SAAS,GAAG;AACdS,MAAAA,SAAS,EAAEob,SAAS,CAAChQ,cAAV,CAAyBpL,SADtB;AAEd4K,MAAAA,sBAAsB,EAAEwQ,SAAS,CAAChQ,cAAV,CAAyBR,sBAFnC;AAGdvK,MAAAA,QAAQ,EAAE+a,SAAS,CAACvR;AAHN,KAAlB;AAKA,WAAO5L,KAAK,CAACoD,IAAN,CAAW,qDAAX,EAAkE9B,SAAlE,EACFgC,IADE,CACGC,QAAQ,IAAI;AAEd,YAAMqC,IAAI,GAAGrC,QAAQ,CAACC,IAAT,IAAiB,EAA9B,CAFc,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAhC,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AACiBoG,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,OAAO,EAAE,KADkB;AACX+G,UAAAA,SAAS,EAAE,IADA;AAE3B+P,UAAAA,qBAAqB,EAAExX,IAFI;AAG3BkD,UAAAA,UAAU,EAAE,mBAHe;AAI3B+C,UAAAA,YAAY,EAAEsR,SAAS,CAAC/G,YAJG;AAK3BiH,UAAAA,yBAAyB,EAAEF,SAAS,CAAChQ;AALV;AAD1B,OAAD,CAAR;AASH,KArBE,EAsBF1G,KAtBE,CAsBIC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AAAE4E,QAAAA,IAAI,EAAEnG,cAAR;AAAwBoG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BE,CAAP;AA8BH,GArCD;AAsCH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8Z,gBAAT,CAA0B7D,aAA1B,EAAyCjU,KAAzC,EAAgDsU,qBAAhD,EAAuElO,QAAvE,EAAiFhJ,UAAjF,EAA6FuK,cAA7F,EAA6G;AAChH,SAAO,UAAU3L,QAAV,EAAoB;AAEvB,QAAI2Y,sBAAsB,GAAGhN,cAAc,CAACZ,eAAf,CAA+BpG,MAA/B,CAAsCkU,OAAO,IAAI;AAC1E,aAAOA,OAAO,CAACkD,QAAR,IAAoB,IAA3B;AACH,KAF4B,CAA7B;AAIApD,IAAAA,sBAAsB,GAAGzZ,8BAA8B,CAACyZ,sBAAD,EAAyBhN,cAAc,CAACsM,aAAf,CAA6BnS,sBAAtD,EAA8E,wBAA9E,CAAvD;AACA6S,IAAAA,sBAAsB,GAAGzZ,8BAA8B,CAACyZ,sBAAD,EAAyBV,aAAa,CAACW,wBAAvC,EAAiE,oBAAjE,CAAvD;AAEA,QAAIoD,kBAAkB,GAAG,EAAzB;;AACA,QAAIrD,sBAAsB,CAACnW,MAAvB,GAAgC,CAApC,EAAuC;AACnCmW,MAAAA,sBAAsB,CAAC9U,GAAvB,CAA2BoY,SAAS,IAAI;AACpC,YAAIC,qBAAqB,GAAG,EAA5B;AACAA,QAAAA,qBAAqB,CAAC/Q,sBAAtB,GAA+C8Q,SAAS,CAAC9Q,sBAAzD;AACA+Q,QAAAA,qBAAqB,CAACpD,OAAtB,GAAgCmD,SAAS,CAACnD,OAA1C;AACAoD,QAAAA,qBAAqB,CAACxC,kBAAtB,GAA2CuC,SAAS,CAACvC,kBAArD;AACAsC,QAAAA,kBAAkB,CAAC3E,IAAnB,CAAwB6E,qBAAxB;AACH,OAND;AAQH;;AAED,QAAIjc,cAAc,GAAG;AACjB0Z,MAAAA,sBAAsB,EAAEhO,cAAc,CAACgO,sBADtB;AAEjBhZ,MAAAA,oBAAoB,EAAEsX,aAAa,CAACtX,oBAFnB;AAGjB+Y,MAAAA,kBAAkB,EAAEzB,aAAa,CAACW,wBAHjB;AAIjBhY,MAAAA,QAAQ,EAAEwJ,QAJO;AAKjBtE,MAAAA,sBAAsB,EAAEmS,aAAa,CAACnS,sBALrB;AAMjBiF,MAAAA,eAAe,EAAEiR;AANA,KAArB;AAQAhc,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,sCAAX,EAAmD3B,cAAnD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACduW,MAAAA,qBAAqB,CAACtU,KAAD,CAArB,CAA6BmY,SAA7B,GAA0C7D,qBAAqB,CAACtU,KAAD,CAArB,CAA6BqV,OAAvE;AACAf,MAAAA,qBAAqB,CAACtU,KAAD,CAArB,CAA6BqV,OAA7B,GAAuCtX,QAAQ,CAACC,IAAT,CAAcoa,aAAd,CAA4BtD,OAAnE;AACAR,MAAAA,qBAAqB,CAACtU,KAAD,CAArB,CAA6BwV,cAA7B,GAA8C,IAA9C,CAHc,CAId;;AAEAxZ,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAER,eAAGW,QAAQ,CAACC;AAFJ,WADP;AAKL2J,UAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ2M,YAAAA;AAFY,WALX;AASL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxT,UAAAA,OAAO,EAAE,KAnBJ;AAoBLwC,UAAAA,UAAU,EAAE,mBApBP;AAqBL4S,UAAAA,WAAW,EAAE,IArBR;AAsBLpO,UAAAA,SAAS,EAAE,UAtBN;AAuBLqO,UAAAA,YAAY,EAAE;AAvBT;AAFJ,OAAD,CAAR;AA4BH,KAnCL,EAoCKlV,KApCL,CAoCWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAhDL;AAiDH,GA/ED;AAkFH,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,SAASqa,iBAAT,CAA2Bvc,SAA3B,EAAqC6L,cAArC,EAAoD2Q,sBAApD,EAA2Elb,UAA3E,EAAsFmb,+BAAtF,EAAuH;AAC1H,SAAO,UAAUvc,QAAV,EAAoB;AACvB,QAAIC,cAAc,GAAG;AACjBuc,MAAAA,wBAAwB,EAAE1c,SAAS,CAAC0c;AADnB,KAArB;AAGAxc,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,uCAAX,EAAoD3B,cAApD,EACK6B,IADL,CACUC,QAAQ,IAAI;AACd,UAAI0a,oBAAoB,GAAC,KAAzB;AACA,UAAI1R,eAAe,GAACY,cAAc,CAAC,iBAAD,CAAlC;AACA,UAAI+Q,qBAAqB,GAAC,KAA1B;AACA,UAAIC,4BAA4B,GAAC5a,QAAQ,CAACC,IAAT,CAAc,8BAAd,CAAjC;;AACA,UAAGlC,SAAS,CAAC,qBAAD,CAAT,KAAmCF,iBAAiB,CAACmT,GAAxD,EAA4D;AACxD0J,QAAAA,oBAAoB,GAAC,IAArB;AACArb,QAAAA,UAAU,CAAC,qCAAD,CAAV,GAAkDub,4BAAlD;AACH,OAHD,MAKA;AACID,QAAAA,qBAAqB,GAAC,IAAtB;AACH,OAZa,CAaf;;;AACK,WAAI,MAAMT,SAAV,IAAuBlR,eAAvB,EACA;AACI,YAAGkR,SAAS,CAACW,oBAAV,IAAgCX,SAAS,CAACW,oBAAV,KAAiC,EAApE,EAAuE;AACnE,cAAIA,oBAAoB,GAAC,OAAOX,SAAS,CAACW,oBAAjB,KAAwC,QAAxC,GAAiDX,SAAS,CAACW,oBAAV,KAAiC,EAAjC,GAAoC,EAApC,GAAuCvR,IAAI,CAACC,KAAL,CAAW2Q,SAAS,CAACW,oBAArB,CAAxF,GACzBX,SAAS,CAACW,oBADV;;AAEA,cAAGX,SAAS,CAAC,wBAAD,CAAT,KAAsCK,sBAAtC,IACHL,SAAS,CAAC,0BAAD,CAAT,KAAwCnc,SAAS,CAAC,0BAAD,CADjD,EAC8E;AAC9E,gBAAGmc,SAAS,CAACW,oBAAb,EAAkC;AAC9BjR,cAAAA,cAAc,CAAC,6BAAD,CAAd,GAA8CiR,oBAAoB,CAAC,6BAAD,CAAlE;AACA;AACH;AACA,WAND,MAMK;AACL,gBAAGjR,cAAc,CAAC,6BAAD,CAAjB,EAAiD;AAC7C,qBAAOA,cAAc,CAAC,6BAAD,CAArB;AACH;AACA;AACJ;AAEJ;;AAAA;AACLvK,MAAAA,UAAU,CAAC,eAAD,CAAV,GAA4BtB,SAAS,CAAC+c,aAAtC;AACA7c,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAEN1D,UAAAA,UAFM;AAGL0b,UAAAA,SAAS,EAAEhd,SAAS,CAACid,qBAAV,KAAkCnd,iBAAiB,CAACod,EAApD,GAAuD,KAAvD,GAA6D,IAHnE;AAIJhP,UAAAA,sBAAsB,EAAE,IAJpB;AAKJyO,UAAAA,oBALI;AAMJC,UAAAA,qBANI;AAOJzO,UAAAA,kBAAkB,EAAC,KAPf;AAQJtC,UAAAA,cARI;AASJ2Q,UAAAA,sBATI;AAUJC,UAAAA;AAVI;AAFJ,OAAD,CAAR;AAeH,KAlDL,EAmDKtX,KAnDL,CAmDWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA/DL;AAgEH,GArED;AAuEH;AAGD,OAAO,SAASib,oBAAT,CAA8Bnd,SAA9B,EAAwCod,mBAAxC,EAA6D;AAChE,SAAO,UAAUld,QAAV,EAAoB;AACvB;AACA;AACA,UAAMmd,MAAM,GAAG;AAAC5c,MAAAA,SAAS,EAACT,SAAS,CAACiE,IAAV,CAAexD,SAA1B;AACXI,MAAAA,oBAAoB,EAACb,SAAS,CAACiE,IAAV,CAAgBpD,oBAD1B;AAEXyJ,MAAAA,QAAQ,EAACtK,SAAS,CAACsK;AAFR,KAAf;AAKApK,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,0CAAX,EAAuDub,MAAvD,EACKrb,IADL,CACUC,QAAQ,IAAI;AACd,UAAIqb,OAAO,GAAG,EAAd;;AACA,UAAGrb,QAAQ,CAACC,IAAZ,EACA;AAEQ,YAAIqb,IAAI,GAAG,EAAX;AAEA,YAAIC,MAAM,GAAG3d,iBAAiB,CAAC,WAAD,CAAjB,CAA+B4d,WAA5C,CAJR,CAKQ;AACA;AACD;;AAEA,cAAMC,QAAQ,GAAG1d,SAAS,CAACiE,IAAV,CAAexD,SAAf,GAA0B,GAA1B,GAA+BT,SAAS,CAACiE,IAAV,CAAe+B,sBAA9C,GAAsE,GAAtE,GAA2EhG,SAAS,CAACiE,IAAV,CAAelD,SAA1F,GAAoG,GAApG,GAAyGf,SAAS,CAACiE,IAAV,CAAe0Z,aAAxH,GAAsI,GAAtI,GAA2I3d,SAAS,CAACiE,IAAV,CAAe2Z,aAA1J,GAAwK,GAAxK,GAA4K5d,SAAS,CAACsK,QAAV,CAAmBuT,SAAhN,CATP,CAUO;;AACA,YAAIC,gBAAgB,GAAGje,iBAAiB,CAAC6d,QAAD,CAAjB,CAA4BD,WAAnD;AACC,cAAMM,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEhe,SAAS,CAACie,WAAV,CAAsBC,QADjB;AAEfC,UAAAA,QAAQ,EAAEne,SAAS,CAACie,WAAV,CAAsBG,UAFjB;AAGfC,UAAAA,YAAY,EAAEre,SAAS,CAACie,WAAV,CAAsBK,YAHrB;AAIfC,UAAAA,WAAW,EAAE;AACbC,YAAAA,aAAa,EAAExe,SAAS,CAACie,WAAV,CAAsBQ,iBADxB;AAEbC,YAAAA,aAAa,EAAE1e,SAAS,CAACie,WAAV,CAAsBQ;AAFxB,WAJE;AAQfE,UAAAA,YAAY,EAAC;AACbC,YAAAA,QAAQ,EAAE5e,SAAS,CAAC6e,OAAV,CAAkBC;AADf;AARE,SAAnB;AAYA,YAAIC,aAAa,GAAGlf,iBAAiB,CAACke,UAAD,CAAjB,CAA8BN,WAAlD,CAxBR,CA0BQ;;AACA,cAAMuB,OAAO,GAAG5B,mBAAmB,CAAC,CAAD,CAAnB,CAAuB6B,SAAvC;AAEA1B,QAAAA,IAAI,GAAGyB,OAAO,GAAG,YAAV,GAAyB,SAAzB,GAAqCtB,QAArC,GAAgD,YAAhD,GAA+DqB,aAA/D,GAA+E,eAA/E,GAAiGjB,gBAAjG,GAAoH,IAA3H,CA7BR,CA8BQ;AACA;AACA;AACA;AACrB;AAEH;AAEA;AAEA;AAEA;AAEuB;AACC;AACD;AACC;;AACA5d,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER;AACA,iBAAGW,QAAQ,CAACC,IAHJ;AAIRob,cAAAA,OAAO,EAACC;AAJA,aADP;AAOL2B,YAAAA,YAAY,EAAE,IAPT;AAQLla,YAAAA,OAAO,EAAE,KARJ;AASLsY,YAAAA,OAAO,EAACC,IATH,CAUN;;AAVM;AAFJ,SAAD,CAAR,CAhDR,CA+DS;AAKR,OArED,MAqEK;AACD3e,QAAAA,KAAK,CAAC2G,IAAN,CAAWzG,IAAI,CAACuK,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE;AADsB,SAAnB,CAAX;AAIApJ,QAAAA,QAAQ,CAAC;AACL4E,UAAAA,IAAI,EAAEnG,cADD;AAELoG,UAAAA,OAAO,EAAE;AACLzD,YAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER;AACA,iBAAGW,QAAQ,CAACC,IAHJ;AAIRob,cAAAA,OAAO,EAAC;AAJA,aADP;AAOLA,YAAAA,OAAO,EAAC,EAPH;AAQLtY,YAAAA,OAAO,EAAE;AARJ;AAFJ,SAAD,CAAR;AAcH;AAEJ,KA7FL,EA8FKG,KA9FL,CA8FWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA1GL;AA2GH,GApHD;AAqHH;AAID,OAAO,SAASid,sBAAT,CAAgCnf,SAAhC,EAA2C;AAC9C,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,4CAAX,EAAyD9B,SAAzD,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ,CAGR;AACA;AACA;;AALQ,WADP;AAQL8C,UAAAA,OAAO,EAAE;AARJ;AAFJ,OAAD,CAAR;AAaH,KAfL,EAgBKG,KAhBL,CAgBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA5BL;AA6BH,GA/BD;AAgCH;AAID,OAAO,SAASkd,yBAAT,CAAmCpf,SAAnC,EAA8C;AACjD,SAAO,UAAUE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACoD,IAAN,CAAW,+CAAX,EAA4D9B,SAA5D,EACKgC,IADL,CACUC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE,EACR,GAAGtB,SAAS,CAACsB,UADL;AAER,eAAGW,QAAQ,CAACC,IAFJ,CAGT;AACC;AACA;AACA;;AANQ,WADP;AASL8C,UAAAA,OAAO,EAAE;AATJ;AAFJ,OAAD,CAAR;AAcH,KAhBL,EAiBKG,KAjBL,CAiBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAhCD;AAiCH;AAMD,OAAO,SAASmd,kBAAT,CAA4BC,YAA5B,EAA0C;AAC7C,SAAO,UAAUpf,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOH,KAAK,CAACoD,IAAN,CAAW,sCAAX,EAAmDwd,YAAnD,EACFtd,IADE,CACGC,QAAQ,IAAI;AAEd,UAAIsd,aAAa,GAAGtgB,mBAAmB,CAACgD,QAAQ,CAACC,IAAT,CAAc,eAAd,KAAkC,EAAnC,EAAuC,oBAAvC,EAA6D,mBAA7D,EACvCW,SADuC,EAC5BA,SAD4B,EACjBA,SADiB,CAAvC;AAEA0c,MAAAA,aAAa,GAAGA,aAAa,CAAC3T,GAAd,CAAkB,YAAlB,CAAhB;AAEA1L,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAEL1D,UAAAA,UAAU,EAAE,EACR,GAAGge,YAAY,CAAChe,UADR;AAERie,YAAAA,aAAa,EAAGA;AAFR,WAFP;AAML/X,UAAAA,UAAU,EAAC,oBANN;AAOLgY,UAAAA,wBAAwB,EAAEF,YAAY,CAACze,oBAPlC;AAQL4e,UAAAA,aAAa,EAACH,YAAY,CAAC7e,SARtB;AASLsL,UAAAA,SAAS,EAAC,IATL;AAULC,UAAAA,SAAS,EAAC,SAVL;AAWLH,UAAAA,cAAc,EAAC,EAXV;AAYL6T,UAAAA,OAAO,EAACJ,YAAY,CAACI;AAZhB;AAFJ,OAAD,CAAR;AAiBH,KAxBE,EAyBFva,KAzBE,CAyBIC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KArCE,CAAP;AAsCH,GAxCD;AAyCH;AAED,OAAO,SAASyd,mBAAT,CAA6BzT,UAA7B,EAAyC;AAC5C,SAAO,UAAUhM,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOH,KAAK,CAACoD,IAAN,CAAW,yCAAX,EAAsDoK,UAAU,CAAClM,SAAjE,EACFgC,IADE,CACGC,QAAQ,IAAI;AACd/B,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAEL1D,UAAAA,UAAU,EAAE,EACR,GAAG4K,UAAU,CAAClM,SAAX,CAAqBsB,UADhB;AAER,eAAGW,QAAQ,CAACC;AAFJ,WAFP;AAMLsF,UAAAA,UAAU,EAAC,oBANN;AAOLuE,UAAAA,SAAS,EAAC,KAPL;AAQLxE,UAAAA,aAAa,EAAE,aARV;AASLrC,UAAAA,cAAc,EAAC;AATV;AAFJ,OAAD,CAAR;AAcH,KAhBE,EAiBFC,KAjBE,CAiBIC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7BE,CAAP;AA8BH,GAhCD;AAiCH;AAID,OAAO,SAAS0d,aAAT,CAAuB1T,UAAvB,EAAkC5B,QAAlC,EAA4C;AAC/C,SAAO,UAAUpK,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAI+I,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,CAAC2P,IAAJ,CAAS7Y,KAAK,CAACoD,IAAN,CAAW,iBAAX,EAA8B;AACnChB,MAAAA,QAAQ,EAAEwJ;AADyB,KAA9B,CAAT;AAGA1C,IAAAA,GAAG,CAAC2P,IAAJ,CAAS7Y,KAAK,CAACoD,IAAN,CAAW,sCAAX,EAAmD;AACxDyI,MAAAA,YAAY,EAAC2B,UAAU,CAAC,cAAD,CADiC;AAExDrL,MAAAA,oBAAoB,EAACqL,UAAU,CAAC,UAAD,CAAV,CAAuB,sBAAvB,CAFmC;AAGxDb,MAAAA,sBAAsB,EAACa,UAAU,CAAC,UAAD,CAAV,CAAuB,wBAAvB,CAHiC;AAIxDpL,MAAAA,QAAQ,EAAEwJ;AAJ8C,KAAnD,CAAT;AAMDvL,IAAAA,KAAK,CAAC0R,GAAN,CAAU7I,GAAV,EACC5F,IADD,CACMC,QAAQ,IAAI;AACjB,YAAM4d,KAAK,GAAG5gB,mBAAmB,CAACgD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,CAAjC;AACA,UAAI2J,cAAc,GAAC,EAAnB;AACQ,UAAIiU,oBAAoB,GAAC7d,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,sBAAjB,CAAzB;AACG2J,MAAAA,cAAc,GAAC;AACjB;AACO,0BAAiBiU,oBAAoB,CAAC,QAAD,CAApB,IAAgCA,oBAAoB,CAAC,QAAD,CAD5E;AAEO;AACA;AACA;AACA;AACA,iCAAwBA,oBAAoB,CAAC,uBAAD,CAApB,IAA+CA,oBAAoB,CAAC,uBAAD,CANlG;AAOOzU,QAAAA,sBAAsB,EAACyU,oBAAoB,CAAC,wBAAD,CAPlD;AAQOjf,QAAAA,oBAAoB,EAACif,oBAAoB,CAAC,sBAAD;AARhD,OADE,CAJM,CAeb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI5f,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UAAU,EAAE;AACR,yBAAYue,KAAK,CAACjU,GAAN,CAAU,YAAV,CADJ;AAER,eAAGM,UAAU,CAAC5K,UAFN;AAGR,eAAGW,QAAQ,CAACC;AAHJ,WADP;AAMLqI,UAAAA,YAAY,EAAC2B,UAAU,CAAC,cAAD,CANlB;AAOLL,UAAAA,cAPK;AAQLrE,UAAAA,UAAU,EAAE,mBARP;AASLuE,UAAAA,SAAS,EAAE,IATN;AAULC,UAAAA,SAAS,EAAE,QAVN;AAWLhH,UAAAA,OAAO,EAAE;AAXJ;AAFJ,OAAD,CAAR;AAgBH,KA1CN,EA2CMG,KA3CN,CA2CYC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvDN;AAwDF,GApED;AAqEH;AAID,OAAO,SAAS6d,6BAAT,CAAuCze,UAAvC,EAAmDkG,UAAnD,EAA+D8C,QAA/D,EAAyE0V,WAAzE,EAAsF;AACzF,SAAO,UAAU9f,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACrB,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMgN,cAAc,GAAC;AACjB9K,MAAAA,SAAS,EAACif,WAAW,CAAC/b,IAAZ,CAAiBlD;AADV,KAArB;AAGArC,IAAAA,KAAK,CAACoD,IAAN,CAAW,+BAAX,EAA4C;AAAE+J,MAAAA,cAAF;AAAkBoU,MAAAA,SAAS,EAACD,WAAW,CAAC/b,IAAZ,CAAiBgc,SAA7C;AAAwDxf,MAAAA,SAAS,EAAEuf,WAAW,CAAC/b,IAAZ,CAAiBxD,SAApF;AAA+FK,MAAAA,QAAQ,EAAEwJ;AAAzG,KAA5C,EACKtI,IADL,CACUC,QAAQ,IAAI;AACdX,MAAAA,UAAU,CAAC,uBAAD,CAAV,GAAsC,EAAtC;AACAA,MAAAA,UAAU,CAAC,uBAAD,CAAV,GAAsCW,QAAQ,CAACC,IAAT,CAAc,uBAAd,CAAtC;AACAZ,MAAAA,UAAU,CAAC,aAAD,CAAV,GAA4B,EAA5B;AACAA,MAAAA,UAAU,CAAC,aAAD,CAAV,GAA4BW,QAAQ,CAACC,IAAT,CAAc,aAAd,EAA6B,CAA7B,CAA5B,CAJc,CAKd;;AACAhC,MAAAA,QAAQ,CAAC;AACL4E,QAAAA,IAAI,EAAEnG,cADD;AAELoG,QAAAA,OAAO,EAAE;AACLzD,UAAAA,UADK;AAELkG,UAAAA,UAAU,EAAE,wBAFP;AAGLwE,UAAAA,SAAS,EAAE,EAHN;AAILhH,UAAAA,OAAO,EAAE,KAJJ;AAKL+G,UAAAA,SAAS,EAAE;AALN;AAFJ,OAAD,CAAR;AAWH,KAlBL,EAmBK5G,KAnBL,CAmBWC,KAAK,IAAI;AACZlF,MAAAA,QAAQ,CAAC;AAAE4E,QAAAA,IAAI,EAAEnG,cAAR;AAAwBoG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACnD,QAAN,CAAeoD,MAAf,KAA0B,GAA9B,EAAmC;AAC/BzG,QAAAA,KAAK,CAACwG,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD1G,QAAAA,KAAK,CAAC2G,IAAN,CAAWH,KAAK,CAACnD,QAAN,CAAeC,IAA1B;AACH;AACJ,KA3BL;AA4BH,GAjCD;AAkCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, compareArrays,CF_encryptionData\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            //nneedsubsample: inputData.masterData.nneedsubsample,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.nneedtemplatebasedflow,\r\n            nworlistcode: inputData.nworlistcode,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n         }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    sortData(response.data);\r\n                    // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\r\n                    // responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.realRegSubTypeValue.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n\r\n\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                        , subSampleSkip, subSampleTake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    subSampleSkip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                            , subSampleSkip, subSampleTake\r\n                        }\r\n                    // }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationComment = [];\r\n                    // let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.RESelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \" sampleChangeDataState\"\r\n                                break;\r\n\r\n\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n\r\n                        //getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n\r\n                        RegistrationComment,\r\n                        // RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            subSampleSkip: undefined,\r\n                            subSampleTake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            //let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, RESelectedSample, RESelectedSubSample, RESelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey, masterData\r\n                }\r\n\r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    // RESelectedSample: inputData.RESelectedSample,\r\n                    // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\r\n                    RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode\r\n                    // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            nworlistcode: inputData.nworlistcode,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                        , subSampleSkip, subSampleTake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    // if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subSampleSkip) {\r\n                        subSampleSkip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                            , subSampleSkip, subSampleTake\r\n                        }\r\n                    // }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            // case \"IDS_SAMPLECOMMENTS\":\r\n                            //         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                            //         activeName = \"RegistrationComment\"\r\n                            //         dataStateName = \"sampleChangeDataState\"\r\n                            //         break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedTest: [testList[0]],\r\n                            RE_TEST: testList,\r\n                            // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            // case \"IDS_TESTCOMMENTS\":\r\n                            //     dbData = response.data.RegistrationTestComment || []\r\n                            //     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                            //     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                            //     break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            ...skipInfo,\r\n                            subSampleSkip: undefined,\r\n                            subSampleTake: undefined\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            // let isGrandChildGetRequired = false;\r\n            // if (TestSelected.length > 0) {\r\n            //     isGrandChildGetRequired = true;\r\n            // } else {\r\n            //     isGrandChildGetRequired = false;\r\n            // }\r\n\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //     ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ?\r\n                    inputData[\"statusNone\"] ?\r\n                        getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') :\r\n                        filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        activeTestTab: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                url = \"comments/getSampleComment\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"ResultUsedMaterial\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName] && inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            defaultSampleType: inputData.defaultSampleType,\r\n                            ...response.data,\r\n                            realDesignTemplateMapping:inputData.realDesignTemplateMapping,\r\n                            realApproveConfigVersion:inputData.realApproveConfigVersion,\r\n                            realApprovalConfigVersionList:inputData.realApprovalConfigVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realFilterStatusList:inputData.realFilterStatusList,\r\n                            realRegistrationSubTypeList:inputData.realRegistrationSubTypeList,\r\n                            realRegistrationTypeList:inputData.realRegistrationTypeList,\r\n                            realTestvaluesList:inputData.realTestvaluesList,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType,\r\n                            realDesignTemplateMapping:inputData.realDesignTemplateMapping,\r\n                            realApproveConfigVersion:inputData.realApproveConfigVersion,\r\n                            realApprovalConfigVersionList:inputData.realApprovalConfigVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realFilterStatusList:inputData.realFilterStatusList,\r\n                            realRegistrationSubTypeList:inputData.realRegistrationSubTypeList,\r\n                            realRegistrationTypeList:inputData.realRegistrationTypeList,\r\n                            realTestvaluesList:inputData.realTestvaluesList,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                let nneedsubsample = inputData.defaultRegistrationSubType && inputData.defaultRegistrationSubType.nneedsubsample;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            nneedsubsample,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                            realDesignTemplateMapping:inputData.realDesignTemplateMapping,\r\n                            realApproveConfigVersion:inputData.realApproveConfigVersion,\r\n                            realApprovalConfigVersionList:inputData.realApprovalConfigVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realFilterStatusList:inputData.realFilterStatusList,\r\n                            realRegistrationTypeList:inputData.realRegistrationTypeList,\r\n                            realTestvaluesList:inputData.realTestvaluesList,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    let masterData = { ...inputParamData.masterData }\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: //inputParamData.masterData.nneedsubsample\r\n        inputParamData.masterData.realRegSubTypeValue.nneedsubsample\r\n         })\r\n            .then(response => {\r\n                //let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                //sortData(response.data)\r\n                sortData(response.data, 'ascending', 'ntransactionresultcode')\r\n                if(response.data.rtn == \"IDS_USERNOTINRESULTENTRYFLOW\")\r\n                {\r\n                toast.warning(intl.formatMessage({ id: \"IDS_USERNOTINRESULTENTRYFLOW\" }));\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else if(error.response.status === 401) {\r\n                    toast.warn(intl.formatMessage({id:error.response.data.rtn}));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ...error.response.data,\r\n                                realFromDate: error.response.data[\"fromDate\"],\r\n                                realToDate: error.response.data[\"toDate\"]\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else{\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let additionalInfo=[]\r\n        let TestList = inputData.searchedTest ? [...inputData.searchedTest] : [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        let predefDefaultFlag = false;\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n                            let jsondata=JSON.parse(param.jsondata['value'])\r\n                            if(jsondata.hasOwnProperty('additionalInfo')){\r\n                                additionalInfo[param.ntransactionresultcode]=jsondata['additionalInfo'] \r\n                            }  \r\n                            predefDefaultFlag = false;\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                    //     if (!predefDefaultFlag) {\r\n                                    //         predefDefaultFlag = true;\r\n                                    //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    //             undefined, undefined).get(\"OptionList\");\r\n                                    //     }\r\n                                        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                        //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                        //         undefined, undefined).get(\"OptionList\");\r\n                                    //     if (response.data.ResultParameter[index].sresult === null) {\r\n                                    //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                    //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                                    //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                                    //         response.data.ResultParameter[index].editable = true;\r\n                                    //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                    //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                                    //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                                    //             &&predefinedvalue.spredefinedcomments;\r\n                                    //         }\r\n                                    //     }\r\n                                    // }\r\n                                  //  else {\r\n                                        if (!predefDefaultFlag) {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n\r\n                                 //   }\r\n                                    //return null;\r\n\r\n                                });\r\n                                param['editable'] = false;\r\n                            //return null;\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            // undefined, undefined).get(\"OptionList\");\r\n                        });\r\n\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    additionalInfo:additionalInfo.length>0?additionalInfo:[],\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter \r\n                                   \r\n                                },\r\n                                  parameterResults:response.data.ResultParameter,\r\n                                  isParameterInitialRender:true,\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId,booleanFlag,param) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                basedrulesengine:param.basedrulesengine,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let onlySampleService=false;\r\n                    let responseData =  sortData(response.data, 'ascending', 'ntransactionresultcode')//response.data\r\n                    //Added\r\n                    if(inputData.masterData[\"searchedTest\"]&&responseData[\"RE_TEST\"]){\r\n                        inputData.masterData[\"searchedTest\"]= getSameRecordFromTwoArrays(inputData.masterData[\"searchedTest\"],responseData[\"RE_TEST\"],\"ntransactiontestcode\");\r\n                       }\r\n\r\n\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                         //Added\r\n                        if (inputData.masterData.realRegSubTypeValue.nneedsubsample//.nneedsubsample\r\n                            )\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"RE_SAMPLE\"],  responseData[\"RE_SAMPLE\"], \"npreregno\");\r\n                        //inputData.masterData[\"RE_SAMPLE\"];\r\n                         //Added\r\n                        let selectedSampleArray= inputData.masterData[\"RESelectedSample\"]; \r\n                        let subSampleArray=RE_SUBSAMPLE.map(x=>x.npreregno);\r\n                        let selectPreregNOBefore=selectedSampleArray.map(x=>x.npreregno)\r\n                        selectedSampleArray=selectedSampleArray.filter(item => subSampleArray.includes(item.npreregno)).map(x=>x.npreregno) \r\n                        let unwantedPreregno=  selectPreregNOBefore.filter(function (x) {\r\n                            return !selectedSampleArray.some(function (y) { \r\n                              return x  === y \r\n                            })\r\n                          }); \r\n                        RE_SAMPLE= RE_SAMPLE.filter(item => !unwantedPreregno.includes(item.npreregno))\r\n                        //RE_SAMPLE= filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_SUBSAMPLE , \"npreregno\");\r\n                    } else {\r\n                        RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"RE_SAMPLE\"],  responseData[\"RE_SAMPLE\"], \"npreregno\");\r\n\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(RE_SAMPLE, RE_TEST, \"npreregno\");\r\n                    }\r\n                  //  const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                  //Added\r\n                  const RESelectedSample = RE_SUBSAMPLE.length > 0 ? inputData.masterData[\"RESelectedSample\"] :  RE_SAMPLE\r\n\r\n                 \r\n\r\n                  let boolSelectedSubSample; \r\n                  let searchedSubSample = undefined; \r\n                  let RESelectedSubSample=[];\r\n                  let backfrontTest= getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactiontestcode\")\r\n                   if(inputData.masterData[\"searchedSubSample\"]){\r\n                       searchedSubSample =inputData.masterData[\"searchedSubSample\"]\r\n                       boolSelectedSubSample=searchedSubSample.some(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n\r\n                       let searchedSubSamplebefore=inputData.masterData[\"RESelectedSubSample\"].map(x=>x.ntransactionsamplecode);\r\n                       searchedSubSample= inputData.masterData[\"RESelectedSubSample\"].filter(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n                       let searchedSubSampleaftere=searchedSubSample.map(x=>x.ntransactionsamplecode);\r\n                       let unwantedSamplecode=  searchedSubSamplebefore.filter(function (x) {\r\n                          return !searchedSubSampleaftere.some(function (y) { \r\n                            return x  === y \r\n                          })\r\n                        });  \r\n                        inputData.masterData[\"searchedSubSample\"]=inputData.masterData[\"searchedSubSample\"].filter(item => !unwantedSamplecode.includes(item.ntransactionsamplecode)) \r\n                    }else{\r\n                      boolSelectedSubSample=RE_SUBSAMPLE.some(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n                    }\r\n                 \r\n                  if(inputData.masterData[\"searchedSubSample\"]//&&inputData.masterData[\"searchedSubSample\"].length>0\r\n                  ){\r\n                      RESelectedSubSample = boolSelectedSubSample ?inputData.masterData[\"RESelectedSubSample\"] :\r\n                      inputData.masterData[\"searchedSubSample\"][0]? [inputData.masterData[\"searchedSubSample\"][0]]:[]\r\n                  }else{\r\n                      RESelectedSubSample = boolSelectedSubSample ?inputData.masterData[\"RESelectedSubSample\"] :  RE_SUBSAMPLE\r\n                  }  \r\n                  //  const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        RE_SAMPLE = getSameRecordFromTwoArrays(inputData.masterData[\"searchedSample\"],  responseData[\"RE_SAMPLE\"], \"npreregno\");\r\n\r\n                        searchedSample = filterRecordBasedOnTwoArrays(RE_SAMPLE//inputData.masterData[\"searchedSample\"]\r\n                        ,\r\n                         RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n \t\t\t\t\t\tRESelectedTest: RESelectedTest2,\r\n                         RESelectedTest: response.data.hasOwnProperty('RegistrationTestAlert')\r\n                         &&Object.keys(response.data['RegistrationTestAlert']).length !== 0\r\n                         ||response.data.hasOwnProperty('NewTestGroupTestAlert')&&\r\n                         Object.keys(response.data['NewTestGroupTestAlert']).length !== 0?\r\n                         inputData.masterData[\"RESelectedTest\"]://RESelectedTest2\r\n                         inputData.masterData[\"searchedTest\"]&&\r\n                         inputData.masterData[\"searchedTest\"].length>0?[inputData.masterData[\"searchedTest\"][0]]: \r\n                         responseData.RESelectedTest\r\n                         ,\r\n                         \r\n                        //  RE_TEST:compareArrays(responseData[\"RE_TEST\"],inputData.masterData[\"RE_TEST\"])?\r\n                        //  inputData.masterData[\"RE_TEST\"]: responseData[\"RE_TEST\"]\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                        \r\n                    }\r\n                    let skipInfo = {};\r\n                    // if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) { //ALPD-2230\r\n                    if (masterData.RE_SUBSAMPLE && masterData.RE_SUBSAMPLE.length == 0 && masterData.RE_TEST && masterData.RE_TEST.length == 0){\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    // }\r\n                    if (masterData.RE_SUBSAMPLE && masterData.RE_SUBSAMPLE.length <= inputParam.subSampleTake){\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            subSampleSkip: 0,\r\n                            subSampleTake: inputParam.subSampleTake\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        RegistrationTestAlert: response.data.hasOwnProperty('RegistrationTestAlert')//&&response.data.RegistrationTestAlert.length>0\r\n                        ?response.data.RegistrationTestAlert:{},\r\n                        NewTestGroupTestAlert:response.data.hasOwnProperty('NewTestGroupTestAlert')//&&response.data.NewTestGroupTestAlert.length>0\r\n                        ?response.data.NewTestGroupTestAlert:{},\r\n                        showAlertGrid:response.data.hasOwnProperty('RegistrationTestAlert')&&Object.keys(response.data['RegistrationTestAlert']).length !== 0\r\n                        ||response.data.hasOwnProperty('NewTestGroupTestAlert')&&Object.keys(response.data['NewTestGroupTestAlert']).length !== 0//&&response.data.RegistrationTestAlert.length>0||\r\n                       // response.data.hasOwnProperty('NewTestGroupTestAlert')&&response.data.NewTestGroupTestAlert.length>0\r\n                        ?true:false,\r\n                        showAlertForPredefined:false,\r\n                        additionalInfoView:false,\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample //&& RESelectedSample.length === 0 \r\n                        && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    }else if (!searchedSample && RE_SAMPLE.length > 0) {\r\n                        let inputParameter \r\n                        if(RESelectedSample.length === 0 || RE_SUBSAMPLE.length == 0)\r\n                        {\r\n                            onlySampleService=true;\r\n                            let paramList = inputParam.postParamList[0];\r\n                            inputParameter = {\r\n                                ...paramList.fecthInputObject.fecthInputObject,\r\n                                fetchUrl: paramList.fetchUrl,\r\n                                [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                                ntype: 2,\r\n                                nflag: 2\r\n                            };\r\n\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    RESelectedSample: [RE_SAMPLE[0]]\r\n                                }\r\n                            }\r\n                            dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                        }\r\n\r\n                        if(boolSelectedSubSample===false?(boolSelectedSubSample===false&&onlySampleService===false&&RESelectedSubSample.length !== 0\r\n                            //&&!searchedSubSample\r\n                            )\r\n                        :(RESelectedSubSample.length === 0 && RE_SUBSAMPLE.length > 0))\r\n                        {\r\n                            let paramList = inputParam.postParamList[1];\r\n                            inputParameter = {\r\n                                ...paramList.fecthInputObject,\r\n                                fetchUrl: paramList.fetchUrl,\r\n                                [paramList.primaryKeyField]: String(RE_SUBSAMPLE[0][paramList.primaryKeyField]),\r\n                                ntype: 3,\r\n                                nflag: 3\r\n                            };\r\n\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: [RE_SUBSAMPLE[0]]\r\n                                }\r\n                            }\r\n                            dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                        } \r\n                        else {\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData\r\n                            };\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    ...respObject,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                        }\r\n\r\n\r\n                    }   \r\n                    else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                            toast.warn(error.response.data); \r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\r\n                nneedsubsample : inputParam.inputData.subSampleNeeded\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/testInitiated\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let onlySampleService=false;\r\n                    let childTabsKey = [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\" ];\r\n                    //let responseData = response.data \r\n                    let responseData =   sortData(response.data, 'ascending', 'ntransactionresultcode')\r\n                    fillRecordBasedOnCheckBoxSelection(responseData, inputData.masterData, childTabsKey, 3, \"ntransactionsamplecode\", []);\r\n                    responseData[\"RESelectedTest\"] = getSameRecordFromTwoArrays(responseData.RE_TEST,inputParam.RESelectedTest,\"ntransactiontestcode\");\r\n                    if(inputData.masterData[\"searchedTest\"]&&responseData[\"RE_TEST\"]){\r\n                        inputData.masterData[\"searchedTest\"]= getSameRecordFromTwoArrays(inputData.masterData[\"searchedTest\"],responseData[\"RE_TEST\"],\"ntransactiontestcode\");\r\n                       }\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.realRegSubTypeValue.nneedsubsample)//.nneedsubsample)\r\n                        {\r\n                           //RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                         \r\n                            RE_TEST = getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactiontestcode\");\r\n                        }\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    } \r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\"), \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {  \r\n                    //    let selectedSampleArray= inputData.masterData[\"RESelectedSample\"]; \r\n\r\n                    //    let selectPreregNOBefore=selectedSampleArray.map(x=>x.npreregno)\r\n                    //    selectedSampleArray=selectedSampleArray.filter(objx=>RE_TEST.some(objy=>objx['npreregno']===objy['npreregno']))\r\n                    //    let selectedTestPreregno=inputData.masterData[\"RESelectedTest\"].map(x=>x.npreregno);\r\n                    //    let selectPreregNOafter=selectedSampleArray.map(x=>x.npreregno)\r\n                    //    let unwantedPreregno= selectPreregNOBefore.filter(item => !selectPreregNOafter.includes(item))\r\n                    //                         .filter(item => !selectPreregNOafter.includes(item)&& !selectedTestPreregno.includes(item));\r\n\r\n                    //    RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"].filter(objx=>unwantedPreregno.every(npreregno=>npreregno!==objx['npreregno'])) \r\n                    RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];\r\n                    let selectedSampleArray= inputData.masterData[\"RESelectedSample\"]; \r\n                    let subSampleArray=RE_SUBSAMPLE.map(x=>x.npreregno);\r\n                    let selectPreregNOBefore=selectedSampleArray.map(x=>x.npreregno)\r\n                    selectedSampleArray=selectedSampleArray.filter(item => subSampleArray.includes(item.npreregno)).map(x=>x.npreregno) \r\n                    let unwantedPreregno=  selectPreregNOBefore.filter(function (x) {\r\n                        return !selectedSampleArray.some(function (y) { \r\n                          return x  === y \r\n                        })\r\n                      }); \r\n                    RE_SAMPLE= RE_SAMPLE.filter(item => !unwantedPreregno.includes(item.npreregno))\r\n                    //RE_SAMPLE= filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_SUBSAMPLE , \"npreregno\");\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n\r\n                    const RESelectedSample = RE_SUBSAMPLE.length > 0 ? inputData.masterData[\"RESelectedSample\"] : [RE_SAMPLE[0]]\r\n                    \r\n                    //const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n\r\n                    // let x=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\") \r\n                    // let boolSelectedSubSample=x.some(objx=>RE_TEST.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode']))\r\n                    // const RESelectedSubSample =boolSelectedSubSample? filterRecordBasedOnTwoArrays (inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\"):\r\n                    // getSameRecordFromTwoArrays (inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let boolSelectedSubSample; \r\n                    let searchedSubSample = undefined; \r\n                    let RESelectedSubSample=[];\r\n                    let backfrontTest= getSameRecordFromTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactiontestcode\")\r\n                     if(inputData.masterData[\"searchedSubSample\"]){\r\n                         searchedSubSample =inputData.masterData[\"searchedSubSample\"]\r\n                         boolSelectedSubSample=searchedSubSample.some(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n\r\n                         let searchedSubSamplebefore=inputData.masterData[\"RESelectedSubSample\"].map(x=>x.ntransactionsamplecode);\r\n                         searchedSubSample= inputData.masterData[\"RESelectedSubSample\"].filter(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n                         let searchedSubSampleaftere=searchedSubSample.map(x=>x.ntransactionsamplecode);\r\n                         let unwantedSamplecode=  searchedSubSamplebefore.filter(function (x) {\r\n                            return !searchedSubSampleaftere.some(function (y) { \r\n                              return x  === y \r\n                            })\r\n                          });  \r\n                          inputData.masterData[\"searchedSubSample\"]=inputData.masterData[\"searchedSubSample\"].filter(item => !unwantedSamplecode.includes(item.ntransactionsamplecode)) \r\n                      }else{\r\n                        boolSelectedSubSample=RE_SUBSAMPLE.some(objx=>backfrontTest.some(objy=>objx['ntransactionsamplecode']===objy['ntransactionsamplecode'])) \r\n                      }\r\n                   \r\n                    if(inputData.masterData[\"searchedSubSample\"]//&&inputData.masterData[\"searchedSubSample\"].length>0\r\n                    ){\r\n                        RESelectedSubSample = boolSelectedSubSample ?inputData.masterData[\"RESelectedSubSample\"] :\r\n                        inputData.masterData[\"searchedSubSample\"][0]? [inputData.masterData[\"searchedSubSample\"][0]]:[]\r\n                    }else{\r\n                        RESelectedSubSample = boolSelectedSubSample ?inputData.masterData[\"RESelectedSubSample\"] :  [RE_SUBSAMPLE[0]]\r\n                    } \r\n                    // let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    // let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n                    // RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        // ...inputData.masterData,\r\n                        // //...responseData,\r\n                        // //RE_SAMPLE,\r\n                        // //RE_SUBSAMPLE,\r\n                        // //RESelectedSubSample,\r\n                        // searchedSample,\r\n                        // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n                        // //RESelectedSample,\r\n                        // //RESelectedTest: RESelectedTest2,\r\n                        // //RE_TEST: responseData[\"RE_TEST\"]\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest:inputData.masterData[\"searchedTest\"]&&\r\n                        inputData.masterData[\"searchedTest\"].length>0?[inputData.masterData[\"searchedTest\"][0]]: responseData.RESelectedTest,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample// && RESelectedSample.length === 0 \r\n                        && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RE_SAMPLE.length > 0) {\r\n                        let inputParameter\r\n                        // let paramList = inputParam.postParamList[0];\r\n                        // let inputParameter = {\r\n                        //     ...paramList.fecthInputObject.fecthInputObject,\r\n                        //     fetchUrl: paramList.fetchUrl,\r\n                        //     [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                        //     ntype: 2,\r\n                        //     nflag: 2\r\n                        // };\r\n                        // respObject = {\r\n                        //     ...respObject,\r\n                        //     masterData: {\r\n                        //         ...masterData,\r\n                        //         RESelectedSample: [RE_SAMPLE[0]]\r\n                        //     }\r\n                        // }\r\n\r\n                        if(RESelectedSample.length === 0 || RE_SUBSAMPLE.length == 0)\r\n                        {\r\n                            onlySampleService=true;\r\n                            let paramList = inputParam.postParamList[0];\r\n                            inputParameter = {\r\n                                ...paramList.fecthInputObject.fecthInputObject,\r\n                                fetchUrl: paramList.fetchUrl,\r\n                                [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                                ntype: 2,\r\n                                nflag: 2\r\n                            };\r\n\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    RESelectedSample: [RE_SAMPLE[0]]\r\n                                }\r\n                            }\r\n                            dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                        }\r\n\r\n                        if(boolSelectedSubSample===false?(boolSelectedSubSample===false&&onlySampleService===false&&RESelectedSubSample.length !== 0\r\n                            //&&!searchedSubSample\r\n                            )\r\n                        :(RESelectedSubSample.length === 0 && RE_SUBSAMPLE.length > 0))\r\n                        {\r\n                            let paramList = inputParam.postParamList[1];\r\n                            inputParameter = {\r\n                                ...paramList.fecthInputObject,\r\n                                fetchUrl: paramList.fetchUrl,\r\n                                [paramList.primaryKeyField]: String(RE_SUBSAMPLE[0][paramList.primaryKeyField]),\r\n                                ntype: 3,\r\n                                nflag: 3\r\n                            };\r\n\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: [RE_SUBSAMPLE[0]]\r\n                                }\r\n                            }\r\n                            dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                        }\r\n                        // if(RESelectedTest.length === 0)\r\n                        // {\r\n                        //     let paramList = inputParam.postParamList[2];\r\n                        //     inputParameter = {\r\n                        //         ...paramList.fecthInputObject,\r\n                        //         fetchUrl: paramList.fetchUrl,\r\n                        //         [paramList.primaryKeyField]: String(RE_TEST[0][paramList.primaryKeyField]),\r\n                        //         ntype: 3,\r\n                        //         nflag: 3\r\n                        //     };\r\n\r\n                        //     respObject = {\r\n                        //         ...respObject,\r\n                        //         masterData: {\r\n                        //             ...masterData,\r\n                        //             RESelectedTest: [RE_TEST[0]]\r\n                        //         }\r\n                        //     }\r\n                        //     dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                        // }\r\n                        else {\r\n                            respObject = {\r\n                                ...respObject,\r\n                                masterData\r\n                            };\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    ...respObject,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOINITIATE\"\r\n        }));\r\n    }\r\n\r\n}\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                if (response.data.RE_SUBSAMPLE && response.data.RE_SUBSAMPLE.length > 0)\r\n                {\r\n                    sortData(response.data.RE_SUBSAMPLE,'descending', 'ntransactionsamplecode');\r\n                }\r\n                sortData(response.data.RE_TEST,'ascending', 'ntransactionresultcode');\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo,ntestgrouptestcode:inputData.masterData.RESelectedTest.ntestgrouptestcode\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                       // selectedRecord\r\n                       selectedRecordInstrumentForm : {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        isInstrumentInitialRender:true,\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function addREMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode, ntestgrouptestcode: inputData.test.ntestgrouptestcode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        //selectedRecord\r\n                        selectedRecordMaterialForm : {\r\n                            ntestgroupmaterial : transactionStatus.YES,\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\r\n                            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        isMaterialInitialRender:true,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREMaterialComboGet(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode, ntestgrouptestcode: inputData.ntestgrouptestcode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ntestgroupmaterial : inputData.ntestgroupmaterial,\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\") ? materialTypeMap.get(\"DefaultValue\") : \"\",\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") ? materialCatMap.get(\"DefaultValue\") : \"\",\r\n                            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        //ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREMaterialCategoryByType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcode:materialMap.get(\"DefaultValue\")|| {},\r\n                            nmaterialinventorycode:materialInventoryMap.get(\"DefaultValue\")|| {},\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                        },\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialByCategory(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                            savailablequantity: response.data.MaterialInventory ? response.data.MaterialInventory[0].savailablequatity:\"\",\r\n                            sunitname:response.data.MaterialInventory? response.data.MaterialInventory[0].sunitname :\"\"\r\n                        },\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialInvertoryByMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            sunitname: response.data.MaterialInventory ? response.data.MaterialInventory[0].sunitname :\"\",\r\n                            savailablequantity: response.data.MaterialInventory? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAvailableMaterialQuantity(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            ntestgrouptestcode : inputData.ntestgrouptestcode,\r\n            nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            savailablequantity: response.data.inventory ? response.data.inventory.savailablequatity :\"\",\r\n                            sunitname: response.data.inventory ? response.data.inventory.sunitname :\"\"\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        selectedId : null\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function deleteInstrumentRecord(inputData) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n//             userinfo: inputData.userInfo,\r\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n//             .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             ...response.data\r\n//                         },\r\n//                         loading: false,\r\n//                         operation: \"delete\",\r\n//                         openModal: false,\r\n//                         loadEsign: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                      //  selectedRecord\r\n                        selectedRecordInstrumentForm\r\n                        : {\r\n                            ssamplearno:response[0].data.EditResultUsedInstrument[0].ssamplearno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        isInstrumentInitialRender:true,\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchMaterialRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\r\n            nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        selectedRecord: {\r\n                            ...EditResultUsedMaterial,\r\n                            stestsynonym: inputData.editRow.jsondata.stestsynonym,\r\n                            npreregno: EditResultUsedMaterial.npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            nmaterialtypecode: {\r\n                                label: EditResultUsedMaterial.jsondata.smaterialtypename,\r\n                                value: EditResultUsedMaterial.nmaterialtypecode\r\n                            },\r\n                            nmaterialcatcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcategorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\r\n                            },\r\n                            nmaterialcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialname,\r\n                            },\r\n                            nmaterialinventorycode: {\r\n                                \"value\": EditResultUsedMaterial.ninventorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.sinventoryid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": EditResultUsedMaterial.ntztodate,\r\n                                \"label\": EditResultUsedMaterial.stztodate\r\n                            },\r\n                            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\r\n                            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\r\n                            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\r\n                            sremarks: EditResultUsedMaterial.jsondata.sremarks,\r\n                            savailablequantity: response.data.inventory ?  response.data.inventory.savailablequatity :\"\",\r\n                            sunitname: response.data.inventory ? response.data.inventory.sunitname :\"\"\r\n                        },\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        selectedId: null\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                  //      selectedRecord: {\r\n                    selectedRecordTaskForm:{\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\r\n                            staskprocedure: response.data.EditResultUsedTasks[0].jsondata.staskprocedure,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        isTaskInitialRender:true,\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    sarno: inputData.selectedRecord.sarno,\r\n                    ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue,\r\n                        sarno: inputData.selectedRecord.sarno,\r\n                        ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                        stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                        sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata'] = {\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.jsondata) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: {\r\n                    nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: selectedRecord.jsondata,\r\n                    npreregno: selectedRecord.npreregno,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                },\r\n                //jsondata: selectedRecord.jsondata,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                //ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n            npreregno: parameterData.npreregno,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode\r\n        }\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n\r\n                let selectedForumulaInput = [];\r\n                let selectedForumulaInput1 = [];\r\n                let selectedMandatory = [];\r\n   //           selectedRecord.ResultParameter = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n\r\n                response.data.DynamicFormulaFields.map((fields, index) => {\r\n                    let dynamicformulafields = {};\r\n                    let selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, fields.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n                    if (selectedTestParameters.length > 0) {\r\n\r\n                        selectedTestParameters = selectedTestParameters.filter(element => {\r\n                            return element.sresult !== null && element.sresult != ''\r\n                        });\r\n\r\n                        const nisaverageneed = selectedTestParameters.length;\r\n\r\n                        const maxResultCode = selectedTestParameters.length > 0 ? Math.max(...selectedTestParameters.map(o => o.ntransactionresultcode)) : -1;\r\n\r\n\r\n                        // const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\r\n                        //                 return element.sresult !== null && element.sresult !='';\r\n                        //               }).map(o => o.ntransactionresultcode)));\r\n\r\n                        const paramValue = getRecordBasedOnPrimaryKeyName(selectedTestParameters, maxResultCode, \"ntransactionresultcode\");\r\n                        if (paramValue.length == 0) {\r\n                            dynamicformulafields.svalues = \"\";\r\n                            dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                            //dynamicformulafields.nisaverageneed = 0;\r\n                            dynamicformulafields.senableAverage = false;\r\n                            response.data.DynamicFormulaFields[index].nisaverageneed = 0; \r\n                            selectedForumulaInput.push(dynamicformulafields);\r\n                            selectedMandatory.push(\"\");\r\n\r\n                        }\r\n                        else {\r\n                            if ((maxResultCode >= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false)\r\n                                || (response.data.DynamicFormulaFields[index].svalue != \"\" && response.data.DynamicFormulaFields[index].svalue != null\r\n                                    ? maxResultCode <= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false : \"\")) {\r\n                                dynamicformulafields.svalues = paramValue[0].sresult;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                //dynamicformulafields.nisaverageneed = nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                response.data.DynamicFormulaFields[index].nisaverageneed = nisaverageneed; \r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(paramValue[0].sresult);\r\n                            }\r\n                            else {\r\n                                dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                        dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                        // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                        selectedForumulaInput.push(dynamicformulafields);\r\n                        selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                    }\r\n                    return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)[0])\r\n\r\n\r\n                });\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            naverageroundingdigits: parameterData.nroundingdigits,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            DynamicFormulaFields: response.data.DynamicFormulaFields,\r\n                            //selectedForumulaInput: []\r\n                            //  DynamicFormulaFields.map((fields, index) => {\r\n                            //     return {\r\n                            //         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n\r\n                            //     }\r\n\r\n                            //  });\r\n                            // response.data.DynamicFields.map((fields, index) =>\r\n                            selectedForumulaInput,\r\n                            selectedMandatory\r\n                            // selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n                            // )\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                          parameterResults:inputDataValue.ResultParameter,\r\n                        isParameterInitialRender:true,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTemplate(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"testinitiate\") {\r\n                        dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    }\r\n                    else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo,'','',{basedrulesengine:inputParam[\"screenData\"][\"inputParam\"][\"basedrulesengine\"]}))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.esignreason;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport function getAverageResult(parameterData, index, selectedForumulaInput, userInfo, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n    \r\n        let selectedTestParameters = selectedRecord.ResultParameter.filter(element => {\r\n            return element.editable == true;\r\n        });\r\n\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, selectedRecord.parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, parameterData.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n        let ResultParameterNew = [];\r\n        if (selectedTestParameters.length > 0) {\r\n            selectedTestParameters.map(Parameter => {\r\n                let resultParameterValues = {};\r\n                resultParameterValues.ntransactionresultcode = Parameter.ntransactionresultcode;\r\n                resultParameterValues.sresult = Parameter.sresult;\r\n                resultParameterValues.ntestparametercode = Parameter.ntestparametercode;\r\n                ResultParameterNew.push(resultParameterValues);\r\n            })\r\n\r\n        }\r\n\r\n        let inputParamData = {\r\n            naverageroundingdigits: selectedRecord.naverageroundingdigits,\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            ntestparametercode: parameterData.ndynamicformulafieldcode,\r\n            userinfo: userInfo,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode,\r\n            ResultParameter: ResultParameterNew\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAverageResult\", inputParamData)\r\n            .then(response => {\r\n                selectedForumulaInput[index].soldvalue =  selectedForumulaInput[index].svalues;\r\n                selectedForumulaInput[index].svalues = response.data.AverageResult.sresult;\r\n                selectedForumulaInput[index].senableAverage = true;\r\n                //selectedForumulaInput[index].svaluesold = \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            selectedForumulaInput\r\n                        },\r\n                        // selectedRecord: {\r\n                        //     ...selectedRecord,\r\n                        //     parameterData: parameterData,\r\n                        //     sformulacalculationdetail: response.data.query,\r\n                        //     formulainput: response.data.Formula,\r\n                        //     resultindex: index,\r\n                        //     selectedForumulaInput,\r\n                        //     selectedMandatory\r\n                        // },\r\n                        // validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// export function getPredefinedData(inputData,selectedRecord,currentAlertResultCode,masterData,currentntestgrouptestpredefcode) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\r\n//             .then(response => {\r\n//                 let showMultiSelectCombo=false;  \r\n//                 let ResultParameter=selectedRecord['ResultParameter']\r\n//                 let onlyAlertMsgAvailable=false; \r\n//                 let testgrouptestpredefsubresult=response.data['testgrouptestpredefsubresult']\r\n//                 if(inputData['nneedsubcodedresult']===transactionStatus.YES){\r\n//                     showMultiSelectCombo=true\r\n//                     masterData['testgrouptestpredefsubresultOptions']=testgrouptestpredefsubresult  \r\n//                 }\r\n//                 else\r\n//                 {\r\n//                     onlyAlertMsgAvailable=true; \r\n//                 }\r\n//                // ResultParameter.map(Parameter=>\r\n//                     for(const Parameter of ResultParameter) \r\n//                     {\r\n//                         if(Parameter.additionalInfoUidata||Parameter.additionalInfoUidata===\"\"){\r\n//                             let additionalInfoUidata=typeof Parameter.additionalInfoUidata==='string'?Parameter.additionalInfoUidata===\"\"?\"\":JSON.parse(Parameter.additionalInfoUidata) :\r\n//                             Parameter.additionalInfoUidata\r\n//                             if(Parameter['ntransactionresultcode']===currentAlertResultCode&&\r\n//                             Parameter['ntestgrouptestpredefcode']===inputData['ntestgrouptestpredefcode']){\r\n//                             if(Parameter.additionalInfoUidata){\r\n//                                 selectedRecord[\"ntestgrouptestpredefsubcode\"]=additionalInfoUidata['ntestgrouptestpredefsubcode'] \r\n//                                 break;\r\n//                             }\r\n//                             }else{\r\n//                             if(selectedRecord[\"ntestgrouptestpredefsubcode\"]){\r\n//                                 delete selectedRecord[\"ntestgrouptestpredefsubcode\"] \r\n//                             }\r\n//                             }\r\n//                         }\r\n                       \r\n//                     };  \r\n//                 masterData['salertmessage']=inputData.salertmessage \r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: { \r\n//                         loading: false,\r\n//                         masterData, \r\n//                         showAlertGrid: inputData.nneedresultentryalert===transactionStatus.NO?false:true,\r\n//                          showAlertForPredefined: true,\r\n//                          showMultiSelectCombo,\r\n//                          onlyAlertMsgAvailable,\r\n//                          additionalInfoView:false,\r\n//                          selectedRecord,\r\n//                          currentAlertResultCode,\r\n//                          currentntestgrouptestpredefcode\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n\r\n// }\r\n\r\nexport function getPredefinedData(inputData,selectedRecord,currentAlertResultCode,masterData,currentntestgrouptestpredefcode) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\r\n            .then(response => {\r\n                let showMultiSelectCombo=false;  \r\n                let ResultParameter=selectedRecord['ResultParameter']\r\n                let onlyAlertMsgAvailable=false; \r\n                let testgrouptestpredefsubresult=response.data['testgrouptestpredefsubresult']\r\n                if(inputData['nneedsubcodedresult']===transactionStatus.YES){\r\n                    showMultiSelectCombo=true\r\n                    masterData['testgrouptestpredefsubresultOptions']=testgrouptestpredefsubresult  \r\n                }\r\n                else\r\n                {\r\n                    onlyAlertMsgAvailable=true; \r\n                }\r\n               // ResultParameter.map(Parameter=>\r\n                    for(const Parameter of ResultParameter) \r\n                    {\r\n                        if(Parameter.additionalInfoUidata||Parameter.additionalInfoUidata===\"\"){\r\n                            let additionalInfoUidata=typeof Parameter.additionalInfoUidata==='string'?Parameter.additionalInfoUidata===\"\"?\"\":JSON.parse(Parameter.additionalInfoUidata) :\r\n                            Parameter.additionalInfoUidata\r\n                            if(Parameter['ntransactionresultcode']===currentAlertResultCode&&\r\n                            Parameter['ntestgrouptestpredefcode']===inputData['ntestgrouptestpredefcode']){\r\n                            if(Parameter.additionalInfoUidata){\r\n                                selectedRecord[\"ntestgrouptestpredefsubcode\"]=additionalInfoUidata['ntestgrouptestpredefsubcode'] \r\n                                break;\r\n                            }\r\n                            }else{\r\n                            if(selectedRecord[\"ntestgrouptestpredefsubcode\"]){\r\n                                delete selectedRecord[\"ntestgrouptestpredefsubcode\"] \r\n                            }\r\n                            }\r\n                        }\r\n                       \r\n                    };  \r\n                masterData['salertmessage']=inputData.salertmessage \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { \r\n                        loading: false,\r\n                       masterData, \r\n                        showAlert: inputData.nneedresultentryalert===transactionStatus.NO?false:true,\r\n                         showAlertForPredefined: true,\r\n                         showMultiSelectCombo,\r\n                         onlyAlertMsgAvailable,\r\n                         additionalInfoView:false,\r\n                         selectedRecord,\r\n                         currentAlertResultCode,\r\n                         currentntestgrouptestpredefcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getELNTestValidation(inputData,integrationSettings) {\r\n    return function (dispatch) {\r\n        //console.log(localStorage);\r\n        //localStorage.removeItem(\"linkedorder\");\r\n        const inputs = {npreregno:inputData.test.npreregno, \r\n            ntransactiontestcode:inputData.test. ntransactiontestcode,\r\n            userInfo:inputData.userInfo\r\n\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getELNTestValidation\", inputs)\r\n            .then(response => {\r\n                let enlLink = \"\";\r\n                if(response.data)\r\n                {\r\n                    \r\n                        let link = \"\";\r\n                    \r\n                        let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\r\n                        // let encryptedbatchid = CF_encryptionData(inputData.test.npreregno +'-' +inputData.test.ntransactionsamplecode +'-' + inputData.test.ntestcode +'-' + inputData.userInfo.nsitecode).EncryptData;\r\n                        //let encryptedbatchid = CF_encryptionData(\"TR-23-0014-TR-23-0014-01-TestNew\").EncryptData;\r\n                       // let encryptedbatchid = CF_encryptionData(inputData.test.sarno +'-' +inputData.test.ssamplearno +'-'+ inputData.test.stestsynonym+'-'+inputData.userInfo.ssitename).EncryptData;\r\n                       \r\n                       const settedId = inputData.test.npreregno +'-' +inputData.test.ntransactionsamplecode +'-'+ inputData.test.ntestcode+'-'+ inputData.test.ntestrepeatno+'-'+ inputData.test.ntestretestno+'-'+inputData.userInfo.nsitecode;\r\n                       //console.log(settedId);\r\n                       let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\r\n                        const userObject = {\r\n                            usercode: inputData.elnUserInfo.nelncode,\r\n                            username: inputData.elnUserInfo.selnuserid,\r\n                            userfullname: inputData.elnUserInfo.selnusername,\r\n                            lsusergroup: {\r\n                            usergroupcode: inputData.elnUserInfo.nelnusergroupcode,\r\n                            usergroupname: inputData.elnUserInfo.nelnusergroupcode,\r\n                            },\r\n                            lssitemaster:{\r\n                            sitecode: inputData.elnSite.nelnsitecode\r\n                            }\r\n                        }\r\n                        let encrypteduser = CF_encryptionData(userObject).EncryptData;\r\n                        \r\n                        //const baseURL = \"http://localhost:9090/ELN\";\r\n                        const baseURL = integrationSettings[1].slinkname\r\n                        \r\n                        link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\r\n                        // let a=\"/vieworder\" + '#{\"d\":\"' + inputData.test.npreregno +'-' +inputData.test.ntransactionsamplecode +'-'+ inputData.test.ntestcode+'-'+ inputData.test.ntestrepeatno+'-'+ inputData.test.ntestretestno+'-'+inputData.userInfo.nsitecode + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\r\n                        // // return link;\r\n                        // //   }\r\n                        // let hashobject = JSON.parse(a);\r\n   //                     let batchid = \"\";\r\n\r\n//  if (link.batchid !== undefined) {\r\n\r\n// // eslint-disable-next-line no-useless-escape\r\n\r\n// batchid = CF_decrypt(link.batchid ).replaceAll('\\\"', '');\r\n\r\n//  }\r\n                        \r\n                       // const encrypteduser1 = CF_decrypt(link);\r\n                        //enlLink = link;\r\n                       // console.log(\"--->\"+link);\r\n                        //console.log(\"--->\"+batchid);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    //defaultSampleType: inputData.defaultSampleType,\r\n                                    ...response.data,\r\n                                    enlLink:link\r\n                                },\r\n                                openELNSheet: true,\r\n                                loading: false,\r\n                                enlLink:link\r\n                               // enlLink:enlLink\r\n                            }\r\n                        })\r\n                         //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);    \r\n\r\n\r\n\r\n\r\n                }else{\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_NOSHEETFORTHISTEST\"\r\n                    }));\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                //defaultSampleType: inputData.defaultSampleType,\r\n                                ...response.data,\r\n                                enlLink:\"\"\r\n                            },\r\n                            enlLink:\"\",\r\n                            loading: false\r\n                            \r\n                        }\r\n                    })\r\n                }\r\n               \r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getConfigurationFilter(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getConfigurationFilter\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestBasedBatchWorklist(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedBatchWorklist\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                           // defaultTestvalues: inputData.defaultTestvalues //,\r\n                            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function addREAdhocParamter(inputDataObj) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"resultentrybysample/getAdhocParamter\", inputDataObj)\r\n            .then(response => {\r\n\r\n                let AdhocParamter = constructOptionList(response.data['AdhocParamter'] || [], 'ntestparametercode', 'sparametersynonym',\r\n                undefined, undefined, undefined);\r\n                AdhocParamter = AdhocParamter.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...inputDataObj.masterData,\r\n                            AdhocParamter : AdhocParamter\r\n                        },\r\n                        screenName:'IDS_ADHOCPARAMETER',\r\n                        adhoctransactiontestcode: inputDataObj.ntransactiontestcode,\r\n                        adhocpreregno:inputDataObj.npreregno,\r\n                        openModal:true,\r\n                        operation:\"IDS_ADD\",\r\n                        selectedRecord:{},\r\n                        adhocId:inputDataObj.adhocId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function createAdhocParamter(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"resultentrybysample/createAdhocParamter\", inputParam.inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...inputParam.inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        screenName:'IDS_ADHOCPARAMETER',\r\n                        openModal:false,\r\n                        activeTestTab: \"IDS_RESULTS\",\r\n                        activeTabIndex:1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function enforceResult(inputParam,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = [];\r\n        url.push(rsapi.post(\"/grade/getGrade\", {\r\n            userinfo: userInfo\r\n        }));\r\n        url.push(rsapi.post(\"resultentrybysample/getenforceResult\", {\r\n            ncontrolcode:inputParam['ncontrolcode'],\r\n            ntransactiontestcode:inputParam['dataItem']['ntransactiontestcode'],\r\n            ntransactionresultcode:inputParam['dataItem']['ntransactionresultcode'],\r\n            userinfo: userInfo\r\n        })); \r\n       Axios.all(url)\r\n       .then(response => {\r\n        const Grade = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false); \r\n        let selectedRecord={}\r\n                let savedResultparameter=response[1].data['savedResultparameter']\r\n                   selectedRecord=//savedResultparameter['sgradename']&&savedResultparameter['sgradename']!=='NA'?\r\n                 {\r\n                        'senforceresult':savedResultparameter['sfinal']&&savedResultparameter['sfinal'],\r\n                        // 'ngradecode':{\r\n                        //     'label':savedResultparameter['sgradename']&&savedResultparameter['sgradename'],\r\n                        //     'value': savedResultparameter['ngradecode']&&savedResultparameter['ngradecode']\r\n                        // } ,\r\n                        'senforceresultcomment':savedResultparameter['senforceresultcomment']&&savedResultparameter['senforceresultcomment'],\r\n                        ntransactionresultcode:savedResultparameter['ntransactionresultcode'],\r\n                        ntransactiontestcode:savedResultparameter['ntransactiontestcode']\r\n                   }\r\n            //        : {\r\n            //         'senforceresult':savedResultparameter['sfinal']&&savedResultparameter['sfinal'],\r\n            //         'senforceresultcomment':savedResultparameter['senforceresultcomment']&&savedResultparameter['senforceresultcomment'],\r\n            //         // 'ngradecode':{\r\n            //         //     'label':savedResultparameter['sgradename']&&savedResultparameter['sgradename'],\r\n            //         //     'value': savedResultparameter['ngradecode']&&savedResultparameter['ngradecode']\r\n            //         // } ,\r\n            //         ntransactionresultcode:savedResultparameter['ntransactionresultcode'],\r\n            //         ntransactiontestcode:savedResultparameter['ntransactiontestcode']\r\n            //    };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            'GradeList':Grade.get(\"OptionList\") , \r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        ncontrolcode:inputParam['ncontrolcode'],\r\n                        selectedRecord,\r\n                        screenName: \"IDS_ENFORCERESULT\",\r\n                        openModal: true, \r\n                        operation: \"update\",  \r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function ResultEntryViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const selectedRecord={\r\n            ntestcode:viewdetails.test.ntestcode\r\n        }\r\n        rsapi.post(\"worklist/getSampleViewDetails\", { selectedRecord, PatientId:viewdetails.test.PatientId, npreregno: viewdetails.test.npreregno, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData['AuditModifiedComments'] = [];\r\n                masterData['AuditModifiedComments'] = response.data['AuditModifiedComments']\r\n                masterData['viewdetails'] = [];\r\n                masterData['viewdetails'] = response.data['viewdetails'][0]\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_PREVIOUSRESULTVIEW\",\r\n                        operation: \"\",\r\n                        loading: false,\r\n                        openModal: true,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}