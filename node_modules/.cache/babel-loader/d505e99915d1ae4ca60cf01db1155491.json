{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\worklist\\\\WorkList.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport WorklistPreparationFilter from './WorklistPreparationFilter';\nimport { rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\nimport { injectIntl } from \"react-intl\";\nimport Esign from \"../audittrail/Esign\";\nimport AddWorklistSection from '../worklist/AddWorklistSection';\nimport AddWorklistSample from '../worklist/AddWorklistSample';\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\nimport WorklistSampleTab from \"./WorklistSampleTab\";\nimport { designProperties, transactionStatus, REPORTTYPE } from '../../components/Enumeration';\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\nimport { ReactComponent as Closure } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/prepared-worklist.svg\";\nimport { ReactComponent as ReportIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-Icon.svg\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSectionAndTest, getWorklistDetail, OpenDate, CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise, ViewSampleDetails, getWorklisthistoryAction, reportWorklist, getRegSubTypeWise } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport { showEsign, getControlMap, constructOptionList } from \"../../components/CommonScript\";\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport { Affix } from \"rsuite\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass WorkList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      } // let toDate;\n      // let fromDate;\n\n\n      let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo);\n        fromdate = obj.fromDate;\n        todate = obj.toDate;\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          fromdate: String(fromdate),\n          todate: String(todate),\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getConfigVersionTestWise(inputParam);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\n            inputParamData = {\n              nflag: 2,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              defaultSampleTypeValue: comboData.item\n            };\n            this.props.getRegTypeWorklist(inputParamData);\n          }\n        } else if (fieldName === 'nregtypecode') {\n          if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\n            inputParamData = {\n              nflag: 3,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n              nregtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              nregtypecode: comboData.value,\n              masterData: { ...this.props.Login.masterData,\n                RegTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n              } //defaultRegTypeValue: comboData.item\n\n            };\n            this.props.getRegSubTypeWise(inputParamData);\n          }\n        } else if (fieldName === 'nregsubtypecode') {\n          if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\n            let inputData = {\n              nflag: 4,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\n              nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\n              nregsubtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo\n            };\n            inputParamData = {\n              inputData,\n              masterData: { ...this.props.Login.masterData,\n                RegSubTypeValue: comboData.item //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\n\n              }\n            };\n            this.props.getConfigVersionTestWise(inputParamData);\n          }\n        } else if (fieldName === 'ntransactionstatus') {\n          if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\n            let masterData = { ...this.props.Login.masterData,\n              FilterStatusValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else if (fieldName === 'napproveconfversioncode') {\n          if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\n            let masterData = { ...this.props.Login.masterData,\n              defaultApprovalVersionValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } //\n\n      }\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let instSection = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n\n      if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n        let postParam = undefined;\n        inputData[\"worklist\"] = {\n          nstatus: this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode;\n        inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value;\n        inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value;\n        inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n\n        if (this.props.Login.operation === \"update\") {\n          inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode;\n        }\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"Worklist\",\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } //add / edit  \n\n\n      let validList = true;\n\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\n        validList = false;\n      }\n\n      if (validList) {\n        let saveList = [];\n\n        if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\n          const compList = this.state.addedComponentList || []; //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\n\n          if (compList.length > 0) {\n            compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ? saveList.push(item) : \"\");\n            const masterData = this.props.Login.masterData;\n            const inputData = {\n              worklistcompcreationlist: saveList,\n              userinfo: this.props.Login.userInfo,\n              worklistcreation: this.props.Login.masterData.selectedWorklist,\n              ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n            };\n            let dataState = undefined;\n            let selectedId = null;\n            let postParam = undefined;\n            const inputParam = {\n              classUrl: \"worklist\",\n              methodUrl: \"WorklistCreation\",\n              inputData: inputData,\n              selectedId,\n              dataState,\n              postParam,\n              operation: \"create\",\n              saveType,\n              masterData\n            };\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData: masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n              this.props.createWorklistCreation(inputParam);\n            }\n          } else {\n            //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELCETONESAMPLE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_EXCEEDSMAXINSERT\"\n        }));\n      }\n    };\n\n    this.DeleteWorklistSample = (operation, ncontrolCode) => {\n      let inputData = [];\n\n      if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\n        const dataState = this.state.sectionDataState;\n        inputData[\"worklistsample\"] = {\n          nsitecode: this.props.Login.userInfo.ntranssitecode\n        };\n        inputData[\"worklistsample\"][\"nworklistcode\"] = operation.selectedRecord.nworklistcode;\n        inputData[\"worklistsample\"][\"nworklistsamplecode\"] = operation.selectedRecord.nworklistsamplecode;\n        inputData[\"worklistsample\"][\"ntransactiontestcode\"] = operation.selectedRecord.ntransactiontestcode;\n        inputData[\"worklistsample\"][\"ntransactionsamplecode\"] = operation.selectedRecord.ntransactionsamplecode;\n        inputData[\"worklistsample\"][\"sarno\"] = operation.selectedRecord.sarno;\n        inputData[\"worklistsample\"][\"ssamplearno\"] = operation.selectedRecord.ssamplearno;\n        inputData[\"worklistsample\"][\"stestname\"] = operation.selectedRecord.stestsynonym;\n        inputData[\"worklistsample\"][\"nregsubtypecode\"] = operation.selectedRecord.nregsubtypecode;\n        inputData[\"worklistsample\"][\"nregtypecode\"] = operation.selectedRecord.nregtypecode;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"WorklistSample\",\n          classUrl: this.props.Login.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: dataState\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"worklist\",\n              operation: operation.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedComponentList = this.state.addedComponentList || [];\n      const addComponentDataList = this.props.Login.addComponentDataList.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected;\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem);\n          } else {\n            addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode);\n          }\n        }\n\n        return item;\n      });\n      this.setState({\n        addComponentDataList,\n        addedComponentList,\n        addSelectAll: this.valiateCheckAll(addComponentDataList),\n        deleteSelectAll: this.valiateCheckAll(addedComponentList)\n      });\n    };\n\n    this.specificationReport = ncontrolCode => {\n      if (this.props.Login.masterData.selectedWorklist) {\n        const inputParam = {\n          inputData: {\n            sprimarykeyname: 'nworklistcode',\n            userinfo: this.props.Login.userInfo,\n            ncontrolcode: ncontrolCode,\n            nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\n            nreporttypecode: REPORTTYPE.CONTROLBASED\n          }\n        };\n        this.props.reportWorklist(inputParam['inputData']);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let addComponentDataList = event.dataItems; //this.state.addedComponentList || [];\n\n      let addedComponentList = [];\n\n      if (checked) {\n        const data = event.dataItems.map(item => {\n          //const data = this.state.addComponentDataList.map(item => {\n          if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            // addedComponentList.push({ ...item, selected: false });\n            item.selected = checked;\n            const newItem = JSON.parse(JSON.stringify(item));\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected']; //newItem.selected = false;\n\n            newItem[\"jsondata\"]['worklist'] = item;\n            newItem[\"jsonuidata\"]['worklist'] = item;\n            addedComponentList.push(newItem); //item.selected = false;\n\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            delete newItem['selected'];\n            newItem[\"jsondata\"]['worklist'] = olditem;\n            newItem[\"jsonuidata\"]['worklist'] = olditem;\n            addedComponentList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } //   if (checked) {\n      //     const data = event.dataItems.map(item => {\n      //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n      //           addComponentDataList.push({ ...item, selected: false });\n      //             item.selected = checked;   \n      //             let newItem = JSON.parse(JSON.stringify(item));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = item\n      //             newItem[\"jsonuidata\"]['worklist'] = item    \n      //             addedComponentList.push(newItem);\n      //             return item;\n      //         } else {\n      //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n      //             olditem.selected = checked;\n      //             let newItem = JSON.parse(JSON.stringify(olditem));\n      //             newItem.selected = false;\n      //             newItem[\"jsondata\"]={};\n      //             newItem[\"jsonuidata\"]={};\n      //             newItem[\"jsondata\"]['worklist'] = olditem\n      //             newItem[\"jsonuidata\"]['worklist'] = olditem\n      //             addedComponentList.push(newItem);\n      //             return olditem;\n      //         }\n      //     });\n      //     this.setState({\n      //       addComponentDataList: data,\n      //         addedComponentList:addedComponentList,\n      //         addComponentDataList,\n      //         addSelectAll: checked, \n      //         deleteSelectAll: false\n      //     });\n      // }\n      else {\n        let addedComponentData = this.state.addedComponentList || [];\n        let deletedListdData = this.state.deletedList || [];\n        const data = this.state.addComponentDataList.map(item => {\n          addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          addComponentDataList: data,\n          addedComponentList: addedComponentData,\n          deletedList: deletedListdData,\n          addSelectAll: this.valiateCheckAll(addedComponentList),\n          deleteSelectAll: this.valiateCheckAll(addedComponentList),\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const deleteSecId = this.state.controlMap.has(\"DeleteWorklistSample\") && this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n      const addSampleId = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n      const viewSampleId = this.state.controlMap.has(\"ViewWorklistSample\") && this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\n      tabMap.set(\"IDS_WORKLISTSAMPLE\", /*#__PURE__*/React.createElement(WorklistSampleTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.props.Login.masterData.WorklistSamples,\n        selectedWorklist: this.props.Login.masterData.WorklistSamples,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreItem) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteWorklistSample,\n        deleteSecId: deleteSecId,\n        defaultRecord: this.defaultRecord,\n        WorklistSamples: this.props.Login.masterData.WorklistSamples || [],\n        viewSample: this.viewSample,\n        screenName: \"IDS_WORKLISTSAMPLE\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        getWorklistSample: this.props.getWorklistSample,\n        masterData: this.props.Login.masterData,\n        addSampleId: addSampleId,\n        viewSampleId: viewSampleId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 7\n        }\n      }));\n      tabMap.set(\"IDS_WORKLISTHISTORY\", /*#__PURE__*/React.createElement(WorklistHistoryTab, {\n        dataState: this.props.Login.masterData.WorklistHistory,\n        selectedWorklistHistory: this.props.Login.masterData.WorklistHistory,\n        InstrumentSection: this.props.Login.masterData.WorklistHistory || [],\n        userInfo: this.props.Login.userInfo //inputParam={this.props.Login.inputParam}\n        // deleteRecord={this.DeleteWorklistSample}\n        // deleteSecId={deleteSecId}\n        // defaultSecId={defaultSecId}\n        // defaultRecord={this.defaultRecord}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_WORKLISTHISTORY\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 7\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_WORKLISTHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\n        };\n        this.props.getWorklisthistoryAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            activeKey: \"IDS_WORKLISTSAMPLE\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue;\n      let defaultApprovalVersionValue = this.props.Login.masterData.defaultApprovalVersion;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersionValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\n        ntransactionstatus: this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus || -1,\n        userinfo: this.props.Login.userInfo,\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = (operation, deleteId) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteWorklist(operation, deleteId, operation.screenName ? operation.screenName : \"IDS_WORKLIST\"));\n    };\n\n    this.DeleteWorklist = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      inputData['fromdate'] = obj.fromDate;\n      inputData['todate'] = obj.toDate;\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      const postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedWorklist.nworklistcode //fecthInputObject: { userinfo: this.props.Login.userInfo },\n\n      };\n      const inputParam = {\n        methodUrl: \"Worklist\",\n        postParam,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: operation.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"Worklist\",\n            operation: operation.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onApproveClick = () => {\n      //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\n      const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const masterData = this.props.Login.masterData; // //add               \n\n      let postParam = undefined;\n      inputData[\"worklist\"] = masterData.selectedWorklist;\n      inputData[\"ncontrolCode\"] = ncontrolCode;\n      inputData[\"ndesigntemplatemappingcode\"] = masterData.ndesigntemplatemappingcode; // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\n\n      postParam = {\n        inputListName: \"Worklist\",\n        selectedObject: \"selectedWorklist\",\n        primaryKeyField: \"nworklistcode\"\n      };\n      const inputParam = {\n        classUrl: 'worklist',\n        methodUrl: \"Worklist\",\n        inputData: inputData,\n        operation: \"approve\",\n        postParam\n      };\n      let saveType;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"approve\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\n        this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode);\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\n              delete selectedRecord[\"ntestcode\"];\n            }\n\n            selectedRecord[fieldName] = comboData; //this.setState({ selectedRecord });\n\n            this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.ncontrolCode);\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        if (selectedRecord[\"nsectioncode\"]) {\n          delete selectedRecord[\"nsectioncode\"];\n          delete selectedRecord[\"nusercode\"];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          modalShow = true; //openModal = false;\n        }\n      } else {\n        openModal = false;\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          modalShow,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewSample = viewdetails => {\n      //let openModal = this.props.Login.openModal;\n      //let openModal = true;\n      //let screenName = 'IDS_VIEWDETAILS'\n      this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_VIEWDETAILS\", this.props.Login.userInfo, viewdetails);\n    };\n\n    this.closeModalShow = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          modalShow,\n          selectedRecord,\n          selectedId: null,\n          loadEsign\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue;\n      let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue;\n      let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue;\n      let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue;\n      let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        defaultSampleTypeValue,\n        defaultRegTypeValue,\n        defaultRegSubTypeValue,\n        defaultFilterStatusValue,\n        defaultApprovalVersion\n      };\n      let inputData = {\n        //npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus || -1,\n        napprovalconfigversioncode: this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode || -1,\n        userinfo: this.props.Login.userInfo // activeTestTab: this.props.Login.activeTestTab,\n\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n        this.props.getWorklistDetailFilter(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    const sectionDataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedWorklist: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      sectionDataState,\n      addComponentDataList: [],\n      addedComponentList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      SampletypeList: [],\n      RegTypeValue: [],\n      ConfigVersionList: []\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  } // onNumericInputOnChange = (value, name) => {\n  //   const selectedRecord = this.state.selectedRecord || {};\n  //   selectedRecord[name] = value;\n  //   this.setState({ selectedRecord });\n  // };\n\n\n  // onApproveClick = () => {\n  //   //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\n  //   const ncontrolCode = this.state.controlMap.has(\"ApproveSupplier\") && this.state.controlMap.get(\"ApproveSupplier\").ncontrolcode\n  //   let inputData = [];\n  //   inputData[\"userinfo\"] = this.props.Login.userInfo;\n  //   //add               \n  //   let postParam = undefined;\n  //   inputData[\"supplier\"] = { \"nsuppliercode\": this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"] ? this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"].Value : \"\" };\n  //   inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\n  //   postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\n  //   const inputParam = {\n  //     classUrl: 'supplier',\n  //     methodUrl: \"Supplier\",\n  //     inputData: inputData,\n  //     operation: \"approve\", postParam\n  //   }\n  //   let saveType;\n  //   const masterData = this.props.Login.masterData;\n  //   const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n  //   if (esignNeeded) {\n  //     const updateInfo = {\n  //       typeName: DEFAULT_RETURN,\n  //       data: {\n  //         loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\n  //       }\n  //     }\n  //     this.props.updateStore(updateInfo);\n  //   }\n  //   else {\n  //     this.props.crudMaster(inputParam, masterData, \"openModal\");\n  //   }\n  //   // }\n  //   // else {\n  //   //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\n  //   // }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n    let mandatoryFields = [];\n    this.feildsForGrid = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"100px\"\n    }];\n    this.extractedColumnList = [//  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\n    {\n      \"idsName\": \"IDS_NEWCOMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"350px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONTYPE\",\n      \"dataField\": \"sactiontype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"smodulename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REASON\",\n      \"dataField\": \"spredefinedreason\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ESIGNCOMMENTS\",\n      \"dataField\": \"sreason\",\n      \"width\": \"200px\"\n    }];\n    const auditInfoFields = [{\n      \"fieldName\": \"sarno\",\n      \"label\": \"IDS_ARNO\"\n    }, {\n      \"fieldName\": \"sfirstname\",\n      \"label\": \"IDS_PATIENTNAME\"\n    }, {\n      \"fieldName\": \"sage\",\n      \"label\": \"IDS_AGE\"\n    }, {\n      \"fieldName\": \"sgendername\",\n      \"label\": \"IDS_GENDER\"\n    }, {\n      \"fieldName\": \"sregdate\",\n      \"label\": \"IDS_REGISTRATIONDATE\"\n    }, {\n      \"fieldName\": \"scompletedate\",\n      \"label\": \"IDS_COMPLETEDDATEANDTIME\"\n    }];\n\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_ADDSECTION\",\n        dataField: \"nsectioncode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        mandatory: true,\n        idsName: \"IDS_TEST\",\n        dataField: \"ntestcode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    const addId = this.state.controlMap.has(\"AddWorklist\") && this.state.controlMap.get(\"AddWorklist\").ncontrolcode; // const editId =\n    //   this.state.controlMap.has(\"EditWorklist\") &&\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\n\n    const deleteId = this.state.controlMap.has(\"DeleteWorklist\") && this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\n    const approvalId = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\n    const reportId = this.state.controlMap.has(\"WorklistReport\") && this.state.controlMap.get(\"WorklistReport\").ncontrolcode; // const addSampleId =\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\n    // const deleteSampleId =\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\n\n    const {\n      selectedWorklist\n    } = this.props.Login.masterData;\n    const filterParam = {\n      inputListName: \"Worklist\",\n      selectedObject: \"selectedWorklist\",\n      primaryKeyField: \"nworklistcode\",\n      fetchUrl: \"worklist/getWorklistSample\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"worklist\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Worklist,\n      getMasterDetail: worklist => this.props.getWorklistDetail(worklist, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedWorklist,\n      primaryKeyField: \"nworklistcode\",\n      mainField: \"sworklistno\",\n      firstField: \"stestname\",\n      secondField: \"ssectionname\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      addId: addId //hidePaging={true}\n      ,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSectionAndTest(\"IDS_WORKLIST\", \"create\", \"nworklistcode\", this.props.Login.masterData, this.props.Login.userInfo, addId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        IDS_WORKLISTFILTER: /*#__PURE__*/React.createElement(WorklistPreparationFilter, {\n          SampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegType: this.state.RegistrationTypeList || [],\n          userInfo: this.props.Login.userInfo || {},\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalVersionValue || [] //SampleType={this.state.stateSampleType || []}\n          ,\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.FilterStatusList || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          handleDateChange: this.handleDateChange,\n          onFilterComboChange: this.onFilterComboChange,\n          SampleType: this.state.SampletypeList || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 21\n      }\n    }, this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.selectedWorklist.sworklistno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 35\n      }\n    }, this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 112\n      }\n    }), this.props.Login.masterData.selectedWorklist.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteWorklist\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete({\n        operation: \"delete\",\n        screenName: \"IDS_WORKLIST\"\n      }, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approvalId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PREPARED\"\n      }) //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\n      ,\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Closure, {\n      className: \"custom_icons\",\n      width: \"17\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(reportId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORT\"\n      }),\n      onClick: () => this.specificationReport(reportId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(ReportIcon, {\n      className: \"custom_icons\",\n      width: \"17\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 37\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 27\n      }\n    }, selectedWorklist && /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 31\n      }\n    }))) : \"\"))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFields,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      hideSave: this.props.Login.screenName === \"IDS_VIEWDETAILS\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 17\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLIST\" ? /*#__PURE__*/React.createElement(AddWorklistSection //onNumericInputOnChange={this.onNumericInputOnChange}\n      , {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        SectionValue: this.props.Login.Section,\n        TestValue: this.props.Login.Test,\n        handleDateChange: this.handleDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153,\n          columnNumber: 19\n        }\n      }) : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? /*#__PURE__*/React.createElement(AddWorklistSample, {\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        addComponentDataList: this.props.Login.addComponentDataList,\n        addSelectAll: this.state.addSelectAll //onNumericInputOnChange={this.onNumericInputOnChange}\n        ,\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        TestValue: this.props.Login.Test,\n        handleDateChange: this.handleDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 21\n        }\n      }) : this.props.Login.screenName === \"IDS_VIEWDETAILS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1185,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.masterData.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_SPECIFICATIONINFO\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1186,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1200,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactiontestcode\" //data={this.props.Login.addComponentDataList || []}\n        ,\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0 && process(this.props.Login.masterData.AuditModifiedComments, {\n          skip: 0,\n          take: 10\n        }),\n        dataState: {\n          skip: 0,\n          take: 10\n        },\n        selectionChange: this.selectionChange,\n        headerSelectionChange: this.headerSelectionChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 25\n        }\n      })) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      addedComponentList,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      nfilterInstrumentCategory,\n      filterInstrumentCategory,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      SampletypeList,\n      RegistrationTypeList,\n      DynamicGridItem,\n      DynamicGridMoreItem,\n      ConfigVersionList,\n      subsampleGridItem,\n      sampleGridItem,\n      testGridItem = [],\n      samplegridmoreitem,\n      addSelectAll,\n      deleteSelectAll\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\n      addSelectAll = false;\n      deleteSelectAll = true;\n\n      if (this.props.Login.masterData.SelectedInsCat && this.props.Login.masterData.SelectedInsCat !== previousProps.Login.masterData.SelectedInsCat) {\n        nfilterInstrumentCategory = {\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\n          item: this.props.Login.masterData.SelectedInsCat\n        };\n      }\n\n      filterData = this.generateBreadCrumData();\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n      sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : []; //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\n\n      DynamicGridItem = [...testGridItem, ...sampleGridItem, ...subsampleGridItem];\n      samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      DynamicGridMoreItem = [...samplegridmoreitem]; //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\n    }\n\n    if (this.props.Login.masterData.filterInstrumentCategory !== previousProps.Login.masterData.filterInstrumentCategory) {\n      const insCategoryMap = constructOptionList(this.props.Login.masterData.filterInstrumentCategory || [], \"ntestcode\", \"stestsynonym\", \"ntestcategorycode\", \"ascending\", false);\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\n\n      if (insCategoryMap.get(\"DefaultValue\")) {\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\n      } else if (filterInstrumentCategory && filterInstrumentCategory.length > 0) {\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\n      }\n\n      updateState = true;\n    } // let updateState = false;\n\n\n    let updateStateObject = {};\n\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\n      addSelectAll = false;\n      deleteSelectAll = true;\n      this.setState({\n        addedComponentList: this.props.Login.addedComponentList,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\n      // this.setState({ addedComponentList : this.props.addedComponentList});\n      updateState = true;\n      updateStateObject = { ...updateStateObject,\n        addedComponentList: this.props.addedComponentList\n      };\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        filterData,\n        nfilterInstrumentCategory,\n        filterInstrumentCategory,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        SampletypeList,\n        RegistrationTypeList,\n        DynamicGridItem,\n        ConfigVersionList,\n        DynamicGridMoreItem,\n        addSelectAll,\n        deleteSelectAll\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, // {\n      //   \"label\": \"IDS_SAMPLETYPE\",\n      //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\n      //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" : this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\n      }, // {\n      //   \"label\": \"IDS_CONFIGVERSION\",\n      //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\n      //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\n      //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\n      // },\n      {\n        \"label\": \"IDS_WORKLISTSTATUS\",\n        \"value\": this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : this.props.Login.masterData.defaultFilterStatusValue ? this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\n      } //];\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getWorklistDetail,\n  filterColumnData,\n  getSectionAndTest,\n  updateStore,\n  validateEsignCredential,\n  onWorklistApproveClick,\n  OpenDate,\n  CloseDate,\n  viewAttachment,\n  getInstrumentCombo,\n  getWorklistSample,\n  getRegTypeTestWise,\n  getRegTypeWorklist,\n  getSectionbaseTest,\n  getWorklistDetailFilter,\n  getEditSectionAndTest,\n  createWorklistCreation,\n  getConfigVersionTestWise,\n  ViewSampleDetails,\n  getWorklisthistoryAction,\n  reportWorklist,\n  getRegSubTypeWise\n})(injectIntl(WorkList));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/worklist/WorkList.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","toast","FontAwesomeIcon","faCheck","faTrashAlt","WorklistPreparationFilter","rearrangeDateFormat","convertDateValuetoString","injectIntl","Esign","AddWorklistSection","AddWorklistSample","CustomTab","WorklistHistoryTab","WorklistSampleTab","designProperties","transactionStatus","REPORTTYPE","SpecificationInfo","callService","crudMaster","validateEsignCredential","updateStore","getSectionAndTest","getWorklistDetail","OpenDate","CloseDate","viewAttachment","getInstrumentCombo","getWorklistSample","getRegTypeTestWise","getRegTypeWorklist","getSectionbaseTest","onWorklistApproveClick","getWorklistDetailFilter","getEditSectionAndTest","createWorklistCreation","filterColumnData","getConfigVersionTestWise","ViewSampleDetails","getWorklisthistoryAction","reportWorklist","getRegSubTypeWise","ListMaster","DEFAULT_RETURN","SlideOutModal","showEsign","getControlMap","constructOptionList","ContentPanel","MediaLabel","process","ConfirmMessage","BreadcrumbComponent","Affix","DataGrid","mapStateToProps","state","Login","WorkList","constructor","props","handleDateChange","dateName","dateValue","Date","fromdate","masterData","fromDate","userInfo","todate","toDate","obj","inputParam","inputData","nflag","nregtypecode","RegTypeValue","nregsubtypecode","RegSubTypeValue","nneedtemplatebasedflow","String","userinfo","onFilterComboChange","comboData","fieldName","inputParamData","value","defaultSampleTypeValue","nsampletypecode","item","defaultRegTypeValue","FilterStatusValue","ntransactionstatus","updateInfo","typeName","data","defaultApprovalVersionValue","napproveconfversioncode","onInputOnChange","event","optional","selectedRecord","target","type","name","checked","setState","onSaveClick","saveType","formRef","instSection","screenName","postParam","undefined","nstatus","nmastersitecode","ndesigntemplatemappingcode","operation","selectedWorklist","nworklistcode","classUrl","methodUrl","searchRef","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","validList","addedComponentList","length","saveList","compList","map","indexOf","ntransactionsamplecode","push","worklistcompcreationlist","worklistcreation","dataState","selectedId","warn","intl","formatMessage","id","DeleteWorklistSample","sectionDataState","nsitecode","ntranssitecode","nworklistsamplecode","ntransactiontestcode","sarno","ssamplearno","stestsynonym","openModal","selectionChange","addComponentDataList","dataItem","selected","newItem","JSON","parse","stringify","filter","item1","addSelectAll","valiateCheckAll","deleteSelectAll","specificationReport","sprimarykeyname","ncontrolcode","nreporttypecode","CONTROLBASED","headerSelectionChange","syntheticEvent","dataItems","findIndex","x","olditem","addedComponentData","deletedListdData","deletedList","npreregno","validateEsign","sreason","password","tabDetail","tabMap","Map","deleteSecId","controlMap","has","get","addSampleId","viewSampleId","set","WorklistSamples","gridfillingColumn","DynamicGridItem","DynamicGridMoreItem","defaultRecord","viewSample","settings","WorklistHistory","onTabChange","tabProps","activeKey","reloadData","current","realFromDate","realToDate","defaultRegSubTypeValue","defaultFilterStatusValue","defaultApprovalVersion","parseInt","napprovalconfigversioncode","searchTestRef","skip","take","testskip","testtake","ConfirmDelete","deleteId","confirmMessage","confirm","DeleteWorklist","inputListName","selectedObject","primaryKeyField","primaryKeyValue","onApproveClick","esignNeeded","onComboChange","caseNo","closeModal","modalShow","NO","viewdetails","closeModalShow","openFilter","showFilter","closeFilter","onFilterSubmit","error","Instrument","RegistrationSubTypeList","FilterStatusList","SampletypeList","ConfigVersionList","createRef","searchFieldList","temparray","option","LABEL","slanguagetypecode","VALUE","selectAll","forEach","getDerivedStateFromProps","masterStatus","errorCode","render","mandatoryFields","feildsForGrid","extractedColumnList","auditInfoFields","mandatory","idsName","dataField","mandatoryLabel","controlType","addId","approvalId","reportId","filterParam","fetchUrl","fecthInputObject","breadCrumbData","filterData","searchedData","Worklist","worklist","IDS_WORKLISTFILTER","RegistrationTypeList","stateRegistrationType","stateRegistrationSubType","sworklistno","stransdisplaystatus","Section","Test","selectedNode","ApprovalRoleActionDetail","AuditModifiedComments","componentDidUpdate","previousProps","updateState","nfilterInstrumentCategory","filterInstrumentCategory","subsampleGridItem","sampleGridItem","testGridItem","samplegridmoreitem","Object","values","RegistrationSubTypeListMap","RegistrationSubType","RegistrationTypeListMap","RegistrationType","FilterStatusListMap","FilterStatus","SampletypeListMap","SampleType","ConfigVersionListMap","ApprovalConfigVersion","SelectedInsCat","label","ntestcode","generateBreadCrumData","DynamicDesign","dynamicColumn","jsondata","testListFields","releasetestfields","samplegriditem","subsamplelistitem","insCategoryMap","updateStateObject","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport WorklistPreparationFilter from './WorklistPreparationFilter'\r\nimport { rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\r\nimport { injectIntl } from \"react-intl\";\r\nimport Esign from \"../audittrail/Esign\";\r\nimport AddWorklistSection from '../worklist/AddWorklistSection';\r\nimport AddWorklistSample from '../worklist/AddWorklistSample';\r\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\r\nimport WorklistHistoryTab from \"./WorklistHistoryTab\";\r\nimport WorklistSampleTab from \"./WorklistSampleTab\";\r\nimport { designProperties, transactionStatus,REPORTTYPE } from '../../components/Enumeration';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\nimport { ReactComponent as Closure } from '../../assets/image/prepared-worklist.svg';\r\nimport { ReactComponent as ReportIcon } from '../../assets/image/report-Icon.svg';\r\nimport {\r\n  callService,\r\n  crudMaster,\r\n  validateEsignCredential,\r\n  updateStore,\r\n  getSectionAndTest,\r\n  getWorklistDetail,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise,\r\n  getRegTypeWorklist, getSectionbaseTest, onWorklistApproveClick\r\n  , getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, filterColumnData, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction,reportWorklist,getRegSubTypeWise\r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\n\r\nimport {\r\n  showEsign,\r\n  getControlMap,\r\n  constructOptionList,\r\n} from \"../../components/CommonScript\";\r\nimport { ContentPanel, MediaLabel } from \"../../components/App.styles\";\r\n\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\n\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport { Affix } from \"rsuite\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass WorkList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sectionDataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedWorklist: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      sectionDataState,\r\n      addComponentDataList: [],\r\n      addedComponentList: [],\r\n      RegistrationSubTypeList: [], FilterStatusList: [], SampletypeList: [], RegTypeValue: [], ConfigVersionList: []\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sworklistno\", \"stestname\"];\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n\r\n\r\n    if (dateValue === null) {\r\n      dateValue = new Date();\r\n    }\r\n    // let toDate;\r\n    // let fromDate;\r\n    let fromdate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n    let todate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n    let obj = {}\r\n    if (dateName === 'fromDate') {\r\n      obj = convertDateValuetoString(dateValue, todate, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n    } else {\r\n      obj = convertDateValuetoString(fromdate, dateValue, this.props.Login.userInfo)\r\n      fromdate = obj.fromDate\r\n      todate = obj.toDate\r\n      let fromDate = obj.fromDate\r\n      let toDate = obj.toDate\r\n\r\n    }\r\n    let inputParam = {\r\n      inputData: {\r\n        nflag: 2,\r\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n        fromdate: String(fromdate),\r\n        todate: String(todate),\r\n        userinfo: this.props.Login.userInfo\r\n      },\r\n      masterData: this.props.Login.masterData\r\n\r\n    }\r\n    this.props.getConfigVersionTestWise(inputParam)\r\n\r\n  };\r\n\r\n\r\n\r\n  onFilterComboChange = (comboData, fieldName) => {\r\n\r\n    if (comboData) {\r\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n      let inputParamData = {};\r\n      if (fieldName === 'nsampletypecode') {\r\n        if (comboData.value !== this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) {\r\n          inputParamData = {\r\n            nflag: 2,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            nsampletypecode: comboData.value,\r\n            userinfo: this.props.Login.userInfo,\r\n            masterData: this.props.Login.masterData,\r\n            defaultSampleTypeValue: comboData.item\r\n          };\r\n          this.props.getRegTypeWorklist(inputParamData)\r\n        }\r\n      } else if (fieldName === 'nregtypecode') {\r\n        if (comboData.value !== this.props.Login.masterData.defaultRegTypeValue.nregtypecode) {\r\n          inputParamData = {\r\n            nflag: 3,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n            nregtypecode: comboData.value,\r\n            userinfo: this.props.Login.userInfo,\r\n            masterData: this.props.Login.masterData,\r\n            nregtypecode: comboData.value,\r\n            masterData: {\r\n              ...this.props.Login.masterData,\r\n              RegTypeValue: comboData.item,\r\n              //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n            }\r\n            //defaultRegTypeValue: comboData.item\r\n\r\n\r\n          }\r\n          this.props.getRegSubTypeWise(inputParamData)\r\n        }\r\n\r\n\r\n\r\n      } else if (fieldName === 'nregsubtypecode') {\r\n       \r\n        if (comboData.value !== this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) {\r\n          let inputData = {\r\n            nflag: 4,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nneedtemplatebasedflow: comboData.item.nneedtemplatebasedflow,\r\n            nregsubtypecode: comboData.value,\r\n            userinfo: this.props.Login.userInfo\r\n          }\r\n          inputParamData = {\r\n            inputData,\r\n            masterData: {\r\n              ...this.props.Login.masterData,\r\n              RegSubTypeValue: comboData.item,\r\n              //RegistrationSubTypeList: inputParam.masterData.RegistrationSubTypeList\r\n            }\r\n          }\r\n          this.props.getConfigVersionTestWise(inputParamData)\r\n        }\r\n      }\r\n\r\n      else if (fieldName === 'ntransactionstatus') {\r\n        if (comboData.value !== this.props.Login.masterData.FilterStatusValue.ntransactionstatus) {\r\n          let masterData = { ...this.props.Login.masterData, FilterStatusValue: comboData.item }\r\n          const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n        }\r\n      }\r\n\r\n\r\n      else if (fieldName === 'napproveconfversioncode') {\r\n        if (comboData.value !== this.props.Login.masterData.defaultApprovalVersionValue.napproveconfversioncode) {\r\n          let masterData = { ...this.props.Login.masterData, defaultApprovalVersionValue: comboData.item }\r\n          const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n        }\r\n      }\r\n\r\n      //\r\n    }\r\n  }\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n\r\n  onSaveClick = (saveType, formRef) => {\r\n    let inputData = [];\r\n    let instSection = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      let postParam = undefined;\r\n      inputData[\"worklist\"] = {\r\n        nstatus: this.props.Login.userInfo.nmastersitecode,\r\n      };\r\n      inputData[\"worklist\"][\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode\r\n      inputData[\"worklist\"][\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"].value\r\n      inputData[\"worklist\"][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"].value\r\n      inputData[\"worklist\"][\"nregtypecode\"] = this.props.Login.masterData.RegTypeValue.nregtypecode\r\n      inputData[\"worklist\"][\"nregsubtypecode\"] = this.props.Login.masterData.RegSubTypeValue.nregsubtypecode\r\n      inputData[\"ndesigntemplatemappingcode\"]= this.props.Login.masterData.ndesigntemplatemappingcode\r\n      if (this.props.Login.operation === \"update\") { inputData[\"worklist\"][\"nworklistcode\"] = this.props.Login.masterData.selectedWorklist.nworklistcode }\r\n\r\n      const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: \"Worklist\",\r\n        inputData: inputData,\r\n        operation: this.props.Login.operation,\r\n        saveType,\r\n        formRef,\r\n        postParam,\r\n        searchRef: this.searchRef,\r\n      };\r\n      const masterData = this.props.Login.masterData;\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          this.props.Login.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: { inputParam, masterData },\r\n            saveType,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n      }\r\n    }\r\n\r\n\r\n\r\n    //add / edit  \r\n\r\n    let validList = true;\r\n    if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" && this.state.addedComponentList.length > 1000) {\r\n      validList = false;\r\n    }\r\n\r\n    if (validList) {\r\n      let saveList = [];\r\n      if (this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n        const compList = this.state.addedComponentList || [];\r\n        //compList.map(item=>saveList.push({\"npreregno\": item.npreregno}));\r\n        if(compList.length>0)\r\n        {\r\n\r\n        compList.map(item => saveList.indexOf(item.ntransactionsamplecode) === -1 ?\r\n          saveList.push(item) : \"\");\r\n        const masterData = this.props.Login.masterData;\r\n        const inputData = {\r\n          worklistcompcreationlist: saveList,\r\n          userinfo: this.props.Login.userInfo,\r\n          worklistcreation: this.props.Login.masterData.selectedWorklist,\r\n          ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        };\r\n\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n\r\n        const inputParam = {\r\n          classUrl: \"worklist\",\r\n          methodUrl: \"WorklistCreation\",\r\n          inputData: inputData, selectedId, dataState, postParam,\r\n          operation: \"create\", saveType, masterData\r\n        };\r\n\r\n\r\n\r\n        if (\r\n          showEsign(\r\n            this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode,\r\n            this.props.Login.ncontrolCode\r\n          )\r\n        ) {\r\n          const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n              loadEsign: true, screenData: { inputParam, masterData: masterData }, saveType\r\n            }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n          //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n          this.props.createWorklistCreation(inputParam);\r\n        }\r\n\r\n\r\n      }\r\n      else {\r\n        //this.props.crudMaster(inputParam,masterData, \"openChildModal\");\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELCETONESAMPLE\" }));\r\n      }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n      \r\n    }\r\n    else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXINSERT\" }));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  DeleteWorklistSample = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n    if (operation.screenName === \"IDS_WORKLISTSAMPLE\") {\r\n      const dataState = this.state.sectionDataState;\r\n      inputData[\"worklistsample\"] = {\r\n        nsitecode: this.props.Login.userInfo.ntranssitecode,\r\n      };\r\n      inputData[\"worklistsample\"][\"nworklistcode\"] =\r\n        operation.selectedRecord.nworklistcode;\r\n      inputData[\"worklistsample\"][\"nworklistsamplecode\"] =\r\n        operation.selectedRecord.nworklistsamplecode;\r\n      inputData[\"worklistsample\"][\"ntransactiontestcode\"] =\r\n        operation.selectedRecord.ntransactiontestcode;\r\n      inputData[\"worklistsample\"][\"ntransactionsamplecode\"] =\r\n        operation.selectedRecord.ntransactionsamplecode;\r\n        inputData[\"worklistsample\"][\"sarno\"] =\r\n        operation.selectedRecord.sarno;\r\n        inputData[\"worklistsample\"][\"ssamplearno\"] =\r\n        operation.selectedRecord.ssamplearno;\r\n        inputData[\"worklistsample\"][\"stestname\"] =\r\n        operation.selectedRecord.stestsynonym;\r\n        inputData[\"worklistsample\"][\"nregsubtypecode\"] =\r\n        operation.selectedRecord.nregsubtypecode;\r\n        inputData[\"worklistsample\"][\"nregtypecode\"] =\r\n        operation.selectedRecord.nregtypecode;\r\n        inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n\r\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n      const inputParam = {\r\n        methodUrl: \"WorklistSample\",\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        inputData: inputData,\r\n        operation: \"delete\",\r\n        dataState: dataState,\r\n      };\r\n      const masterData = this.props.Login.masterData;\r\n      if (\r\n        showEsign(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode,\r\n          operation.ncontrolCode\r\n        )\r\n      ) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true,\r\n            screenData: { inputParam, masterData },\r\n            openModal: true,\r\n            screenName: \"worklist\",\r\n            operation: operation.operation,\r\n          },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n      } else {\r\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  gridfillingColumn(data) {\r\n    const temparray = data && data.map((option) => {\r\n      return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n    });\r\n\r\n    return temparray;\r\n  }\r\n  // onNumericInputOnChange = (value, name) => {\r\n  //   const selectedRecord = this.state.selectedRecord || {};\r\n  //   selectedRecord[name] = value;\r\n  //   this.setState({ selectedRecord });\r\n  // };\r\n\r\n\r\n  selectionChange = (event) => {\r\n    let addedComponentList = this.state.addedComponentList || [];\r\n    const addComponentDataList = this.props.Login.addComponentDataList.map(item => {\r\n      if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n        item.selected = !event.dataItem.selected;\r\n        if (item.selected) {\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n        }\r\n        else {\r\n          addedComponentList = addedComponentList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      addComponentDataList, addedComponentList,\r\n      addSelectAll: this.valiateCheckAll(addComponentDataList),\r\n      deleteSelectAll: this.valiateCheckAll(addedComponentList)\r\n    });\r\n  }\r\n\r\n  specificationReport = ( ncontrolCode) => {\r\n    if (this.props.Login.masterData.selectedWorklist) {\r\n        const inputParam = {\r\n            inputData: {\r\n                sprimarykeyname: 'nworklistcode',\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: ncontrolCode,\r\n                nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n                nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n\r\n            },\r\n        }\r\n        this.props.reportWorklist(inputParam['inputData']);\r\n    } else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n    }\r\n}\r\n\r\n  headerSelectionChange = (event) => {\r\n    const checked = event.syntheticEvent.target.checked;\r\n    let addComponentDataList = event.dataItems //this.state.addedComponentList || [];\r\n    let addedComponentList=[];\r\n   \r\n\r\n    if (checked) {\r\n      const data = event.dataItems.map(item => {\r\n        //const data = this.state.addComponentDataList.map(item => {\r\n        if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n         \r\n         \r\n         // addedComponentList.push({ ...item, selected: false });\r\n          item.selected = checked;\r\n          const newItem = JSON.parse(JSON.stringify(item));\r\n          newItem[\"jsondata\"] = {}\r\n          newItem[\"jsonuidata\"] = {}\r\n          delete newItem['selected']\r\n          //newItem.selected = false;\r\n          newItem[\"jsondata\"]['worklist'] = item\r\n          newItem[\"jsonuidata\"]['worklist'] = item\r\n          addedComponentList.push(newItem);\r\n          //item.selected = false;\r\n          return item;\r\n        } else {\r\n          let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n          olditem.selected = checked;\r\n          let newItem = JSON.parse(JSON.stringify(olditem));\r\n          newItem.selected = false;\r\n                    newItem[\"jsondata\"]={};\r\n                    newItem[\"jsonuidata\"]={};\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"]['worklist'] = olditem\r\n                    newItem[\"jsonuidata\"]['worklist'] = olditem\r\n                    addedComponentList.push(newItem);\r\n          return olditem;\r\n        }\r\n\r\n      });\r\n\r\n\r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false\r\n      });\r\n    }\r\n\r\n\r\n  //   if (checked) {\r\n  //     const data = event.dataItems.map(item => {\r\n  //         if (addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n  //           addComponentDataList.push({ ...item, selected: false });\r\n  //             item.selected = checked;   \r\n  //             let newItem = JSON.parse(JSON.stringify(item));\r\n  //             newItem.selected = false;\r\n  //             newItem[\"jsondata\"]={};\r\n  //             newItem[\"jsonuidata\"]={};\r\n  //             newItem[\"jsondata\"]['worklist'] = item\r\n  //             newItem[\"jsonuidata\"]['worklist'] = item    \r\n  //             addedComponentList.push(newItem);\r\n  //             return item;\r\n  //         } else {\r\n  //             let olditem = JSON.parse(JSON.stringify(addComponentDataList[addComponentDataList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n  //             olditem.selected = checked;\r\n  //             let newItem = JSON.parse(JSON.stringify(olditem));\r\n  //             newItem.selected = false;\r\n  //             newItem[\"jsondata\"]={};\r\n  //             newItem[\"jsonuidata\"]={};\r\n  //             newItem[\"jsondata\"]['worklist'] = olditem\r\n  //             newItem[\"jsonuidata\"]['worklist'] = olditem\r\n  //             addedComponentList.push(newItem);\r\n  //             return olditem;\r\n              \r\n  //         }\r\n\r\n  //     });\r\n\r\n\r\n  //     this.setState({\r\n  //       addComponentDataList: data,\r\n  //         addedComponentList:addedComponentList,\r\n  //         addComponentDataList,\r\n  //         addSelectAll: checked, \r\n  //         deleteSelectAll: false\r\n  //     });\r\n  // }\r\n    else {\r\n      let addedComponentData = this.state.addedComponentList || [];\r\n      let deletedListdData = this.state.deletedList || [];\r\n\r\n      const data = this.state.addComponentDataList.map(item => {\r\n        addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n        item.selected = checked;\r\n        return item;\r\n      });\r\n\r\n      // console.log(\"data:\",data1, data2);\r\n      this.setState({\r\n        addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n        addSelectAll: this.valiateCheckAll(addedComponentList),\r\n        deleteSelectAll: this.valiateCheckAll(addedComponentList),\r\n        addSelectAll: checked, deleteSelectAll: false\r\n      });\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  // onApproveClick = () => {\r\n  //   //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n  //   const ncontrolCode = this.state.controlMap.has(\"ApproveSupplier\") && this.state.controlMap.get(\"ApproveSupplier\").ncontrolcode\r\n  //   let inputData = [];\r\n  //   inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n  //   //add               \r\n  //   let postParam = undefined;\r\n  //   inputData[\"supplier\"] = { \"nsuppliercode\": this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"] ? this.props.Login.masterData.SelectedSupplier[\"nsuppliercode\"].Value : \"\" };\r\n  //   inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n  //   postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\r\n  //   const inputParam = {\r\n  //     classUrl: 'supplier',\r\n  //     methodUrl: \"Supplier\",\r\n  //     inputData: inputData,\r\n  //     operation: \"approve\", postParam\r\n  //   }\r\n  //   let saveType;\r\n\r\n  //   const masterData = this.props.Login.masterData;\r\n\r\n  //   const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n  //   if (esignNeeded) {\r\n  //     const updateInfo = {\r\n  //       typeName: DEFAULT_RETURN,\r\n  //       data: {\r\n  //         loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n  //       }\r\n  //     }\r\n  //     this.props.updateStore(updateInfo);\r\n  //   }\r\n  //   else {\r\n  //     this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n  //   }\r\n\r\n  //   // }\r\n  //   // else {\r\n  //   //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n  //   // }\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  valiateCheckAll(data) {\r\n\r\n    let selectAll = true;\r\n\r\n    // let checkRepeatComponent;\r\n\r\n    //  let addedComponentList = this.state.addedComponentList || [];\r\n\r\n    if (data && data.length > 0) {\r\n\r\n      data.forEach(dataItem => {\r\n\r\n        if (dataItem.selected) {\r\n\r\n          if (dataItem.selected === false) {\r\n\r\n            selectAll = false;\r\n\r\n          }\r\n\r\n        }\r\n\r\n        else {\r\n\r\n          selectAll = false;\r\n\r\n          // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n\r\n          // if(checkRepeatComponent.length>0){\r\n\r\n          //     selectAll = true;\r\n\r\n          // }else{\r\n\r\n          //     selectAll = false;\r\n\r\n          // }\r\n\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n\r\n    else {\r\n\r\n      //if (gridType === \"originalgrid\"){\r\n\r\n      selectAll = false;\r\n\r\n      // }\r\n\r\n    }\r\n\r\n    return selectAll;\r\n\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validateEsign = () => {\r\n    const inputParam = {\r\n      inputData: {\r\n        userinfo: {\r\n          ...this.props.Login.userInfo,\r\n          sreason: this.state.selectedRecord[\"esigncomments\"],\r\n        },\r\n        password: this.state.selectedRecord[\"esignpassword\"],\r\n      },\r\n      screenData: this.props.Login.screenData,\r\n    };\r\n\r\n    this.props.validateEsignCredential(inputParam, \"openModal\");\r\n\r\n  };\r\n\r\n\r\n\r\n  // onSwitchChange = (item, key, methodUrl) => {\r\n  //   let dataItem = item;\r\n  //   dataItem[\"ndefaultstatus\"] = 3;\r\n  //   const inputParam = {\r\n  //     inputData: {\r\n  //       [key]: dataItem,\r\n  //       userinfo: this.props.userInfo,\r\n  //     },\r\n  //     classUrl: \"testmaster\",\r\n  //     operation: \"setDefault\",\r\n  //     methodUrl: methodUrl,\r\n  //   };\r\n  //   this.props.crudMaster(\r\n  //     inputParam,\r\n  //     this.props.masterData,\r\n  //     \"openChildModal\",\r\n  //     {}\r\n  //   );\r\n  // };\r\n\r\n  tabDetail = () => {\r\n    const tabMap = new Map();\r\n    const deleteSecId =\r\n      this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n      this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n    const addSampleId =\r\n      this.state.controlMap.has(\"AddSamples\") &&\r\n      this.state.controlMap.get(\"AddSamples\").ncontrolcode;\r\n\r\n      const viewSampleId =\r\n      this.state.controlMap.has(\"ViewWorklistSample\") &&\r\n      this.state.controlMap.get(\"ViewWorklistSample\").ncontrolcode;\r\n\r\n    tabMap.set(\r\n\r\n      \"IDS_WORKLISTSAMPLE\",\r\n      <WorklistSampleTab\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        dataState={this.props.Login.masterData.WorklistSamples}\r\n        selectedWorklist={this.props.Login.masterData.WorklistSamples}\r\n        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreItem) || []}\r\n        \r\n        userInfo={this.props.Login.userInfo}\r\n        inputParam={this.props.Login.inputParam}\r\n        deleteRecord={this.DeleteWorklistSample}\r\n        deleteSecId={deleteSecId}\r\n        defaultRecord={this.defaultRecord}\r\n        WorklistSamples={this.props.Login.masterData.WorklistSamples || []}\r\n        viewSample={this.viewSample}\r\n        screenName=\"IDS_WORKLISTSAMPLE\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n        getWorklistSample={this.props.getWorklistSample}\r\n        masterData={this.props.Login.masterData}\r\n        addSampleId={addSampleId}\r\n        viewSampleId={viewSampleId}\r\n      />\r\n\r\n    );\r\n    tabMap.set(\r\n      \"IDS_WORKLISTHISTORY\",\r\n      <WorklistHistoryTab\r\n        dataState={this.props.Login.masterData.WorklistHistory}\r\n        selectedWorklistHistory={this.props.Login.masterData.WorklistHistory}\r\n        InstrumentSection={this.props.Login.masterData.WorklistHistory || []}\r\n        userInfo={this.props.Login.userInfo}\r\n        //inputParam={this.props.Login.inputParam}\r\n        // deleteRecord={this.DeleteWorklistSample}\r\n        // deleteSecId={deleteSecId}\r\n        // defaultSecId={defaultSecId}\r\n        // defaultRecord={this.defaultRecord}\r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        screenName=\"IDS_WORKLISTHISTORY\"\r\n        selectedRecord={this.state.selectedRecord}\r\n        settings={this.props.Login.settings}\r\n      />\r\n    );\r\n\r\n\r\n    return tabMap;\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    let mandatoryFields = [];\r\n    this.feildsForGrid =\r\n      [\r\n        { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n        { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\r\n        { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\r\n      ];\r\n    this.extractedColumnList = [\r\n\r\n      //  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_NEWCOMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n      { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ACTIONTYPE\", \"dataField\": \"sactiontype\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"smodulename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REASON\", \"dataField\": \"spredefinedreason\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_ESIGNCOMMENTS\", \"dataField\": \"sreason\", \"width\": \"200px\" },\r\n\r\n\r\n    ]\r\n\r\n    const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" },    \r\n    { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n    { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\r\n    { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n    { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\r\n    { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\r\n    \r\n    ];\r\n\r\n    if (this.props.Login.screenName === \"IDS_WORKLIST\") {\r\n      mandatoryFields.push(\r\n        {\r\n          mandatory: true,\r\n          idsName: \"IDS_ADDSECTION\",\r\n          dataField: \"nsectioncode\",\r\n          mandatoryLabel: \"IDS_SELECT\",\r\n          controlType: \"selectbox\",\r\n        }, {\r\n        mandatory: true,\r\n        idsName: \"IDS_TEST\",\r\n        dataField: \"ntestcode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }\r\n      );\r\n\r\n    }\r\n\r\n    const addId =\r\n      this.state.controlMap.has(\"AddWorklist\") &&\r\n      this.state.controlMap.get(\"AddWorklist\").ncontrolcode;\r\n    // const editId =\r\n    //   this.state.controlMap.has(\"EditWorklist\") &&\r\n    //   this.state.controlMap.get(\"EditWorklist\").ncontrolcode;\r\n    const deleteId =\r\n    this.state.controlMap.has(\"DeleteWorklist\") &&\r\n    this.state.controlMap.get(\"DeleteWorklist\").ncontrolcode;\r\n\r\n    const approvalId =\r\n      this.state.controlMap.has(\"GenerateWorklist\") &&\r\n      this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode;\r\n\r\n      const reportId =\r\n      this.state.controlMap.has(\"WorklistReport\") &&\r\n      this.state.controlMap.get(\"WorklistReport\").ncontrolcode;\r\n\r\n    // const addSampleId =\r\n    //   this.state.controlMap.has(\"AddWorklistSample\") &&\r\n    //   this.state.controlMap.get(\"AddWorklistSample\").ncontrolcode;\r\n    // const deleteSampleId =\r\n    // this.state.controlMap.has(\"DeleteWorklistSample\") &&\r\n    // this.state.controlMap.get(\"DeleteWorklistSample\").ncontrolcode;\r\n\r\n    const { selectedWorklist } = this.props.Login.masterData;\r\n    const filterParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      fetchUrl: \"worklist/getWorklistSample\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n    };\r\n    const breadCrumbData = this.state.filterData || [];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Row noGutters={true}>\r\n            <Col md={4}>\r\n              <ListMaster\r\n                formatMessage={this.props.intl.formatMessage}\r\n                screenName={\"worklist\"}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={\r\n                  this.props.Login.masterData.searchedData ||\r\n                  this.props.Login.masterData.Worklist\r\n                }\r\n                getMasterDetail={(worklist) =>\r\n                  this.props.getWorklistDetail(\r\n                    worklist,\r\n                    this.props.Login.userInfo,\r\n                    this.props.Login.masterData\r\n                  )\r\n                }\r\n                selectedMaster={this.props.Login.masterData.selectedWorklist}\r\n                primaryKeyField=\"nworklistcode\"\r\n                mainField=\"sworklistno\"\r\n                firstField=\"stestname\"\r\n                secondField=\"ssectionname\"\r\n                isIDSField=\"Yes\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                addId={addId}\r\n                //hidePaging={true}\r\n                reloadData={this.reloadData}\r\n                openModal={() =>\r\n                  this.props.getSectionAndTest(\r\n                    \"IDS_WORKLIST\",\r\n                    \"create\",\r\n                    \"nworklistcode\",\r\n                    this.props.Login.masterData,\r\n                    this.props.Login.userInfo,\r\n                    addId\r\n                  )\r\n                }\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                filterComponent={[\r\n                  {\r\n                    IDS_WORKLISTFILTER: (\r\n                      <WorklistPreparationFilter\r\n                        SampleTypeValue={this.props.Login.masterData.defaultSampleTypeValue || {}}\r\n                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                        RegSubType={this.state.RegistrationSubTypeList || []}\r\n                        RegType={this.state.RegistrationTypeList || []}\r\n                        userInfo={this.props.Login.userInfo || {}}\r\n                        ApprovalVersion={this.state.ConfigVersionList || []}\r\n                        ApprovalVersionValue={this.props.Login.masterData.defaultApprovalVersionValue || []}\r\n\r\n                        //SampleType={this.state.stateSampleType || []}\r\n                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                        FilterStatus={this.state.FilterStatusList || []}\r\n                        RegistrationType={this.state.stateRegistrationType || []}\r\n                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                        fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                        toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                        handleDateChange={this.handleDateChange}\r\n                        onFilterComboChange={this.onFilterComboChange}\r\n                        SampleType={this.state.SampletypeList || []}\r\n\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </Col>\r\n\r\n\r\n\r\n\r\n            <Col md={8}>\r\n              <Row>\r\n                <Col md={12}>\r\n                  <ContentPanel className=\"panel-main-content\">\r\n                    <Card className=\"border-0\">\r\n                      {this.props.Login.masterData.Worklist && this.props.Login.masterData.Worklist.length > 0 && this.props.Login.masterData.selectedWorklist ? (\r\n                        <>\r\n                          <Card.Header>\r\n                            <Card.Title className=\"product-title-main\">\r\n                              {\r\n                                this.props.Login.masterData.selectedWorklist\r\n                                  .sworklistno\r\n                              }\r\n                            </Card.Title>\r\n                            <Card.Subtitle>\r\n                              <div className=\"d-flex product-category\">\r\n                                <h2 className=\"product-title-sub flex-grow-1\">\r\n                                  <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                    {this.props.Login.masterData.selectedWorklist.ntransactionstatus === 83 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                    {this.props.Login.masterData.selectedWorklist.stransdisplaystatus}\r\n                                  </MediaLabel>\r\n                                </h2>\r\n                                <div className=\"d-inline\">\r\n                                   {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                    //    data-for=\"tooltip_list_wrap\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                    onClick={() => this.props.getEditSectionAndTest(\r\n                                      \"IDS_WORKLIST\",\r\n                                      \"update\",\r\n                                      \"nworklistcode\",\r\n                                      this.props.Login.masterData,\r\n                                      this.props.Login.userInfo,\r\n                                      editId\r\n                                    )\r\n\r\n                                      //\"Checklist\",\"nchecklistcode\",this.props.Login.masterData.selectedchecklist.nchecklistcode)\r\n                                    }>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                  </Nav.Link> */}\r\n\r\n\r\n                                  <Nav.Link\r\n                                    name=\"deleteWorklist\"\r\n                                    className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                    data-tip={this.props.intl.formatMessage({\r\n                                      id: \"IDS_DELETE\",\r\n                                    })}\r\n                                    //   data-for=\"tooltip_list_wrap\"\r\n                                    hidden={\r\n                                      this.state.userRoleControlRights.indexOf(\r\n                                        deleteId\r\n                                      ) === -1\r\n                                    }\r\n                                    onClick={() =>\r\n                                      this.ConfirmDelete(\r\n                                        {\r\n                                          operation: \"delete\",\r\n                                          screenName: \"IDS_WORKLIST\",\r\n                                        },\r\n                                        deleteId\r\n                                      )\r\n                                    }\r\n                                  >\r\n                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                  </Nav.Link>\r\n\r\n                                  <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(approvalId) === -1}\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })}\r\n                                    //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n                                    onClick={() =>this.onApproveClick()}\r\n                                  >\r\n                                    {/* <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })} /> */}\r\n                                    <Closure className=\"custom_icons\" width=\"17\" height=\"20\" />\r\n                                  </Nav.Link>      \r\n\r\n\r\n                                  <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(reportId) === -1}\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORT\" })}\r\n                                    onClick={() => this.specificationReport(reportId)}\r\n                                  >\r\n                                    {/* <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_PREPARED\" })} /> */}\r\n                                    <ReportIcon className=\"custom_icons\" width=\"17\" height=\"20\" />\r\n                                  </Nav.Link>                            \r\n\r\n                                </div>\r\n                              </div>\r\n                            </Card.Subtitle>\r\n                          </Card.Header>\r\n\r\n\r\n                          <Card.Body>\r\n\r\n                            {selectedWorklist && (\r\n                              <CustomTab\r\n                                activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_WORKLISTSAMPLE\"}\r\n                                tabDetail={this.tabDetail()}\r\n                                onTabChange={this.onTabChange}\r\n                              />\r\n                            )}\r\n                          </Card.Body>\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )\r\n                      }\r\n                    </Card>\r\n                  </ContentPanel>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n\r\n\r\n          </Row>\r\n        </div>\r\n        {this.props.Login.openModal && (\r\n          <SlideOutModal\r\n            show={this.props.Login.openModal}\r\n            closeModal={this.closeModal}\r\n            operation={this.props.Login.operation}\r\n            inputParam={this.props.Login.inputParam}\r\n            screenName={this.props.Login.screenName}\r\n            onSaveClick={this.onSaveClick}\r\n            esign={this.props.Login.loadEsign}\r\n            validateEsign={this.validateEsign}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            mandatoryFields={mandatoryFields}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            hideSave={this.props.Login.screenName === \"IDS_VIEWDETAILS\" ? true : false}\r\n\r\n\r\n            addComponent={\r\n              this.props.Login.loadEsign ? (\r\n                <Esign\r\n                  operation={this.props.Login.operation}\r\n                  onInputOnChange={this.onInputOnChange}\r\n                  inputParam={this.props.Login.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n              )\r\n                : this.props.Login.screenName === \"IDS_WORKLIST\" ? (\r\n                  <AddWorklistSection\r\n                    //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                    selectedRecord={this.props.Login.selectedRecord || {}}\r\n                    onInputOnChange={this.onInputOnChange}\r\n                    onComboChange={this.onComboChange}\r\n                    SectionValue={this.props.Login.Section}\r\n                    TestValue={this.props.Login.Test}\r\n                    handleDateChange={this.handleDateChange}\r\n                  />\r\n                )\r\n\r\n\r\n                  : this.props.Login.screenName === \"IDS_WORKLISTSAMPLE\" ? (\r\n                    <AddWorklistSample\r\n                      selectionChange={this.selectionChange}\r\n                      headerSelectionChange={this.headerSelectionChange}\r\n                      addComponentDataList={this.props.Login.addComponentDataList}\r\n                      addSelectAll={this.state.addSelectAll}\r\n                      //onNumericInputOnChange={this.onNumericInputOnChange}\r\n                      selectedRecord={this.props.Login.selectedRecord || {}}\r\n                      onInputOnChange={this.onInputOnChange}\r\n                      onComboChange={this.onComboChange}\r\n                      TestValue={this.props.Login.Test}\r\n                      handleDateChange={this.handleDateChange}\r\n                    />\r\n                  )\r\n\r\n\r\n                    : this.props.Login.screenName === \"IDS_VIEWDETAILS\" ? (\r\n                      <>\r\n\r\n                        <Card className='one' >\r\n                          <Card.Body>\r\n                            <SpecificationInfo\r\n                              controlMap={this.state.controlMap}\r\n                              auditInfoFields={auditInfoFields}\r\n                              userRoleControlRights={this.state.userRoleControlRights}\r\n                              selectedSpecification={this.props.Login.masterData.viewdetails}\r\n                              userInfo={this.props.Login.userInfo}\r\n                              selectedNode={this.props.Login.masterData.selectedNode}\r\n                              selectedRecord={this.state.filterData}\r\n                              approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                              screenName=\"IDS_SPECIFICATIONINFO\"\r\n\r\n                            />\r\n                          </Card.Body>\r\n                        </Card>\r\n                        <br></br>\r\n\r\n                        <DataGrid\r\n                          primaryKeyField={\"ntransactiontestcode\"}\r\n                          //data={this.props.Login.addComponentDataList || []}\r\n                          detailedFieldList={this.feildsForGrid}\r\n                          extractedColumnList={this.feildsForGrid}\r\n                          dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                            && process(this.props.Login.masterData.AuditModifiedComments, { skip: 0, take: 10 })}\r\n                          dataState={{ skip: 0, take: 10 }}\r\n                          selectionChange={this.selectionChange}\r\n                          headerSelectionChange={this.headerSelectionChange}\r\n\r\n\r\n                        />\r\n                      </>\r\n                    )\r\n\r\n                      : (\r\n                        \"\"\r\n                      )\r\n            }\r\n\r\n\r\n          />\r\n        )}\r\n\r\n\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    if (screenName == \"IDS_WORKLISTHISTORY\") {\r\n      let inputData = {\r\n        masterData: this.props.Login.masterData,\r\n        userInfo: this.props.Login.userInfo,\r\n        nworklistcode: this.props.Login.masterData.selectedWorklist.nworklistcode\r\n      }\r\n      this.props.getWorklisthistoryAction(inputData, true);\r\n    } else {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { screenName, activeKey: \"IDS_WORKLISTSAMPLE\" }\r\n      }\r\n\r\n      this.props.updateStore(updateInfo);\r\n\r\n    }\r\n  };\r\n\r\n \r\n  // dataStateChange = (event) => {\r\n  //   this.setState({\r\n  //     dataResult: process(\r\n  //       this.props.Login.masterData[\"selectedSection\"],\r\n  //       event.dataState\r\n  //     ),\r\n  //     sectionDataState: event.dataState,\r\n  //   });\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.defaultRegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.defaultRegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.defaultFilterStatusValue\r\n     let defaultApprovalVersionValue=this.props.Login.masterData.defaultApprovalVersion\r\n     let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue,defaultApprovalVersionValue }\r\n    let inputData = {\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegSubTypeValue && this.props.Login.masterData.defaultRegSubTypeValue.nregsubtypecode) || -1,\r\n      ntransactionstatus: (this.props.Login.masterData.defaultFilterStatusValue && this.props.Login.masterData.defaultFilterStatusValue.ntransactionstatus) || -1,\r\n      userinfo: this.props.Login.userInfo,\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1 && inputData.ntransactionstatus !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n  };\r\n\r\n\r\n\r\n  ConfirmDelete = (operation, deleteId) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteWorklist(\r\n          operation,\r\n          deleteId,\r\n          operation.screenName ? operation.screenName : \"IDS_WORKLIST\"\r\n        )\r\n    );\r\n  };\r\n\r\n\r\n\r\n  DeleteWorklist = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n\r\n    inputData[\"worklist\"] = this.props.Login.masterData.selectedWorklist;\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n    inputData['fromdate'] = obj.fromDate;\r\n    inputData['todate'] = obj.toDate;\r\n    inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n\r\n\r\n    const postParam = {\r\n      inputListName: \"Worklist\",\r\n      selectedObject: \"selectedWorklist\",\r\n      primaryKeyField: \"nworklistcode\",\r\n      primaryKeyValue:\r\n        this.props.Login.masterData.selectedWorklist.nworklistcode,\r\n      //fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    };\r\n\r\n    const inputParam = {\r\n      methodUrl: \"Worklist\",\r\n      postParam,\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      inputData: inputData,\r\n      operation: operation.operation,\r\n    };\r\n    const masterData = this.props.Login.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openModal: true,\r\n          screenName: \"Worklist\",\r\n          operation: operation.operation,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n  onApproveClick = () => {\r\n\r\n\r\n     //onClick={() => this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, approvalId)}\r\n    //if (this.props.Login.masterData.SelectedSupplier.ntransactionstatus === transactionStatus.DRAFT) {\r\n     const ncontrolCode = this.state.controlMap.has(\"GenerateWorklist\") && this.state.controlMap.get(\"GenerateWorklist\").ncontrolcode\r\n     let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    const masterData = this.props.Login.masterData;\r\n    // //add               \r\n     let postParam = undefined;\r\n     inputData[\"worklist\"] =  masterData.selectedWorklist ;\r\n     inputData[\"ncontrolCode\"] =  ncontrolCode;\r\n     inputData[\"ndesigntemplatemappingcode\"] =masterData.ndesigntemplatemappingcode \r\n     // inputData[\"supplier\"] = this.props.Login.masterData.SelectedSupplier;\r\n     postParam = { inputListName: \"Worklist\", selectedObject: \"selectedWorklist\", primaryKeyField: \"nworklistcode\" };\r\n    const inputParam = {\r\n        classUrl: 'worklist',\r\n        methodUrl: \"Worklist\",\r\n        inputData: inputData,\r\n        operation: \"approve\", postParam\r\n    }\r\n     let saveType;\r\n\r\n    \r\n\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n    if (esignNeeded) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        //this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n       this.props.onWorklistApproveClick(this.props.Login.masterData, this.props.Login.userInfo, this.confirmMessage, ncontrolCode)\r\n    }\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    if (comboData !== null) {\r\n      switch (caseNo) {\r\n        case 1:\r\n          if (selectedRecord[fieldName] && selectedRecord[fieldName].value !== comboData.value) {\r\n            delete selectedRecord[\"ntestcode\"]\r\n          }\r\n          selectedRecord[fieldName] = comboData;\r\n          //this.setState({ selectedRecord });\r\n          this.props.getSectionbaseTest(selectedRecord, this.props.Login.userInfo, this.props.Login.masterData,this.props.Login.ncontrolCode)\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      if (selectedRecord[\"nsectioncode\"]) {\r\n        delete selectedRecord[\"nsectioncode\"];\r\n        delete selectedRecord[\"nusercode\"];\r\n\r\n      }\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n  };\r\n\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n      if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\r\n        loadEsign = false;\r\n        openModal = false;\r\n        selectedRecord = {};\r\n      } else {\r\n        loadEsign = false;\r\n        selectedRecord[\"agree\"] = transactionStatus.NO;\r\n        selectedRecord['esignpassword'] = \"\"\r\n        selectedRecord['esigncomments'] = \"\"\r\n        selectedRecord['esignreason'] = \"\"\r\n        modalShow = true;\r\n        //openModal = false;\r\n\r\n      }\r\n    } else {\r\n      openModal = false;\r\n      modalShow = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { openModal, modalShow, loadEsign, selectedRecord, selectedId: null },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n\r\n  viewSample = (viewdetails) => {\r\n    //let openModal = this.props.Login.openModal;\r\n    //let openModal = true;\r\n    //let screenName = 'IDS_VIEWDETAILS'\r\n\r\n    this.props.ViewSampleDetails(this.props.Login.masterData, \"IDS_VIEWDETAILS\", this.props.Login.userInfo, viewdetails);\r\n  };\r\n\r\n  closeModalShow = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n      loadEsign = false;\r\n    } else {\r\n      modalShow = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { modalShow, selectedRecord, selectedId: null, loadEsign },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord, addedComponentList,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,\r\n      nfilterInstrumentCategory,\r\n      filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n      RegistrationTypeList, DynamicGridItem, DynamicGridMoreItem,ConfigVersionList,subsampleGridItem,sampleGridItem,testGridItem=[],samplegridmoreitem\r\n    ,addSelectAll,deleteSelectAll} = this.state;\r\n    if (\r\n      this.props.Login.selectedRecord !== previousProps.Login.selectedRecord\r\n    ) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n    }\r\n    if (\r\n      this.props.Login.userInfo.nformcode !==\r\n      previousProps.Login.userInfo.nformcode\r\n    ) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[\r\n          this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      updateState = true;\r\n    }\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n\r\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n\r\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", undefined, undefined, false);\r\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n\r\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n      nfilterInstrumentCategory = this.state.nfilterInstrumentCategory || {};\r\n      addSelectAll=false;\r\n      deleteSelectAll=true;\r\n      if (\r\n        this.props.Login.masterData.SelectedInsCat &&\r\n        this.props.Login.masterData.SelectedInsCat !==\r\n        previousProps.Login.masterData.SelectedInsCat\r\n      ) {\r\n        nfilterInstrumentCategory = {\r\n          label: this.props.Login.masterData.SelectedInsCat.stestsynonym,\r\n          value: this.props.Login.masterData.SelectedInsCat.ntestcode,\r\n          item: this.props.Login.masterData.SelectedInsCat,\r\n        };\r\n      }\r\n      filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n    }\r\n\r\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n\r\n      testGridItem[0]= dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n     sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n      subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n      //testGridItem= dynamicColumn.conditionfields ? dynamicColumn.conditionfields : [];\r\n            DynamicGridItem=[...testGridItem,...sampleGridItem,...subsampleGridItem]\r\n            samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n            DynamicGridMoreItem=[...samplegridmoreitem]\r\n      //DynamicGridItem.push(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [])\r\n    }\r\n\r\n\r\n    if (\r\n      this.props.Login.masterData.filterInstrumentCategory !==\r\n      previousProps.Login.masterData.filterInstrumentCategory\r\n    ) {\r\n      const insCategoryMap = constructOptionList(\r\n        this.props.Login.masterData.filterInstrumentCategory || [],\r\n        \"ntestcode\",\r\n        \"stestsynonym\",\r\n        \"ntestcategorycode\",\r\n        \"ascending\",\r\n        false\r\n      );\r\n      filterInstrumentCategory = insCategoryMap.get(\"OptionList\");\r\n      if (insCategoryMap.get(\"DefaultValue\")) {\r\n        nfilterInstrumentCategory = insCategoryMap.get(\"DefaultValue\");\r\n      } else if (\r\n        filterInstrumentCategory &&\r\n        filterInstrumentCategory.length > 0\r\n      ) {\r\n        nfilterInstrumentCategory = filterInstrumentCategory[0];\r\n      }\r\n      updateState = true;\r\n    }\r\n\r\n\r\n    // let updateState = false;\r\n    let updateStateObject = {};\r\n    if (this.props.Login.addedComponentList !== previousProps.Login.addedComponentList) {\r\n\r\n      addSelectAll=false;\r\n      deleteSelectAll=true;\r\n\r\n      this.setState({\r\n        addedComponentList: this.props.Login.addedComponentList,\r\n        addSelectAll,deleteSelectAll\r\n      });\r\n    }\r\n\r\n    if (this.props.addedComponentList !== previousProps.addedComponentList) {\r\n      // this.setState({ addedComponentList : this.props.addedComponentList});\r\n      updateState = true;\r\n      updateStateObject = { ...updateStateObject, addedComponentList: this.props.addedComponentList };\r\n    }\r\n\r\n\r\n    if (updateState) {\r\n      this.setState({\r\n        selectedRecord,\r\n        userRoleControlRights,\r\n        controlMap,\r\n        filterData,\r\n        nfilterInstrumentCategory,\r\n        filterInstrumentCategory, RegistrationSubTypeList, FilterStatusList, SampletypeList,\r\n        RegistrationTypeList, DynamicGridItem, ConfigVersionList,DynamicGridMoreItem,addSelectAll,deleteSelectAll\r\n      });\r\n    }\r\n  }\r\n\r\n  generateBreadCrumData() {\r\n    //obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    const breadCrumbData = [];\r\n    if (this.props.Login.masterData && this.props.Login.masterData.Worklist) {\r\n      const obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n      breadCrumbData.push({\r\n\r\n        \"label\": \"IDS_FROM\",\r\n        \"value\": obj.breadCrumbFrom\r\n      }, {\r\n        \"label\": \"IDS_TO\",\r\n        \"value\": obj.breadCrumbto\r\n      },\r\n        // {\r\n        //   \"label\": \"IDS_SAMPLETYPE\",\r\n        //   \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" :\r\n        //     this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.defaultSampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n        // },\r\n         {\r\n        \"label\": \"IDS_REGTYPE\",\r\n        \"value\": this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" :\r\n          this.props.Login.masterData.defaultRegTypeValue ? this.props.Login.masterData.defaultRegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n      }, {\r\n        \"label\": \"IDS_REGSUBTYPE\",\r\n        \"value\": this.props.Login.masterData.defaultRegSubTypeValue ? this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename || \"NA\" :\r\n          this.props.Login.masterData.defaultRegSubTypeValue ?\r\n            this.props.Login.masterData.defaultRegSubTypeValue.sregsubtypename : \"NA\"\r\n      },\r\n\r\n        // {\r\n        //   \"label\": \"IDS_CONFIGVERSION\",\r\n        //   \"value\": this.props.Login.masterData.defaultApprovalVersion ?\r\n        //     this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" :\r\n        //     this.props.Login.masterData.defaultApprovalVersion ? this.props.Login.masterData.defaultApprovalVersion.sversionname || \"NA\" : \"NA\"\r\n        // },\r\n\r\n\r\n        {\r\n          \"label\": \"IDS_WORKLISTSTATUS\",\r\n          \"value\": this.props.Login.masterData.defaultFilterStatusValue ?\r\n            this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" :\r\n            this.props.Login.masterData.defaultFilterStatusValue ?\r\n              this.props.Login.masterData.defaultFilterStatusValue.stransdisplaystatus || \"NA\" : \"NA\"\r\n        }\r\n        //];\r\n      );\r\n    }\r\n    return breadCrumbData;\r\n  }\r\n\r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onFilterSubmit = () => {\r\n    let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n\r\n    let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n    let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n\r\n    let defaultSampleTypeValue = this.props.Login.masterData.defaultSampleTypeValue\r\n    let defaultRegTypeValue = this.props.Login.masterData.RegTypeValue\r\n    let defaultRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue\r\n    let defaultFilterStatusValue = this.props.Login.masterData.FilterStatusValue\r\n    let defaultApprovalVersion = this.props.Login.masterData.defaultApprovalVersionValue\r\n    let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, defaultSampleTypeValue, defaultRegTypeValue, defaultRegSubTypeValue, defaultFilterStatusValue, defaultApprovalVersion }\r\n    let inputData = {\r\n      //npreregno: \"0\",\r\n      nsampletypecode: (this.props.Login.masterData.defaultSampleTypeValue && this.props.Login.masterData.defaultSampleTypeValue.nsampletypecode) || -1,\r\n      nregtypecode: parseInt(this.props.Login.masterData.defaultRegTypeValue && this.props.Login.masterData.defaultRegTypeValue.nregtypecode) || -1,\r\n      nregsubtypecode: parseInt(this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n      ntransactionstatus: (this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus) || -1,\r\n      napprovalconfigversioncode: (this.props.Login.masterData.defaultApprovalVersionValue && this.props.Login.masterData.defaultApprovalVersionValue.napprovalconfigversioncode) || -1,\r\n\r\n      userinfo: this.props.Login.userInfo,\r\n      // activeTestTab: this.props.Login.activeTestTab,\r\n\r\n    }\r\n    if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalconfigversioncode !== -1\r\n      && inputData.ntransactionstatus !== \"-1\") {\r\n\r\n      inputData['fromdate'] = obj.fromDate;\r\n      inputData['todate'] = obj.toDate;\r\n      inputData['ndesigntemplatemappingcode'] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n      let inputParam = {\r\n        masterData,\r\n        inputData,\r\n        searchTestRef: this.searchTestRef,\r\n        skip: this.state.skip,\r\n        take: this.state.take,\r\n        testskip: this.state.testskip,\r\n        testtake: this.state.testtake,\r\n\r\n\r\n      }\r\n      this.props.getWorklistDetailFilter(inputParam)\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  getWorklistDetail,\r\n  filterColumnData,\r\n  getSectionAndTest,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  onWorklistApproveClick,\r\n  OpenDate,\r\n  CloseDate, viewAttachment, getInstrumentCombo, getWorklistSample, getRegTypeTestWise, getRegTypeWorklist,\r\n  getSectionbaseTest, getWorklistDetailFilter, getEditSectionAndTest, createWorklistCreation, getConfigVersionTestWise,\r\n  ViewSampleDetails, getWorklisthistoryAction,reportWorklist,getRegSubTypeWise\r\n})(injectIntl(WorkList));\r\n"]},"metadata":{},"sourceType":"module"}