{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\EditTestGroupParameter.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { parameterType } from '../../components/Enumeration';\n\nconst EditTestGroupParameter = props => {\n  const {\n    needRoundingDigit,\n    needUnit,\n    unit\n  } = props.testGroupInputData;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sparametersynonym\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PARAMETERSYNONYM\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PARAMETERSYNONYM\"\n    }),\n    value: props.selectedRecord && props.selectedRecord[\"sparametersynonym\"] ? props.selectedRecord[\"sparametersynonym\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PARAMETERTYPE\"\n    }),\n    isSearchable: false,\n    name: \"nparametertypecode\",\n    isDisabled: false,\n    placeholder: \"Please Select...\",\n    isMandatory: true,\n    showOption: true,\n    options: props.testGroupInputData.parameterType || [],\n    optionId: \"nparametertypecode\",\n    optionValue: \"sdisplaystatus\",\n    value: props.selectedRecord ? props.selectedRecord[\"nparametertypecode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"nparametertypecode\", 2),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"nroundingdigits\",\n    type: \"text\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ROUNDINGDIGITS\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ROUNDINGDIGITS\"\n    }),\n    isDisabled: needRoundingDigit,\n    isMandatory: !needRoundingDigit,\n    required: !needRoundingDigit,\n    className: \"form-control\",\n    value: props.selectedRecord[\"nroundingdigits\"] && typeof props.selectedRecord[\"nroundingdigits\"] === \"number\" ? props.selectedRecord[\"nroundingdigits\"].toString() : props.selectedRecord[\"nroundingdigits\"],\n    onChange: value => props.onNumericInputChange(value, \"nroundingdigits\"),\n    maxLength: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_UNIT\"\n    }),\n    isSearchable: true,\n    name: \"nunitcode\",\n    isDisabled: needUnit,\n    placeholder: \"Please Select...\",\n    isMandatory: !needUnit,\n    options: unit || [],\n    optionId: \"nunitcode\",\n    optionValue: \"sunitname\",\n    value: props.selectedRecord ? props.selectedRecord[\"nunitcode\"] || {} : \"\",\n    onChange: value => props.onComboChange(value, \"nunitcode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CHECKLIST\"\n    }),\n    isSearchable: false,\n    name: \"nchecklistversioncode\",\n    isDisabled: false,\n    placeholder: \"Please Select...\",\n    isMandatory: false,\n    showOption: false,\n    options: props.testGroupInputData.checkListVersion || [],\n    optionId: \"nchecklistversioncode\",\n    optionValue: \"schecklistname\",\n    value: props.selectedRecord ? props.selectedRecord[\"nchecklistversioncode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"nchecklistversioncode\", 3),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"schecklistversionname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_CHECKLISTVERSION\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CHECKLISTVERSION\"\n    }),\n    value: props.selectedRecord && props.selectedRecord[\"schecklistversionname\"] ? props.selectedRecord[\"schecklistversionname\"] : \"\",\n    required: false,\n    maxLength: 100,\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"sspecdesc\" //label={props.intl.formatMessage({ id: \"IDS_SPECDESCRIPTION\" })}//\n    ,\n    label: props.intl.formatMessage({\n      id: \"IDS_PARAMETERDESCRIPTION\"\n    }),\n    onChange: event => props.onInputOnChange(event, 1) //placeholder={props.intl.formatMessage({ id: \"IDS_SPECDESCRIPTION\" })}\n    ,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PARAMETERDESCRIPTION\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sspecdesc\"] : \"\",\n    rows: \"2\",\n    required: false,\n    maxLength: 255,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"nsorter\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SORTER\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"nsorter\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SORTER\"\n    }),\n    strict: true,\n    maxLength: 3,\n    onChange: value => props.onNumericInputChange(value, \"nsorter\"),\n    noStyle: true,\n    precision: 0,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nreportmandatory\",\n    label: props.intl.formatMessage({\n      id: \"IDS_REPORTMANDATORY\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [3, 4]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPORTMANDATORY\"\n    }),\n    defaultValue: props.selectedRecord[\"nreportmandatory\"] === 3 ? true : false,\n    checked: props.selectedRecord[\"nreportmandatory\"] === 3 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nresultmandatory\",\n    label: props.intl.formatMessage({\n      id: \"IDS_RESULTMANDATORY\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [3, 4]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_RESULTMANDATORY\"\n    }),\n    defaultValue: props.selectedRecord[\"nresultmandatory\"] === 3 ? true : false,\n    checked: props.selectedRecord[\"nresultmandatory\"] === 3 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  })), props.selectedRecord[\"parameterTypeCode\"] && props.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC && /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_FORMULA\"\n    }),\n    isSearchable: false,\n    name: \"ntestformulacode\",\n    isDisabled: false,\n    placeholder: \"Please Select...\",\n    isMandatory: false,\n    showOption: true,\n    options: props.testGroupInputData.testFormula || [],\n    optionId: \"ntestformulacode\",\n    optionValue: \"sformulaname\",\n    value: props.selectedRecord ? props.selectedRecord[\"ntestformulacode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"ntestformulacode\", 1),\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default injectIntl(EditTestGroupParameter);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/EditTestGroupParameter.jsx"],"names":["React","Row","Col","FormInput","FormSelectSearch","injectIntl","FormNumericInput","CustomSwitch","FormTextarea","parameterType","EditTestGroupParameter","props","needRoundingDigit","needUnit","unit","testGroupInputData","intl","formatMessage","id","event","onInputOnChange","selectedRecord","value","onComboChange","toString","onNumericInputChange","checkListVersion","NUMERIC","testFormula"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport { parameterType } from '../../components/Enumeration';\r\n\r\nconst EditTestGroupParameter = (props) => {\r\n    const { needRoundingDigit, needUnit, unit } = props.testGroupInputData;\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    name={\"sparametersynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PARAMETERSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PARAMETERSYNONYM\" })}\r\n                    value={props.selectedRecord && props.selectedRecord[\"sparametersynonym\"] ? props.selectedRecord[\"sparametersynonym\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                >\r\n                </FormInput>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_PARAMETERTYPE\" })}\r\n                    isSearchable={false}\r\n                    name={\"nparametertypecode\"}\r\n                    isDisabled={false}\r\n                    placeholder=\"Please Select...\"\r\n                    isMandatory={true}\r\n                    showOption={true}\r\n                    options={props.testGroupInputData.parameterType || []}\r\n                    optionId='nparametertypecode'\r\n                    optionValue='sdisplaystatus'\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nparametertypecode\"] : \"\"}\r\n                    onChange={value => props.onComboChange(value, \"nparametertypecode\", 2)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n            </Col>\r\n            <Col md={6}>\r\n                {/* <FormNumericInput\r\n                    name={\"nroundingdigits\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_ROUNDINGDIGITS\" })}\r\n                    type=\"number\"\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nroundingdigits\")}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ROUNDINGDIGITS\" })}\r\n                    value={props.selectedRecord[\"nroundingdigits\"]}\r\n                    min={0}\r\n                    max={9}\r\n                    maxLength={1}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    strict={true}\r\n                    isDisabled={needRoundingDigit}\r\n                    isMandatory={!needRoundingDigit}\r\n                    required={!needRoundingDigit}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                >\r\n                </FormNumericInput> */}\r\n                 <FormInput\r\n                    name={\"nroundingdigits\"}\r\n                    type=\"text\"\r\n                    label={props.intl.formatMessage({ id: \"IDS_ROUNDINGDIGITS\" })}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ROUNDINGDIGITS\" })}\r\n                    isDisabled={needRoundingDigit}\r\n                    isMandatory={!needRoundingDigit}\r\n                    required={!needRoundingDigit}\r\n                    className=\"form-control\"\r\n                    value={props.selectedRecord[\"nroundingdigits\"] && typeof props.selectedRecord[\"nroundingdigits\"] === \"number\" ?\r\n                        props.selectedRecord[\"nroundingdigits\"].toString() : props.selectedRecord[\"nroundingdigits\"]}\r\n                    onChange={value => props.onNumericInputChange(value, \"nroundingdigits\")}\r\n                    maxLength={1}\r\n                />\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                    isSearchable={true}\r\n                    name={\"nunitcode\"}\r\n                    isDisabled={needUnit}\r\n                    placeholder=\"Please Select...\"\r\n                    isMandatory={!needUnit}\r\n                    options={unit || []}\r\n                    optionId='nunitcode'\r\n                    optionValue='sunitname'\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nunitcode\"] || {} : \"\"}\r\n                    onChange={value => props.onComboChange(value, \"nunitcode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n            </Col>\r\n            <Col md={6}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_CHECKLIST\" })}\r\n                    isSearchable={false}\r\n                    name={\"nchecklistversioncode\"}\r\n                    isDisabled={false}\r\n                    placeholder=\"Please Select...\"\r\n                    isMandatory={false}\r\n                    showOption={false}\r\n                    options={props.testGroupInputData.checkListVersion || []}\r\n                    optionId='nchecklistversioncode'\r\n                    optionValue='schecklistname'\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nchecklistversioncode\"] : \"\"}\r\n                    onChange={value => props.onComboChange(value, \"nchecklistversioncode\", 3)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormInput\r\n                    name={\"schecklistversionname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_CHECKLISTVERSION\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_CHECKLISTVERSION\" })}\r\n                    value={props.selectedRecord && props.selectedRecord[\"schecklistversionname\"] ? props.selectedRecord[\"schecklistversionname\"] : \"\"}\r\n                    required={false}\r\n                    maxLength={100}\r\n                    readOnly={true}\r\n                ></FormInput>\r\n            </Col>\r\n            <Col md={12}>\r\n                <FormTextarea\r\n                    name={\"sspecdesc\"}\r\n                    //label={props.intl.formatMessage({ id: \"IDS_SPECDESCRIPTION\" })}//\r\n                    label={props.intl.formatMessage({ id: \"IDS_PARAMETERDESCRIPTION\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    //placeholder={props.intl.formatMessage({ id: \"IDS_SPECDESCRIPTION\" })}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PARAMETERDESCRIPTION\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"sspecdesc\"] : \"\"}\r\n                    rows=\"2\"\r\n                    required={false}\r\n                    maxLength={255}\r\n                >\r\n                </FormTextarea>\r\n                <FormNumericInput\r\n                    name={\"nsorter\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nsorter\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    strict={true}\r\n                    maxLength={3}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nsorter\")}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                ></FormNumericInput>\r\n            </Col>\r\n            <Col md={6}>\r\n                <CustomSwitch\r\n                    name={\"nreportmandatory\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_REPORTMANDATORY\" })}\r\n                    type=\"switch\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1, [3, 4])}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_REPORTMANDATORY\" })}\r\n                    defaultValue={props.selectedRecord[\"nreportmandatory\"] === 3 ? true : false}\r\n                    checked={props.selectedRecord[\"nreportmandatory\"] === 3 ? true : false}\r\n                >\r\n                </CustomSwitch>\r\n                <CustomSwitch\r\n                    name={\"nresultmandatory\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_RESULTMANDATORY\" })}\r\n                    type=\"switch\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1, [3, 4])}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_RESULTMANDATORY\" })}\r\n                    defaultValue={props.selectedRecord[\"nresultmandatory\"] === 3 ? true : false}\r\n                    checked={props.selectedRecord[\"nresultmandatory\"] === 3 ? true : false}\r\n                >\r\n                </CustomSwitch>\r\n            </Col>\r\n            {props.selectedRecord[\"parameterTypeCode\"] && props.selectedRecord[\"parameterTypeCode\"] === parameterType.NUMERIC &&\r\n                <Col md={12}>\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_FORMULA\" })}\r\n                        isSearchable={false}\r\n                        name={\"ntestformulacode\"}\r\n                        isDisabled={false}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={false}\r\n                        showOption={true}\r\n                        options={props.testGroupInputData.testFormula || []}\r\n                        optionId='ntestformulacode'\r\n                        optionValue='sformulaname'\r\n                        value={props.selectedRecord ? props.selectedRecord[\"ntestformulacode\"] : \"\"}\r\n                        onChange={value => props.onComboChange(value, \"ntestformulacode\", 1)}\r\n                        alphabeticalSort={true}\r\n                        isClearable={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                </Col>\r\n            }\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(EditTestGroupParameter);"]},"metadata":{},"sourceType":"module"}