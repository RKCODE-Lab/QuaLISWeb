{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\SqlBuilder.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faTasks, faDatabase } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddQuery from './AddQuery';\nimport AddParameter from './AddParameter';\nimport QueryTypeFilter from './QueryTypeFilter';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport rsapi from '../../rsapi';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport BuildQuery from './BuildQuery'; // import {validationData} from './QueryBuilderData';\n\nconst jsonSql = require('json-sql')({\n  separatedValues: true\n});\n\nclass SQLBuilder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.userQueryDataStateChange = event => {\n      this.setState({\n        dataStateUserQuery: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"delete\", deleteId));\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onViewComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      const inputParam = {\n        sviewname: comboData.value,\n        selectedRecord,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getViewColumns(inputParam);\n    };\n\n    this.onRuleChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n      const sqlQuery = this.props.Login.sqlQuery;\n      const oldselectedRecord = selectedRecord;\n      selectedRecord[fieldName] = comboData;\n      const tableData = comboData.items;\n      const mastertablename = tableData.mastertablename;\n\n      if (comboData.items.needmasterdata && mastertablename) {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          data: {\n            nflag: 2,\n            mastertablename,\n            valuemember: tableData.valuemember,\n            displaymember: tableData.displaymember\n          },\n          selectedRecord,\n          index,\n          optionId: tableData.valuemember\n        };\n        this.props.getMasterData(inputParam);\n      } else if (comboData.items && comboData.items.columntype === ColumnType.COMBO) {\n        if (sqlQuery) {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            stablename: comboData.items.foriegntablename,\n            scolumnname: comboData.value,\n            selectedRecord,\n            index\n          };\n          this.props.getForeignTable(inputParam, 'column');\n        } else {\n          selectedRecord[`${comboData.items.sforeigncolumnname}_${index}`] = \"\";\n          const inputParam = {\n            data: { ...comboData.items,\n              nflag: 1\n            },\n            userinfo: this.props.Login.userInfo,\n            selectedRecord,\n            index,\n            optionId: comboData.items.sforeigncolumnname\n          };\n          this.props.getMasterData(inputParam);\n        }\n      } else if (comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT && oldselectedRecord[fieldName].items.columntype !== ColumnType.TEXTINPUT) {\n        selectedRecord[\"sinputname_\" + index] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[fieldName] = comboData;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.addRule = type => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (type === \"sql\") {\n        let addRuleList = this.props.Login.addRuleList || [];\n\n        if (addRuleList.length > 0) {\n          const arrayLength = addRuleList.length;\n          addRuleList[arrayLength] = arrayLength;\n          selectedRecord[\"button_and_\" + arrayLength] = true;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              addRuleList,\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          addRuleList[0] = 0;\n          this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, {\n            addRuleList,\n            selectedRecord: {}\n          });\n        }\n      } else {\n        if (selectedRecord[\"sviewname\"]) {\n          const viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n          const addRuleList = this.props.Login.addRuleList || [];\n          const arrayLength = addRuleList.length;\n          addRuleList[arrayLength] = arrayLength;\n          viewColumnListByRule[arrayLength] = this.props.Login.viewColumnList;\n\n          if (arrayLength !== 0) {\n            selectedRecord[\"button_and_\" + arrayLength] = true;\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              addRuleList,\n              viewColumnListByRule,\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTVIEW\"\n          }));\n        }\n      }\n    };\n\n    this.getDatabaseTables = () => {\n      const sqlQuery = false;\n      this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {\n        addRuleList: []\n      });\n    };\n\n    this.closePortalModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onExecuteRule = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sgeneratedquery\"]) {\n        const inputParam = {\n          sgeneratedquery: selectedRecord[\"sgeneratedquery\"],\n          selectedRecord,\n          userInfo: this.props.Login.userInfo\n        };\n        this.props.executeQuery(inputParam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_QUERYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.deleteRule = index => {\n      let addRuleList = this.props.Login.addRuleList;\n      const selectedRecord = this.state.selectedRecord;\n      addRuleList[index] = -1;\n      selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\n      selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\n      this.clearSelectedRule(selectedRecord, index);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      this.setState({\n        selectedRecord: {\n          sviewname\n        }\n      });\n    };\n\n    this.onSymbolChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[fieldName] || {};\n      selectedRecord[fieldName] = comboData;\n      const items = selectedRecord[\"columnname_\" + index].items;\n      selectedRecord[\"columnname_\" + index][\"items\"][\"needmasterdata\"] = items.needmasterdata ? comboData.items.needmasterdata : false;\n\n      if (comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\n        selectedRecord[items[\"valuemember\"] + \"_\" + index] && delete selectedRecord[items[\"valuemember\"] + \"_\" + index];\n        selectedRecord[items[\"foreigncolumnname\"] + \"_\" + index] && delete selectedRecord[items[\"foreigncolumnname\"] + \"_\" + index];\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n      } else if (comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n      } else if (comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1 || comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6) {\n        selectedRecord[`${items.sforeigncolumnname}_${index}`] && delete selectedRecord[`${items.sforeigncolumnname}_${index}`];\n        selectedRecord[`${items.valuemember}_${index}`] && delete selectedRecord[`${items.valuemember}_${index}`];\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onInputChange = (event, type) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (type === 2) {\n        const inputValue = event.target.value;\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.generateFilterQuery = selectedRecord => {\n      const addRuleList = this.props.Login.addRuleList;\n      jsonSql.setDialect('mssql');\n      let databaseCondition = [];\n      let displayCondition = [];\n\n      if (addRuleList.length > 0) {\n        let orDisplayConditionArray = [];\n        let orConditionArray = [];\n        addRuleList.forEach(index => {\n          let symbolObject = {};\n\n          if (selectedRecord[\"columnname_\" + index]) {\n            symbolObject = selectedRecord[\"ssymbolname_\" + index].items || {};\n            const current_button_and = selectedRecord[`button_and_${index}`];\n            const current_button_or = selectedRecord[`button_or_${index}`];\n            const next_button_and = selectedRecord[`button_and_${index + 1}`];\n            const next_button_or = selectedRecord[`button_or_${index + 1}`] ? selectedRecord[`button_or_${index + 1}`] : false;\n            let inputname = selectedRecord[\"sinputname_\" + index];\n            const symbolname = symbolObject.symbol;\n            let numericinput = selectedRecord[\"snumericinput_\" + index];\n            const columnLabel = selectedRecord[\"columnname_\" + index].label;\n            const columnValue = selectedRecord[\"columnname_\" + index].value;\n            const snumericinputtwo = selectedRecord[\"snumericinputtwo_\" + index];\n            let columnName = undefined;\n            const needmasterdata = selectedRecord[\"columnname_\" + index].items.needmasterdata ? selectedRecord[\"columnname_\" + index].items.needmasterdata : false;\n\n            if (selectedRecord[\"columnname_\" + index].items.needmasterdata) {\n              columnName = selectedRecord[\"columnname_\" + index].items.valuemember + \"_\" + index;\n            } else if (selectedRecord[\"columnname_\" + index].items.sforeigncolumnname) {\n              columnName = selectedRecord[\"columnname_\" + index].items.sforeigncolumnname + \"_\" + index;\n            }\n\n            const dateinput = selectedRecord[\"dateinput_\" + index];\n            const dateinputtwo = selectedRecord[\"dateinputtwo_\" + index];\n\n            if (current_button_or || next_button_or || current_button_and && next_button_or) {\n              if (symbolObject && inputname) {\n                if (symbolObject.symbolType === 4) {\n                  const index = symbolObject.replacewith.indexOf('_');\n                  inputname = symbolObject.replacewith.substr(0, index) + inputname + symbolObject.replacewith.substr(index + 1);\n                  orConditionArray.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  orDisplayConditionArray.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                } else {\n                  orConditionArray.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  orDisplayConditionArray.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                }\n              } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\n                orConditionArray.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                orDisplayConditionArray.push({\n                  [columnLabel]: {\n                    [symbolname]: numericinput\n                  }\n                });\n              } else if (symbolObject && symbolObject.symbolType === 2 || symbolObject && symbolObject.symbolType === 3) {\n                orConditionArray.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                orDisplayConditionArray.push({\n                  [columnLabel]: {\n                    [symbolname]: ''\n                  }\n                });\n              } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  orConditionArray.push(tempValue);\n                  orDisplayConditionArray.push(tempValue1);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  orConditionArray.push(tempValue);\n                  orDisplayConditionArray.push(tempValue1);\n                }\n              } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[columnName]) {\n                // if(typeof selectedRecord[columnName] === \"object\") {\n                //     orConditionArray.push({[columnValue]: { [symbolname]: [selectedRecord[columnName].value]} });\n                //     orDisplayConditionArray.push({[columnLabel]: { [symbolname]: [selectedRecord[columnName].label]} });\n                // } else {\n                const data = selectedRecord[columnName] && selectedRecord[columnName].map(item => {\n                  return item.value;\n                }) || [];\n                const data1 = selectedRecord[columnName] && selectedRecord[columnName].map(item => {\n                  return item.label;\n                }) || [];\n\n                if (data.length > 0) {\n                  if (needmasterdata) {\n                    orConditionArray.push({\n                      [selectedRecord[\"columnname_\" + index].items.valuemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                  } else {\n                    orConditionArray.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                  }\n                }\n\n                if (data1.length > 0) {\n                  orDisplayConditionArray.push({\n                    [columnLabel]: {\n                      [symbolname]: data1\n                    }\n                  });\n                } // }\n\n              } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[columnName]) {\n                if (needmasterdata) {\n                  orConditionArray.push({\n                    [selectedRecord[\"columnname_\" + index].items.valuemember]: {\n                      [symbolname]: selectedRecord[columnName].value\n                    }\n                  });\n                  orDisplayConditionArray.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[columnName].label\n                    }\n                  });\n                } else {\n                  orConditionArray.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[columnName].value\n                    }\n                  });\n                  orDisplayConditionArray.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[columnName].label\n                    }\n                  });\n                }\n              } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\n                orConditionArray.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                orDisplayConditionArray.push({\n                  [columnLabel]: {\n                    [symbolname]: dateinput\n                  }\n                });\n              } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  orConditionArray.push(tempValue);\n                  orDisplayConditionArray.push(tempValue1);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  orConditionArray.push(tempValue);\n                  orDisplayConditionArray.push(tempValue1);\n                }\n              }\n            } else {\n              if (symbolObject && inputname) {\n                if (symbolObject.symbolType === 4) {\n                  const index = symbolObject.replacewith.indexOf('_');\n                  inputname = symbolObject.replacewith.substr(0, index) + inputname + symbolObject.replacewith.substr(index + 1);\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                }\n              } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: numericinput\n                  }\n                });\n              } else if (symbolObject && symbolObject.symbolType === 2 || symbolObject && symbolObject.symbolType === 3) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: ''\n                  }\n                });\n              } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                }\n              } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[columnName]) {\n                // if(typeof selectedRecord[columnName] === \"object\") {\n                //     databaseCondition.push({[columnValue]: { [symbolname]: [selectedRecord[columnName].value]} });\n                //     displayCondition.push({[columnLabel]: { [symbolname]: [selectedRecord[columnName].label]} });\n                // } else {\n                const data = selectedRecord[columnName] && selectedRecord[columnName].map(item => {\n                  return item.value;\n                }) || [];\n                const data1 = selectedRecord[columnName] && selectedRecord[columnName].map(item => {\n                  return item.label;\n                }) || [];\n\n                if (data.length > 0) {\n                  if (needmasterdata) {\n                    databaseCondition.push({\n                      [selectedRecord[\"columnname_\" + index].items.valuemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                  } else {\n                    databaseCondition.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                  }\n                }\n\n                if (data1.length > 0) {\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: data1\n                    }\n                  });\n                } // }\n\n              } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[columnName]) {\n                if (needmasterdata) {\n                  databaseCondition.push({\n                    [selectedRecord[\"columnname_\" + index].items.valuemember]: {\n                      [symbolname]: selectedRecord[columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[columnName].label\n                    }\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[columnName].label\n                    }\n                  });\n                }\n              } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: dateinput\n                  }\n                });\n              } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                }\n              }\n            }\n\n            if (current_button_or && (next_button_and || typeof next_button_and === 'undefined') || typeof next_button_or === 'undefined') {\n              if (orConditionArray.length > 0) {\n                databaseCondition.push({\n                  $or: orConditionArray\n                });\n                orConditionArray = [];\n              }\n\n              if (orDisplayConditionArray.length > 0) {\n                displayCondition.push({\n                  $or: orDisplayConditionArray\n                });\n                orDisplayConditionArray = [];\n              }\n            }\n\n            if (this.props.Login.sqlQuery) {\n              const databaseSQLQuery = jsonSql.build({\n                type: 'select',\n                table: selectedRecord[\"stablename_0\"].value,\n                condition: databaseCondition\n              });\n              const displaySQLQuery = jsonSql.build({\n                type: 'select',\n                table: selectedRecord[\"stablename_0\"].label,\n                condition: displayCondition\n              });\n              selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n              selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n            } else {\n              const databaseSQLQuery = jsonSql.build({\n                type: 'select',\n                table: selectedRecord[\"sviewname\"].value,\n                condition: databaseCondition\n              });\n              const displaySQLQuery = jsonSql.build({\n                type: 'select',\n                table: selectedRecord[\"sviewname\"].label,\n                condition: displayCondition\n              }); // jsonSql = jsonSql.setSeparatedValues(true);\n\n              selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n              selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n            }\n\n            this.setState({\n              selectedRecord\n            });\n          } else {}\n        });\n      }\n    };\n\n    this.onConditionClick = (fieldName, index) => {\n      let {\n        selectedRecord\n      } = this.state;\n\n      if (fieldName === `button_and_${index}`) {\n        selectedRecord[fieldName] = selectedRecord[fieldName] === true ? false : true;\n        selectedRecord[`button_or_${index}`] = false;\n      } else if (fieldName === `button_or_${index}`) {\n        selectedRecord[fieldName] = selectedRecord[fieldName] === true ? false : true;\n        selectedRecord[`button_and_${index}`] = false;\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onQueryTypeOnclick = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          sqlQuery: !this.state.sqlQuery\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getValidationForEdit = (screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) => {\n      rsapi.post(\"sqlquery/getValidationForEdit\", {\n        [primaryKeyName]: primaryKeyValue,\n        \"userinfo\": userInfo\n      }).then(response => {\n        if (response.data === \"IDS_SUCCESS\") {\n          this.props.getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode);\n        } else if (response.data === \"IDS_QUERYUSEDINDASHBOARD\") {\n          this.confirmAlertForEdit(ncontrolCode);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: response.data\n          }));\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(this.props.intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    };\n\n    this.confirmAlertForEdit = editId => {\n      this.confirmMessage.confirm(this.props.intl.formatMessage({\n        id: \"IDS_CONFIRMATION\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CONFIRMATION\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_QUERYUSEDINDASHBOARD\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), // () => this.performBatchAction(), \n      () => this.props.getSQLQueryComboService(this.state.queryTypeName, \"update\", \"nsqlquerycode\", this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode, this.props.Login.masterData, this.props.Login.userInfo, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      this.props.Login.masterData.SelectedQueryType.nquerytypecode, editId), undefined, () => this.closeAlert());\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlertForEdit: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\"; //    const inputParam = {\n      //        inputData: { \"userinfo\": this.props.Login.userInfo, \n      //                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \n      //                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\n      //                 },        \n      //        userInfo: this.props.Login.userInfo,\n      //        classUrl: \"sqlquery\",\n      //        methodUrl: \"SQLQuery\",\n      //        displayName: \"IDS_SQLBUILDER\",\n      //    };\n      //this.props.callService(inputParam);\n\n      const nquerytypecode = this.state.selectedRecord[\"nquerytypecode\"] ? this.state.selectedRecord[\"nquerytypecode\"].value : this.props.Login.masterData.SelectedQueryType.nquerytypecode;\n      this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"ncharttypecode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n\n        if (fieldName === \"ntabletypecode\" || fieldName === \"nformcode\") {\n          const selectedTableType = this.state.selectedTableType || {};\n          selectedTableType[fieldName] = comboData;\n          this.setState({\n            selectedTableType\n          });\n          const selectedRecord = this.state.selectedRecord || {}; //  this.state.ntableTypeCode=comboData.value;\n\n          if (fieldName === \"ntabletypecode\") {\n            if (comboData.value === tableType.ALL) {\n              selectedRecord[\"nformcode\"] = \"\";\n              this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, 0);\n            } else {\n              const updateInfor = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  tableName: []\n                }\n              };\n              this.props.updateStore(updateInfor);\n              this.setState({\n                moduleFormName: []\n              });\n              selectedRecord[\"nformcode\"] = \"\";\n              this.props.getModuleFormName(comboData.value, this.props.Login.userInfo);\n            }\n          }\n\n          if (fieldName === \"nformcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            }); //this.state.nFormCode=comboData.value;\n            //this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\n\n            this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, selectedRecord[\"nformcode\"].value);\n          }\n        } else {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.setState({\n            selectedcombo\n          });\n        }\n\n        if (fieldName === \"nquerytypecode\") {\n          this.searchRef.current.value = \"\"; // this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\n\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      // const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showExecute = this.props.Login.showExecute;\n      let showParam = this.props.Login.showParam;\n      let showValidate = this.props.Login.showValidate;\n      let showSave = this.props.Login.showSave;\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let slideOperation = this.props.Login.slideOperation;\n      let parentPopUpSize = this.props.Login.parentPopUpSize;\n      let resultStatus = this.props.Login.resultStatus;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n\n          if (this.state.param.size > 0) {\n            showExecute = true;\n            showSave = true;\n          } else {\n            showExecute = false;\n            showSave = false;\n          }\n\n          parentPopUpSize = \"xl\";\n        }\n      } else {\n        if (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") {\n          if (this.props.Login.screenFlag === \"showQuery\") {\n            openModal = true;\n            let queryTypeCode = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\n\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSDASHBOARDQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSALERTQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSBARCODEQUERY\"\n              });\n            } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSGENERALQUERY\"\n              });\n            } else {\n              screenName = this.props.intl.formatMessage({\n                id: \"IDS_LIMSFILTERQUERY\"\n              });\n            }\n\n            showSave = false;\n          } else {\n            selectedRecord = {};\n            openModal = false;\n            showExecute = false;\n          }\n\n          showParam = false;\n          showValidate = true;\n          operation = slideOperation;\n          slideOperation = \"\";\n          resultStatus = \"\";\n        } else {\n          openModal = false;\n          selectedRecord = {};\n          showExecute = false;\n        }\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          showExecute,\n          showParam,\n          operation,\n          screenName,\n          showSave,\n          showValidate,\n          parentPopUpSize,\n          resultStatus,\n          showConfirmAlertForEdit: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.upDateComboboxValue = i => Value => {\n      if (Value != null) {\n        // let parameters = [...this.state.parameters]\n        // parameters[i].textValue = Value\n        // this.setState({\n        //     parameters: parameters\n        // })\n        const paramMap = this.state.param || new Map();\n        paramMap.get(i).textValue = Value;\n        this.setState({\n          param: paramMap\n        });\n      }\n    };\n\n    this.handleDateChange = i => date => {\n      // let parameters = [...this.state.parameters]\n      // parameters[i].Datetime = date\n      // this.setState({\n      //     parameters: parameters\n      // })\n      const paramMap = this.state.param || new Map();\n      paramMap.get(i).Datetime = date;\n      this.setState({\n        param: paramMap\n      });\n    };\n\n    this.handleText = i => event => {\n      //let parameters = [...this.state.parameters];\n      //parameters[i].textValue = e.target.value;\n      //this.setState({parameters: parameters});\n      // console.log(parameters)\n      const paramMap = this.state.param || new Map();\n      paramMap.get(event.target.name).textValue = event.target.value;\n      this.setState({\n        param: paramMap\n      });\n    };\n\n    this.executeQuery = (methodUrl, selectedRecord, operation, ncontrolCode) => {\n      const sqlQuery = selectedRecord.ssqlquery;\n\n      if (sqlQuery.length > 10) {\n        if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0 || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0 || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0 || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTDATAMANIPULATION\"\n          }));\n        } else {\n          if (sqlQuery.indexOf('P$') > 0) {\n            let newQuery = sqlQuery;\n            const paramMap = new Map();\n\n            while (newQuery.indexOf(\"P$\") !== -1) {\n              const paramLabelStartIndex = newQuery.indexOf(\"P$\");\n              const paramLabelEndIndex = newQuery.indexOf(\"$P\");\n              const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\n\n              if (paramLabel.indexOf(\"T$\") !== -1) {\n                let displayName = \"\";\n                let localParam = \"\";\n                let tableName = \"\";\n                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                if (paramLabel.indexOf(\"D$\") !== -1) {\n                  localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\n                  displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                  tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                } else {\n                  localParam = paramLabel.substring(0, paramLabel.indexOf('T$')); // tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                  tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                }\n\n                if (localParam.startsWith('d') || localParam.startsWith('D')) {\n                  paramMap.set(\"P$\" + localParam + \"$P\", {\n                    value: 'DateTimePicker',\n                    lableName: localParam,\n                    //ID: param.length, \n                    Datetime: new Date(),\n                    textValue: '',\n                    TableName: tableName,\n                    DisplayParam: displayName,\n                    actuallableName: localParam.substring(1, localParam.length)\n                  });\n                } else {\n                  paramMap.set(\"P$\" + localParam + \"$P\", {\n                    value: 'TextBox1',\n                    lableName: localParam,\n                    //ID: param.length, \n                    textValue: '',\n                    TableName: tableName,\n                    DisplayParam: displayName,\n                    actuallableName: localParam.substring(1, localParam.length)\n                  });\n                }\n              } else {\n                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\n                  paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                    value: 'DateTimePicker',\n                    lableName: paramLabel,\n                    actuallableName: paramLabel.substring(1, paramLabel.length),\n                    //ID: param.length, \n                    Datetime: new Date()\n                  });\n                } else {\n                  paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                    value: 'TextBox1',\n                    lableName: paramLabel,\n                    //ID: param.length, \n                    textValue: '',\n                    TableName: \"\",\n                    DisplayParam: \"\",\n                    actuallableName: paramLabel.substring(1, paramLabel.length)\n                  });\n                }\n              }\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                screenName: \"Parameter for Results\",\n                openModal: true,\n                showExecute: true,\n                showParam: true,\n                showValidate: false,\n                showSave: false,\n                operation: \"create\",\n                slideOperation: \"\",\n                slideResult: [],\n                slideList: [],\n                screenFlag: \"showParam\",\n                param: paramMap,\n                //param: param, Dparam: Dparam, TBLName: TBLName,\n                parentPopUpSize: \"xl\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            //query without parameters      \n            const inputParam = {\n              query: selectedRecord.ssqlquery.trim(),\n              screenName: \"Results\",\n              openModal: true,\n              showExecute: false,\n              showParam: true,\n              showValidate: false,\n              showSave: false,\n              noSave: true,\n              operation: \"view\",\n              slideOperation: \"\",\n              slideResult: [],\n              slideList: [],\n              //screenFlag: \"showParam\",\n              screenFlag: \"NoParam\",\n              parentPopUpSize: \"xl\",\n              param: new Map()\n            };\n            this.props.executeUserQuery(inputParam);\n          }\n        }\n      }\n    };\n\n    this.deleteRecord = (methodUrl, selectedRecord, operation, ncontrolCode) => {\n      const postParam = {\n        inputListName: \"SQLQuery\",\n        selectedObject: \"SelectedSQLQuery\",\n        primaryKeyField: \"nsqlquerycode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\n        fetchUrl: \"sqlquery/getSQLQuery\",\n        fecthInputObject: {\n          userInfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl,\n        postParam,\n        inputData: {\n          [methodUrl.toLowerCase()]: selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"sqlquery\": this.props.Login.masterData.SelectedSQLQuery\n        },\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"sqlquery\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onExecuteClick = () => {\n      // let paramVal;\n      let tempQuery = \"\";\n      let paramFlag = true;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenName === \"Parameter for Results\" && this.state.param.size > 0) {\n        if (selectedRecord != null && selectedRecord.ssqlquery != null && selectedRecord.ssqlquery.length > 0) {\n          tempQuery = selectedRecord.ssqlquery;\n        } else {\n          tempQuery = this.props.Login.masterData.SelectedSQLQuery.ssqlquery;\n        }\n\n        const paramMap = this.state.param || new Map();\n\n        for (let parameterMap of paramMap.entries()) {\n          const parameter = parameterMap[0];\n          const parameterDetail = parameterMap[1];\n          let paramVal = \"\"; //console.log(\"para detail:\", parameterDetail);\n\n          if (parameterDetail.lableName.toUpperCase().startsWith('D')) {\n            if (parameterDetail.Datetime !== null) {\n              paramVal = parameterDetail.Datetime.getFullYear() + \"-\";\n\n              if (parameterDetail.Datetime.getMonth().toString().length > 1) {\n                paramVal = paramVal + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\n              } else {\n                paramVal = paramVal + \"0\" + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\n              }\n\n              if (parameterDetail.Datetime.getDate().toString().length > 1) {\n                paramVal = paramVal + parameterDetail.Datetime.getDate();\n              } else {\n                paramVal = paramVal + \"0\" + parameterDetail.Datetime.getDate();\n              }\n            }\n\n            if (paramVal === undefined) {\n              paramFlag = false;\n              tempQuery = tempQuery.replaceAll(parameter, null);\n            } else if (paramVal.trim().length > 0) {\n              //tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\n              tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\n            } else {\n              paramFlag = false;\n            }\n          } else {\n            paramVal = parameterDetail.textValue;\n\n            if (paramVal !== \"\") {\n              if (parameterDetail.lableName.toUpperCase().startsWith('S')) {\n                if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'D$' + parameterDetail.DisplayParam + 'T$' + parameterDetail.TableName + '$P', \"'\" + paramVal + \"'\");\n                } else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'T$' + parameterDetail.TableName + '$P', \"'\" + paramVal + \"'\");\n                } else {\n                  tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\n                }\n              } else {\n                if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'D$' + parameterDetail.DisplayParam.trim() + 'T$' + parameterDetail.TableName + '$P', paramVal);\n                } else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\n                  tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim() + 'T$' + parameterDetail.TableName + '$P', paramVal);\n                } else {\n                  tempQuery = tempQuery.replaceAll(parameter, paramVal);\n                }\n              }\n            } else {\n              paramFlag = false;\n            }\n          }\n        }\n\n        if (paramFlag === true) {\n          //console.log(\"temp:\", tempQuery);\n          const inputParam = {\n            slideOperation: this.props.Login.slideOperation,\n            screenFlag: this.props.Login.screenFlag,\n            query: tempQuery.trim(),\n            userInfo: this.props.Login.userInfo,\n            data: {}\n          };\n          this.props.executeUserQuery(inputParam); //this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ENTERPAREMETRS\"\n          }));\n        }\n      } else {\n        if (selectedRecord.ssqlquery !== null && selectedRecord.ssqlquery.length > 0) {\n          const sqlQuery = selectedRecord.ssqlquery;\n\n          if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0 || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0 || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0 || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_CANNOTDATAMANIPULATION\"\n            }));\n          } else {\n            if (sqlQuery.indexOf('P$') > 0) {\n              let newQuery = sqlQuery;\n              const paramMap = new Map();\n\n              while (newQuery.indexOf(\"P$\") !== -1) {\n                const paramLabelStartIndex = newQuery.indexOf(\"P$\");\n                const paramLabelEndIndex = newQuery.indexOf(\"$P\");\n                const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\n\n                if (paramLabel.indexOf(\"T$\") !== -1) {\n                  let displayName = \"\";\n                  let localParam = \"\";\n                  let tableName = \"\";\n                  newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                  if (paramLabel.indexOf(\"D$\") !== -1) {\n                    localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\n                    displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                  } else {\n                    localParam = paramLabel.substring(0, paramLabel.indexOf('T$')); //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\n\n                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\n                  }\n\n                  if (localParam.startsWith('d') || localParam.startsWith('D')) {\n                    paramMap.set(\"P$\" + localParam + \"$P\", {\n                      value: 'DateTimePicker',\n                      lableName: localParam,\n                      //ID: param.length, \n                      Datetime: new Date(),\n                      textValue: '',\n                      TableName: tableName,\n                      DisplayParam: displayName,\n                      actuallableName: localParam.substring(1, localParam.length)\n                    });\n                  } else {\n                    paramMap.set(\"P$\" + localParam + \"$P\", {\n                      value: 'TextBox1',\n                      lableName: localParam,\n                      //ID: param.length, \n                      textValue: '',\n                      TableName: tableName,\n                      DisplayParam: displayName,\n                      actuallableName: localParam.substring(1, localParam.length)\n                    });\n                  }\n                } else {\n                  newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\n\n                  if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\n                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                      value: 'DateTimePicker',\n                      lableName: paramLabel,\n                      actuallableName: paramLabel.substring(1, paramLabel.length),\n                      //ID: param.length, \n                      Datetime: new Date()\n                    });\n                  } else {\n                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\n                      value: 'TextBox1',\n                      lableName: paramLabel,\n                      //ID: param.length, \n                      textValue: '',\n                      TableName: \"\",\n                      DisplayParam: \"\",\n                      actuallableName: paramLabel.substring(1, paramLabel.length)\n                    });\n                  }\n                }\n              }\n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  screenName: \"Parameter for Results\",\n                  showExecute: true,\n                  showSave: true,\n                  showParam: true,\n                  showValidate: false,\n                  slideOperation: this.props.Login.operation,\n                  slideResult: [],\n                  slideList: [],\n                  screenFlag: \"showQuery\",\n                  param: paramMap // Dparam: Dparam, TBLName: TBLName\n\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              //query without parameters      \n              const inputParam = {\n                screenName: \"Results\",\n                query: selectedRecord.ssqlquery.trim(),\n                userInfo: this.props.Login.userInfo,\n                slideOperation: this.props.Login.operation,\n                screenFlag: \"showQuery\",\n                data: {\n                  showExecute: false,\n                  showSave: false,\n                  showParam: true,\n                  showValidate: false,\n                  noSave: false,\n                  operation: \"view\",\n                  param: new Map(),\n                  screenName: \"Results\",\n                  slideOperation: this.props.Login.operation,\n                  screenFlag: \"showQuery\"\n                }\n              };\n              this.props.executeUserQuery(inputParam);\n            }\n          }\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.resultStatus === \"Success\") {\n        let operation = this.props.Login.operation;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n\n        if (operation === \"update\" || operation === \"view\" && this.props.Login.slideOperation !== \"create\") {\n          // edit\n          operation = \"update\";\n          postParam = {\n            inputListName: \"SQLQuery\",\n            selectedObject: \"SelectedSQLQuery\",\n            primaryKeyField: \"nsqlquerycode\"\n          };\n          let selectedRecord = { ...this.state.selectedRecord\n          };\n          delete selectedRecord.nformcode;\n          inputData[\"sqlquery\"] = selectedRecord;\n          this.queryFieldList.map(item => {\n            return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          });\n        } else {\n          //add               \n          inputData[\"sqlquery\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n          operation = \"create\";\n          this.queryFieldList.map(item => {\n            return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item];\n          });\n        }\n\n        if (inputData[\"sqlquery\"].hasOwnProperty('esignpassword')) {\n          if (inputData[\"sqlquery\"]['esignpassword'] === '') {\n            delete inputData[\"sqlquery\"]['esigncomments'];\n            delete inputData[\"sqlquery\"]['esignpassword'];\n            delete inputData[\"sqlquery\"]['agree'];\n          }\n        }\n\n        inputData[\"sqlquery\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : \"-1\";\n        inputData[\"sqlquery\"][\"nquerytypecode\"] = this.props.Login.masterData.SelectedQueryType.nquerytypecode; ///code removed\n\n        const inputParam = {\n          classUrl: \"sqlquery\",\n          methodUrl: \"SQLQuery\",\n          inputData: inputData,\n          operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              parentPopUpSize: \"lg\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INAVLIDDATA\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"sqlquery\",\n      //     methodUrl: \"SQLQuery\",\n      //     displayName: \"IDS_SQLBUILDER\",\n      //     userInfo: this.props.Login.userInfo\n      // };\n      // this.props.callService(inputParam);\n\n      let nquerytypecode = this.props.Login.masterData.SelectedQueryType ? this.props.Login.masterData.SelectedQueryType.nquerytypecode : 0;\n      this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\n    };\n\n    const dataStateUserQuery = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      // modalIsOpen: false,\n      parameters: [],\n      // objparam: [],\n      // objDparam: [],\n      queryName: '',\n      // queryResult: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataStateUserQuery: dataStateUserQuery,\n      queryTypeName: '',\n      selectedcombo: [],\n      selectedTableType: [],\n      moduleFormName: [],\n      ntableTypeCode: -1,\n      nFormCode: -1,\n      queryType: [],\n      tableType: [],\n      chartList: [],\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      //tableName : undefined,tableList:[]\n      outputColumns: [],\n      selectedTableList: [],\n      tableColumnList: [],\n      foreignTableColumnList: [],\n      joinTableList: [],\n      symbolsList: [],\n      foreignTableList: [],\n      count: 0,\n      foreignTableCount: [],\n      selectedforeignTableList: [],\n      filterColumnList: [],\n      sqlQuery: false,\n      // viewColumnList: [],\n      switchRecord: {}\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.dropItemRef = React.createRef(); \n\n    this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery', 'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode']; // this.queryList = [];\n\n    this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\", \"squerytypename\", \"schartname\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      masterData,\n      userInfo\n    } = this.props.Login;\n    const addId = this.state.controlMap.has(\"AddSQLQuery\") && this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSQLQuery\") && this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteSQLQuery\") && this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;\n    const executeId = this.state.controlMap.has(\"ExecuteSQLQuery\") && this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"SQLQuery\",\n      selectedObject: \"SelectedSQLQuery\",\n      primaryKeyField: \"nsqlquerycode\",\n      fetchUrl: \"sqlquery/getSQLQuery\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_SQLQUERYNAME\",\n      \"dataField\": \"ssqlqueryname\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_SQLQUERY\",\n      \"dataField\": \"ssqlquery\",\n      \"width\": \"200px\",\n      \"mandatory\": true\n    } // { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \n    // { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\n    // { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\n    // { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\n    ];\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 2) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SCREENHEADER\",\n        \"dataField\": \"sscreenheader\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }];\n    }\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 5) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SVALUEMEMBER\",\n        \"dataField\": \"svaluemember\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }, {\n        \"idsName\": \"IDS_SDISPLAYMEMBER\",\n        \"dataField\": \"sdisplaymember\",\n        \"width\": \"200px\",\n        \"mandatory\": true\n      }];\n    }\n\n    if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 1) {\n      this.validationColumnList = [{\n        \"idsName\": \"IDS_SQLQUERYNAME\",\n        \"dataField\": \"ssqlqueryname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_SQLQUERY\",\n        \"dataField\": \"ssqlquery\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_CHARTTYPE\",\n        \"dataField\": \"ncharttypecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SQLBUILDER\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.SQLQuery,\n      getMasterDetail: sqlQuery => this.props.getSQLQueryDetail(sqlQuery, userInfo, masterData),\n      selectedMaster: this.props.Login.masterData.SelectedSQLQuery,\n      primaryKeyField: \"nsqlquerycode\",\n      mainField: \"ssqlqueryname\",\n      firstField: \"squerytypename\",\n      secondField: this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.masterData.SelectedQueryType.nquerytypecode, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      addId) //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\n      ,\n      needAccordianFilter: false // skip={this.state.skip}\n      // take={this.state.take}\n      ,\n      handlePageChange: this.handlePageChange,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showBuildQuery: false,\n      builderData: this.getDatabaseTables,\n      filterComponent: [{\n        \"IDS_QUERYTYPEFILTER\": /*#__PURE__*/React.createElement(QueryTypeFilter, {\n          queryType: this.state.queryType || [] //{this.props.Login.masterData.QueryType || []}\n          ,\n          selectedRecord: this.state.selectedcombo || {},\n          onComboChange: this.onComboChange,\n          filterQueryType: this.props.Login.masterData.SelectedQueryType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.SQLQuery && this.props.Login.masterData.SQLQuery.length > 0 && this.props.Login.masterData.SelectedSQLQuery && Object.values(this.props.Login.masterData.SelectedSQLQuery).length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.masterData.SelectedSQLQuery.squerytypename,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 73\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"editsqlqueryname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      onClick: () => this.getValidationForEdit(this.state.queryTypeName, \"update\", \"nsqlquerycode\", this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode, this.props.Login.masterData, this.props.Login.userInfo, //this.state.selectedcombo[\"nquerytypecode\"].value, \n      this.props.Login.masterData.SelectedQueryType.nquerytypecode, editId) //    data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletesqlqueryname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"executequery\",\n      hidden: this.state.userRoleControlRights.indexOf(executeId) === -1,\n      onClick: () => this.executeQuery(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"execute\", executeId) //    data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EXECUTEQUERY\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSALERTQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SCREENHEADER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.sscreenheader))), this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SVALUEMEMBER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.svaluemember))), this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SDISPLAYMEMBER\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.sdisplaymember))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 69\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SQLQUERY\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.SelectedSQLQuery.ssqlquery)))))) : \"\"))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal //size={this.props.Login.parentPopUpSize}\n      ,\n      size: this.props.Login.loadEsign ? \"lg\" : \"xl\",\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      onExecuteClick: this.onExecuteClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      showExecute: this.props.Login.showExecute,\n      showParam: this.props.Login.showParam,\n      noSave: this.props.Login.noSave,\n      showValidate: this.props.Login.showValidate //graphView={this.props.Login.graphView}\n      ,\n      showSave: this.props.Login.showSave,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"Parameter for Results\" ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 29\n        }\n      }) : (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") && this.props.Login.showParam ? /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.handleText,\n        onComboChange: this.upDateComboboxValue,\n        onChange: this.handleDateChange //parameters={this.state.parameters || []}\n        ,\n        parameters: this.state.param || new Map(),\n        queryTypeCode: this.props.Login.masterData.SelectedQueryType.nquerytypecode // queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n        ,\n        sscreenheader: this.props.Login.masterData.SelectedSQLQuery === null ? \"\" : this.props.Login.masterData.SelectedSQLQuery.sscreenheader,\n        slideResult: this.props.Login.slideResult,\n        slideList: this.props.Login.slideList,\n        resultStatus: this.props.Login.resultStatus,\n        dataStateUserQuery: this.state.dataStateUserQuery,\n        userQueryDataStateChange: this.userQueryDataStateChange,\n        controlMap: this.state.controlMap,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddQuery, {\n        selectedRecord: this.state.selectedRecord || {},\n        selectedTableType: this.state.selectedTableType || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        chartList: this.state.chartList || [],\n        tableList: this.props.Login.tableList || [],\n        tableName: this.props.Login.tableName || [] //tableList={}\n        ,\n        tableType: this.state.tableType || [],\n        moduleFormName: this.state.moduleFormName || [],\n        tableTypeCode: this.state.selectedTableType[\"ntabletypecode\"] ? this.state.selectedTableType[\"ntabletypecode\"].value : 0 // onColumnNameDrop={this.onColumnNameDrop}\n        ,\n        onDrop: this.onDrop.bind(this) //queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\n        ,\n        queryTypeCode: this.props.Login.masterData.SelectedQueryType.nquerytypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }\n    }), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.Login.screenName,\n      addComponent: /*#__PURE__*/React.createElement(BuildQuery, {\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [] // validationData={validationData}\n        ,\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        viewMasterListByRule: this.props.Login.viewMasterListByRule || [],\n        userInfo: this.props.Login.userInfo,\n        onExecuteRule: this.onExecuteRule,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange // onForeignTableChange={this.onForeignTableChange}\n        // addJoinTable={this.addJoinTable}\n        ,\n        onQueryTypeOnclick: this.onQueryTypeOnclick,\n        onRuleChange: this.onRuleChange,\n        onViewComboChange: this.onViewComboChange,\n        addRule: this.addRule,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        handleFilterDateChange: this.handleFilterDateChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        viewColumnListByRule: this.props.Login.viewColumnListByRule || [],\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  getTablesName(selectedRecord) {\n    return function (dispatch) {\n      const url = \"sqlquery/getTablesFromSchema\";\n      rsapi.post(url, {\n        \"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\n        \"moduleformcode\": parseInt(selectedRecord[\"nformcode\"].value),\n        \"userinfo\": this.props.Login.userInfo\n      }).then(response => {\n        let tableName = undefined;\n        let tableNameOnly = [];\n        Object.values(response[1].data[0]).forEach(p => {\n          if (p.stable !== tableName) {\n            tableName = p.stable;\n            tableNameOnly.push({\n              tableName\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            tableList: response[0].data[0] || [],\n            tableName: tableNameOnly || []\n          }\n        }); //this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n\n  getModuleFormName(TableTypeCode) {\n    const url = \"sqlquery/getModuleFormName\";\n    rsapi.post(url, {\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"userinfo\": this.props.Login.userInfo\n    }).then(response => {\n      this.setState({\n        moduleFormName: response.data[0]\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }\n\n  onDrop(data) {\n    let {\n      selectedRecord\n    } = this.state;\n    let sqlquery = selectedRecord.ssqlquery ? selectedRecord.ssqlquery : \"\";\n    selectedRecord.ssqlquery = data.dragtable ? `${sqlquery} ${data.dragtable}` : `${sqlquery} ${data.dragcolumn}`;\n    this.setState({\n      selectedRecord\n    });\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      dataStateUserQuery,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      queryType,\n      chartList,\n      moduleFormName,\n      tableType,\n      selectedTableType,\n      param,\n      tableColumnList,\n      selectedTableList,\n      foreignTableCount,\n      foreignTableList,\n      count,\n      sqlQuery\n    } = this.state;\n    let updateState = false; // const masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.sqlQuery !== previousProps.Login.sqlQuery) {\n      updateState = true;\n      sqlQuery = this.props.Login.sqlQuery;\n    }\n\n    if (this.props.Login.tableColumnList !== previousProps.Login.tableColumnList) {\n      updateState = true;\n      tableColumnList = this.props.Login.tableColumnList;\n    }\n\n    if (this.props.Login.slideResult !== previousProps.Login.slideResult) {\n      dataStateUserQuery = {\n        skip: 0,\n        take: 10\n      };\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRight = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRight.push(item.ncontrolcode));\n      }\n\n      const controlMap1 = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\n\n      const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\", \"squerytypename\", \"nsorter\", \"ascending\", false);\n      const QueryTypeList = queryTypeMap.get(\"OptionList\"); // const selectedcombo = {\n      //     nquerytypecode: QueryTypeList.length > 0 ? {\n      //         \"value\": QueryTypeList[0].item.nquerytypecode,\n      //         \"label\": QueryTypeList[0].item.squerytypename\n      //     } : this.state.selectedcombo[\"nquerytypecode\"]\n      // }\n      // }\n\n      updateState = true;\n      userRoleControlRights = userRoleControlRight;\n      controlMap = controlMap1;\n      filterData = this.generateBreadCrumData();\n      queryType = QueryTypeList;\n    } else {\n      filterData = this.generateBreadCrumData();\n\n      if (this.props.Login.chartList !== previousProps.Login.chartList || this.props.Login.moduleFormName !== previousProps.Login.moduleFormName) {\n        const chartListMap = constructOptionList(this.props.Login.chartList || [], \"ncharttypecode\", \"schartname\", undefined, undefined, undefined);\n        const chartTypeList = chartListMap.get(\"OptionList\");\n        const moduleFormNameMap = constructOptionList(this.props.Login.moduleFormName || [], \"nformcode\", \"sformname\", undefined, undefined, undefined);\n        const moduleFormNameList = moduleFormNameMap.get(\"OptionList\");\n        updateState = true;\n        chartList = chartTypeList;\n        moduleFormName = moduleFormNameList;\n      }\n\n      if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\n        const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\", \"squerytypename\", \"nsorter\", \"ascending\", false);\n        const QueryTypeList = queryTypeMap.get(\"OptionList\"); // const selectedcombo = {\n        //                         nquerytypecode: QueryTypeList.length > 0 ? {\n        //                             \"value\": QueryTypeList[0].item.nquerytypecode,\n        //                             \"label\": QueryTypeList[0].item.squerytypename\n        //                         } : this.state.selectedcombo[\"nquerytypecode\"]\n        //}\n\n        updateState = true;\n        queryType = QueryTypeList; //selectedcombo , \n      }\n\n      if (this.props.Login.tableType !== previousProps.Login.tableType) {\n        const tableTypeMap = constructOptionList(this.props.Login.tableType || [], \"ntabletypecode\", \"stabletype\", undefined, undefined, undefined);\n        const tableTypeList = tableTypeMap.get(\"OptionList\");\n        selectedTableType = {\n          ntabletypecode: tableTypeList.length > 0 ? {\n            \"value\": tableTypeList[0].item.ntabletypecode,\n            \"label\": tableTypeList[0].item.stabletype\n          } : this.state.selectedTableType[\"ntabletypecode\"]\n        };\n        updateState = true;\n        tableType = tableTypeList;\n      }\n\n      if (this.props.Login.masterData.SelectedQueryType !== previousProps.Login.masterData.SelectedQueryType) {\n        updateState = true;\n      }\n\n      if (this.props.Login.param !== previousProps.Login.param) {\n        updateState = true;\n        param = this.props.Login.param;\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        dataStateUserQuery,\n        userRoleControlRights,\n        controlMap,\n        filterData,\n        queryType,\n        chartList,\n        moduleFormName,\n        tableType,\n        selectedTableType,\n        param,\n        tableColumnList,\n        selectedTableList,\n        foreignTableCount,\n        foreignTableList,\n        count,\n        sqlQuery\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryType) {\n      breadCrumbData.push({\n        \"label\": \"IDS_QUERYTYPE\",\n        \"value\": this.props.Login.masterData.SelectedQueryType ? this.props.Login.masterData.SelectedQueryType.squerytypename : \"\" //this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined,\n        testData: {},\n        parameterData: {},\n        otherTestData: {},\n        formulaData: {}\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName,\n  getTablesName,\n  getModuleFormName,\n  getDatabaseTables,\n  executeQuery,\n  getForeignTable,\n  getViewColumns,\n  getMasterData\n})(injectIntl(SQLBuilder));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/SqlBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faPencilAlt","faTasks","faDatabase","toast","ListMaster","SlideOutModal","Esign","AddQuery","AddParameter","QueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","getTablesName","getModuleFormName","getDatabaseTables","executeQuery","getForeignTable","getViewColumns","getMasterData","DEFAULT_RETURN","transactionStatus","queryTypeFilter","tableType","ColumnType","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","rsapi","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","PortalModalSlideout","BuildQuery","jsonSql","require","separatedValues","SQLBuilder","constructor","props","userQueryDataStateChange","event","setState","dataStateUserQuery","dataState","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","Login","masterData","SelectedSQLQuery","handleFilterDateChange","dateName","dateValue","selectedRecord","state","Date","generateFilterQuery","onViewComboChange","comboData","fieldName","inputParam","sviewname","value","userinfo","userInfo","onRuleChange","index","clearSelectedRule","sqlQuery","oldselectedRecord","tableData","items","mastertablename","needmasterdata","data","nflag","valuemember","displaymember","optionId","columntype","COMBO","stablename","foriegntablename","scolumnname","sforeigncolumnname","TEXTINPUT","onMasterDataChange","addRule","type","addRuleList","length","arrayLength","updateInfo","typeName","viewColumnListByRule","viewColumnList","info","closePortalModal","openPortalModal","count","onExecuteRule","sgeneratedquery","deleteRule","clearRule","resetRule","onSymbolChange","oldSelectedRecord","symbolType","onInputChange","inputValue","target","test","name","setDialect","databaseCondition","displayCondition","orDisplayConditionArray","orConditionArray","forEach","symbolObject","current_button_and","current_button_or","next_button_and","next_button_or","inputname","symbolname","symbol","numericinput","columnLabel","label","columnValue","snumericinputtwo","columnName","undefined","dateinput","dateinputtwo","replacewith","indexOf","substr","push","tempValue","tempValue1","map","item","data1","isInputVisible","$or","databaseSQLQuery","build","table","condition","displaySQLQuery","query","onConditionClick","onQueryTypeOnclick","getValidationForEdit","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","post","then","response","confirmAlertForEdit","warn","catch","error","status","message","editId","queryTypeName","nsqlquerycode","SelectedQueryType","nquerytypecode","closeAlert","showConfirmAlertForEdit","openFilter","showFilter","closeFilter","onFilterSubmit","searchRef","current","handlePageChange","skip","take","onComboChange","selectedTableType","ALL","updateInfor","tableName","moduleFormName","selectedcombo","onEsignInputOnChange","checked","YES","NO","onInputOnChange","ACTIVE","DEACTIVE","onNumericInputChange","closeModal","loadEsign","openModal","showExecute","showParam","showValidate","showSave","slideOperation","parentPopUpSize","resultStatus","param","size","screenFlag","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","upDateComboboxValue","i","Value","paramMap","Map","get","textValue","handleDateChange","date","Datetime","handleText","methodUrl","ssqlquery","toUpperCase","newQuery","paramLabelStartIndex","paramLabelEndIndex","paramLabel","substring","displayName","localParam","startsWith","set","lableName","TableName","DisplayParam","actuallableName","slideResult","slideList","trim","noSave","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","classUrl","inputData","toLowerCase","userRoleControlRights","nformcode","screenData","onExecuteClick","tempQuery","paramFlag","parameterMap","entries","parameter","parameterDetail","paramVal","getFullYear","getMonth","toString","parseInt","getDate","replaceAll","onSaveClick","saveType","formRef","queryFieldList","nmastersitecode","hasOwnProperty","validateEsign","sreason","nreasoncode","spredefinedreason","password","reloadData","parameters","queryName","controlMap","ntableTypeCode","nFormCode","queryType","chartList","settings","outputColumns","selectedTableList","tableColumnList","foreignTableColumnList","joinTableList","symbolsList","foreignTableList","foreignTableCount","selectedforeignTableList","filterColumnList","switchRecord","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","addId","has","ncontrolcode","executeId","filterParam","validationColumnList","mandatoryFields","mandatory","breadCrumbData","filterData","searchedData","SQLQuery","Object","values","ssqlqueryname","squerytypename","sscreenheader","LIMSFILTERQUERY","svaluemember","sdisplaymember","tableList","onDrop","bind","databaseTableList","viewMasterListByRule","databaseviewList","masterdata","dispatch","url","tableNameOnly","p","stable","payload","TableTypeCode","sqlquery","dragtable","dragcolumn","componentDidUpdate","previousProps","updateState","userRoleControlRight","controlMap1","queryTypeMap","QueryType","QueryTypeList","generateBreadCrumData","chartListMap","chartTypeList","moduleFormNameMap","moduleFormNameList","tableTypeMap","tableTypeList","ntabletypecode","stabletype","componentWillUnmount","modalName","testData","parameterData","otherTestData","formulaData","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faTasks, faDatabase } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddQuery from './AddQuery';\r\nimport AddParameter from './AddParameter';\r\nimport QueryTypeFilter from './QueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery,\r\n    comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName,\r\n    getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport BuildQuery from './BuildQuery';\r\n// import {validationData} from './QueryBuilderData';\r\n\r\nconst jsonSql = require('json-sql')({separatedValues: true});\r\n\r\nclass SQLBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            // modalIsOpen: false,\r\n            parameters: [],\r\n            // objparam: [],\r\n            // objDparam: [],\r\n            queryName: '',\r\n            // queryResult: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [],\r\n            selectedTableType: [],\r\n            moduleFormName: [],\r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            queryType: [],\r\n            tableType: [],\r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25, //tableName : undefined,tableList:[]\r\n            outputColumns: [],\r\n            selectedTableList: [],\r\n            tableColumnList: [],\r\n            foreignTableColumnList: [],\r\n            joinTableList: [],\r\n            symbolsList: [],\r\n            foreignTableList: [],\r\n            count: 0,\r\n            foreignTableCount: [],\r\n            selectedforeignTableList: [],\r\n            filterColumnList: [],\r\n            sqlQuery: false,\r\n            // viewColumnList: [],\r\n            switchRecord: {}\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        // this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n            \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    userQueryDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateUserQuery: event.dataState\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"delete\", deleteId));\r\n    }\r\n\r\n\r\n    render() {\r\n        const { masterData, userInfo } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddSQLQuery\") && this.state.controlMap.get(\"AddSQLQuery\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSQLQuery\") && this.state.controlMap.get(\"EditSQLQuery\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSQLQuery\") && this.state.controlMap.get(\"DeleteSQLQuery\").ncontrolcode;\r\n        const executeId = this.state.controlMap.has(\"ExecuteSQLQuery\") && this.state.controlMap.get(\"ExecuteSQLQuery\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\",\r\n            fetchUrl: \"sqlquery/getSQLQuery\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n            { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\",\"mandatory\": true }, \r\n            // { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\",\"mandatory\": true },\r\n            // { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\",\"mandatory\": true },\r\n        ]\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 2) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SCREENHEADER\", \"dataField\": \"sscreenheader\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 5) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SVALUEMEMBER\", \"dataField\": \"svaluemember\", \"width\": \"200px\", \"mandatory\": true },\r\n                { \"idsName\": \"IDS_SDISPLAYMEMBER\", \"dataField\": \"sdisplaymember\", \"width\": \"200px\", \"mandatory\": true },\r\n            ]\r\n        }\r\n        if (this.state.selectedcombo.nquerytypecode && this.state.selectedcombo.nquerytypecode.value === 1) {\r\n            this.validationColumnList = [\r\n                { \"idsName\": \"IDS_SQLQUERYNAME\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlquery\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n            ]\r\n        }\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_SQLBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SQLQuery}\r\n                                getMasterDetail={(sqlQuery) => this.props.getSQLQueryDetail(sqlQuery, userInfo, masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedSQLQuery}\r\n                                primaryKeyField=\"nsqlquerycode\"\r\n                                mainField=\"ssqlqueryname\"\r\n                                firstField=\"squerytypename\"\r\n                                secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                    this.props.Login.masterData, this.props.Login.userInfo,\r\n                                    this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                    //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                    addId)} //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showBuildQuery={false}\r\n                                builderData={this.getDatabaseTables}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <QueryTypeFilter\r\n                                                queryType={this.state.queryType || []}//{this.props.Login.masterData.QueryType || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={this.props.Login.masterData.SelectedQueryType}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            {this.props.Login.masterData.SQLQuery && this.props.Login.masterData.SQLQuery.length > 0 && this.props.Login.masterData.SelectedSQLQuery && Object.values(this.props.Login.masterData.SelectedSQLQuery).length > 0 ?\r\n                                                <>\r\n                                                    <Card.Header>\r\n                                                        <Card.Title className=\"product-title-main\">\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.ssqlqueryname}\r\n                                                        </Card.Title>\r\n                                                        <Card.Subtitle>\r\n                                                            <div className=\"d-flex product-category\">\r\n                                                                <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                    <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\r\n                                                                        <FormattedMessage id={this.props.Login.masterData.SelectedSQLQuery.squerytypename} />\r\n                                                                    </span>\r\n                                                                </h2>\r\n                                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                                <div className=\"d-inline\">\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"editsqlqueryname\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                        onClick={() => this.getValidationForEdit(this.state.queryTypeName,\r\n                                                                            \"update\", \"nsqlquerycode\",\r\n                                                                            this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                                                                            this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                            //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                                                                            this.props.Login.masterData.SelectedQueryType.nquerytypecode,\r\n                                                                            editId)}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}>\r\n\r\n                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"buildquery\"\r\n                                                                        // hidden={this.state.userRoleControlRights.indexOf(executeId) === -1}\r\n                                                                        onClick={() => this.getDatabaseTables()}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_BUILDQUERY\" })}>\r\n                                                                        <FontAwesomeIcon icon={faDatabase} />\r\n                                                                    </Nav.Link> */}\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletesqlqueryname\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                     //   data-for=\"tooltip_list_wrap\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                    </Nav.Link>\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"executequery\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(executeId) === -1}\r\n                                                                        onClick={() => this.executeQuery(\"SQLQuery\", this.props.Login.masterData.SelectedSQLQuery, \"execute\", executeId)}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EXECUTEQUERY\" })}>\r\n                                                                        <FontAwesomeIcon icon={faTasks} />\r\n                                                                    </Nav.Link>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Card.Subtitle>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body>\r\n                                                        <Row>\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSALERTQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sscreenheader}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.svaluemember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            {this.props.Login.masterData.SelectedSQLQuery.nquerytypecode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                                                <Col md=\"6\">\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}</FormLabel>\r\n                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.sdisplaymember}</ReadOnlyText>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            }\r\n                                                            <Col md=\"12\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}</FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedSQLQuery.ssqlquery}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </>\r\n                                                : \"\"\r\n                                            }\r\n                                        </Card>\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* </div> */}\r\n                {/* End of get display */}\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        //size={this.props.Login.parentPopUpSize}\r\n                        size={this.props.Login.loadEsign ? \"lg\" : \"xl\"}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        onExecuteClick={this.onExecuteClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        showExecute={this.props.Login.showExecute}\r\n                        showParam={this.props.Login.showParam}\r\n                        noSave={this.props.Login.noSave}\r\n                        showValidate={this.props.Login.showValidate}\r\n                        //graphView={this.props.Login.graphView}\r\n                        showSave={this.props.Login.showSave}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName === \"Parameter for Results\" ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") && this.props.Login.showParam ?\r\n                                <AddParameter\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.handleText}\r\n                                    onComboChange={this.upDateComboboxValue}\r\n                                    onChange={this.handleDateChange}\r\n                                    //parameters={this.state.parameters || []}\r\n                                    parameters={this.state.param || new Map()}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                    // queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    sscreenheader={this.props.Login.masterData.SelectedSQLQuery === null ? \"\" : this.props.Login.masterData.SelectedSQLQuery.sscreenheader}\r\n                                    slideResult={this.props.Login.slideResult}\r\n                                    slideList={this.props.Login.slideList}\r\n                                    resultStatus={this.props.Login.resultStatus}\r\n                                    dataStateUserQuery={this.state.dataStateUserQuery}\r\n                                    userQueryDataStateChange={this.userQueryDataStateChange}\r\n                                    controlMap={this.state.controlMap}\r\n                                />\r\n\r\n                                :\r\n                                <AddQuery\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    selectedTableType={this.state.selectedTableType || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    chartList={this.state.chartList || []}\r\n                                    tableList={this.props.Login.tableList || []}\r\n                                    tableName={this.props.Login.tableName || []}\r\n                                    //tableList={}\r\n                                    tableType={this.state.tableType || []}\r\n                                    moduleFormName={this.state.moduleFormName || []}\r\n                                    tableTypeCode={this.state.selectedTableType[\"ntabletypecode\"] ? this.state.selectedTableType[\"ntabletypecode\"].value : 0}\r\n                                    // onColumnNameDrop={this.onColumnNameDrop}\r\n                                    onDrop={this.onDrop.bind(this)}\r\n                                    //queryTypeCode={this.state.selectedcombo[\"nquerytypecode\"].value}\r\n                                    queryTypeCode={this.props.Login.masterData.SelectedQueryType.nquerytypecode}\r\n                                />\r\n                        }\r\n\r\n                    />\r\n                }\r\n\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.Login.screenName}\r\n                        addComponent={\r\n                            <BuildQuery\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                // validationData={validationData}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                viewMasterListByRule={this.props.Login.viewMasterListByRule || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onExecuteRule={this.onExecuteRule}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                // onForeignTableChange={this.onForeignTableChange}\r\n                                // addJoinTable={this.addJoinTable}\r\n                                onQueryTypeOnclick={this.onQueryTypeOnclick}\r\n\r\n                                onRuleChange={this.onRuleChange}\r\n                                onViewComboChange={this.onViewComboChange}\r\n                                addRule={this.addRule}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                viewColumnListByRule={this.props.Login.viewColumnListByRule || []}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onViewComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {}; \r\n        selectedRecord[fieldName] = comboData;\r\n        const inputParam = {\r\n            sviewname: comboData.value,\r\n            selectedRecord,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getViewColumns(inputParam);\r\n    }\r\n\r\n    onRuleChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index);\r\n        const sqlQuery = this.props.Login.sqlQuery;\r\n        const oldselectedRecord = selectedRecord;\r\n        selectedRecord[fieldName] = comboData;\r\n        const tableData = comboData.items;\r\n        const mastertablename = tableData.mastertablename;    \r\n\r\n        if(comboData.items.needmasterdata && mastertablename) {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                data: {\r\n                    nflag: 2,\r\n                    mastertablename,\r\n                    valuemember: tableData.valuemember,\r\n                    displaymember: tableData.displaymember,\r\n                },\r\n                selectedRecord, \r\n                index,\r\n                optionId: tableData.valuemember\r\n            };\r\n            this.props.getMasterData(inputParam);\r\n        } else if(comboData.items && comboData.items.columntype === ColumnType.COMBO) {\r\n            if(sqlQuery) {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    stablename: comboData.items.foriegntablename,\r\n                    scolumnname: comboData.value,\r\n                    selectedRecord, \r\n                    index\r\n                };\r\n                this.props.getForeignTable(inputParam, 'column');\r\n            } else {\r\n                selectedRecord[`${comboData.items.sforeigncolumnname}_${index}`] = \"\";\r\n                const inputParam = {\r\n                    data: { ...comboData.items, nflag: 1 },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedRecord,\r\n                    index,\r\n                    optionId: comboData.items.sforeigncolumnname\r\n                };\r\n                this.props.getMasterData(inputParam);\r\n            }\r\n        } else if(comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT \r\n            && oldselectedRecord[fieldName].items.columntype !== ColumnType.TEXTINPUT ) {\r\n            selectedRecord[\"sinputname_\"+index] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onMasterDataChange = (comboData, fieldName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[fieldName] = comboData;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    addRule = (type) => {\r\n        const { selectedRecord } = this.state; \r\n        if(type === \"sql\") {\r\n            let addRuleList = this.props.Login.addRuleList || [];\r\n            if(addRuleList.length > 0) {\r\n                const arrayLength = addRuleList.length;\r\n                addRuleList[arrayLength] = arrayLength;\r\n                selectedRecord[\"button_and_\"+arrayLength] = true;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        addRuleList, \r\n                        selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                addRuleList[0] = 0;\r\n                this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, {addRuleList, selectedRecord: {}});\r\n            }\r\n        } else {\r\n            if(selectedRecord[\"sviewname\"]) {\r\n                const viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n                const addRuleList = this.props.Login.addRuleList || [];\r\n                const arrayLength = addRuleList.length;\r\n                addRuleList[arrayLength] = arrayLength;\r\n                viewColumnListByRule[arrayLength] = this.props.Login.viewColumnList;\r\n                if(arrayLength !== 0) {\r\n                    selectedRecord[\"button_and_\"+arrayLength] = true;\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        addRuleList, \r\n                        viewColumnListByRule, \r\n                        selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    getDatabaseTables = () => {\r\n        const sqlQuery = false;\r\n        this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {addRuleList: []});\r\n    }\r\n\r\n    closePortalModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onExecuteRule = () => {\r\n        const { selectedRecord } = this.state;\r\n        if(selectedRecord[\"sgeneratedquery\"]) {\r\n            const inputParam = {\r\n                sgeneratedquery: selectedRecord[\"sgeneratedquery\"],\r\n                selectedRecord,\r\n                userInfo: this.props.Login.userInfo\r\n            }\r\n            this.props.executeQuery(inputParam);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_QUERYNOTAVAILABLE\" }));\r\n        }       \r\n    }\r\n\r\n    deleteRule = (index) => {\r\n        let addRuleList = this.props.Login.addRuleList;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addRuleList[index] = -1;\r\n        selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\r\n        selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\r\n        this.clearSelectedRule(selectedRecord, index);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\"+index] && delete selectedRecord[\"sinputname_\"+index];\r\n        selectedRecord[\"ssymbolname_\"+index] && delete selectedRecord[\"ssymbolname_\"+index];\r\n        selectedRecord[\"snumericinput_\"+index] && delete selectedRecord[\"snumericinput_\"+index];\r\n        selectedRecord[\"columnname_\"+index] && delete selectedRecord[\"columnname_\"+index];\r\n        selectedRecord[\"snumericinputtwo_\"+index] && delete selectedRecord[\"snumericinputtwo_\"+index];\r\n        selectedRecord[\"dateinput_\"+index] && delete selectedRecord[\"dateinput_\"+index];\r\n        selectedRecord[\"dateinputtwo_\"+index] && delete selectedRecord[\"dateinputtwo_\"+index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        this.setState({ selectedRecord: { sviewname } });\r\n    }\r\n    \r\n    onSymbolChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[fieldName] || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        const items = selectedRecord[\"columnname_\"+index].items;\r\n        selectedRecord[\"columnname_\"+index][\"items\"][\"needmasterdata\"] = items.needmasterdata? comboData.items.needmasterdata: false;\r\n        if(comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\r\n            selectedRecord[items[\"valuemember\"]+\"_\"+index] && delete selectedRecord[items[\"valuemember\"]+\"_\"+index];\r\n            selectedRecord[items[\"foreigncolumnname\"]+\"_\"+index] && delete selectedRecord[items[\"foreigncolumnname\"]+\"_\"+index];\r\n            selectedRecord[\"sinputname_\"+index] && delete selectedRecord[\"sinputname_\"+index];\r\n        } else if(comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\r\n            selectedRecord[\"snumericinput_\"+index] && delete selectedRecord[\"snumericinput_\"+index];\r\n            selectedRecord[\"snumericinputtwo_\"+index] && delete selectedRecord[\"snumericinputtwo_\"+index];\r\n        } else if((comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1)\r\n            || (comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6)){\r\n            selectedRecord[`${items.sforeigncolumnname}_${index}`] && delete selectedRecord[`${items.sforeigncolumnname}_${index}`];\r\n            selectedRecord[`${items.valuemember}_${index}`] && delete selectedRecord[`${items.valuemember}_${index}`];\r\n        } else {\r\n           \r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    // addJoinTable = (index) => {\r\n    //     const { foreignTableCount, foreignTableList } = this.state;\r\n    //     if(foreignTableList.length > 0) {\r\n    //         const tempCount = foreignTableCount[index]? foreignTableCount[index]: 1;\r\n    //         foreignTableCount[index] = tempCount + 1;\r\n    //         this.setState({ foreignTableCount });\r\n    //     }\r\n    // }\r\n\r\n    // onForeignTableChange = (comboData, fieldName, index) => {\r\n    //     const { selectedRecord, selectedforeignTableList, foreignTableColumnList } = this.state;\r\n    //     selectedforeignTableList[index] = {\r\n    //         \"tablename\": comboData.value,\r\n    //         \"tablevalue\": `\"${comboData.value}\".\"${comboData.items.columnname}\"`\r\n    //     };\r\n    //     selectedRecord[fieldName] = comboData;\r\n    //     // let foreignTableColumnList = [];\r\n    //     foreignTableColumnList[index] = this.props.Login.allTableColumnList.filter(x => x.tablename === comboData.value);\r\n    //     selectedRecord[fieldName] = comboData;\r\n    //     selectedRecord[\"foreigncolumnname\"] = [];\r\n    //     this.setState({ selectedRecord, selectedforeignTableList, foreignTableColumnList });\r\n    // }\r\n\r\n    onInputChange = (event, type) => {\r\n        let selectedRecord = this.state.selectedRecord;       \r\n        if(type === 2) {\r\n            const inputValue = event.target.value;\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    generateFilterQuery = (selectedRecord) => {\r\n        const addRuleList = this.props.Login.addRuleList;\r\n        jsonSql.setDialect('mssql');\r\n        let databaseCondition = [];\r\n        let displayCondition = [];\r\n        if(addRuleList.length > 0) {\r\n            let orDisplayConditionArray = [];\r\n            let orConditionArray = [];\r\n            addRuleList.forEach(index => {\r\n                let symbolObject = {};\r\n                if(selectedRecord[\"columnname_\"+index]) {\r\n                    symbolObject = selectedRecord[\"ssymbolname_\"+index].items || {};\r\n                \r\n                    const current_button_and = selectedRecord[`button_and_${index}`];\r\n                    const current_button_or = selectedRecord[`button_or_${index}`];\r\n                    const next_button_and = selectedRecord[`button_and_${index+1}`];\r\n                    const next_button_or = selectedRecord[`button_or_${index+1}`]? selectedRecord[`button_or_${index+1}`]:false;\r\n\r\n                    let inputname = selectedRecord[\"sinputname_\"+index];\r\n                    const symbolname = symbolObject.symbol;\r\n                    let numericinput = selectedRecord[\"snumericinput_\"+index];\r\n                    const columnLabel = selectedRecord[\"columnname_\"+index].label;\r\n                    const columnValue = selectedRecord[\"columnname_\"+index].value;\r\n                    const snumericinputtwo = selectedRecord[\"snumericinputtwo_\"+index];\r\n                    let columnName = undefined;\r\n                    const needmasterdata = selectedRecord[\"columnname_\"+index].items.needmasterdata? \r\n                        selectedRecord[\"columnname_\"+index].items.needmasterdata: false;\r\n\r\n                    if(selectedRecord[\"columnname_\"+index].items.needmasterdata) {\r\n                        columnName = selectedRecord[\"columnname_\"+index].items.valuemember+\"_\"+index;\r\n                    } else if(selectedRecord[\"columnname_\"+index].items.sforeigncolumnname) {\r\n                        columnName = selectedRecord[\"columnname_\"+index].items.sforeigncolumnname+\"_\"+index;\r\n                    }\r\n                    const dateinput = selectedRecord[\"dateinput_\"+index];\r\n                    const dateinputtwo = selectedRecord[\"dateinputtwo_\"+index];\r\n\r\n                    if(current_button_or || next_button_or || (current_button_and && next_button_or)) {\r\n                        if(symbolObject && inputname) {\r\n                            if(symbolObject.symbolType === 4) {\r\n                                const index = symbolObject.replacewith.indexOf('_'); \r\n                                inputname = symbolObject.replacewith.substr(0, index) + inputname + symbolObject.replacewith.substr(index+1);\r\n                                orConditionArray.push({[columnValue]: { [symbolname]: inputname} });\r\n                                orDisplayConditionArray.push({[columnLabel]: { [symbolname]: inputname} });\r\n                            } else {\r\n                                orConditionArray.push({[columnValue]: { [symbolname]: inputname} });\r\n                                orDisplayConditionArray.push({[columnLabel]: { [symbolname]: inputname} });\r\n                            }\r\n                        } else if(symbolObject && numericinput && symbolObject.symbolType !== 5) {\r\n                            orConditionArray.push({[columnValue]: { [symbolname]: numericinput} });\r\n                            orDisplayConditionArray.push({[columnLabel]: { [symbolname]: numericinput} });\r\n                        } else if(symbolObject && symbolObject.symbolType === 2\r\n                            || symbolObject && symbolObject.symbolType === 3) {\r\n                            orConditionArray.push({[columnValue]: { [symbolname]: ''} });\r\n                            orDisplayConditionArray.push({[columnLabel]: { [symbolname]: ''} });\r\n                        } \r\n                        else if(symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\r\n                            if(symbolObject.symbol === \"\") {\r\n                                const tempValue =  [{[columnValue]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: snumericinputtwo} }];\r\n                                const tempValue1 =  [{ [columnLabel]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: snumericinputtwo} }];\r\n                                orConditionArray.push(tempValue);\r\n                                orDisplayConditionArray.push(tempValue1);\r\n                            } else {\r\n                                const tempValue =  [ \r\n                                    {[symbolObject.symbol]: [{[columnValue]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: snumericinputtwo} }]}\r\n                                ];\r\n                                const tempValue1 =  [ \r\n                                    {[symbolObject.symbol]: [{ [columnLabel]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: snumericinputtwo} }]}\r\n                                ];\r\n                                orConditionArray.push(tempValue);\r\n                                orDisplayConditionArray.push(tempValue1);\r\n                            }\r\n                        } else if(symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[columnName]) {\r\n                            // if(typeof selectedRecord[columnName] === \"object\") {\r\n                            //     orConditionArray.push({[columnValue]: { [symbolname]: [selectedRecord[columnName].value]} });\r\n                            //     orDisplayConditionArray.push({[columnLabel]: { [symbolname]: [selectedRecord[columnName].label]} });\r\n                            // } else {\r\n                                const data = selectedRecord[columnName] && selectedRecord[columnName].map(item=>{return item.value}) || [];\r\n                                const data1 = selectedRecord[columnName] && selectedRecord[columnName].map(item=>{return item.label}) || [];\r\n                                if(data.length > 0) {\r\n                                    if(needmasterdata) {\r\n                                        orConditionArray.push({[selectedRecord[\"columnname_\"+index].items.valuemember]: {[symbolname]: data}});\r\n                                    } else {\r\n                                        orConditionArray.push({[columnValue]: {[symbolname]: data}});\r\n                                    }\r\n                                }\r\n                                if(data1.length > 0) {\r\n                                    orDisplayConditionArray.push({[columnLabel]: {[symbolname]: data1}});\r\n                                }\r\n                            // }\r\n                        } else if(symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[columnName]) {\r\n                            if(needmasterdata) {\r\n                                orConditionArray.push({[selectedRecord[\"columnname_\"+index].items.valuemember]: { [symbolname]: selectedRecord[columnName].value} });\r\n                                orDisplayConditionArray.push({[columnLabel]: { [symbolname]: selectedRecord[columnName].label} });\r\n                            } else {\r\n                                orConditionArray.push({[columnValue]: { [symbolname]: selectedRecord[columnName].value} });\r\n                                orDisplayConditionArray.push({[columnLabel]: { [symbolname]: selectedRecord[columnName].label} });\r\n                            }\r\n                        }  else if(symbolObject && dateinput && symbolObject.symbolType !== 5) {\r\n                            orConditionArray.push({[columnValue]: { [symbolname]: dateinput } });\r\n                            orDisplayConditionArray.push({[columnLabel]: { [symbolname]: dateinput } });\r\n                        } else if(symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\r\n                            if(symbolObject.symbol === \"\") {\r\n                                const tempValue = [{[columnValue]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: dateinputtwo} }];\r\n                                const tempValue1 =  [{ [columnLabel]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: dateinputtwo} }];\r\n                                orConditionArray.push(tempValue);\r\n                                orDisplayConditionArray.push(tempValue1);\r\n                            } else {\r\n                                const tempValue =  [ \r\n                                    {[symbolObject.symbol]: [{[columnValue]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: dateinputtwo} }]}\r\n                                ];\r\n                                const tempValue1 =  [ \r\n                                    {[symbolObject.symbol]: [{ [columnLabel]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: dateinputtwo} }]}\r\n                                ];\r\n                                orConditionArray.push(tempValue);\r\n                                orDisplayConditionArray.push(tempValue1);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if(symbolObject && inputname) {\r\n                            if(symbolObject.symbolType === 4) {\r\n                                const index = symbolObject.replacewith.indexOf('_'); \r\n                                inputname = symbolObject.replacewith.substr(0, index) + inputname + symbolObject.replacewith.substr(index+1);\r\n                                databaseCondition.push({[columnValue]: { [symbolname]: inputname} });\r\n                                displayCondition.push({[columnLabel]: { [symbolname]: inputname} });\r\n                            } else {\r\n                                databaseCondition.push({[columnValue]: { [symbolname]: inputname} });\r\n                                displayCondition.push({[columnLabel]: { [symbolname]: inputname} });\r\n                            }\r\n                        } else if(symbolObject && numericinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({[columnValue]: { [symbolname]: numericinput} });\r\n                            displayCondition.push({[columnLabel]: { [symbolname]: numericinput} });\r\n                        } else if(symbolObject && symbolObject.symbolType === 2\r\n                            || symbolObject && symbolObject.symbolType === 3) {\r\n                            databaseCondition.push({[columnValue]: { [symbolname]: ''} });\r\n                            displayCondition.push({[columnLabel]: { [symbolname]: ''} });\r\n                        } else if(symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\r\n                            if(symbolObject.symbol === \"\") {\r\n                                const tempValue = [{[columnValue]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: snumericinputtwo} }];\r\n                                const tempValue1 =  [{ [columnLabel]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: snumericinputtwo} }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                            } else {\r\n                                const tempValue =  [ \r\n                                    {[symbolObject.symbol]: [{[columnValue]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: snumericinputtwo} }]}\r\n                                ];\r\n                                const tempValue1 =  [ \r\n                                    {[symbolObject.symbol]: [{ [columnLabel]: {[symbolObject.replacewith[0]]: +numericinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: snumericinputtwo} }]}\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                            }\r\n                        } else if(symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[columnName]) {\r\n                            // if(typeof selectedRecord[columnName] === \"object\") {\r\n                            //     databaseCondition.push({[columnValue]: { [symbolname]: [selectedRecord[columnName].value]} });\r\n                            //     displayCondition.push({[columnLabel]: { [symbolname]: [selectedRecord[columnName].label]} });\r\n                            // } else {\r\n                                const data = selectedRecord[columnName] && selectedRecord[columnName].map(item=>{return item.value}) || [];\r\n                                const data1 = selectedRecord[columnName] && selectedRecord[columnName].map(item=>{return item.label}) || [];\r\n                                if(data.length > 0) {\r\n                                    if(needmasterdata) {\r\n                                        databaseCondition.push({[selectedRecord[\"columnname_\"+index].items.valuemember]: {[symbolname]: data}});\r\n                                    } else {\r\n                                        databaseCondition.push({[columnValue]: {[symbolname]: data}});\r\n                                    }\r\n                                }\r\n                                if(data1.length > 0) {\r\n                                    displayCondition.push({[columnLabel]: {[symbolname]: data1}});\r\n                                }\r\n                            // }\r\n                        } else if(symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[columnName]) {\r\n                            if(needmasterdata) {\r\n                                databaseCondition.push({[selectedRecord[\"columnname_\"+index].items.valuemember]: { [symbolname]: selectedRecord[columnName].value} });\r\n                                displayCondition.push({[columnLabel]: { [symbolname]: selectedRecord[columnName].label} });\r\n                            } else {\r\n                                databaseCondition.push({[columnValue]: { [symbolname]: selectedRecord[columnName].value} });\r\n                                displayCondition.push({[columnLabel]: { [symbolname]: selectedRecord[columnName].label} });\r\n                            }\r\n                        } else if(symbolObject && dateinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({[columnValue]: { [symbolname]: dateinput } });\r\n                            displayCondition.push({[columnLabel]: { [symbolname]: dateinput } });\r\n                        } else if(symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\r\n                            if(symbolObject.symbol === \"\") {\r\n                                const tempValue = [{[columnValue]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: dateinputtwo} }];\r\n                                const tempValue1 =  [{ [columnLabel]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: dateinputtwo} }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                            } else {\r\n                                const tempValue =  [ \r\n                                    {[symbolObject.symbol]: [{[columnValue]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                    { [columnValue]: {[symbolObject.replacewith[1]]: dateinputtwo} }]}\r\n                                ];\r\n                                const tempValue1 =  [ \r\n                                    {[symbolObject.symbol]: [{ [columnLabel]: {[symbolObject.replacewith[0]]: dateinput} }, \r\n                                        { [columnLabel]: {[symbolObject.replacewith[1]]: dateinputtwo} }]}\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n\r\n                    if(current_button_or \r\n                        && (next_button_and || typeof next_button_and === 'undefined') \r\n                        || typeof next_button_or === 'undefined') {\r\n                        if(orConditionArray.length > 0) {\r\n                            databaseCondition.push({$or: orConditionArray});\r\n                            orConditionArray = [];\r\n                        } \r\n                        if(orDisplayConditionArray.length > 0) {\r\n                            displayCondition.push({$or: orDisplayConditionArray});\r\n                            orDisplayConditionArray = [];\r\n                        }\r\n                    }\r\n\r\n                    if(this.props.Login.sqlQuery) {\r\n                        const databaseSQLQuery = jsonSql.build({\r\n                            type: 'select',\r\n                            table: selectedRecord[\"stablename_0\"].value,\r\n                            condition: databaseCondition\r\n                        });\r\n                        const displaySQLQuery = jsonSql.build({\r\n                            type: 'select',\r\n                            table: selectedRecord[\"stablename_0\"].label,\r\n                            condition: displayCondition\r\n                        });\r\n                        selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n                        selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n                    } else {\r\n                        const databaseSQLQuery = jsonSql.build({\r\n                            type: 'select',\r\n                            table: selectedRecord[\"sviewname\"].value,\r\n                            condition: databaseCondition\r\n                        });\r\n                        const displaySQLQuery = jsonSql.build({\r\n                            type: 'select',\r\n                            table: selectedRecord[\"sviewname\"].label,\r\n                            condition: displayCondition\r\n                        });\r\n                        // jsonSql = jsonSql.setSeparatedValues(true);\r\n                        selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n                        selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n                    }                    \r\n                    this.setState({ selectedRecord });\r\n                } else {\r\n\r\n                }\r\n            });\r\n        }\r\n       \r\n    }\r\n    \r\n    onConditionClick = (fieldName, index) => {\r\n        let { selectedRecord } = this.state;\r\n        if(fieldName === `button_and_${index}`) {\r\n            selectedRecord[fieldName] = selectedRecord[fieldName]===true? false:true;\r\n            selectedRecord[`button_or_${index}`] = false;\r\n        } else if(fieldName === `button_or_${index}`) {\r\n            selectedRecord[fieldName] = selectedRecord[fieldName]===true? false:true;\r\n            selectedRecord[`button_and_${index}`] = false;\r\n        } else {\r\n\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onQueryTypeOnclick = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sqlQuery: !this.state.sqlQuery }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    getValidationForEdit = (screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) => {\r\n        rsapi.post(\"sqlquery/getValidationForEdit\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                if (response.data === \"IDS_SUCCESS\") {\r\n                    this.props.getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode)\r\n                }\r\n                else if (response.data === \"IDS_QUERYUSEDINDASHBOARD\") {\r\n                    this.confirmAlertForEdit(ncontrolCode)\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: response.data }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n\r\n    confirmAlertForEdit = (editId) => {\r\n        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_QUERYUSEDINDASHBOARD\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            // () => this.performBatchAction(), \r\n            () => this.props.getSQLQueryComboService(this.state.queryTypeName,\r\n                \"update\", \"nsqlquerycode\",\r\n                this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n                this.props.Login.masterData, this.props.Login.userInfo,\r\n                //this.state.selectedcombo[\"nquerytypecode\"].value, \r\n                this.props.Login.masterData.SelectedQueryType.nquerytypecode, editId),\r\n            undefined,\r\n            () => this.closeAlert()\r\n        );\r\n    }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlertForEdit: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        //    const inputParam = {\r\n        //        inputData: { \"userinfo\": this.props.Login.userInfo, \r\n        //                    nquerytypecode:this.state.selectedRecord[\"nquerytypecode\"] ? \r\n        //                                   this.state.selectedRecord[\"nquerytypecode\"].value : 0\r\n        //                 },        \r\n        //        userInfo: this.props.Login.userInfo,\r\n        //        classUrl: \"sqlquery\",\r\n        //        methodUrl: \"SQLQuery\",\r\n        //        displayName: \"IDS_SQLBUILDER\",\r\n        //    };\r\n        //this.props.callService(inputParam);\r\n        const nquerytypecode = this.state.selectedRecord[\"nquerytypecode\"] ?\r\n            this.state.selectedRecord[\"nquerytypecode\"].value : this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"ncharttypecode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            if (fieldName === \"ntabletypecode\" || fieldName === \"nformcode\") {\r\n                const selectedTableType = this.state.selectedTableType || {};\r\n                selectedTableType[fieldName] = comboData;\r\n\r\n                this.setState({ selectedTableType });\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                //  this.state.ntableTypeCode=comboData.value;\r\n                if (fieldName === \"ntabletypecode\") {\r\n                    if (comboData.value === tableType.ALL) {\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, 0)\r\n                    }\r\n                    else {\r\n                        const updateInfor = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                tableName: []\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfor);\r\n                        this.setState({ moduleFormName: [] })\r\n                        selectedRecord[\"nformcode\"] = \"\";\r\n                        this.props.getModuleFormName(comboData.value, this.props.Login.userInfo)\r\n                    }\r\n\r\n                }\r\n                if (fieldName === \"nformcode\") {\r\n\r\n                    selectedRecord[fieldName] = comboData;\r\n\r\n                    this.setState({ selectedRecord });\r\n                    //this.state.nFormCode=comboData.value;\r\n                    //this.getTablesName(selectedRecord[\"ntabletypecode\"].value ,selectedRecord[\"nformcode\"].value)\r\n                    this.props.getTablesName(selectedTableType[\"ntabletypecode\"].value, selectedRecord[\"nformcode\"].value)\r\n                }\r\n            }\r\n            else {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n\r\n                this.setState({ selectedcombo });\r\n            }\r\n            if (fieldName === \"nquerytypecode\") {\r\n                this.searchRef.current.value = \"\";\r\n                // this.props.comboChangeQueryType(comboData.value, this.props.Login.masterData, this.props.Login.userInfo);\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord: selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getTablesName(selectedRecord) {\r\n        return function (dispatch) {\r\n            const url = \"sqlquery/getTablesFromSchema\";\r\n\r\n            rsapi.post(url, { \"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value), \"moduleformcode\": parseInt(selectedRecord[\"nformcode\"].value), \"userinfo\": this.props.Login.userInfo })\r\n                .then(response => {\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            tableList: response[0].data[0] || [],\r\n                            tableName: tableNameOnly || []\r\n\r\n                        }\r\n                    });\r\n                    //this.setState({ tableList: response[0].data[0] || [], tableName: tableNameOnly || []})\r\n\r\n                })\r\n                .catch(error => {\r\n\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    getModuleFormName(TableTypeCode) {\r\n\r\n        const url = \"sqlquery/getModuleFormName\";\r\n\r\n        rsapi.post(url, { \"tabletypecode\": parseInt(TableTypeCode), \"userinfo\": this.props.Login.userInfo })\r\n            .then(response => {\r\n                this.setState({ moduleFormName: response.data[0] });\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showExecute = this.props.Login.showExecute;\r\n        let showParam = this.props.Login.showParam;\r\n        let showValidate = this.props.Login.showValidate;\r\n        let showSave = this.props.Login.showSave;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let slideOperation = this.props.Login.slideOperation;\r\n        let parentPopUpSize = this.props.Login.parentPopUpSize;\r\n        let resultStatus = this.props.Login.resultStatus;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                if (this.state.param.size > 0) {\r\n                    showExecute = true;\r\n                    showSave = true;\r\n                }\r\n                else {\r\n                    showExecute = false;\r\n                    showSave = false;\r\n                }\r\n                parentPopUpSize = \"xl\"\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.screenName === \"Parameter for Results\" || this.props.Login.screenName === \"Results\") {\r\n                if (this.props.Login.screenFlag === \"showQuery\") {\r\n                    openModal = true;\r\n\r\n                    let queryTypeCode = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n                    if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSDASHBOARDQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSALERTQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSBARCODEQUERY\" });\r\n                    }\r\n                    else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSGENERALQUERY\" });\r\n                    }\r\n                    else {\r\n                        screenName = this.props.intl.formatMessage({ id: \"IDS_LIMSFILTERQUERY\" });\r\n                    }\r\n                    showSave = false;\r\n                }\r\n                else {\r\n                    selectedRecord = {};\r\n                    openModal = false;\r\n                    showExecute = false;\r\n                }\r\n\r\n                showParam = false;\r\n                showValidate = true;\r\n                operation = slideOperation;\r\n                slideOperation = \"\";\r\n                resultStatus = \"\";\r\n            }\r\n            else {\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                showExecute = false;\r\n            }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, showExecute,\r\n                showParam, operation, screenName, showSave, showValidate,\r\n                parentPopUpSize, resultStatus, showConfirmAlertForEdit: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    upDateComboboxValue = i => Value => {\r\n        if (Value != null) {\r\n\r\n            // let parameters = [...this.state.parameters]\r\n            // parameters[i].textValue = Value\r\n            // this.setState({\r\n            //     parameters: parameters\r\n            // })\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            paramMap.get(i).textValue = Value;\r\n            this.setState({ param: paramMap })\r\n\r\n        }\r\n    }\r\n\r\n    handleDateChange = i => date => {\r\n\r\n        // let parameters = [...this.state.parameters]\r\n        // parameters[i].Datetime = date\r\n\r\n        // this.setState({\r\n        //     parameters: parameters\r\n        // })\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(i).Datetime = date;\r\n        this.setState({ param: paramMap })\r\n    }\r\n\r\n    handleText = i => event => {\r\n        //let parameters = [...this.state.parameters];\r\n        //parameters[i].textValue = e.target.value;\r\n        //this.setState({parameters: parameters});\r\n        // console.log(parameters)\r\n        const paramMap = this.state.param || new Map();\r\n        paramMap.get(event.target.name).textValue = event.target.value;\r\n        this.setState({ param: paramMap })\r\n\r\n    }\r\n\r\n    onDrop(data) {\r\n        let { selectedRecord } = this.state;\r\n        let sqlquery = selectedRecord.ssqlquery ? selectedRecord.ssqlquery : \"\";\r\n\r\n        selectedRecord.ssqlquery = data.dragtable ? `${sqlquery} ${data.dragtable}` : `${sqlquery} ${data.dragcolumn}`\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    executeQuery = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const sqlQuery = selectedRecord.ssqlquery;\r\n        if (sqlQuery.length > 10) {\r\n            if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DELETE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('CREATE') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n            }\r\n            else {\r\n                if (sqlQuery.indexOf('P$') > 0) {\r\n                    let newQuery = sqlQuery;\r\n\r\n                    const paramMap = new Map();\r\n                    while (newQuery.indexOf(\"P$\") !== -1) {\r\n                        const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                        const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                        const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                        if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                            let displayName = \"\";\r\n                            let localParam = \"\";\r\n                            let tableName = \"\";\r\n\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n                            else {\r\n                                localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                // tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                            }\r\n\r\n                            if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date(),\r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                    value: 'TextBox1', lableName: localParam,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: tableName,\r\n                                    DisplayParam: displayName,\r\n                                    actuallableName: localParam.substring(1, localParam.length)\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                            if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'DateTimePicker',\r\n                                    lableName: paramLabel,\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                    //ID: param.length, \r\n                                    Datetime: new Date()\r\n                                })\r\n                            }\r\n                            else {\r\n                                paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                    value: 'TextBox1', lableName: paramLabel,\r\n                                    //ID: param.length, \r\n                                    textValue: '',\r\n                                    TableName: \"\",\r\n                                    DisplayParam: \"\",\r\n                                    actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN, data: {\r\n\r\n                            screenName: \"Parameter for Results\",\r\n                            openModal: true,\r\n                            showExecute: true,\r\n                            showParam: true,\r\n                            showValidate: false,\r\n                            showSave: false,\r\n                            operation: \"create\",\r\n                            slideOperation: \"\",\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            screenFlag: \"showParam\",\r\n                            param: paramMap,\r\n                            //param: param, Dparam: Dparam, TBLName: TBLName,\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    //query without parameters      \r\n                    const inputParam = {\r\n\r\n                        query: selectedRecord.ssqlquery.trim(),\r\n                        screenName: \"Results\",\r\n                        openModal: true,\r\n                        showExecute: false,\r\n                        showParam: true,\r\n                        showValidate: false,\r\n                        showSave: false,\r\n                        noSave: true,\r\n                        operation: \"view\",\r\n                        slideOperation: \"\",\r\n                        slideResult: [],\r\n                        slideList: [],\r\n                        //screenFlag: \"showParam\",\r\n                        screenFlag: \"NoParam\",\r\n                        parentPopUpSize: \"xl\",\r\n\r\n                        param: new Map(),\r\n\r\n                    }\r\n                    this.props.executeUserQuery(inputParam);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (methodUrl, selectedRecord, operation, ncontrolCode) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\",\r\n            primaryKeyField: \"nsqlquerycode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedSQLQuery.nsqlquerycode,\r\n            fetchUrl: \"sqlquery/getSQLQuery\",\r\n            fecthInputObject: { userInfo: this.props.Login.userInfo },\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl, postParam,\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"sqlquery\": this.props.Login.masterData.SelectedSQLQuery\r\n            },\r\n            operation\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"sqlquery\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onExecuteClick = () => {\r\n        // let paramVal;\r\n        let tempQuery = \"\";\r\n        let paramFlag = true;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenName === \"Parameter for Results\" && this.state.param.size > 0) {\r\n            if (selectedRecord != null && selectedRecord.ssqlquery != null && selectedRecord.ssqlquery.length > 0) {\r\n                tempQuery = selectedRecord.ssqlquery;\r\n            }\r\n            else {\r\n                tempQuery = this.props.Login.masterData.SelectedSQLQuery.ssqlquery;\r\n            }\r\n\r\n            const paramMap = this.state.param || new Map();\r\n            for (let parameterMap of paramMap.entries()) {\r\n                const parameter = parameterMap[0];\r\n                const parameterDetail = parameterMap[1];\r\n                let paramVal = \"\";\r\n                //console.log(\"para detail:\", parameterDetail);\r\n\r\n                if (parameterDetail.lableName.toUpperCase().startsWith('D')) {\r\n                    if (parameterDetail.Datetime !== null) {\r\n                        paramVal = parameterDetail.Datetime.getFullYear() + \"-\";\r\n                        if (parameterDetail.Datetime.getMonth().toString().length > 1) {\r\n                            paramVal = paramVal + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parseInt(parameterDetail.Datetime.getMonth() + 1) + \"-\";\r\n                        }\r\n                        if (parameterDetail.Datetime.getDate().toString().length > 1) {\r\n                            paramVal = paramVal + parameterDetail.Datetime.getDate();\r\n                        }\r\n                        else {\r\n                            paramVal = paramVal + \"0\" + parameterDetail.Datetime.getDate();\r\n                        }\r\n                    }\r\n                    if (paramVal === undefined) {\r\n                        paramFlag = false;\r\n                        tempQuery = tempQuery.replaceAll(parameter, null);\r\n                    }\r\n                    else if (paramVal.trim().length > 0) {\r\n                        //tempQuery = tempQuery.replace(parameter, \"P#\" + paramVal + \"$P\");\r\n                        tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    paramVal = parameterDetail.textValue;\r\n                    if (paramVal !== \"\") {\r\n                        if (parameterDetail.lableName.toUpperCase().startsWith('S')) {\r\n\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName\r\n                                    + '$P', \"'\" + paramVal + \"'\");\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, \"'\" + paramVal + \"'\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'D$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'D$' + parameterDetail.DisplayParam.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else if (tempQuery.indexOf(parameterDetail.lableName.trim() + 'T$') > 0) {\r\n                                tempQuery = tempQuery.replaceAll('P$' + parameterDetail.lableName.trim()\r\n                                    + 'T$' + parameterDetail.TableName + '$P', paramVal);\r\n                            }\r\n                            else {\r\n                                tempQuery = tempQuery.replaceAll(parameter, paramVal);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        paramFlag = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (paramFlag === true) {\r\n                //console.log(\"temp:\", tempQuery);\r\n                const inputParam = {\r\n                    slideOperation: this.props.Login.slideOperation,\r\n                    screenFlag: this.props.Login.screenFlag,\r\n                    query: tempQuery.trim(),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    data: {}\r\n                }\r\n                this.props.executeUserQuery(inputParam);\r\n\r\n                //this.props.executeUserQuery(tempQuery.trim(), this.props.Login.screenFlag, this.props.Login.slideOperation, this.props.Login.userInfo);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERPAREMETRS\" }));\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (selectedRecord.ssqlquery !== null && selectedRecord.ssqlquery.length > 0) {\r\n                const sqlQuery = selectedRecord.ssqlquery;\r\n                if (sqlQuery.toUpperCase().indexOf('INSERT') >= 0 || sqlQuery.toUpperCase().indexOf('UPDATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DELETE') >= 0 || sqlQuery.toUpperCase().indexOf('TRUNCATE') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('CREATE') >= 0 || sqlQuery.toUpperCase().indexOf('ALTER') >= 0\r\n                    || sqlQuery.toUpperCase().indexOf('DROP') >= 0) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTDATAMANIPULATION\" }));\r\n                }\r\n                else {\r\n                    if (sqlQuery.indexOf('P$') > 0) {\r\n                        let newQuery = sqlQuery;\r\n\r\n                        const paramMap = new Map();\r\n                        while (newQuery.indexOf(\"P$\") !== -1) {\r\n                            const paramLabelStartIndex = newQuery.indexOf(\"P$\");\r\n                            const paramLabelEndIndex = newQuery.indexOf(\"$P\");\r\n\r\n                            const paramLabel = newQuery.substring(paramLabelStartIndex + 2, paramLabelEndIndex);\r\n\r\n                            if (paramLabel.indexOf(\"T$\") !== -1) {\r\n                                let displayName = \"\";\r\n                                let localParam = \"\";\r\n                                let tableName = \"\";\r\n\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.indexOf(\"D$\") !== -1) {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('D$'));\r\n                                    displayName = paramLabel.substring(paramLabel.indexOf('D$') + 2, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n                                else {\r\n                                    localParam = paramLabel.substring(0, paramLabel.indexOf('T$'));\r\n                                    //tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.indexOf('$P'));\r\n                                    tableName = paramLabel.substring(paramLabel.indexOf('T$') + 2, paramLabel.length);\r\n                                }\r\n\r\n                                if (localParam.startsWith('d') || localParam.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date(),\r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + localParam + \"$P\", {\r\n                                        value: 'TextBox1', lableName: localParam,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: tableName,\r\n                                        DisplayParam: displayName,\r\n                                        actuallableName: localParam.substring(1, localParam.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                newQuery = newQuery.substring(paramLabelEndIndex + 2, newQuery.length);\r\n\r\n                                if (paramLabel.startsWith('d') || paramLabel.startsWith('D')) {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'DateTimePicker',\r\n                                        lableName: paramLabel,\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length),\r\n                                        //ID: param.length, \r\n                                        Datetime: new Date()\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    paramMap.set(\"P$\" + paramLabel + \"$P\", {\r\n                                        value: 'TextBox1', lableName: paramLabel,\r\n                                        //ID: param.length, \r\n                                        textValue: '',\r\n                                        TableName: \"\",\r\n                                        DisplayParam: \"\",\r\n                                        actuallableName: paramLabel.substring(1, paramLabel.length)\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN, data: {\r\n                                screenName: \"Parameter for Results\",\r\n                                showExecute: true,\r\n                                showSave: true,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                slideOperation: this.props.Login.operation,\r\n                                slideResult: [],\r\n                                slideList: [],\r\n                                screenFlag: \"showQuery\",\r\n                                param: paramMap,\r\n                                // Dparam: Dparam, TBLName: TBLName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        //query without parameters      \r\n                        const inputParam = {\r\n                            screenName: \"Results\",\r\n                            query: selectedRecord.ssqlquery.trim(),\r\n                            userInfo: this.props.Login.userInfo,\r\n                            slideOperation: this.props.Login.operation,\r\n                            screenFlag: \"showQuery\",\r\n                            data: {\r\n                                showExecute: false,\r\n                                showSave: false,\r\n                                showParam: true,\r\n                                showValidate: false,\r\n                                noSave: false,\r\n                                operation: \"view\",\r\n                                param: new Map(),\r\n                                screenName: \"Results\",\r\n                                slideOperation: this.props.Login.operation,\r\n                                screenFlag: \"showQuery\"\r\n                            }\r\n\r\n                        }\r\n                        this.props.executeUserQuery(inputParam);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.resultStatus === \"Success\") {\r\n            let operation = this.props.Login.operation;\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let postParam = undefined;\r\n            if (operation === \"update\"\r\n                || (operation === \"view\" && this.props.Login.slideOperation !== \"create\")) {\r\n                // edit\r\n                operation = \"update\";\r\n                postParam = { inputListName: \"SQLQuery\", selectedObject: \"SelectedSQLQuery\", primaryKeyField: \"nsqlquerycode\" };\r\n                let selectedRecord = { ...this.state.selectedRecord };\r\n                delete selectedRecord.nformcode;\r\n                inputData[\"sqlquery\"] = selectedRecord\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                })\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"sqlquery\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                operation = \"create\";\r\n                this.queryFieldList.map(item => {\r\n                    return inputData[\"sqlquery\"][item] = this.state.selectedRecord[item]\r\n                });\r\n            }\r\n            if (inputData[\"sqlquery\"].hasOwnProperty('esignpassword')) {\r\n                if (inputData[\"sqlquery\"]['esignpassword'] === '') {\r\n                    delete inputData[\"sqlquery\"]['esigncomments']\r\n                    delete inputData[\"sqlquery\"]['esignpassword']\r\n                    delete inputData[\"sqlquery\"]['agree']\r\n                }\r\n            }\r\n            inputData[\"sqlquery\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : \"-1\";\r\n            inputData[\"sqlquery\"][\"nquerytypecode\"] = this.props.Login.masterData.SelectedQueryType.nquerytypecode;\r\n            ///code removed\r\n            const inputParam = {\r\n                classUrl: \"sqlquery\",\r\n                methodUrl: \"SQLQuery\",\r\n                inputData: inputData,\r\n                operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, parentPopUpSize: \"lg\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_INAVLIDDATA\" }));\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"sqlquery\",\r\n        //     methodUrl: \"SQLQuery\",\r\n        //     displayName: \"IDS_SQLBUILDER\",\r\n        //     userInfo: this.props.Login.userInfo\r\n        // };\r\n        // this.props.callService(inputParam);\r\n\r\n        let nquerytypecode = this.props.Login.masterData.SelectedQueryType ?\r\n            this.props.Login.masterData.SelectedQueryType.nquerytypecode : 0;\r\n        this.props.comboChangeQueryType(nquerytypecode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { selectedRecord, dataStateUserQuery, userRoleControlRights, controlMap, filterData, queryType,\r\n            chartList, moduleFormName, tableType, selectedTableType, param, tableColumnList, selectedTableList,\r\n            foreignTableCount, foreignTableList, count, sqlQuery } = this.state;\r\n        let updateState = false;\r\n        // const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        \r\n        if (this.props.Login.sqlQuery !== previousProps.Login.sqlQuery) {\r\n            updateState = true;\r\n            sqlQuery = this.props.Login.sqlQuery;\r\n        }\r\n\r\n        if (this.props.Login.tableColumnList !== previousProps.Login.tableColumnList) {\r\n            updateState = true;\r\n            tableColumnList = this.props.Login.tableColumnList;\r\n        }\r\n\r\n        if (this.props.Login.slideResult !== previousProps.Login.slideResult) {\r\n            dataStateUserQuery = {\r\n                skip: 0,\r\n                take: 10,\r\n            };\r\n            updateState = true;\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRight = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRight.push(item.ncontrolcode))\r\n            }\r\n            const controlMap1 = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            // if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n            const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n            const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n            // const selectedcombo = {\r\n            //     nquerytypecode: QueryTypeList.length > 0 ? {\r\n            //         \"value\": QueryTypeList[0].item.nquerytypecode,\r\n            //         \"label\": QueryTypeList[0].item.squerytypename\r\n            //     } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n            // }\r\n\r\n            // }\r\n            updateState = true;\r\n            userRoleControlRights = userRoleControlRight;\r\n            controlMap = controlMap1;\r\n            filterData = this.generateBreadCrumData();\r\n            queryType = QueryTypeList;\r\n        }\r\n        else {\r\n            filterData = this.generateBreadCrumData();\r\n            if (this.props.Login.chartList !== previousProps.Login.chartList || this.props.Login.moduleFormName !== previousProps.Login.moduleFormName) {\r\n\r\n                const chartListMap = constructOptionList(this.props.Login.chartList || [], \"ncharttypecode\",\r\n                    \"schartname\", undefined, undefined, undefined);\r\n                const chartTypeList = chartListMap.get(\"OptionList\");\r\n\r\n                const moduleFormNameMap = constructOptionList(this.props.Login.moduleFormName || [], \"nformcode\",\r\n                    \"sformname\", undefined, undefined, undefined);\r\n                const moduleFormNameList = moduleFormNameMap.get(\"OptionList\");\r\n                updateState = true;\r\n                chartList = chartTypeList\r\n                moduleFormName = moduleFormNameList\r\n            }\r\n            if (this.props.Login.masterData.QueryType !== previousProps.Login.masterData.QueryType) {\r\n                const queryTypeMap = constructOptionList(this.props.Login.masterData.QueryType || [], \"nquerytypecode\",\r\n                    \"squerytypename\", \"nsorter\", \"ascending\", false);\r\n                const QueryTypeList = queryTypeMap.get(\"OptionList\");\r\n\r\n                // const selectedcombo = {\r\n                //                         nquerytypecode: QueryTypeList.length > 0 ? {\r\n                //                             \"value\": QueryTypeList[0].item.nquerytypecode,\r\n                //                             \"label\": QueryTypeList[0].item.squerytypename\r\n                //                         } : this.state.selectedcombo[\"nquerytypecode\"]\r\n\r\n                //}\r\n\r\n                updateState = true;\r\n                queryType = QueryTypeList //selectedcombo , \r\n\r\n\r\n            }\r\n            if (this.props.Login.tableType !== previousProps.Login.tableType) {\r\n                const tableTypeMap = constructOptionList(this.props.Login.tableType || [], \"ntabletypecode\",\r\n                    \"stabletype\", undefined, undefined, undefined);\r\n                const tableTypeList = tableTypeMap.get(\"OptionList\");\r\n\r\n                selectedTableType = {\r\n                    ntabletypecode: tableTypeList.length > 0 ? {\r\n                        \"value\": tableTypeList[0].item.ntabletypecode,\r\n                        \"label\": tableTypeList[0].item.stabletype\r\n                    } : this.state.selectedTableType[\"ntabletypecode\"]\r\n\r\n                }\r\n                updateState = true;\r\n                tableType = tableTypeList\r\n\r\n            }\r\n            if (this.props.Login.masterData.SelectedQueryType !== previousProps.Login.masterData.SelectedQueryType) {\r\n                updateState = true;\r\n            }\r\n            if (this.props.Login.param !== previousProps.Login.param) {\r\n                updateState = true;\r\n                param = this.props.Login.param\r\n            }\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, dataStateUserQuery, userRoleControlRights, controlMap, filterData, queryType,\r\n                chartList, moduleFormName, tableType, selectedTableType, param, tableColumnList, selectedTableList,\r\n                foreignTableCount, foreignTableList, count, sqlQuery\r\n            })\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedQueryType) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedQueryType ?\r\n                        this.props.Login.masterData.SelectedQueryType.squerytypename : \"\"\r\n                    //this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedQueryType.squerytypename}) : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType,\r\n    executeUserQuery, comboColumnValues, getColumnNamesByTableName,\r\n    getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable, \r\n    getViewColumns, getMasterData\r\n})(injectIntl(SQLBuilder));"]},"metadata":{},"sourceType":"module"}