{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays } from '../components/CommonScript';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\nimport { intl } from '../components/App';\nexport function getReactInputFields(userinfo, operation, respObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", {\n      userinfo\n    });\n    listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\n          ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\n          staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          showFilter: false,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      userinfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: [{\n            \"label\": \"IDS_SAMPLETYPE\",\n            \"value\": selectedSampleType.label,\n            \"item\": selectedSampleType\n          }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\n        let jsonData = response.data.jsondata;\n        sortData(masterData);\n        const respObj = {\n          masterData,\n          ncontrolcode: editId,\n          openPortal: true,\n          loading: false,\n          openModal: false,\n          design: jsonData,\n          selectedRecord: {\n            templateName: response.data.sregtemplatename\n          }\n        }; // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         masterData,\n        //         ncontrolcode: editId,\n        //         // openPortal: true,\n        //         // loading: false,\n        //         design: jsonData,\n        //         selectedRecord: { templateName: response.data.sregtemplatename }\n        //     }\n        // })\n\n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      return JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      \"nquerybuildertablecode\": stablename || 0,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      let filterColumns = [];\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"dynamic\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"dynamic\",\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      filterColumns = [...comboData];\n      numericColumns.map(item => {\n        filterColumns.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"numeric\",\n          item\n        });\n      });\n\n      if (defaultColumn.item && defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined || componentData.components === undefined) {\n        componentData = componentData || {};\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            filterfields: [{\n              type: defaultColumn.type,\n              ...defaultColumn.item\n            }],\n            customsearchfilter: [defaultColumn],\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        } else {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            column: defaultColumn,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        }\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        let parentRadioValue = [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        componentData = { ...componentData,\n          validComponents,\n          parentRadioValue\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData,\n          filterColumns\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          filterColumns,\n          columnInfo,\n          primaryKeyName,\n          ...componentData,\n          showFilter: showFilter\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    let parentcolumnlist = [{\n      source: selectedFieldRecord.filtercolumn.item.foriegntablename,\n      valuemember: selectedFieldRecord.filtercolumn.item.tablecolumnname,\n      displaymember: selectedFieldRecord.filtercolumn.item.columnname,\n      conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\n      label: \"filterData\",\n      inputtype: \"combo\",\n      isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\n    }];\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist,\n      userinfo\n    }).then(response => {\n      let comboData = [];\n      let selectedRecord = {};\n      const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (updateComponents) {\n        componentData = componentData || {}; // selectedFieldRecord = { ...selectedFieldRecord };\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          masterDataValue: comboData,\n          columnInfo,\n          ...componentData,\n          ...comboData1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList ? columnList : [],\n      childcolumnlist: childColumnList ? childColumnList : [],\n      userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService, dateService, currentDate]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          //  if (componentrow.mandatory) {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n\n            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n              const Age = withoutCombocomponent.filter(item => item.name === \"Age\");\n              selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label]);\n            }\n\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          } // }else{\n          //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          // }\n          // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation: \"preview\" // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = selectedRecord1[Instrument[0].label] && selectedRecord1[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName // loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] && selectedRecord1[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label].value;\n                const ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === 3) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName // loadPreregister:true\n\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = selectedRecord1[Material[0].label] && selectedRecord1[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName // loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    } else {\n                      mapOfFilterRegData['nproductcode'] = -1;\n                      mapOfFilterRegData['nproductcatcode'] = -1;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName //loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    }\n                  }\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              } else {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName //loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              }\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n\n          if (dateComp[0].label !== undefined) {\n            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\n            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\n            selectedRecord1[ageComp[0].label] = age;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const project = comboComponents.filter(x => x.name === 'Project Code');\n          let nprojectMasterCode = -1;\n\n          if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\n            nprojectMasterCode = selectedRecord1[project[0].label] && selectedRecord1[project[0].label].value;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        }\n      }\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData, instrumentCategory, instrument, materialCategory, material, materialType, subsample, project) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (subsample) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            SubSamplecomboData: { ...returnObj.comboData\n            },\n            selectComponent: selectedRecord,\n            screenName: inputParem.screenName\n          }\n        });\n      } else if (project) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (productCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: {}\n            }\n          });\n        }\n      } else if (instrumentCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (materialCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (instrument) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: {},\n              addMaster: false\n            }\n          });\n        }\n      } else if (material) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: {},\n              addMaster: false\n            }\n          });\n        }\n      } else if (materialType) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\n          const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] : undefined; //  mapOfRegFilterData[\"nproductcatcode\"]\n\n          if (productCategory !== undefined) {\n            if (productCategory.item.ncategorybasedflow === 3) {\n              mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n              mapOfRegFilterData[\"nproductcode\"] = -1;\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n              if (product !== undefined) {\n                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                mapOfRegFilterData[\"nproductcode\"] = product.value;\n                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                }));\n              } else {\n                const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n                if (product !== undefined) {\n                  mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                  mapOfRegFilterData[\"nproductcode\"] = product.value;\n                  dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                  }));\n                } else {\n                  selectedRecord[\"nallottedspeccode\"] = \"\";\n                  selectedRecord[\"sversion\"] = \"\";\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false,\n                      comboData: { ...returnObj.comboData\n                      },\n                      selectedRecord,\n                      AgaramTree: [],\n                      ActiveKey: [],\n                      FocusKey: [],\n                      OpenNodes: [],\n                      Test: [],\n                      SelectedTest: [],\n                      selectedSpec: {},\n                      Component: [],\n                      selectComponent: {},\n                      selectedComponent: {},\n                      Specification: [],\n                      selectedMaster: {},\n                      addMaster: false\n                    }\n                  });\n                }\n              }\n            }\n          } else {\n            selectedRecord[\"nallottedspeccode\"] = \"\";\n            selectedRecord[\"sversion\"] = \"\";\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                AgaramTree: [],\n                ActiveKey: [],\n                FocusKey: [],\n                OpenNodes: [],\n                Test: [],\n                SelectedTest: [],\n                selectedSpec: {},\n                Component: [],\n                selectComponent: {},\n                selectedComponent: {},\n                Specification: [],\n                selectedMaster: {},\n                addMaster: false\n              }\n            });\n          }\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: {},\n              addMaster: false\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            comboData: { ...returnObj.comboData\n            },\n            selectedRecord,\n            selectedMaster: {},\n            addMaster: false,\n            screenName: inputParem.screenName\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validatePreview(inputParam) {\n  return function (dispatch) {\n    rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam\n    }).then(response => {\n      if (response.data.rtn === \"Success\") {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SUCCESSFULLYVALIDATE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addMasterRecord(inputParam) {\n  return function (dispatch) {\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        let data = [];\n        const data1 = sortData(response.data);\n\n        if (inputParam.selectedControl.table.item.component === 'Dynamic') {\n          data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\");\n        } else if (inputParam.selectedControl.table.item.nformcode === 137) {\n          data = constructOptionList(data1.PatientList, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\");\n        } else {\n          data = constructOptionList(data1, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\");\n        }\n\n        const newdata = data.map((item1, index) => {\n          item1 = { ...item1,\n            item: {\n              jsondata: { ...item1.item,\n                jsondata: { ...item1.item\n                }\n              }\n            }\n          };\n          return item1;\n        });\n        const selectedRecord = inputParam.selectedRecord || {};\n        const selectedControl = inputParam.selectedControl || {};\n        const comboData1 = { ...newdata[0],\n          item: { ...newdata[0].item,\n            \"pkey\": selectedControl.valuemember,\n            \"nquerybuildertablecode\": selectedControl.nquerybuildertablecode,\n            \"source\": selectedControl.source\n          }\n        };\n        selectedRecord[selectedControl.label] = comboData1;\n        const comboData = inputParam.comboData;\n        comboData[selectedControl.label] = newdata;\n\n        if (selectedControl.child && selectedControl.child.length > 0) {\n          const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl.child, \"label\");\n          let childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n          });\n          const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl.child, \"label\");\n          const inputParem = {\n            child: selectedControl.child,\n            source: selectedControl.source,\n            primarykeyField: selectedControl.valuemember,\n            value: comboData1.value,\n            item: comboData1.item,\n            screenName: inputParam.screenName\n          };\n\n          if (inputParam.loadSubSample) {\n            dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, {}, false, false, false, false, false, true, false));\n          } else {\n            dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList]));\n          }\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              addMaster: false,\n              [inputParam.comboName]: comboData,\n              selectedMaster: {},\n              [inputParam.selectedRecordName]: selectedRecord,\n              screenName: inputParam.screenName\n            }\n          });\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    inputParam.masterComboColumnFiled.map(item => {\n      if (item.needService === undefined) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo\n        }));\n      }\n    });\n\n    if (inputParam.selectedControl.table.item.nformcode === 137) {\n      urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: inputParam.userinfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let masterdataList = [];\n      inputParam.masterComboColumnFiled.map((item, index) => {\n        if (item.needService === undefined) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n        } else {\n          if (item.child !== undefined) {\n            masterdataList[item.dataField] = [];\n          } else if (item.useService !== undefined) {\n            masterdataList[item.dataField] = masterdataList[inputParam.masterComboColumnFiled[item.useService].dataField];\n          }\n        }\n      });\n      let currentTime = '';\n      const selectedMaster = {};\n\n      if (inputParam.selectedControl.table.item.nformcode === 137) {\n        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n        selectedMaster[\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedMaster[\"today\"] = inputParam.userinfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedMaster,\n          masterdataList,\n          addMaster: true,\n          loading: false,\n          selectedControl: inputParam.selectedControl,\n          masterfieldList: inputParam.masterfieldList,\n          masterextractedColumnList: inputParam.masterextractedColumnList,\n          masterprimaryKeyField: inputParam.masterprimaryKeyField,\n          masterComboColumnFiled: inputParam.masterComboColumnFiled,\n          screenName: inputParam.selectedControl.displayname[inputParam.userinfo.slanguagetypecode]\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterTempalte(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.selectedControl.table.item.classUrl + \"/getMasterDesign\", {\n      userinfo: { ...inputParam.userinfo,\n        nformcode: inputParam.selectedControl.table.item.nformcode\n      }\n    }).then(response => {\n      const design = response.data;\n      const masterwithoutCombocomponent = [];\n      let data = [];\n      const masterextractedColumnList = [];\n      design.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  masterwithoutCombocomponent.push(componentrow);\n                }\n\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    masterextractedColumnList.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    masterextractedColumnList.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              });\n            } else {\n              component.inputtype === \"combo\" ? data.push(component) : masterwithoutCombocomponent.push(component);\n\n              if (component.mandatory === true) {\n                if (component.inputtype === \"email\") {\n                  masterextractedColumnList.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                } else {\n                  masterextractedColumnList.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      inputParam = { ...inputParam,\n        masterchildColumnList: childColumnList,\n        mastercomboComponents: comboComponents,\n        masterextractedColumnList,\n        masterwithoutCombocomponent,\n        masterDesign: design,\n        masterdesignData: data\n      };\n      dispatch(getDynamicMasterComboForAdd(inputParam, true)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         addMaster: true,\n      //         loading: false,\n      //         selectedControl: inputParam.selectedControl,\n      //         masterchildColumnList: childColumnList,\n      //         mastercomboComponents: comboComponents,\n      //         mastermandatoryFields,\n      //         masterwithoutCombocomponent,\n      //         masterDesign: design\n      //     }\n      // })\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: inputParam.masterdesignData,\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    let urlArray = [timeZoneService, actualService];\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      let selectedMaster = {};\n      const newcomboData = parentChildComboLoad(inputParam.masterdesignData, response[1].data, selectedMaster, inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent, undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo);\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      inputParam.masterwithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          }\n        } else if (componentrow.inputtype === \"radio\") {\n          selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n        }\n      });\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam,\n            mastertimeZoneList: timeZoneList,\n            masterdefaultTimeZone: defaultTimeZone,\n            loading: false,\n            addMaster: true,\n            masterdataList: comboData1,\n            selectedMaster: selectedRecord1,\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterdesignData: inputParam.masterdesignData,\n            masterchildColumnList: inputParam.masterchildColumnList,\n            screenName: inputParam.selectedControl.displayname[inputParam.userinfo.slanguagetypecode]\n          }\n        });\n      }\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValuesForAddMaster(inputParam, userinfo, selectedMaster, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParam.child,\n      parentdata: inputParam.item.jsondata,\n      parentsource: inputParam.source,\n      [inputParam.primarykeyField]: inputParam.value,\n      valuemember: inputParam.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster, childcolumnlist, withoutCombocomponent, inputParam, userinfo.slanguagetypecode, userinfo);\n      selectedMaster = { ...selectedMaster,\n        ...returnObj.selectedRecord\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterdataList: { ...returnObj.comboData\n          },\n          selectedMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildComboMaster(selectedMaster, filedName, item, selectedControl, masterComboColumnFiled, masterdataList, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const obj = masterComboColumnFiled[item.childIndex];\n    urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, {\n      [item.foreignDataField]: selectedMaster[item.tableDataField],\n      userinfo: userInfo\n    }));\n    Axios.all(urlArray).then(response => {\n      selectedMaster[obj.dataField] = undefined;\n      const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField, obj.foreignDisplayMember, undefined, undefined, undefined);\n      masterdataList[obj.dataField] = ComboFieldData.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedMaster,\n          masterdataList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","ageCalculate","comboChild","validateEmail","getSameRecordFromTwoArrays","getcomponentdata","getValidComponent","replaceChildFromChildren","designComponents","ReactComponents","SampleType","transactionStatus","Axios","getTreeByProduct","preRegDispatch","faShareAltSquare","intl","getReactInputFields","userinfo","operation","respObj","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","Period","get","ReactTables","tables","staticfiltertables","selectedFieldRecord","openModal","loading","openPortal","showFilter","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getRegistrationTemplate","selectedSampleType","nsampletypecode","value","searchedData","undefined","realSampleType","label","getEditRegTemplate","editId","ntransactionstatus","DRAFT","jsonData","jsondata","ncontrolcode","design","selectedRecord","templateName","sregtemplatename","masterStatus","getJsonValue","PGjsonData","Array","isArray","JSONData","map","push","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","filterColumns","item","displayname","slanguagetypecode","columnname","default","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","validComponents","filterfields","customsearchfilter","parentRadioValue","parentPath","oldParentData","split","hasOwnProperty","child","radioOptions","tags","id","text","tableColumn","optionalPayload","selectedComponentpath","join","getForeignTableData","parentcolumnlist","source","filtercolumn","foriegntablename","tablecolumnname","conditionstring","inputtype","isMultiLingual","newcomboData","comboData1","selectedRecord1","masterDataValue","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","timeZoneService","actualService","childcolumnlist","dateService","datecolumnlist","filter","x","currentDate","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","componentrow","loadcurrentdate","CLINICALTYPE","Age","name","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","PRODUCT","ProductCategory","length","nproductcatcode","ncategorybasedFlow","inputParam","Product","nproductcode","INSTRUMENT","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MATERIAL","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","dateComp","ageComp","age","PROJECTSAMPLETYPE","project","nprojectMasterCode","YES","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","instrumentCategory","instrument","materialCategory","material","materialType","subsample","parentdata","parentsource","primarykeyField","returnObj","SubSamplecomboData","selectComponent","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectedComponent","Specification","selectedMaster","InstrumentName","addMaster","MaterialName","MaterialCategoryName","ncategorybasedflow","validatePreview","rtn","info","formatMessage","showConfirmAlert","addMasterRecord","classUrl","methodUrl","inputData","success","data1","selectedControl","table","component","DynamicMasterData","nformcode","PatientList","newdata","item1","index","nquerybuildertablecode","childComboList","val","parentList","loadSubSample","comboName","selectedRecordName","getAddMasterCombo","urlArray","masterComboColumnFiled","needService","ComboFieldData","masterdataList","objectValue","foreignDataField","dataField","useService","currentTime","NO","masterfieldList","masterextractedColumnList","masterprimaryKeyField","getDynamicMasterTempalte","masterwithoutCombocomponent","slideoutdesign","row","children","mandatory","props","masterchildColumnList","mastercomboComponents","masterDesign","masterdesignData","getDynamicMasterComboForAdd","mastertimeZoneList","masterdefaultTimeZone","console","log","getChildValuesForAddMaster","getChildComboMaster","filedName","userInfo","obj","childIndex","tableDataField","foreignDisplayMember"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays } from '../components/CommonScript';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { designComponents, ReactComponents, SampleType, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct, preRegDispatch } from './RegistrationAction';\r\nimport { faShareAltSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", { userinfo })\r\n        listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\r\n                        staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        showFilter: false,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: [{\r\n                            \"label\": \"IDS_SAMPLETYPE\",\r\n                            \"value\": selectedSampleType.label,\r\n                            \"item\": selectedSampleType\r\n                        }],\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    let jsonData = response.data.jsondata;\r\n                    sortData(masterData)\r\n\r\n                    const respObj = {\r\n                        masterData,\r\n                        ncontrolcode: editId,\r\n                        openPortal: true,\r\n                        loading: false,\r\n                        openModal: false,\r\n                        design: jsonData,\r\n                        selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    }\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         masterData,\r\n                    //         ncontrolcode: editId,\r\n                    //         // openPortal: true,\r\n                    //         // loading: false,\r\n                    //         design: jsonData,\r\n                    //         selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    //     }\r\n                    // })\r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            return JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\nexport function getTableColumns(design, selectedFieldRecord, stablename,\r\n    userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { \"nquerybuildertablecode\": stablename || 0, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let filterColumns = [];\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"dynamic\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"dynamic\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                filterColumns = [...comboData];\r\n                numericColumns.map(item => {\r\n                    filterColumns.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"numeric\",\r\n                        item\r\n                    })\r\n                })\r\n                if (defaultColumn.item && defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined || componentData.components === undefined) {\r\n                    componentData = componentData || {}\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER\r\n                        || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, filterfields: [{ type: defaultColumn.type, ...defaultColumn.item }], customsearchfilter: [defaultColumn], displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    } else {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }\r\n\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    let parentRadioValue = []\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        if (selectedFieldRecord.parentPath) {\r\n                            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                            if (oldParentData.hasOwnProperty('child')) {\r\n                                oldParentData.child.map(item => {\r\n                                    if (item.label === selectedFieldRecord.label) {\r\n                                        parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                            return { value: item.id, label: item.text, item }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    componentData = { ...componentData, validComponents, parentRadioValue }\r\n                }\r\n\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData, filterColumns }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        filterColumns,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        ...componentData,\r\n                        showFilter: showFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        let parentcolumnlist = [{\r\n            source: selectedFieldRecord.filtercolumn.item.foriegntablename,\r\n            valuemember: selectedFieldRecord.filtercolumn.item.tablecolumnname,\r\n            displaymember: selectedFieldRecord.filtercolumn.item.columnname,\r\n            conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\r\n            label: \"filterData\",\r\n            inputtype: \"combo\",\r\n            isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\r\n        }]\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", { parentcolumnlist, userinfo })\r\n            .then(response => {\r\n                let comboData = [];\r\n                let selectedRecord = {};\r\n                const newcomboData = parentChildComboLoad(parentcolumnlist, response.data,\r\n                    selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    // selectedFieldRecord = { ...selectedFieldRecord };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        masterDataValue: comboData,\r\n                        columnInfo,\r\n                        ...componentData,\r\n                        ...comboData1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList ? columnList : [],\r\n            childcolumnlist: childColumnList ? childColumnList : [],\r\n            userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService, dateService, currentDate])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord,\r\n                    childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        //  if (componentrow.mandatory) {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                const Age = withoutCombocomponent.filter(item =>\r\n                                    item.name === \"Age\");\r\n                                selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label])\r\n                            }\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                        // }else{\r\n                        //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation: \"preview\"\r\n\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] &&\r\n                                selectedRecord1[InstrumentCategory[0].label].value\r\n                            const ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label]\r\n                                && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = selectedRecord1[Instrument[0].label]\r\n                                            && selectedRecord1[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    // loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] &&\r\n                                selectedRecord1[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] &&\r\n                                        selectedRecord1[MaterialCategory[0].label].value\r\n                                    const ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label]\r\n                                        && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === 3) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName,\r\n                                                // loadPreregister:true\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                selectedRecord1,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = selectedRecord1[Material[0].label]\r\n                                                    && selectedRecord1[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    // loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    //loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                } else {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = -1\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        //loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                        if (dateComp[0].label !== undefined) {\r\n                            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\r\n                            selectedRecord1[ageComp[0].label] = age;\r\n                        }\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n                    else   if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const project = comboComponents.filter(x => x.name === 'Project Code');\r\n                        let nprojectMasterCode = -1;\r\n                        if(project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES){\r\n                            nprojectMasterCode = selectedRecord1[project[0].label] &&\r\n                                                    selectedRecord1[project[0].label].value;\r\n                        }\r\n\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            const ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        }\r\n                         else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1;\r\n                            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } \r\n                    \r\n                }\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData,\r\n    instrumentCategory, instrument, materialCategory,\r\n    material, materialType, subsample, project) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata ,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (subsample) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            SubSamplecomboData: { ...returnObj.comboData },\r\n                            selectComponent: selectedRecord,\r\n                            screenName:inputParem.screenName\r\n                        }\r\n                    })\r\n                }\r\n                else if (project) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                } \r\n                else if (productCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                } \r\n                else if (product) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: {}\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (instrumentCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (materialCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (instrument) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ?\r\n                            inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument\" ? inputParem.label : inputParem.InstrumentName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: {},\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (material) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ?\r\n                            inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: {},\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (materialType) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\r\n                        const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                            inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                inputParem.MaterialCategoryName : inputParem.label] : undefined\r\n\r\n                        //  mapOfRegFilterData[\"nproductcatcode\"]\r\n                        if (productCategory !== undefined) {\r\n                            if (productCategory.item.ncategorybasedflow === 3) {\r\n                                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                mapOfRegFilterData[\"nproductcode\"] = -1\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                            } else {\r\n\r\n                                const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                    inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                        inputParem.MaterialName : inputParem.label] : undefined\r\n                                if (product !== undefined) {\r\n                                    mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                    mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                } else {\r\n\r\n                                    const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                        inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                            inputParem.MaterialName : inputParem.label] : undefined\r\n                                    if (product !== undefined) {\r\n                                        mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                        mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                    } else {\r\n                                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                                        selectedRecord[\"sversion\"] = \"\"\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                loading: false,\r\n                                                comboData: { ...returnObj.comboData },\r\n                                                selectedRecord,\r\n                                                AgaramTree: [],\r\n                                                ActiveKey: [],\r\n                                                FocusKey: [],\r\n                                                OpenNodes: [],\r\n                                                Test: [],\r\n                                                SelectedTest: [],\r\n                                                selectedSpec: {},\r\n                                                Component: [],\r\n                                                selectComponent: {},\r\n                                                selectedComponent: {},\r\n                                                Specification: [],\r\n                                                selectedMaster: {},\r\n                                                addMaster: false\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                            selectedRecord[\"sversion\"] = \"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec: {},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification: [],\r\n                                    selectedMaster: {},\r\n                                    addMaster: false\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: {},\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            comboData: { ...returnObj.comboData },\r\n                            selectedRecord,\r\n                            selectedMaster: {},\r\n                            addMaster: false,\r\n                            screenName: inputParem.screenName\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validatePreview(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam })\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    toast.info(intl.formatMessage({\r\n                        id: \"IDS_SUCCESSFULLYVALIDATE\"\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                        }\r\n                    })\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMasterRecord(inputParam) {\r\n    return function (dispatch) {\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                if (response.status === 202) {\r\n                    //HttpStatus:Accepted\r\n                    //Use this block when u need to display any success message\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.success(response.data);\r\n                }\r\n                else if (response.status === 208) {\r\n                    //HttpStatus:Accepted\r\n                    //208-Already Reported\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.warn(response.data);\r\n                } else {\r\n                    let data = []\r\n                    const data1 = sortData(response.data);\r\n                    if (inputParam.selectedControl.table.item.component === 'Dynamic') {\r\n                        data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\")\r\n                    }\r\n                    else if (inputParam.selectedControl.table.item.nformcode === 137) {\r\n                        data = constructOptionList(data1.PatientList, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\")\r\n                    }\r\n                    else {\r\n                        data = constructOptionList(data1, inputParam.selectedControl.valuemember, inputParam.selectedControl.displaymember).get(\"OptionList\")\r\n                    }\r\n\r\n                    const newdata = data.map((item1, index) => {\r\n                        item1={...item1,item:{jsondata:{...item1.item,jsondata:{...item1.item}}}}\r\n                        return item1;\r\n                    })\r\n\r\n                    const selectedRecord = inputParam.selectedRecord || {}\r\n                    const selectedControl = inputParam.selectedControl || {}\r\n\r\n                    const comboData1 = {\r\n                        ...newdata[0], item: {\r\n                            ...newdata[0].item, \"pkey\": selectedControl.valuemember,\r\n                            \"nquerybuildertablecode\": selectedControl.nquerybuildertablecode,\r\n                            \"source\": selectedControl.source\r\n                        }\r\n                    }\r\n\r\n                    selectedRecord[selectedControl.label] = comboData1\r\n\r\n                    const comboData = inputParam.comboData\r\n                    comboData[selectedControl.label] = newdata\r\n\r\n                    if (selectedControl.child && selectedControl.child.length > 0) {\r\n                        const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl.child, \"label\")\r\n                        let childColumnList = {};\r\n                        childComboList.map(columnList => {\r\n                            const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\r\n                            childColumnList = val.childColumnList\r\n                        })\r\n\r\n                        const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl.child, \"label\")\r\n\r\n                        const inputParem = {\r\n                            child: selectedControl.child,\r\n                            source: selectedControl.source,\r\n                            primarykeyField: selectedControl.valuemember,\r\n                            value: comboData1.value,\r\n                            item: comboData1.item,\r\n                            screenName:inputParam.screenName\r\n                        }\r\n                        if(inputParam.loadSubSample){\r\n                            dispatch(getChildValues(inputParem,\r\n                                inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                childComboList, childColumnList,\r\n                                inputParam.withoutCombocomponent,\r\n                                [...childComboList, ...parentList],false, false, {},\r\n                                false, false, false,\r\n                                false, false, true, false))\r\n                        }else{\r\n                            dispatch(getChildValues(inputParem,\r\n                                inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                childComboList, childColumnList,\r\n                                inputParam.withoutCombocomponent,\r\n                                [...childComboList, ...parentList]))\r\n                        }\r\n                       \r\n\r\n                    } else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                addMaster: false,\r\n                                [inputParam.comboName]: comboData,\r\n                                selectedMaster: {},\r\n                                [inputParam.selectedRecordName]:selectedRecord,\r\n                                screenName:inputParam.screenName\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAddMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        inputParam.masterComboColumnFiled.map(item => {\r\n            if (item.needService === undefined) {\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo }))\r\n            }\r\n        }\r\n        )\r\n        if (inputParam.selectedControl.table.item.nformcode === 137) {\r\n            urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let ComboFieldData = [];\r\n                let masterdataList = [];\r\n\r\n                inputParam.masterComboColumnFiled.map((item, index) => {\r\n                    if (item.needService === undefined) {\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n                            item.dataField, undefined, undefined, undefined);\r\n                        masterdataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n                    } else {\r\n                        if (item.child !== undefined) {\r\n                            masterdataList[item.dataField] = []\r\n                        } else if (item.useService !== undefined) {\r\n                            masterdataList[item.dataField] = masterdataList[inputParam.masterComboColumnFiled[item.useService].dataField]\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let currentTime = ''\r\n                const selectedMaster = {}\r\n                if (inputParam.selectedControl.table.item.nformcode === 137) {\r\n                    //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                    currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                    selectedMaster[\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                    selectedMaster[\"today\"] = inputParam.userinfo;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        addMaster: true,\r\n                        loading: false,\r\n                        selectedControl: inputParam.selectedControl,\r\n                        masterfieldList: inputParam.masterfieldList,\r\n                        masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                        masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                        masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                        screenName: inputParam.selectedControl.displayname[ inputParam.userinfo.slanguagetypecode]\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDynamicMasterTempalte(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.selectedControl.table.item.classUrl + \"/getMasterDesign\", { userinfo: { ...inputParam.userinfo, nformcode: inputParam.selectedControl.table.item.nformcode } })\r\n            .then(response => {\r\n                const design = response.data\r\n                const masterwithoutCombocomponent = []\r\n                let data = []\r\n                const masterextractedColumnList = []\r\n\r\n                design.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        masterwithoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            masterextractedColumnList.push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            masterextractedColumnList.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data.push(component)\r\n                                    : masterwithoutCombocomponent.push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        masterextractedColumnList.push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        masterextractedColumnList.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data;\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                inputParam = {\r\n                    ...inputParam,\r\n                    masterchildColumnList: childColumnList,\r\n                    mastercomboComponents: comboComponents,\r\n                    masterextractedColumnList,\r\n                    masterwithoutCombocomponent,\r\n                    masterDesign: design,\r\n                    masterdesignData: data\r\n                }\r\n                dispatch(getDynamicMasterComboForAdd(inputParam, true))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         addMaster: true,\r\n                //         loading: false,\r\n                //         selectedControl: inputParam.selectedControl,\r\n                //         masterchildColumnList: childColumnList,\r\n                //         mastercomboComponents: comboComponents,\r\n                //         mastermandatoryFields,\r\n                //         masterwithoutCombocomponent,\r\n                //         masterDesign: design\r\n\r\n                //     }\r\n                // })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: inputParam.masterdesignData,\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode }\r\n                let selectedMaster = {}\r\n                const newcomboData = parentChildComboLoad(inputParam.masterdesignData, response[1].data, selectedMaster, inputParam.masterchildColumnList,\r\n                    inputParam.masterwithoutCombocomponent, undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                inputParam.masterwithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\") {\r\n                        selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                            componentrow.radioOptions.tags[0].text : \"\";\r\n                    }\r\n\r\n                })\r\n\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...inputParam,\r\n                            mastertimeZoneList: timeZoneList,\r\n                            masterdefaultTimeZone: defaultTimeZone,\r\n                            loading: false,\r\n                            addMaster: true,\r\n                            masterdataList: comboData1,\r\n                            selectedMaster: selectedRecord1,\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterdesignData: inputParam.masterdesignData,\r\n                            masterchildColumnList: inputParam.masterchildColumnList,\r\n                            screenName:inputParam.selectedControl.displayname[inputParam.userinfo.slanguagetypecode]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValuesForAddMaster(inputParam,\r\n    userinfo, selectedMaster, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly\r\n) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParam.child,\r\n            parentdata: inputParam.item.jsondata,\r\n            parentsource: inputParam.source,\r\n            [inputParam.primarykeyField]: inputParam.value,\r\n            valuemember: inputParam.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster, childcolumnlist, withoutCombocomponent, inputParam, userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster = { ...selectedMaster, ...returnObj.selectedRecord }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterdataList: { ...returnObj.comboData },\r\n                        selectedMaster\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getChildComboMaster(selectedMaster, filedName,\r\n    item, selectedControl, masterComboColumnFiled, masterdataList, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const obj = masterComboColumnFiled[item.childIndex]\r\n        urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { [item.foreignDataField]: selectedMaster[item.tableDataField], userinfo: userInfo }))\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                selectedMaster[obj.dataField]=undefined\r\n                const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField,\r\n                    obj.foreignDisplayMember, undefined, undefined, undefined);\r\n                masterdataList[obj.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}