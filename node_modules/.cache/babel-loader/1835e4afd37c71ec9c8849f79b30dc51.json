{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdateChildTab.jsx\";\nimport React, { version } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, showEsign, create_UUID } from '../../../components/CommonScript';\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { connect } from 'react-redux';\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\nimport TrainingDocTab from './TrainingDocTab';\nimport AddTrainingDocFile from './AddTrainingDocFile';\nimport AddTraineeDocFile from './AddTraineeDocFile';\nimport Esign from '../../audittrail/Esign';\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdateChildTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.TrainingDocumentDataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.ParticipantsDataStateChange = event => {\n      this.setState({\n        dataStateParticipants: event.dataState\n      });\n    };\n\n    this.handleChange = (value, valueParam, isSection) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TRAININGDOCUMENTS\", /*#__PURE__*/React.createElement(TrainingDocTab, {\n        screenName: \"TrainingDocuments\",\n        onInputOnChange: this.onInputOnChange,\n        controlMap: this.props.controlMap,\n        updateStore: this.props.updateStore,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        TrainingDocument: this.props.masterData.TrainingDocument || [],\n        getAvailableData: this.props.getAvailableData,\n        settings: this.props.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 45\n        }\n      }));\n      tabMap.set(\"IDS_PARTICIPANTS\", /*#__PURE__*/React.createElement(TrainingParticipantsTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \" TrainieeDocuments\",\n        updateStore: this.props.updateStore,\n        primaryKeyField: \"nparticipantcode\",\n        masterData: this.props.masterData,\n        primaryList: \"Participants\",\n        dataResult: process(this.props.Login.masterData[(\"Participants\", \"TraineeDocuments\")] || [], this.state.dataStateParticipants),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"Participants\" ? this.state.dataStateParticipants : {\n          skip: 0\n        },\n        dataStateChange: event => this.setState({\n          dataStateParticipants: event.data\n        }),\n        columnList: this.participantsColumnList,\n        methodUrl: \"TrainingParticipants\",\n        fetchParticipantsRecordByID: this.fetchParticipantsRecordByID,\n        deleteRecord: this.deleteRecord,\n        getAvailableData: this.props.getAvailableData,\n        addtraineedoc: this.addtraineedoc,\n        selectedRecord: this.state.selectedRecord || {},\n        getTrainingParticipantsAttended: this.props.getTrainingParticipantsAttended,\n        getTrainingParticipantsCompetent: this.props.getTrainingParticipantsCompetent,\n        getTrainingParticipantsCertified: this.props.getTrainingParticipantsCertified,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 40\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.addtraineedoc = ncontrolcode => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          operation: \"create\",\n          selectedRecord: {},\n          ncontrolcode: ncontrolcode,\n          screenName: \"IDS_TRAINEEDOCUMENTS\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"certify\" || this.props.Login.operation === \"attend\" || this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropTrainingDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onDropTrainieeDoc = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.selectedRecord;\n      let dataState = undefined;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"trainingupdate\",\n        operation: deleteParam.operation,\n        methodUrl: methodUrl,\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let defaultInput = {};\n      let isValidRequest = true;\n\n      if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\n        inputParam = this.onSaveTrainingDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\n        inputParam = this.onSaveTrainieeDoc(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveAttended(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCertified(saveType, formRef);\n      }\n\n      if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\n        inputParam = this.onSaveCompetent(saveType, formRef);\n      }\n\n      if (isValidRequest) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\n        }\n      }\n    };\n\n    this.onSaveAttended = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"attend\",\n        saveType,\n        formRef,\n        dataState\n      };\n      return inputParam;\n    };\n\n    this.onSaveCertified = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"certify\",\n        saveType,\n        formRef,\n        dataState\n      };\n      return inputParam;\n    };\n\n    this.onSaveCompetent = (saveType, formRef) => {\n      let inputData = [];\n      let trainingupdate = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n        trainingupdate.push({\n          ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n          nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n          nusercode: participants.item.nusercode,\n          ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\n        });\n      });\n      inputData[\"trainingupdate\"] = trainingupdate;\n      const inputParam = {\n        classUrl: 'trainingupdate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"competent\",\n        saveType,\n        formRef,\n        dataState\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainingDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainingdocArray = [];\n      let trainingdoc = {\n        ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\n        ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\n        nstatus: transactionStatus.ACTIVE\n      };\n      const formData = new FormData();\n\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, trainingdoc);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n          const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = file.name;\n          tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n          tempData[\"ssystemfilename\"] = uniquefilename;\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          trainingdocArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\n        trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n        trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n        trainingdocArray.push(trainingdoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainingDoc\"\n      };\n      return inputParam;\n    };\n\n    this.onSaveTrainieeDoc = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let trainieedocArray = [];\n      let trainieedoc = {\n        nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\n        ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\n        nstatus: transactionStatus.ACTIVE\n      };\n      const formData = new FormData();\n\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, trainieedoc);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n          const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = file.name;\n          tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n          tempData[\"ssystemfilename\"] = uniquefilename;\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          trainieedocArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\n        trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\n        trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n        trainieedocArray.push(trainieedoc);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"trainingupdate\",\n        saveType,\n        formRef,\n        methodUrl: \"TrainieeDoc\"\n      };\n      return inputParam;\n    };\n\n    this.fetchParticipantsRecordByID = (operation, version, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"trainingparticipants\"] = {\n        \"nusercode\": version.nusercode,\n        \"nparticipantcode\": version.nparticipantcode,\n        \"ntrainingcode\": version.ntrainingcode,\n        \"ncertifiedstatus\": version.ncertifiedstatus,\n        \"ncompetencystatus\": version.ncompetencystatus,\n        \"ntransactionstatus\": version.ntransactionstatus\n      };\n      const postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\",\n        primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\n        fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"TrainingParticipants\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation,\n            screenName: '',\n            id: 'ParticipantsStatus'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    const dataStateParticipants = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'Trainingdoc-tab',\n      dataState: _dataState,\n      dataStateParticipants: dataStateParticipants,\n      trainingDocument: [],\n      participants: []\n    };\n    this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname', 'nstatus', 'ntransactionstatus'];\n    this.trainingDocumentColumnList = [{\n      \"idsName\": \"IDS_TRAININGDOCUMENTNAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.participantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTSNAME\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }]; // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\n\n    this.validationParticipantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTS\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  render() {\n    // const mandatoryFields = [];\n    // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\n    //    mandatoryFields.push(item) : \"\"\n    //  );\n    let mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_TRAININGDOCUMENTNAME\",\n        dataField: \"sfilename\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    } else {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_PARTICIPANTNAME\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    })))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTrainingDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainingDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ? /*#__PURE__*/React.createElement(AddTraineeDocFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropTrainieeDoc,\n        onInputOnChange: this.onInputOnChange,\n        deleteAttachment: this.deleteAttachment,\n        formatMessage: this.props.intl.formatMessage,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        selectedId: this.props.Login.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddParticipantsStatus, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        formatMessage: this.props.formatMessage,\n        usersStatus: this.props.usersStatus || [],\n        nusercode: this.props.nusercode || [],\n        selectedTrainingParticipants: this.props.masterData.SelectedTrainingParticipants || {},\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      }\n\n      let {\n        dataState,\n        dataStateParticipants\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n        dataStateParticipants = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\n          filter: undefined,\n          sort: undefined\n        };\n      }\n\n      this.setState({\n        isOpen,\n        activeTab: 'Trainingdocument-tab',\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    let {\n      dataState,\n      dataStateParticipants\n    } = this.state;\n\n    if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\n      dataState = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      dataStateParticipants = {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      };\n      this.setState({\n        dataState,\n        dataStateParticipants\n      });\n    }\n\n    if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\n      const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\", \"sfullname\", undefined, undefined, undefined);\n      const participantsList = participants.get(\"OptionList\");\n      this.setState({\n        participants: participantsList\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {})(injectIntl(TrainingUpdateChildTab));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdateChildTab.jsx"],"names":["React","version","Row","Col","Card","injectIntl","process","SlideOutModal","DEFAULT_RETURN","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","showEsign","create_UUID","CustomTabs","connect","TrainingParticipantsTab","TrainingDocTab","AddTrainingDocFile","AddTraineeDocFile","Esign","attachmentType","FORMULAFIELDTYPE","transactionStatus","AddParticipantsStatus","mapStateToProps","state","Login","TrainingUpdateChildTab","Component","constructor","props","TrainingDocumentDataStateChange","event","setState","dataState","ParticipantsDataStateChange","dataStateParticipants","handleChange","value","valueParam","isSection","selectedRecord","tabDetail","tabMap","Map","set","onInputOnChange","controlMap","updateStore","userRoleControlRights","userInfo","inputParam","deleteRecord","masterData","TrainingDocument","getAvailableData","settings","screenName","undefined","skip","data","participantsColumnList","fetchParticipantsRecordByID","addtraineedoc","getTrainingParticipantsAttended","getTrainingParticipantsCompetent","getTrainingParticipantsCertified","optional","target","type","name","checked","ncontrolcode","updateInfo","typeName","openModal","operation","closeModal","loadEsign","selectedId","onDropTrainingDoc","attachedFiles","fieldName","actionType","onDropTrainieeDoc","validateEsign","inputData","sreason","password","screenData","validateEsignCredential","deleteAttachment","file","deleteParam","methodUrl","selected","toLowerCase","userinfo","classUrl","esignRights","nformcode","ncontrolCode","crudMaster","onSaveClick","saveType","formRef","defaultInput","isValidRequest","onSaveTrainingDoc","onSaveTrainieeDoc","onSaveAttended","onSaveCertified","onSaveCompetent","trainingupdate","nusercode","map","participants","push","ntrainingcode","SelectedTrainingUpdate","nparticipantcode","selectedParticipants","item","ntechniquecode","selectedTechinque","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","trainingdocArray","trainingdoc","ntrainingdoccode","nstatus","ACTIVE","formData","FormData","Array","isArray","length","forEach","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","FTP","sfiledesc","trim","append","YES","JSON","stringify","isFileupload","trainieedocArray","trainieedoc","ntraineedoccode","ncertifiedstatus","ncompetencystatus","ntransactionstatus","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","TechniqueList","fetchUrl","fecthInputObject","id","onTabChange","tabProps","take","parseInt","isOpen","dataResult","activeTab","trainingDocument","trainingDocumentFieldList","trainingDocumentColumnList","validationParticipantsColumnList","render","mandatoryFields","mandatory","idsName","dataField","mandatoryLabel","controlType","masterStatus","intl","formatMessage","userLogged","usersStatus","SelectedTrainingParticipants","extractedColumnList","componentDidUpdate","previousProps","errorCode","filter","sort","participantsList","get"],"mappings":"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","sourcesContent":["import React, { version } from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { constructOptionList, onDropAttachFileList ,deleteAttachmentDropZone, showEsign,create_UUID} from '../../../components/CommonScript';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { connect } from 'react-redux';\r\nimport TrainingParticipantsTab from './TrainingParticipantsTab';\r\nimport TrainingDocTab from './TrainingDocTab';\r\nimport AddTrainingDocFile from './AddTrainingDocFile';\r\nimport AddTraineeDocFile from './AddTraineeDocFile';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { attachmentType, FORMULAFIELDTYPE, transactionStatus } from '../../../components/Enumeration';\r\nimport AddParticipantsStatus from '../trainingcertificate/AddParticipantsStatus';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass TrainingUpdateChildTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        const dataStateParticipants = {\r\n            skip: 0,\r\n            take:this.props.settings? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'Trainingdoc-tab',\r\n            dataState: dataState,\r\n            dataStateParticipants: dataStateParticipants, trainingDocument: [], participants: []\r\n        };\r\n        this.trainingDocumentFieldList = ['ntrainingdoccode', 'nparticipantcode', 'ntrainingcode', 'sfilename', 'ntechniquecode', 'sfullname',\r\n            'nstatus', 'ntransactionstatus'];\r\n        this.trainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n        this.participantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTSNAME\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" }];\r\n       // this.validationTrainingDocumentColumnList = [{ \"idsName\": \"IDS_TRAININGDOCUMENTNAME\", \"dataField\": \"sfilename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        this.validationParticipantsColumnList = [{ \"idsName\": \"IDS_PARTICIPANTS\", \"dataField\": \"sfullname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n    }\r\n    TrainingDocumentDataStateChange = (event) => {\r\n        this.setState({\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    ParticipantsDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateParticipants: event.dataState\r\n        });\r\n    }\r\n    handleChange = (value, valueParam, isSection) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n \r\n                this.setState({ selectedRecord });\r\n           \r\n\r\n        }\r\n    }\r\n    render() {\r\n        // const mandatoryFields = [];\r\n        // this.validationTrainingDocumentColumnList.forEach(item => item.mandatory === true ?\r\n        //    mandatoryFields.push(item) : \"\"\r\n        //  );\r\n         let mandatoryFields = [];\r\n         if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\r\n             mandatoryFields.push(\r\n                     {\r\n                       mandatory: true,\r\n                       idsName: \"IDS_TRAININGDOCUMENTNAME\",\r\n                       dataField: \"sfilename\",\r\n                       mandatoryLabel: \"IDS_SELECT\",\r\n                       controlType: \"selectbox\",\r\n                     });\r\n                 }\r\n                     else{\r\n                         mandatoryFields.push(\r\n                             {\r\n                               mandatory: true,\r\n                               idsName: \"IDS_PARTICIPANTNAME\",\r\n                               dataField: \"nusercode\",\r\n                               mandatoryLabel: \"IDS_SELECT\",\r\n                               controlType: \"selectbox\",\r\n                             });\r\n                     }\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                       mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                             : this.props.screenName === \"IDS_TRAININGDOCUMENTS\" ?\r\n                            <AddTrainingDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainingDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : this.props.screenName === \"IDS_TRAINEEDOCUMENTS\" ?\r\n                            <AddTraineeDocFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onDrop={this.onDropTrainieeDoc}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                operation={this.props.Login.operation}\r\n                                userLogged={this.props.Login.userLogged}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedId={this.props.Login.selectedId}\r\n                            />\r\n                            : <AddParticipantsStatus \r\n                            selectedRecord={this.props.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            handleChange={this.handleChange}\r\n                            formatMessage={this.props.formatMessage}\r\n                            usersStatus={this.props.usersStatus || []}\r\n                            nusercode={this.props.nusercode || []}\r\n                            selectedTrainingParticipants={this.props.masterData.SelectedTrainingParticipants || {}}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    tabDetail = () => {\r\n        \r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_TRAININGDOCUMENTS\", <TrainingDocTab\r\n                                                screenName={\"TrainingDocuments\"}\r\n\r\n                                                    onInputOnChange={this.onInputOnChange}\r\n                                                    controlMap={this.props.controlMap}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                    userInfo={this.props.userInfo}\r\n                                                    inputParam={this.props.inputParam}\r\n                                                    deleteRecord={this.deleteRecord}\r\n                                                    TrainingDocument={this.props.masterData.TrainingDocument || []}\r\n                                                    getAvailableData={this.props.getAvailableData}\r\n                                                    settings = {this.props.settings}\r\n                                                    />)\r\n        tabMap.set(\"IDS_PARTICIPANTS\", <TrainingParticipantsTab \r\n                                                          \r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            controlMap={this.props.controlMap}\r\n                                                            inputParam={this.props.inputParam}\r\n                                                            userInfo={this.props.userInfo}\r\n                                                            screenName={\" TrainieeDocuments\"}   \r\n                                                            updateStore={this.props.updateStore}\r\n                                                            primaryKeyField={\"nparticipantcode\"}\r\n                                                            masterData={this.props.masterData}\r\n                                                            primaryList={\"Participants\"}\r\n                                                            dataResult={process(this.props.Login.masterData[\"Participants\", \"TraineeDocuments\"] || [], this.state.dataStateParticipants)}\r\n                                                            dataState={(this.props.screenName === undefined || this.props.screenName === \"Participants\") ? this.state.dataStateParticipants : { skip: 0 }}\r\n                                                            dataStateChange={(event) => this.setState({ dataStateParticipants: event.data })}\r\n                                                            columnList={this.participantsColumnList}\r\n                                                            methodUrl={\"TrainingParticipants\"}\r\n                                                            fetchParticipantsRecordByID={this.fetchParticipantsRecordByID}\r\n                                                            deleteRecord={this.deleteRecord}\r\n                                                        getAvailableData={this.props.getAvailableData}\r\n                                                        addtraineedoc={this.addtraineedoc}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        \r\n                                                        getTrainingParticipantsAttended={this.props.getTrainingParticipantsAttended}\r\n                                                        getTrainingParticipantsCompetent={this.props.getTrainingParticipantsCompetent}\r\n                                                        getTrainingParticipantsCertified={this.props.getTrainingParticipantsCertified}\r\n\r\n                                                        />)\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onInputOnChange = (event,optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n       \r\n           \r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n             \r\n           \r\n                }\r\n\r\n                addtraineedoc =(ncontrolcode) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true,\r\n                operation: \"create\",\r\n                selectedRecord: {},\r\n                ncontrolcode: ncontrolcode,\r\n                screenName : \"IDS_TRAINEEDOCUMENTS\" \r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ||\r\n                 this.props.Login.operation === \"certify\" ||\r\n                 this.props.Login.operation === \"attend\" ||\r\n                 this.props.Login.operation === \"competent\" || this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onDropTrainingDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    onDropTrainieeDoc = (attachedFiles, fieldName) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" \r\n        });\r\n    }\r\n        \r\n    \r\n    deleteRecord = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n        let dataState = undefined;\r\n    const inputParam =   \r\n       {\r\n          inputData: {\r\n\r\n              [methodUrl.toLowerCase()]: selected,\r\n              userinfo: this.props.userInfo\r\n          },\r\n          classUrl: \"trainingupdate\",\r\n          operation: deleteParam.operation,\r\n          methodUrl: methodUrl,\r\n           dataState\r\n      }\r\n  \r\n   const masterData = this.props.masterData;\r\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n          const updateInfo = {\r\n              typeName: DEFAULT_RETURN,\r\n              data: {\r\n                  loadEsign: true, screenData: { inputParam, masterData },\r\n                  openModal: true,  operation: deleteParam.operation, selectedRecord: {}\r\n              }\r\n          }\r\n          this.props.updateStore(updateInfo);\r\n      } else {\r\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n      }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let defaultInput = {};\r\n        let isValidRequest = true;\r\n         if (this.props.screenName === \"IDS_TRAININGDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainingDoc(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_TRAINEEDOCUMENTS\") {\r\n            inputParam = this.onSaveTrainieeDoc(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_ATTENDPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveAttended(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_CERTIFYPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCertified(saveType, formRef);\r\n        } \r\n        if (this.props.screenName === \"IDS_COMPETENTPARTICIPANTSDETAILS\") {\r\n            inputParam = this.onSaveCompetent(saveType, formRef);\r\n        } \r\n        if (isValidRequest) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openModal\", defaultInput);\r\n            }\r\n        }\r\n    }\r\n    onSaveAttended = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    nusercode: participants.item.nusercode,\r\n                ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"attend\",saveType, formRef, dataState\r\n            }\r\n            return inputParam;\r\n            \r\n    }\r\n    onSaveCertified = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    nusercode: participants.item.nusercode,\r\n                    ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"certify\",saveType, formRef, dataState\r\n            }\r\n            return inputParam;            \r\n    }\r\n    onSaveCompetent = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let trainingupdate = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n            this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n                trainingupdate.push({\r\n                    ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n                    nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n                    nusercode: participants.item.nusercode,\r\n                    ntechniquecode: this.props.masterData.selectedTechinque.ntechniquecode\r\n\r\n                })\r\n    \r\n            })\r\n            inputData[\"trainingupdate\"] = trainingupdate\r\n\r\n            const inputParam = {\r\n                classUrl: 'trainingupdate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"competent\",saveType, formRef, dataState\r\n            }\r\n            return inputParam;            \r\n    }\r\n    onSaveTrainingDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainingdocArray = [];\r\n        let trainingdoc = {\r\n            ntrainingcode: this.props.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            ntrainingdoccode: selectedRecord.ntrainingdoccode ? selectedRecord.ntrainingdoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n           \r\n        };\r\n        const formData = new FormData();\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainingdoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntrainingdoccode && selectedRecord.ntrainingdoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainingdocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainingdoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainingdoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                trainingdoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainingdocArray.push(trainingdoc);\r\n            }\r\n        \r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainingdoc\", JSON.stringify(trainingdocArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainingDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTrainieeDoc = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let trainieedocArray = [];\r\n        let trainieedoc = {\r\n            nparticipantcode: this.props.masterData.selectedParticipants.nparticipantcode,\r\n            ntraineedoccode: selectedRecord.ntraineedoccode ? selectedRecord.ntraineedoccode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n        };\r\n        const formData = new FormData();\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, trainieedoc);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntraineedoccode && selectedRecord.ntraineedoccode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    trainieedocArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                trainieedoc[\"sfilename\"] = selectedRecord.sfilename;\r\n                trainieedoc[\"sfiledesc\"] = selectedRecord.sfiledesc ? selectedRecord.sfiledesc.trim() : \"\";\r\n                trainieedoc[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                trainieedocArray.push(trainieedoc);\r\n            }\r\n     \r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"trainieedoc\", JSON.stringify(trainieedocArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"trainingupdate\",\r\n            saveType, formRef, methodUrl: \"TrainieeDoc\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    // fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n    //     let inputData = [];\r\n    //     inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    //     inputData[\"trainingparticipants\"] = {\r\n    //         \"nusercode\": version.nusercode,\r\n    //         \"nparticipantcode\": version.nparticipantcode,\r\n    //         \"ntrainingcode\": version.ntrainingcode,\r\n    //         \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n    //         \"ncompetencystatus\" : version.ncompetencystatus,\r\n    //         \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n    //     }\r\n    //     const postParam = {\r\n    //         inputListName: \"TechniqueList\", \r\n    //         selectedObject: \"SelectedTrainingUpdate\",\r\n    //         primaryKeyField: \"ntrainingcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n    //         fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n    //         fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    //     }\r\n    //     const inputParam = {\r\n    //         methodUrl: \"TrainingParticipants\",\r\n    //         classUrl: this.props.Login.inputParam.classUrl,\r\n    //         inputData: inputData, postParam,\r\n    //         operation\r\n    //     }\r\n    //     const masterData = this.props.Login.masterData;\r\n\r\n    //     if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, \r\n    //                 screenData: { inputParam, masterData }, \r\n    //                 openModal: true, \r\n    //                 operation, \r\n    //                 screenName: '', \r\n    //                 id: 'ParticipantsStatus'\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n    //         this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //     }\r\n    // }\r\n    \r\n    fetchParticipantsRecordByID = (operation,version,ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"trainingparticipants\"] = {\r\n            \"nusercode\": version.nusercode,\r\n            \"nparticipantcode\": version.nparticipantcode,\r\n            \"ntrainingcode\": version.ntrainingcode,\r\n            \"ncertifiedstatus\" : version.ncertifiedstatus,\r\n            \"ncompetencystatus\" : version.ncompetencystatus,\r\n            \"ntransactionstatus\" : version.ntransactionstatus\r\n\r\n        }\r\n        const postParam = {\r\n            inputListName: \"TechniqueList\", \r\n            selectedObject: \"SelectedTrainingUpdate\",\r\n            primaryKeyField: \"ntrainingcode\",\r\n            primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n            fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"TrainingParticipants\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, \r\n                    screenData: { inputParam, masterData }, \r\n                    openModal: true, \r\n                    operation, \r\n                    screenName: '', \r\n                    id: 'ParticipantsStatus'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n  \r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n            let { dataState, dataStateParticipants } = this.state;\r\n            if(this.props.dataState === undefined)\r\n            {\r\n                dataState={skip: 0,take:this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined}\r\n                dataStateParticipants = { skip: 0, take :this.props.settings? parseInt(this.props.settings[14]) : 5,filter:undefined,sort:undefined }\r\n            } \r\n            this.setState({ isOpen, activeTab: 'Trainingdocument-tab',dataState, dataStateParticipants });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n        let { dataState, dataStateParticipants } = this.state;\r\n        if (this.props.dataState !== previousProps.dataState && this.props.dataState !== dataState) {\r\n            dataState = { skip: 0,take : this.props.settings? parseInt(this.props.settings[14]) : 5 }\r\n            dataStateParticipants = { skip: 0 , take:this.props.settings? parseInt(this.props.settings[14]) : 5}\r\n            this.setState({ dataState, dataStateParticipants });\r\n        }\r\n     \r\n       \r\n        if (this.props.trainingDocument !== previousProps.trainingDocument || this.props.participants !== previousProps.participants) {\r\n\r\n           \r\n            const participants = constructOptionList(this.props.participants || [], \"nparticipantcode\",\r\n                \"sfullname\", undefined, undefined, undefined);\r\n            const participantsList = participants.get(\"OptionList\");\r\n\r\n            this.setState({ \r\n                 participants: participantsList });\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) =>{\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {screenName}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,{})(injectIntl(TrainingUpdateChildTab));\r\n\r\n"]},"metadata":{},"sourceType":"module"}