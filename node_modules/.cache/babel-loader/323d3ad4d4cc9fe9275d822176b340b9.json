{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\"; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n//     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      }; // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === 7) {\n      urlArray = [projectType];\n    } else {\n      urlArray = [releaseSample //,reportType\n      ];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let ProjectTypeList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n      //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n      //      \"label\": response[1].data.ReportType[0].scoareporttypename\n      // }\n      // };\n\n      let masterData = {};\n      let openModal = true;\n      let selectedRecord = inputParam.inputData.selectedRecord;\n\n      if (inputParam.inputData.ncoareporttypecode === 7) {\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n        ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n          delete inputParam.inputData.selectedRecord.nprojecttypecode;\n        }\n\n        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n          delete inputParam.inputData.selectedRecord.nprojectmastercode;\n        }\n      } else {\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        }\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          // selectedRecord,\n          // ReportTypeList,\n          ncontrolCode,\n          isDeletePopup: false,\n          isEditPopup: false,\n          ProjectTypeList,\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReleasedReport(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/updateRelease\", inputData).then(response => {\n      if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputData));\n      }\n\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        //  if (response.data.statusCodeValue !== 200) {\n        // toast.warn(intl.formatMessage({\n        //     id: response.data.body\n        // }));\n        // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         loading: false\n        //     }\n        // });\n        //   }\n        // else {\n        //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n        //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n        //     }\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        }); // }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function previewAndFinalReport(inputParam, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.npreregno,\n      //   nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode,\n      ntransactiontestcode: inputParam.ntransactiontestcode,\n      napproveconfversioncode: inputParam.napprovalversioncode,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      ntransactionstatus: inputParam.ntransactionstatus\n    };\n    rsapi.post(\"release/generateReleasedReport\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [releaseSample, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        }; // responseData = sortData(responseData)\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isEditPopup: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === 7) {\n      urlArray = [projectType, statusService];\n    } else {\n      urlArray = [releaseSample, statusService //,reportType\n      , projectType];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      if (response[1].data.Status === \"Success\") {\n        let ProjectTypeList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (inputParam.inputData.ncoareporttypecode === 7) {\n          const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n          ProjectTypeList = projectTypeMap.get(\"OptionList\");\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n\n          if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n            delete inputParam.inputData.selectedRecord.nprojecttypecode;\n          }\n\n          if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n            delete inputParam.inputData.selectedRecord.nprojectmastercode;\n          }\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } // responseData = sortData(responseData)\n\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            // ReportTypeList,\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            isDeletePopup: false,\n            isEditPopup: true,\n            ProjectTypeList,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: false,\n            operation: \"append\"\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateApprovedSample(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        let masterData = { ...Data1,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            loading: false,\n            openModal: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","showFilter","getApprovedSample","ncontrolCode","urlArray","releaseSample","projectType","ncoareporttypecode","all","ProjectTypeList","openModal","selectedRecord","projectTypeMap","undefined","get","ReleaseSubSample","ReleaseTest","ReleaseSample","nprojecttypecode","nprojectmastercode","length","isDeletePopup","isEditPopup","isAddPopup","operation","generateReleasedReport","Data","UpdateExternalOrderStatus","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","modalShow","loadEsign","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nsampletypecode","nregtypecode","nregsubtypecode","ntransactionstatus","nsectioncode","ntestcode","napprovalconfigcode","userinfo","nneedsubsample","ncoaparentcode","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getReportForPortal","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","userInfo","Data1","previewAndFinalReport","nprimarykey","SAMPLEWISE","nreporttypecode","COAREPORT","sprimarykeyname","ncontrolcode","ntransactiontestcode","napproveconfversioncode","getRemoveApprovedSample","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n         \r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n    \r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {} \r\n               // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n               //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                    masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                    }\r\n            // }\r\n            //     else {\r\n            //         responseData.ReleaseHistory = []\r\n            //         responseData.selectedReleaseHistory= []\r\n            //         masterData = {\r\n            //             ...inputParam.masterData,\r\n            //             ...responseData,\r\n            //         }\r\n            //     }\r\n               \r\n                sortData(masterData,\"\",\"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n    export function getApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            urlArray = [ projectType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                \r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    if (inputParam.inputData.ncoareporttypecode === 7) {\r\n                        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                            \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                        ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                        }\r\n                        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                            delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                        }\r\n                    } else {\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                            }\r\n\r\n                    }\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       // ReportTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isEditPopup:false,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation:\"save\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateReleasedReport(inputData,Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/updateRelease\", inputData)\r\n            .then(response => {\r\n         \r\n                    if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"],inputData));\r\n                    }\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                \r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputData.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false\r\n                }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam,coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,          \r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode:inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode:inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode:inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup:false\r\n            \r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                     const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\",\r\n                \"sprojectcode\", undefined, undefined, false);\r\n                \r\n            const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n            //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n            //     \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n                \r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateExternalOrderStatus(portallist,inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"])+\"/portal/UpdateMultiSampleStatus\",JSON.stringify(portallist),{\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/saveRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n              //  if (response.data.statusCodeValue !== 200) {\r\n                    // toast.warn(intl.formatMessage({\r\n                    //     id: response.data.body\r\n                    // }));\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         loading: false\r\n                    //     }\r\n                    // });\r\n\r\n\r\n             //   }\r\n                // else {\r\n         \r\n                //     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n                //         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n                //     }\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data,\r\n    \r\n\r\n                    };\r\n\r\n                     sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam,Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.npreregno,\r\n         //   nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode,\r\n            ntransactiontestcode:inputParam.ntransactiontestcode,\r\n            napproveconfversioncode: inputParam.napprovalversioncode,\r\n            ncoaparentcode: inputParam.ncoaparentcode,\r\n            ntransactionstatus:inputParam.ntransactionstatus\r\n        }\r\n        rsapi.post(\"release/generateReleasedReport\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n               \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputParam.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n       // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n        \r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n            ];\r\n        \r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    \r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    \r\n            \r\n                    // responseData = sortData(responseData)\r\n\r\n                \r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isEditPopup: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode:inputParam.inputData.ncontrolCode\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/deleteRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal: false\r\n\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                  //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            urlArray = [ projectType,statusService];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample,statusService\r\n                //,reportType\r\n                , projectType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                let ProjectTypeList = [];\r\n                \r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                if (inputParam.inputData.ncoareporttypecode === 7) {\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                 ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if(inputParam.inputData.selectedRecord.nprojecttypecode){\r\n                        delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                }\r\n                   if(inputParam.inputData.selectedRecord.nprojectmastercode){\r\n                        delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                   }\r\n                } else {\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                       ...inputParam.masterData,...responseData\r\n                   }\r\n                }\r\n            \r\n                // responseData = sortData(responseData)\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       // ReportTypeList,\r\n                        ncontrolCode:inputParam.inputData.ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isEditPopup:true,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        operation:\"append\"\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: response[1].data.ValidationStatus\r\n                }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateApprovedSample (userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/appendRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                    let masterData = {\r\n                        ...Data1, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory,\"\",'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                   // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}