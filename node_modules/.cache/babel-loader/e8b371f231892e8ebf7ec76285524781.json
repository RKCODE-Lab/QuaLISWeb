{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\actions\\\\RegistrationAction.js\";\nimport React from 'react';\nimport rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { //RegistrationSubType, RegistrationType, \nSampleType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nimport { Operators, TextFilter, NumericFilter, // BooleanFilter,\nDateFilter // EnumFilter,\n//  EnumFilterProps,\n} from \"@progress/kendo-react-data-tools\";\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport { leftArrowClass } from '@progress/kendo-react-layout';\nconst {\n  checkTree,\n  loadTree\n} = QbUtils;\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.ntransactionsamplecode.length > 0) {\n      let inputParamData = {\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"comments/getSubSampleComment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSubSample: inputData.selectedSubSample // selectedTestCode: inputData.ntransactiontestcode,\n\n              },\n              loading: false,\n              showFilter: false,\n              activeSubSampleTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName,\n              activeTestTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName,\n              selectedId: null\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_PLSSELECTASAMPLE\"\n      }));\n    }\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          }\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno,\n      nneedsubsample: LoginProps.masterData.RealRegSubTypeValue.nneedsubsample\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map.nsampletypecode === SampleType.CLINICALTYPE && Map.nportalrequired === transactionStatus.YES && selectedRecord[\"Order Type\"] && selectedRecord[\"Order Type\"].value == 2 ? { ...Map,\n      nordertypecode: selectedRecord[\"Order Type\"].value,\n      nallottedspeccode: selectedRecord[\"Order\"] && selectedRecord[\"Order\"].item.jsondata.nallottedspeccode\n    } : Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n\n      if (Map.nsampletypecode === SampleType.CLINICALTYPE && Map.nportalrequired && Map.nportalrequired === 3 && selectedRecord[\"Order Type\"] && selectedRecord[\"Order Type\"].value === 2) {\n        let dispatchData = {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {},\n          subSampleDataGridList: []\n        };\n\n        if (Specification.length > 0) {\n          dispatch(autoExternalComponentLoadBasedOnSpec(dispatchData));\n        } else {\n          let masterStatus = '';\n\n          if (selectedRecord[\"Order\"] && selectedRecord[\"Order\"].item.jsondata.nallottedspeccode) {\n            masterStatus = intl.formatMessage({\n              id: \"IDS_SELECTEDEXTERNALORDERSPECISRETIRED\"\n            });\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...dispatchData,\n              masterStatus\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Specification,\n            selectedRecord,\n            AgaramTree,\n            ActiveKey,\n            FocusKey,\n            OpenNodes,\n            Test: [],\n            SelectedTest: [],\n            loading: false,\n            comboData,\n            ...inputParam,\n            selectedSpec,\n            Component: [],\n            selectComponent: {},\n            selectedComponent: {},\n            subSampleDataGridList: [],\n            addMaster: false,\n            masterIndex: undefined\n          }\n        });\n      }\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            //ALPD-1793_fix\n            // SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.info(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getAllTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true //    ntestpackagecode:selectPackage.ntestpackagecode.value\n\n      }).then(response => {\n        let PackageData = [];\n        let TestCombined = []; //   const TestCombined = response.data;\n\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            TestPackage: PackageData,\n            selectPackage: [],\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: intl.formatMessage({\n              id: \"IDS_TEST\"\n            }),\n            screenName: intl.formatMessage({\n              id: \"IDS_TEST\"\n            }),\n            operation: \"create\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\n  return function (dispatch) {\n    // if (Object.keys(objComponent).length > 0) {\n    const urlArray = [];\n    const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: objComponent.nspecsampletypecode,\n      slno: objComponent.slno,\n      nneedsubsample: nneedsubsample,\n      nallottedspeccode: objComponent.nallottedspeccode,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: true //    ntestpackagecode:selectPackage.ntestpackagecode.value\n\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n      nspecsampletypecode: objComponent.nspecsampletypecode,\n      slno: objComponent.slno,\n      nneedsubsample: nneedsubsample,\n      nallottedspeccode: objComponent.nallottedspeccode,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: true\n    });\n    urlArray[1] = TestPackageGet;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const TestCombined = [];\n      let PackageData = []; //  if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\"); //    }\n      //    else {\n\n      let TestData = response[0].data;\n      let Test = LoginProps.Test || [];\n      let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n      let TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\"); //    }\n      // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n      //\"stestsynonym\", undefined, undefined, true);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TestCombined,\n          TestPackage: PackageData,\n          selectPackage: [],\n          AllTest: TestData,\n          loadTest: true,\n          openChildModal: false,\n          ChildscreenName: intl.formatMessage({\n            id: \"IDS_TEST\"\n          }),\n          screenName: intl.formatMessage({\n            id: \"IDS_TEST\"\n          }),\n          operation: \"create\",\n          childoperation: \"create\",\n          parentPopUpSize: \"lg\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }); // } else {\n    //     toast.info(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\n    // }\n  };\n}\nexport function addsubSample(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData, selectedRecord, conditionalTestPackage, specBasedTestPackage, LoginProps) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList ? columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true) : [],\n        childcolumnlist: childColumnList ? childColumnList : [],\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent) {\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent //   conditionalTestPackage:true\n\n        });\n        urlArray[2] = ComponentTestBySpec;\n      } else {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          nneedsubsample: Map[\"nneedsubsample\"],\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[2] = TestGet;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          // slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent //   specBasedTestPackage: specBasedTestPackage,\n          //  conditionalTestPackage: conditionalTestPackage\n\n        });\n        urlArray[5] = TestPackageGet;\n      }\n\n      const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo\n      });\n      urlArray[3] = currentDate;\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo\n      });\n      urlArray[4] = dateService;\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n        let TestCombined = [];\n        let lstComponent = [];\n        let PackageData = [];\n        const selectedRecord1 = newcomboData.selectedRecord;\n\n        if (specBasedComponent) {\n          const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n\n          if (lstComponent.length > 0) {\n            selectedRecord1['ncomponentcode'] = { ...lstComponent[0]\n            };\n            selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n            selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n          }\n        } else {\n          const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\");\n          TestCombined = response[2].data;\n        }\n\n        const comboData1 = newcomboData.comboData;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.loadcurrentdate) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n              selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n            } else if (componentrow.nperiodcode) {\n              selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n              if (componentrow.loadselecteddate) {\n                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n              } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n              //    new Date(response[2].data[componentrow.label]):null;\n\n            } else {\n              selectedRecord1[componentrow.label + \"value\"] = new Date();\n            }\n\n            if (componentrow.hidebeforedate) {\n              selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n\n            if (componentrow.hideafterdate) {\n              selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n          } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n            if (componentrow['radiodefaultvalue']) {\n              if (componentrow.inputtype === \"checkbox\") {\n                let val = '';\n                componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                  val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                });\n                selectedRecord1[componentrow.label] = val;\n              } else if (componentrow.inputtype === \"predefineddropdown\") {\n                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n              } else {\n                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n              }\n            } else {\n              if (componentrow.inputtype === \"radio\") {\n                selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n              }\n            }\n          }\n        });\n        const inputParam = {\n          ChildscreenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          }),\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          }),\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          openPortal: true,\n          openModal: false,\n          operation: \"create\",\n          loadSubSample: true,\n          selectComponent: selectedRecord1,\n          saveContinueData: { ...selectedRecord1\n          },\n          SubSamplecomboData: comboData1,\n          SubSamplecomboComponents,\n          SubSamplewithoutCombocomponent,\n          TestCombined,\n          parentSubSampleColumnList: columnList,\n          childSubSampleColumnList: childColumnList,\n          timeZoneList,\n          defaultTimeZone,\n          masterData,\n          selectPackage: [],\n          TestPackage: PackageData\n        };\n\n        if (specBasedComponent) {\n          dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...inputParam\n            }\n          });\n        }\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n    return dispatch => {\n      if (!specBasedComponent) {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          // nneedsubsample: Map[\"nneedsubsample\"],\n          ...Map,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          //  nspecsampletypecode: selectedobject.nspecsampletypecode,\n          nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent,\n          specBasedTestPackage: specBasedTestPackage,\n          conditionalTestPackage: conditionalTestPackage\n        });\n        urlArray[3] = TestPackageGet;\n        Axios.all(urlArray).then(response => {\n          let TestCombined = [];\n          let PackageData = []; //  if (!specBasedTestPackage) {\n\n          TestCombined = response[0].data; // } \n          // else {\n\n          const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n          //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n          //} \n          // }\n\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n              if (componentrow['radiodefaultvalue']) {\n                if (componentrow.inputtype === \"checkbox\") {\n                  let val = '';\n                  componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                    val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                  });\n                  selectedRecord1[componentrow.label] = val;\n                } else if (componentrow.inputtype === \"predefineddropdown\") {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n                } else {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n                }\n              } else {\n                if (componentrow.inputtype === \"radio\") {\n                  selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n                }\n              }\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: intl.formatMessage({\n                id: \"IDS_SUBSAMPLE\"\n              }),\n              screenName: intl.formatMessage({\n                id: \"IDS_SUBSAMPLE\"\n              }),\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              saveContinueData: { ...selectedRecord1\n              },\n              TestCombined: TestCombined,\n              TestPackage: PackageData\n            }\n          });\n        });\n      } else {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        Axios.all(urlArray).then(response => {\n          const selectedRecord1 = newcomboData.selectedRecord; // const lstComponent =  response.data.lstComponent\n\n          let lstComponent = response[0].data.lstComponent; //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\n\n          const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n\n          if (lstComponent.length > 0) {\n            selectedRecord1['ncomponentcode'] = { ...lstComponent[0]\n            };\n            selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n            selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n          }\n\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n              if (componentrow['radiodefaultvalue']) {\n                if (componentrow.inputtype === \"checkbox\") {\n                  let val = '';\n                  componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                    val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                  });\n                  selectedRecord1[componentrow.label] = val;\n                } else if (componentrow.inputtype === \"predefineddropdown\") {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n                } else {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n                }\n              } else {\n                if (componentrow.inputtype === \"radio\") {\n                  selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n                }\n              }\n            }\n          });\n          const inputParam = {\n            ChildscreenName: intl.formatMessage({\n              id: \"IDS_SUBSAMPLE\"\n            }),\n            screenName: intl.formatMessage({\n              id: \"IDS_SUBSAMPLE\"\n            }),\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent,\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            saveContinueData: { ...selectedRecord1\n            },\n            TestCombined: [],\n            selectedTestData: [],\n            selectPackage: []\n          };\n\n          if (specBasedComponent) {\n            dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...inputParam\n              }\n            });\n          }\n        });\n      }\n    };\n  }\n}\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    Component = Component ? Component : [];\n    const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage,\n      nneedsubsample: selectedobject.nneedsubsample\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[1] = TestPackageGet;\n    Axios.all(urlArray).then(response => {\n      let PackageData = [];\n      let TestData = []; // if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n      //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n      // } \n      //   }\n      //    else {\n\n      TestData = response[0].data; //  }\n      //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...inputParam,\n          TestCombined: TestData,\n          AllTest: TestData,\n          TestPackage: PackageData,\n          ...Map,\n          loading: false,\n          selectedTestData: [],\n          selectPackage: []\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n} // export function testPackageTest(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage,selectComponent,objComponent,LoginProps,selectPackage,subSampleBased,selectedSpec,nneedsubsample) {\n\nexport function testPackageTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, subSampleBased, selectedSpec, nneedsubsample, action) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    Component = Component ? Component : []; // rsapi.post(\"/registration/getTestBasesdTestPackage\", {\n    //     nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\n    //     slno:subSampleBased?Component ? Object.keys(Component).length + 1 : 1:selectComponent.slno,\n    //     specBasedComponent: specBasedComponent,\n    //     ntestpackagecode: selectPackage.ntestpackagecode.value,\n    //     nallottedspeccode:selectedSpec!==undefined?selectedSpec.value:selectedobject.nallottedspeccode\n    // })\n\n    rsapi.post(\"/registration/getTestBasesdTestPackage\", {\n      // nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\n      nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\n      //     slno: subSampleBased ? Component ? Object.keys(Component).length + 1 : 1 : selectComponent.slno,\n      specBasedComponent: specBasedComponent,\n      ntestpackagecode: selectPackage.ntestpackagecode.value,\n      nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\n    }).then(response => {\n      const Map = {};\n      let TestData = response.data;\n      let Test = action !== \"AddSubSample\" ? LoginProps.Test || [] : [];\n      let componentTest = [];\n\n      if (subSampleBased) {\n        componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\n      } else {\n        componentTest = objComponent && Test[objComponent.slno] ? Test[objComponent.slno] : [];\n      }\n\n      const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      delete selectedobject.ntestgrouptestcode;\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectPackage\"] = selectPackage;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          availableTest,\n          TestCombined,\n          ...Map,\n          loading: false,\n          selectedTestData: [],\n          AllTest: LoginProps.TestCombined //, selectPackage: []\n          // TestCombined,loadTest: true, openChildModal: false,\n          // ChildscreenName: \"Test\",\n          //  screenName: \"Test\",\n          // operation: \"create\",\n          //  childoperation: \"create\",\n          //   parentPopUpSize: \"lg\", loading: false\n\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function addSubSampleSaveContinue(Map1, Map, specBasedComponent, Component, selectedTestData, lstComponent) {\n  //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\n  //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\n  return dispatch => {\n    if (!specBasedComponent) {\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        nspecsampletypecode: Map[\"nspecsampletypecode\"],\n        slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      }).then(response => {\n        let TestCombined = response.data; // let selectedTestPackageData = selectedTestPackageData && selectedTestPackageData.length > 0 ? selectedTestData : []\n\n        let selectedTestPackageData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : [];\n        const selectedTestPackageData1 = TestCombined.filter(function (x) {\n          return selectedTestPackageData.some(function (y) {\n            return x[\"ntestpackagetestcode\"] === y.value;\n          });\n        });\n        selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestPackageData : [];\n        const selectedTestData1 = TestCombined.filter(function (x) {\n          return selectedTestData.some(function (y) {\n            return x[\"ntestgrouptestcode\"] === y.value;\n          });\n        });\n        selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\");\n        selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\");\n        selectedTestPackageData = constructOptionList(selectedTestPackageData1, \"ntestpackagetestcode\", \"stestpackagename\");\n        selectedTestPackageData[\"ntestpackagetestcode\"] = selectedTestPackageData.get(\"OptionList\"); // Map1.selectComponent = {};\n\n        Map1.selectComponent = { ...Map1.saveContinueData\n        }; // Map1.selectComponent[\"ncomponentcode\"] = {};\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...Map1,\n            loading: false,\n            TestCombined,\n            selectPackage: [],\n            //TestPackage\n            //selectedTestData,\n            //selectedTestPackageData,\n            selectedTestData: [],\n            selectedTestPackageData: [],\n            masterStatus: intl.formatMessage({\n              id: \"IDS_SAVESUCCESSFULLY\"\n            })\n          }\n        });\n      });\n    } else {\n      // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\n      // Map1.selectComponent = {};\n      // Map1.selectComponent[\"ncomponentcode\"] = {};           \n      // Map1.selectComponent[\"Sample Name\"] = \"\";\n      Map1.selectComponent = { ...Map1.saveContinueData,\n        \"ncomponentcode\": {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...Map1,\n          loading: false,\n          TestCombined: [],\n          selectPackage: [],\n          TestPackage: [],\n          selectedTestData: [],\n          selectedTestPackageData: [],\n          lstComponent,\n          masterStatus: intl.formatMessage({\n            id: \"IDS_SAVESUCCESSFULLY\"\n          })\n        }\n      });\n    }\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent, SubSamplecomboData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let Componnet = {};\n\n    if (specBasedComponent) {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", { ...Map\n      });\n    }\n\n    urlArray = [Componnet];\n    Axios.all(urlArray).then(response => {\n      let comp = [];\n\n      if (specBasedComponent) {\n        comp = response[0].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n\n      if (Map.nregsubtypecode === 6) {\n        let portalOrder = component['Container Type'] || {};\n        let containerType = SubSamplecomboData['ContainerType'] || [];\n        let containerList = [];\n        const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1;\n        containerType.map(x => {\n          if (x.item.jsondata.nportalordercode === nportalordercode) {\n            containerList.push(x);\n          }\n        });\n        SubSamplecomboData['Container Type'] = containerList;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          }),\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          SubSamplecomboData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n          dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\n        }\n\n        let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n        let selectedSample = response.data[\"selectedSample\"];\n        let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n        let selectedSubSample = RegistrationGetSubSample;\n        RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n        let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n        if (inputParam.inputData.nneedsubsample) {\n          RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc');\n          selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n          RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode);\n          selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n        } // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n\n\n        if (inputParam.multipleselectionFlag) {\n          selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n          updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n          updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n          RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n          RegistrationGetTest = masterData.RegistrationGetTest;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedSample,\n          selectedSubSample,\n          selectedTest,\n          RegistrationGetSubSample,\n          RegistrationGetTest,\n          RegistrationGetSample\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          SelectedTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          SelectedTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: [],\n          preregConfirmMessage: undefined\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        inputParam.postParamList[1]['clearFilter'] = 'yes';\n        inputParam.postParamList[2]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(error);             \n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              preregConfirmMessage: error.response.data.rtn,\n              preregConfirmParam: {\n                inputParam,\n                masterData\n              },\n              loading: false,\n              showSample: undefined\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              preregConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function insertRegistrationScheduler(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData).then(response => {\n      // if (response.data.rtn === \"Success\") {\n      //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      //     let selectedSample = response.data[\"selectedSample\"];\n      //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      //     let selectedSubSample = RegistrationGetSubSample;\n      //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      //     if (inputParam.inputData.nneedsubsample) {\n      //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\n      //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n      //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\n      //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n      //     }\n      //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n      //     if (inputParam.multipleselectionFlag) {\n      //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n      //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n      //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n      //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\n      //     }\n      //     masterData = {\n      //         ...masterData, ...response.data,\n      //         selectedSample, selectedSubSample, selectedTest,\n      //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\n      //     }\n      let respObject = {\n        masterData: { ...masterData,\n          SchedulerTransaction: response[\"data\"].SchedulerTransaction\n        },\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {},\n        subSampleDataGridList: []\n      }; // inputParam.postParamList[0]['clearFilter'] = 'yes'\n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject\n        }\n      }); // } else {\n      //     toast.info(response.data.rtn);\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\n      // }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeTestTab,\n      activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      //ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\n      ntype: inputData.checkBoxOperation === 7 ? 4 : undefined,\n      //ALPD-497\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data, \"descending\", \"npreregno\");\n        sortData(response.data['RegistrationAttachment']);\n        sortData(response.data['RegistrationComment']);\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : [],\n            activeTabIndex: inputData.activeTabIndex\n          };\n          let RegistrationTestComment = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationParameter = [];\n          let RegistrationComment = []; //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \n\n          if (inputData.checkBoxOperation === 1) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 7) {\n            // masterData = {\n            //     ...masterData,\n            //     APSelectedTest:responseData.APSelectedTest,\n            //     AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n            // }\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [// ...inputData.masterData.RegistrationTestComment, \n                  ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [// ...inputData.masterData.RegistrationTestAttachment, \n                    ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [// ...inputData.masterData.RegistrationParameter, \n                ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [// ...inputData.masterData.RegistrationTestComment, \n                  ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n            masterData[\"RegistrationComment\"] = RegistrationComment;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationComment = [];\n\n          if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n            let npreregno;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n              npreregno = inputData.masterData.RegistrationGetSample.length > 0 ? inputData.masterData.RegistrationGetSample[0].npreregno : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ? inputData.masterData.RegistrationComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\");\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_SAMPLECOMMENTS\":\n                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n                activeName = \"RegistrationComment\";\n                dataStateName = \"sampleCommentsDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n          masterData['RegistrationComment'] = RegistrationComment;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        } // let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex // inputParam:inputData\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample; // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n      let isGrandChildGetRequired = false;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo,\n          masterData\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\n        };\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n                subsamplecheck = false;\n                dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        //sortData(response.data);\n        //ALPD-1609\n        sortData(response.data, 'descending', 'npreregno');\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n        let oldSelectedSubSample = inputData.masterData.selectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationTestAttachment = [];\n        let RegistrationParameter = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else if (inputData.checkBoxOperation === 7) {\n          let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\n            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [] //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : []; // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n\n              let RegistrationParameter1 = [...resultResponseData];\n              let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\n        masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } //  let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            // activeTabIndex: inputData.activeTabIndex,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo //  inputParam\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTabIndex: inputData.activeTabIndex,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n          dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\n        }\n\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined,\n          showConfirmAlert: false,\n          acceptConfirmMessage: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.info(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.info(intl.formatMessage({\n          id: response.data.rtn\n        }));\n      }\n    }).catch(error => {\n      // toast.error(error.message);           \n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        //toast.info(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              acceptConfirmMessage: error.response.data.rtn,\n              acceptConfirmParam: {\n                inputParam,\n                masterData: LoginProps\n              },\n              loading: false\n            }\n          });\n        } else {\n          //toast.error(error.message);\n          toast.warn(intl.formatMessage({\n            id: error.response.data[\"rtn\"]\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              acceptConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\n      if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\n        value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode);\n\n        if (value) {\n          return toast.info(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n          }));\n        }\n\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\"); // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\n\n        if (selectedsample && selectedsample.length > 0) {\n          const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n          if (findTransactionStatus.length === 1) {\n            if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n              if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\n                // if (selectsubsample && selectsubsample.length > 0) {\n                //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\n                //\n                //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \n                //     {                    \n                const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n                if (findApprovalVersion.length === 1) {\n                  const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                  if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                    {\n                      inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample && [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\");\n                      dispatch(initRequest(true));\n                      const urlArray = [];\n                      const TestGet = rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                      });\n                      urlArray[0] = TestGet;\n                      const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", { ...inputParam\n                      });\n                      urlArray[1] = TestPackageGet;\n                      Axios.all(urlArray).then(response => {\n                        let PackageData = [];\n                        const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n                        PackageData = PackageDataMap.get(\"OptionList\");\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            availableTest: response[0].data,\n                            AllTest: response[0].data,\n                            TestPackage: PackageData,\n                            loadChildTest: true,\n                            loading: false,\n                            ncontrolCode,\n                            screenName: \"IDS_TEST\",\n                            operation: \"create\",\n                            openModal: true,\n                            parentPopUpSize: \"lg\",\n                            selectedRecord: {},\n                            showSample: undefined\n                          }\n                        });\n                      }).catch(error => {\n                        dispatch({\n                          type: DEFAULT_RETURN,\n                          payload: {\n                            loading: false\n                          }\n                        });\n\n                        if (error.response.status === 500) {\n                          toast.error(error.message);\n                        } else {\n                          toast.info(this.props.formatMessage({\n                            id: error.response.data\n                          }));\n                        }\n                      });\n                    } else {\n                    toast.info(intl.formatMessage({\n                      id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                    }));\n                  }\n                } else {\n                  toast.info(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                  }));\n                } //     }\n                //     else {\n                //         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\n                //     }\n                // }                               \n\n              } else {\n                toast.info(intl.formatMessage({\n                  id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\"\n                }));\n              }\n            } else {\n              ////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n              toast.info(intl.formatMessage({\n                id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n              }));\n            }\n          } else {\n            toast.info(intl.formatMessage({\n              id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n            }));\n          }\n        } else {\n          toast.info(intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SELECTSUBSAMPLE\"\n        }));\n      }\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest: sortData(RegistrationGetTest, \"descending\", \"ntransactiontestcode\"),\n        selectedTest: response.data[\"RegistrationGetTest\"],\n        RegistrationParameter: response.data.RegistrationParameter // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'no';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            createTestConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              createTestConfirmMessage: error.response.data.rtn,\n              createTestConfirmParam: {\n                inputParam,\n                masterData,\n                modalName\n              },\n              //[modalName]: false,\n              loading: false,\n              loadChildTest: true,\n              showSample: undefined //openModal: false,\n              //selectedRecord: {}\n\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              [modalName]: false,\n              loading: false,\n              loadChildTest: false,\n              showSample: undefined,\n              openModal: false,\n              selectedRecord: {},\n              createTestConfirmMessage: undefined\n            }\n          });\n          toast.info(error.response.data.rtn);\n        }\n      }\n    });\n  };\n};\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    let masterData = inputParam[\"masterData\"];\n\n    if (masterData[\"selectedSample\"].length > 1 || masterData[\"selectedSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editRegParam[\"getSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSample\"] = [];\n    masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n    //     parentcolumnlist: columnList,\n    //     childcolumnlist: childColumnList,\n    //     userinfo: userInfo\n    // })\n\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno,\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo: userInfo\n    });\n    urlArray = [timeZoneService, selectedRegistration, dateService];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[1].data[\"EditData\"]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      }; // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\n      //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      }; //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\n      // selectedRecord, childColumnList, withoutCombocomponent)\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.info(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes\n        } = [];\n        const selectedSpec = {};\n        Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response[1].data[\"AgaramTree\"];\n        ActiveKey = response[1].data[\"FocusKey\"];\n        FocusKey = response[1].data[\"ActiveKey\"];\n        OpenNodes = response[1].data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n\n        if (inputParam.editRegParam[\"getSampleChildDetail\"] === true) {\n          masterData = sortData({ ...masterData,\n            ...response[1].data[\"SampleChildDetail\"]\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            AgaramTree,\n            FocusKey,\n            ActiveKey,\n            OpenNodes,\n            selectedSpec,\n            Specification,\n            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            // currentTime,\n            operation: \"update\",\n            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\n            // PopUpLabel: popUpLabel,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData,\n            childColumnList,\n            comboComponents,\n            withoutCombocomponent,\n            columnList,\n            masterData //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        // sortData(response.data);\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\"); //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n\n        masterData = { ...masterData,\n          selectedSample: response.data[\"selectedSample\"],\n          // selectedSubSample: masterData[\"selectedSubSample\"],\n          //selectedTest:masterData[\"selectedTest\"],\n          // RegistrationGetTest,\n          // RegistrationGetSubSample,\n          RegistrationParameter: masterData[\"RegistrationParameter\"]\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            openPortal: false,\n            loading: false,\n            showConfirmAlert: false,\n            regDateEditConfirmMessage: undefined,\n            loadEsign: false,\n            openModal: false,\n            loadPreregister: false,\n            selectedRecord: {},\n            showSample: undefined\n          }\n        }); // let inputData = {\n        //     masterData,\n        //     selectedTest: masterData.selectedTest,\n        //     ntransactiontestcode: masterData.selectedTest ?\n        //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n        //     npreregno: masterData.selectedSample ?\n        //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n        //     userinfo: inputParam.inputData.userinfo,\n        //     activeTestTab : masterData.activeTestTab,\n        //     screenName: masterData.activeTestTab,\n        //     resultDataState: inputParam.resultDataState,\n        //     testCommentDataState: inputParam.testCommentDataState,\n        // }\n        // dispatch(getTestChildTabDetail(inputData, true))\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\") //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: {},\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\n      }\n\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\n  return function (dispatch) {\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true),\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      });\n      urlArray[2] = TestGet;\n      const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage\n      });\n      urlArray[5] = TestPackageGet;\n    }\n\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    urlArray[3] = currentDate;\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    urlArray[4] = dateService;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n      let TestCombined = [];\n      let lstComponent = [];\n      let PackageData = [];\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\");\n\n        if (lstComponent.length > 0) {\n          selectedRecord1['ncomponentcode'] = { ...lstComponent[0]\n          };\n          selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n          selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n          selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n        }\n      } else {\n        //if (specBasedTestPackage) {\n        const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n        PackageData = PackageDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n        //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n        // } \n        // }\n        // else {\n\n        TestCombined = response[2].data; // }\n      }\n\n      const comboData1 = newcomboData.comboData;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      });\n      const inputParam = {\n        screenName: intl.formatMessage({\n          id: \"IDS_SUBSAMPLE\"\n        }),\n        showSaveContinue: false,\n        parentPopUpSize: \"lg\",\n        loading: false,\n        lstComponent,\n        openModal: true,\n        operation: \"create\",\n        loadRegSubSample: true,\n        selectedRecord: selectedRecord1,\n        regSubSamplecomboData: comboData1,\n        regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent,\n        TestCombined,\n        regparentSubSampleColumnList: regcolumnList,\n        regchildSubSampleColumnList: regchildColumnList,\n        ncontrolCode: ncontrolcode,\n        timeZoneList,\n        defaultTimeZone,\n        masterData,\n        specBasedComponent,\n        specBasedTestPackage,\n        TestPackage: PackageData,\n        //ALPD-624\n        testskip: 0,\n        subsampleskip: 0\n      };\n\n      if (specBasedComponent) {\n        dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSubSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createSubSample\", inputParam.inputData).then(response => {\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = response.data[\"selectedSubSample\"]; // RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      let RegistrationParameter = response.data[\"RegistrationParameter\"];\n      RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode');\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadRegSubSample: false,\n        showConfirmAlert: false,\n        subSampleConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'yes';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); //    dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         openModal: false,\n      //         loadEsign: false,\n      //         loading: false,\n      //         showSample: undefined,\n      //         selectedRecord: {},\n      //         loadRegSubSample:false\n      //     }\n      // });\n    }).catch(error => {\n      // console.log(error);\n      // toast.error(error.message);\n      // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            subSampleConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              subSampleConfirmMessage: error.response.data.rtn,\n              subSampleConfirmParam: {\n                inputParam\n              },\n              loading: false\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              subSampleConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    let {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedSubSample\"].length > 1 || masterData[\"selectedSubSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSubSample\"] = [];\n    masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\n    inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\n    inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\n    inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\n    inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"]; //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\n\n    const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n\n    if (ntransactionsamplecode === undefined) {\n      toast.info(intl.formattedMessage({\n        id: \"IDS_SELECTVALIDSUBSAMPLE\"\n      }));\n    } else {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      //     parentcolumnlist: columnList,\n      //     childcolumnlist: childColumnList,\n      //     userinfo: userInfo\n      // })\n\n      const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editSubSampleRegParam,\n        ntransactionsamplecode,\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo: userInfo\n      });\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo: userInfo\n      });\n      urlArray = [timeZoneService, selectedRegistration, dateService]; // if(specBasedComponent){\n      //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\n      //         ...Map,\n      //         specBasedComponent: specBasedComponent\n      //     })\n      //     urlArray.push(ComponentTestBySpec) \n      // }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = { ...response[1].data[\"EditData\"]\n        };\n        selectedRecord = { ...selectedRecord,\n          ...selectedRecord['jsondata']\n        };\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userInfo.stimezoneid,\n          value: userInfo.ntimezonecode\n        }; // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\n        //     toast.info(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\n        // }\n        //else {\n        //               let lstComponent=[]\n\n        if (specBasedComponent) {\n          selectedRecord[\"ncomponentcode\"] = {\n            label: selectedRecord[\"scomponentname\"],\n            value: selectedRecord[\"ncomponentcode\"]\n          };\n        }\n\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        } // withoutCombocomponent.map(date => {\n        //     if (date.inputtype === 'date')\n        //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n        //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n        // })\n\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        selectedRecord = { ...selectedRecord\n        };\n\n        if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\n          masterData = { ...masterData,\n            ...response[1].data[\"SubSampleChildDetail\"]\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true,\n            screenName: \"IDS_SUBSAMPLE\",\n            operation: \"update\",\n            specBasedComponent,\n            //  regRecordToEdit:recordToEdit\n            masterData\n          }\n        }); // }\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n      //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\n\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        // selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        // RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          })\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelSubSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      delete response.data[\"RegistrationGetSample\"];\n      delete response.data[\"RegistrationGetSubSample\"];\n      delete response.data[\"RegistrationGetTest\"];\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode === \"\") {\n      inputData.ntransactiontestcode = \"0\";\n    }\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.info(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        }\n      });\n    }\n  };\n}\n\nconst toTimestamp = strDate => {\n  // const dt = new Date(strDate).getTime();\n  // return dt / 1000;\n  const dt = strDate.getTime();\n  return dt;\n};\n\nexport function getDynamicFilter(inputParam) {\n  if (inputParam.component.inputtype === 'frontendsearchfilter') {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const source = inputParam.component.source;\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const lstData = response.data[inputParam.component.label]; // const responseparam={}\n\n        const gridColumns = [];\n        const fields = [];\n        const datefileds = [];\n        const multilingual = [];\n        inputParam.component.filterfields.map(item => {\n          fields.push(filterObject(item, languageTypeCode, response.data));\n\n          if (item.ismultilingual) {\n            multilingual.push(item.columnname);\n          }\n\n          if (item.filterinputtype === \"date\") {\n            datefileds.push(item.columnname);\n          }\n\n          if (item.filterinputtype !== 'predefinednumeric') {\n            gridColumns.push(creategridColumns(item, languageTypeCode));\n          }\n        });\n        const optionList = lstData.map(item => {\n          const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n          datefileds.map(x => {\n            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]));\n          });\n          multilingual.map(mul => {\n            jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n          });\n          return jsondata;\n        });\n        let map = {};\n\n        if (inputParam.type === 'design') {\n          map = { ...map,\n            showFilter: true,\n            selectedComponentpath: inputParam.selectedComponentpath\n          };\n        } else {\n          map = { ...map,\n            loadCustomSearchFilter: true\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            gridColumns,\n            fields,\n            //  loadCustomSearchFilter: true\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            kendoFilter: inputParam.component.kendoFilter || {\n              logic: \"and\",\n              filters: []\n            },\n            //awesomeTree: undefined,\n            //awesomeConfig: undefined,\n            // showFilter: true,\n            ...map\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    };\n  } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component,\n        userinfo: inputParam.userinfo\n      }).then(response => {\n        const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n        const {\n          fields,\n          gridColumns\n        } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data);\n        let map = {};\n        let awesomeTree = inputParam.component.awesomeTree ? checkTree(loadTree(inputParam.component.awesomeTree), inputParam.component.awesomeConfig) : undefined;\n\n        if (inputParam.component.awesomeTree && inputParam.component.filterquery && inputParam.component.filterquery !== '') {\n          map = {\n            filterquery: inputParam.component.filterquery\n          };\n\n          if (inputParam.type === 'design') {\n            map = { ...map,\n              filterquery: inputParam.component.filterquery,\n              selectedFieldRecord: { ...inputParam.component,\n                awesomeTree: awesomeTree\n              }\n            };\n          }\n        } else {\n          map = {\n            filterquery: ''\n          };\n\n          if (inputParam.type === 'design') {\n            map = { ...map,\n              filterquery: inputParam.component.filterquery,\n              selectedFieldRecord: { ...inputParam.component,\n                awesomeTree: awesomeTree\n              }\n            };\n          }\n        }\n\n        if (inputParam.type === 'design') {\n          map = { ...map,\n            showFilter: true,\n            selectedComponentpath: inputParam.selectedComponentpath\n          };\n        } else {\n          map = { ...map,\n            loadCustomSearchFilter: true\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: [],\n            gridColumns,\n            fields,\n            // loadCustomSearchFilter: true\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode],\n            seletedFilterComponent: inputParam.component,\n            kendoSkip: 0,\n            kendoTake: 5,\n            awesomeTree,\n            onExecute: true,\n            // awesomeConfig: inputParam.component.awesomeConfig || undefined,\n            // showFilter: true,\n            ...map\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    };\n  }\n}\nlet datapredef = {};\n\nconst CustomFilter = props => {\n  const {\n    filter,\n    data = [],\n    defaultItem\n  } = props;\n\n  const onChange = event => {\n    props.onFilterChange.call(undefined, {\n      nextFilter: { ...props.filter,\n        value: event.target.value.value\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ComboBox, {\n    onChange: onChange,\n    data: filter.field ? datapredef[filter.field] : [],\n    textField: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4500,\n      columnNumber: 12\n    }\n  });\n};\n\nexport function creategridColumns(item, languageTypeCode) {\n  let obj = {};\n\n  if (item.filterinputtype !== 'predefinednumeric') {\n    return {\n      field: item.columnname,\n      title: item.displayname[languageTypeCode],\n      width: \"250px\"\n    };\n  }\n}\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\n  let obj = {};\n  obj['fields'] = {};\n  obj['gridColumns'] = [];\n  filterFields.map(item => {\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n      const optionList = resposedata[item.predefinedtablename].map(data => {\n        const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n        jsondata['title'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n        jsondata['value'] = jsondata[item.predefinedvaluemember];\n        return jsondata;\n      });\n      datapredef[item.columnname] = optionList;\n    }\n\n    switch (item.filterinputtype) {\n      case \"text\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"text\",\n          valueSources: [\"value\", \"func\"],\n          mainWidgetProps: {\n            \"valueLabel\": \"Name\",\n            \"valuePlaceholder\": intl.formatMessage({\n              id: \"IDS_ENTER\"\n            }) + \" \" + item.displayname[languageTypeCode]\n          }\n        };\n        break;\n\n      case \"numeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"number\",\n          valueSources: [\"value\"],\n          fieldSettings: { ...item.numericcondition\n          }\n        };\n        break;\n\n      case \"date\":\n        obj['fields'][item.type === 'dynamic' ? \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"date\",\n          valueSources: [\"value\"]\n        };\n        break;\n\n      case \"predefinednumeric\":\n        obj['fields'][item.type === 'dynamic' ? \"(jsondata->>'\" + item.columnname + \"')::int\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n\n      case \"predefinedtext\":\n        obj['fields'][item.type === 'dynamic' ? item.ismultilingual ? \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" : \"jsondata->>'\" + item.columnname + \"'\" : \"\\\"\" + item.columnname + \"\\\"\"] = {\n          label: item.displayname[languageTypeCode],\n          type: \"select\",\n          valueSources: [\"value\"],\n          fieldSettings: {\n            listValues: datapredef[item.columnname]\n          }\n        };\n        break;\n    }\n\n    const gridColumns = creategridColumns(item, languageTypeCode);\n\n    if (item.filterinputtype !== 'predefinednumeric') {\n      obj['gridColumns'].push(gridColumns);\n    }\n  });\n  return obj;\n}\nexport function filterObject(item, languageTypeCode, resposedata) {\n  let obj = {};\n  let preobj = {};\n\n  if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\n    const optionList = resposedata[item.predefinedtablename].map(data => {\n      const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ? JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata;\n      jsondata['text'] = item.predefinedismultilingual ? jsondata[item.predefineddisplaymember][languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US'] : jsondata[item.predefineddisplaymember];\n      jsondata['value'] = jsondata[item.predefinedvaluemember]; //delete jsondata.jsondata\n\n      return jsondata;\n    });\n    datapredef[item.columnname] = optionList; // preobj = {\n    //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\n    //     predefinedvaluemember: item.columnname\n    // }\n  }\n\n  switch (item.filterinputtype) {\n    case \"text\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n\n    case \"numeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: NumericFilter,\n        operators: Operators.numeric\n      };\n\n    case \"date\":\n      return obj = {\n        name: item.columnname + \"timestamp\",\n        label: item.displayname[languageTypeCode],\n        filter: DateFilter,\n        operators: Operators.date\n      };\n\n    case \"predefinednumeric\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.numeric\n      };\n\n    case \"predefinedtext\":\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: CustomFilter,\n        operators: Operators.text\n      };\n\n    default:\n      return obj = {\n        name: item.columnname,\n        label: item.displayname[languageTypeCode],\n        filter: TextFilter,\n        operators: Operators.text\n      };\n  } //return obj;\n\n}\nexport function getDynamicFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode]\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: inputParam.component.displayname[languageTypeCode]\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\n  let splitChar = \"/\";\n\n  if (dateValue !== undefined) {\n    const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\");\n    if (index !== -1) splitChar = userInfo.ssitedatetime.substring(index, index + 1);\n  } //   console.log(\"splitChar:\", splitChar);\n\n\n  if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\n    const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0]; // console.log(\"firstField:\", firstField);\n\n    const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \";\n    const datetime = dateValue.split(timeSplitChar);\n    const dateArray = datetime[0].split(splitChar);\n\n    if (firstField === \"dd\") {\n      const day = dateArray[0];\n      const month = dateArray[1];\n      const year = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else if (firstField === \"yyyy\") {\n      const year = dateArray[0];\n      const month = dateArray[1];\n      const day = dateArray[2];\n      const time = datetime[1] || \"00:00:00\";\n      const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\n      return new Date(formatted);\n    } else {\n      return new Date(dateValue);\n    }\n  } else {\n    return dateValue;\n  }\n}\nexport function preRegDispatch(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...inputParam\n      }\n    });\n  };\n}\nexport function validateEsignforRegistration(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"registration\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"preregister\":\n        dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editSample\":\n        dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\n        break;\n\n      case \"accept\":\n        dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"quarantine\":\n        dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelTest\":\n        dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelSample\":\n        dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"addregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"deleteregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"printer\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"editSubSample\":\n        dispatch(onUpdateSubSampleRegistration(screenData.inputParam, screenData.masterData)); //ALPD-1128\n\n        break;\n\n      case \"cancelSubSample\":\n        dispatch(cancelSubSampleAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function getStorageCategoryForSendToStore(storeInputParam, selectedRecord, sampleDetails) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const userInfo = storeInputParam.userInfo;\n    let masterData = storeInputParam.masterData;\n    const sendToStoreId = storeInputParam.controlcode;\n    const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': userInfo\n    });\n    const getUnit = rsapi.post(\"/unit/getUnit\", {\n      'userinfo': userInfo\n    });\n    const getApprovedLocation = rsapi.post(\"/samplestoragemaster/getSampleQty\", sampleDetails);\n    let urlArray = [geStorageCategory, getUnit, getApprovedLocation]; ///////////////////////////////\n\n    if (sampleDetails.needSubSample) {\n      if (masterData[\"selectedSubSample\"].length > 1 || masterData[\"selectedSubSample\"].findIndex(x => x[storeInputParam.primaryKeyName] === storeInputParam[\"mastersendtostore\"][storeInputParam.primaryKeyName]) === -1) {\n        storeInputParam.subSampleRegParam[\"getSubSampleChildDetail\"] = true;\n      }\n\n      masterData[\"selectedSubSample\"] = [];\n      masterData[\"selectedSubSample\"].push(storeInputParam[\"mastersendtostore\"]); // storeInputParam.subSampleRegParam[\"npreregno\"] = storeInputParam[\"mastersendtostore\"][\"npreregno\"];\n      // storeInputParam.subSampleRegParam[\"checkBoxOperation\"] = 3;\n      // storeInputParam.subSampleRegParam[\"nfilterstatus\"] = storeInputParam[\"mastersendtostore\"][\"ntransactionstatus\"];\n      // storeInputParam.subSampleRegParam[\"napprovalconfigcode\"] = storeInputParam[\"mastersendtostore\"][\"napprovalconfigcode\"];\n\n      let inputParamData = {\n        nsampletypecode: storeInputParam[\"subSampleRegParam\"].nsampletypecode,\n        nregtypecode: storeInputParam[\"subSampleRegParam\"].nregtypecode,\n        nregsubtypecode: storeInputParam[\"subSampleRegParam\"].nregsubtypecode,\n        npreregno: String(storeInputParam[\"mastersendtostore\"].npreregno),\n        ntransactionsamplecode: String(storeInputParam[\"mastersendtostore\"].ntransactionsamplecode),\n        ntransactionstatus: storeInputParam[\"mastersendtostore\"].ntransactionstatus,\n        napprovalconfigcode: storeInputParam[\"mastersendtostore\"].napprovalconfigcode,\n        activeTestTab: storeInputParam[\"subSampleRegParam\"].activeTestTab,\n        activeSampleTab: storeInputParam[\"subSampleRegParam\"].activeSampleTab,\n        activeSubSampleTab: storeInputParam[\"subSampleRegParam\"].activeSubSampleTab,\n        userinfo: storeInputParam.userInfo,\n        ndesigntemplatemappingcode: storeInputParam[\"subSampleRegParam\"].ndesigntemplatemappingcode,\n        checkBoxOperation: storeInputParam[\"masterData\"].checkBoxOperation,\n        nneedsubsample: storeInputParam[\"subSampleRegParam\"].nneedsubsample\n      };\n      urlArray.push(rsapi.post(\"registration/getRegistrationTest\", inputParamData));\n    } else {\n      if (masterData[\"selectedSample\"].length > 1 || masterData[\"selectedSample\"].findIndex(x => x[storeInputParam.primaryKeyName] === storeInputParam[\"mastersendtostore\"][storeInputParam.primaryKeyName]) === -1) {\n        storeInputParam.mainSampleRegParam[\"getSampleChildDetail\"] = true;\n      }\n\n      masterData[\"selectedSample\"] = [];\n      masterData[\"selectedSample\"].push(storeInputParam[\"mastersendtostore\"]);\n      const inputParamData = {\n        nsampletypecode: storeInputParam.mainSampleRegParam.nsampletypecode,\n        nregtypecode: storeInputParam.mainSampleRegParam.nregtypecode,\n        nregsubtypecode: storeInputParam.mainSampleRegParam.nregsubtypecode,\n        npreregno: String(storeInputParam.mastersendtostore.npreregno),\n        ntransactionstatus: storeInputParam.mastersendtostore.ntransactionstatus,\n        napprovalconfigcode: storeInputParam.mastersendtostore.napprovalconfigcode,\n        activeTestTab: storeInputParam.mainSampleRegParam.activeTestTab,\n        activeSampleTab: storeInputParam.mainSampleRegParam.activeTestTab,\n        activeSubSampleTab: storeInputParam.mainSampleRegParam.activeTestTab,\n        userinfo: storeInputParam.userInfo,\n        ndesigntemplatemappingcode: storeInputParam.mainSampleRegParam.ndesigntemplatemappingcode,\n        nneedsubsample: storeInputParam.mainSampleRegParam.nneedsubsample,\n        ntype: storeInputParam.masterData.checkBoxOperation === 7 ? 4 : undefined,\n        checkBoxOperation: storeInputParam.masterData.nneedsubsample === true ? storeInputParam.masterData.checkBoxOperation === 5 ? 3 : storeInputParam.masterData.checkBoxOperation : storeInputParam.mastersendtostore.checkBoxOperation\n      };\n      urlArray.push(rsapi.post(\"registration/getRegistrationSubSample\", inputParamData));\n    }\n\n    Axios.all(urlArray).then(response => {\n      //console.log(\"res:\", response);\n      if (response[2].data[\"ReturnStatus\"] !== undefined) {\n        toast.info(response[2].data[\"ReturnStatus\"]);\n        masterData = { ...masterData,\n          ...response[3].data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            // openChildModal: true,\n            // operation: \"sendToStore\",\n            ncontrolcode: sendToStoreId,\n            selectedRecord,\n            npreregno: sampleDetails.npreregno,\n            ntransactionsamplecode: sampleDetails.ntransactionsamplecode\n          }\n        });\n      } else {\n        const conditionMap = constructOptionList(response[0].data, \"nstoragecategorycode\", \"sstoragecategoryname\", false, false, true);\n        const conditionMaster = conditionMap.get(\"OptionList\");\n        const conditionUnitMap = constructOptionList(response[1].data, \"nunitcode\", \"sunitname\", false, false, true);\n        const conditionUnitMaster = conditionUnitMap.get(\"OptionList\");\n        let isneedSubSampleQty = false;\n        let approvedTreeData = [];\n        selectedRecord[\"nsamplestoragelocationcode\"] = [];\n        selectedRecord[\"nstoragecategorycode\"] = [];\n        selectedRecord[\"nsampleqty\"] = undefined;\n        selectedRecord[\"sampleToStore\"] = sampleDetails.sample === undefined ? \"\" : sampleDetails.sample;\n\n        if (response[2].data !== null && response[2].data[\"isNeedSubSampleQty\"] && response[2].data[\"isNeedSubSampleQty\"] !== \"\") {\n          isneedSubSampleQty = false;\n        } else {\n          isneedSubSampleQty = true;\n        }\n\n        if (response[2].data !== null && response[2].data.unit && response[2].data.unit.value !== undefined) {\n          conditionUnitMaster.map(item => item.value === response[2].data.unit.value ? selectedRecord[\"nunitcode\"] = {\n            \"label\": item.label,\n            \"value\": item.value,\n            \"item\": item.item\n          } : \"\");\n        }\n\n        masterData = { ...masterData,\n          storageCategory: conditionMaster,\n          approvedTreeData,\n          unitMaster: conditionUnitMaster,\n          ...response[3].data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            openChildModal: true,\n            operation: \"sendToStore\",\n            ncontrolcode: sendToStoreId,\n            selectedRecord,\n            npreregno: sampleDetails.npreregno,\n            ntransactionsamplecode: sampleDetails.ntransactionsamplecode,\n            isneedSubSampleQty\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 503) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam.inputData[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function autoExternalComponentLoadBasedOnSpec(dispatchData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getSampleBasedOnExternalOrder\", {\n      'nexternalordercode': dispatchData.selectedRecord[\"Order\"] ? dispatchData.selectedRecord[\"Order\"].value : -1,\n      \"nexternalordersamplecode\": dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1\n    }).then(response => {\n      let Sample = response.data.Sample; //console.log(\"sample:\", Sample);\n\n      let Test1 = response.data.Test;\n      let subSampleDataGridList = [];\n      let Component = [];\n      const Test = {};\n      Sample.map((sample, index) => {\n        let saveComponent = {};\n        saveComponent[\"slno\"] = index;\n        saveComponent['jsondata'] = {};\n        saveComponent['jsonuidata'] = {};\n        saveComponent['ncomponentcode'] = sample['ncomponentcode'];\n        saveComponent['nspecsampletypecode'] = sample['nspecsampletypecode'];\n        saveComponent['scomponentname'] = sample['scomponentname']; //saveComponent['jsondata']['ncomponentcode'] = { label: sample['scomponentname'], value: sample['ncomponentcode'] }\n        // saveComponent['jsonuidata']['ncomponentcode'] = sample['scomponentname']\n        //  saveComponent['jsondata']['scomponentname'] =  sample['scomponentname']\n\n        saveComponent['jsonuidata']['scomponentname'] = sample['scomponentname'];\n        saveComponent['jsondata']['External Sample ID_child'] = sample['sexternalsampleid'];\n        saveComponent['jsonuidata']['External Sample ID_child'] = sample['sexternalsampleid'];\n        saveComponent['jsondata']['sampleorderid'] = sample['sexternalsampleid'];\n        saveComponent['jsonuidata']['sampleorderid'] = sample['sexternalsampleid'];\n        saveComponent['jsondata']['nsampleordercode'] = dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1;\n        saveComponent['jsonuidata']['nsampleordercode'] = dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1; // saveComponent['jsondata']['Quantity_child'] = sample['nsampleqty']\n        // saveComponent['jsonuidata']['Quantity_child'] = sample['nsampleqty']\n        // saveComponent['jsondata']['Unit Name_child'] = { label: sample['sunitname'], value: sample['nunitcode'] }\n        // saveComponent['jsonuidata']['Unit Name_child'] = sample['sunitname']\n\n        subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n          ...saveComponent\n        });\n        Component.unshift(saveComponent);\n        const filterTest = Test1.filter(x => x.nexternalordersamplecode === sample.nexternalordersamplecode);\n        filterTest.map(x => {\n          x['slno'] = index;\n        }); //selectedTestData=[...selectedTestData,...filterTest]\n\n        Test[index] = filterTest;\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...dispatchData,\n          Component,\n          selectedComponent: Component.length > 0 ? { ...Component[0]\n          } : {},\n          selectComponent: {},\n          SelectedTest: Component.length > 0 ? Test[Component[0].slno] : [],\n          Test: Test,\n          selectedTestData: {},\n          subSampleDataGridList\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getBarcodeAndPrinterService(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const getPrinter = rsapi.post(\"barcode/getPrinter\", inputParam.userInfo);\n    const getControlBasedBarcode = rsapi.post(\"barcode/getControlBasedBarcode\", inputParam);\n    urlArray = [getPrinter, getControlBasedBarcode]; // rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\n\n    Axios.all(urlArray).then(response => {\n      let selectedPrinterData = {\n        sprintername: {\n          value: response[0].data[0].sprintername,\n          label: response[0].data[0].sprintername,\n          item: response[0].data[0]\n        },\n        sbarcodename: {}\n      };\n      const printer = constructOptionList(response[0].data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n      const barcode = constructOptionList(response[1].data || [], \"sbarcodename\", \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            control: inputParam.control\n          },\n          printer,\n          barcode,\n          selectedPrinterData,\n          operation: \"printer\",\n          screenName: \"IDS_PRINTBARCODE\",\n          //dataToPrint: inputParam.selectedGoodsIn.nrmsno,\n          ncontrolcode: inputParam.ncontrolcode,\n          loading: false,\n          openModal: true,\n          loadPrinter: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getOrderDetails(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/externalorder/getDraftExternalOrderDetails\", {\n      sexternalorderid: inputData.sexternalorderid,\n      userinfo: inputData.userinfo\n    }).then(response => {\n      let masterData = { ...inputData.masterData\n      }; //orders:response.data.ExternalOrder\n\n      let selectedRecord = { ...inputData.selectedRecord\n      };\n      selectedRecord['orders'] = response.data.ExternalOrder;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onUpdateCancelExternalOrder(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/externalorder/onUpdateCancelExternalOrder\", { ...inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        orders: []\n      };\n\n      if (response.data[\"rtn\"] === true) {\n        toast.info(intl.formatMessage({\n          id: response.data[\"rtn\"]\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: {},\n          masterData,\n          loading: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getOutSourceSite(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/externalorder/getOutSourceSite\", { ...inputParam.inputData\n    }).then(response => {\n      //console.log(\"response if loop\");\n      const siteListMap = constructOptionList(response.data || [], 'nsitecode', 'ssitename', undefined, undefined, undefined, 'ndefaultstatus') || [];\n      const siteList = siteListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          outSourceSiteList: siteList,\n          loading: false,\n          openModal: true,\n          outsourcetest: true,\n          outSourceSiteData: inputParam.inputData,\n          screenName: inputParam.screenName,\n          parentPopUpSize: \"lg\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.error(error.response.data);\n      }\n    });\n  };\n}\nexport function outsourceTest(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); //console.log(\"inputData:\", inputData);\n\n    rsapi.post(\"/externalorder/outSourceTest\", { ...inputData\n    }).then(response => {\n      //console.log(\"Test OutSourced\");\n      const OutSourcedTestGet = response.data[\"OutSourcedTestGet\"]; // console.log(\"OutSourcedTestGet:\", OutSourcedTestGet);\n\n      masterData = { ...masterData,\n        selectedTest: OutSourcedTestGet,\n        RegistrationGetTest: replaceUpdatedObject(OutSourcedTestGet, masterData.RegistrationGetTest, \"ntransactiontestcode\")\n      };\n      toast.info(response.data[\"Msg\"]);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          outsourcetest: false,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["React","rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","childComboLoadForEdit","DEFAULT_RETURN","intl","initRequest","SampleType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","Operators","TextFilter","NumericFilter","DateFilter","ComboBox","Utils","QbUtils","leftArrowClass","checkTree","loadTree","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getSubSampleChildTabDetail","inputData","ntransactionsamplecode","length","inputParamData","userinfo","url","activeSubSampleTab","responseData","selectedSubSample","showFilter","screenName","activeTestTab","selectedId","status","info","selectedSample","activeSampleTab","formatMessage","id","getRegTypeChange","getRegSubTypeChange","onApprovalConfigVersionChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","selectedComponent","undefined","SelectedTest","Object","keys","popUptestDataState","skip","take","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","nneedsubsample","RealRegSubTypeValue","TestData","loadComponent","selectComponent","showSaveContinue","SelectedSource","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","searchSampleRef","current","searchSubSampleRef","searchTestRef","testskip","testtake","subsampletake","subsampleskip","showSample","getTreeByProduct","comboData","inputParam","nsampletypecode","CLINICALTYPE","nportalrequired","YES","nordertypecode","nallottedspeccode","jsondata","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","selectedSpec","sversion","ntemplatemanipulationcode","dispatchData","subSampleDataGridList","autoExternalComponentLoadBasedOnSpec","masterStatus","addMaster","masterIndex","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","openPortal","openModal","getAllTest","specBasedComponent","selectPackage1","specBasedTestPackage","selectPackage","conditionalTestPackage","PackageData","TestCombined","componentTest","TestPackage","loadTest","getTest","TestGet","TestPackageGet","PackageDataMap","AllTest","addsubSample","columnList","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","isServiceRequired","SubSamplecomboData","timeZoneService","actualService","parentcolumnlist","filter","inputtype","readonly","childcolumnlist","currentDate","dateService","datecolumnlist","timeZoneMap","defaultTimeZone","newcomboData","slanguagetypecode","selectedRecord1","comboData1","map","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","i","radioOptions","tags","text","loadSubSample","saveContinueData","parentSubSampleColumnList","childSubSampleColumnList","selectedTestData","selectedobject","Reg","testPackageTest","subSampleBased","action","ntestpackagecode","availableTest","ntestgrouptestcode","addSubSampleSaveContinue","Map1","selectedTestPackageData","selectedTestPackageData1","some","y","selectedTestData1","editSubSample","Componnet","comp","nregsubtypecode","portalOrder","containerType","containerList","nportalordercode","push","insertRegistration","rtn","UpdateExternalOrderStatus","RegistrationGetSample","RegistrationGetSubSample","RegistrationGetTest","selectedTest","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","preregConfirmMessage","postParamList","NeedConfirmAlert","preregConfirmParam","insertRegistrationScheduler","SchedulerTransaction","getRegistrationSample","selectedFilter","getRegistrationsubSampleDetail","nregtypecode","npreregno","ntransactionstatus","napprovalconfigcode","ndesigntemplatemappingcode","ntype","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","activeTabIndex","RegistrationTestComment","RegistrationTestAttachment","RegistrationParameter","RegistrationComment","wholeSubSampleList","b","forEach","subsample","index","includes","splice","ResponseData","RegistrationTestComment1","ntransactiontestcode","RegistrationTestAttachment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","bool","wholeTestList","test","keepOld","sampleGridDataState","sort","isGrandChildGetRequired","TestSelected","subSampleSelected","filterTestSameOldSelectedTest","join","filterSelectedSubSample","getRegistrationTestDetail","getTestChildTabDetailRegistration","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","selectedTransactionsamplecode","RegistrationSampleComment","RegistrationSampleAttachment","testList","wholeSubsampleList","toString","selectedTransactioncode","acceptRegistration","acceptConfirmMessage","acceptConfirmParam","warn","addMoreTest","ncontrolCode","sampleList","obj","slice","selectedsample","findTransactionStatus","Set","REJECT","CANCELLED","RELEASED","findApprovalVersion","napprovalversioncode","findSampleSpec","loadChildTest","props","createRegistrationTest","modalName","classUrl","createTestConfirmMessage","createTestConfirmParam","getEditRegistrationComboService","comboComponents","withoutCombocomponent","primaryKeyName","editRegParam","mastertoedit","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","sregsubtypename","updateRegistration","regDateEditConfirmMessage","regEditParam","cancelTestAction","cancelSampleAction","addsubSampleRegistration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","saveSubSample","subSampleConfirmMessage","subSampleConfirmParam","getEditSubSampleComboService","editSubSampleRegParam","formattedMessage","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","selectedSampleCode","selectedTestCode","activeTabId","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory","toTimestamp","strDate","dt","getTime","getDynamicFilter","languageTypeCode","lstData","gridColumns","fields","datefileds","multilingual","filterfields","filterObject","ismultilingual","columnname","filterinputtype","creategridColumns","JSON","parse","rearrangeDateFormatforKendoDataTool","mul","selectedComponentpath","loadCustomSearchFilter","lstPatient","displayname","seletedFilterComponent","kendoSkip","kendoTake","kendoFilter","logic","filters","filterObjectForReactAwesomeFilter","awesomeTree","awesomeConfig","filterquery","selectedFieldRecord","onExecute","datapredef","CustomFilter","defaultItem","onChange","onFilterChange","call","nextFilter","target","field","title","width","filterFields","resposedata","predefinedtablename","predefinedismultilingual","predefineddisplaymember","predefinedvaluemember","valueSources","mainWidgetProps","fieldSettings","numericcondition","listValues","preobj","name","operators","numeric","getDynamicFilterExecuteData","nformcode","dateValue","splitChar","ssitedatetime","indexOf","substring","firstField","split","timeSplitChar","datetime","dateArray","day","month","year","time","formatted","preRegDispatch","validateEsignforRegistration","toLowerCase","dispatchMethods","screenData","getStorageCategoryForSendToStore","storeInputParam","sampleDetails","sendToStoreId","controlcode","geStorageCategory","getUnit","getApprovedLocation","needSubSample","subSampleRegParam","String","mainSampleRegParam","mastersendtostore","conditionMap","conditionMaster","conditionUnitMap","conditionUnitMaster","isneedSubSampleQty","approvedTreeData","sample","unit","storageCategory","unitMaster","portallist","stringify","headers","Sample","Test1","saveComponent","filterTest","nexternalordersamplecode","getBarcodeAndPrinterService","getPrinter","getControlBasedBarcode","selectedPrinterData","sprintername","sbarcodename","printer","barcode","control","loadPrinter","getOrderDetails","sexternalorderid","ExternalOrder","onUpdateCancelExternalOrder","orders","getOutSourceSite","siteListMap","siteList","outSourceSiteList","outsourcetest","outSourceSiteData","outsourceTest","OutSourcedTestGet"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString,\r\n    fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement,\r\n    replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList,\r\n    constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { //RegistrationSubType, RegistrationType, \r\n    SampleType,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\nimport {\r\n    Operators,\r\n    TextFilter,\r\n    NumericFilter,\r\n    // BooleanFilter,\r\n    DateFilter,\r\n    // EnumFilter,\r\n    //  EnumFilterProps,\r\n} from \"@progress/kendo-react-data-tools\";\r\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\r\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\nimport { leftArrowClass } from '@progress/kendo-react-layout';\r\nconst { checkTree, loadTree } = QbUtils;\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactionsamplecode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSubSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"comments/getSubSampleComment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSubSample: inputData.selectedSubSample,\r\n                                    // selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSubSampleTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                activeTestTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                selectedId: null\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.info(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n\r\n            toast.info(intl.formatMessage({ id: \"IDS_PLSSELECTASAMPLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTemplateTypeByRegSubType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getApprovalConfigBasedTemplateDesign\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                        selectedRecord, popUptestDataState: { skip: 0, take: 10 }\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno,\r\n            nneedsubsample: LoginProps.masterData.RealRegSubTypeValue.nneedsubsample\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map.nsampletypecode === SampleType.CLINICALTYPE &&\r\n            Map.nportalrequired === transactionStatus.YES && selectedRecord[\"Order Type\"] && selectedRecord[\"Order Type\"].value == 2 ? { ...Map, nordertypecode: selectedRecord[\"Order Type\"].value, nallottedspeccode: selectedRecord[\"Order\"] && selectedRecord[\"Order\"].item.jsondata.nallottedspeccode } : Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                if (Map.nsampletypecode === SampleType.CLINICALTYPE &&\r\n                    Map.nportalrequired && Map.nportalrequired === 3\r\n                    && selectedRecord[\"Order Type\"] && selectedRecord[\"Order Type\"].value === 2) {\r\n\r\n                    let dispatchData = {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: []\r\n                    }\r\n\r\n\r\n                    if (Specification.length > 0) {\r\n                        dispatch(autoExternalComponentLoadBasedOnSpec(dispatchData))\r\n                    } else {\r\n                        let masterStatus = ''\r\n                        if (selectedRecord[\"Order\"] && selectedRecord[\"Order\"].item.jsondata.nallottedspeccode) {\r\n                            masterStatus = intl.formatMessage({ id: \"IDS_SELECTEDEXTERNALORDERSPECISRETIRED\" })\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: { ...dispatchData, masterStatus }\r\n                        })\r\n                    }\r\n\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            Specification,\r\n                            selectedRecord,\r\n                            AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                            Test: [],\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            comboData,\r\n                            ...inputParam,\r\n                            selectedSpec,\r\n                            Component: [],\r\n                            selectComponent: {},\r\n                            selectedComponent: {},\r\n                            subSampleDataGridList: [],\r\n                            addMaster: false,\r\n                            masterIndex: undefined\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            //ALPD-1793_fix\r\n                           // SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.info(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                //    ntestpackagecode:selectPackage.ntestpackagecode.value\r\n\r\n            })\r\n                .then(response => {\r\n                    let PackageData = [];\r\n                    let TestCombined = [];\r\n                    //   const TestCombined = response.data;\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, TestPackage: PackageData, selectPackage: [],\r\n                            loadTest: true, openChildModal: false,\r\n                            ChildscreenName: intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                            screenName: intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                            operation: \"create\",\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent, selectPackage1, specBasedTestPackage, selectPackage) {\r\n    return function (dispatch) {\r\n\r\n\r\n        // if (Object.keys(objComponent).length > 0) {\r\n        const urlArray = []\r\n\r\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: objComponent.nspecsampletypecode,\r\n            slno: objComponent.slno,\r\n            nneedsubsample: nneedsubsample,\r\n            nallottedspeccode: objComponent.nallottedspeccode,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: true,\r\n            //    ntestpackagecode:selectPackage.ntestpackagecode.value\r\n\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: objComponent.nspecsampletypecode,\r\n            slno: objComponent.slno,\r\n            nneedsubsample: nneedsubsample,\r\n            nallottedspeccode: objComponent.nallottedspeccode,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: true,\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            // const TestCombined = [];\r\n            let PackageData = [];\r\n            //  if (specBasedTestPackage) {\r\n            const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                \"stestpackagename\", undefined, undefined, true);\r\n            PackageData = PackageDataMap.get(\"OptionList\");\r\n            //    }\r\n            //    else {\r\n            let TestData = response[0].data;\r\n            let Test = LoginProps.Test || [];\r\n            let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n            let TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n            //    }\r\n            // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n            //\"stestsynonym\", undefined, undefined, true);\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    TestCombined, TestPackage: PackageData, selectPackage: [], AllTest: TestData,\r\n                    loadTest: true, openChildModal: false,\r\n                    ChildscreenName: intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                    screenName: intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                    operation: \"create\",\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\", loading: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n        // } else {\r\n        //     toast.info(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        // }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired,\r\n    SubSamplecomboData, selectedRecord, conditionalTestPackage, specBasedTestPackage, LoginProps) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList ? columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)) : [],\r\n                childcolumnlist: childColumnList ? childColumnList : [],\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent,\r\n                    //   conditionalTestPackage:true\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            } else {\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    nneedsubsample: Map[\"nneedsubsample\"],\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage: true,\r\n                    specBasedTestPackage: specBasedTestPackage\r\n                })\r\n                urlArray[2] = TestGet;\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    // slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    //   specBasedTestPackage: specBasedTestPackage,\r\n                    //  conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[5] = TestPackageGet;\r\n            }\r\n            const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                userinfo\r\n            })\r\n            urlArray[3] = currentDate\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo\r\n            })\r\n            urlArray[4] = dateService\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = []\r\n\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n                    if (lstComponent.length > 0) {\r\n                        selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                        selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                        selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                        selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    }\r\n\r\n                } else {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n\r\n\r\n                const inputParam = {\r\n                    ChildscreenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    showSaveContinue: true,\r\n                    openChildModal: false,\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openPortal: true,\r\n                    openModal: false,\r\n                    operation: \"create\",\r\n                    loadSubSample: true,\r\n                    selectComponent: selectedRecord1,\r\n                    saveContinueData: { ...selectedRecord1 },\r\n                    SubSamplecomboData: comboData1,\r\n                    SubSamplecomboComponents,\r\n                    SubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    parentSubSampleColumnList: columnList,\r\n                    childSubSampleColumnList: childColumnList,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    selectPackage: [],\r\n                    TestPackage: PackageData\r\n                }\r\n\r\n                if (specBasedComponent) {\r\n\r\n\r\n                    dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\r\n\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList,\r\n            SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n        return (dispatch) => {\r\n            if (!specBasedComponent) {\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    // nneedsubsample: Map[\"nneedsubsample\"],\r\n                    ...Map,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage: true,\r\n                    specBasedTestPackage: specBasedTestPackage\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                    //  nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                    nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    specBasedTestPackage: specBasedTestPackage,\r\n                    conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[3] = TestPackageGet;\r\n                Axios.all(urlArray).then(response => {\r\n                    let TestCombined = []\r\n                    let PackageData = []\r\n\r\n                    //  if (!specBasedTestPackage) {\r\n                    TestCombined = response[0].data\r\n                    // } \r\n                    // else {\r\n                    const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n                    // if (PackageData.length === 0) {\r\n                    //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    //} \r\n\r\n                    // }\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\"\r\n                            || componentrow.inputtype === \"checkbox\"\r\n                            || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                            if (componentrow['radiodefaultvalue']) {\r\n                                if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                    let val = ''\r\n                                    componentrow.radiodefaultvalue &&\r\n                                        componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                            val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                        })\r\n\r\n                                    selectedRecord1[componentrow.label] = val\r\n\r\n                                } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue : \"\";\r\n                                } else {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue.label : \"\";\r\n                                }\r\n\r\n                            } else {\r\n                                if (componentrow.inputtype === \"radio\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                        componentrow.radioOptions.tags[0].text : \"\";\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                            screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent: [],\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            saveContinueData: { ...selectedRecord1 },\r\n                            TestCombined: TestCombined,\r\n                            TestPackage: PackageData\r\n                        }\r\n                    });\r\n                })\r\n            } else {\r\n\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                Axios.all(urlArray).then(response => {\r\n\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    // const lstComponent =  response.data.lstComponent\r\n                    let lstComponent = response[0].data.lstComponent //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\r\n                    const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                    if (lstComponent.length > 0) {\r\n                        selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                        selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                        selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                        selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    }\r\n\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\"\r\n                            || componentrow.inputtype === \"checkbox\"\r\n                            || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                            if (componentrow['radiodefaultvalue']) {\r\n                                if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                    let val = ''\r\n                                    componentrow.radiodefaultvalue &&\r\n                                        componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                            val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                        })\r\n\r\n                                    selectedRecord1[componentrow.label] = val\r\n\r\n                                } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue : \"\";\r\n                                } else {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue.label : \"\";\r\n                                }\r\n\r\n                            } else {\r\n                                if (componentrow.inputtype === \"radio\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                        componentrow.radioOptions.tags[0].text : \"\";\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n                    const inputParam = {\r\n                        ChildscreenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                        screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        saveContinueData: { ...selectedRecord1 },\r\n                        TestCombined: [],\r\n                        selectedTestData: [],\r\n                        selectPackage: []\r\n                    }\r\n                    if (specBasedComponent) {\r\n                        dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\r\n\r\n                    } else {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        Component = Component ? Component : []\r\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage,\r\n            nneedsubsample: selectedobject.nneedsubsample\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n        Axios.all(urlArray).then(response => {\r\n            let PackageData = []\r\n            let TestData = []\r\n            // if (specBasedTestPackage) {\r\n            const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                \"stestpackagename\", undefined, undefined, true);\r\n            PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n            // if (PackageData.length === 0) {\r\n            //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n            // } \r\n            //   }\r\n            //    else {\r\n            TestData = response[0].data;\r\n            //  }\r\n            //let Test = [];\r\n            // Test[selectedobject.slno] = TestData;\r\n            const Map = {}\r\n            if (Reg) {\r\n                Map[\"selectedRecord\"] = selectedobject\r\n            } else {\r\n                Map[\"selectComponent\"] = selectedobject\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...inputParam, TestCombined: TestData, AllTest: TestData, TestPackage: PackageData, ...Map, loading: false, selectedTestData: [],\r\n                    selectPackage: []\r\n\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n// export function testPackageTest(selectedobject, Reg, specBasedComponent, Component,specBasedTestPackage,conditionalTestPackage,selectComponent,objComponent,LoginProps,selectPackage,subSampleBased,selectedSpec,nneedsubsample) {\r\nexport function testPackageTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, subSampleBased, selectedSpec, nneedsubsample, action) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        Component = Component ? Component : []\r\n        // rsapi.post(\"/registration/getTestBasesdTestPackage\", {\r\n        //     nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\r\n        //     slno:subSampleBased?Component ? Object.keys(Component).length + 1 : 1:selectComponent.slno,\r\n        //     specBasedComponent: specBasedComponent,\r\n        //     ntestpackagecode: selectPackage.ntestpackagecode.value,\r\n        //     nallottedspeccode:selectedSpec!==undefined?selectedSpec.value:selectedobject.nallottedspeccode\r\n\r\n        // })\r\n        rsapi.post(\"/registration/getTestBasesdTestPackage\", {\r\n            // nspecsampletypecode:!nneedsubsample?selectedSpec.item.nspecsampletypecode: Object.keys(selectedobject).length!==0?selectedobject.nspecsampletypecode:selectComponent.nspecsampletypecode,\r\n            nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\r\n            //     slno: subSampleBased ? Component ? Object.keys(Component).length + 1 : 1 : selectComponent.slno,\r\n            specBasedComponent: specBasedComponent,\r\n            ntestpackagecode: selectPackage.ntestpackagecode.value,\r\n            nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\r\n\r\n        })\r\n            .then(response => {\r\n                const Map = {}\r\n                let TestData = response.data;\r\n                let Test = (action !== \"AddSubSample\") ? (LoginProps.Test || []) : [];\r\n                \r\n                let componentTest = [];\r\n                if (subSampleBased) {\r\n                    componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\r\n\r\n                } else {\r\n                    componentTest = objComponent && Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n\r\n                }\r\n                const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n\r\n                delete selectedobject.ntestgrouptestcode;\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectPackage\"] = selectPackage\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableTest, TestCombined, ...Map, loading: false, selectedTestData: [],AllTest: LoginProps.TestCombined\r\n                        //, selectPackage: []\r\n                        // TestCombined,loadTest: true, openChildModal: false,\r\n                        // ChildscreenName: \"Test\",\r\n                        //  screenName: \"Test\",\r\n                        // operation: \"create\",\r\n                        //  childoperation: \"create\",\r\n                        //   parentPopUpSize: \"lg\", loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function addSubSampleSaveContinue(Map1, Map,\r\n    specBasedComponent, Component, selectedTestData, lstComponent) {\r\n\r\n    //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n    //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n    return (dispatch) => {\r\n        if (!specBasedComponent) {\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                nspecsampletypecode: Map[\"nspecsampletypecode\"],\r\n                slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\r\n                specBasedComponent: specBasedComponent, nneedsubsample: Map[\"nneedsubsample\"]\r\n            }).then(response => {\r\n                let TestCombined = response.data\r\n                // let selectedTestPackageData = selectedTestPackageData && selectedTestPackageData.length > 0 ? selectedTestData : []\r\n\r\n                let selectedTestPackageData = selectedTestData && selectedTestData.length > 0 ? selectedTestData : []\r\n\r\n                const selectedTestPackageData1 = TestCombined.filter(function (x) {\r\n                    return selectedTestPackageData.some(function (y) {\r\n                        return x[\"ntestpackagetestcode\"] === y.value\r\n                    })\r\n                });\r\n                selectedTestData = selectedTestData && selectedTestData.length > 0 ? selectedTestPackageData : []\r\n\r\n                const selectedTestData1 = TestCombined.filter(function (x) {\r\n                    return selectedTestData.some(function (y) {\r\n                        return x[\"ntestgrouptestcode\"] === y.value\r\n                    })\r\n                });\r\n\r\n\r\n                selectedTestData = constructOptionList(selectedTestData1, \"ntestgrouptestcode\", \"stestsynonym\")\r\n                selectedTestData[\"ntestgrouptestcode\"] = selectedTestData.get(\"OptionList\")\r\n                selectedTestPackageData = constructOptionList(selectedTestPackageData1, \"ntestpackagetestcode\", \"stestpackagename\")\r\n                selectedTestPackageData[\"ntestpackagetestcode\"] = selectedTestPackageData.get(\"OptionList\")\r\n\r\n                // Map1.selectComponent = {};\r\n                Map1.selectComponent = { ...Map1.saveContinueData };\r\n                // Map1.selectComponent[\"ncomponentcode\"] = {};\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...Map1,\r\n                        loading: false,\r\n                        TestCombined,\r\n                        selectPackage: [],\r\n                        //TestPackage\r\n                        //selectedTestData,\r\n                        //selectedTestPackageData,\r\n                        selectedTestData: [],\r\n                        selectedTestPackageData: [],\r\n                        masterStatus: intl.formatMessage({ id: \"IDS_SAVESUCCESSFULLY\" })\r\n                    }\r\n                });\r\n            })\r\n        }\r\n        else {\r\n            // lstComponent = lstComponent.filter(x => x.item.nspecsampletypecode !== Map1.selectComponent[\"nspecsampletypecode\"])\r\n            // Map1.selectComponent = {};\r\n            // Map1.selectComponent[\"ncomponentcode\"] = {};           \r\n            // Map1.selectComponent[\"Sample Name\"] = \"\";\r\n            Map1.selectComponent = { ...Map1.saveContinueData, \"ncomponentcode\": {} };\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...Map1,\r\n                    loading: false,\r\n                    TestCombined: [],\r\n                    selectPackage: [],\r\n                    TestPackage: [],\r\n                    selectedTestData: [],\r\n                    selectedTestPackageData: [],\r\n                    lstComponent,\r\n                    masterStatus: intl.formatMessage({ id: \"IDS_SAVESUCCESSFULLY\" })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function editSubSample(Map,\r\n    component, userInfo, specBasedComponent,\r\n    SubSamplecomboData, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        let Componnet = {}\r\n        if (specBasedComponent) {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map\r\n            });\r\n        }\r\n        urlArray = [Componnet]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let comp = []\r\n                if (specBasedComponent) {\r\n                    comp = response[0].data.lstComponent\r\n                }\r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                if (Map.nregsubtypecode === 6) {\r\n                    let portalOrder = component['Container Type'] || {}\r\n                    let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    let containerList = []\r\n                    const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    containerType.map(x => {\r\n                        if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                            containerList.push(x)\r\n                        }\r\n                    })\r\n\r\n                    SubSamplecomboData['Container Type'] = containerList\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent, SubSamplecomboData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\r\n                    }\r\n\r\n                    let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    let selectedSubSample = RegistrationGetSubSample;\r\n                    RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                    let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                        selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                        RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                        selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                    }\r\n                    // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                        RegistrationGetTest = masterData.RegistrationGetTest;\r\n                    }\r\n\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        SelectedTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        SelectedTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: [],\r\n                        preregConfirmMessage: undefined\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);             \r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                preregConfirmMessage: error.response.data.rtn,\r\n                                preregConfirmParam: { inputParam, masterData },\r\n                                loading: false,\r\n                                showSample: undefined,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, preregConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistrationScheduler(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/schedulerinsertRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                //     let selectedSample = response.data[\"selectedSample\"];\r\n                //     let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                //     let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                //     let selectedSubSample = RegistrationGetSubSample;\r\n                //     RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                //     let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                //     if (inputParam.inputData.nneedsubsample) {\r\n                //         RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc')\r\n                //         selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                //         RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode)\r\n                //         selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                //     }\r\n                //     // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                //     if (inputParam.multipleselectionFlag) {\r\n                //         selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                //         updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                //         RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                //         RegistrationGetTest = masterDat..a.RegistrationGetTest;\r\n                //     }\r\n\r\n\r\n                //     masterData = {\r\n                //         ...masterData, ...response.data,\r\n                //         selectedSample, selectedSubSample, selectedTest,\r\n                //         RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                //     }\r\n                let respObject = {\r\n                    masterData: { ...masterData, SchedulerTransaction: response[\"data\"].SchedulerTransaction },\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {},\r\n                    subSampleDataGridList: []\r\n                }\r\n                // inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n                // } else {\r\n                //     toast.info(response.data.rtn);\r\n                //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                // }\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeTestTab,\r\n            activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            //ntype: inputData.checkBoxOperation === 7 ? 2 : undefined,\r\n            ntype: inputData.checkBoxOperation === 7 ? 4 : undefined, //ALPD-497\r\n            checkBoxOperation: inputData.nneedsubsample === true ?\r\n                inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"npreregno\");\r\n                    sortData(response.data['RegistrationAttachment']);\r\n                    sortData(response.data['RegistrationComment']);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationComment = [];\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 7) {\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     APSelectedTest:responseData.APSelectedTest,\r\n                            //     AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            // }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\r\n                            }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [\r\n                                                // ...inputData.masterData.RegistrationTestAttachment, \r\n                                                ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [\r\n                                        // ...inputData.masterData.RegistrationParameter, \r\n                                        ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;\r\n\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationComment = [];\r\n\r\n                        if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            let npreregno;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                                npreregno = inputData.masterData.RegistrationGetSample.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetSample[0].npreregno : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                        masterData['RegistrationComment'] = RegistrationComment;\r\n\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    // let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            // inputParam:inputData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        } \r\n        else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n\r\n\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            } \r\n            else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: TestSelected ? TestSelected : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                        activeTabIndex: inputData.activeTabIndex\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    //sortData(response.data);\r\n                    //ALPD-1609\r\n                    sortData(response.data, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    let oldSelectedSubSample = inputData.masterData.selectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationParameter = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let testList = reArrangeArrays(inputData.masterData.RegistrationGetSubSample, response.data.RegistrationGetTest, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                            RegistrationGetTest: testList ? testList.length > 0 ? testList : [] : [],\r\n                            //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    //  let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            // activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            //  inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\r\n                    }\r\n\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined,\r\n                        showConfirmAlert: false,\r\n                        acceptConfirmMessage: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\"\r\n                        || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.info(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.info(intl.formatMessage({ id: response.data.rtn }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // toast.error(error.message);           \r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                } else {\r\n                    //toast.info(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                acceptConfirmMessage: error.response.data.rtn,\r\n                                acceptConfirmParam: { inputParam, masterData: LoginProps },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //toast.error(error.message);\r\n                        toast.warn(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, acceptConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\r\n            if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\r\n                value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n                const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\r\n                // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\r\n                if (selectedsample && selectedsample.length > 0) {\r\n                    const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n                    if (findTransactionStatus.length === 1) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                            if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\r\n\r\n                                // if (selectsubsample && selectsubsample.length > 0) {\r\n                                //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\r\n                                //\r\n                                //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \r\n                                //     {                    \r\n\r\n                                const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                                if (findApprovalVersion.length === 1) {\r\n                                    const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                    {\r\n                                        inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample &&\r\n                                            [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                        dispatch(initRequest(true));\r\n                                        const urlArray = []\r\n                                        const TestGet = rsapi.post(\"/registration/getMoreTest\", {\r\n                                            ...inputParam\r\n                                        });\r\n                                        urlArray[0] = TestGet;\r\n                                        const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", {\r\n                                            ...inputParam\r\n                                        });\r\n                                        urlArray[1] = TestPackageGet;\r\n\r\n                                        Axios.all(urlArray)\r\n                                            .then(response => {\r\n                                                let PackageData = []\r\n                                                const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\",\r\n                                                    \"stestpackagename\", undefined, undefined, true);\r\n                                                PackageData = PackageDataMap.get(\"OptionList\");\r\n                                                dispatch({\r\n                                                    type: DEFAULT_RETURN,\r\n                                                    payload: {\r\n                                                        availableTest: response[0].data,\r\n                                                        AllTest: response[0].data,\r\n                                                        TestPackage: PackageData,\r\n                                                        loadChildTest: true,\r\n                                                        loading: false, ncontrolCode,\r\n                                                        screenName: \"IDS_TEST\",\r\n                                                        operation: \"create\",\r\n                                                        openModal: true,\r\n                                                        parentPopUpSize: \"lg\",\r\n                                                        selectedRecord: {},\r\n                                                        showSample: undefined\r\n                                                    }\r\n                                                });\r\n                                            })\r\n                                            .catch(error => {\r\n                                                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                                if (error.response.status === 500) {\r\n                                                    toast.error(error.message);\r\n                                                } else {\r\n                                                    toast.info(this.props.formatMessage({ id: error.response.data }));\r\n                                                }\r\n                                            });\r\n                                    } else {\r\n                                        toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                    }\r\n                                } else {\r\n                                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                                }\r\n                                //     }\r\n                                //     else {\r\n                                //         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\r\n                                //     }\r\n                                // }                               \r\n                            }\r\n                            else {\r\n                                toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\" }));\r\n                            }\r\n                        }\r\n                        else {\r\n                            ////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                            toast.info(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                        }\r\n                    } else {\r\n                        toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                    }\r\n                } else {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n                }\r\n            } else {\r\n                toast.info(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest: sortData(RegistrationGetTest, \"descending\", \"ntransactiontestcode\"),\r\n                    selectedTest: response.data[\"RegistrationGetTest\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'no';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, createTestConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                createTestConfirmMessage: error.response.data.rtn,\r\n                                createTestConfirmParam: { inputParam, masterData, modalName },\r\n\r\n                                //[modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: true,\r\n                                showSample: undefined,\r\n                                //openModal: false,\r\n                                //selectedRecord: {}\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                [modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: false,\r\n                                showSample: undefined,\r\n                                openModal: false,\r\n                                selectedRecord: {},\r\n                                createTestConfirmMessage: undefined\r\n                            }\r\n                        });\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n        let masterData = inputParam[\"masterData\"];\r\n\r\n        if (masterData[\"selectedSample\"].length > 1 ||\r\n            masterData[\"selectedSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editRegParam[\"getSampleChildDetail\"] = true;\r\n        }\r\n        masterData[\"selectedSample\"] = [];\r\n        masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n        //     parentcolumnlist: columnList,\r\n        //     childcolumnlist: childColumnList,\r\n        //     userinfo: userInfo\r\n        // })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\r\n            ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: userInfo\r\n        })\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo: userInfo\r\n        })\r\n\r\n        urlArray = [timeZoneService, selectedRegistration, dateService]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n                // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n\r\n                //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                // selectedRecord, childColumnList, withoutCombocomponent)\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                    const selectedSpec = {}\r\n                    Specification = constructOptionList(response[1].data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response[1].data[\"AgaramTree\"];\r\n                    ActiveKey = response[1].data[\"FocusKey\"];\r\n                    FocusKey = response[1].data[\"ActiveKey\"];\r\n                    OpenNodes = response[1].data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ?\r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                    selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n\r\n                    if (inputParam.editRegParam[\"getSampleChildDetail\"] === true) {\r\n                        masterData = sortData({ ...masterData, ...response[1].data[\"SampleChildDetail\"] })\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            AgaramTree,\r\n                            FocusKey,\r\n                            ActiveKey,\r\n                            OpenNodes,\r\n                            selectedSpec,\r\n                            Specification,\r\n                            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            // currentTime,\r\n                            operation: \"update\",\r\n                            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            // PopUpLabel: popUpLabel,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList,\r\n                            masterData\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.info(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    // sortData(response.data);\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                    //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedSample: response.data[\"selectedSample\"],\r\n                        // selectedSubSample: masterData[\"selectedSubSample\"],\r\n                        //selectedTest:masterData[\"selectedTest\"],\r\n                        // RegistrationGetTest,\r\n                        // RegistrationGetSubSample,\r\n                        RegistrationParameter: masterData[\"RegistrationParameter\"]\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                            regDateEditConfirmMessage: undefined, loadEsign: false, openModal: false,\r\n                            loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                        }\r\n                    });\r\n                    // let inputData = {\r\n                    //     masterData,\r\n                    //     selectedTest: masterData.selectedTest,\r\n                    //     ntransactiontestcode: masterData.selectedTest ?\r\n                    //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    //     npreregno: masterData.selectedSample ?\r\n                    //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    //     userinfo: inputParam.inputData.userinfo,\r\n                    //     activeTestTab : masterData.activeTestTab,\r\n                    //     screenName: masterData.activeTestTab,\r\n                    //     resultDataState: inputParam.resultDataState,\r\n                    //     testCommentDataState: inputParam.testCommentDataState,\r\n                    // }\r\n                    // dispatch(getTestChildTabDetail(inputData, true))\r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n                    //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                    dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\r\n                }\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\r\n    return function (dispatch) {\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)),\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                nneedsubsample: Map[\"nneedsubsample\"]\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[5] = TestPackageGet;\r\n\r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = [];\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                    if (lstComponent.length > 0) {\r\n                        selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                        selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                        selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                        selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    }\r\n\r\n                } else {\r\n                    //if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n                    // }\r\n                    // else {\r\n                    TestCombined = response[2].data;\r\n                    // }\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                const inputParam = {\r\n                    screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    operation: \"create\",\r\n                    loadRegSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent,\r\n                    specBasedTestPackage,\r\n                    TestPackage: PackageData,\r\n                    //ALPD-624\r\n                    testskip: 0,\r\n                    subsampleskip: 0\r\n                }\r\n                if (specBasedComponent) {\r\n                    dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function saveSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                // let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample = response.data[\"selectedSubSample\"];// RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n\r\n                let RegistrationParameter = response.data[\"RegistrationParameter\"]\r\n\r\n                RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode')\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationParameter\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample: false,\r\n                    showConfirmAlert: false,\r\n                    subSampleConfirmMessage: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                //    dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         openModal: false,\r\n                //         loadEsign: false,\r\n                //         loading: false,\r\n                //         showSample: undefined,\r\n                //         selectedRecord: {},\r\n                //         loadRegSubSample:false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                // toast.error(error.message);\r\n                // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, subSampleConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                subSampleConfirmMessage: error.response.data.rtn,\r\n                                subSampleConfirmParam: { inputParam },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, subSampleConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n\r\n        if (masterData[\"selectedSubSample\"].length > 1 ||\r\n            masterData[\"selectedSubSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedSubSample\"] = [];\r\n        masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleRegParam[\"npreregno\"] = inputParam[\"mastertoedit\"][\"npreregno\"];\r\n        inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = 3;\r\n        inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n        //inputParam.editSubSampleRegParam[\"withoutgetparameter\"] = 3;\r\n\r\n        const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (ntransactionsamplecode === undefined) {\r\n            toast.info(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            //     parentcolumnlist: columnList,\r\n            //     childcolumnlist: childColumnList,\r\n            //     userinfo: userInfo\r\n            // })\r\n            const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", {\r\n                ...inputParam.editSubSampleRegParam, ntransactionsamplecode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo: userInfo\r\n            })\r\n\r\n\r\n            urlArray = [timeZoneService, selectedRegistration, dateService]\r\n            // if(specBasedComponent){\r\n            //     const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n            //         ...Map,\r\n            //         specBasedComponent: specBasedComponent\r\n            //     })\r\n            //     urlArray.push(ComponentTestBySpec) \r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                    // if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\r\n                    //     toast.info(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\r\n                    //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    // }\r\n\r\n                    //else {\r\n                    //               let lstComponent=[]\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    // withoutCombocomponent.map(date => {\r\n                    //     if (date.inputtype === 'date')\r\n                    //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                    //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\r\n                    // })\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            screenName: \"IDS_SUBSAMPLE\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData\r\n                        }\r\n                    })\r\n                    // }\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.info(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    // selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                    // RegistrationGetSubSample,\r\n                    RegistrationParameter: response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelSubSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                delete response.data[\"RegistrationGetSample\"];\r\n                delete response.data[\"RegistrationGetSubSample\"];\r\n                delete response.data[\"RegistrationGetTest\"];\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode === \"\") {\r\n            inputData.ntransactiontestcode = \"0\";\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.info(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false,\r\n                    activeTabIndex: inputData.activeTabIndex,\r\n                    activeTabId: inputData.activeTabId,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst toTimestamp = (strDate) => {\r\n    // const dt = new Date(strDate).getTime();\r\n    // return dt / 1000;\r\n    const dt = strDate.getTime();\r\n    return dt;\r\n}\r\n\r\nexport function getDynamicFilter(inputParam) {\r\n    if (inputParam.component.inputtype === 'frontendsearchfilter') {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilter\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const source = inputParam.component.source\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const lstData = response.data[inputParam.component.label]\r\n\r\n\r\n                    // const responseparam={}\r\n                    const gridColumns = []\r\n                    const fields = []\r\n                    const datefileds = []\r\n                    const multilingual = []\r\n                    inputParam.component.filterfields.map(item => {\r\n                        fields.push(filterObject(item, languageTypeCode, response.data));\r\n                        if (item.ismultilingual) {\r\n                            multilingual.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype === \"date\") {\r\n                            datefileds.push(item.columnname)\r\n                        }\r\n                        if (item.filterinputtype !== 'predefinednumeric') {\r\n                            gridColumns.push(creategridColumns(item, languageTypeCode,));\r\n                        }\r\n                    })\r\n\r\n                    const optionList = lstData.map(item => {\r\n                        const jsondata = item[source] ? item[source].value ?\r\n                            JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                        datefileds.map(x => {\r\n                            jsondata[x + \"timestamp\"] = toTimestamp(rearrangeDateFormatforKendoDataTool(inputParam.userinfo, jsondata[x]))\r\n                        })\r\n                        multilingual.map(mul => {\r\n                            jsondata[mul] =\r\n                                jsondata[mul][languageTypeCode] || jsondata[mul]['en-US']\r\n                                ;\r\n                        })\r\n\r\n\r\n                        return jsondata\r\n                    });\r\n                    let map = {\r\n                    }\r\n                    if (inputParam.type === 'design') {\r\n                        map = { ...map, showFilter: true, selectedComponentpath: inputParam.selectedComponentpath }\r\n                    } else {\r\n                        map = { ...map, loadCustomSearchFilter: true }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList, gridColumns, fields,\r\n                            //  loadCustomSearchFilter: true\r\n                            loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            kendoFilter: inputParam.component.kendoFilter || {\r\n                                logic: \"and\",\r\n                                filters: []\r\n                            },\r\n                            //awesomeTree: undefined,\r\n                            //awesomeConfig: undefined,\r\n                            // showFilter: true,\r\n                            ...map\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    } else if (inputParam.component.inputtype === \"backendsearchfilter\") {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/dynamicpreregdesign/getcustomsearchfilterpredefined\", { ...inputParam.component, userinfo: inputParam.userinfo })\r\n                .then(response => {\r\n                    const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                    const { fields, gridColumns } = filterObjectForReactAwesomeFilter(inputParam.component.filterfields, languageTypeCode, response.data)\r\n\r\n                    let map = {\r\n                    }\r\n                    let awesomeTree = inputParam.component.awesomeTree ? checkTree(loadTree(inputParam.component.awesomeTree), inputParam.component.awesomeConfig) : undefined\r\n                    if (inputParam.component.awesomeTree\r\n                        && inputParam.component.filterquery && inputParam.component.filterquery !== ''\r\n                    ) {\r\n                        map = {\r\n                            filterquery: inputParam.component.filterquery\r\n                        }\r\n\r\n                        if (inputParam.type === 'design') {\r\n                            map = {\r\n                                ...map, filterquery: inputParam.component.filterquery,\r\n                                selectedFieldRecord: { ...inputParam.component, awesomeTree: awesomeTree }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        map = {\r\n                            filterquery: ''\r\n                        }\r\n                        if (inputParam.type === 'design') {\r\n                            map = {\r\n                                ...map, filterquery: inputParam.component.filterquery,\r\n                                selectedFieldRecord: { ...inputParam.component, awesomeTree: awesomeTree }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputParam.type === 'design') {\r\n                        map = {\r\n                            ...map,\r\n                            showFilter: true, selectedComponentpath: inputParam.selectedComponentpath\r\n                        }\r\n                    } else {\r\n                        map = { ...map, loadCustomSearchFilter: true }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: [], gridColumns, fields,\r\n                            // loadCustomSearchFilter: true\r\n                            loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode],\r\n                            seletedFilterComponent: inputParam.component,\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            awesomeTree,\r\n                            onExecute: true,\r\n                            // awesomeConfig: inputParam.component.awesomeConfig || undefined,\r\n                            // showFilter: true,\r\n                            ...map\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nlet datapredef = {}\r\nconst CustomFilter = props => {\r\n    const { filter, data = [], defaultItem } = props;\r\n    const onChange = event => {\r\n        props.onFilterChange.call(undefined, {\r\n            nextFilter: { ...props.filter, value: event.target.value.value }\r\n        });\r\n    };\r\n\r\n    return <ComboBox onChange={onChange} data={filter.field ? datapredef[filter.field] : []} textField=\"text\" />;\r\n};\r\n\r\nexport function creategridColumns(item, languageTypeCode) {\r\n    let obj = {}\r\n    if (item.filterinputtype !== 'predefinednumeric') {\r\n        return {\r\n            field: item.columnname,\r\n            title: item.displayname[languageTypeCode], width: \"250px\"\r\n        }\r\n    }\r\n}\r\n\r\nexport function filterObjectForReactAwesomeFilter(filterFields, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    obj['fields'] = {}\r\n    obj['gridColumns'] = []\r\n    filterFields.map(item => {\r\n        if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n            const optionList = resposedata[item.predefinedtablename].map(data => {\r\n                const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                    JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n                jsondata['title'] = item.predefinedismultilingual ?\r\n                    jsondata[item.predefineddisplaymember]\r\n                    [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                    : jsondata[item.predefineddisplaymember];\r\n                jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n                return jsondata\r\n            });\r\n            datapredef[item.columnname] = optionList\r\n        }\r\n        switch (item.filterinputtype) {\r\n            case \"text\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\" + item.columnname + \"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"text\",\r\n                    valueSources: [\"value\", \"func\"],\r\n                    mainWidgetProps: {\r\n                        \"valueLabel\": \"Name\",\r\n                        \"valuePlaceholder\": intl.formatMessage({ id: \"IDS_ENTER\" }) + \" \" + item.displayname[languageTypeCode]\r\n                    }\r\n                }\r\n                break;\r\n            case \"numeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\" + item.columnname + \"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"number\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        ...item.numericcondition\r\n                    }\r\n                }\r\n                break;\r\n            case \"date\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\" + item.columnname + \"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"date\",\r\n                    valueSources: [\"value\"],\r\n                }\r\n                break;\r\n            case \"predefinednumeric\":\r\n                obj['fields'][item.type === 'dynamic' ?\r\n                    \"(jsondata->>'\" + item.columnname + \"')::int\" :\r\n                    \"\\\"\" + item.columnname + \"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"predefinedtext\":\r\n                obj['fields'][item.type === 'dynamic' ? item.ismultilingual ?\r\n                    \"jsondata->'\" + item.columnname + \"'->>'\" + languageTypeCode + \"'\" :\r\n                    \"jsondata->>'\" + item.columnname + \"'\" :\r\n                    \"\\\"\" + item.columnname + \"\\\"\"] = {\r\n                    label: item.displayname[languageTypeCode],\r\n                    type: \"select\",\r\n                    valueSources: [\"value\"],\r\n                    fieldSettings: {\r\n                        listValues: datapredef[item.columnname]\r\n                    }\r\n\r\n                }\r\n                break;\r\n        }\r\n        const gridColumns = creategridColumns(item, languageTypeCode)\r\n        if (item.filterinputtype !== 'predefinednumeric') {\r\n            obj['gridColumns'].push(gridColumns)\r\n        }\r\n\r\n\r\n    })\r\n    return obj;\r\n}\r\n\r\nexport function filterObject(item, languageTypeCode, resposedata) {\r\n    let obj = {}\r\n    let preobj = {}\r\n    if (item.filterinputtype === 'predefinednumeric' || item.filterinputtype === 'predefinedtext') {\r\n        const optionList = resposedata[item.predefinedtablename].map(data => {\r\n            const jsondata = data[item.predefinedtablename] ? data[item.predefinedtablename].value ?\r\n                JSON.parse(data[item.predefinedtablename].value) : data.jsondata : data.jsondata\r\n\r\n            jsondata['text'] = item.predefinedismultilingual ?\r\n                jsondata[item.predefineddisplaymember]\r\n                [languageTypeCode] || jsondata[item.predefineddisplaymember]['en-US']\r\n                : jsondata[item.predefineddisplaymember];\r\n            jsondata['value'] = jsondata[item.predefinedvaluemember]\r\n            //delete jsondata.jsondata\r\n            return jsondata\r\n        });\r\n        datapredef[item.columnname] = optionList\r\n        // preobj = {\r\n        //     predefdata: optionList, predefineddisplaymember: item.predefineddisplaymember,\r\n        //     predefinedvaluemember: item.columnname\r\n        // }\r\n    }\r\n    switch (item.filterinputtype) {\r\n        case \"text\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n        case \"numeric\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: NumericFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"date\":\r\n            return obj = {\r\n                name: item.columnname + \"timestamp\",\r\n                label: item.displayname[languageTypeCode],\r\n                filter: DateFilter,\r\n                operators: Operators.date,\r\n            }\r\n        case \"predefinednumeric\":\r\n\r\n\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.numeric,\r\n            }\r\n        case \"predefinedtext\":\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: CustomFilter,\r\n                operators: Operators.text,\r\n            }\r\n        default:\r\n            return obj = {\r\n                name: item.columnname,\r\n                label: item.displayname[languageTypeCode],\r\n                filter: TextFilter,\r\n                operators: Operators.text,\r\n            }\r\n\r\n    }\r\n\r\n    //return obj;\r\n}\r\n\r\nexport function getDynamicFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n        \r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            onExecute: false,\r\n                            loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode]\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            // onExecute: false,\r\n                            loading: false,\r\n                            screenName: inputParam.component.displayname[languageTypeCode]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function rearrangeDateFormatforKendoDataTool(userInfo, dateValue) {\r\n    let splitChar = \"/\";\r\n\r\n    if (dateValue !== undefined) {\r\n        const index = userInfo.ssitedatetime && userInfo.ssitedatetime.indexOf(\"/\" || \"-\")\r\n        if (index !== -1)\r\n            splitChar = userInfo.ssitedatetime.substring(index, index + 1)\r\n\r\n    }\r\n    //   console.log(\"splitChar:\", splitChar);\r\n    if ((splitChar === \"/\" || splitChar === \"-\") && typeof dateValue === \"string\") {\r\n        const firstField = userInfo.ssitedatetime && userInfo.ssitedatetime.split(splitChar)[0];\r\n        // console.log(\"firstField:\", firstField);\r\n        const timeSplitChar = dateValue.indexOf(\"T\") !== -1 ? \"T\" : \" \"\r\n        const datetime = dateValue.split(timeSplitChar);\r\n        const dateArray = datetime[0].split(splitChar);\r\n        if (firstField === \"dd\") {\r\n            const day = dateArray[0];\r\n            const month = dateArray[1];\r\n            const year = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else if (firstField === \"yyyy\") {\r\n            const year = dateArray[0];\r\n            const month = dateArray[1];\r\n            const day = dateArray[2];\r\n            const time = datetime[1] || \"00:00:00\";\r\n            const formatted = year + \"-\" + month + \"-\" + day + \"T\" + time;\r\n            return new Date(formatted);\r\n        }\r\n        else {\r\n            return new Date(dateValue);\r\n        }\r\n    }\r\n    else {\r\n        return dateValue;\r\n    }\r\n}\r\n\r\nexport function preRegDispatch(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                ...inputParam\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function validateEsignforRegistration(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"registration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"preregister\":\r\n                dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"editSample\":\r\n                dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"accept\":\r\n                dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"quarantine\":\r\n                dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelTest\":\r\n                dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelSample\":\r\n                dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"addregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"deleteregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"printer\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"editSubSample\":\r\n                dispatch(onUpdateSubSampleRegistration(screenData.inputParam, screenData.masterData));\r\n                //ALPD-1128\r\n                break;\r\n            case \"cancelSubSample\":\r\n                dispatch(cancelSubSampleAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getStorageCategoryForSendToStore(storeInputParam, selectedRecord, sampleDetails) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        const userInfo = storeInputParam.userInfo;\r\n        let masterData = storeInputParam.masterData;\r\n        const sendToStoreId = storeInputParam.controlcode;\r\n\r\n\r\n        const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", { 'userinfo': userInfo });\r\n        const getUnit = rsapi.post(\"/unit/getUnit\", { 'userinfo': userInfo });\r\n        const getApprovedLocation = rsapi.post(\"/samplestoragemaster/getSampleQty\", sampleDetails);\r\n\r\n        let urlArray = [geStorageCategory, getUnit, getApprovedLocation];\r\n\r\n        ///////////////////////////////\r\n        if (sampleDetails.needSubSample) {\r\n            if (masterData[\"selectedSubSample\"].length > 1 ||\r\n                masterData[\"selectedSubSample\"]\r\n                    .findIndex(x => x[storeInputParam.primaryKeyName] === storeInputParam[\"mastersendtostore\"][storeInputParam.primaryKeyName])\r\n                === -1) {\r\n                storeInputParam.subSampleRegParam[\"getSubSampleChildDetail\"] = true;\r\n            }\r\n\r\n            masterData[\"selectedSubSample\"] = [];\r\n            masterData[\"selectedSubSample\"].push(storeInputParam[\"mastersendtostore\"]);\r\n\r\n            // storeInputParam.subSampleRegParam[\"npreregno\"] = storeInputParam[\"mastersendtostore\"][\"npreregno\"];\r\n            // storeInputParam.subSampleRegParam[\"checkBoxOperation\"] = 3;\r\n            // storeInputParam.subSampleRegParam[\"nfilterstatus\"] = storeInputParam[\"mastersendtostore\"][\"ntransactionstatus\"];\r\n            // storeInputParam.subSampleRegParam[\"napprovalconfigcode\"] = storeInputParam[\"mastersendtostore\"][\"napprovalconfigcode\"];\r\n\r\n            let inputParamData = {\r\n                nsampletypecode: storeInputParam[\"subSampleRegParam\"].nsampletypecode,\r\n                nregtypecode: storeInputParam[\"subSampleRegParam\"].nregtypecode,\r\n                nregsubtypecode: storeInputParam[\"subSampleRegParam\"].nregsubtypecode,\r\n                npreregno: String(storeInputParam[\"mastersendtostore\"].npreregno),\r\n                ntransactionsamplecode: String(storeInputParam[\"mastersendtostore\"].ntransactionsamplecode),\r\n                ntransactionstatus: storeInputParam[\"mastersendtostore\"].ntransactionstatus,\r\n                napprovalconfigcode: storeInputParam[\"mastersendtostore\"].napprovalconfigcode,\r\n                activeTestTab: storeInputParam[\"subSampleRegParam\"].activeTestTab,\r\n                activeSampleTab: storeInputParam[\"subSampleRegParam\"].activeSampleTab,\r\n                activeSubSampleTab: storeInputParam[\"subSampleRegParam\"].activeSubSampleTab,\r\n                userinfo: storeInputParam.userInfo,\r\n                ndesigntemplatemappingcode: storeInputParam[\"subSampleRegParam\"].ndesigntemplatemappingcode,\r\n                checkBoxOperation: storeInputParam[\"masterData\"].checkBoxOperation,\r\n                nneedsubsample: storeInputParam[\"subSampleRegParam\"].nneedsubsample\r\n            }\r\n\r\n            urlArray.push(rsapi.post(\"registration/getRegistrationTest\", inputParamData));\r\n        }\r\n        else {\r\n            if (masterData[\"selectedSample\"].length > 1 ||\r\n                masterData[\"selectedSample\"]\r\n                    .findIndex(x => x[storeInputParam.primaryKeyName] === storeInputParam[\"mastersendtostore\"][storeInputParam.primaryKeyName])\r\n                === -1) {\r\n                storeInputParam.mainSampleRegParam[\"getSampleChildDetail\"] = true;\r\n            }\r\n            masterData[\"selectedSample\"] = [];\r\n            masterData[\"selectedSample\"].push(storeInputParam[\"mastersendtostore\"]);\r\n\r\n            const inputParamData = {\r\n                nsampletypecode: storeInputParam.mainSampleRegParam.nsampletypecode,\r\n                nregtypecode: storeInputParam.mainSampleRegParam.nregtypecode,\r\n                nregsubtypecode: storeInputParam.mainSampleRegParam.nregsubtypecode,\r\n                npreregno: String(storeInputParam.mastersendtostore.npreregno),\r\n                ntransactionstatus: storeInputParam.mastersendtostore.ntransactionstatus,\r\n                napprovalconfigcode: storeInputParam.mastersendtostore.napprovalconfigcode,\r\n                activeTestTab: storeInputParam.mainSampleRegParam.activeTestTab,\r\n                activeSampleTab: storeInputParam.mainSampleRegParam.activeTestTab,\r\n                activeSubSampleTab: storeInputParam.mainSampleRegParam.activeTestTab,\r\n                userinfo: storeInputParam.userInfo,\r\n                ndesigntemplatemappingcode: storeInputParam.mainSampleRegParam.ndesigntemplatemappingcode,\r\n                nneedsubsample: storeInputParam.mainSampleRegParam.nneedsubsample,\r\n                ntype: storeInputParam.masterData.checkBoxOperation === 7 ? 4 : undefined,\r\n                checkBoxOperation: storeInputParam.masterData.nneedsubsample === true ?\r\n                    storeInputParam.masterData.checkBoxOperation === 5 ? 3 : storeInputParam.masterData.checkBoxOperation : storeInputParam.mastersendtostore.checkBoxOperation\r\n\r\n            }\r\n            urlArray.push(rsapi.post(\"registration/getRegistrationSubSample\", inputParamData));\r\n\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                //console.log(\"res:\", response);\r\n                if (response[2].data[\"ReturnStatus\"] !== undefined) {\r\n                    toast.info(response[2].data[\"ReturnStatus\"]);\r\n                    masterData = {\r\n                        ...masterData, ...response[3].data\r\n                    };\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            // openChildModal: true,\r\n                            // operation: \"sendToStore\",\r\n                            ncontrolcode: sendToStoreId,\r\n                            selectedRecord,\r\n                            npreregno: sampleDetails.npreregno,\r\n                            ntransactionsamplecode: sampleDetails.ntransactionsamplecode\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    const conditionMap = constructOptionList(response[0].data, \"nstoragecategorycode\", \"sstoragecategoryname\", false, false, true);\r\n                    const conditionMaster = conditionMap.get(\"OptionList\");\r\n\r\n                    const conditionUnitMap = constructOptionList(response[1].data, \"nunitcode\", \"sunitname\", false, false, true);\r\n                    const conditionUnitMaster = conditionUnitMap.get(\"OptionList\");\r\n\r\n                    let isneedSubSampleQty = false;\r\n                    let approvedTreeData = [];\r\n                    selectedRecord[\"nsamplestoragelocationcode\"] = [];\r\n                    selectedRecord[\"nstoragecategorycode\"] = [];\r\n                    selectedRecord[\"nsampleqty\"] = undefined;\r\n                    selectedRecord[\"sampleToStore\"] = sampleDetails.sample === undefined ? \"\" : sampleDetails.sample;\r\n\r\n                    if (response[2].data !== null && response[2].data[\"isNeedSubSampleQty\"] && response[2].data[\"isNeedSubSampleQty\"] !== \"\") {\r\n                        isneedSubSampleQty = false;\r\n                    } else {\r\n                        isneedSubSampleQty = true;\r\n                    }\r\n\r\n                    if (response[2].data !== null && response[2].data.unit && response[2].data.unit.value !== undefined) {\r\n                        conditionUnitMaster.map(item => item.value === response[2].data.unit.value ?\r\n                            selectedRecord[\"nunitcode\"] = {\r\n                                \"label\": item.label,\r\n                                \"value\": item.value,\r\n                                \"item\": item.item\r\n                            }\r\n                            : \"\");\r\n\r\n                    }\r\n                    masterData = {\r\n                        ...masterData, storageCategory: conditionMaster, approvedTreeData,\r\n                        unitMaster: conditionUnitMaster, ...response[3].data\r\n                    };\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"sendToStore\",\r\n                            ncontrolcode: sendToStoreId,\r\n                            selectedRecord,\r\n                            npreregno: sampleDetails.npreregno,\r\n                            ntransactionsamplecode: sampleDetails.ntransactionsamplecode, isneedSubSampleQty\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 503) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam.inputData[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function autoExternalComponentLoadBasedOnSpec(dispatchData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getSampleBasedOnExternalOrder\",\r\n            { 'nexternalordercode': dispatchData.selectedRecord[\"Order\"] ? dispatchData.selectedRecord[\"Order\"].value : -1 ,\r\n                \"nexternalordersamplecode\":dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1 })\r\n                .then(response => {\r\n                let Sample = response.data.Sample;\r\n                //console.log(\"sample:\", Sample);\r\n                let Test1 = response.data.Test\r\n                let subSampleDataGridList = []\r\n                let Component = []\r\n                const Test = {};\r\n                Sample.map((sample, index) => {\r\n                    let saveComponent = {};\r\n                    saveComponent[\"slno\"] = index;\r\n                    saveComponent['jsondata'] = {}\r\n                    saveComponent['jsonuidata'] = {}\r\n                    saveComponent['ncomponentcode'] = sample['ncomponentcode']\r\n                    saveComponent['nspecsampletypecode'] = sample['nspecsampletypecode']\r\n                    saveComponent['scomponentname'] = sample['scomponentname']\r\n                    //saveComponent['jsondata']['ncomponentcode'] = { label: sample['scomponentname'], value: sample['ncomponentcode'] }\r\n                    // saveComponent['jsonuidata']['ncomponentcode'] = sample['scomponentname']\r\n\r\n                    //  saveComponent['jsondata']['scomponentname'] =  sample['scomponentname']\r\n                    saveComponent['jsonuidata']['scomponentname'] = sample['scomponentname']\r\n\r\n                    saveComponent['jsondata']['External Sample ID_child'] = sample['sexternalsampleid']\r\n                    saveComponent['jsonuidata']['External Sample ID_child'] = sample['sexternalsampleid']\r\n\r\n                    saveComponent['jsondata']['sampleorderid'] = sample['sexternalsampleid']\r\n                    saveComponent['jsonuidata']['sampleorderid'] = sample['sexternalsampleid']\r\n\r\n                    saveComponent['jsondata']['nsampleordercode'] = dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1;\r\n                    saveComponent['jsonuidata']['nsampleordercode'] = dispatchData.selectedRecord[\"External Sample Id\"] ? dispatchData.selectedRecord[\"External Sample Id\"].value : -1;\r\n\r\n                    // saveComponent['jsondata']['Quantity_child'] = sample['nsampleqty']\r\n                    // saveComponent['jsonuidata']['Quantity_child'] = sample['nsampleqty']\r\n\r\n                    // saveComponent['jsondata']['Unit Name_child'] = { label: sample['sunitname'], value: sample['nunitcode'] }\r\n                    // saveComponent['jsonuidata']['Unit Name_child'] = sample['sunitname']\r\n\r\n                    subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent });\r\n                    Component.unshift(saveComponent);\r\n\r\n                    const filterTest = Test1.filter(x => x.nexternalordersamplecode === sample.nexternalordersamplecode)\r\n                    filterTest.map(x => {\r\n                        x['slno'] = index\r\n                    })\r\n                    //selectedTestData=[...selectedTestData,...filterTest]\r\n                    Test[index] = filterTest\r\n\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...dispatchData,\r\n                        Component,\r\n                        selectedComponent: Component.length > 0 ? { ...Component[0] } : {},\r\n                        selectComponent: {},\r\n                        SelectedTest: Component.length > 0 ? Test[Component[0].slno] : [],\r\n                        Test: Test,\r\n                        selectedTestData: {},\r\n                        subSampleDataGridList,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getBarcodeAndPrinterService(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true))\r\n        let urlArray = [];\r\n        const getPrinter = rsapi.post(\"barcode/getPrinter\", inputParam.userInfo);\r\n\r\n        const getControlBasedBarcode = rsapi.post(\"barcode/getControlBasedBarcode\",inputParam);\r\n\r\n        urlArray = [getPrinter, getControlBasedBarcode]\r\n         // rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\r\n        Axios.all(urlArray).then(response => {\r\n                let selectedPrinterData = {\r\n                    sprintername: {\r\n                        value: response[0].data[0].sprintername,\r\n                        label: response[0].data[0].sprintername,\r\n                        item: response[0].data[0]\r\n                    },\r\n                    sbarcodename: {\r\n                    }\r\n                };\r\n                const printer = constructOptionList(response[0].data || [], \"sprintername\",\r\n                    \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n                    const barcode = constructOptionList(response[1].data || [], \"sbarcodename\",\r\n                    \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,control:inputParam.control,\r\n                        },\r\n                        printer,\r\n                        barcode,\r\n                        selectedPrinterData,\r\n                        operation: \"printer\",\r\n                        screenName: \"IDS_PRINTBARCODE\",\r\n                        //dataToPrint: inputParam.selectedGoodsIn.nrmsno,\r\n                        ncontrolcode: inputParam.ncontrolcode,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        loadPrinter:true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getOrderDetails(inputData)\r\n{\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/externalorder/getDraftExternalOrderDetails\",{sexternalorderid:inputData.sexternalorderid, userinfo: inputData.userinfo }).then(response => {\r\n                \r\n           let masterData = {...inputData.masterData}  //orders:response.data.ExternalOrder\r\n           let selectedRecord = {...inputData.selectedRecord}\r\n            \r\n           selectedRecord['orders'] = response.data.ExternalOrder\r\n            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onUpdateCancelExternalOrder(inputData)\r\n{\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/externalorder/onUpdateCancelExternalOrder\",{...inputData}).then(response => {\r\n                \r\n           let masterData = {...inputData.masterData, orders:[]}\r\n\r\n           if(response.data[\"rtn\"] === true)\r\n           {\r\n                toast.info(intl.formatMessage({ id: response.data[\"rtn\"] }));\r\n           }\r\n            \r\n            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord:{},\r\n                        masterData,\r\n                        loading:false,\r\n                        openModal:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getOutSourceSite(inputParam){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/externalorder/getOutSourceSite\",{...inputParam.inputData})\r\n        .then(response => {\r\n            //console.log(\"response if loop\");\r\n            const siteListMap = constructOptionList(response.data|| [],'nsitecode','ssitename',undefined, undefined, undefined,\r\n                                 'ndefaultstatus') || [];\r\n    \r\n            const siteList = siteListMap.get(\"OptionList\");\r\n            dispatch({ type: DEFAULT_RETURN, payload: { \r\n                                    outSourceSiteList :siteList,\r\n                                    loading: false,\r\n                                    openModal:true,\r\n                                    outsourcetest:true,\r\n                                    outSourceSiteData : inputParam.inputData,\r\n                                    screenName:inputParam.screenName,\r\n                                    parentPopUpSize : \"lg\"\r\n                                    \r\n                                } })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else{\r\n                toast.error(error.response.data);\r\n            }\r\n            \r\n        })\r\n    }\r\n}\r\n\r\nexport function outsourceTest(inputData, masterData){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        //console.log(\"inputData:\", inputData);\r\n        rsapi.post(\"/externalorder/outSourceTest\",{...inputData})\r\n        .then(response => {\r\n            //console.log(\"Test OutSourced\");\r\n            const OutSourcedTestGet = response.data[\"OutSourcedTestGet\"];\r\n           // console.log(\"OutSourcedTestGet:\", OutSourcedTestGet);\r\n\r\n            masterData = {\r\n                ...masterData,\r\n                selectedTest: OutSourcedTestGet,\r\n                RegistrationGetTest: replaceUpdatedObject(OutSourcedTestGet, masterData.RegistrationGetTest, \"ntransactiontestcode\"),\r\n            }\r\n\r\n            toast.info(response.data[\"Msg\"]);\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false,  \r\n                                                        openModal:false,\r\n                                                        outsourcetest:false, \r\n                                                        masterData } })\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else{\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}