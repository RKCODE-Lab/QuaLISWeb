{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageLocation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faFileImport, faEye, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport ScrollBar from 'react-perfect-scrollbar';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation, additionalInformationData } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport { //faBell, \nfaChevronDown, faChevronUp, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Grid } from '@progress/kendo-react-grid';\nimport Axios from 'axios';\nimport rsapi from '../../rsapi'; //import { Upload } from '@progress/kendo-react-upload';\n\nclass SampleStorageLocation extends Component {\n  constructor(_props) {\n    super(_props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.onChange = event => {\n      this.setState({\n        panes: event.newState\n      });\n    };\n\n    this.getSiblings = (itemIndex, data) => {\n      let result = data;\n      const indices = itemIndex.split(this.SEPARATOR).map(index => Number(index));\n\n      for (let i = 0; i < indices.length - 1; i++) {\n        result = result[indices[i]].items || [];\n      }\n\n      return result;\n    };\n\n    this.onItemDragOver = event => {\n      this.dragOverCnt++;\n      this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n    };\n\n    this.onItemDragEnd = event => {\n      this.isDragDrop = this.dragOverCnt > 0;\n      this.dragOverCnt = 0;\n      this.dragClue.hide();\n      const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n\n      if (eventAnalyzer.isDropAllowed) {\n        const updatedTree = moveTreeViewItem(event.itemHierarchicalIndex, this.state.treeData, eventAnalyzer.getDropOperation() || 'child', eventAnalyzer.destinationMeta.itemHierarchicalIndex);\n        this.setState({\n          tree: updatedTree\n        });\n      }\n    };\n\n    this.addChildNode = (e, clickedItem) => {\n      let iscontainerlastnode = false;\n      let ParentItem = this.searchClickedItemParent(this.state.treeData[0]);\n\n      if (ParentItem) {\n        ParentItem.items.map(item => {\n          item.expanded = false;\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          if (item['containerlastnode'] === true) {\n            iscontainerlastnode = true;\n          } else {\n            item.items = item.items || [];\n            item.expanded = true;\n            item.items.push({\n              id: uuid(),\n              text: this.props.intl.formatMessage({\n                id: \"IDS_LABEL\"\n              }),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false,\n              itemhierarchy: \"\"\n            });\n          }\n        }\n\n        return item;\n      });\n\n      if (iscontainerlastnode === true) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_STORAGELOCATIONENDCANNOTHAVECHILDNODE\"\n        }));\n      } else {\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.cloneNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentID = '';\n      let clonedParentID = '';\n      let parentFound = false;\n      let cloneItems = {};\n      let clonedparentFound = false;\n      let newData = [...this.state.treeData];\n      let newData1 = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        // if (item.items) {\n        //     if (parentFound&&(item.id===parentID)) {\n        //         parentItem = item;\n        //         parentFound = false;\n        //     }\n        // }\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n          parentID = clickedItem.parentID;\n          parentItem = this.searchClickedItemParent(this.state.treeData[0]);\n        }\n\n        if (item.editable === true) {\n          clonedParentID = uuid();\n          let clonedNewParentID = uuid(); //     //  let clonedObject=//{...item}\n          //     //   Object.assign({}, item);\n          //       const clonedObject = JSON.parse(JSON.stringify(item1));\n          //      cloneItems =//[{...clonedObject}].map((data) => {\n          //       // return \n          //        this.generateUUID(clonedObject)\n          //    // })\n\n          let levelBasedParents = {};\n          cloneItems = mapTree([{ ...item\n          }], \"items\", cloneditem => {\n            // const indices = cloneditem.itemHierarchicalIndex.split('_').map(index => Number(index));\n            // let x=getItemPath(this.state.treeData,indices,\"items\")\n            // console.log('------------->',cloneditem)\n            // if(cloneditem.items===undefined&&clonedparentFound){\n            //     clonedParentID=uuid();\n            //     clonedparentFound=false;\n            // }\n            // else{\n            //     clonedNewParentID=uuid();\n            // }\n            // if(!levelBasedParents.hasOwnProperty(cloneditem.itemHierarchicalIndex)){\n            //     let level=cloneditem.itemHierarchicalIndex;\n            //     levelBasedParents={...levelBasedParents,\n            //                         [level]:uuid()\n            //                     }\n            // }\n            // if(cloneditem.items){\n            //      //if ClonedItem is a Parent\n            //     cloneditem={\n            //         ...cloneditem,\n            //         'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedNewParentID\n            //         ,\n            //         'id':clonedParentID,\n            //         'editable': false \n            //     } \n            //     clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\n            //     //  clonedParentID=uuid()//clonedNewParentID;\n            //     // clonedparentFound=true;\n            // }else{\n            //if ClonedItem is a Child\n            cloneditem = { ...cloneditem,\n              //'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedParentID\n              // ,\n              'id': uuid(),\n              'editable': false,\n              'expanded': false //   }\n              //  clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\n\n            };\n            return cloneditem;\n          });\n        } // item={\n        //    ...item,\n        //     'id':uuid(),\n        //   'editable': false \n        //     } \n\n\n        return item;\n      });\n\n      if (parentItem === undefined) {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ROOTNODECANNOTBEDELETED\"\n        }));\n      }\n\n      let count = 1;\n      newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === parentItem.id) {\n          count++;\n          item.items.push( // {\n          // ...cloneItem,\n          // 'id':uuid(),\n          // 'editable': false,\n          // 'text': cloneItem['text']+'('+count+')'\n          // } \n          { ...cloneItems[0],\n            'parentID': parentID // 'id':clonedParentID\n\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.equalNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentFound = false;\n      let newData = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        if (item.items) {\n          if (parentFound) {\n            parentItem = item;\n            parentFound = false;\n          }\n        }\n\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n        }\n\n        return item;\n      });\n\n      if (parentItem.text === undefined) {\n        newData.push({\n          id: uuid(),\n          text: this.props.intl.formatMessage({\n            id: \"IDS_LABEL\"\n          }),\n          expanded: true,\n          editable: false,\n          locationlastnode: false,\n          containerfirstnode: false,\n          containerlastnode: false,\n          itemhierarchy: \"\"\n        });\n        this.setState({\n          treeData: newData\n        });\n      } else {\n        newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.id === parentItem.id) {\n            item.items.push({\n              id: uuid(),\n              text: this.props.intl.formatMessage({\n                id: \"IDS_LABEL\"\n              }),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false,\n              itemhierarchy: \"\"\n            });\n          }\n\n          return item;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.deleteNode = clickedItem => {\n      if (clickedItem.root && clickedItem.root === true) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PARENTNODENOTALLOWTODELETE\"\n        }));\n      } else {\n        const newData = removeItems(this.state.treeData, \"items\", item => {\n          return item.id === clickedItem.id;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.editRecord = (e, clickedItem) => {\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShow = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTreeProperties: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          isView: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        if (event.target.checked && event.target.name === 'nneedposition') {\n          selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\n          selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\n          selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n          selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode']; //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n\n        if (event.target.checked === false && event.target.name === 'nneedposition') {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = 1;\n          selectedRecord['nnoofcontainer'] = 1;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.itemRender = props => {\n      if (this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item.editable ? /*#__PURE__*/React.createElement(Form.Group, {\n          className: \"k-editable-text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          id: \"nodename\",\n          name: \"nodename\",\n          type: \"text\",\n          onKeyDown: e => e.stopPropagation(),\n          value: props.item.text,\n          autoFocus: true,\n          autoComplete: \"off\",\n          onChange: e => this.handleChange(e, props.item),\n          onBlur: e => this.handleBlur(e, props.item, props.itemHierarchicalIndex),\n          maxLength: \"50\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 25\n          }\n        }, props.item.text));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"d-flex align-items-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node text-truncate\n                            ${props.item.editable ? \"active-node\" : \"\"}\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          \"data-tip\": props.item.text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 33\n          }\n        }, props.item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 70\n          }\n        }) : props.item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 71\n          }\n        }) : props.item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 76\n          }\n        }) : props.item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 71\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 113\n          }\n        }), props.item.text), props.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CHILDNODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.addChildNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-edit k-i-pencil ml-2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.editRecord(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 41\n          }\n        }), !props.item.isRoot ? /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-delete ml-2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DELETE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.deleteNode(props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 45\n          }\n        }) : null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-toggle m-l-half\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_PROPERTIES\"\n          }),\n          onClick: e => this.setProperties(e, props),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 44\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level1\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CLONENODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.cloneNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 43\n          }\n        })) : null)) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      // if (selectedItem) {\n      //     selectedItem.editable = false;\n      //   }\n      //   event.item.editable = true;\n      //   selectedItem = event.item; \n      // let searchedData =undefined;\n      // if(this.state.searchedTreeData){\n      //      searchedData = mapTree(this.state.searchedTreeData, \"items\", (item1) => {\n      //         if (item1.editable === true) {\n      //             item1.editable = false;\n      //         } else if (item1.id === event.item.id) {\n      //             item1.editable = true;\n      //         }\n      //         return item1;\n      //     });\n      // } \n      // let newData = mapTree(this.state.treeData, \"items\", (item) => {\n      //     if (item.editable === true) {\n      //         item.editable = false;\n      //     } else if (item.id === event.item.id) {\n      //         item.editable = true;\n      //     }\n      //     return item;\n      // });\n      // this.setState({ treeData: newData,searchedTreeData: searchedData  }); \n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.editable === true) {\n            item.editable = false;\n          } else if (item.id === event.item.id) {\n            item.editable = true;\n\n            if (this.pointedItem) {\n              if (this.pointedItem.id === item.id) {\n                this.pointedItem = undefined;\n              }\n            }\n\n            let result = this.state.searchedTreeData;\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n            let itemText = \"\";\n\n            for (let i = 0; i < indices.length; i++) {\n              if (i === 0) {\n                result = result[0];\n              } else {\n                result = result.items[indices[i]];\n              }\n\n              itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n            }\n\n            item.itemhierarchy = itemText;\n          }\n\n          return item;\n        });\n        searchedData.map(data => {\n          this.clearSelected(data, event.item);\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n          let result = this.state.treeData;\n          const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          item.itemhierarchy = itemText;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeData: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.toggleSearch = () => {\n      this.setState({\n        showSearch: !this.state.showSearch\n      });\n    };\n\n    this.clearSearchedState = () => {\n      this.setState({\n        searchedTreeData: undefined,\n        showSearch: false\n      });\n    };\n\n    this.navigationCounter = () => {\n      let counter = this.state.counter || 0;\n      return counter;\n    };\n\n    this.handleSearch = () => {\n      this.uniqueIDArr = [];\n      this.pointedItem = undefined;\n      this.countforTree = 0; //this.setState({searchedTreeData: undefined})\n    };\n\n    this.search = (items, term) => {\n      return items.reduce((acc, item) => {\n        if (this.contains(item.text, term)) {\n          this.uniqueIDArr.push(item.id);\n          acc.push(item);\n        } else if (item.items && item.items.length > 0) {\n          let newItems = this.search(item.items, term);\n\n          if (newItems && newItems.length > 0) {\n            acc.push({ ...item,\n              text: item.text,\n              items: newItems,\n              expanded: acc.length === 0 ? true : false //item.expanded\n\n            });\n          }\n        }\n\n        return acc;\n      }, []);\n    };\n\n    this.handlenavigation = (e, direction) => {\n      if (e.key === 'Enter' || e.type === 'click') {\n        let value = document.querySelector('.k-textbox').value;\n\n        if (value !== \"\") {\n          if (direction === 'up') {\n            //Navigate up\n            this.countforTree--;\n\n            if (this.countforTree <= 0) {\n              this.countforTree = 0;\n            }\n          } else {\n            //if(direction==='down'){\n            //Navigate down\n            this.countforTree++;\n\n            if (this.countforTree >= this.uniqueIDArr.length) {\n              if (this.uniqueIDArr.length - 1 === -1) {\n                this.countforTree = 0;\n              } else {\n                this.countforTree = this.uniqueIDArr.length - 1;\n              } //toast.info(this.props.intl.formatMessage({ id: \"IDS_NOMORENODESTOSEARCH\" }))\n\n            }\n          }\n\n          let newData = this.navigateSearchedTree(this.state.treeDataView, value);\n          this.setState({\n            searchedTreeData: JSON.parse(JSON.stringify(newData))\n          });\n        } else {\n          this.setState({\n            searchedTreeData: undefined\n          });\n        }\n      }\n    };\n\n    this.navigateSearchedTree = (items, term) => {\n      return items.reduce((acc, item) => {\n        if (item.editable) {\n          item.editable = false;\n        }\n\n        if (item.selected) {\n          item.selected = false;\n        }\n\n        if (this.contains(item.text, term)) {\n          if (!this.uniqueIDArr.includes(item.id)) {\n            this.uniqueIDArr.push(item.id);\n          }\n\n          if (item.id === this.uniqueIDArr[this.countforTree]) {\n            if (this.pointedItem) {\n              this.pointedItem = undefined;\n            }\n\n            this.pointedItem = item;\n          }\n\n          acc.push(item);\n        } else if (item.items && item.items.length > 0) {\n          let newItems = this.navigateSearchedTree(item.items, term);\n\n          if (newItems && newItems.length > 0) {\n            if (newItems.some(item => item.id === this.uniqueIDArr[this.countforTree])) {\n              acc.push({ ...item,\n                text: item.text,\n                items: newItems,\n                expanded: true\n              });\n            } else {\n              acc.push({ ...item,\n                text: item.text,\n                items: newItems,\n                expanded: newItems.some(item => item.expanded === true) ? true : false\n              });\n            }\n          }\n        }\n\n        return acc;\n      }, []);\n    };\n\n    this.contains = (text, term) => {\n      return text.toLowerCase().indexOf(term.toLowerCase()) >= 0;\n    };\n\n    this.onExpandChange = event => {\n      let clickedItem = event.item;\n\n      if (!event.item.expanded) {\n        //this.onItemClick(event)\n        let ParentItem = this.searchClickedItemParent( //this.state.searchedTreeData&&\n        //this.state.searchedTreeData[0]||\n        this.state.treeData[0], clickedItem);\n\n        if (ParentItem) {\n          ParentItem.items.map(item => {\n            item.expanded = false;\n          });\n        }\n\n        this.shrinkNodes(event.item);\n      }\n\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n      this.getitemPath = { ...this.getitemPath,\n        [item.id]: clickedItem.itemHierarchicalIndex\n      };\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"d-flex align-items-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 29\n          }\n        }, this.pointedItem ? item.id === this.pointedItem.id && !item.selected ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          className: \"hidden-treeview-focus\",\n          id: \"selected-tree-point\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1009,\n            columnNumber: 41\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null) : '', /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node text-truncate\n                                ${this.pointedItem ? item.id === this.pointedItem.id && !item.selected ? \"pointed-node\" : item.selected ? \"active-node\" : \"\" : item.selected ? \"active-node\" : \"\"}\n                                ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                                `,\n          \"data-tip\": item.text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 33\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 64\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 65\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 70\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 65\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 107\n          }\n        }), item.text), this.pointedItem && item.id === this.pointedItem.id ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faHandPointLeft,\n          bounce: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 37\n          }\n        }) : clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null) : null)) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      // if (this.state.selectedItem) {\n      //     let selectedobj = this.state.selectedItem;\n      //         selectedobj.selected = false\n      //     this.setState({\n      //         selectedItem : selectedobj\n      //     })\n      // }\n      // this.setState({\n      //     selectedItem : event.item\n      // })             \n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.editable === true) {\n            item.editable = false;\n          } else if (item.id === event.item.id) {\n            item.editable = true;\n\n            if (this.pointedItem) {\n              if (this.pointedItem.id === item.id) {\n                this.pointedItem = undefined;\n              }\n            }\n\n            let result = this.state.searchedTreeData;\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n            let itemText = \"\";\n\n            for (let i = 0; i < indices.length; i++) {\n              if (i === 0) {\n                result = result[0];\n              } else {\n                result = result.items[indices[i]];\n              }\n\n              itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n            }\n\n            item.itemhierarchy = itemText;\n          }\n\n          return item;\n        });\n        searchedData.map(data => {\n          this.clearSelected(data, event.item);\n        });\n      }\n\n      let newData = mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n          let result = this.state.treeDataView;\n          const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          item.itemhierarchy = itemText;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeDataView: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.onExpandChangeView = event => {\n      let clickedItem = event.item;\n\n      if (!event.item.expanded) {\n        //this.onItemClick(event)\n        let ParentItem = this.searchClickedItemParent(this.state.searchedTreeData && this.state.searchedTreeData[0] || this.state.treeDataView[0], clickedItem);\n\n        if (ParentItem) {\n          ParentItem.items.map(item => {\n            item.expanded = false;\n          });\n        }\n\n        this.shrinkNodes(event.item);\n      }\n\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.setProperties = (event, clickedItem) => {\n      const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode; //this.props.openPropertyModal(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, clickedItem, editId);\n\n      this.openPropertyModal(clickedItem, editId);\n    };\n\n    this.handleChange = (e, clickedItem) => {\n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.id === clickedItem.id) {\n            item.text = e.target.value;\n          }\n\n          return item;\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.text = e.target.value;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.handleBlur = (e, clickedItem, itemHierarchicalIndex) => {\n      clickedItem.editable = false; //Added for creating path after edit \n\n      const indices = itemHierarchicalIndex.split('_').map(index => Number(index));\n      this.generatePathForEditedItem(clickedItem, indices);\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n        this.onSaveSampleStorageLocation(saveType, formRef);\n      } else if (this.props.Login.operation === \"addinfo\") {\n        this.onSaveAdditionalInformation(saveType, formRef);\n      }\n    };\n\n    this.onSaveProperties = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT) {\n\n      if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let count = 0;\n\n        if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (count > 1) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTONLYONE\"\n          }));\n        } else {\n          let haschild = false;\n          let newData = mapTree(this.state.treeData, \"items\", item => {\n            if (item.id === this.props.Login.clickedItem.item.id) {\n              if (item.hasOwnProperty('items') && item.items !== undefined && selectedRecord[\"containerlastnode\"] === true) {\n                haschild = true;\n              } else {\n                item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n                item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n                item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n              }\n            }\n\n            if (item.selected && item.selected === true) {\n              item.selected = false;\n            }\n\n            return item;\n          });\n\n          if (haschild === true) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_STORAGELOCATIONENDCANNOTHAVECHILDNODE\"\n            }));\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                treeData: newData,\n                selectedRecord,\n                loadTreeProperties: false,\n                loading: false\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } // } else {\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\n      // }\n\n    };\n\n    this.onSaveSampleStorageLocation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\n      //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n\n      let inputData = [];\n      let jsondata = {};\n      let postParam = undefined;\n      let countLevels = 0;\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        }\n\n        if (item.expanded === false) {\n          item.expanded = true;\n        }\n\n        item.expanded = false;\n        countLevels++;\n        return item;\n      }); // let lhs = JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data;\n      // let rhs = newData;\n      // console.log(detailedDiff(lhs, rhs));\n      // return;\n      // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n\n      if (countLevels > 3) {\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageVersion\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\n        inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ? selectedRecord[\"nprojecttypecode\"].value : -1;\n        inputData[\"sampleStorageLocation\"][\"nunitcode\"] = selectedRecord['nunitcode'] ? parseInt(selectedRecord['nunitcode']) : -1;\n        inputData[\"sampleStorageLocation\"][\"nquantity\"] = selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 0;\n        inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value : -1;\n        inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"] ? 3 : 4;\n        inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ? { ...inputData[\"sampleStorageLocation\"],\n          ncontainertypecode: selectedRecord['ncontainertypecode'].value ? selectedRecord['ncontainertypecode'].value : -1,\n          ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\n          nneedposition: 3,\n          ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ? selectedRecord['ncontainerstructurecode'].value : -1,\n          nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n          nrow: selectedRecord['nrow'],\n          ncolumn: selectedRecord['ncolumn']\n        } : { ...inputData[\"sampleStorageLocation\"],\n          ncontainertypecode: -1,\n          ndirectionmastercode: 1,\n          nneedposition: 4,\n          ncontainerstructurecode: -1,\n          nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n          nrow: selectedRecord['nrow'],\n          ncolumn: selectedRecord['ncolumn']\n        };\n        inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n\n        if (this.props.Login.operation === \"create\") {\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n            // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]; // inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"].value\n          // inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"].value\n\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CREATEATLEASTFOURLEVELS\"\n        }));\n      }\n    };\n\n    this.onSaveAdditionalInformation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let inputData = [];\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ? selectedRecord[\"nprojecttypecode\"].value : -1;\n      inputData[\"sampleStorageLocation\"][\"nunitcode\"] = selectedRecord[\"nunitcode\"] && selectedRecord[\"nunitcode\"].value ? selectedRecord[\"nunitcode\"].value : -1;\n      inputData[\"sampleStorageLocation\"][\"nquantity\"] = selectedRecord[\"nquantity\"] && selectedRecord[\"nquantity\"] ? parseInt(selectedRecord[\"nquantity\"]) : 0;\n      inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value : -1;\n      inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"] ? 3 : 4;\n      inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ? { ...inputData[\"sampleStorageLocation\"],\n        ncontainertypecode: selectedRecord['ncontainertypecode'].value ? selectedRecord['ncontainertypecode'].value : -1,\n        ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\n        nneedposition: 3,\n        ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ? selectedRecord['ncontainerstructurecode'].value : -1,\n        // nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n        nrow: selectedRecord['nrow'],\n        ncolumn: selectedRecord['ncolumn']\n      } : { ...inputData[\"sampleStorageLocation\"],\n        ncontainertypecode: -1,\n        ndirectionmastercode: 1,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        // nquantity: selectedRecord['nquantity'] ?  parseInt(selectedRecord['nquantity']) : 1,\n        nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\n        nrow: selectedRecord['nrow'],\n        ncolumn: selectedRecord['ncolumn']\n      };\n      const inputParam = {\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: \"addinfo\",\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.deleteSampleStorageLocation = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      inputData[\"sampleStorageVersion\"] = {};\n      inputData[\"sampleStorageLocation\"] = {};\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n      const inputParam = {\n        methodUrl: \"SampleStorageLocation\",\n        classUrl: \"samplestoragelocation\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData; // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageLocation(ncontrolCode));\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.calculateRowColumn = (Row, column) => {\n      let nnoofcontainer = Row * column;\n      return nnoofcontainer;\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else {\n        if (fieldName === 'nstoragecategorycode') {\n          this.getSampleStorageLocation({\n            userinfo: this.props.userInfo,\n            nstoragecategorycode: comboData.value\n          }, fieldName, comboData);\n        } else if (fieldName === 'ncontainertypecode') {\n          this.getContainerStructure({\n            userinfo: this.props.userInfo,\n            ncontainertypecode: comboData.value\n          }, fieldName, comboData);\n        } else if (fieldName === 'ncontainerstructurecode') {\n          selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n          selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n          selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']) : 1;\n        } else if (fieldName === 'nsamplestoragelocationcode') {\n          this.getSampleStorageLocation({\n            userinfo: this.props.userInfo,\n            nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\n            nsamplestoragelocationcode: comboData.value\n          }, fieldName, comboData);\n        }\n\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onApproveSampleStorageLocation = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      let locationEnd = false;\n      let storageStart = false;\n      let storageEnd = false;\n      let containers = [];\n      let containerpath = [];\n      let containerlastnode = [];\n      mapTree(this.state.treeDataView //this.state.treeData\n      , \"items\", item => {\n        if (item.locationlastnode === true) {\n          locationEnd = true;\n        }\n\n        if (item.containerfirstnode === true) {\n          storageStart = true;\n          containers.push({\n            itemHierarchy: item.itemhierarchy,\n            scontainercode: item.id\n          });\n        }\n\n        if (item.containerlastnode === true) {\n          storageEnd = true;\n          containerpath.push({\n            scontainerpath: item.itemhierarchy\n          });\n          containerlastnode.push(item.text);\n        }\n\n        return null;\n      }); // if (locationEnd === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\n      //     return;\n      // }\n      // if (storageStart === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\n      //     return;\n      // }\n      // if (storageEnd === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\n      //     return;\n      // }\n\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"containers\"] = containers;\n      inputData[\"containerpath\"] = JSON.stringify(containerpath);\n      inputData[\"containerpathsize\"] = containerpath.length;\n      inputData[\"containerlastnode\"] = JSON.stringify(containerlastnode);\n      inputData[\"propertyValidation\"] = {\n        \"locationEnd\": locationEnd,\n        \"storageStart\": storageStart,\n        \"storageEnd\": storageEnd\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"selectedSampleStorageLocation\"] = masterData.selectedSampleStorageLocation;\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_STORAGESTRUCTURE\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"Approve\",\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"Approve\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.viewAdditionalInfo = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isView: true,\n          openModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.additionalInformation = (selectedSampleStorageVersion, userInfo, addInfoId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.additionalInformationData(selectedSampleStorageVersion, userInfo, isOnlyDraft, addInfoId);\n    };\n\n    this.importdata = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: 'IDS_IMPORT',\n          openModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.copySampleStorageversion = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageVersion\",\n        displayName: \"IDS_STORAGESTRUCTURE\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"copy\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"copy\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      } // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\n\n\n      let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"nstoragecategorycode\": nfilterStorageCategory\n        },\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_STORAGESTRUCTURE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let constantvalue = value.target.value;\n\n      if (field === 'nnoofcontainer') {\n        if (constantvalue !== 0) {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = constantvalue;\n        } else {\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n        }\n      }\n\n      if (!isNaN(constantvalue)) {\n        selectedRecord[field] = constantvalue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageLocation = addId => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\n        this.props.fetchStorageCategory({\n          userInfo: this.props.Login.userInfo,\n          id: uuid(),\n          nfilterStorageCategory: this.state.nfilterStorageCategory,\n          addId\n        });\n      } else {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSTORAGECATEGORY\"\n        }));\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      keyIndentify: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.pointedItem) {\n      let scrollDoc = document.getElementById('selected-tree-point');\n\n      if (scrollDoc) {\n        scrollDoc.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n\n    if (this.props.Login.treeData !== previousProps.Login.treeData) {\n      this.setState({\n        treeData: this.props.Login.treeData\n      });\n    }\n\n    if (this.props.Login.treeDataView !== previousProps.Login.treeDataView) {\n      this.setState({\n        treeDataView: this.props.Login.treeDataView\n      });\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.handleSearch();\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data,\n          searchedTreeData: undefined,\n          showSearch: false\n        });\n      } else {\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.handleSearch();\n        this.setState({\n          treeDataView: undefined,\n          searchedTreeData: undefined,\n          showSearch: false\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n      filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n      if (filterStorageCategory && filterStorageCategory.length > 0) {\n        const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory); //filterStorageCategory[0];\n\n        nfilterStorageCategory = filterCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        selectedRecord,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  getClueClassName(event) {\n    const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n    const {\n      itemHierarchicalIndex: itemIndex\n    } = eventAnalyzer.destinationMeta;\n\n    if (eventAnalyzer.isDropAllowed) {\n      switch (eventAnalyzer.getDropOperation()) {\n        case 'child':\n          return 'k-i-plus';\n\n        case 'before':\n          return itemIndex === '0' || itemIndex.endsWith(`${this.SEPARATOR}0`) ? 'k-i-insert-up' : 'k-i-insert-middle';\n\n        case 'after':\n          const siblings = this.getSiblings(itemIndex, this.state.tree);\n          const lastIndex = Number(itemIndex.split(this.SEPARATOR).pop());\n          return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n\n        default:\n          break;\n      }\n    }\n\n    return 'k-i-cancel';\n  }\n\n  // generateUUID(innerObj) {\n  //     // let parentIDNew=uuid()\n  //     // let innerObjNew={...innerObj,\n  //     //                 'id':parentIDNew } \n  //     // if (innerObjNew.items && innerObjNew.items.length > 0) {\n  //     //     innerObjNew.items.map((childObj) => { \n  //     //         childObj={...childObj,\n  //     //         'parentID':parentIDNew}\n  //     //         this.generateUUID(childObj)\n  //     //     })\n  //     // }\n  //     let parentIDNew=uuid()\n  //     let innerObjNew={...innerObj,\n  //            'id':parentIDNew } \n  //  if (innerObjNew.items && innerObjNew.items.length > 0) {\n  //        innerObjNew.items.map((childObj) => { \n  //                 childObj={...childObj,\n  //                 'parentID':parentIDNew}\n  //                 return  this.generateUUID(childObj)\n  //             })\n  // } \n  //     return innerObjNew\n  // }\n  generateUUID(innerObj) {\n    let parentIDNew = uuid();\n    let innerObjNew = { ...innerObj,\n      'id': parentIDNew\n    }; //  innerObj['id']=parentIDNew  \n\n    if (innerObj.items && innerObj.items.length > 0) {\n      for (let Obj of innerObj.items) {\n        let childObj = Obj;\n        childObj = { ...childObj,\n          'parentID': parentIDNew\n        }; //childObj['parentID']=parentIDNew\n\n        this.generateUUID(childObj);\n      }\n    }\n\n    return innerObj;\n  }\n\n  searchClickedItemParent(treeData, clickedItem) {\n    let ParentItem = { ...treeData\n    };\n\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n\n          if (clickedItem ? clickedItem.id === childData.id : childData.editable === true) {\n            return treeData;\n          } else {\n            if (childData.items) {\n              ParentItem = this.searchClickedItemParent(childData, clickedItem);\n\n              if (ParentItem) {\n                return ParentItem;\n              }\n            }\n          }\n        }\n      }\n    } //    return ParentItem;\n\n  }\n\n  shrinkNodes(ParentItem) {\n    //  ParentItem.expanded=false;\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n          childData.expanded = false;\n\n          if (childData.items) {\n            this.shrinkNodes(childData);\n          }\n        }\n      }\n    }\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  openPropertyModal(clickedItem, editId) {\n    let selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n    selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n    selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        selectedRecord,\n        loadTreeProperties: true,\n        clickedItem,\n        loading: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  //generate Path for edited item \n  generatePathForEditedItem(ParentItem, indices) {\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n          let result = this.state.treeData;\n          indices.push(i);\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          childData.itemhierarchy = itemText;\n\n          if (childData.items) {\n            this.generatePathForEditedItem(childData, indices);\n          }\n\n          indices.pop();\n        }\n      }\n    } else {\n      let result = this.state.treeData;\n      let itemText = \"\";\n\n      for (let i = 0; i < indices.length; i++) {\n        if (i === 0) {\n          result = result[0];\n        } else {\n          result = result.items[indices[i]];\n        }\n\n        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n      }\n\n      ParentItem.itemhierarchy = itemText;\n    }\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.props.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: this.props.Login.userInfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: this.props.Login.userInfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow, containerStructureOptions[0].item.ncolumn) : 1,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageStructure\") && this.state.controlMap.get(\"Add SampleStorageStructure\").ncontrolcode;\n    console.log(\"addId:\", addId);\n    const editId = this.state.controlMap.has(\"Edit SampleStorageStructure\") && this.state.controlMap.get(\"Edit SampleStorageStructure\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageStructure\") && this.state.controlMap.get(\"Delete SampleStorageStructure\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageStructure\") && this.state.controlMap.get(\"Copy SampleStorageStructure\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageStructure\") && this.state.controlMap.get(\"Approve SampleStorageStructure\").ncontrolcode;\n    const addInfoId = this.state.controlMap.has(\"AdditionalInformation\") && this.state.controlMap.get(\"AdditionalInformation\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const infoFields = [{\n      \"dataField\": \"sstoragecategoryname\",\n      \"idsName\": \"IDS_STORAGECATEGORY\"\n    }, {\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"idsName\": \"IDS_STORAGESTRUCTURENAME\"\n    }, {\n      \"dataField\": \"sprojecttypename\",\n      \"idsName\": \"IDS_PROJECT\"\n    }, {\n      \"dataField\": \"sproductname\",\n      \"idsName\": \"IDS_PRODUCT\"\n    }, {\n      \"dataField\": \"nquantity\",\n      \"idsName\": \"IDS_QUANTITY\"\n    }, {\n      \"dataField\": \"sunitname\",\n      \"idsName\": \"IDS_UNIT\"\n    }, {\n      \"dataField\": \"scontainertype\",\n      \"idsName\": \"IDS_CONTAINERTYPE\"\n    }, {\n      \"dataField\": \"scontainerstructurename\",\n      \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\"\n    }, {\n      \"dataField\": \"nnoofcontainer\",\n      \"idsName\": \"IDS_NOOFSAMPLECONTAINER\"\n    }, {\n      \"dataField\": \"sdirection\",\n      \"idsName\": \"IDS_DIRECTION\"\n    }, {\n      \"dataField\": \"nrow\",\n      \"idsName\": \"IDS_ROWS\"\n    }, {\n      \"dataField\": \"ncolumn\",\n      \"idsName\": \"IDS_COLUMNS\"\n    }, {\n      \"dataField\": \"sneedautomapping\",\n      \"idsName\": \"IDS_AUTOMAPPING\"\n    }]; // const mandatoryFields =\n    //     this.state.selectedRecord[\"nneedposition\"] === undefined ||\n    //         this.state.selectedRecord[\"nneedposition\"] === false ?\n    //         [\n    //             { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //             { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //             // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    //             // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    //             // {\n    //             //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n    //             //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n    //             //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n    //             // }\n    //         ]\n    //         : [\n    //             { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n    //             { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //             // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    //             // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    //             // {\n    //             //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n    //             //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n    //             //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n    //             // },  \n    //             {\n    //                 \"idsName\": \"IDS_CONTAINERTYPE\",\n    //                 \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\n    //                     \"IDS_SELECT\", \"controlType\": \"selectbox\"\n    //             },\n    //             {\n    //                 \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n    //                 \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\n    //                     \"IDS_SELECT\", \"controlType\": \"selectbox\"\n    //             },\n    //             {\n    //                 \"idsName\": \"IDS_DIRECTION\",\n    //                 \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\n    //                     \"IDS_ENTER\", \"controlType\": \"selectbox\"\n    //             }\n    //         ]\n\n    const mandatoryFields = this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false && this.props.Login.operation !== \"addinfo\" ? [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_STORAGESTRUCTURENAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }] : this.props.Login.operation === \"create\" ? [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_STORAGESTRUCTURENAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }] : this.props.Login.operation === \"addinfo\" && this.state.selectedRecord[\"nneedposition\"] !== undefined && this.state.selectedRecord[\"nneedposition\"] === true ? [{\n      \"idsName\": \"IDS_CONTAINERTYPE\",\n      \"dataField\": \"ncontainertypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n      \"dataField\": \"ncontainerstructurecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DIRECTION\",\n      \"dataField\": \"ndirectionmastercode\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }] : \"\";\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2155,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2157,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || [],\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageLocation && [this.props.Login.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageLocation(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_STORAGESTRUCTURE\",\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2199,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openStorageLocation(addId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2200,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2205,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData() // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2207,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2211,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2218,\n            columnNumber: 49\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2165,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2229,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2233,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2234,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2235,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageVersion || [],\n      needMultiSelect: false,\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageVersion && [this.props.Login.masterData.selectedSampleStorageVersion],\n      primaryKeyField: \"nsamplestorageversioncode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"nversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"selectedSampleStorageVersion\",\n      objectName: \"Version\",\n      listName: \"IDS_SAMPLESTORAGEVersion\",\n      hideSearch: true,\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '' // actionIcons={\n      //     [\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n      //             controlname: \"faPencilAlt\",\n      //             objectName: \"detailtoedit\",\n      //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      //         },\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n      //             controlname: \"faTrashAlt\",\n      //             objectName: \"mastertodelete\",\n      //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      //             onClick: () => this.confirmDelete(deleteId)\n      //         }\n      //     ]\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2237,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2288,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content grid-master \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2290,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2292,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2293,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2294,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2295,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2296,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2297,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2 pl-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2298,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2301,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2302,\n        columnNumber: 89\n      }\n    })) : this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-danger btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2307,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETIRED\",\n      defaultMessage: \"Retired\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2308,\n        columnNumber: 93\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2311,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2312,\n        columnNumber: 93\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2317,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle 1 outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2319,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2325,\n        columnNumber: 85\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, \"    \", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      onClick: e => this.copySampleStorageversion(copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2329,\n        columnNumber: 87\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2335,\n        columnNumber: 85\n      }\n    }))), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(addInfoId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFO\"\n      }),\n      onClick: e => this.additionalInformation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, addInfoId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2351,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faInfoCircle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2356,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2359,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2365,\n        columnNumber: 81\n      }\n    })), this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveSampleStorageLocation(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2368,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2374,\n        columnNumber: 85\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }),\n      onClick: e => this.viewAdditionalInfo(copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2378,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2382,\n        columnNumber: 81\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2388,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2389,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2391,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"search-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2392,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2393,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(FormControl // ref={this.searchRef}\n    , {\n      autoComplete: \"off\",\n      className: \"k-textbox\",\n      onChange: this.handleSearch,\n      placeholder: `${this.props.intl.formatMessage({\n        id: \"IDS_FILTER\"\n      })}`,\n      name: \"search\",\n      onKeyUp: e => this.handlenavigation(e, 'down'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2395,\n        columnNumber: 73\n      }\n    }), !this.props.showSearch ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"search-up-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2403,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronUp,\n      onClick: e => this.handlenavigation(e, 'up'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2404,\n        columnNumber: 85\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronDown,\n      onClick: e => this.handlenavigation(e, 'down'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2405,\n        columnNumber: 85\n      }\n    }))) : \"\", this.props.showSearch ? /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"close-right-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2421,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2422,\n        columnNumber: 81\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2426,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.searchedTreeData || this.state.treeDataView,\n      expandIcons: true,\n      selectField: 'active-node',\n      item: this.itemRenderView,\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2427,\n        columnNumber: 73\n      }\n    }))))) : \"\"))))))))), /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.loadTreeProperties,\n      modalTitle: this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURE\"\n      }),\n      closeModal: this.closeModalShow,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      modalBody: /*#__PURE__*/React.createElement(AddTreeProperties, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2467,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2460,\n        columnNumber: 18\n      }\n    }), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      hideSave: this.props.Login.isView,\n      operation: this.props.Login.isView ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.isView ? this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }) : this.props.Login.operation === \"addinfo\" ? \"\" : this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURE\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.loadTreeProperties === true ? [] : mandatoryFields,\n      addComponent: this.props.Login.isView ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2495,\n          columnNumber: 37\n        }\n      }, infoFields.map((item, index) => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2500,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2501,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2502,\n            columnNumber: 65\n          }\n        }, this.props.intl.formatMessage({\n          id: item.idsName\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2503,\n            columnNumber: 65\n          }\n        }, this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] ? this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] : '-'))));\n      }))) : this.props.Login.screenName === 'IDS_IMPORT' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2524,\n          columnNumber: 41\n        }\n      })) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2528,\n          columnNumber: 41\n        }\n      }) : // this.props.Login.loadTreeProperties ? (\n      //     <AddTreeProperties\n      //         onInputChange={(e) => this.onInputChange(e)}\n      //         selectedRecord={this.state.selectedRecord || {}}\n      //     />\n      // ) \n      // :\n      this.state.treeData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2544,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(AddTreeview, {\n        clearSearchedState: this.clearSearchedState,\n        toggleSearch: this.toggleSearch,\n        handleSearch: this.handleSearch,\n        handlenavigation: this.handlenavigation,\n        showSearch: this.state.showSearch,\n        treeData: //this.state.searchedTreeData||\n        this.state.treeData,\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        onItemDragOver: this.onItemDragOver,\n        onItemDragEnd: this.onItemDragEnd,\n        onNumericInputChange: this.onNumericInputChange,\n        operation: this.props.Login.operation,\n        storageCategoryList: this.props.Login.storageCategoryList || [],\n        projectTypeMapList: this.props.Login.projectTypeMapList || [],\n        sampleTypeList: this.props.Login.sampleTypeList || [],\n        isOnlyDraft: this.props.Login.isOnlyDraft,\n        unitMapList: this.props.Login.unitMapList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2547,\n          columnNumber: 53\n        }\n      }))) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2476,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  changeStorageCategoryFilter,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  fetchStorageCategory,\n  copySampleStorageVersion,\n  crudSampleStorageLocation,\n  additionalInformationData\n})(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faFileImport","faEye","faInfoCircle","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SearchIcon","ScrollBar","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","additionalInformationData","DEFAULT_RETURN","ListWrapper","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMasterJsonView","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","faChevronDown","faChevronUp","faExclamationCircle","Grid","Axios","rsapi","SampleStorageLocation","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","onChange","event","setState","panes","newState","getSiblings","itemIndex","data","result","indices","split","map","index","Number","i","length","items","onItemDragOver","dragClue","show","pageY","pageX","item","text","getClueClassName","onItemDragEnd","hide","eventAnalyzer","init","isDropAllowed","updatedTree","itemHierarchicalIndex","state","treeData","getDropOperation","destinationMeta","tree","addChildNode","e","clickedItem","iscontainerlastnode","ParentItem","searchClickedItemParent","expanded","newData","id","push","intl","formatMessage","editable","locationlastnode","containerfirstnode","containerlastnode","itemhierarchy","info","cloneNode","parentItem","parentID","clonedParentID","parentFound","cloneItems","clonedparentFound","newData1","clonedNewParentID","levelBasedParents","cloneditem","warn","count","equalNode","deleteNode","root","editRecord","toggleAction","openModal","updateInfo","typeName","selectedRecord","loadTreeProperties","operation","closeModalShow","closeModal","loadEsign","Login","selectedId","isView","onInputChange","target","type","checked","name","value","itemRender","stopPropagation","handleChange","handleBlur","isRoot","setProperties","onItemClick","searchedData","searchedTreeData","itemText","clearSelected","toggleSearch","showSearch","clearSearchedState","navigationCounter","counter","handleSearch","search","term","reduce","acc","contains","newItems","handlenavigation","direction","key","document","querySelector","navigateSearchedTree","treeDataView","JSON","parse","stringify","selected","includes","some","toLowerCase","indexOf","onExpandChange","shrinkNodes","forceUpdate","itemRenderView","toggleActionView","onItemClickView","onExpandChangeView","editId","controlMap","has","get","ncontrolcode","generatePathForEditedItem","onSaveClick","saveType","formRef","onSaveProperties","onSaveSampleStorageLocation","onSaveAdditionalInformation","inputData","jsondata","postParam","haschild","hasOwnProperty","loading","countLevels","userInfo","parseInt","ncontainertypecode","ndirectionmastercode","nneedposition","ncontainerstructurecode","nnoofcontainer","nrow","ncolumn","inputParam","classUrl","methodUrl","displayName","masterData","userRoleControlRights","nformcode","screenData","selectedSampleStorageLocation","selectedSampleStorageVersion","deleteSampleStorageLocation","ncontrolCode","searchRef","current","screenName","confirmDelete","confirmMessage","confirm","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleDetailPageChange","calculateRowColumn","column","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","getSampleStorageLocation","userinfo","nstoragecategorycode","getContainerStructure","selectedRecordFilter","nsamplestoragelocationcode","openFilter","showFilter","closeFilter","onFilterSubmit","filterStorageCategory","onApproveSampleStorageLocation","locationEnd","storageStart","storageEnd","containers","containerpath","itemHierarchy","scontainercode","scontainerpath","viewAdditionalInfo","additionalInformation","addInfoId","isOnlyDraft","sampleStorageVersion","importdata","copySampleStorageversion","reloadData","onNumericInputChange","field","constantvalue","isNaN","onEditSampleStorageLocation","openStorageLocation","addId","Object","keys","warning","onInputOnChange","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","title","children","keyIndentify","size","scrollable","Map","detailSkip","detailTake","settings","selectedItem","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","scrollDoc","getElementById","scrollIntoView","behavior","isComponentUpdated","filterData","values","nStorageCategory","filterStorageCategoryMap","filterCategory","filter","generateBreadCrumData","endsWith","siblings","lastIndex","pop","generateUUID","innerObj","parentIDNew","innerObjNew","Obj","childObj","childArray","childData","inputParamData","urlArray","url1","post","all","then","response","storageLocationOptions","sampleStorageVersionOptions","sampleStorageLocationList","sampleStorageLocation","sampleStorageVersionList","nsamplestorageversioncode","catch","status","message","containerStructureOptions","containerStructureList","containerStructure","componentDidMount","parentHeight","height","clientHeight","firstPane","breadCrumbData","selectedStorageCategoryName","render","console","log","deleteId","copyId","approveId","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","infoFields","mandatoryFields","paddingRight","ssamplestoragelocationname","napprovalstatus","DRAFT","RETIRED","idsName","dataField","storageCategoryList","projectTypeMapList","sampleTypeList","unitMapList","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faFileImport, faEye, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\n\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation,additionalInformationData\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport { //faBell, \r\n    faChevronDown, faChevronUp, faExclamationCircle\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { Grid } from '@progress/kendo-react-grid';\r\nimport Axios from 'axios';\r\nimport rsapi from '../../rsapi';\r\n//import { Upload } from '@progress/kendo-react-upload';\r\n\r\n\r\nclass SampleStorageLocation extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            keyIndentify: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    onChange = (event) => {\r\n        this.setState({ panes: event.newState })\r\n    };\r\n    componentDidUpdate(previousProps) {\r\n        if (this.pointedItem) {\r\n            let scrollDoc = document.getElementById('selected-tree-point');\r\n            if (scrollDoc) {\r\n                scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n            }\r\n        }\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n        if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n            this.setState({\r\n                treeData: this.props.Login.treeData\r\n            });\r\n        }\r\n        if (this.props.Login.treeDataView !== previousProps.Login.treeDataView) {\r\n            this.setState({\r\n                treeDataView: this.props.Login.treeDataView\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                if (this.searchRef.current) {\r\n                    this.searchRef.current.value = \"\";\r\n                }\r\n                this.handleSearch();\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data,\r\n                    searchedTreeData: undefined,\r\n                    showSearch: false\r\n                });\r\n            } else {\r\n                if (this.searchRef.current) {\r\n                    this.searchRef.current.value = \"\";\r\n                }\r\n                this.handleSearch();\r\n                this.setState({\r\n                    treeDataView: undefined,\r\n                    searchedTreeData: undefined,\r\n                    showSearch: false\r\n                });\r\n            }\r\n        }\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n            filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n            if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n\r\n                const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory);//filterStorageCategory[0];\r\n                nfilterStorageCategory = filterCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, selectedRecord, filterStorageCategory });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n    getSiblings = (itemIndex, data) => {\r\n        let result = data;\r\n        const indices = itemIndex.split(this.SEPARATOR).map(index => Number(index));\r\n        for (let i = 0; i < indices.length - 1; i++) {\r\n            result = result[indices[i]].items || [];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    getClueClassName(event) {\r\n        const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\r\n        const {\r\n            itemHierarchicalIndex: itemIndex\r\n        } = eventAnalyzer.destinationMeta;\r\n        if (eventAnalyzer.isDropAllowed) {\r\n            switch (eventAnalyzer.getDropOperation()) {\r\n                case 'child':\r\n                    return 'k-i-plus';\r\n                case 'before':\r\n                    return itemIndex === '0' || itemIndex.endsWith(`${this.SEPARATOR}0`) ? 'k-i-insert-up' : 'k-i-insert-middle';\r\n                case 'after':\r\n                    const siblings = this.getSiblings(itemIndex, this.state.tree);\r\n                    const lastIndex = Number(itemIndex.split(this.SEPARATOR).pop());\r\n                    return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return 'k-i-cancel';\r\n    }\r\n    onItemDragOver = event => {\r\n        this.dragOverCnt++;\r\n        this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\r\n    };\r\n    onItemDragEnd = event => {\r\n        this.isDragDrop = this.dragOverCnt > 0;\r\n        this.dragOverCnt = 0;\r\n        this.dragClue.hide();\r\n        const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\r\n        if (eventAnalyzer.isDropAllowed) {\r\n            const updatedTree = moveTreeViewItem(event.itemHierarchicalIndex, this.state.treeData, eventAnalyzer.getDropOperation() || 'child', eventAnalyzer.destinationMeta.itemHierarchicalIndex);\r\n            this.setState({\r\n                tree: updatedTree\r\n            });\r\n        }\r\n    };\r\n    addChildNode = (e, clickedItem) => {\r\n        let iscontainerlastnode=false;\r\n        let ParentItem = this.searchClickedItemParent(this.state.treeData[0])\r\n        if (ParentItem) {\r\n            ParentItem.items.map(item => {\r\n                item.expanded = false;\r\n            });\r\n        }\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                if(item['containerlastnode']===true){\r\n                    iscontainerlastnode=true;\r\n                }else{\r\n                    item.items = item.items || [];\r\n                    item.expanded = true\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false,\r\n                        itemhierarchy: \"\"\r\n                    });\r\n                }\r\n               \r\n            }\r\n            return item;\r\n        });\r\n        if(iscontainerlastnode===true){\r\n            toast.info (this.props.intl.formatMessage({ id:   \"IDS_STORAGELOCATIONENDCANNOTHAVECHILDNODE\" })\r\n          \r\n            );\r\n        }else{\r\n            this.setState({ treeData: newData });\r\n        } \r\n    };\r\n\r\n    // generateUUID(innerObj) {\r\n\r\n    //     // let parentIDNew=uuid()\r\n    //     // let innerObjNew={...innerObj,\r\n    //     //                 'id':parentIDNew } \r\n    //     // if (innerObjNew.items && innerObjNew.items.length > 0) {\r\n    //     //     innerObjNew.items.map((childObj) => { \r\n    //     //         childObj={...childObj,\r\n    //     //         'parentID':parentIDNew}\r\n    //     //         this.generateUUID(childObj)\r\n    //     //     })\r\n    //     // }\r\n    //     let parentIDNew=uuid()\r\n    //     let innerObjNew={...innerObj,\r\n    //            'id':parentIDNew } \r\n    //  if (innerObjNew.items && innerObjNew.items.length > 0) {\r\n    //        innerObjNew.items.map((childObj) => { \r\n    //                 childObj={...childObj,\r\n    //                 'parentID':parentIDNew}\r\n    //                 return  this.generateUUID(childObj)\r\n    //             })\r\n    // } \r\n    //     return innerObjNew\r\n    // }\r\n\r\n    generateUUID(innerObj) {\r\n        let parentIDNew = uuid()\r\n        let innerObjNew = {\r\n            ...innerObj,\r\n            'id': parentIDNew\r\n        }\r\n\r\n        //  innerObj['id']=parentIDNew  \r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            for (let Obj of innerObj.items) {\r\n                let childObj = Obj;\r\n                childObj = {\r\n                    ...childObj,\r\n                    'parentID': parentIDNew\r\n                }\r\n                //childObj['parentID']=parentIDNew\r\n\r\n                this.generateUUID(childObj);\r\n            }\r\n        }\r\n        return innerObj;\r\n    }\r\n\r\n    searchClickedItemParent(treeData, clickedItem) {\r\n        let ParentItem = { ...treeData };\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (clickedItem ? (clickedItem.id === childData.id) : (childData.editable === true)) {\r\n                        return treeData;\r\n                    } else {\r\n                        if (childData.items) {\r\n                            ParentItem = this.searchClickedItemParent(childData, clickedItem)\r\n                            if (ParentItem) {\r\n                                return ParentItem;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //    return ParentItem;\r\n    }\r\n    cloneNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentID = '';\r\n        let clonedParentID = '';\r\n        let parentFound = false;\r\n        let cloneItems = {};\r\n        let clonedparentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        let newData1 = [...this.state.treeData];\r\n        mapTree(this.state.treeData\r\n            , \"items\", (item) => {\r\n                // if (item.items) {\r\n                //     if (parentFound&&(item.id===parentID)) {\r\n                //         parentItem = item;\r\n                //         parentFound = false;\r\n                //     }\r\n                // }\r\n\r\n                if (item.id === clickedItem.id) {\r\n                    parentFound = true;\r\n                    parentID = clickedItem.parentID\r\n                    parentItem = this.searchClickedItemParent(this.state.treeData[0])\r\n                }\r\n                if (item.editable === true) {\r\n                    clonedParentID = uuid();\r\n                    let clonedNewParentID = uuid();\r\n                    //     //  let clonedObject=//{...item}\r\n                    //     //   Object.assign({}, item);\r\n                    //       const clonedObject = JSON.parse(JSON.stringify(item1));\r\n                    //      cloneItems =//[{...clonedObject}].map((data) => {\r\n                    //       // return \r\n                    //        this.generateUUID(clonedObject)\r\n                    //    // })\r\n                    let levelBasedParents = {}\r\n                    cloneItems = mapTree([{ ...item }], \"items\", (cloneditem) => {\r\n                        // const indices = cloneditem.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                        // let x=getItemPath(this.state.treeData,indices,\"items\")\r\n                        // console.log('------------->',cloneditem)\r\n                        // if(cloneditem.items===undefined&&clonedparentFound){\r\n                        //     clonedParentID=uuid();\r\n                        //     clonedparentFound=false;\r\n                        // }\r\n                        // else{\r\n                        //     clonedNewParentID=uuid();\r\n                        // }\r\n                        // if(!levelBasedParents.hasOwnProperty(cloneditem.itemHierarchicalIndex)){\r\n                        //     let level=cloneditem.itemHierarchicalIndex;\r\n                        //     levelBasedParents={...levelBasedParents,\r\n                        //                         [level]:uuid()\r\n                        //                     }\r\n                        // }\r\n                        // if(cloneditem.items){\r\n                        //      //if ClonedItem is a Parent\r\n\r\n                        //     cloneditem={\r\n                        //         ...cloneditem,\r\n                        //         'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedNewParentID\r\n                        //         ,\r\n                        //         'id':clonedParentID,\r\n                        //         'editable': false \r\n                        //     } \r\n                        //     clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\r\n                        //     //  clonedParentID=uuid()//clonedNewParentID;\r\n                        //     // clonedparentFound=true;\r\n                        // }else{\r\n                        //if ClonedItem is a Child\r\n                        cloneditem = {\r\n                            ...cloneditem,\r\n                            //'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedParentID\r\n                            // ,\r\n                            'id': uuid(),\r\n                            'editable': false,\r\n                            'expanded': false\r\n                            //   }\r\n                            //  clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\r\n                        }\r\n                        return cloneditem;\r\n                    });\r\n                }\r\n\r\n                // item={\r\n                //    ...item,\r\n                //     'id':uuid(),\r\n                //   'editable': false \r\n                //     } \r\n                return item;\r\n            });\r\n        if (parentItem === undefined) {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ROOTNODECANNOTBEDELETED\" }))\r\n        }\r\n        let count = 1;\r\n        newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n\r\n            if (item.id === parentItem.id) {\r\n                count++;\r\n                item.items.push(\r\n                    // {\r\n                    // ...cloneItem,\r\n                    // 'id':uuid(),\r\n                    // 'editable': false,\r\n                    // 'text': cloneItem['text']+'('+count+')'\r\n                    // } \r\n                    {\r\n                        ...cloneItems[0]\r\n                        ,\r\n                        'parentID': parentID,\r\n                        // 'id':clonedParentID\r\n                    }\r\n                );\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    }\r\n    equalNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.items) {\r\n                if (parentFound) {\r\n                    parentItem = item;\r\n                    parentFound = false;\r\n                }\r\n            }\r\n\r\n            if (item.id === clickedItem.id) {\r\n                parentFound = true;\r\n            }\r\n\r\n            return item;\r\n        });\r\n        if (parentItem.text === undefined) {\r\n            newData.push({\r\n                id: uuid(),\r\n                text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                expanded: true,\r\n                editable: false,\r\n                locationlastnode: false,\r\n                containerfirstnode: false,\r\n                containerlastnode: false,\r\n                itemhierarchy: \"\"\r\n            });\r\n            this.setState({ treeData: newData });\r\n        } else {\r\n            newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.id === parentItem.id) {\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false,\r\n                        itemhierarchy: \"\"\r\n                    });\r\n                }\r\n                return item;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    deleteNode = (clickedItem) => {\r\n        if (clickedItem.root && clickedItem.root === true) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PARENTNODENOTALLOWTODELETE\" }));\r\n        } else {\r\n            const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n                return item.id === clickedItem.id;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    editRecord = (e, clickedItem) => {\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModalShow = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { loadTreeProperties: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId, isView: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            if (event.target.checked && event.target.name === 'nneedposition') {\r\n                selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\r\n                selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\r\n                selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\r\n                selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode'];\r\n\r\n                //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\r\n            }\r\n               \r\n            selectedRecord[event.target.name] = event.target.checked;\r\n            if(event.target.checked===false && event.target.name === 'nneedposition'){\r\n                selectedRecord['nrow'] =1;\r\n                selectedRecord['ncolumn']=1;\r\n                selectedRecord['nnoofcontainer']=1;\r\n            }\r\n           \r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    itemRender = (props) => {\r\n        if (this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {props.item.editable ? (\r\n                        <Form.Group className=\"k-editable-text-wrap\">\r\n                            <Form.Control\r\n                                id={\"nodename\"}\r\n                                name={\"nodename\"}\r\n                                type=\"text\"\r\n                                onKeyDown={(e) => e.stopPropagation()}\r\n                                value={props.item.text}\r\n                                autoFocus\r\n                                autoComplete=\"off\"\r\n                                onChange={(e) => this.handleChange(e, props.item)}\r\n                                onBlur={(e) => this.handleBlur(e, props.item, props.itemHierarchicalIndex)}\r\n                                maxLength=\"50\"\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <span>{props.item.text}</span>\r\n                    )}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    {props.item ? (\r\n                        <>\r\n                            <span className='d-flex align-items-center'>\r\n                                <span className={`normal-node text-truncate\r\n                            ${props.item.editable ? \"active-node\" : \"\"}\r\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `} data-tip={props.item.text}>\r\n                                    {props.item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                        props.item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                            props.item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                                props.item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                    {props.item.text}\r\n                                </span>\r\n                                {props.item.editable ? (\r\n                                    <>  \r\n                                        {/* \r\n                                <Button   className=\"action-icon tree-level1\" role=\"button\"\r\n                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })}\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.cloneNode(e, props.item);\r\n                                                }}>\r\n                                                <FontAwesomeIcon icon={faClone}\r\n                                                 title={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })} />\r\n                                            </Button> */}\r\n                                        {/* <span\r\n                                        className=\"action-icon tree-level1\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EQUALNODE\" })}\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            this.equalNode(e, props.item);\r\n                                        }}\r\n                                    ></span> */}\r\n                                        <span\r\n                                            className=\"action-icon tree-level2\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CHILDNODE\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.addChildNode(e, props.item);\r\n                                            }}\r\n                                        ></span> \r\n                                        <span\r\n                                            className=\"k-icon k-i-edit k-i-pencil ml-2\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.editRecord(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        {!props.item.isRoot ? (\r\n                                            <span\r\n                                                className=\"k-icon k-i-delete ml-2\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.deleteNode(props.item);\r\n                                                }}\r\n                                            ></span>\r\n                                        ) : null}\r\n                                           <span\r\n                                            className=\"action-icon tree-toggle m-l-half\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                            onClick={(e) => this.setProperties(e, props)}\r\n                                        ></span>\r\n                                          <span\r\n                                            className=\"action-icon tree-level1\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.cloneNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    </>\r\n                                ) : null}\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        // if (selectedItem) {\r\n        //     selectedItem.editable = false;\r\n        //   }\r\n        //   event.item.editable = true;\r\n        //   selectedItem = event.item; \r\n\r\n\r\n        // let searchedData =undefined;\r\n        // if(this.state.searchedTreeData){\r\n        //      searchedData = mapTree(this.state.searchedTreeData, \"items\", (item1) => {\r\n        //         if (item1.editable === true) {\r\n        //             item1.editable = false;\r\n        //         } else if (item1.id === event.item.id) {\r\n        //             item1.editable = true;\r\n        //         }\r\n        //         return item1;\r\n        //     });\r\n        // } \r\n\r\n        // let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n        //     if (item.editable === true) {\r\n        //         item.editable = false;\r\n        //     } else if (item.id === event.item.id) {\r\n        //         item.editable = true;\r\n        //     }\r\n        //     return item;\r\n        // });\r\n        // this.setState({ treeData: newData,searchedTreeData: searchedData  }); \r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.editable === true) {\r\n                    item.editable = false;\r\n                } else if (item.id === event.item.id) {\r\n                    item.editable = true;\r\n                    if (this.pointedItem) {\r\n                        if (this.pointedItem.id === item.id) {\r\n                            this.pointedItem = undefined\r\n                        }\r\n                    }\r\n                    let result = this.state.searchedTreeData;\r\n                    const indices =\r\n                        event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                    let itemText = \"\";\r\n\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    item.itemhierarchy = itemText;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            searchedData.map((data) => {\r\n                this.clearSelected(data, event.item)\r\n            })\r\n        }\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n\r\n                let result = this.state.treeData;\r\n                const indices =\r\n                    event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                let itemText = \"\";\r\n\r\n                for (let i = 0; i < indices.length; i++) {\r\n                    if (i === 0) {\r\n                        result = result[0];\r\n                    } else {\r\n                        result = result.items[indices[i]];\r\n                    }\r\n                    itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                }\r\n                item.itemhierarchy = itemText;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n\r\n\r\n        this.setState({ treeData: newData, searchedTreeData: searchedData });\r\n    };\r\n\r\n\r\n    shrinkNodes(ParentItem) {\r\n        //  ParentItem.expanded=false;\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    childData.expanded = false;\r\n                    if (childData.items) {\r\n                        this.shrinkNodes(childData)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleSearch = () => {\r\n        this.setState({\r\n            showSearch: !this.state.showSearch\r\n        })\r\n    }\r\n\r\n\r\n    clearSearchedState = () => {\r\n        this.setState({\r\n            searchedTreeData: undefined,\r\n            showSearch: false\r\n        })\r\n    }\r\n\r\n    navigationCounter = () => {\r\n        let counter = this.state.counter || 0;\r\n\r\n        return counter;\r\n    }\r\n    // handleSearch = () => { \r\n    //     let value = document.querySelector('.k-textbox').value\r\n    //     this.uniqueIDArr=[]\r\n    //     this.countforTree=0;\r\n    //     let newData = this.search(this.state.treeDataView, value) \r\n    //     //Always root node should be expanded\r\n    //     newData[0].expanded=true;  \r\n    //     if(value===\"\"){\r\n    //         this.pointedItem=undefined\r\n    //         this.setState({ searchedTreeData: undefined })\r\n    //     }else{\r\n    //         this.setState({ searchedTreeData: JSON.parse(JSON.stringify(newData)) })\r\n    //     }\r\n    //   }\r\n    handleSearch = () => {\r\n        this.uniqueIDArr = []\r\n        this.pointedItem = undefined\r\n        this.countforTree = 0;\r\n        //this.setState({searchedTreeData: undefined})\r\n    }\r\n    search = (items, term) => {\r\n        return items.reduce((acc, item) => {\r\n            if (this.contains(item.text, term)) {\r\n                this.uniqueIDArr.push(item.id);\r\n                acc.push(item);\r\n            } else if (item.items && item.items.length > 0) {\r\n                let newItems = this.search(item.items, term);\r\n                if (newItems && newItems.length > 0) {\r\n                    acc.push({\r\n                        ...item, text: item.text, items: newItems, expanded: acc.length === 0 ?\r\n                            true : false//item.expanded\r\n\r\n                    });\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    handlenavigation = (e, direction) => {\r\n        if (e.key === 'Enter' || e.type === 'click') {\r\n            let value = document.querySelector('.k-textbox').value\r\n            if (value !== \"\") {\r\n\r\n                if (direction === 'up') {\r\n                    //Navigate up\r\n                    this.countforTree--;\r\n                    if (this.countforTree <= 0) {\r\n                        this.countforTree = 0;\r\n\r\n                    }\r\n                } else {\r\n                    //if(direction==='down'){\r\n                    //Navigate down\r\n                    this.countforTree++;\r\n                    if (this.countforTree >= this.uniqueIDArr.length) {\r\n                        if ((this.uniqueIDArr.length - 1) === -1) {\r\n                            this.countforTree = 0;\r\n                        } else {\r\n                            this.countforTree = this.uniqueIDArr.length - 1;\r\n                        }\r\n\r\n                        //toast.info(this.props.intl.formatMessage({ id: \"IDS_NOMORENODESTOSEARCH\" }))\r\n                    }\r\n                }\r\n\r\n                let newData = this.navigateSearchedTree(this.state.treeDataView, value)\r\n\r\n\r\n                this.setState({ searchedTreeData: JSON.parse(JSON.stringify(newData)) })\r\n            }\r\n            else {\r\n                this.setState({ searchedTreeData: undefined })\r\n            }\r\n        }\r\n    }\r\n    navigateSearchedTree = (items, term) => {\r\n        return items.reduce((acc, item) => {\r\n            if (item.editable) {\r\n                item.editable = false\r\n            }\r\n            if (item.selected) {\r\n                item.selected = false\r\n            }\r\n            if (this.contains(item.text, term)) {\r\n\r\n                if (!this.uniqueIDArr.includes(item.id)) {\r\n                    this.uniqueIDArr.push(item.id);\r\n                }\r\n                if (item.id === this.uniqueIDArr[this.countforTree]) {\r\n                    if (this.pointedItem) {\r\n                        this.pointedItem = undefined;\r\n                    }\r\n                    this.pointedItem = item;\r\n                }\r\n                acc.push(item);\r\n            } else if (item.items && item.items.length > 0) {\r\n                let newItems = this.navigateSearchedTree(item.items, term);\r\n                if (newItems && newItems.length > 0) {\r\n                    if (newItems.some(item => item.id === this.uniqueIDArr[this.countforTree])) {\r\n                        acc.push({ ...item, text: item.text, items: newItems, expanded: true });\r\n                    } else {\r\n                        acc.push({\r\n                            ...item, text: item.text, items: newItems, expanded:\r\n                                newItems.some(item => item.expanded === true) ? true : false\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    contains = (text, term) => {\r\n        return text.toLowerCase().indexOf(term.toLowerCase()) >= 0;\r\n    }\r\n    onExpandChange = (event) => {\r\n        let clickedItem = event.item\r\n        if (!event.item.expanded) {\r\n            //this.onItemClick(event)\r\n            let ParentItem = this.searchClickedItemParent(//this.state.searchedTreeData&&\r\n                //this.state.searchedTreeData[0]||\r\n                this.state.treeData[0], clickedItem)\r\n            if (ParentItem) {\r\n                ParentItem.items.map(item => {\r\n                    item.expanded = false;\r\n                });\r\n            }\r\n            this.shrinkNodes(event.item);\r\n        }\r\n        event.item.expanded = !event.item.expanded;\r\n\r\n        this.forceUpdate();\r\n    };\r\n\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        this.getitemPath = { ...this.getitemPath, [item.id]: clickedItem.itemHierarchicalIndex }\r\n\r\n\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <>\r\n\r\n                            <span className='d-flex align-items-center'>\r\n                                {this.pointedItem ? (item.id === this.pointedItem.id) && !item.selected ?\r\n                                    <>\r\n                                        <input type=\"text\" className='hidden-treeview-focus' id='selected-tree-point' />\r\n                                    </> :\r\n                                    <></> : ''\r\n                                }\r\n                                <span className={`normal-node text-truncate\r\n                                ${this.pointedItem ? (item.id === this.pointedItem.id) && !item.selected ? \"pointed-node\" : item.selected ? \"active-node\" : \"\" :\r\n                                        item.selected ? \"active-node\" : \"\"}\r\n                                ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                                `} data-tip={item.text}>\r\n                                    {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                        item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                            item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                                item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                    {item.text}\r\n                                </span>\r\n                                {/* <ul className=\"list-inline mb-0\">\r\n                                <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li> */}\r\n                                {this.pointedItem && item.id === this.pointedItem.id ?\r\n                                    <FontAwesomeIcon icon={faHandPointLeft} bounce\r\n                                    />\r\n                                    :\r\n                                    clickedItem.item.editable ?\r\n                                        (\r\n                                            <>\r\n                                                {/* <span\r\n                                        className=\"action-icon tree-toggle m-l-half\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                        onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                    ></span>  */}\r\n                                            </>\r\n                                        )\r\n                                        : null\r\n                                }\r\n                                {/* </ul> */}\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClickView = (event) => {\r\n        // if (this.state.selectedItem) {\r\n        //     let selectedobj = this.state.selectedItem;\r\n        //         selectedobj.selected = false\r\n        //     this.setState({\r\n        //         selectedItem : selectedobj\r\n        //     })\r\n        // }\r\n        // this.setState({\r\n        //     selectedItem : event.item\r\n        // })             \r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.editable === true) {\r\n                    item.editable = false;\r\n                } else if (item.id === event.item.id) {\r\n                    item.editable = true;\r\n                    if (this.pointedItem) {\r\n                        if (this.pointedItem.id === item.id) {\r\n                            this.pointedItem = undefined\r\n                        }\r\n                    }\r\n                    let result = this.state.searchedTreeData;\r\n                    const indices =\r\n                        event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                    let itemText = \"\";\r\n\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    item.itemhierarchy = itemText;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            searchedData.map((data) => {\r\n                this.clearSelected(data, event.item)\r\n            })\r\n        }\r\n        let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n\r\n                let result = this.state.treeDataView;\r\n                const indices =\r\n                    event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                let itemText = \"\";\r\n\r\n                for (let i = 0; i < indices.length; i++) {\r\n                    if (i === 0) {\r\n                        result = result[0];\r\n                    } else {\r\n                        result = result.items[indices[i]];\r\n                    }\r\n                    itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                }\r\n                item.itemhierarchy = itemText;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n\r\n\r\n        this.setState({ treeDataView: newData, searchedTreeData: searchedData });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChangeView = (event) => {\r\n\r\n        let clickedItem = event.item\r\n        if (!event.item.expanded) {\r\n            //this.onItemClick(event)\r\n            let ParentItem = this.searchClickedItemParent(this.state.searchedTreeData &&\r\n                this.state.searchedTreeData[0] || this.state.treeDataView[0], clickedItem)\r\n            if (ParentItem) {\r\n                ParentItem.items.map(item => {\r\n                    item.expanded = false;\r\n                });\r\n            }\r\n            this.shrinkNodes(event.item);\r\n        }\r\n\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    setProperties = (event, clickedItem) => {\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        //this.props.openPropertyModal(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, clickedItem, editId);\r\n        this.openPropertyModal(clickedItem, editId);\r\n\r\n    };\r\n\r\n    openPropertyModal(clickedItem, editId) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false :\r\n            clickedItem.item.locationlastnode;\r\n        selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false :\r\n            clickedItem.item.containerfirstnode;\r\n        selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false :\r\n            clickedItem.item.containerlastnode;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord, loadTreeProperties: true,\r\n                clickedItem, loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleChange = (e, clickedItem) => {\r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.id === clickedItem.id) {\r\n                    item.text = e.target.value;\r\n                }\r\n                return item;\r\n            });\r\n        }\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.text = e.target.value;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData, searchedTreeData: searchedData });\r\n    };\r\n    //generate Path for edited item \r\n    generatePathForEditedItem(ParentItem, indices) {\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i];\r\n                    let result = this.state.treeData;\r\n                    indices.push(i);\r\n                    let itemText = \"\";\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    childData.itemhierarchy = itemText;\r\n\r\n                    if (childData.items) {\r\n                        this.generatePathForEditedItem(childData, indices)\r\n                    }\r\n                    indices.pop();\r\n                }\r\n            }\r\n        } else {\r\n            let result = this.state.treeData;\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[0];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n            ParentItem.itemhierarchy = itemText;\r\n        }\r\n    }\r\n\r\n    handleBlur = (e, clickedItem, itemHierarchicalIndex) => {\r\n        clickedItem.editable = false;\r\n        //Added for creating path after edit \r\n        const indices = itemHierarchicalIndex.split('_').map(index => Number(index));\r\n        this.generatePathForEditedItem(clickedItem, indices);\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if(this.props.Login.operation ===\"create\" || this.props.Login.operation ===\"update\"){\r\n            this.onSaveSampleStorageLocation(saveType, formRef);\r\n        } else if(this.props.Login.operation === \"addinfo\"){\r\n            this.onSaveAdditionalInformation(saveType, formRef);\r\n        }\r\n    };\r\n    onSaveProperties = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        // if (this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT) {\r\n        if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n            let count = 0;\r\n            if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (count > 1) {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONE\" }));\r\n            } else {\r\n                let haschild=false;\r\n                let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                    if (item.id === this.props.Login.clickedItem.item.id) {\r\n                        if(item.hasOwnProperty('items')&&item.items!==undefined&&selectedRecord[\"containerlastnode\"]===true){\r\n                            haschild=true;\r\n                        }else{\r\n                            item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n                            item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n                            item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n                        } \r\n                    }\r\n                    if (item.selected && item.selected === true) {\r\n                        item.selected = false;\r\n                    }\r\n                    return item;\r\n                });\r\n                if(haschild===true){\r\n                    toast.info( this.props.intl.formatMessage({ id:  \"IDS_STORAGELOCATIONENDCANNOTHAVECHILDNODE\" })\r\n                   \r\n                    );\r\n                }else{\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            treeData: newData,\r\n                            selectedRecord, loadTreeProperties: false,\r\n                            loading: false\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo)\r\n                } \r\n            }\r\n        }\r\n        // } else {\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        // }\r\n    }\r\n    onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\r\n        //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n        let inputData = [];\r\n        let jsondata = {}\r\n        let postParam = undefined;\r\n        let countLevels = 0;\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            }\r\n            if (item.expanded === false) {\r\n                item.expanded = true;\r\n            }\r\n            item.expanded = false;\r\n            countLevels++;\r\n            return item;\r\n        });\r\n\r\n        // let lhs = JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data;\r\n        // let rhs = newData;\r\n\r\n        // console.log(detailedDiff(lhs, rhs));\r\n\r\n        // return;\r\n        // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n        if (countLevels > 3) {\r\n\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\r\n            inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ?\r\n                selectedRecord[\"nprojecttypecode\"].value : -1;\r\n            inputData[\"sampleStorageLocation\"][\"nunitcode\"] = selectedRecord['nunitcode'] ? parseInt(selectedRecord['nunitcode']) : -1;\r\n            inputData[\"sampleStorageLocation\"][\"nquantity\"]= selectedRecord['nquantity'] ?parseInt(selectedRecord['nquantity']) : 0;\r\n            inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value\r\n                : -1;\r\n            inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"]\r\n                ? 3\r\n                : 4;\r\n            inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ?\r\n                {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: selectedRecord['ncontainertypecode'].value ?\r\n                        selectedRecord['ncontainertypecode'].value : -1,\r\n                    ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\r\n                    nneedposition: 3,\r\n                    ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ?\r\n                        selectedRecord['ncontainerstructurecode'].value : -1,\r\n                        nnoofcontainer: selectedRecord['nnoofcontainer'] ?\r\n                        parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                             nrow:selectedRecord['nrow'] ,\r\n\t\t\t\t\t       ncolumn: selectedRecord['ncolumn']\r\n\r\n                } : {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: -1,\r\n                    ndirectionmastercode: 1,\r\n                    nneedposition: 4,\r\n                    ncontainerstructurecode: -1, nnoofcontainer: selectedRecord['nnoofcontainer'] ?\r\n                        parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                        nrow:selectedRecord['nrow'] ,\r\n                      ncolumn: selectedRecord['ncolumn']\r\n                }\r\n            inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n            if (this.props.Login.operation === \"create\") {\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // }\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n            } else {\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                // inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"].value\r\n                // inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"].value\r\n\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_CREATEATLEASTFOURLEVELS\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveAdditionalInformation = (saveType, formRef) => {\r\n        const { selectedRecord } = this.state;\r\n        let inputData = [];\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n        inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ? selectedRecord[\"nprojecttypecode\"].value : -1;\r\n        inputData[\"sampleStorageLocation\"][\"nunitcode\"] = selectedRecord[\"nunitcode\"] && selectedRecord[\"nunitcode\"].value ? selectedRecord[\"nunitcode\"].value : -1;\r\n        inputData[\"sampleStorageLocation\"][\"nquantity\"] = selectedRecord[\"nquantity\"] && selectedRecord[\"nquantity\"] ? parseInt(selectedRecord[\"nquantity\"]) : 0;\r\n        inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value : -1;\r\n        inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"] ? 3 : 4;\r\n        inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ?\r\n                {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: selectedRecord['ncontainertypecode'].value ? selectedRecord['ncontainertypecode'].value : -1,\r\n                    ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\r\n                    nneedposition: 3,\r\n                    ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ? selectedRecord['ncontainerstructurecode'].value : -1,\r\n                    // nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\r\n                    nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                    nrow:selectedRecord['nrow'] ,\r\n\t\t\t\t\tncolumn: selectedRecord['ncolumn']\r\n\r\n                } : {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: -1,\r\n                    ndirectionmastercode: 1,\r\n                    nneedposition: 4,\r\n                    ncontainerstructurecode: -1,\r\n                    // nquantity: selectedRecord['nquantity'] ?  parseInt(selectedRecord['nquantity']) : 1,\r\n                     nnoofcontainer: selectedRecord['nnoofcontainer'] ? parseInt(selectedRecord['nnoofcontainer']) : 1,\r\n                    nrow:selectedRecord['nrow'] ,\r\n                    ncolumn: selectedRecord['ncolumn']\r\n                }\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"addinfo\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n\r\n            \r\n        \r\n    }\r\n\r\n    deleteSampleStorageLocation = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n\r\n        let inputData = [];\r\n        inputData[\"sampleStorageVersion\"] = {};\r\n        inputData[\"sampleStorageLocation\"] = {};\r\n\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"]\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageLocation\",\r\n            classUrl: \"samplestoragelocation\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageLocation(ncontrolCode));\r\n    };\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.props.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    calculateRowColumn = (Row, column) => {\r\n        let nnoofcontainer = Row * column;\r\n        return nnoofcontainer;\r\n    }\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow,\r\n                        containerStructureOptions[0].item.ncolumn) : 1,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            if (this.searchRef.current) {\r\n                this.searchRef.current.value = \"\";\r\n            }\r\n\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else {\r\n            if (fieldName === 'nstoragecategorycode') {\r\n                this.getSampleStorageLocation({\r\n                    userinfo: this.props.userInfo,\r\n                    nstoragecategorycode: comboData.value\r\n                }, fieldName, comboData);\r\n            } else if (fieldName === 'ncontainertypecode') {\r\n                this.getContainerStructure({\r\n                    userinfo: this.props.userInfo,\r\n                    ncontainertypecode: comboData.value\r\n                }, fieldName, comboData);\r\n\r\n            } else if (fieldName === 'ncontainerstructurecode') {\r\n                selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n                selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n                selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'],\r\n                    selectedRecord['ncolumn']) : 1\r\n\r\n            } else if (fieldName === 'nsamplestoragelocationcode') {\r\n                this.getSampleStorageLocation({\r\n                    userinfo: this.props.userInfo,\r\n                    nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\r\n                    nsamplestoragelocationcode: comboData.value\r\n\r\n                }, fieldName, comboData);\r\n            }\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onApproveSampleStorageLocation = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let inputData = [];\r\n        let locationEnd = false;\r\n        let storageStart = false;\r\n        let storageEnd = false;\r\n        let containers = [];\r\n        let containerpath = [];\r\n        let containerlastnode = [];\r\n        mapTree(this.state.treeDataView\r\n            //this.state.treeData\r\n            , \"items\", (item) => {\r\n                if (item.locationlastnode === true) {\r\n                    locationEnd = true;\r\n                }\r\n                if (item.containerfirstnode === true) {\r\n                    storageStart = true;\r\n                    containers.push({ itemHierarchy: item.itemhierarchy, scontainercode: item.id });\r\n                }\r\n                if (item.containerlastnode === true) {\r\n                    storageEnd = true;\r\n                    containerpath.push({scontainerpath:item.itemhierarchy});\r\n                    containerlastnode.push(item.text);\r\n                }\r\n                return null;\r\n            });\r\n        // if (locationEnd === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\r\n        //     return;\r\n        // }\r\n        // if (storageStart === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\r\n        //     return;\r\n        // }\r\n        // if (storageEnd === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\r\n        //     return;\r\n        // }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n        inputData[\"containers\"] = containers;\r\n        inputData[\"containerpath\"] = JSON.stringify(containerpath);\r\n        inputData[\"containerpathsize\"] = containerpath.length;\r\n        inputData[\"containerlastnode\"] = JSON.stringify(containerlastnode);\r\n        inputData[\"propertyValidation\"] = { \"locationEnd\": locationEnd, \"storageStart\": storageStart, \"storageEnd\": storageEnd };\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        inputData[\"selectedSampleStorageLocation\"] = masterData.selectedSampleStorageLocation;\r\n\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_STORAGESTRUCTURE\",\r\n            userInfo: this.props.Login.userInfo, operation: \"Approve\",\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"Approve\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    viewAdditionalInfo = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isView: true,\r\n                openModal: true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    additionalInformation=(selectedSampleStorageVersion,userInfo,addInfoId) => {\r\n\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.additionalInformationData(selectedSampleStorageVersion, userInfo, isOnlyDraft, addInfoId);\r\n\r\n    }\r\n\r\n\r\n    importdata = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: 'IDS_IMPORT',\r\n                openModal: true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    copySampleStorageversion = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n\r\n        let inputData = [];\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageVersion\",\r\n            displayName: \"IDS_STORAGESTRUCTURE\",\r\n            userInfo: this.props.Login.userInfo, operation: \"copy\"\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"copy\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    reloadData = () => {\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n       \r\n        // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\r\n        let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \"nstoragecategorycode\": nfilterStorageCategory },\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_STORAGESTRUCTURE\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let constantvalue = value.target.value ;\r\n\r\n        if (field === 'nnoofcontainer') {\r\n            if (constantvalue !== 0) {\r\n                selectedRecord['nrow'] = 1;\r\n                selectedRecord['ncolumn'] = constantvalue;\r\n            } else {\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn']\r\n            }\r\n\r\n        }\r\n        if (!isNaN(constantvalue)) {\r\n            selectedRecord[field] = constantvalue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageLocation = (addId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n        if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\r\n            this.props.fetchStorageCategory({ userInfo: this.props.Login.userInfo, id: uuid(), nfilterStorageCategory: this.state.nfilterStorageCategory, addId });\r\n        } else {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGECATEGORY\" }));\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageStructure\") && this.state.controlMap.get(\"Add SampleStorageStructure\").ncontrolcode;\r\n        console.log(\"addId:\",addId);\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageStructure\") && this.state.controlMap.get(\"Edit SampleStorageStructure\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageStructure\") && this.state.controlMap.get(\"Delete SampleStorageStructure\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageStructure\") && this.state.controlMap.get(\"Copy SampleStorageStructure\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageStructure\") && this.state.controlMap.get(\"Approve SampleStorageStructure\").ncontrolcode;\r\n        const addInfoId = this.state.controlMap.has(\"AdditionalInformation\") && this.state.controlMap.get(\"AdditionalInformation\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n        const infoFields = [\r\n            { \"dataField\": \"sstoragecategoryname\", \"idsName\": \"IDS_STORAGECATEGORY\" },\r\n            { \"dataField\": \"ssamplestoragelocationname\", \"idsName\": \"IDS_STORAGESTRUCTURENAME\" },\r\n            { \"dataField\": \"sprojecttypename\", \"idsName\": \"IDS_PROJECT\" },\r\n            { \"dataField\": \"sproductname\", \"idsName\": \"IDS_PRODUCT\" }, \r\n            { \"dataField\": \"nquantity\", \"idsName\": \"IDS_QUANTITY\" },\r\n            { \"dataField\": \"sunitname\", \"idsName\": \"IDS_UNIT\" },\r\n            { \"dataField\": \"scontainertype\", \"idsName\": \"IDS_CONTAINERTYPE\" },\r\n            { \"dataField\": \"scontainerstructurename\", \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\" },\r\n            { \"dataField\": \"nnoofcontainer\", \"idsName\": \"IDS_NOOFSAMPLECONTAINER\" },\r\n            { \"dataField\": \"sdirection\", \"idsName\": \"IDS_DIRECTION\" },\r\n            { \"dataField\": \"nrow\", \"idsName\": \"IDS_ROWS\" },\r\n            { \"dataField\": \"ncolumn\", \"idsName\": \"IDS_COLUMNS\" },  \r\n            { \"dataField\": \"sneedautomapping\", \"idsName\": \"IDS_AUTOMAPPING\" }];\r\n\r\n        // const mandatoryFields =\r\n        //     this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n        //         this.state.selectedRecord[\"nneedposition\"] === false ?\r\n        //         [\r\n        //             { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //             { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //             // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        //             // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        //             // {\r\n        //             //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n        //             //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n        //             //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n        //             // }\r\n        //         ]\r\n        //         : [\r\n\r\n        //             { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //             { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //             // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        //             // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        //             // {\r\n        //             //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n        //             //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n        //             //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n        //             // },  \r\n        //             {\r\n        //                 \"idsName\": \"IDS_CONTAINERTYPE\",\r\n        //                 \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n        //                     \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        //             },\r\n        //             {\r\n        //                 \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n        //                 \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n        //                     \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n        //             },\r\n        //             {\r\n        //                 \"idsName\": \"IDS_DIRECTION\",\r\n        //                 \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n        //                     \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n        //             }\r\n        //         ]\r\n\r\n\r\n\r\n\r\n            const mandatoryFields =\r\n              this.state.selectedRecord[\"nneedposition\"] === undefined ||  this.state.selectedRecord[\"nneedposition\"] === false && this.props.Login.operation !==\"addinfo\" ?\r\n                [\r\n                    { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                ] : this.props.Login.operation ===\"create\" ? [                    \r\n                    { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_STORAGESTRUCTURENAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                ] : this.props.Login.operation ===\"addinfo\" && this.state.selectedRecord[\"nneedposition\"] !== undefined&& this.state.selectedRecord[\"nneedposition\"] === true   ? [ \r\n                    { \"idsName\": \"IDS_CONTAINERTYPE\",\"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                    { \"idsName\": \"IDS_DIRECTION\",\"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"selectbox\" }\r\n\r\n                ] :\"\"\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMasterJsonView\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || []}\r\n                                    selectedMaster={this.props.Login.masterData.selectedSampleStorageLocation &&\r\n                                        [this.props.Login.masterData.selectedSampleStorageLocation]}\r\n                                    primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                    getMasterDetail={(selectedItem) =>\r\n                                        this.props.getSelectedSampleStorageLocation(\r\n                                            selectedItem,\r\n                                            this.props.Login.userInfo, this.props.Login.masterData\r\n                                        )}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"ssamplestoragelocationname\"}\r\n                                    selectedListName=\"selectedSampleStorageLocation\"\r\n                                    objectName=\"LocationMaster\"\r\n                                    listName=\"IDS_STORAGESTRUCTURE\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    needFilter={true}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openStorageLocation(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TESTFILTER\":\r\n                                                <StorageCategoryFilter\r\n                                                    filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                    nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n\r\n                                />\r\n\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    {/* <PerfectScrollbar> */}\r\n                                    {/* Start of second column */}\r\n                                    <div className=\"card_group\">\r\n                                        <Row>\r\n                                            <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                {/* Start of version column */}\r\n                                                <TransactionListMasterJsonView\r\n                                                    masterList={this.props.Login.masterData.searchedData ||\r\n                                                        this.props.Login.masterData.sampleStorageVersion || []}\r\n                                                    needMultiSelect={false}\r\n                                                    selectedMaster={this.props.Login.masterData.selectedSampleStorageVersion &&\r\n                                                        [this.props.Login.masterData.selectedSampleStorageVersion]}\r\n                                                    primaryKeyField=\"nsamplestorageversioncode\"\r\n                                                    getMasterDetail={(selectedItem) =>\r\n                                                        this.props.getSelectedSampleStorageVersion(\r\n                                                            selectedItem, this.props.Login.userInfo,\r\n                                                            this.props.Login.masterData\r\n                                                        )}\r\n                                                    inputParam={{\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        masterData: this.props.Login.masterData\r\n                                                    }}\r\n                                                    mainField={\"nversionno\"}\r\n                                                    mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                    selectedListName=\"selectedSampleStorageVersion\"\r\n                                                    objectName=\"Version\"\r\n                                                    listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                                    hideSearch={true}\r\n                                                    needValidation={false}\r\n                                                    needFilter={false}\r\n                                                    moreField={[]}\r\n                                                    skip={this.state.detailSkip}\r\n                                                    take={this.state.detailTake}\r\n                                                    hidePaging={true}\r\n                                                    handlePageChange={this.handleDetailPageChange}\r\n                                                    splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                // actionIcons={\r\n                                                //     [\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                //             controlname: \"faPencilAlt\",\r\n                                                //             objectName: \"detailtoedit\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n                                                //         },\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                //             controlname: \"faTrashAlt\",\r\n                                                //             objectName: \"mastertodelete\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                //             onClick: () => this.confirmDelete(deleteId)\r\n                                                //         }\r\n                                                //     ]\r\n                                                // }\r\n                                                />\r\n                                                {/* End of version column */}\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                {/* Start of detailed content */}\r\n                                                <ProductList className=\"panel-main-content grid-master \">\r\n                                                    {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Header>\r\n                                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                                                <Card.Subtitle>\r\n                                                                    <div className=\"d-flex product-category\">\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <Nav.Link className=\"action-icons-wrap mr-2 pl-0\">\r\n                                                                                {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n\r\n                                                                                    <span className={`btn btn-outlined  outline-secondary btn-sm mr-3`}>\r\n                                                                                        <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                                                    </span>\r\n                                                                                    :\r\n                                                                                    this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ?\r\n\r\n                                                                                        <span className={`btn btn-outlined outline-danger btn-sm mr-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n                                                                                        </span>\r\n                                                                                        :\r\n                                                                                        <span className={`btn btn-outlined outline-success btn-sm mr-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                                                        </span>\r\n                                                                                }\r\n                                                                            </Nav.Link>\r\n                                                                        </h2>\r\n                                                                        <div className=\"d-inline\">\r\n                                                                            {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                <Nav.Link className=\"btn btn-circle 1 outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                    onClick={(e) => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                                :\r\n                                                                                <>    <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                                    onClick={(e) => this.copySampleStorageversion(copyId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faCopy} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                                    {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                        //hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                        // data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORT\" })}\r\n                                                                                        onClick={(e) => this.importdata(copyId)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faFileImport} />\r\n\r\n                                                                                    </Nav.Link> */}\r\n\r\n                                                                                </>\r\n\r\n                                                                            } \r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(addInfoId) === -1}\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFO\" })}\r\n                                                                                onClick={(e) => this.additionalInformation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, addInfoId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faInfoCircle} />\r\n                                                                            </Nav.Link>                                                                            \r\n\r\n                                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                // data-for=\"tooltip_list_wrap\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            </Nav.Link>\r\n                                                                            {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                                    onClick={() => this.onApproveSampleStorageLocation(approveId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                                </Nav.Link>\r\n                                                                                : \"\"\r\n                                                                            }\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                                                onClick={(e) => this.viewAdditionalInfo(copyId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye} />\r\n                                                                            </Nav.Link>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </Card.Subtitle>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body >\r\n                                                                <Col md={12}>\r\n\r\n                                                                    <div className={`list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`}>\r\n                                                                        <SearchIcon className=\"search-icon\" onClick={this.toggleSearch}>\r\n                                                                            <FontAwesomeIcon icon={faSearch} />\r\n                                                                        </SearchIcon>\r\n                                                                        <FormControl // ref={this.searchRef}\r\n                                                                         autoComplete=\"off\"\r\n                                                                            className='k-textbox' onChange={this.handleSearch}\r\n                                                                            placeholder={`${this.props.intl.formatMessage({ id: \"IDS_FILTER\" })}`}\r\n                                                                            name={\"search\"} onKeyUp={(e) => this.handlenavigation(e, 'down')}\r\n                                                                        />\r\n                                                                        {!this.props.showSearch ?\r\n                                                                            <>\r\n                                                                                <span className='search-up-down'>\r\n                                                                                    <FontAwesomeIcon icon={faChevronUp} onClick={(e) => this.handlenavigation(e, 'up')} />\r\n                                                                                    <FontAwesomeIcon icon={faChevronDown} onClick={(e) => this.handlenavigation(e, 'down')} />\r\n                                                                                    {/* <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })}  \r\n                                                                                                    onClick={(e)=>this.handlenavigation(e,'down')}>\r\n                                                                                                    <FontAwesomeIcon icon={faArrowDown} title={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })} />\r\n                                                                                                </Button>\r\n\r\n                                                                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEUP\" })}  \r\n                                                                                                    onClick={(e)=>this.handlenavigation(e,'up')}>\r\n                                                                                                    <FontAwesomeIcon icon={faArrowUp} title={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })} />\r\n                                                                                                </Button> */}\r\n                                                                                </span>\r\n                                                                            </>\r\n                                                                            : \"\"}\r\n                                                                        {this.props.showSearch ?\r\n                                                                            <SearchIcon className=\"close-right-icon\" onClick={this.toggleSearch}>\r\n                                                                                <FontAwesomeIcon icon={faTimes} />\r\n                                                                            </SearchIcon>\r\n                                                                            : \"\"}\r\n                                                                    </div>\r\n                                                                    <div className='tree-view-container'>\r\n                                                                        <TreeViewEditable\r\n                                                                            id=\"samplestoragelocation\"\r\n                                                                            name=\"samplestoragelocation\"\r\n                                                                            // label=\"Sample Storage Location\"\r\n                                                                            data={this.state.searchedTreeData || this.state.treeDataView}\r\n                                                                            expandIcons={true}\r\n                                                                            selectField={'active-node'}\r\n                                                                            item={this.itemRenderView}\r\n                                                                            onExpandChange={this.onExpandChangeView}\r\n                                                                            onItemClick={this.onItemClickView}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                        : \"\"}\r\n\r\n                                                </ProductList>\r\n                                                {/* End of detailed content */}\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                    </div>\r\n                                    {/* End of second column */}\r\n                                    {/* </PerfectScrollbar> */}\r\n\r\n                                </SplitterLayout>\r\n\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {<ModalShow\r\n                    modalShow={this.props.Login.loadTreeProperties}\r\n                    modalTitle={this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURE\" })}\r\n                    closeModal={this.closeModalShow}\r\n                    onSaveClick={this.onSaveClick}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    modalBody={\r\n                        <AddTreeProperties\r\n                            onInputChange={(e) => this.onInputChange(e)}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                    }\r\n                />}\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={this.props.Login.isView}\r\n                        operation={this.props.Login.isView ? \"\" : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.isView ? this.props.intl.formatMessage({ id: \"IDS_VIEW\" }) :\r\n                            this.props.Login.operation ===\"addinfo\" ? \"\" :\r\n                            this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURE\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.loadTreeProperties === true ? [] : mandatoryFields}\r\n                        addComponent={\r\n                            this.props.Login.isView ?\r\n                                <>\r\n\r\n                                    <Row>\r\n                                        {\r\n                                            infoFields.map((item, index) => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <Col md={6} >\r\n                                                            <FormGroup>\r\n                                                                <FormLabel>{this.props.intl.formatMessage({ id: item.idsName })}</FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] ?\r\n                                                                    this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] : '-'\r\n                                                                }</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                    </Row>\r\n                                </>\r\n                                :\r\n                                this.props.Login.screenName === 'IDS_IMPORT'\r\n                                    ? <>\r\n                                        {/* <Upload\r\n                                        batch={false}\r\n                                        multiple={false}\r\n                                        defaultFiles={[]}\r\n                                        withCredentials={false}\r\n                                        autoUpload={false}\r\n                                        onAdd={this.handleAdd}\r\n                                    /> */}\r\n                                        <hr />\r\n                                        {/* <Grid data={this.state.data} key={this.state.data} /> */}\r\n                                    </> :\r\n                                    this.props.Login.loadEsign ?\r\n                                        <Esign operation={this.props.Login.operation}\r\n                                            formatMessage={this.props.intl.formatMessage}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                        />\r\n                                        :\r\n                                        // this.props.Login.loadTreeProperties ? (\r\n                                        //     <AddTreeProperties\r\n                                        //         onInputChange={(e) => this.onInputChange(e)}\r\n                                        //         selectedRecord={this.state.selectedRecord || {}}\r\n                                        //     />\r\n                                        // ) \r\n                                       // :\r\n                                         this.state.treeData ? (\r\n                                            <>\r\n                                                <div>\r\n                                                    {/* <input className='k-textbox' onChange={this.handleSearch}/>\r\n                                <hr /> */}\r\n                                                    <AddTreeview\r\n                                                        clearSearchedState={this.clearSearchedState}\r\n                                                        toggleSearch={this.toggleSearch}\r\n                                                        handleSearch={this.handleSearch}\r\n                                                        handlenavigation={this.handlenavigation}\r\n                                                        showSearch={this.state.showSearch}\r\n                                                        treeData={//this.state.searchedTreeData||\r\n                                                            this.state.treeData}\r\n                                                        onInputChange={(e) => this.onInputChange(e)}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        itemRender={this.itemRender}\r\n                                                        onExpandChange={this.onExpandChange}\r\n                                                        onItemClick={this.onItemClick}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onItemDragOver={this.onItemDragOver}\r\n                                                        onItemDragEnd={this.onItemDragEnd}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        operation ={this.props.Login.operation}\r\n                                                        storageCategoryList={this.props.Login.storageCategoryList || []}\r\n                                                        projectTypeMapList={this.props.Login.projectTypeMapList || []}\r\n                                                        sampleTypeList={this.props.Login.sampleTypeList || []}\r\n                                                        isOnlyDraft={this.props.Login.isOnlyDraft}\r\n                                                        unitMapList={this.props.Login.unitMapList}\r\n                                                    />\r\n                                                </div></>\r\n                                        ) :\"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, filterColumnData, changeStorageCategoryFilter,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation,additionalInformationData\r\n})(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}