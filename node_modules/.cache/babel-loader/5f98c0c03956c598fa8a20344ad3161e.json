{"ast":null,"code":"import { ResultEntry } from '../../components/Enumeration';\nexport function numberConversion(number, rounding) {\n  return Number.parseFloat(number).toFixed(rounding);\n}\nexport function numericGrade(parameter, sfinalresult) {\n  let result = sfinalresult;\n  let minA = parseFloat(parameter.smina);\n  let maxA = parseFloat(parameter.smaxa);\n  let minB = parseFloat(parameter.sminb);\n  let maxB = parseFloat(parameter.smaxb);\n  let minLoD = parseFloat(parameter.sminlod);\n  let maxLoD = parseFloat(parameter.smaxlod);\n  let minLOQ = parseFloat(parameter.sminloq);\n  let maxLOQ = parseFloat(parameter.smaxloq);\n  let disregard = parseFloat(parameter.sdisregard);\n\n  if (disregard !== \"null\" && disregard > sfinalresult) {\n    return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\n  } else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result >= minLOQ && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BQL;\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\n      if (result >= minLoD && result <= maxLoD) {\n        return ResultEntry.RESULTSTATUS_BDL;\n      } else {\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n      }\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\n    if (result >= minLoD && result <= maxLoD) {\n      return ResultEntry.RESULTSTATUS_BDL;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n    }\n  } else {\n    return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n  }\n}\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\n  if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    return findGrade(minB, minA, maxA, maxB, result);\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLOQ && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else {\n    return findGrade(minB, minA, maxA, maxB, result);\n  }\n}\nexport function findGrade(minB, minA, maxA, maxB, result) {\n  if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    return ResultEntry.RESULTSTATUS_FIO;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB || maxB < result) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_PASS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result <= maxB) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxB) {\n      return ResultEntry.RESULTSTATUS_OOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result <= maxA) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxA) {\n      return ResultEntry.RESULTSTATUS_OOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOT;else if (result < maxA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOT;else if (result < minA) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_OOT;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxA) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB || result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxB || result < minB) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOT;else if (result > maxA) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result >= minB && result <= maxB) return ResultEntry.RESULTSTATUS_OOT;else if ((result < minB || maxB < result) && minB !== 0 && maxB !== 0) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_PASS;\n  }\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryValidation.jsx"],"names":["ResultEntry","numberConversion","number","rounding","Number","parseFloat","toFixed","numericGrade","parameter","sfinalresult","result","minA","smina","maxA","smaxa","minB","sminb","maxB","smaxb","minLoD","sminlod","maxLoD","smaxlod","minLOQ","sminloq","maxLOQ","smaxloq","disregard","sdisregard","RESULTSTATUS_BELOWDISREGARD","isNaN","RESULTSTATUS_BQL","RESULTSTATUS_BDL","findLOQandLOD","findGrade","RESULTSTATUS_BLOD","RESULTSTATUS_BLOQ","RESULTSTATUS_FIO","RESULTSTATUS_PASS","RESULTSTATUS_OOS","RESULTSTATUS_OOT"],"mappings":"AAAA,SAASA,WAAT,QAA4B,8BAA5B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4C;AAC/C,SAAOC,MAAM,CAACC,UAAP,CAAkBH,MAAlB,EAA0BI,OAA1B,CAAkCH,QAAlC,CAAP;AACH;AAED,OAAO,SAASI,YAAT,CAAsBC,SAAtB,EAAiCC,YAAjC,EAA+C;AAClD,MAAIC,MAAM,GAAGD,YAAb;AACA,MAAIE,IAAI,GAAGN,UAAU,CAACG,SAAS,CAACI,KAAX,CAArB;AACA,MAAIC,IAAI,GAAGR,UAAU,CAACG,SAAS,CAACM,KAAX,CAArB;AACA,MAAIC,IAAI,GAAGV,UAAU,CAACG,SAAS,CAACQ,KAAX,CAArB;AACA,MAAIC,IAAI,GAAGZ,UAAU,CAACG,SAAS,CAACU,KAAX,CAArB;AACA,MAAIC,MAAM,GAAGd,UAAU,CAACG,SAAS,CAACY,OAAX,CAAvB;AACA,MAAIC,MAAM,GAAGhB,UAAU,CAACG,SAAS,CAACc,OAAX,CAAvB;AACA,MAAIC,MAAM,GAAGlB,UAAU,CAACG,SAAS,CAACgB,OAAX,CAAvB;AACA,MAAIC,MAAM,GAAGpB,UAAU,CAACG,SAAS,CAACkB,OAAX,CAAvB;AACA,MAAIC,SAAS,GAAGtB,UAAU,CAACG,SAAS,CAACoB,UAAX,CAA1B;;AACA,MAAID,SAAS,KAAK,MAAd,IAAwBA,SAAS,GAAGlB,YAAxC,EAAsD;AAClD,WAAOT,WAAW,CAAC6B,2BAAnB;AACH,GAFD,MAEO,IAAI,CAACC,KAAK,CAACP,MAAD,CAAN,IAAkB,CAACO,KAAK,CAACL,MAAD,CAA5B,EAAsC;AACzC,QAAIf,MAAM,IAAIa,MAAV,IAAoBb,MAAM,IAAIe,MAAlC,EAA0C;AACtC,aAAOzB,WAAW,CAAC+B,gBAAnB;AACH,KAFD,MAGK,IAAI,CAACD,KAAK,CAACX,MAAD,CAAN,IAAkB,CAACW,KAAK,CAACT,MAAD,CAA5B,EAAsC;AACvC,UAAIX,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIW,MAAlC,EAA0C;AACtC,eAAOrB,WAAW,CAACgC,gBAAnB;AACH,OAFD,MAGK;AACD,eAAOC,aAAa,CAACd,MAAD,EAASE,MAAT,EAAiBE,MAAjB,EAAyBE,MAAzB,EAAiCd,IAAjC,EAAuCE,IAAvC,EAA6CE,IAA7C,EAAmDE,IAAnD,EAAyDR,YAAzD,CAApB;AACH;AACJ,KAPI,MAOE;AACH,aAAOwB,aAAa,CAACd,MAAD,EAASE,MAAT,EAAiBE,MAAjB,EAAyBE,MAAzB,EAAiCd,IAAjC,EAAuCE,IAAvC,EAA6CE,IAA7C,EAAmDE,IAAnD,EAAyDR,YAAzD,CAApB;AACH;AACJ,GAdM,MAcA,IAAI,CAACqB,KAAK,CAACX,MAAD,CAAN,IAAkB,CAACW,KAAK,CAACT,MAAD,CAA5B,EAAsC;AACzC,QAAIX,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIW,MAAlC,EAA0C;AACtC,aAAOrB,WAAW,CAACgC,gBAAnB;AACH,KAFD,MAGK;AACD,aAAOC,aAAa,CAACd,MAAD,EAASE,MAAT,EAAiBE,MAAjB,EAAyBE,MAAzB,EAAiCd,IAAjC,EAAuCE,IAAvC,EAA6CE,IAA7C,EAAmDE,IAAnD,EAAyDR,YAAzD,CAApB;AACH;AACJ,GAPM,MAOA;AACH,WAAOwB,aAAa,CAACd,MAAD,EAASE,MAAT,EAAiBE,MAAjB,EAAyBE,MAAzB,EAAiCd,IAAjC,EAAuCE,IAAvC,EAA6CE,IAA7C,EAAmDE,IAAnD,EAAyDR,YAAzD,CAApB;AACH;AACJ;AAGD,OAAO,SAASwB,aAAT,CAAuBd,MAAvB,EAA+BE,MAA/B,EAAuCE,MAAvC,EAA+CE,MAA/C,EAAuDd,IAAvD,EAA6DE,IAA7D,EAAmEE,IAAnE,EAAyEE,IAAzE,EAA+EP,MAA/E,EAAuF;AAC1F,MAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiBW,KAAK,CAACT,MAAD,CAAtB,IAAkCS,KAAK,CAACP,MAAD,CAAvC,IAAmDO,KAAK,CAACL,MAAD,CAA5D,EAAsE;AAClE,WAAOS,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH,GAFD,MAEO,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkBW,KAAK,CAACT,MAAD,CAAvB,IAAmCS,KAAK,CAACP,MAAD,CAAxC,IAAoDO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,KAAKS,MAAf,EAAuB;AAC1B,aAAOnB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiB,CAACW,KAAK,CAACT,MAAD,CAAvB,IAAmCS,KAAK,CAACP,MAAD,CAAxC,IAAoDO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGW,MAAb,EAAqB;AACjB,aAAOrB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,KAAKW,MAAf,EAAuB;AAC1B,aAAOrB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiBW,KAAK,CAACT,MAAD,CAAtB,IAAkC,CAACS,KAAK,CAACP,MAAD,CAAxC,IAAoDO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGa,MAAb,EAAqB;AACjB,aAAOvB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,KAAKa,MAAf,EAAuB;AAC1B,aAAOvB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiBW,KAAK,CAACT,MAAD,CAAtB,IAAkCS,KAAK,CAACP,MAAD,CAAvC,IAAmD,CAACO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGe,MAAb,EAAqB;AACjB,aAAOzB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,KAAKe,MAAf,EAAuB;AAC1B,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkB,CAACW,KAAK,CAACT,MAAD,CAAxB,IAAoCS,KAAK,CAACP,MAAD,CAAzC,IAAqDO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIW,MAAlC,EAA0C;AAC7C,aAAOrB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkBW,KAAK,CAACT,MAAD,CAAvB,IAAmC,CAACS,KAAK,CAACP,MAAD,CAAzC,IAAqDO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIa,MAAlC,EAA0C;AAC7C,aAAOvB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkBW,KAAK,CAACT,MAAD,CAAvB,IAAmCS,KAAK,CAACP,MAAD,CAAxC,IAAoD,CAACO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIe,MAAlC,EAA0C;AAC7C,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiB,CAACW,KAAK,CAACT,MAAD,CAAvB,IAAmC,CAACS,KAAK,CAACP,MAAD,CAAzC,IAAqDO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGW,MAAb,EAAqB;AACjB,aAAOrB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIW,MAAV,IAAoBX,MAAM,IAAIa,MAAlC,EAA0C;AAC7C,aAAOvB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiB,CAACW,KAAK,CAACT,MAAD,CAAvB,IAAmCS,KAAK,CAACP,MAAD,CAAxC,IAAoD,CAACO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGW,MAAb,EAAqB;AACjB,aAAOrB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIW,MAAV,IAAoBX,MAAM,IAAIe,MAAlC,EAA0C;AAC7C,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiBW,KAAK,CAACT,MAAD,CAAtB,IAAkC,CAACS,KAAK,CAACP,MAAD,CAAxC,IAAoD,CAACO,KAAK,CAACL,MAAD,CAA9D,EAAwE;AAC3E,QAAIf,MAAM,GAAGa,MAAb,EAAqB;AACjB,aAAOvB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIa,MAAV,IAAoBb,MAAM,IAAIe,MAAlC,EAA0C;AAC7C,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkB,CAACW,KAAK,CAACT,MAAD,CAAxB,IAAoC,CAACS,KAAK,CAACP,MAAD,CAA1C,IAAsDO,KAAK,CAACL,MAAD,CAA/D,EAAyE;AAC5E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIa,MAAlC,EAA0C;AAC7C,aAAOvB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAIoB,KAAK,CAACX,MAAD,CAAL,IAAiBW,KAAK,CAACT,MAAD,CAAtB,IAAkC,CAACS,KAAK,CAACP,MAAD,CAAxC,IAAoDO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGW,MAAb,EAAqB;AACjB,aAAOrB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIW,MAAV,IAAoBX,MAAM,IAAIa,MAAlC,EAA0C;AAC7C,aAAOvB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkBW,KAAK,CAACT,MAAD,CAAvB,IAAmC,CAACS,KAAK,CAACP,MAAD,CAAzC,IAAqD,CAACO,KAAK,CAACL,MAAD,CAA/D,EAAyE;AAC5E,QAAIf,MAAM,GAAGS,MAAb,EAAqB;AACjB,aAAOnB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIS,MAAV,IAAoBT,MAAM,IAAIe,MAAlC,EAA0C;AAC7C,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,IAAkBW,KAAK,CAACT,MAAD,CAAvB,IAAmCS,KAAK,CAACP,MAAD,CAAxC,IAAoDO,KAAK,CAACL,MAAD,CAA7D,EAAuE;AAC1E,QAAIf,MAAM,GAAGW,MAAb,EAAqB;AACjB,aAAOrB,WAAW,CAACmC,iBAAnB;AACH,KAFD,MAEO,IAAIzB,MAAM,IAAIW,MAAV,IAAoBX,MAAM,IAAIe,MAAlC,EAA0C;AAC7C,aAAOzB,WAAW,CAACoC,iBAAnB;AACH,KAFM,MAEA;AACH,aAAOF,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ,GARM,MAQA;AACH,WAAOwB,SAAS,CAACnB,IAAD,EAAOJ,IAAP,EAAaE,IAAb,EAAmBI,IAAnB,EAAyBP,MAAzB,CAAhB;AACH;AACJ;AAID,OAAO,SAASwB,SAAT,CAAmBnB,IAAnB,EAAyBJ,IAAzB,EAA+BE,IAA/B,EAAqCI,IAArC,EAA2CP,MAA3C,EAAmD;AACtD,MAAIoB,KAAK,CAACnB,IAAD,CAAL,IAAemB,KAAK,CAACf,IAAD,CAApB,IAA8Be,KAAK,CAACjB,IAAD,CAAnC,IAA6CiB,KAAK,CAACb,IAAD,CAAtD,EAA8D;AAC1D,WAAOjB,WAAW,CAACqC,gBAAnB;AACH,GAFD,MAEO,IAAIP,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+Be,KAAK,CAACjB,IAAD,CAApC,IAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,IAAIO,IAAhC,EACI,OAAOjB,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGK,IAAT,IAAiBE,IAAI,GAAGP,MAA5B,EACD,OAAOV,WAAW,CAACuC,gBAAnB,CADC,KAGD,OAAOvC,WAAW,CAACsC,iBAAnB;AACP,GAPM,MAOA,IAAI,CAACR,KAAK,CAACnB,IAAD,CAAN,IAAgBmB,KAAK,CAACf,IAAD,CAArB,IAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,IAA+CiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAGI,OAAOtC,WAAW,CAACuC,gBAAnB;AACP,GALM,MAKA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAemB,KAAK,CAACf,IAAD,CAApB,IAA8Be,KAAK,CAACjB,IAAD,CAAnC,IAA6C,CAACiB,KAAK,CAACb,IAAD,CAAvD,EAA+D;AAClE,QAAIP,MAAM,IAAIO,IAAd,EAAoB;AAChB,aAAOjB,WAAW,CAACsC,iBAAnB;AACH,KAFD,MAEO,IAAI5B,MAAM,GAAGO,IAAb,EAAmB;AACtB,aAAOjB,WAAW,CAACuC,gBAAnB;AACH;AACJ,GANM,MAMA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAemB,KAAK,CAACf,IAAD,CAApB,IAA8B,CAACe,KAAK,CAACjB,IAAD,CAApC,IAA8CiB,KAAK,CAACb,IAAD,CAAvD,EAA+D;AAClE,QAAIP,MAAM,IAAIG,IAAd,EAAoB;AAChB,aAAOb,WAAW,CAACsC,iBAAnB;AACH,KAFD,MAEO,IAAI5B,MAAM,GAAGG,IAAb,EAAmB;AACtB,aAAOb,WAAW,CAACuC,gBAAnB;AACH;AACJ,GANM,MAMA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAemB,KAAK,CAACf,IAAD,CAApB,IAA8B,CAACe,KAAK,CAACjB,IAAD,CAApC,IAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,GAAGG,IAAT,IAAiBH,MAAM,IAAIO,IAA/B,EACI,OAAOjB,WAAW,CAACuC,gBAAnB,CADJ,KAEK,IAAI7B,MAAM,GAAGO,IAAb,EACD,OAAOjB,WAAW,CAACwC,gBAAnB,CADC,KAEA,IAAI9B,MAAM,GAAGG,IAAb,EACD,OAAOb,WAAW,CAACsC,iBAAnB;AACP,GAPM,MAOA,IAAIR,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+Be,KAAK,CAACjB,IAAD,CAApC,IAA8CiB,KAAK,CAACb,IAAD,CAAvD,EAA+D;AAClE,QAAIP,MAAM,IAAIK,IAAd,EACI,OAAOf,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGK,IAAb,EACD,OAAOf,WAAW,CAACuC,gBAAnB;AACP,GALM,MAKA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+Be,KAAK,CAACjB,IAAD,CAApC,IAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIO,IAAhC,EACI,OAAOjB,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGC,IAAb,EACD,OAAOX,WAAW,CAACuC,gBAAnB,CADC,KAEA,IAAI7B,MAAM,GAAGO,IAAb,EACD,OAAOjB,WAAW,CAACuC,gBAAnB;AACP,GAPM,MAOA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,IAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,EAAiE;AACpE,QAAIP,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGG,IAAT,IAAiBH,MAAM,IAAIO,IAA/B,EACD,OAAOjB,WAAW,CAACuC,gBAAnB,CADC,KAEA,IAAI7B,MAAM,GAAGO,IAAb,EACD,OAAOjB,WAAW,CAACwC,gBAAnB,CADC,KAEA,IAAI9B,MAAM,GAAGC,IAAb,EACD,OAAOX,WAAW,CAACwC,gBAAnB;AACP,GATM,MASA,IAAI,CAACV,KAAK,CAACnB,IAAD,CAAN,IAAgBmB,KAAK,CAACf,IAAD,CAArB,IAA+Be,KAAK,CAACjB,IAAD,CAApC,IAA8CiB,KAAK,CAACb,IAAD,CAAvD,EAA+D;AAClE,QAAIP,MAAM,IAAIC,IAAd,EACI,OAAOX,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGC,IAAb,EACD,OAAOX,WAAW,CAACuC,gBAAnB;AACP,GALM,MAKA,IAAI,CAACT,KAAK,CAACnB,IAAD,CAAN,IAAgBmB,KAAK,CAACf,IAAD,CAArB,IAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,IAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,EAAiE;AACpE,QAAIP,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIO,IAAhC,EACD,OAAOjB,WAAW,CAACuC,gBAAnB,CADC,KAGD,OAAOvC,WAAW,CAACwC,gBAAnB;AACP,GAPM,MAOA,IAAIV,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,IAA+CiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGK,IAAb,EACD,OAAOf,WAAW,CAACuC,gBAAnB,CADC,KAEA,IAAI7B,MAAM,GAAGG,IAAb,EACD,OAAOb,WAAW,CAACuC,gBAAnB;AACP,GAPM,MAOA,IAAIT,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,IAA+CiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,GAAGG,IAAT,IAAiBH,MAAM,IAAIO,IAA/B,EACD,OAAOjB,WAAW,CAACuC,gBAAnB,CADC,KAEA,IAAI7B,MAAM,GAAGO,IAAT,IAAiBP,MAAM,GAAGK,IAA9B,EACD,OAAOf,WAAW,CAACuC,gBAAnB;AACP,GAPM,MAOA,IAAI,CAACT,KAAK,CAACnB,IAAD,CAAN,IAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,IAAgCe,KAAK,CAACjB,IAAD,CAArC,IAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,EAAiE;AACpE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,GAAGC,IAA/B,EACI,OAAOX,WAAW,CAACuC,gBAAnB,CADJ,KAEK,IAAI7B,MAAM,GAAGK,IAAb,EACD,OAAOf,WAAW,CAACuC,gBAAnB,CADC,KAEA,IAAI7B,MAAM,IAAIC,IAAd,EACD,OAAOX,WAAW,CAACsC,iBAAnB;AACP,GAPM,MAOA,IAAIR,KAAK,CAACnB,IAAD,CAAL,IAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,IAA+Be,KAAK,CAACjB,IAAD,CAApC,IAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,EAAgE;AACnE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,GAAGC,IAA/B,EACI,OAAOX,WAAW,CAACuC,gBAAnB,CADJ,KAEK,IAAI7B,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIO,IAAhC,EACD,OAAOjB,WAAW,CAACsC,iBAAnB,CADC,KAEA,IAAI5B,MAAM,GAAGO,IAAT,IAAiBP,MAAM,GAAGK,IAA9B,EACD,OAAOf,WAAW,CAACwC,gBAAnB;AACP,GAPM,MAOA,IAAI,CAACV,KAAK,CAACnB,IAAD,CAAN,IAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,IAAgC,CAACe,KAAK,CAACjB,IAAD,CAAtC,IAAgDiB,KAAK,CAACb,IAAD,CAAzD,EAAiE;AACpE,QAAIP,MAAM,IAAIK,IAAV,IAAkBL,MAAM,GAAGC,IAA/B,EACI,OAAOX,WAAW,CAACuC,gBAAnB,CADJ,KAEK,IAAI7B,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIG,IAAhC,EACD,OAAOb,WAAW,CAACsC,iBAAnB,CADC,KAEA,IAAI5B,MAAM,GAAGK,IAAb,EACD,OAAOf,WAAW,CAACwC,gBAAnB,CADC,KAEA,IAAI9B,MAAM,GAAGG,IAAb,EACD,OAAOb,WAAW,CAACwC,gBAAnB;AACP,GATM,MASA,IAAI,CAACV,KAAK,CAACnB,IAAD,CAAN,IAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,IAAgC,CAACe,KAAK,CAACjB,IAAD,CAAtC,IAAgD,CAACiB,KAAK,CAACb,IAAD,CAA1D,EAAkE;AACrE,QAAIP,MAAM,IAAIC,IAAV,IAAkBD,MAAM,IAAIG,IAAhC,EACI,OAAOb,WAAW,CAACsC,iBAAnB,CADJ,KAEK,IAAI5B,MAAM,IAAIK,IAAV,IAAkBL,MAAM,IAAIO,IAAhC,EACD,OAAOjB,WAAW,CAACwC,gBAAnB,CADC,KAEA,IAAI,CAAC9B,MAAM,GAAGK,IAAT,IAAiBE,IAAI,GAAGP,MAAzB,KAAqCK,IAAI,KAAK,CAAT,IAAcE,IAAI,KAAK,CAAhE,EACD,OAAOjB,WAAW,CAACuC,gBAAnB,CADC,KAGD,OAAOvC,WAAW,CAACsC,iBAAnB;AACP;AACJ","sourcesContent":["import { ResultEntry } from '../../components/Enumeration';\r\n\r\nexport function numberConversion(number, rounding) {\r\n    return Number.parseFloat(number).toFixed(rounding);\r\n}\r\n\r\nexport function numericGrade(parameter, sfinalresult) {\r\n    let result = sfinalresult;\r\n    let minA = parseFloat(parameter.smina);\r\n    let maxA = parseFloat(parameter.smaxa);\r\n    let minB = parseFloat(parameter.sminb);\r\n    let maxB = parseFloat(parameter.smaxb);\r\n    let minLoD = parseFloat(parameter.sminlod);\r\n    let maxLoD = parseFloat(parameter.smaxlod);\r\n    let minLOQ = parseFloat(parameter.sminloq);\r\n    let maxLOQ = parseFloat(parameter.smaxloq);\r\n    let disregard = parseFloat(parameter.sdisregard);\r\n    if (disregard !== \"null\" && disregard > sfinalresult) {\r\n        return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\r\n    } else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL;\r\n        }\r\n        else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n            if (result >= minLoD && result <= maxLoD) {\r\n                return ResultEntry.RESULTSTATUS_BDL;\r\n            }\r\n            else {\r\n                return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            }\r\n        } else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else {\r\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n    }\r\n}\r\n\r\n\r\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function findGrade(minB, minA, maxA, maxB, result) {\r\n    if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        return ResultEntry.RESULTSTATUS_FIO;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB || maxB < result)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result <= maxB) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxB) {\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result <= maxA) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxA) {\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result < maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB || result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxB || result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}