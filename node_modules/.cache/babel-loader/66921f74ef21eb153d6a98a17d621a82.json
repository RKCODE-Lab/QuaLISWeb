{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestPackage.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getPackageService } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddTestPackage from './AddTestPackage';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Method extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false; // delete selectedRecord['esignpassword'] \n          // delete selectedRecord['esigncomments']   \n          // delete selectedRecord['esignreason']  \n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\") {\n        if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\n          console.log(\"val:\", value.target.value);\n          selectedRecord[name] = value.target.value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.ntestpackagecode.value;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      } // inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\n      // inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"]? this.state.selectedRecord[\"nmethodcatcode\"].value:\"\";\n\n\n      inputData[\"testpackage\"][\"stestpackagename\"] = this.state.selectedRecord[\"stestpackagename\"] ? this.state.selectedRecord[\"stestpackagename\"] : \"\"; //inputData[\"testpackage\"][\"spackagerefcode\"] = this.state.selectedRecord[\"spackagerefcode\"]? this.state.selectedRecord[\"spackagerefcode\"]:\"\";\n\n      inputData[\"testpackage\"][\"ntestpackageprice\"] = this.state.selectedRecord[\"ntestpackageprice\"] ? this.state.selectedRecord[\"ntestpackageprice\"] : \"\";\n      inputData[\"testpackage\"][\"ntestpackagetatdays\"] = this.state.selectedRecord[\"ntestpackagetatdays\"] ? this.state.selectedRecord[\"ntestpackagetatdays\"] : \"\";\n      inputData[\"testpackage\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      inputData[\"testpackage\"][\"sopenmrsrefcode\"] = this.state.selectedRecord[\"sopenmrsrefcode\"] ? this.state.selectedRecord[\"sopenmrsrefcode\"] : \"\";\n      inputData[\"testpackage\"][\"spreventtbrefcode\"] = this.state.selectedRecord[\"spreventtbrefcode\"] ? this.state.selectedRecord[\"spreventtbrefcode\"] : \"\";\n      inputData[\"testpackage\"][\"sportalrefcode\"] = this.state.selectedRecord[\"sportalrefcode\"] ? this.state.selectedRecord[\"sportalrefcode\"] : \"\";\n\n      if (inputData[\"testpackage\"]) {\n        delete inputData[\"testpackage\"]['esignpassword'];\n        delete inputData[\"testpackage\"]['esigncomments'];\n        delete inputData[\"testpackage\"]['esignreason'];\n        delete inputData[\"testpackage\"]['agree'];\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_PACKAGENAME\",\n      \"dataField\": \"stestpackagename\",\n      \"width\": \"200px\"\n    }, //{\"idsName\":\"IDS_PACKAGEREFRANCECODE\",\"dataField\":\"smethodname\",\"width\":\"200px\"},\n    {\n      \"idsName\": \"IDS_PACKAGEPRICE\",\n      \"dataField\": \"ntestpackageprice\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PACKAGETATPRICE\",\n      \"dataField\": \"ntestpackagetatdays\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_OPENMRSREFERENCECODE\",\n      \"dataField\": \"sopenmrsrefcode\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_PREVENTTBREFERENCECODE\",\n      \"dataField\": \"spreventtbrefcode\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_PORTALREFERENCECODE\",\n      \"dataField\": \"sportalrefcode\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode; // const addId = this.state.controlMap.has(\"AddTestPackage\") && this.state.controlMap.get(\"AddTestPackage\").ncontrolcode;\n\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode; // const editId = this.state.controlMap.has(\"EditTestPackage\") && this.state.controlMap.get(\"EditTestPackage\").ncontrolcode;\n\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TESTPACKAGE\"\n      }),\n      primaryeyField: \"ntestpackagecode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField: \"ntestpackagecode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ntestpackagecode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getPackageService,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getPackageService(addParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PACKAGENAME\",\n        \"dataField\": \"stestpackagename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      } //{\"idsName\":\"IDS_PACKAGETATPRICE\",\"dataField\":\"ntestpackagetatdays\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\n      ],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddTestPackage, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        methodCategoryList: this.props.Login.methodCategoryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \n        //     dataResult: process(this.props.Login.masterData, this.state.dataState),});\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          },\n          dataResult: process(this.props.Login.masterData || [], {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          })\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData || [], {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getPackageService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Method));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/testmanagement/TestPackage.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","updateStore","validateEsignCredential","getPackageService","DataGrid","Esign","DEFAULT_RETURN","SlideOutModal","AddTestPackage","showEsign","getControlMap","transactionStatus","mapStateToProps","state","Login","Method","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","operation","updateInfo","typeName","onInputOnChange","target","type","name","checked","YES","NO","value","onNumericInputChange","console","log","test","onComboChange","comboData","fieldName","deleteRecord","deleteParam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","JSON","parse","stringify","ntestpackagecode","nmastersitecode","esignNeeded","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","editId","addParam","primaryeyField","primaryKeyValue","editParam","primaryKeyField","methodCategoryList","componentDidUpdate","previousProps","Object","values","map","item","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ListWrapper} from '../../components/client-group.styles';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster,updateStore, validateEsignCredential,getPackageService } from '../../actions';\r\n\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddTestPackage from './AddTestPackage';\r\n\r\nimport {showEsign, getControlMap} from '../../components/CommonScript';\r\nimport {transactionStatus} from '../../components/Enumeration';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Method extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);        \r\n        this.formRef = React.createRef();\r\n     \r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {        \r\n            data:[], masterStatus:\"\", error:\"\", selectedRecord:{},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights:[],\r\n            controlMap :new Map()\r\n        };\r\n\r\n        this.extractedColumnList =[{\"idsName\":\"IDS_PACKAGENAME\",\"dataField\":\"stestpackagename\",\"width\":\"200px\"},\r\n                                    //{\"idsName\":\"IDS_PACKAGEREFRANCECODE\",\"dataField\":\"smethodname\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_PACKAGEPRICE\",\"dataField\":\"ntestpackageprice\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_PACKAGETATPRICE\",\"dataField\":\"ntestpackagetatdays\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_OPENMRSREFERENCECODE\",\"dataField\":\"sopenmrsrefcode\",\"width\":\"250px\"},\r\n                                    {\"idsName\":\"IDS_PREVENTTBREFERENCECODE\",\"dataField\":\"spreventtbrefcode\",\"width\":\"250px\"},\r\n                                    {\"idsName\":\"IDS_PORTALREFERENCECODE\",\"dataField\":\"sportalrefcode\",\"width\":\"250px\"},\r\n                                    {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\",\"width\":\"200px\"}                                    \r\n                                    ];\r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord = {};\r\n            }\r\n            else{\r\n                loadEsign = false;   \r\n                // delete selectedRecord['esignpassword'] \r\n                // delete selectedRecord['esigncomments']   \r\n                // delete selectedRecord['esignreason']  \r\n                 \r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason']=\"\";\r\n          \r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord, selectedId}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        \r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== \"\"  && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        \r\n        return null;\r\n     }    \r\n\r\n\r\n    render(){\r\n         const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        \r\n       // const addId = this.state.controlMap.has(\"AddTestPackage\") && this.state.controlMap.get(\"AddTestPackage\").ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n       // const editId = this.state.controlMap.has(\"EditTestPackage\") && this.state.controlMap.get(\"EditTestPackage\").ncontrolcode;\r\n            \r\n         const addParam = {screenName: this.props.intl.formatMessage({ id: \"IDS_TESTPACKAGE\"}), primaryeyField: \"ntestpackagecode\", primaryKeyValue:undefined,  \r\n                            operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \r\n                           primaryKeyField:\"ntestpackagecode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n    return (\r\n        <>\r\n        <Row>\r\n            <Col>\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                        <HeaderName className=\"header-primary-md\">\r\n                           {this.props.Login.inputParam ? \r\n                            <FormattedMessage id={this.props.Login.inputParam.methodUrl} /> :\"\"}\r\n                        </HeaderName>\r\n                        <Button name=\"addMethod\" className=\"btn btn-user btn-primary-blue\"  \r\n                                hidden ={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={()=>this.props.getMethodComboService(addParam) } \r\n                                role=\"button\">\r\n                            <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                            <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                        </Button>\r\n                    </PrimaryHeader> */}\r\n                   \r\n                    {this.state.data ? \r\n                        <DataGrid\r\n                            primaryKeyField = {\"ntestpackagecode\"}\r\n                            data = {this.state.data}\r\n                            dataResult = {this.state.dataResult}\r\n                            dataState = {this.state.dataState}\r\n                            dataStateChange = {this.dataStateChange}\r\n                            extractedColumnList = {this.extractedColumnList}\r\n                            fetchRecord = {this.props.getPackageService}\r\n                            editParam={editParam}\r\n                            deleteRecord = {this.deleteRecord}\r\n                            deleteParam={deleteParam}\r\n                            reloadData = {this.reloadData}\r\n                            controlMap = {this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo = {this.props.Login.userInfo}\r\n                            pageable={true}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight = {'600px'}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={true} \r\n                            selectedId={this.props.Login.selectedId} \r\n                            addRecord={()=>this.props.getPackageService(addParam)}                      \r\n                        />\r\n                    :\"\"}    \r\n                </ListWrapper>\r\n            </Col>\r\n        </Row>\r\n        {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n        {this.props.Login.openModal ? \r\n            <SlideOutModal  show={this.props.Login.openModal} \r\n                                closeModal={this.closeModal}  \r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}  \r\n                                screenName={this.props.Login.screenName}   \r\n                                onSaveClick={this.onSaveClick}    \r\n                                esign={this.props.Login.loadEsign}\r\n                                validateEsign={this.validateEsign}\r\n                                masterStatus={this.props.Login.masterStatus}\r\n                                updateStore={this.props.updateStore}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                mandatoryFields={[{\"idsName\":\"IDS_PACKAGENAME\",\"dataField\":\"stestpackagename\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                                  //{\"idsName\":\"IDS_PACKAGETATPRICE\",\"dataField\":\"ntestpackagetatdays\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n                                            ]}\r\n                                addComponent ={this.props.Login.loadEsign ? \r\n                                        <Esign  operation={this.props.Login.operation}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                inputParam={this.props.Login.inputParam}                                               \r\n                                                selectedRecord={this.state.selectedRecord ||{}}\r\n                                                />\r\n                                      : <AddTestPackage  \r\n                                            selectedRecord={this.state.selectedRecord ||{}}                                  \r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange} \r\n                                            methodCategoryList={this.props.Login.methodCategoryList ||[]}\r\n                                            operation={this.props.Login.operation}\r\n                                            inputParam={this.props.Login.inputParam}  \r\n                                            />}  \r\n                />\r\n            :\"\"}\r\n        </>\r\n      );\r\n    }\r\n\r\n    componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                // this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                //     dataResult: process(this.props.Login.masterData, this.state.dataState),});\r\n\r\n                    this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, dataState :{skip : 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5},\r\n                        dataResult: process(this.props.Login.masterData || [], {skip : 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5})});\r\n            }\r\n            else {        \r\n                let {dataState} = this.state;\r\n                if(this.props.Login.dataState === undefined){\r\n                    dataState = {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }         \r\n                this.setState({data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData || [] ,{skip : 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}), dataState\r\n                });\r\n            } \r\n         }\r\n         else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            this.setState({selectedRecord:this.props.Login.selectedRecord});\r\n         }       \r\n    }    \r\n\r\n    onInputOnChange=(event) => {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        \r\n        this.setState({selectedRecord});\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n            \r\n            if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n                console.log(\"val:\", value.target.value);\r\n                selectedRecord[name] = value.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {      \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;   \r\n     \r\n        this.setState({selectedRecord});        \r\n    }\r\n\r\n    deleteRecord =(deleteParam) =>{\r\n        const inputParam = {\r\n                                classUrl: this.props.Login.inputParam.classUrl,\r\n                                methodUrl: this.props.Login.inputParam.methodUrl,                        \r\n                                displayName:this.props.Login.inputParam.displayName,\r\n                                inputData: {[this.props.Login.inputParam.methodUrl.toLowerCase()] :deleteParam.selectedRecord,\r\n                                            \"userinfo\": this.props.Login.userInfo},\r\n                                operation:deleteParam.operation,\r\n                                dataState:this.state.dataState,\r\n                                selectedRecord: {...this.state.selectedRecord}    \r\n                            }       \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                    operation:deleteParam.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n                        inputData : {\"userinfo\":this.props.Login.userInfo},                        \r\n                        classUrl: this.props.Login.inputParam.classUrl,\r\n                        methodUrl: this.props.Login.inputParam.methodUrl,\r\n                        displayName:this.props.Login.inputParam.displayName,\r\n                        userInfo: this.props.Login.userInfo\r\n                    };     \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n            //add / edit            \r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            let selectedId = null;\r\n            if ( this.props.Login.operation === \"update\"){\r\n                // edit\r\n                dataState = this.state.dataState;\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n                selectedId = this.props.Login.selectedRecord.ntestpackagecode.value;              \r\n            }\r\n            else{\r\n                //add               \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\":this.props.Login.userInfo.nmastersitecode};      \r\n               \r\n            }   \r\n\r\n            // inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\r\n            // inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"]? this.state.selectedRecord[\"nmethodcatcode\"].value:\"\";\r\n            inputData[\"testpackage\"][\"stestpackagename\"] = this.state.selectedRecord[\"stestpackagename\"]? this.state.selectedRecord[\"stestpackagename\"]:\"\";\r\n            //inputData[\"testpackage\"][\"spackagerefcode\"] = this.state.selectedRecord[\"spackagerefcode\"]? this.state.selectedRecord[\"spackagerefcode\"]:\"\";\r\n            inputData[\"testpackage\"][\"ntestpackageprice\"] = this.state.selectedRecord[\"ntestpackageprice\"]? this.state.selectedRecord[\"ntestpackageprice\"]:\"\";\r\n            inputData[\"testpackage\"][\"ntestpackagetatdays\"] = this.state.selectedRecord[\"ntestpackagetatdays\"]? this.state.selectedRecord[\"ntestpackagetatdays\"]:\"\";\r\n            inputData[\"testpackage\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"]? this.state.selectedRecord[\"sdescription\"]:\"\";\r\n            inputData[\"testpackage\"][\"sopenmrsrefcode\"] = this.state.selectedRecord[\"sopenmrsrefcode\"]? this.state.selectedRecord[\"sopenmrsrefcode\"]:\"\";\r\n            inputData[\"testpackage\"][\"spreventtbrefcode\"] = this.state.selectedRecord[\"spreventtbrefcode\"]? this.state.selectedRecord[\"spreventtbrefcode\"]:\"\";\r\n            inputData[\"testpackage\"][\"sportalrefcode\"] = this.state.selectedRecord[\"sportalrefcode\"]? this.state.selectedRecord[\"sportalrefcode\"]:\"\";\r\n\r\n            if(inputData[\"testpackage\"]){\r\n                 delete inputData[\"testpackage\"]['esignpassword'] \r\n                 delete inputData[\"testpackage\"]['esigncomments']   \r\n                 delete inputData[\"testpackage\"]['esignreason']  \r\n                 delete inputData[\"testpackage\"]['agree']  \r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName:this.props.Login.inputParam.displayName,  \r\n                inputData: inputData, selectedId, dataState,\r\n                operation: this.props.Login.operation, saveType, formRef,\r\n                selectedRecord: {...this.state.selectedRecord}       \r\n            }\r\n           \r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n            if (esignNeeded){\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                        openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                        operation:this.props.Login.operation\r\n                        }\r\n                    }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else{\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n           \r\n    } \r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                                                        nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                                                        spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                                                    },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }    \r\n   \r\n }\r\n export default connect(mapStateToProps, {callService, crudMaster,getPackageService, updateStore, validateEsignCredential})(injectIntl(Method));"]},"metadata":{},"sourceType":"module"}