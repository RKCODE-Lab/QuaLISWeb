{"ast":null,"code":"'use strict';\n\nfunction buildLogicalOperator(operator, values) {\n  if (!values.length) return '';\n  var result = values.join(' ' + operator + ' ');\n  if (values.length > 1) result = '(' + result + ')';\n  return result;\n}\n\nmodule.exports = function (dialect) {\n  dialect.operators.logical.add('$and', {\n    fn: function fn(values) {\n      return buildLogicalOperator('and', values);\n    }\n  });\n  dialect.operators.logical.add('$or', {\n    fn: function fn(values) {\n      return buildLogicalOperator('or', values);\n    }\n  });\n  dialect.operators.logical.add('$not', {\n    fn: function fn(values) {\n      return 'not ' + buildLogicalOperator('and', values);\n    }\n  });\n  dialect.operators.logical.add('$nor', {\n    fn: function fn(values) {\n      return 'not ' + buildLogicalOperator('or', values);\n    }\n  });\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/dialects/base/operators/logical.js"],"names":["buildLogicalOperator","operator","values","length","result","join","module","exports","dialect","operators","logical","add","fn"],"mappings":"AAAA;;AAEA,SAASA,oBAAT,CAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AAC/C,MAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB,OAAO,EAAP;AAEpB,MAAIC,MAAM,GAAGF,MAAM,CAACG,IAAP,CAAY,MAAMJ,QAAN,GAAiB,GAA7B,CAAb;AACA,MAAIC,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuBC,MAAM,GAAG,MAAMA,MAAN,GAAe,GAAxB;AAEvB,SAAOA,MAAP;AACA;;AAEDE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AAClCA,EAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,MAA9B,EAAsC;AACrCC,IAAAA,EAAE,EAAE,YAASV,MAAT,EAAiB;AACpB,aAAOF,oBAAoB,CAAC,KAAD,EAAQE,MAAR,CAA3B;AACA;AAHoC,GAAtC;AAMAM,EAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,KAA9B,EAAqC;AACpCC,IAAAA,EAAE,EAAE,YAASV,MAAT,EAAiB;AACpB,aAAOF,oBAAoB,CAAC,IAAD,EAAOE,MAAP,CAA3B;AACA;AAHmC,GAArC;AAMAM,EAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,MAA9B,EAAsC;AACrCC,IAAAA,EAAE,EAAE,YAASV,MAAT,EAAiB;AACpB,aAAO,SAASF,oBAAoB,CAAC,KAAD,EAAQE,MAAR,CAApC;AACA;AAHoC,GAAtC;AAMAM,EAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,MAA9B,EAAsC;AACrCC,IAAAA,EAAE,EAAE,YAASV,MAAT,EAAiB;AACpB,aAAO,SAASF,oBAAoB,CAAC,IAAD,EAAOE,MAAP,CAApC;AACA;AAHoC,GAAtC;AAKA,CAxBD","sourcesContent":["'use strict';\n\nfunction buildLogicalOperator(operator, values) {\n\tif (!values.length) return '';\n\n\tvar result = values.join(' ' + operator + ' ');\n\tif (values.length > 1) result = '(' + result + ')';\n\n\treturn result;\n}\n\nmodule.exports = function(dialect) {\n\tdialect.operators.logical.add('$and', {\n\t\tfn: function(values) {\n\t\t\treturn buildLogicalOperator('and', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$or', {\n\t\tfn: function(values) {\n\t\t\treturn buildLogicalOperator('or', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$not', {\n\t\tfn: function(values) {\n\t\t\treturn 'not ' + buildLogicalOperator('and', values);\n\t\t}\n\t});\n\n\tdialect.operators.logical.add('$nor', {\n\t\tfn: function(values) {\n\t\t\treturn 'not ' + buildLogicalOperator('or', values);\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}