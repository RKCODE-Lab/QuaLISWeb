{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat, constructjsonOptionList, constructjsonOptionDefault, childComboLoadForEdit } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getGoodsInFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"goodsin/getGoodsInData\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getGoodsInComboService(inputParam) {\n  return function (dispatch) {\n    // if(inputParam.operation === \"update\" && inputParam.masterData.selectedGoodsIn.ntransactionstatus=== transactionStatus.APPROVED){\n    //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORDTOEDIT\" }));\n    // }else {\n    let urlArray = [];\n    let selectedId = null;\n    let Client = null;\n    let Project = null;\n    const addGoodsInService = rsapi.post(\"goodsin/getGoodsInAdd\", {\n      userinfo: inputParam.userInfo\n    });\n\n    if (inputParam.operation === \"create\") {\n      urlArray = [addGoodsInService];\n    } else if (inputParam.operation === \"update\") {\n      const clientService = rsapi.post(\"goodsin/getClient\", {\n        \"nclientcatcode\": inputParam.masterData.selectedGoodsIn.nclientcatcode,\n        \"userinfo\": inputParam.userInfo\n      });\n      const projectService = rsapi.post(\"goodsin/getProjectMaster\", {\n        \"nprojecttypecode\": inputParam.masterData.selectedGoodsIn.nprojecttypecode,\n        \"userinfo\": inputParam.userInfo\n      });\n      const GoodsInById = rsapi.post(\"goodsin/getGoodsInEdit\", {\n        [inputParam.primaryKeyField]: inputParam.masterData.selectedGoodsIn[inputParam.primaryKeyField],\n        \"userinfo\": inputParam.userInfo\n      });\n      urlArray = [addGoodsInService, clientService, projectService, GoodsInById];\n      selectedId = inputParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let data = response[0].data;\n      const clientCatList = constructOptionList(data[\"ClientCategory\"] || [], \"nclientcatcode\", \"sclientcatname\", undefined, undefined, false);\n      const ClientCategory = clientCatList.get(\"OptionList\");\n      const projectTypeList = constructOptionList(data[\"ProjectType\"] || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectType = projectTypeList.get(\"OptionList\");\n      const courierList = constructOptionList(data[\"Courier\"] || [], \"ncouriercode\", \"scouriername\", undefined, undefined, false);\n      const Courier = courierList.get(\"OptionList\");\n      const timezoneList = constructOptionList(data[\"TimeZone\"] || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZone = timezoneList.get(\"OptionList\");\n\n      if (inputParam.operation === \"update\") {\n        const clientList = constructOptionList(response[1].data[\"Client\"] || [], \"nclientcode\", \"sclientname\", undefined, undefined, false);\n        Client = clientList.get(\"OptionList\");\n        const projectList = constructOptionList(response[2].data[\"ProjectMaster\"] || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, false);\n        Project = projectList.get(\"OptionList\");\n        const editData = response[3].data.selectedGoodsIn;\n        selectedRecord[\"nnoofpackages\"] = editData.nnoofpackages;\n        selectedRecord[\"sconsignmentno\"] = editData.sconsignmentno;\n        selectedRecord[\"noutofhours\"] = editData.noutofhours;\n        selectedRecord[\"ssecurityrefno\"] = editData.ssecurityrefno;\n        selectedRecord[\"scomments\"] = editData.scomments;\n        selectedRecord[\"dgoodsindatetime\"] = rearrangeDateFormat(inputParam.userInfo, editData.sgoodsindatetime);\n        selectedRecord[\"nclientcatcode\"] = {\n          \"value\": editData[\"nclientcatcode\"],\n          \"label\": editData[\"sclientcatname\"]\n        };\n        selectedRecord[\"nclientcode\"] = {\n          \"value\": editData[\"nclientcode\"],\n          \"label\": editData[\"sclientname\"]\n        };\n        selectedRecord[\"nprojecttypecode\"] = {\n          \"value\": editData[\"nprojecttypecode\"],\n          \"label\": editData[\"sprojecttypename\"]\n        };\n        selectedRecord[\"nprojectmastercode\"] = {\n          \"value\": editData[\"nprojectmastercode\"],\n          \"label\": editData[\"sprojectname\"]\n        };\n        selectedRecord[\"ncouriercode\"] = {\n          \"value\": editData[\"ncouriercode\"],\n          \"label\": editData[\"scouriername\"]\n        };\n        selectedRecord = { ...selectedRecord\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ClientCategory,\n          Client,\n          ProjectType,\n          Project,\n          Courier,\n          TimeZone,\n          selectedRecord,\n          openModal: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }; //}\n}\nexport function getClient(nclientcatcode, masterData, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"goodsin/getClient\", {\n      \"nclientcatcode\": nclientcatcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Client = [];\n      const ClientMap = constructOptionList(response.data.Client || [], \"nclientcode\", \"sclientname\", undefined, undefined, false);\n      Client = ClientMap.get(\"OptionList\");\n      selectedRecord[\"nclientcode\"] = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Client,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProject(nprojecttypecode, masterData, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"goodsin/getProjectMaster\", {\n      \"nprojecttypecode\": nprojecttypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Project = [];\n      const ProjectMap = constructOptionList(response.data.ProjectMaster || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, false);\n      Project = ProjectMap.get(\"OptionList\");\n      selectedRecord[\"nprojectmastercode\"] = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Project,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getGoodsInDetail = (goodsInItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/goodsin/getActiveGoodsInById\", {\n      ngoodsincode: goodsInItem.ngoodsincode,\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      };\n      masterData = masterData1;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          dataState: undefined,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function viewInformation(ngoodsincode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/goodsin/getActiveGoodsInById\", {\n      ngoodsincode: ngoodsincode,\n      userinfo: userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            selectedRecordView: response.data.selectedGoodsIn\n          },\n          loading: false,\n          operation: \"View\",\n          openModal: true,\n          screenName: \"IDS_GOODSIN\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getEditGoodsInSampleService(goodsinSampleEditParam, columnList,selectedRecord1, childColumnList, comboComponents,\n//     withoutCombocomponent) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         const { userInfo, operation } = { ...goodsinSampleEditParam };\n//         let masterData = goodsinSampleEditParam[\"masterData\"];\n//         if (masterData[\"selectedSample\"].length > 1 ||\n//             masterData[\"selectedSample\"]\n//                 .findIndex(x => x[goodsinSampleEditParam.primaryKeyName] === goodsinSampleEditParam[\"editrow\"][goodsinSampleEditParam.primaryKeyName])\n//             === -1) {\n//             inputParam.editRegParam[\"getSampleChildDetail\"] = true;\n//         }\n//         masterData[\"selectedSample\"] = [];\n//         masterData[\"selectedSample\"].push(goodsinSampleEditParam[\"editrow\"]);\n//         const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n//         let urlArray = [];\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//         // const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\n//         //     ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\n//         //     childcolumnlist: childColumnList,\n//         //     userinfo: userInfo\n//         // })\n//         const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n//             datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n//             userinfo: userInfo\n//         })\n//         urlArray = [timeZoneService,  dateService]\n//         Axios.all(urlArray)\n//             .then(response => {\n//                 let selectedRecord = { ...response[1].data[\"EditData\"] };\n//                 selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\n//                 const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                 const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }              \n//                     const languagetypeCode = undefined\n//                     const comboData = response[1].data;\n//                     delete comboData['EditData']\n//                     let comboValues = {}\n//                     if (columnList.length > 0) {\n//                         columnList.map(x => {\n//                             if (x.inputtype === 'combo') {\n//                                 if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n//                                 {\n//                                     if (comboData[x.label].length > 0) {\n//                                         if (comboData[x.label][0].label === undefined) {\n//                                             const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\n//                                             comboData[x.label] = optionList.get(\"OptionList\");\n//                                         } else {\n//                                             comboData[x.label] = comboData[x.label]\n//                                             const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\n//                                         }\n//                                     } else {\n//                                         comboData[x.label] = []\n//                                     }\n//                                     //comboValues = childComboLoad(x, comboData, selectedRecord, \n//                                     //   childColumnList, withoutCombocomponent)\\\n//                                     comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\n//                                         childColumnList, withoutCombocomponent)\n//                                 } else {\n//                                     comboValues = {\n//                                         \"comboData\": comboData,\n//                                     }\n//                                 }\n//                             } else {\n//                                 comboValues = {\n//                                     comboData: comboData,\n//                                     ...comboValues\n//                                 }\n//                             }\n//                         })\n//                     }\n//                     else {\n//                         comboValues = {\n//                             \"comboData\": comboData,\n//                         }\n//                     }\n//                     withoutCombocomponent.map(date => {\n//                         if (date.inputtype === 'date') {\n//                             selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n//                                 rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\n//                             if (date.nperiodcode) {\n//                                 selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\n//                                     new Date(response[2].data[date.label][\"datevalue\"]) : null;\n//                             } else {\n//                                 selectedRecord[date.label + \"value\"] = new Date();\n//                             }\n//                             if (date.hidebeforedate) {\n//                                 selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\n//                             }\n//                             if (date.hideafterdate) {\n//                                 selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\n//                             }\n//                         }\n//                     })\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             operation: goodsinSampleEditParam.operation,\n//                             screenName: goodsinSampleEditParam.screenName,\n//                             timeZoneList,\n//                             defaultTimeZone,\n//                             selectedRecord,\n//                             ncontrolCode: goodsinSampleEditParam.ncontrolCode,\n//                             loadPreregister: true,\n//                             parentPopUpSize: \"xl\",\n//                             loading: false,\n//                             showSample: undefined,\n//                             comboData: comboValues.comboData,\n//                             childColumnList, comboComponents,\n//                             withoutCombocomponent,\n//                             columnList,\n//                             masterData\n//                         }\n//                     })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.info(intl.formatMessage({\n//                         id: error.response.data\n//                     }));\n//                 }\n//             })\n//     }\n// }\n// export function getGoodsInComboService(goodsInParam) {\n//     return function (dispatch) {\n//         const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", { userinfo: goodsInParam.userInfo });\n//         const courierService = rsapi.post(\"courier/getAllActiveCourier\", { userinfo: goodsInParam.userInfo });\n//         const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", { userinfo: goodsInParam.userInfo });\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//         const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: goodsInParam.userInfo });\n//         let urlArray = [];\n//         let selectedId = null;\n//         if (goodsInParam.operation === \"create\") {\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\n//         }\n//         else {\n//             const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\n//             const goodsInById = rsapi.post(url, { [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue, \"userinfo\": goodsInParam.userInfo });\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\n//             selectedId = goodsInParam.primaryKeyValue;\n//         }\n//         dispatch(initRequest(true));\n//         Axios.all(urlArray)\n//             .then(response => {\n//                 const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\",\n//                     \"smanufname\", undefined, undefined, true);\n//                 const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\",\n//                     \"scouriername\", undefined, undefined, false);\n//                 const recipientMap = constructOptionList(response[2].data || [], \"nusercode\",\n//                     \"susername\", undefined, undefined, true);\n//                 const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\n//                     \"stimezoneid\", undefined, undefined, true);\n//                 const manufacturerList = manufacturerMap.get(\"OptionList\");\n//                 const courierList = courierMap.get(\"OptionList\");\n//                 const recipientList = recipientMap.get(\"OptionList\");\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                 //const currentTime = new Date(response[4].data);\n//                 const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n//                 let validRecord = true;\n//                 let selectedRecord = {\n//                     //\"dgoodsindate\": new Date(response[4].data),\n//                     \"ntzgoodsindate\": {\n//                         \"value\": goodsInParam.userInfo.ntimezonecode,\n//                         \"label\": goodsInParam.userInfo.stimezoneid\n//                     },\n//                     \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\n//                 };\n//                 if (goodsInParam.operation === \"update\") {\n//                     if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\n//                         validRecord = false;\n//                     }\n//                     else {\n//                         let manufacturer = [];\n//                         let courier = [];\n//                         let user = [];\n//                         let timeZone = [];\n//                         selectedRecord = response[5].data;\n//                         manufacturer.push({ \"value\": response[5].data[\"nmanufcode\"], \"label\": response[5].data[\"smanufname\"] });\n//                         if (response[5].data[\"ncouriercode\"] !== -1) {\n//                             courier.push({ \"value\": response[5].data[\"ncouriercode\"], \"label\": response[5].data[\"scouriername\"] });\n//                             selectedRecord[\"ncouriercode\"] = courier[0];\n//                         }\n//                         else {\n//                             selectedRecord[\"ncouriercode\"] = undefined;\n//                         }\n//                         user.push({ \"value\": response[5].data[\"nrecipientcode\"], \"label\": response[5].data[\"suserfullname\"] });\n//                         timeZone.push({ \"value\": response[5].data[\"ntzgoodsindate\"], \"label\": response[5].data[\"stzgoodsindate\"] });\n//                         selectedRecord[\"nmanufcode\"] = manufacturer[0];\n//                         selectedRecord[\"nrecipientcode\"] = user[0];\n//                         //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\n//                         selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\n//                         selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\n//                         selectedRecord[\"stzgoodsindate\"] = timeZone[0].label;\n//                        //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\n//                        selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\n//                     }\n//                 }\n//                 else {\n//                     //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\n//                     selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n//                     selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\n//                     selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\n//                     selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\");\n//                     // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\n//                     //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\n//                 }\n//                 if (validRecord) {\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             currentTime,\n//                             manufacturerList,//:response[0].data || [], \n//                             courierList,//:response[1].data  || [], \n//                             recipientList,//:response[2].data  || [],   \n//                             timeZoneList,//:response[3].data  || [],                                                                                     \n//                             operation: goodsInParam.operation, screenName: goodsInParam.screenName,\n//                             selectedRecord,\n//                             openModal: true,\n//                             ncontrolCode: goodsInParam.ncontrolCode,\n//                             loading: false, selectedId\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINALREADYRECEIVED\" }));\n//                 }\n//             })\n//             .catch(error => {              \n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n// export function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"goodsin/getGoodsIn\", { nrmsno: goodsIn.nrmsno, fromDate, toDate, userinfo: userInfo })\n//             .then(response => {\n//                 masterData = { ...masterData, ...response.data };\n//                 sortData(masterData);\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(intl.formatMessage({ id: error.message }));\n//                 }\n//                 else {\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\n//                 }\n//             })\n//     }\n// }\n// export function getChainCustodyComboDataService(chainCustodyParam) {\n//     return function (dispatch) {\n//         // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\n//         //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\n//         // }\n//         // else {\n//         let selectedId = null;\n//         let selectedRecord = {\n//             \"dreceiveddate\": new Date(),\n//             \"ntzreceiveddate\": {\n//                 \"value\": chainCustodyParam.userInfo.ntimezonecode,\n//                 \"label\": chainCustodyParam.userInfo.stimezoneid\n//             },\n//             \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\n//         };\n//         if (chainCustodyParam.operation === \"update\") {\n//             if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\n//                 selectedId = chainCustodyParam.primaryKeyValue;\n//                 const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//                 const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo });\n//                 const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\n//                 const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\n//                 dispatch(initRequest(true));\n//                 Axios.all(urlArray)\n//                     // dispatch(initRequest(true));\n//                     // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\n//                     .then(response => {\n//                         selectedRecord = response[1].data;\n//                         let timeZone = [];\n//                         timeZone.push({ \"value\": response[1].data[\"ntzreceiveddate\"], \"label\": response[1].data[\"stzreceiveddate\"] });\n//                         const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\n//                             \"stimezoneid\", undefined, undefined, true);\n//                         const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                         selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\n//                         selectedRecord[\"stzreceiveddate\"] = timeZone[0].label;\n//                         //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\n//                         selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\n//                         dispatch({\n//                             type: DEFAULT_RETURN, payload: {\n//                                 timeZoneList,//:response[0].data  || [],                                                                                 \n//                                 operation: chainCustodyParam.operation,\n//                                 screenName: chainCustodyParam.screenName,\n//                                 selectedRecord,\n//                                 openChildModal: true,\n//                                 ncontrolCode: chainCustodyParam.ncontrolCode,\n//                                 loading: false, selectedId,\n//                                 //currentTime:new Date(response[2].data)\n//                                 currentTime:rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\n//                             }\n//                         });\n//                     })\n//                     .catch(error => {\n//                         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                         if (error.response.status === 500) {\n//                             toast.error(intl.formatMessage({ id: error.message }));\n//                         }\n//                         else {\n//                             toast.warn(intl.formatMessage({ id: error.response.data }));\n//                         }\n//                     })\n//             }\n//             else {\n//                 toast.warn(intl.formatMessage({ id: \"IDS_INVALIDOWNERTOEDIT\" }));\n//             }\n//         }\n//         else {\n//             dispatch(initRequest(true));\n//             const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n//             const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\n//             const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\n//                 nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\n//                 userinfo: chainCustodyParam.userInfo\n//             });\n//             let urlArray = [timeZoneService, UTCtimeZoneService,validateGoodsIn];\n//             return Axios.all(urlArray)\n//                 .then(response => {\n//                     const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\n//                         \"stimezoneid\", undefined, undefined, true);\n//                     const timeZoneList = timeZoneMap.get(\"OptionList\");\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             timeZoneList,//:response.data  || [],\n//                             operation: chainCustodyParam.operation,\n//                             selectedRecord: { ...selectedRecord, \n//                                 //dreceiveddate: new Date(response[1].data) \n//                                 dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n//                             },\n//                             openChildModal: true,\n//                             screenName: chainCustodyParam.screenName,\n//                             ncontrolCode: chainCustodyParam.ncontrolCode,\n//                             loading: false, selectedId,\n//                             //currentTime:new Date(response[1].data)\n//                             currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(intl.formatMessage({ id: error.message }));\n//                     }\n//                     else {\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\n//                     }\n//                 })\n//         }\n//     }\n//     // }\n// }\n// export function getGoodsInPrinterComboService(inputParam) {\n//     return (dispatch) => {\n//         dispatch(initRequest(true))\n//         rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\n//             .then(response => {\n//                 let selectedRecord = {\n//                     sprintername: {\n//                         value: response.data[0].sprintername,\n//                         label: response.data[0].sprintername,\n//                         item: response.data[0]\n//                     }\n//                 };\n//                 const printerList = constructOptionList(response.data || [], \"sprintername\",\n//                     \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         printerList,\n//                         selectedRecord,\n//                         operation: \"printer\",\n//                         screenName: \"PrintBarcode\",\n//                         dataToPrint: inputParam.selectedGoodsIn.nrmsno,\n//                         ncontrolcode: inputParam.ncontrolcode,\n//                         loading: false,\n//                         openModal: true\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\n//                 }\n//             });\n//     }\n// }\n// export function reloadGoodsIn(inputParam) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"goodsin/getGoodsIn\", {...inputParam.inputData})\n//             .then(response => {\n//                 let responseData = { ...response.data }\n//                 responseData = sortData(responseData)\n//                 let masterData = {\n//                     ...inputParam.masterData,\n//                     ...responseData,\n//                 }\n//                 if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n//                     inputParam.searchRef.current.value = \"\";\n//                     masterData['searchedData'] = undefined\n//                 }\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData,\n//                         loading: false,\n//                         showFilter: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/GoodsInAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","sortData","constructOptionList","rearrangeDateFormat","constructjsonOptionList","constructjsonOptionDefault","childComboLoadForEdit","intl","transactionStatus","getGoodsInFilterSubmit","inputParam","dispatch","post","inputData","then","response","responseData","data","masterData","type","payload","loading","catch","error","status","message","warn","getGoodsInComboService","urlArray","selectedId","Client","Project","addGoodsInService","userinfo","userInfo","operation","clientService","selectedGoodsIn","nclientcatcode","projectService","nprojecttypecode","GoodsInById","primaryKeyField","primaryKeyValue","all","selectedRecord","clientCatList","undefined","ClientCategory","get","projectTypeList","ProjectType","courierList","Courier","timezoneList","TimeZone","clientList","projectList","editData","nnoofpackages","sconsignmentno","noutofhours","ssecurityrefno","scomments","sgoodsindatetime","openModal","screenName","ncontrolCode","getClient","ClientMap","getProject","ProjectMap","ProjectMaster","getGoodsInDetail","goodsInItem","ngoodsincode","masterData1","dataState","viewInformation","selectedRecordView"],"mappings":"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":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, rearrangeDateFormat,constructjsonOptionList,constructjsonOptionDefault,childComboLoadForEdit } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getGoodsInFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"goodsin/getGoodsInData\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }               \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,                       \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getGoodsInComboService (inputParam) {\r\n    return function (dispatch){\r\n\r\n        // if(inputParam.operation === \"update\" && inputParam.masterData.selectedGoodsIn.ntransactionstatus=== transactionStatus.APPROVED){\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORDTOEDIT\" }));\r\n        // }else {\r\n            \r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        let Client =null;\r\n        let Project =null;\r\n      \r\n            const addGoodsInService =rsapi.post(\"goodsin/getGoodsInAdd\",{userinfo:inputParam.userInfo});\r\n            \r\n            if (inputParam.operation === \"create\") {\r\n\r\n                urlArray = [addGoodsInService];\r\n            }else if(inputParam.operation === \"update\"){\r\n\r\n                const clientService = rsapi.post(\"goodsin/getClient\", {\"nclientcatcode\":inputParam.masterData.selectedGoodsIn.nclientcatcode,\"userinfo\": inputParam.userInfo });\r\n                const projectService = rsapi.post(\"goodsin/getProjectMaster\", {\"nprojecttypecode\":inputParam.masterData.selectedGoodsIn.nprojecttypecode,\"userinfo\": inputParam.userInfo });\r\n                const GoodsInById = rsapi.post(\"goodsin/getGoodsInEdit\", { [inputParam.primaryKeyField]: inputParam.masterData.selectedGoodsIn[inputParam.primaryKeyField], \"userinfo\": inputParam.userInfo });\r\n\r\n                urlArray = [addGoodsInService,clientService,projectService,GoodsInById];\r\n                selectedId = inputParam.primaryKeyValue;\r\n\r\n            }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n        .then(response => {\r\n            let selectedRecord = {};\r\n          \r\n                let data=response[0].data;\r\n                const clientCatList = constructOptionList(data[\"ClientCategory\"] || [], \"nclientcatcode\",\"sclientcatname\", undefined, undefined, false);   \r\n                const ClientCategory = clientCatList.get(\"OptionList\");\r\n\r\n                const projectTypeList = constructOptionList(data[\"ProjectType\"] || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\r\n                const ProjectType = projectTypeList.get(\"OptionList\");\r\n                             \r\n                const courierList = constructOptionList(data[\"Courier\"] || [], \"ncouriercode\", \"scouriername\", undefined, undefined, false);\r\n                const Courier = courierList.get(\"OptionList\");\r\n\r\n                const timezoneList = constructOptionList(data[\"TimeZone\"] || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\r\n                const TimeZone = timezoneList.get(\"OptionList\");\r\n\r\n\r\n                if(inputParam.operation === \"update\"){\r\n\r\n                    const clientList = constructOptionList( response[1].data[\"Client\"] || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);   \r\n                    Client = clientList.get(\"OptionList\");\r\n    \r\n                    const projectList = constructOptionList( response[2].data[\"ProjectMaster\"] || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, false);\r\n                    Project = projectList.get(\"OptionList\");\r\n\r\n                    const editData = response[3].data.selectedGoodsIn;\r\n                    \r\n                    selectedRecord[\"nnoofpackages\"] = editData.nnoofpackages;\r\n                    selectedRecord[\"sconsignmentno\"] = editData.sconsignmentno;\r\n                    selectedRecord[\"noutofhours\"] = editData.noutofhours;\r\n                    selectedRecord[\"ssecurityrefno\"] = editData.ssecurityrefno;\r\n                    selectedRecord[\"scomments\"] = editData.scomments;\r\n                    selectedRecord[\"dgoodsindatetime\"] = rearrangeDateFormat(inputParam.userInfo,editData.sgoodsindatetime);\r\n                    selectedRecord[\"nclientcatcode\"] ={\r\n                        \"value\": editData[\"nclientcatcode\"],\r\n                        \"label\": editData[\"sclientcatname\"]\r\n                    };\r\n                    selectedRecord[\"nclientcode\"] ={\r\n                        \"value\": editData[\"nclientcode\"],\r\n                        \"label\": editData[\"sclientname\"]\r\n                    };\r\n                    selectedRecord[\"nprojecttypecode\"] ={\r\n                        \"value\": editData[\"nprojecttypecode\"],\r\n                        \"label\": editData[\"sprojecttypename\"]\r\n                    };\r\n                    selectedRecord[\"nprojectmastercode\"] ={\r\n                        \"value\": editData[\"nprojectmastercode\"],\r\n                        \"label\": editData[\"sprojectname\"]\r\n                    };\r\n                    selectedRecord[\"ncouriercode\"] ={\r\n                        \"value\": editData[\"ncouriercode\"],\r\n                        \"label\": editData[\"scouriername\"]\r\n                    };            \r\n\r\n                    selectedRecord = {...selectedRecord}\r\n                }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    ClientCategory,\r\n                    Client,\r\n                    ProjectType,\r\n                    Project,\r\n                    Courier,\r\n                    TimeZone,\r\n                    selectedRecord, \r\n                    openModal: true,\r\n                    operation: inputParam.operation, \r\n                    screenName: inputParam.screenName,\r\n                    ncontrolCode: inputParam.ncontrolCode, \r\n                    loading: false,\r\n                    selectedId\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n        }\r\n\r\n\r\n\r\n    //}\r\n}\r\n\r\nexport function getClient(nclientcatcode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getClient\", {\"nclientcatcode\": nclientcatcode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Client = [];  \r\n                const ClientMap = constructOptionList(response.data.Client || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);\r\n                Client = ClientMap.get(\"OptionList\");\r\n                selectedRecord[\"nclientcode\"]={};\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Client,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getProject(nprojecttypecode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getProjectMaster\", {\"nprojecttypecode\": nprojecttypecode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Project = []; \r\n                const ProjectMap = constructOptionList(response.data.ProjectMaster || [], \"nprojectmastercode\",\"sprojectname\", undefined, undefined, false);\r\n                Project = ProjectMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojectmastercode\"]={};        \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Project,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const getGoodsInDetail = (goodsInItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/goodsin/getActiveGoodsInById\", {ngoodsincode: goodsInItem.ngoodsincode,userinfo: userInfo })\r\n            .then(response => {\r\n                \r\n\r\n                    let masterData1  = {...masterData, ...response.data }\r\n\r\n                    masterData=masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function viewInformation(ngoodsincode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/goodsin/getActiveGoodsInById\", {ngoodsincode:ngoodsincode,userinfo: userInfo })        \r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            selectedRecordView : response.data.selectedGoodsIn\r\n                        },\r\n                        loading: false,\r\n                        operation: \"View\",\r\n                        openModal: true,\r\n                        screenName: \"IDS_GOODSIN\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function getEditGoodsInSampleService(goodsinSampleEditParam, columnList,selectedRecord1, childColumnList, comboComponents,\r\n//     withoutCombocomponent) {\r\n//     return function (dispatch) {\r\n\r\n//         dispatch(initRequest(true));\r\n//         const { userInfo, operation } = { ...goodsinSampleEditParam };\r\n//         let masterData = goodsinSampleEditParam[\"masterData\"];\r\n\r\n//         if (masterData[\"selectedSample\"].length > 1 ||\r\n//             masterData[\"selectedSample\"]\r\n//                 .findIndex(x => x[goodsinSampleEditParam.primaryKeyName] === goodsinSampleEditParam[\"editrow\"][goodsinSampleEditParam.primaryKeyName])\r\n//             === -1) {\r\n//             inputParam.editRegParam[\"getSampleChildDetail\"] = true;\r\n//         }\r\n//         masterData[\"selectedSample\"] = [];\r\n//         masterData[\"selectedSample\"].push(goodsinSampleEditParam[\"editrow\"]);\r\n\r\n//         const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n//         let urlArray = [];\r\n\r\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n       \r\n//         // const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", {\r\n//         //     ...inputParam.editRegParam, npreregno, parentcolumnlist: columnList,\r\n//         //     childcolumnlist: childColumnList,\r\n//         //     userinfo: userInfo\r\n//         // })\r\n\r\n//         const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n//             datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n//             userinfo: userInfo\r\n//         })\r\n\r\n//         urlArray = [timeZoneService,  dateService]\r\n\r\n//         Axios.all(urlArray)\r\n//             .then(response => {\r\n//                 let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n//                 selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n               \r\n\r\n\r\n//                 const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                 const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }              \r\n\r\n               \r\n//                     const languagetypeCode = undefined\r\n//                     const comboData = response[1].data;\r\n//                     delete comboData['EditData']\r\n//                     let comboValues = {}\r\n//                     if (columnList.length > 0) {\r\n//                         columnList.map(x => {\r\n//                             if (x.inputtype === 'combo') {\r\n//                                 if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n//                                 {\r\n//                                     if (comboData[x.label].length > 0) {\r\n//                                         if (comboData[x.label][0].label === undefined) {\r\n//                                             const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n//                                             comboData[x.label] = optionList.get(\"OptionList\");\r\n//                                         } else {\r\n//                                             comboData[x.label] = comboData[x.label]\r\n//                                             const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n//                                                 x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n//                                         }\r\n//                                     } else {\r\n//                                         comboData[x.label] = []\r\n//                                     }\r\n//                                     //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n//                                     //   childColumnList, withoutCombocomponent)\\\r\n//                                     comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n//                                         childColumnList, withoutCombocomponent)\r\n//                                 } else {\r\n//                                     comboValues = {\r\n//                                         \"comboData\": comboData,\r\n//                                     }\r\n//                                 }\r\n//                             } else {\r\n//                                 comboValues = {\r\n//                                     comboData: comboData,\r\n//                                     ...comboValues\r\n//                                 }\r\n//                             }\r\n//                         })\r\n//                     }\r\n//                     else {\r\n//                         comboValues = {\r\n//                             \"comboData\": comboData,\r\n//                         }\r\n//                     }\r\n\r\n//                     withoutCombocomponent.map(date => {\r\n//                         if (date.inputtype === 'date') {\r\n//                             selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n//                                 rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n//                             if (date.nperiodcode) {\r\n//                                 selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n//                                     new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n//                             } else {\r\n//                                 selectedRecord[date.label + \"value\"] = new Date();\r\n//                             }\r\n\r\n//                             if (date.hidebeforedate) {\r\n//                                 selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n//                             }\r\n//                             if (date.hideafterdate) {\r\n//                                 selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n//                             }\r\n//                         }\r\n//                     })\r\n\r\n                  \r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n                           \r\n//                             operation: goodsinSampleEditParam.operation,\r\n//                             screenName: goodsinSampleEditParam.screenName,\r\n//                             timeZoneList,\r\n//                             defaultTimeZone,\r\n//                             selectedRecord,\r\n//                             ncontrolCode: goodsinSampleEditParam.ncontrolCode,\r\n//                             loadPreregister: true,\r\n//                             parentPopUpSize: \"xl\",\r\n//                             loading: false,\r\n//                             showSample: undefined,\r\n//                             comboData: comboValues.comboData,\r\n//                             childColumnList, comboComponents,\r\n//                             withoutCombocomponent,\r\n//                             columnList,\r\n//                             masterData\r\n\r\n//                         }\r\n//                     })\r\n                \r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.info(intl.formatMessage({\r\n//                         id: error.response.data\r\n//                     }));\r\n//                 }\r\n//             })\r\n\r\n//     }\r\n// }\r\n\r\n// export function getGoodsInComboService(goodsInParam) {\r\n//     return function (dispatch) {\r\n\r\n//         const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", { userinfo: goodsInParam.userInfo });\r\n//         const courierService = rsapi.post(\"courier/getAllActiveCourier\", { userinfo: goodsInParam.userInfo });\r\n//         const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", { userinfo: goodsInParam.userInfo });\r\n//         const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//         const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: goodsInParam.userInfo });\r\n//         let urlArray = [];\r\n//         let selectedId = null;\r\n//         if (goodsInParam.operation === \"create\") {\r\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\r\n//         }\r\n//         else {\r\n//             const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\r\n\r\n//             const goodsInById = rsapi.post(url, { [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue, \"userinfo\": goodsInParam.userInfo });\r\n//             urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\r\n//             selectedId = goodsInParam.primaryKeyValue;\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         Axios.all(urlArray)\r\n//             .then(response => {\r\n//                 const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\",\r\n//                     \"smanufname\", undefined, undefined, true);\r\n\r\n//                 const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\",\r\n//                     \"scouriername\", undefined, undefined, false);\r\n\r\n//                 const recipientMap = constructOptionList(response[2].data || [], \"nusercode\",\r\n//                     \"susername\", undefined, undefined, true);\r\n\r\n//                 const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n//                     \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                 const manufacturerList = manufacturerMap.get(\"OptionList\");\r\n//                 const courierList = courierMap.get(\"OptionList\");\r\n//                 const recipientList = recipientMap.get(\"OptionList\");\r\n//                 const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                 //const currentTime = new Date(response[4].data);\r\n//                 const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n\r\n//                 let validRecord = true;\r\n//                 let selectedRecord = {\r\n//                     //\"dgoodsindate\": new Date(response[4].data),\r\n//                     \"ntzgoodsindate\": {\r\n//                         \"value\": goodsInParam.userInfo.ntimezonecode,\r\n//                         \"label\": goodsInParam.userInfo.stimezoneid\r\n//                     },\r\n//                     \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\r\n//                 };\r\n//                 if (goodsInParam.operation === \"update\") {\r\n//                     if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\r\n//                         validRecord = false;\r\n//                     }\r\n//                     else {\r\n//                         let manufacturer = [];\r\n//                         let courier = [];\r\n//                         let user = [];\r\n//                         let timeZone = [];\r\n//                         selectedRecord = response[5].data;\r\n\r\n//                         manufacturer.push({ \"value\": response[5].data[\"nmanufcode\"], \"label\": response[5].data[\"smanufname\"] });\r\n//                         if (response[5].data[\"ncouriercode\"] !== -1) {\r\n//                             courier.push({ \"value\": response[5].data[\"ncouriercode\"], \"label\": response[5].data[\"scouriername\"] });\r\n//                             selectedRecord[\"ncouriercode\"] = courier[0];\r\n//                         }\r\n//                         else {\r\n//                             selectedRecord[\"ncouriercode\"] = undefined;\r\n//                         }\r\n//                         user.push({ \"value\": response[5].data[\"nrecipientcode\"], \"label\": response[5].data[\"suserfullname\"] });\r\n//                         timeZone.push({ \"value\": response[5].data[\"ntzgoodsindate\"], \"label\": response[5].data[\"stzgoodsindate\"] });\r\n\r\n//                         selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n//                         selectedRecord[\"nrecipientcode\"] = user[0];\r\n//                         //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\r\n//                         selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\r\n//                         selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\r\n//                         selectedRecord[\"stzgoodsindate\"] = timeZone[0].label;\r\n\r\n//                        //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\r\n\r\n//                        selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\r\n//                     }\r\n\r\n//                 }\r\n//                 else {\r\n//                     //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\r\n//                     selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n                  \r\n                  \r\n//                     selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\r\n//                     selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\r\n//                     selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\");\r\n//                     // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\r\n//                     //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\r\n//                 }\r\n//                 if (validRecord) {\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             currentTime,\r\n//                             manufacturerList,//:response[0].data || [], \r\n//                             courierList,//:response[1].data  || [], \r\n//                             recipientList,//:response[2].data  || [],   \r\n//                             timeZoneList,//:response[3].data  || [],                                                                                     \r\n//                             operation: goodsInParam.operation, screenName: goodsInParam.screenName,\r\n//                             selectedRecord,\r\n//                             openModal: true,\r\n//                             ncontrolCode: goodsInParam.ncontrolCode,\r\n//                             loading: false, selectedId\r\n//                         }\r\n//                     });\r\n//                 }\r\n//                 else {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINALREADYRECEIVED\" }));\r\n//                 }\r\n//             })\r\n//             .catch(error => {              \r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"goodsin/getGoodsIn\", { nrmsno: goodsIn.nrmsno, fromDate, toDate, userinfo: userInfo })\r\n//             .then(response => {\r\n\r\n//                 masterData = { ...masterData, ...response.data };\r\n//                 sortData(masterData);\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(intl.formatMessage({ id: error.message }));\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\n// export function getChainCustodyComboDataService(chainCustodyParam) {\r\n//     return function (dispatch) {\r\n\r\n//         // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\r\n//         //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\r\n//         // }\r\n//         // else {\r\n//         let selectedId = null;\r\n//         let selectedRecord = {\r\n//             \"dreceiveddate\": new Date(),\r\n//             \"ntzreceiveddate\": {\r\n//                 \"value\": chainCustodyParam.userInfo.ntimezonecode,\r\n//                 \"label\": chainCustodyParam.userInfo.stimezoneid\r\n//             },\r\n//             \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\r\n//         };\r\n\r\n//         if (chainCustodyParam.operation === \"update\") {\r\n//             if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\r\n//                 selectedId = chainCustodyParam.primaryKeyValue;\r\n//                 const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//                 const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo });\r\n//                 const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n           \r\n//                 const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\r\n\r\n//                 dispatch(initRequest(true));\r\n//                 Axios.all(urlArray)\r\n//                     // dispatch(initRequest(true));\r\n//                     // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\r\n//                     .then(response => {\r\n//                         selectedRecord = response[1].data;\r\n\r\n//                         let timeZone = [];\r\n//                         timeZone.push({ \"value\": response[1].data[\"ntzreceiveddate\"], \"label\": response[1].data[\"stzreceiveddate\"] });\r\n\r\n//                         const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n//                             \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                         const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n//                         selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\r\n//                         selectedRecord[\"stzreceiveddate\"] = timeZone[0].label;\r\n\r\n//                         //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\r\n\r\n//                         selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\r\n//                         dispatch({\r\n//                             type: DEFAULT_RETURN, payload: {\r\n//                                 timeZoneList,//:response[0].data  || [],                                                                                 \r\n//                                 operation: chainCustodyParam.operation,\r\n//                                 screenName: chainCustodyParam.screenName,\r\n//                                 selectedRecord,\r\n//                                 openChildModal: true,\r\n//                                 ncontrolCode: chainCustodyParam.ncontrolCode,\r\n//                                 loading: false, selectedId,\r\n//                                 //currentTime:new Date(response[2].data)\r\n//                                 currentTime:rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\r\n//                             }\r\n//                         });\r\n\r\n//                     })\r\n//                     .catch(error => {\r\n//                         dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                         if (error.response.status === 500) {\r\n//                             toast.error(intl.formatMessage({ id: error.message }));\r\n//                         }\r\n//                         else {\r\n//                             toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                         }\r\n//                     })\r\n//             }\r\n//             else {\r\n//                 toast.warn(intl.formatMessage({ id: \"IDS_INVALIDOWNERTOEDIT\" }));\r\n//             }\r\n//         }\r\n//         else {\r\n//             dispatch(initRequest(true));\r\n//             const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n//             const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n//             const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\r\n//                 nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\r\n//                 userinfo: chainCustodyParam.userInfo\r\n//             });\r\n//             let urlArray = [timeZoneService, UTCtimeZoneService,validateGoodsIn];\r\n//             return Axios.all(urlArray)\r\n//                 .then(response => {\r\n\r\n//                     const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n//                         \"stimezoneid\", undefined, undefined, true);\r\n\r\n//                     const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             timeZoneList,//:response.data  || [],\r\n//                             operation: chainCustodyParam.operation,\r\n//                             selectedRecord: { ...selectedRecord, \r\n//                                 //dreceiveddate: new Date(response[1].data) \r\n//                                 dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n//                             },\r\n//                             openChildModal: true,\r\n//                             screenName: chainCustodyParam.screenName,\r\n//                             ncontrolCode: chainCustodyParam.ncontrolCode,\r\n//                             loading: false, selectedId,\r\n//                             //currentTime:new Date(response[1].data)\r\n//                             currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n//                         }\r\n//                     })\r\n//                 })\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(intl.formatMessage({ id: error.message }));\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                     }\r\n//                 })\r\n//         }\r\n//     }\r\n//     // }\r\n// }\r\n\r\n// export function getGoodsInPrinterComboService(inputParam) {\r\n//     return (dispatch) => {\r\n//         dispatch(initRequest(true))\r\n//         rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\r\n//             .then(response => {\r\n//                 let selectedRecord = {\r\n//                     sprintername: {\r\n//                         value: response.data[0].sprintername,\r\n//                         label: response.data[0].sprintername,\r\n//                         item: response.data[0]\r\n//                     }\r\n//                 };\r\n//                 const printerList = constructOptionList(response.data || [], \"sprintername\",\r\n//                     \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         printerList,\r\n//                         selectedRecord,\r\n//                         operation: \"printer\",\r\n//                         screenName: \"PrintBarcode\",\r\n//                         dataToPrint: inputParam.selectedGoodsIn.nrmsno,\r\n//                         ncontrolcode: inputParam.ncontrolcode,\r\n//                         loading: false,\r\n//                         openModal: true\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                 }\r\n//             });\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// export function reloadGoodsIn(inputParam) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"goodsin/getGoodsIn\", {...inputParam.inputData})\r\n//             .then(response => {\r\n//                 let responseData = { ...response.data }\r\n//                 responseData = sortData(responseData)\r\n//                 let masterData = {\r\n//                     ...inputParam.masterData,\r\n//                     ...responseData,\r\n//                 }\r\n//                 if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n//                     inputParam.searchRef.current.value = \"\";\r\n//                     masterData['searchedData'] = undefined\r\n//                 }\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData,\r\n//                         loading: false,\r\n//                         showFilter: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}