{"ast":null,"code":"import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from'react-redux';import{toast}from'react-toastify';import{injectIntl,FormattedMessage}from'react-intl';import{Row,Col,Card,Nav,FormGroup,FormLabel,Image}from'react-bootstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPencilAlt,faTrashAlt,faThumbsUp,faUserTimes}from'@fortawesome/free-solid-svg-icons';import{callService,crudMaster,validateEsignCredential,updateStore,getGrapicalSchedulerViewDetail,getSchedulerComboService,changeGrapicalScheduleTypeFilter,filterColumnData}from'../../actions';import{DEFAULT_RETURN}from'../../actions/LoginTypes';import{showEsign,getControlMap,constructOptionList,validatePhoneNumber,formatInputDate,create_UUID,validateEmail,validateLoginId,formatDate,onDropAttachFileList,deleteAttachmentDropZone}from'../../components/CommonScript';//import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\nimport{transactionStatus}from'../../components/Enumeration';import ListMaster from'../../components/list-master/list-master.component';import SlideOutModal from'../../components/slide-out-modal/SlideOutModal';import BreadcrumbComponent from'../../components/Breadcrumb.Component';import{Affix}from'rsuite';// import 'react-perfect-scrollbar/dist/css/styles.css';\nimport{ReadOnlyText,ContentPanel}from'../../components/App.styles';//import AddScheduler from './AddScheduler';\nimport Esign from'../audittrail/Esign';//import { Tooltip } from '@progress/kendo-react-tooltip';\nimport ConfirmMessage from'../../components/confirm-alert/confirm-message.component';import ReactTooltip from'react-tooltip';import GrapicalScheduleTypeFilter from'./GrapicalScheduleTypeFilter';import{Scheduler,TimelineView,DayView,WeekView,MonthView}from'@progress/kendo-react-scheduler';var mapStateToProps=function mapStateToProps(state){return{Login:state.Login};};var GraphicalSchedulerView=/*#__PURE__*/function(_React$Component){_inherits(GraphicalSchedulerView,_React$Component);var _super=_createSuper(GraphicalSchedulerView);function GraphicalSchedulerView(props){var _this;_classCallCheck(this,GraphicalSchedulerView);_this=_super.call(this,props);_this.handleDateChange=function(event){_this.setState({displayDate:event.value});};_this.onFilterSubmit=function(){if(_this.state.nfilterScheduleType.label){var inputParam={inputData:{sscheduletype:_this.state.nfilterScheduleType.label,userinfo:_this.props.Login.userInfo,nfilterScheduleType:_this.state.nfilterScheduleType},classUrl:\"graphicalschedulerview\",methodUrl:\"GraphicalSchedulerByScheduleType\"};_this.props.changeGrapicalScheduleTypeFilter(inputParam,_this.props.Login.masterData.filterScheduleType);}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_TESTCATEGORYNOTAVAILABLE\"}));}};_this.closeModal=function(){var loadEsign=_this.props.Login.loadEsign;var openModal=_this.props.Login.openModal;var selectedRecord=_this.props.Login.selectedRecord;if(_this.props.Login.loadEsign){if(_this.props.Login.operation===\"delete\"){loadEsign=false;openModal=false;selectedRecord={};selectedRecord['esignpassword']=\"\";selectedRecord['esigncomments']=\"\";selectedRecord['esignreason']=\"\";}else{loadEsign=false;selectedRecord['esignpassword']=\"\";selectedRecord['esigncomments']=\"\";selectedRecord['esignreason']=\"\";}}else{openModal=false;selectedRecord={};}var updateInfo={typeName:DEFAULT_RETURN,data:{openModal:openModal,loadEsign:loadEsign,selectedRecord:selectedRecord,selectedId:null}};_this.props.updateStore(updateInfo);};_this.onComboChangeevent=function(comboData,fieldName){var nfilterScheduleType=_this.state.nfilterScheduleType||{};nfilterScheduleType=comboData;_this.searchRef.current.value=\"\";_this.setState({nfilterScheduleType:nfilterScheduleType});// const selectedRecord = this.state.selectedRecord || {};\n// selectedRecord[fieldName] = comboData;\n// this.setState({ selectedRecord });\n};_this.validateEsign=function(){var inputParam={inputData:{\"userinfo\":_objectSpread(_objectSpread({},_this.props.Login.userInfo),{},{sreason:_this.state.selectedRecord[\"esigncomments\"],nreasoncode:_this.state.selectedRecord[\"esignreason\"]&&_this.state.selectedRecord[\"esignreason\"].value,spredefinedreason:_this.state.selectedRecord[\"esignreason\"]&&_this.state.selectedRecord[\"esignreason\"].label}),password:_this.state.selectedRecord[\"esignpassword\"]},screenData:_this.props.Login.screenData};_this.props.validateEsignCredential(inputParam,\"openModal\");};_this.reloadData=function(){_this.searchRef.current.value=\"\";var inputParam={inputData:{\"userinfo\":_this.props.Login.userInfo},classUrl:\"graphicalschedulerview\",methodUrl:\"GraphicalSchedulerView\",displayName:\"IDS_GRAPHICALSCHEDULERVIEW\",userInfo:_this.props.Login.userInfo,isClearSearch:_this.props.Login.isClearSearch};_this.props.callService(inputParam);};_this.state={masterStatus:\"\",error:\"\",selectedRecord:{},operation:\"\",selectedScheduler:undefined,screenName:undefined,userLogged:true,userRoleControlRights:[],controlMap:new Map(),isClearSearch:false,displayDate:new Date(Date.UTC(currentYear,10,27)),timezone:\"Etc/UTC\",data:_this.props.Login.masterData.SelectedSchedulerView!==undefined?_this.props.Login.masterData.SelectedSchedulerView:\"\"};_this.searchRef=React.createRef();_this.confirmMessage=new ConfirmMessage();_this.schedulerFieldList=['stitle','sscheduletype'];_this.searchFieldList=['stitle','sscheduletype'];return _this;}_createClass(GraphicalSchedulerView,[{key:\"render\",value:function render(){var _this2=this;//let userStatusCSS = \"outline-success\"//\"outline-secondary\";\nvar userStatusCSS=\"outline-secondary\";if(this.props.Login.masterData.SelectedSchedulerView&&this.props.Login.masterData.SelectedSchedulerView.ntransactionstatus===transactionStatus.APPROVED){userStatusCSS=\"outline-success\";}var activeIconCSS=\"fa fa-check\";var sweek=\"\";var smonth=\"\";var addId=this.state.controlMap.has(\"AddScheduler\")&&this.state.controlMap.get(\"AddScheduler\").ncontrolcode;// const editId = this.state.controlMap.has(\"EditScheduler\") && this.state.controlMap.get(\"EditScheduler\").ncontrolcode;\n// const deleteId = this.state.controlMap.has(\"DeleteScheduler\") && this.state.controlMap.get(\"DeleteScheduler\").ncontrolcode;\n// const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode;\nvar filterParam={inputListName:\"Scheduler\",selectedObject:\"SelectedSchedulerView\",primaryKeyField:\"nschedulecode\",fetchUrl:\"graphicalschedulerview/getGraphicalSchedulerView\",fecthInputObject:{userinfo:this.props.Login.userInfo},masterData:this.props.Login.masterData,searchFieldList:this.searchFieldList,sscheduletype:this.state.nfilterScheduleType?this.state.nfilterScheduleType.label:null};var addParam={screenName:\"IDS_SCHEDULER\",operation:\"create\",primaryKeyName:\"nschedulecode\",masterData:this.props.Login.masterData,userInfo:this.props.Login.userInfo,ncontrolcode:addId,nfilterScheduleType:this.state.nfilterScheduleType};// const editParam = {\n//     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\n//     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n//     ncontrolcode: editId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\n// };\n// const approveParam = {\n//     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\n//     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n//     ncontrolcode: approveId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\n// };\nvar userImgPath=this.props.Login.settings&&this.props.Login.settings[6]+this.props.Login.masterData.UserImagePath;var signImgPath=this.props.Login.settings&&this.props.Login.settings[6]+this.props.Login.masterData.SignImagePath;// const mandatoryFields = [{\"idsName\": \"IDS_SCHEDULERNAME\", \"dataField\": \"sschedulename\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n//                         //{ \"idsName\": \"IDS_SCHEDULERTYPE\", \"dataField\": \"sscheduletype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n//                         //{ \"idsName\": \"IDS_OCCURRENCE\", \"dataField\": \"noccurencenooftimes\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n//                         //{ \"idsName\": \"IDS_OCCURRENCEDAYWISE\", \"dataField\": \"noccurencedaywiseinterval\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n//                         //{ \"idsName\": \"IDS_OCCURRENCEHOURWISE\", \"dataField\": \"soccurencehourwiseinterval\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n//                         //{ \"idsName\": \"IDS_MONTHLYOCCURRENCETYPE\", \"dataField\": \"nmonthlyoccurrencetype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\n//                         { \"idsName\": \"IDS_STARTDATE\", \"dataField\": \"dstartdate\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n//                         { \"idsName\": \"IDS_STARTTIME\", \"dataField\": \"dstarttime\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n//                         ];\nvar breadCrumbData=this.state.filterData||[];return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\"},breadCrumbData.length>0?/*#__PURE__*/React.createElement(Affix,{top:53},/*#__PURE__*/React.createElement(BreadcrumbComponent,{breadCrumbItem:breadCrumbData})):\"\",/*#__PURE__*/React.createElement(Row,{noGutters:true},/*#__PURE__*/React.createElement(Col,{md:4},/*#__PURE__*/React.createElement(ListMaster,{screenName:this.props.intl.formatMessage({id:\"IDS_GRAPHICALSCHDULERVIEW\"}),masterData:this.props.Login.masterData,userInfo:this.props.Login.userInfo,masterList:this.props.Login.masterData.searchedData||this.props.Login.masterData.SchedulerView,getMasterDetail:function getMasterDetail(scheduler){return _this2.props.getGrapicalSchedulerViewDetail(scheduler,_this2.props.Login.userInfo,_this2.props.Login.masterData,_this2.state.nfilterScheduleType.label);},selectedMaster:this.props.Login.masterData.SelectedSchedulerView,primaryKeyField:\"nschedulecode\",mainField:\"stitle\",firstField:\"sscheduletype\"//secondField=\"nstatus\"\n,filterColumnData:this.props.filterColumnData,filterParam:filterParam,userRoleControlRights:this.state.userRoleControlRights,addId:addId,searchRef:this.searchRef,reloadData:this.reloadData,openModal:function openModal(){return _this2.props.getSchedulerComboService(addParam);},isMultiSelecct:false,hidePaging:false,isClearSearch:this.props.Login.isClearSearch,openFilter:this.openFilter,closeFilter:this.closeFilter,onFilterSubmit:this.onFilterSubmit,showFilterIcon:true,showFilter:this.props.Login.showFilter,filterComponent:[{\"IDS_TESTFILTER\":/*#__PURE__*/React.createElement(GrapicalScheduleTypeFilter,{filterScheduleType:this.state.filterScheduleType||[],nfilterScheduleType:this.state.nfilterScheduleType||{},onComboChange:this.onComboChangeevent})}]})),/*#__PURE__*/React.createElement(Col,{md:8},/*#__PURE__*/React.createElement(ContentPanel,{className:\"panel-main-content\"},/*#__PURE__*/React.createElement(Card,{className:\"border-0\"},this.props.Login.masterData.SchedulerView&&this.props.Login.masterData.SchedulerView.length>0&&this.props.Login.masterData.SelectedSchedulerView?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(ReactTooltip,{place:\"bottom\",globalEventOff:\"click\",id:\"tooltip_list_wrap\"}),/*#__PURE__*/React.createElement(Card.Title,{className:\"product-title-main\"},this.props.Login.masterData.SelectedSchedulerView&&this.props.Login.masterData.SelectedSchedulerView.stitle!==undefined?this.props.Login.masterData.SelectedSchedulerView.stitle:\"\"),/*#__PURE__*/React.createElement(Card.Subtitle,null,/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex product-category\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"product-title-sub flex-grow-1\"},/*#__PURE__*/React.createElement(\"span\",{className:\"btn btn-outlined \".concat(userStatusCSS,\" btn-sm ml-3\")},activeIconCSS!==\"\"?/*#__PURE__*/React.createElement(\"i\",{class:\"fas fa-check \"}):\"\",this.props.Login.masterData.SelectedSchedulerView&&this.props.Login.masterData.SelectedSchedulerView.sscheduletype!==undefined?this.props.Login.masterData.SelectedSchedulerView.sscheduletype:\"\",\" \"))))),/*#__PURE__*/React.createElement(Card.Body,{className:\"form-static-wrap\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Scheduler,{data:this.state.data,date:this.state.displayDate,onDateChange:this.handleDateChange,timezone:this.state.timezone,editable:{add:true,remove:true,drag:true,resize:true,select:true,edit:true}},/*#__PURE__*/React.createElement(DayView,{numberOfDays:3}),/*#__PURE__*/React.createElement(WeekView,null),/*#__PURE__*/React.createElement(MonthView,null)),\";\"))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"horizontal-line\"}))))):\"\"))))));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps){var isComponentUpdated=false;if(this.props.Login.selectedRecord!==previousProps.Login.selectedRecord){this.setState({selectedRecord:this.props.Login.selectedRecord});}if(this.props.Login.userInfo.nformcode!==previousProps.Login.userInfo.nformcode){var userRoleControlRights=[];if(this.props.Login.userRoleControlRights){this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]&&Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(function(item){return userRoleControlRights.push(item.ncontrolcode);});}var controlMap=getControlMap(this.props.Login.userRoleControlRights,this.props.Login.userInfo.nformcode);this.setState({userRoleControlRights:userRoleControlRights,controlMap:controlMap});}var nfilterScheduleType=this.state.nfilterScheduleType||{};var filterScheduleType=this.state.filterScheduleType||{};if(this.props.Login.masterData.filterGrapicalScheduleType!==previousProps.Login.masterData.filterGrapicalScheduleType){var scheduleTypeMap=constructOptionList(this.props.Login.masterData.filterGrapicalScheduleType||[],\"nschedulecode\",\"sscheduletype\",'nschedulecode','ascending',false);filterScheduleType=scheduleTypeMap.get(\"OptionList\");if(this.state.nfilterScheduleType===null||this.state.nfilterScheduleType===undefined){if(scheduleTypeMap.get(\"DefaultValue\")){nfilterScheduleType=scheduleTypeMap.get(\"DefaultValue\");}else if(filterScheduleType&&filterScheduleType.length>0){nfilterScheduleType=filterScheduleType[0];}}isComponentUpdated=true;}else if(this.props.Login.masterData.nfilterScheduleType!==previousProps.Login.masterData.nfilterScheduleType){nfilterScheduleType=this.props.Login.masterData.nfilterScheduleType;isComponentUpdated=true;}if(isComponentUpdated){this.setState({nfilterScheduleType:nfilterScheduleType,filterScheduleType:filterScheduleType});}if(this.props.Login.masterData!==previousProps.Login.masterData){var filterData=this.generateBreadCrumData();// if (this.props.Login.masterData.SelectedScheduler !== undefined) {\n//     if(this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\")\n//     {\n//         nfilterScheduleType = filterScheduleType[0];\n//     }\n//     else\n//     {\n//         nfilterScheduleType = filterScheduleType[1];\n//     }\n//     this.setState({ filterData,nfilterScheduleType });\n// }\n//else\n//{\nthis.setState({filterData:filterData});//}\n}var data=[];var tempdate;if(this.props.Login.masterData.SelectedSchedulerView!==null&&this.props.Login.masterData.SelectedSchedulerView!==undefined){if(this.props.Login.masterData.SelectedSchedulerView!==previousProps.Login.masterData.SelectedSchedulerView){//for(let i =0;i<this.props.Login.masterData.selectedScheduler.length;i++)\n//{\ndata.push(this.props.Login.masterData.SelectedSchedulerView.jsondata);//}\ndata=data.map(function(dataItem){return{id:dataItem.id,start:parseAdjust(dataItem.start),tempdate:parseAdjust(dataItem.start),startTimezone:dataItem.startTimezone,end:parseAdjust(dataItem.end),endTimezone:dataItem.endTimezone,isAllDay:dataItem.isAllDay,title:dataItem.title,description:dataItem.description,recurrenceRule:dataItem.recurrenceRule,recurrenceId:dataItem.recurrenceID,recurrenceExceptions:dataItem.recurrenceException,roomId:dataItem.roomID,ownerID:dataItem.TaskID,personId:dataItem.TaskID};});//let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),data[0].start.getMonth() , data[0].start.getDate()));\n//let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),10 , 27));\n//tempdate=parseAdjust(tempdate);\n//   data[0].tempdate=data[0].tempdate.replace(\"T\",\"\");\n//   data[0].tempdate=data[0].tempdate.replace(\"Z\",\"\");\n//   data[0].tempdate=parseAdjust(data[0].tempdate);\nthis.setState({data:data,displayDate:data[0].tempdate});}}}},{key:\"generateBreadCrumData\",value:function generateBreadCrumData(){var breadCrumbData=[];if(this.props.Login.masterData){breadCrumbData.push({\"label\":\"IDS_SCHEDULERTYPE\",\"value\":this.props.Login.masterData.SelectedSchedulerView&&this.props.Login.masterData.SelectedSchedulerView.sscheduletype!==undefined?this.props.Login.masterData.SelectedSchedulerView.sscheduletype:\"NA\"});}return breadCrumbData;}// ConfirmDelete = (deleteId) => {\n//     this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\n//         this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\n//         () => this.deleteScheduler(\"Scheduler\", this.props.Login.masterData.SelectedScheduler, \"delete\", deleteId));\n// }\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var updateInfo={typeName:DEFAULT_RETURN,data:{masterData:[],inputParam:undefined,operation:null,modalName:undefined}};this.props.updateStore(updateInfo);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.Login.masterStatus!==\"\"&&props.Login.masterStatus!==state.masterStatus){toast.warn(props.Login.masterStatus);props.Login.masterStatus=\"\";}if(props.Login.error!==state.error){toast.error(props.Login.error);props.Login.error=\"\";}if(props.Login.selectedRecord===undefined){return{selectedRecord:{}};}return null;}}]);return GraphicalSchedulerView;}(React.Component);export default connect(mapStateToProps,{callService:callService,crudMaster:crudMaster,validateEsignCredential:validateEsignCredential,updateStore:updateStore,getGrapicalSchedulerViewDetail:getGrapicalSchedulerViewDetail,getSchedulerComboService:getSchedulerComboService,changeGrapicalScheduleTypeFilter:changeGrapicalScheduleTypeFilter,filterColumnData:filterColumnData})(injectIntl(GraphicalSchedulerView));export var currentYear=new Date().getFullYear();export var parseAdjust=function parseAdjust(eventDate){var date=new Date(eventDate);date.setFullYear(currentYear);return date;};export var displayDate=new Date(Date.UTC(currentYear,new Date().getMonth(),new Date().getDate()));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/Scheduler/GraphicalSchedulerView.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Image","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserTimes","callService","crudMaster","validateEsignCredential","updateStore","getGrapicalSchedulerViewDetail","getSchedulerComboService","changeGrapicalScheduleTypeFilter","filterColumnData","DEFAULT_RETURN","showEsign","getControlMap","constructOptionList","validatePhoneNumber","formatInputDate","create_UUID","validateEmail","validateLoginId","formatDate","onDropAttachFileList","deleteAttachmentDropZone","transactionStatus","ListMaster","SlideOutModal","BreadcrumbComponent","Affix","ReadOnlyText","ContentPanel","Esign","ConfirmMessage","ReactTooltip","GrapicalScheduleTypeFilter","Scheduler","TimelineView","DayView","WeekView","MonthView","mapStateToProps","state","Login","GraphicalSchedulerView","props","handleDateChange","event","setState","displayDate","value","onFilterSubmit","nfilterScheduleType","label","inputParam","inputData","sscheduletype","userinfo","userInfo","classUrl","methodUrl","masterData","filterScheduleType","warn","intl","formatMessage","id","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onComboChangeevent","comboData","fieldName","searchRef","current","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","reloadData","displayName","isClearSearch","masterStatus","error","selectedScheduler","undefined","screenName","userLogged","userRoleControlRights","controlMap","Map","Date","UTC","currentYear","timezone","SelectedSchedulerView","createRef","confirmMessage","schedulerFieldList","searchFieldList","userStatusCSS","ntransactionstatus","APPROVED","activeIconCSS","sweek","smonth","addId","has","get","ncontrolcode","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","addParam","primaryKeyName","userImgPath","settings","UserImagePath","signImgPath","SignImagePath","breadCrumbData","filterData","length","searchedData","SchedulerView","scheduler","openFilter","closeFilter","showFilter","stitle","add","remove","drag","resize","select","edit","previousProps","isComponentUpdated","nformcode","Object","values","map","item","push","filterGrapicalScheduleType","scheduleTypeMap","generateBreadCrumData","tempdate","jsondata","dataItem","start","parseAdjust","startTimezone","end","endTimezone","isAllDay","title","description","recurrenceRule","recurrenceId","recurrenceID","recurrenceExceptions","recurrenceException","roomId","roomID","ownerID","TaskID","personId","modalName","Component","getFullYear","eventDate","date","setFullYear","getMonth","getDate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Image } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt,faThumbsUp, faUserTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getGrapicalSchedulerViewDetail,\r\n    getSchedulerComboService, changeGrapicalScheduleTypeFilter,filterColumnData\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap,constructOptionList, validatePhoneNumber, formatInputDate,create_UUID, validateEmail, validateLoginId, formatDate, onDropAttachFileList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\n//import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n// import 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\n\r\n//import AddScheduler from './AddScheduler';\r\n\r\nimport Esign from '../audittrail/Esign';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport GrapicalScheduleTypeFilter from './GrapicalScheduleTypeFilter';\r\nimport { Scheduler, TimelineView, DayView,WeekView, MonthView } from '@progress/kendo-react-scheduler';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass GraphicalSchedulerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            selectedScheduler: undefined,\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            displayDate:new Date(Date.UTC(currentYear,10 , 27)),\r\n            timezone:\"Etc/UTC\",\r\n            data: this.props.Login.masterData.SelectedSchedulerView!==undefined?this.props.Login.masterData.SelectedSchedulerView:\"\"\r\n        };\r\n        this.searchRef = React.createRef();\r\n       \r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.schedulerFieldList = ['stitle', 'sscheduletype'];\r\n\r\n        this.searchFieldList = ['stitle', 'sscheduletype'];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleDateChange = (event) => {\r\n        this.setState({\r\n            displayDate: event.value,\r\n        });\r\n      };\r\n\r\n    render() {\r\n\r\n        //let userStatusCSS = \"outline-success\"//\"outline-secondary\";\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.SelectedSchedulerView && this.props.Login.masterData.SelectedSchedulerView.ntransactionstatus === transactionStatus.APPROVED) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        let activeIconCSS = \"fa fa-check\"\r\n        let sweek=\"\";\r\n        let smonth=\"\";\r\n\r\n         const addId = this.state.controlMap.has(\"AddScheduler\") && this.state.controlMap.get(\"AddScheduler\").ncontrolcode;\r\n        // const editId = this.state.controlMap.has(\"EditScheduler\") && this.state.controlMap.get(\"EditScheduler\").ncontrolcode;\r\n        // const deleteId = this.state.controlMap.has(\"DeleteScheduler\") && this.state.controlMap.get(\"DeleteScheduler\").ncontrolcode;\r\n        // const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode;\r\n        \r\n\r\n        const filterParam = {\r\n            inputListName: \"Scheduler\", selectedObject: \"SelectedSchedulerView\", primaryKeyField: \"nschedulecode\",\r\n            fetchUrl: \"graphicalschedulerview/getGraphicalSchedulerView\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList,\r\n            sscheduletype:this.state.nfilterScheduleType ? this.state.nfilterScheduleType.label:null\r\n        };\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_SCHEDULER\", operation: \"create\", primaryKeyName: \"nschedulecode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId,\r\n            nfilterScheduleType:this.state.nfilterScheduleType\r\n        }\r\n\r\n        // const editParam = {\r\n        //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\r\n        //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n        //     ncontrolcode: editId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\r\n        // };\r\n\r\n        // const approveParam = {\r\n        //     screenName: \"IDS_SCHEDULER\", operation: \"update\", primaryKeyName: \"nschedulecode\",\r\n        //     masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n        //     ncontrolcode: approveId, inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\"\r\n        // };\r\n\r\n        \r\n        const userImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.UserImagePath;\r\n        const signImgPath = this.props.Login.settings && this.props.Login.settings[6] + this.props.Login.masterData.SignImagePath;\r\n\r\n       \r\n\r\n        // const mandatoryFields = [{\"idsName\": \"IDS_SCHEDULERNAME\", \"dataField\": \"sschedulename\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        //                         //{ \"idsName\": \"IDS_SCHEDULERTYPE\", \"dataField\": \"sscheduletype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCE\", \"dataField\": \"noccurencenooftimes\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCEDAYWISE\", \"dataField\": \"noccurencedaywiseinterval\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_OCCURRENCEHOURWISE\", \"dataField\": \"soccurencehourwiseinterval\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        //                         //{ \"idsName\": \"IDS_MONTHLYOCCURRENCETYPE\", \"dataField\": \"nmonthlyoccurrencetype\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        //                         { \"idsName\": \"IDS_STARTDATE\", \"dataField\": \"dstartdate\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         { \"idsName\": \"IDS_STARTTIME\", \"dataField\": \"dstarttime\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //                         ];\r\n                                const breadCrumbData = this.state.filterData || [];\r\n        return (<>\r\n            {/* Start of get display*/}\r\n            \r\n            <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n            {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                <Row noGutters>\r\n                    <Col md={4}>\r\n                        {/* <Row noGutters>\r\n                            <Col md={12}> */}\r\n                            {/* <div className=\"list-fixed-wrap\"> */}\r\n                                <ListMaster\r\n                                    screenName={this.props.intl.formatMessage({ id: \"IDS_GRAPHICALSCHDULERVIEW\" })}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SchedulerView}\r\n                                    getMasterDetail={(scheduler) => this.props.getGrapicalSchedulerViewDetail(scheduler,this.props.Login.userInfo, this.props.Login.masterData,this.state.nfilterScheduleType.label)}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedSchedulerView}\r\n                                    primaryKeyField=\"nschedulecode\"\r\n                                    mainField=\"stitle\"\r\n                                    firstField=\"sscheduletype\"\r\n                                    //secondField=\"nstatus\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    filterParam={filterParam}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    addId={addId}\r\n                                    searchRef={this.searchRef}\r\n                                    reloadData={this.reloadData}\r\n                                    openModal={() => this.props.getSchedulerComboService(addParam)}\r\n                                    isMultiSelecct={false}\r\n                                    hidePaging={false}\r\n                                    isClearSearch={this.props.Login.isClearSearch}\r\n                                    openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <GrapicalScheduleTypeFilter\r\n                                            filterScheduleType={this.state.filterScheduleType || []}\r\n                                                nfilterScheduleType={this.state.nfilterScheduleType || {}}\r\n                                                onComboChange={this.onComboChangeevent}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                />\r\n                            {/* </div>\r\n                        </Col></Row> */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        {/* <Row>\r\n                            <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.SchedulerView && this.props.Login.masterData.SchedulerView.length > 0 && this.props.Login.masterData.SelectedSchedulerView ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    \r\n                                                    {this.props.Login.masterData.SelectedSchedulerView &&\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.stitle !== undefined ?\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.stitle : \"\"}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                {activeIconCSS !== \"\" ? <i class=\"fas fa-check \"></i> : \"\"}\r\n                                                                {/* {this.props.Login.masterData.SelectedScheduler.nstatus === 1 ? \"DRAFT\": \"Approved\"} */}\r\n                                                                {this.props.Login.masterData.SelectedSchedulerView &&\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ?\r\n                                                                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype : \"\"}\r\n                                                                {\" \"}\r\n                                                                {/*{activeIconCSS}  <FormattedMessage id= {this.props.Login.masterData.SelectedUser.sactivestatus}/> */}\r\n\r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        {/* <div className=\"d-inline\">\r\n                                                            <Nav.Link name=\"editScheduler\" hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.props.getSchedulerComboService(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteScheduler\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                               \r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"ApproveScheduler\" hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.onApproveClick(\"Scheduler\", \"approve\", \"nschedulecode\", this.props.Login.masterData.SelectedScheduler.nschedulecode, approveId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </Nav.Link>\r\n                                                            \r\n                                                            \r\n                                                        </div> */}\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body className=\"form-static-wrap\">\r\n                                                {/* <Card.Text> */}\r\n\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormGroup>\r\n                                                            {/* <FormLabel><FormattedMessage id=\"IDS_SCHEDULERTYPE\" message=\"Scheduler Type\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\"?\"One Time\":\r\n                                                            this.props.Login.masterData.SelectedScheduler.sscheduletype===\"D\"?\"Daily\":\r\n                                                            this.props.Login.masterData.SelectedScheduler.sscheduletype===\"W\"?\"Weekly\":\"Monthly\"}</ReadOnlyText> */}\r\n\r\n{/* onDataChange={this.handleDataChange} */}\r\n<Scheduler data={this.state.data} date={this.state.displayDate}\r\n              onDateChange={this.handleDateChange} timezone={this.state.timezone}\r\n                 editable={{\r\n      add: true,\r\n      remove: true,\r\n      drag: true,\r\n      resize: true,\r\n      \r\n      select: true,\r\n      edit: true\r\n     }} >\r\n          {/* <TimelineView /> defaultDate={this.state.displayDate}> */}\r\n          <DayView numberOfDays={3} />\r\n          <WeekView />\r\n          <MonthView />\r\n        </Scheduler>;\r\n\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    \r\n\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_STARTDATEANDTIME\" message=\"Start Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstartdate !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstartdate.substring(0,10):\"\"}\r\n                                                                {\"  \"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime.substring(16,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_STARTTIME\" message=\"Start Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sstarttime.substring(19,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype !== \"O\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_ENDDATEANDTIME\" message=\"End Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.senddate !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.senddate.substring(0,10):\"\"}\r\n                                                                {\" \"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime.substring(16,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> :\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype !== \"O\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_ENDTIME\" message=\"End Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedScheduler && \r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime !== null ?\r\n                                                                this.props.Login.masterData.SelectedScheduler.sendtime.substring(19,11):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> :\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCE\" message=\"Occurrence\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noccurencenooftimes!==0?\r\n                                                                this.props.Login.masterData.SelectedScheduler.noccurencenooftimes:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCEDAYWISE\" message=\"Occurrence Day Wise\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noccurencedaywiseinterval!==0?\r\n                                                                this.props.Login.masterData.SelectedScheduler.noccurencedaywiseinterval:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"D\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCCURRENCEHOURWISE\" message=\"Occurrence Hour Wise\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.soccurencehourwiseinterval!==\"null \"?\r\n                                                                this.props.Login.masterData.SelectedScheduler.soccurencehourwiseinterval:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_WEEKLYSCHEDULE\" message=\"Weekly Schedule\" /></FormLabel>\r\n                                                            \r\n                                                            <ReadOnlyText>\r\n                                                           \r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsunday !== 0 ? sweek=this.props.intl.formatMessage({ id:\"IDS_SUNDAY\"}):\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nmonday !==0 ? sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_MONDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_MONDAY\"}) : \"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.ntuesday !== 0?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_TUESDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_TUESDAY\"}) :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nwednesday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_WEDNESDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_WEDNESDAY\"})   :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nthursday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_THURSDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_THURSDAY\"}) : \"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nfriday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_FRIDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_FRIDAY\"})  :\"\"}\r\n                                                            \r\n                                                            {this.props.Login.masterData.SelectedScheduler.nsaturday !==0 ?sweek.trim()==\"\"?sweek= this.props.intl.formatMessage({ id:\"IDS_SATURDAY\"}):sweek=\", \"+this.props.intl.formatMessage({ id:\"IDS_SATURDAY\"}) :\"\"}\r\n                                                            \r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONDAY\" message=\"Monday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmonday !==0 ? \"Active\" : \"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TUESDAY\" message=\"Tuesday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ntuesday !== 0? \"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_WEDNESDAY\" message=\"Wednesday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nwednesday !==0 ? \"Active\" :\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_THURSDAY\" message=\"Thursday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nthursday !==0 ? \"Active\": \"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FRIDAY\" message=\"Friday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfriday !==0 ? \"Active\" :\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"W\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_SATURDAY\" message=\"Saturday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsaturday !==0 ? \"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONTHLYOCCURRENCETYPE\" message=\"Monthly Occurrence Type\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.sscheduletype===\"M\"?\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype === 1?\"Exact Day\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===2?\"1st Week\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===3?\"2nd Week\":\r\n                                                                this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype===4?\"3rd Week\":\"4th week\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" &&\r\n                                                    this.props.Login.masterData.SelectedScheduler.nmonthlyoccurrencetype === 1 ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_EXACTDAY\" message=\"Exactday\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nexactday !==0?this.props.Login.masterData.SelectedScheduler.nexactday:\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MONTHLYSCHEDULE\" message=\"Monthly Schedule\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njan !==0 ? smonth= this.props.intl.formatMessage({ id:\"IDS_JANUARY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfeb!==0?smonth.trim()===\"\"?smonth= this.props.intl.formatMessage({ id:\"IDS_FEBRUARY\"}):smonth=\", \"+ this.props.intl.formatMessage({ id:\"IDS_FEBRUARY\"}) :\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmar!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_MARCH\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_MARCH\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.napr!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_APRIL\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_APRIL\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmay!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_MAY\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_MAY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njun!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_JUNE\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_JUNE\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njul!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_JULY\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_JULY\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.naug!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_AUGUST\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_AUGUST\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsep!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_SEPTEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_SEPTEMBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noct!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_OCTOBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_OCTOBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nnov!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_NOVEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_NOVEMBER\"}):\"\"}\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ndec!==0?smonth.trim()===\"\"?smonth=this.props.intl.formatMessage({ id:\"IDS_DECEMBER\"}):smonth=\", \"+this.props.intl.formatMessage({ id:\"IDS_DECEMBER\"}):\"\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FEBRUARY\" message=\"February\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nfeb!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MARCH\" message=\"March\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmar!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_APRIL\" message=\"April\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.napr!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_MAY\" message=\"May\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nmay!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_JUNE\" message=\"June\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njun!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_JULY\" message=\"July\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.njul!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_AUGUST\" message=\"August\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.naug!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_SEPTEMBER\" message=\"September\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nsep!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_OCTOBER\" message=\"October\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.noct!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_NOVEMBER\" message=\"November\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.nnov!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"}\r\n                                                    {this.props.Login.masterData.SelectedScheduler.sscheduletype === \"M\" ?\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_DECEMBER\" message=\"December\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedScheduler.ndec!==0?\"Active\":\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>:\"\"} */}\r\n                                                    {/* <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_REMARKS\" message=\"Remarks\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                \r\n                                                                    {this.props.Login.masterData.SelectedScheduler && \r\n                                                                    this.props.Login.masterData.SelectedScheduler.sremarks.trim()!==\"null\"?\r\n                                                                    this.props.Login.masterData.SelectedScheduler.sremarks.trim():\"-\"}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                    \r\n\r\n                                                    \r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <div className=\"horizontal-line\"></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                \r\n\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    {/* </Col>\r\n                </Row> */}\r\n            </div>\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for Scheduler Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {/* {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : \r\n                    <AddScheduler\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            onNumericInputOnChange={this.onNumericInputOnChange}\r\n                            handleDateChange={this.handleDateChange}\r\n                            schedulerTypeList={this.props.Login.schedulerTypeList || []}\r\n                            recurringList={this.props.Login.recurringList || []}\r\n                            monthlyTypeList={this.props.Login.monthlyTypeList || []}\r\n                            selectedScheduler={this.props.Login.masterData.SelectedScheduler || {}}\r\n                            operation={this.props.Login.operation}\r\n                            userLogged={this.props.Login.userLogged}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            actionType={this.state.actionType}\r\n                            userInfo={this.props.Login.userInfo}\r\n                        \r\n                        />}\r\n                /> : \"\"} */}\r\n            {/* End of Modal Sideout for Scheduler Creation */}\r\n        </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n        let nfilterScheduleType = this.state.nfilterScheduleType || {};\r\n        let filterScheduleType = this.state.filterScheduleType || {};\r\n\r\n        if (this.props.Login.masterData.filterGrapicalScheduleType !== previousProps.Login.masterData.filterGrapicalScheduleType) {\r\n            const scheduleTypeMap = constructOptionList(this.props.Login.masterData.filterGrapicalScheduleType || [], \"nschedulecode\",\r\n                \"sscheduletype\", 'nschedulecode', 'ascending', false);\r\n                filterScheduleType = scheduleTypeMap.get(\"OptionList\");\r\n        if(this.state.nfilterScheduleType===null || this.state.nfilterScheduleType===undefined)\r\n        {\r\n                if (scheduleTypeMap.get(\"DefaultValue\")) {\r\n                nfilterScheduleType = scheduleTypeMap.get(\"DefaultValue\");\r\n            } else if (filterScheduleType && filterScheduleType.length > 0) {\r\n                nfilterScheduleType = filterScheduleType[0];\r\n            }\r\n        }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterScheduleType !== previousProps.Login.masterData.nfilterScheduleType) {\r\n            nfilterScheduleType = this.props.Login.masterData.nfilterScheduleType;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterScheduleType, filterScheduleType });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            // if (this.props.Login.masterData.SelectedScheduler !== undefined) {\r\n            //     if(this.props.Login.masterData.SelectedScheduler.sscheduletype===\"O\")\r\n            //     {\r\n            //         nfilterScheduleType = filterScheduleType[0];\r\n            //     }\r\n            //     else\r\n            //     {\r\n            //         nfilterScheduleType = filterScheduleType[1];\r\n            //     }\r\n                \r\n            //     this.setState({ filterData,nfilterScheduleType });\r\n            // }\r\n            //else\r\n            //{\r\n            this.setState({ filterData });\r\n            //}\r\n        }\r\n\r\n\r\n        let data=[];\r\n        let tempdate;\r\n        if(this.props.Login.masterData.SelectedSchedulerView !== null &&\r\n            this.props.Login.masterData.SelectedSchedulerView!==undefined)\r\n        {\r\n          if (this.props.Login.masterData.SelectedSchedulerView !== previousProps.Login.masterData.SelectedSchedulerView) {\r\n        //for(let i =0;i<this.props.Login.masterData.selectedScheduler.length;i++)\r\n        //{\r\n          data.push(this.props.Login.masterData.SelectedSchedulerView.jsondata);\r\n        //}\r\n        \r\n      \r\n    \r\n       data = data.map(dataItem => ({\r\n        id: dataItem.id,\r\n        start: parseAdjust(dataItem.start),\r\n        tempdate:parseAdjust(dataItem.start),\r\n        startTimezone: dataItem.startTimezone,\r\n        end: parseAdjust(dataItem.end),\r\n        endTimezone: dataItem.endTimezone,\r\n        isAllDay: dataItem.isAllDay,\r\n        title: dataItem.title,\r\n        description: dataItem.description,\r\n        recurrenceRule: dataItem.recurrenceRule,\r\n        recurrenceId: dataItem.recurrenceID,\r\n        recurrenceExceptions: dataItem.recurrenceException,\r\n        roomId: dataItem.roomID,\r\n        ownerID: dataItem.TaskID,\r\n        personId: dataItem.TaskID\r\n      }))\r\n      //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),data[0].start.getMonth() , data[0].start.getDate()));\r\n      //let tempdate = new Date(Date.UTC(data[0].start.getFullYear(),10 , 27));\r\n      //tempdate=parseAdjust(tempdate);\r\n    //   data[0].tempdate=data[0].tempdate.replace(\"T\",\"\");\r\n    //   data[0].tempdate=data[0].tempdate.replace(\"Z\",\"\");\r\n    //   data[0].tempdate=parseAdjust(data[0].tempdate);\r\n      this.setState({data,displayDate:data[0].tempdate});\r\n        }\r\n      }\r\n\r\n    }\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterScheduleType.label) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    sscheduletype: this.state.nfilterScheduleType.label,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterScheduleType: this.state.nfilterScheduleType\r\n                },\r\n                classUrl: \"graphicalschedulerview\",\r\n                methodUrl: \"GraphicalSchedulerByScheduleType\"\r\n            }\r\n            this.props.changeGrapicalScheduleTypeFilter(inputParam, this.props.Login.masterData.filterScheduleType);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n    \r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData ) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SCHEDULERTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedSchedulerView && \r\n                    this.props.Login.masterData.SelectedSchedulerView.sscheduletype !== undefined ? this.props.Login.masterData.SelectedSchedulerView.sscheduletype: \"NA\"\r\n\r\n                },\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    // ConfirmDelete = (deleteId) => {\r\n    //     this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n    //         this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n    //         () => this.deleteScheduler(\"Scheduler\", this.props.Login.masterData.SelectedScheduler, \"delete\", deleteId));\r\n    // }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" ) {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n              selectedRecord['esigncomments'] = \"\"\r\n              selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    \r\n\r\n    // onComboChange = (comboData, fieldName) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[fieldName] = comboData;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onComboChangeevent = (comboData, fieldName) => {\r\n        let nfilterScheduleType = this.state.nfilterScheduleType || {}\r\n        nfilterScheduleType = comboData;\r\n        this.searchRef.current.value = \"\";\r\n        this.setState({ nfilterScheduleType })\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        // selectedRecord[fieldName] = comboData;\r\n        // this.setState({ selectedRecord });\r\n    }\r\n\r\n    // onNumericInputOnChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    // onInputOnChange = (event) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    //     if (event.target.type === 'checkbox') {\r\n    //         if (event.target.name === \"ntransactionstatus\")\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n    //         else if (event.target.name === \"nlockmode\")\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n    //         else\r\n    //             selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.ALL;\r\n\r\n    //     }\r\n    //     else {\r\n    //         if (event.target.name === \"noccurencenooftimes\" || event.target.name === \"noccurencedaywiseinterval\" || event.target.name ===  \"nexactday\") {\r\n    //             if (event.target.value !== \"\") {\r\n    //                 event.target.value = validatePhoneNumber(event.target.value);\r\n    //                 selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n    //             }\r\n    //             else {\r\n    //                 selectedRecord[event.target.name] = event.target.value;\r\n    //             }\r\n    //         } else if (event.target.name === \"sloginid\") {\r\n    //             if (event.target.value !== \"\") {\r\n    //                 if (validateLoginId(event.target.value)) {\r\n    //                     selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n    //                 }\r\n    //             }\r\n    //             else {\r\n    //                 selectedRecord[event.target.name] = event.target.value;\r\n    //             }\r\n    //         } else {\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //         }\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    \r\n\r\n    // handleDateChange = (dateName, dateValue,sdatename) => {\r\n    //     const { selectedRecord } = this.state;\r\n    //     selectedRecord[dateName] = dateValue;\r\n    //     selectedRecord[sdatename] = dateValue;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    \r\n//     onSaveClick = (saveType, formRef) => {\r\n\r\n//         let scheduleData = {};\r\n//         scheduleData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n//         if(this.state.selectedRecord[\"nschedulertypecode\"]===undefined ||\r\n//         this.state.selectedRecord[\"nschedulertypecode\"]===null)\r\n//         {\r\n//             toast.info(\"Please select SchedulerType\");\r\n//             return;\r\n//         }\r\n\r\n//         if(this.state.selectedRecord[\"nschedulertypecode\"].value!==1)\r\n//         {\r\n            \r\n//             if(this.state.selectedRecord[\"denddate\"]===undefined || \r\n//             this.state.selectedRecord[\"denddate\"]===null)\r\n//             {\r\n//                 toast.info(\"Please select END Date\");\r\n//                 return;\r\n//             }\r\n//             if(this.state.selectedRecord[\"dendtime\"]===undefined || \r\n//             this.state.selectedRecord[\"dendtime\"]===null)\r\n//             {\r\n//                 toast.info(\"Please select END Time\");\r\n//                 return;\r\n//             }\r\n//             if(this.state.selectedRecord[\"denddate\"]!==undefined && this.state.selectedRecord[\"dstartdate\"]!==undefined)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"denddate\"] < this.state.selectedRecord[\"dstartdate\"])\r\n//                 {\r\n//                 toast.info(\"Please select END Date Greater than Start Date\");\r\n//                 return;\r\n//                 }\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntyperecurringcode\"].value===1)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"noccurencenooftimes\"]===undefined ||\r\n//                 this.state.selectedRecord[\"noccurencenooftimes\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please enter Occurrence value\");\r\n//                     return;\r\n//                 }\r\n//                 if(this.state.selectedRecord[\"soccurencehourwiseinterval\"]===undefined ||\r\n//                 this.state.selectedRecord[\"soccurencehourwiseinterval\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please select Occurrence Hour wise\");\r\n//                     return;\r\n//                 }\r\n//                 if(this.state.selectedRecord[\"noccurencedaywiseinterval\"]===undefined ||\r\n//                 this.state.selectedRecord[\"noccurencedaywiseinterval\"]===null)\r\n//                 {\r\n//                     toast.info(\"Please enter Occurrence Day wise\");\r\n//                     return;\r\n//                 }\r\n\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntyperecurringcode\"].value===3)\r\n//             {\r\n//                 if(this.state.selectedRecord[\"nrecurringperiodcode\"]===undefined)\r\n//                 {\r\n//                     toast.info(\"Please select Monthly Occurrence type\");\r\n//                     return;\r\n//                 }\r\n\r\n//                 if(this.state.selectedRecord[\"nrecurringperiodcode\"]!==undefined && \r\n//                 this.state.selectedRecord[\"nrecurringperiodcode\"].value === 1 && \r\n//                 this.state.selectedRecord[\"nexactday\"]===undefined)\r\n//                 {\r\n//                     toast.info(\"Please enter Exact Day\");\r\n//                     return;\r\n//                 }\r\n//             }\r\n//         }\r\n\r\n//         let postParam = undefined;\r\n\r\n        \r\n//             //add               \r\n//             scheduleData[\"schedulemaster\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n//             this.schedulerFieldList.map(item => {\r\n//                 return scheduleData[\"schedulemaster\"][item] = this.state.selectedRecord[item]\r\n//             });\r\n//             if (this.props.Login.operation === \"update\") {\r\n//             scheduleData[\"schedulemaster\"][\"nschedulecode\"]= this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"];\r\n//             }\r\n//             if(this.props.Login.operation === \"create\" && \r\n//             this.state.selectedRecord[\"ntyperecurringcode\"].value === 2)\r\n//             {\r\n//             if(this.state.selectedRecord[\"nsunday\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nsunday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmonday\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmonday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"ntuesday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"ntuesday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nwednesday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nwednesday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nthursday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nthursday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nfriday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nfriday\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nsaturday\"]===undefined)\r\n//             {\r\n//                 this.state.selectedRecord[\"nsaturday\"]=1;\r\n//             }\r\n//         }\r\n\r\n//         if(this.props.Login.operation === \"create\" && \r\n//         this.state.selectedRecord[\"ntyperecurringcode\"].value === 3)\r\n//         {\r\n//             if(this.state.selectedRecord[\"njan\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njan\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nfeb\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nfeb\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmar\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmar\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"napr\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"napr\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nmay\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nmay\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"njun\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njun\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"njul\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"njul\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"naug\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"naug\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nsep\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nsep\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"noct\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"noct\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"nnov\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"nnov\"]=1;\r\n//             }\r\n//             if(this.state.selectedRecord[\"ndec\"]===undefined)\r\n//             {\r\n//                this.state.selectedRecord[\"ndec\"]=1;\r\n//             }\r\n//         }\r\n\r\n//             scheduleData[\"schedulemasterweekly\"] = {\r\n//                 \"nsunday\": this.state.selectedRecord[\"nsunday\"] ? this.state.selectedRecord[\"nsunday\"] : 0,\r\n//                 //\"ndefaultrole\": transactionStatus.YES, \"ntransactionstatus\": transactionStatus.ACTIVE\r\n//                 \"nmonday\": this.state.selectedRecord[\"nmonday\"] ? this.state.selectedRecord[\"nmonday\"] : 0,\r\n//                 \"ntuesday\": this.state.selectedRecord[\"ntuesday\"] ? this.state.selectedRecord[\"ntuesday\"] : 0,\r\n//                 \"nwednesday\": this.state.selectedRecord[\"nwednesday\"] ? this.state.selectedRecord[\"nwednesday\"] : 0,\r\n//                 \"nthursday\": this.state.selectedRecord[\"nthursday\"] ? this.state.selectedRecord[\"nthursday\"] : 0,\r\n//                 \"nfriday\": this.state.selectedRecord[\"nfriday\"] ? this.state.selectedRecord[\"nfriday\"] : 0,\r\n//                 \"nsaturday\": this.state.selectedRecord[\"nsaturday\"] ? this.state.selectedRecord[\"nsaturday\"] : 0,\r\n//             }\r\n            \r\n//             scheduleData[\"schedulemastermonthly\"] = {\r\n//                 \"nexactday\": this.state.selectedRecord[\"nexactday\"] ? this.state.selectedRecord[\"nexactday\"] : 0,\r\n//                 \"nmonthlyoccurrencetype\": this.state.selectedRecord[\"nrecurringperiodcode\"] ? this.state.selectedRecord[\"nrecurringperiodcode\"].value : 0,\r\n//                 \"njan\": this.state.selectedRecord[\"njan\"] ? this.state.selectedRecord[\"njan\"] : 0,\r\n//                 \"nfeb\": this.state.selectedRecord[\"nfeb\"] ? this.state.selectedRecord[\"nfeb\"] : 0,\r\n//                 \"nmar\": this.state.selectedRecord[\"nmar\"] ? this.state.selectedRecord[\"nmar\"] : 0,\r\n//                 \"napr\": this.state.selectedRecord[\"napr\"] ? this.state.selectedRecord[\"napr\"] : 0,\r\n//                 \"nmay\": this.state.selectedRecord[\"nmay\"] ? this.state.selectedRecord[\"nmay\"] : 0,\r\n//                 \"njun\": this.state.selectedRecord[\"njun\"] ? this.state.selectedRecord[\"njun\"] : 0,\r\n//                 \"njul\": this.state.selectedRecord[\"njul\"] ? this.state.selectedRecord[\"njul\"] : 0,\r\n//                 \"naug\": this.state.selectedRecord[\"naug\"] ? this.state.selectedRecord[\"naug\"] : 0,\r\n//                 \"nsep\": this.state.selectedRecord[\"nsep\"] ? this.state.selectedRecord[\"nsep\"] : 0,\r\n//                 \"noct\": this.state.selectedRecord[\"noct\"] ? this.state.selectedRecord[\"noct\"] : 0,\r\n//                 \"nnov\": this.state.selectedRecord[\"nnov\"] ? this.state.selectedRecord[\"nnov\"] : 0,\r\n//                 \"ndec\": this.state.selectedRecord[\"ndec\"] ? this.state.selectedRecord[\"ndec\"] : 0,\r\n//             }\r\n\r\n            \r\n\r\n        \r\n// let date;\r\n// let time;\r\n//         scheduleData[\"schedulemaster\"][\"sscheduletype\"] = this.state.selectedRecord[\"nschedulertypecode\"] ? this.state.selectedRecord[\"nschedulertypecode\"].value === 1 ? 'O' : this.state.selectedRecord[\"ntyperecurringcode\"].value === 1 ? 'D' : this.state.selectedRecord[\"ntyperecurringcode\"].value === 2 ? 'W' :  'M' : 'O';\r\n//         if (scheduleData[\"schedulemaster\"][\"dstartdate\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dstartdate\"] !== null && scheduleData[\"schedulemaster\"][\"dstartdate\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dstartdate\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dstartdate\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dstartdate\"] = formatInputDate(this.state.selectedRecord[\"sstartdate\"]);\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"denddate\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"denddate\"] !== null && scheduleData[\"schedulemaster\"][\"denddate\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"denddate\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"denddate\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"denddate\"] = formatInputDate(this.state.selectedRecord[\"senddate\"]);\r\n//         }\r\n//         else\r\n//         {\r\n//             scheduleData[\"schedulemaster\"][\"denddate\"] = scheduleData[\"schedulemaster\"][\"dstartdate\"];\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"dstarttime\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dstarttime\"] !== null && scheduleData[\"schedulemaster\"][\"dstarttime\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dstarttime\"]);\r\n//                 date=formatInputDate(this.state.selectedRecord[\"sstartdate\"]);\r\n//                 date=date.substring(0,10);\r\n//                 time=formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 time=time.substring(19,11);\r\n//                 date=date+\"T\"+time+\"Z\";\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dstarttime\"] = date;//formatInputDate(date);\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"dendtime\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"dendtime\"] !== null && scheduleData[\"schedulemaster\"][\"dendtime\"] !== \"\") {\r\n//                 //scheduleData[\"schedulemaster\"][\"dendtime\"] = formatInputDate(scheduleData[\"schedulemaster\"][\"dendtime\"]);\r\n//                 //scheduleData[\"schedulemaster\"][\"dendtime\"] = formatInputDate(this.state.selectedRecord[\"sendtime\"]);\r\n//                 date=formatInputDate(this.state.selectedRecord[\"senddate\"]);\r\n//                 date=date.substring(0,10);\r\n//                 time=formatInputDate(this.state.selectedRecord[\"sendtime\"]);\r\n//                 time=time.substring(19,11);\r\n//                 date=date+\"T\"+time+\"Z\";\r\n//                 //scheduleData[\"schedulemaster\"][\"dstarttime\"] = formatInputDate(this.state.selectedRecord[\"sstarttime\"]);\r\n//                 scheduleData[\"schedulemaster\"][\"dendtime\"] = date;\r\n//         }\r\n//         else\r\n//         {\r\n//             scheduleData[\"schedulemaster\"][\"dendtime\"] = scheduleData[\"schedulemaster\"][\"dstarttime\"];\r\n//         }\r\n//         if (scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== undefined\r\n//             && scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== null && scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== \"\" &&\r\n//             scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] !== \"null \") {\r\n//                 let shour= formatInputDate(scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"]);\r\n//                 //scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] =shour.substring(shour.indexOf('T'),5);\r\n//                 scheduleData[\"schedulemaster\"][\"soccurencehourwiseinterval\"] =shour.substring(16,11);\r\n//         }\r\n        \r\n\r\n//         // const controlMaster = [{ncontrolcode:517, scontrolname:'UserImage', ssubfolder:\"users\"},\r\n//         //                         {ncontrolcode:518, scontrolname:'SignImage', ssubfolder:\"\"}]\r\n\r\n        \r\n\r\n//         const inputParam = {\r\n//             classUrl: this.props.Login.inputParam.classUrl,\r\n//             methodUrl: \"Scheduler\",\r\n//             inputData: {scheduleData, userinfo: this.props.Login.userInfo },\r\n//             //formData: formData,\r\n//             //isFileupload: true,\r\n//             operation: this.props.Login.operation,\r\n//             saveType, formRef, postParam, searchRef: this.searchRef,\r\n//             isClearSearch: this.props.Login.isClearSearch\r\n//         }\r\n//         const masterData = this.props.Login.masterData;\r\n\r\n//         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n//             const updateInfo = {\r\n//                 typeName: DEFAULT_RETURN,\r\n//                 data: {\r\n//                     loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n//                 }\r\n//             }\r\n//             this.props.updateStore(updateInfo);\r\n//         }\r\n//         else {\r\n//             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n//         }\r\n\r\n//     }\r\n\r\n    \r\n\r\n    // deleteUserFile = (event, file, fieldName) => {\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n    //     this.setState({\r\n    //         selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n    //     });\r\n    // }\r\n\r\n    \r\n\r\n    // deleteScheduler = (methodUrl, selectedScheduler, operation, ncontrolCode) => {\r\n    //     if (this.props.Login.masterData.SelectedScheduler.ntransactionstatus === transactionStatus.DRAFT) {\r\n    //     {\r\n\r\n    //         const postParam = {\r\n    //             inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\",\r\n    //             primaryKeyField: \"nschedulecde\",\r\n    //             primaryKeyValue: selectedScheduler.nschedulecode,\r\n    //             fetchUrl: \"scheduler/getScheduler\",\r\n    //             fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    //         }\r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl, postParam,\r\n    //             inputData: {\r\n    //                 \"userinfo\": this.props.Login.userInfo,\r\n    //                 \"scheduler\": selectedScheduler\r\n    //             },\r\n    //             operation,\r\n    //             isClearSearch: this.props.Login.isClearSearch\r\n    //         }\r\n\r\n    //         const masterData = this.props.Login.masterData;\r\n\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData },\r\n    //                     openModal: true, screenName: \"IDS_SCHEDULER\", operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //         }\r\n    //     }\r\n    // }\r\n    // else\r\n    // {\r\n    //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n    // }\r\n    // }\r\n\r\n    // onApproveClick = (screenName, operation, primaryKeyName, primaryKeyValue, ncontrolCode) => {\r\n    //     if (this.props.Login.masterData.SelectedScheduler.ntransactionstatus === transactionStatus.DRAFT) {\r\n    //         const approveId = this.state.controlMap.has(\"ApproveScheduler\") && this.state.controlMap.get(\"ApproveScheduler\").ncontrolcode\r\n    //         let inputData = [];\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    //         //add               \r\n    //         let postParam = undefined;\r\n    //         inputData[\"scheduler\"] = { \"nschedulecode\": this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"] ? this.props.Login.masterData.SelectedScheduler[\"nschedulecode\"].Value : \"\" };\r\n    //         inputData[\"scheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n    //         postParam = { inputListName: \"Scheduler\", selectedObject: \"SelectedScheduler\", primaryKeyField: \"nschedulecode\" };\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"Scheduler\",\r\n    //             inputData: inputData,\r\n    //             operation: \"approve\", postParam\r\n    //         }\r\n    //         let saveType;\r\n\r\n    //         const masterData = this.props.Login.masterData;\r\n\r\n    //         const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\r\n    //         if (esignNeeded) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    //         }\r\n            \r\n    //     }\r\n    //     else {\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n    //     }\r\n    // }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"graphicalschedulerview\",\r\n            methodUrl: \"GraphicalSchedulerView\",\r\n            displayName: \"IDS_GRAPHICALSCHEDULERVIEW\",\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch,\r\n            \r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getGrapicalSchedulerViewDetail, getSchedulerComboService,changeGrapicalScheduleTypeFilter, filterColumnData\r\n})(injectIntl(GraphicalSchedulerView));\r\n\r\nexport const currentYear = new Date().getFullYear();\r\nexport const parseAdjust = eventDate => {\r\n  const date = new Date(eventDate);\r\n  date.setFullYear(currentYear);\r\n  return date;\r\n};\r\nexport const displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\r\n"]},"metadata":{},"sourceType":"module"}