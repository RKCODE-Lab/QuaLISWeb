{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\CustomComponent.jsx\";\nimport React, { Component } from 'react';\nimport FormInput from './form-input/form-input.component';\nimport { Col, Row } from 'react-bootstrap';\nimport TestPopOver from '../pages/ResultEntryBySample/TestPopOver';\nimport { intl } from './App';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport rsapi from '../rsapi';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExpand } from \"@fortawesome/free-solid-svg-icons\";\nimport ReactDOM from 'react-dom'; // this is recommended \n\nclass CustomComponent extends Component {\n  constructor(props) {\n    super(props); // props.buttonRef[props.rowIndex] = []\n    //  props.buttonRef[props.rowIndex][props.columnIndex] = React.createRef();\n    // if (props.isMultiSampleAdd) {\n    //     props.buttonRef[props.parentIndex] = []\n    //     props.buttonRef[props.parentIndex][props.groupIndex] = []\n    //     props.buttonRef[props.parentIndex][props.groupIndex][props.rowIndex] = []\n    //     props.buttonRef[props.parentIndex][props.groupIndex][props.rowIndex][props.columnIndex] = React.createRef();\n    // } else {\n    //     props.buttonRef[props.rowIndex] = []\n    //     props.buttonRef[props.rowIndex][props.columnIndex] = React.createRef();\n    // }\n\n    this.alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n    this.toggleIsActive = event => {\n      // domNode.classList.add(\"active\")\n      //  const  test = ReactDOM.findDOMNode(this).firstChild.classList;\n      // const  test1 = ReactDOM.findDOMNode(this).firstChild;\n      //       console.log(test)\n      if (ReactDOM.findDOMNode(this).firstChild.classList.value.includes('test-box-active')) {\n        //this.props.buttonRef[row][column].classList.remove(\"test-box-active\")    \n        console.log(\"sakthi\"); // ReactDOM.findDOMNode(this).firstChild.classList.remove(\"test-box-active\");\n      } else {\n        console.log(\"Kumaran\"); //ReactDOM.findDOMNode(this).firstChild.classList.add(\"test-box-active\");\n      } //  this.setState({isActive: !this.state.isActive});\n      // const testt = console.log(this.props.columnIndex);\n      // console.log(this.props.rowIndex);\n\n    };\n\n    this.infoFields = [{\n      \"fieldName\": \"spositionvalue\",\n      \"label\": \"IDS_BARCODE\"\n    }, {\n      \"fieldName\": \"svisitnumbershortcode\",\n      \"label\": \"IDS_VISITNUMBERCODE\"\n    }, {\n      \"fieldName\": \"sparticipantid\",\n      \"label\": \"IDS_PARTICIPANTID\"\n    }, {\n      \"fieldName\": \"sprojectshortcode\",\n      \"label\": \"IDS_PROJECTTYPECODE\"\n    }, {\n      \"fieldName\": \"sproductshortcode\",\n      \"label\": \"IDS_PRODUCTCODE\"\n    }, {\n      \"fieldName\": \"ssampledonorshortcode\",\n      \"label\": \"IDS_SAMPLEDONORCODE\"\n    }, {\n      \"fieldName\": \"scollectiontubetypeshortcode\",\n      \"label\": \"IDS_COLLECTIONTUBETYPECODE\"\n    }];\n    this.isDisabled = this.props.isDisabled;\n    this.isReadOnly = false;\n    this.style = {\n      'border-bottom': `3px solid #7ca84c`\n    };\n\n    this.onInputOnChange = (event, fieldName) => {\n      let sheetData = this.state.sheetData;\n      let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\n\n      if (this.props.isMultiSampleAdd) {\n        if (sheetData[nsamplestoragemappingcode] === undefined) {\n          sheetData[nsamplestoragemappingcode] = {};\n        }\n\n        if (sheetData[nsamplestoragemappingcode][fieldName] === undefined) {\n          sheetData[nsamplestoragemappingcode][fieldName] = {};\n        }\n\n        sheetData[nsamplestoragemappingcode][fieldName]['spositionvalue'] = event.target.value.replaceAll(' ', '');\n      } else {\n        if (sheetData[fieldName] === undefined) {\n          sheetData[fieldName] = {};\n        }\n\n        sheetData[fieldName]['spositionvalue'] = event.target.value.replaceAll(' ', '');\n      }\n\n      this.props.childSheetDataChange({ ...sheetData\n      });\n      this.setState({\n        sheetData\n      });\n    };\n\n    this.autoCRUD = (inputParam, fieldName, operation, nsamplestoragemappingcode) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let sheetData = this.state.sheetData;\n\n        if (this.props.isMultiSampleAdd) {\n          if (sheetData[nsamplestoragemappingcode] === undefined) {\n            sheetData[nsamplestoragemappingcode] = {};\n          }\n\n          if (sheetData[nsamplestoragemappingcode][fieldName] === undefined) {\n            sheetData[nsamplestoragemappingcode][fieldName] = {};\n          }\n\n          sheetData[nsamplestoragemappingcode][fieldName]['spositionvalue'] = response[0].data.cellData['spositionvalue'] ? response[0].data.cellData['spositionvalue'] : \"\";\n\n          if (response[0].data.cellData['spositionvalue']) {\n            sheetData[nsamplestoragemappingcode][fieldName]['additionalInfo'] = response[0].data.cellData['additionalInfo'] ? JSON.parse(response[0].data.cellData['additionalInfo'].value) : [];\n          } else {\n            sheetData[nsamplestoragemappingcode][fieldName]['additionalInfo'] = [];\n          } //inputParam['spositionvalue'];\n\n        } else {\n          if (sheetData[fieldName]) {\n            sheetData[fieldName] = {};\n          }\n\n          sheetData[fieldName]['spositionvalue'] = response[0].data.cellData['spositionvalue'] ? response[0].data.cellData['spositionvalue'] : \"\";\n\n          if (response[0].data.cellData['spositionvalue']) {\n            sheetData[fieldName]['additionalInfo'] = response[0].data.cellData['additionalInfo'] ? JSON.parse(response[0].data.cellData['additionalInfo'].value) : [];\n          } else {\n            sheetData[fieldName]['additionalInfo'] = [];\n          } // inputParam['spositionvalue'];\n\n        } // this.props.availablepsacechange(response[0].data.navailablespace);\n\n\n        this.isReadOnly = true;\n        this.style = {\n          'border-bottom': `3px solid #ff6347`\n        };\n\n        if (response[0].data.isAlreadyExists && response[0].data.isAlreadyExists === true) {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_THISPOSITIONISALREADYOCCUPIED\"\n          }));\n          this.isDisabled = true;\n        }\n\n        this.setState({\n          sheetData,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.autoSaveGetData = (sposition, spositionvalue, event) => {\n      event.stopPropagation();\n\n      if (spositionvalue !== \"\" && this.isReadOnly === false) {\n        let jsondata = {\n          IDS_SAMPLEID: spositionvalue.toString().trim(),\n          IDS_POSITION: sposition,\n          IDS_QUANTITY: this.props.nquantity ? this.props.nquantity : 0,\n          IDS_UNITNAME: this.props.sunitname ? this.props.sunitname : \"\"\n        };\n        let inputParam = {\n          nsamplestoragelocationcode: this.props.nsamplestoragelocationcode,\n          nsamplestoragemappingcode: this.props.nsamplestoragemappingcode,\n          nprojecttypecode: this.props.nprojecttypecode,\n          // ncollectiontubetypecode: -1,\n          // nproductcode: -1,\n          // nsampledonorcode: -1,\n          // nvisitnumbercode: 5,\n          // sprojectshortcode:  'NA',\n          // scollectiontubetypeshortcode:  'NA',\n          // sproductshortcode: 'NA',\n          // ssampledonorshortcode:  'NA',\n          // svisitnumbershortcode: 5,\n          // sparticipantid: '00026',\n          sposition: sposition,\n          spositionvalue: spositionvalue.toString().trim(),\n          userinfo: this.props.userInfo,\n          nbarcodedescription: parseInt(this.props.nbarcodedescription),\n          nbarcodeLength: parseInt(this.props.nbarcodeLength),\n          jsondata: JSON.stringify(jsondata)\n        };\n        this.autoCRUD(inputParam, sposition, 'create', this.props.nsamplestoragemappingcode);\n      }\n    };\n\n    this.additionalInfo = () => {\n      //  console.log('--------------------->') \n      let additionalInfo = [];\n      let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\n\n      if (this.props.isMultiSampleAdd) {\n        if (this.props.ndirectionmastercode === 1) {\n          additionalInfo = this.state.sheetData[nsamplestoragemappingcode] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] : [] : [];\n        } else {\n          additionalInfo = this.state.sheetData[nsamplestoragemappingcode] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo'] : [] : [];\n        }\n      } else {\n        if (this.props.ndirectionmastercode === 1) {\n          additionalInfo = this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] ? this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] ? this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] : [] : [];\n        } else {\n          additionalInfo = this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] ? this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo'] ? this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo'] : [] : [];\n        }\n      }\n\n      return additionalInfo;\n    };\n\n    this.boxOpen = props => {\n      console.log(this.props.buttonRef && this.props.buttonRef.current);\n      const buttonRef = this.props.buttonRef;\n      this.props.buttonRef.map((x, row) => {\n        x.map((y, column) => {\n          const val = this.props.buttonRef[row][column].className;\n\n          if (val.includes('test-box-active')) {\n            this.props.buttonRef[row][column].classList.remove(\"test-box-active\");\n          }\n        });\n      });\n      this.props.buttonRef[this.props.rowIndex][this.props.columnIndex].classList.add(\"test-box-active\"); // if (this.props.isMultiSampleAdd) {\n      //     buttonRef.map((k, groupParent) => {\n      //     k.map((z, group) => {\n      //         z.map((x, row) => {\n      //             x.map((y, column) => {\n      //                 const val = buttonRef[group][row][column].current.className\n      //                 if (val.includes('test-box-active')) {\n      //                     buttonRef[groupParent][group][row][column].classList.remove(\"test-box-active\")\n      //                 }\n      //             })\n      //         })\n      //     })\n      // })\n      //     buttonRef[this.props.parentIndex][this.props.groupIndex][this.props.rowIndex][this.props.columnIndex].current.classList.add(\"test-box-active\")\n      // } else {\n      //     this.props.buttonRef.map((x, row) => {\n      //         x.map((y, column) => {\n      //             const val = this.props.buttonRef[row][column].className\n      //             if (val.includes('test-box-active')) {\n      //                 this.props.buttonRef[row][column].classList.remove(\"test-box-active\")\n      //             }\n      //         })\n      //     })\n      //     this.props.buttonRef[this.props.rowIndex][this.props.columnIndex].classList.add(\"test-box-active\")\n      // }\n      // this.buttonRef.current;\n      //this.buttonRef.current.classList.add(\"test-box-active\");\n    };\n\n    this.toggleIsActive = this.toggleIsActive.bind(this); // this.wrapperRef = React.createRef();\n\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n    this.state = {\n      sheetData: this.props.sheetData,\n      isActive: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleClickOutside(event) {\n    const domNode = ReactDOM.findDOMNode(this).firstChild;\n    const heightDiff = ReactDOM.findDOMNode(this).parentNode.parentNode.offsetHeight - (this.props.rowIndex + 1) * domNode.offsetHeight;\n    const widthDiff = ReactDOM.findDOMNode(this).parentNode.parentNode.offsetWidth - (this.props.columnIndex + 1) * domNode.offsetWidth; // if (domNode.firstChild.classList.value.includes('test-box-active')) {\n    //     //this.props.buttonRef[row][column].classList.remove(\"test-box-active\")    \n    //     console.log(\"sakthi\");\n    //    // ReactDOM.findDOMNode(this).firstChild.classList.remove(\"test-box-active\");\n    // }else{\n    //     console.log(\"Kumaran\");            \n    //     //ReactDOM.findDOMNode(this).firstChild.classList.add(\"test-box-active\");\n    // }\n\n    if (!domNode || !domNode.contains(event.target)) {\n      // this.setState({\n      //     isActive: false\n      // });\n      domNode.classList.remove(\"test-box-active\");\n    } else {\n      domNode.classList.add(\"test-box-active\");\n      domNode.firstChild.classList.add('yes');\n\n      if (domNode.offsetHeight > heightDiff) {\n        domNode.classList.add(\"test-box-active-bottom\");\n      }\n\n      if (domNode.offsetWidth > widthDiff) {\n        domNode.classList.add(\"test-box-active-right\");\n      }\n    }\n  }\n\n  handleEnter(event) {\n    if (event.keyCode === 13) {\n      const form = event.target.form;\n      const index = Array.prototype.indexOf.call(form, event.target);\n      form.elements[index + 1].focus();\n      event.preventDefault();\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (this.props.sheetData !== previousProps.sheetData) {\n      let sheetData = this.props.sheetData;\n      this.setState({\n        sheetData\n      });\n    }\n  }\n\n  render() {\n    let count = 0;\n    let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\n    const groupIndex = this.props.groupIndex;\n    const rowIndex = this.props.rowIndex;\n    const columnIndex = this.props.columnIndex;\n    const parentIndex = this.props.parentIndex;\n    const isMultiSampleAdd = this.props.isMultiSampleAdd;\n    let buttonRef = this.props.buttonRef;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"position-relative\",\n      style: {\n        width: this.props.boxWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `p-0 test-box ${this.state.isActive ? 'test-box-active' : \"\"} ${!Object.keys(this.additionalInfo()).length > 0 ? \"test-box-available\" : ''} ` // ref={el=> \n      //     {\n      //     if (isMultiSampleAdd===true) {\n      //        // console.log('check '+this.props.groupIndex+\" \"+this.props.rowIndex+\" \"+this.props.columnIndex)\n      //        // console.log(\"array \"+ buttonRef[this.props.parentIndex][this.props.groupIndex][this.props.rowIndex][this.props.columnIndex])\n      //         this.props.buttonRef[this.props.rowIndex][this.props.columnIndex] = el\n      //     } else {\n      //         this.props.buttonRef[rowIndex][columnIndex] = el\n      //     }\n      // }\n      // }\n      ,\n      ref: el => {\n        // el can be null - see https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\n        if (!el) return;\n        console.log(el.getBoundingClientRect().width); // prints 200px\n      } // onClick={() => this.boxOpen(this.props)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }, this.props.isMultiSampleAdd ? this.props.ndirectionmastercode === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n      className: 'alphabetcss',\n      name: 'ncolumn',\n      onKeyDown: this.props.handleKeyDown,\n      onBlur: event => this.autoSaveGetData(this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1), this.state.sheetData[nsamplestoragemappingcode] && (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\"), event) //label={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\n      ,\n      label: /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-block\",\n        style: {\n          width: this.props.boxWidth\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 48\n        }\n      }, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)),\n      placeholder: this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1),\n      value: this.state.sheetData[nsamplestoragemappingcode] && (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\") // style={this.state.sheetData[nsamplestoragemappingcode] && this.state.sheetData[nsamplestoragemappingcode]\n      // [this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode]\n      // [this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\n      //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\n      ,\n      style: this.style,\n      maxLength: 20,\n      isDisabled: this.isDisabled,\n      readOnly: this.isReadOnly,\n      onChange: event => this.onInputOnChange(event, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 37\n      }\n    })) : /*#__PURE__*/React.createElement(FormInput, {\n      name: 'ncolumn',\n      className: 'alphabetcss',\n      onBlur: event => this.autoSaveGetData(this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1), this.state.sheetData[nsamplestoragemappingcode] && (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\"), event),\n      onKeyDown: this.props.handleKeyDown //label={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\n      ,\n      label: /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-block\",\n        style: {\n          width: this.props.boxWidth\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 44\n        }\n      }, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)),\n      placeholder: this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1),\n      value: this.state.sheetData[nsamplestoragemappingcode] && (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ? this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\") // style={this.state.sheetData[nsamplestoragemappingcode]\n      //     && this.state.sheetData[nsamplestoragemappingcode]\n      //     [this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\n      //     this.state.sheetData[nsamplestoragemappingcode]\n      //     [this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue']\n      //     ?\n      //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\n      ,\n      style: this.style,\n      maxLength: 20,\n      isDisabled: this.isDisabled,\n      readOnly: this.isReadOnly,\n      onChange: event => this.onInputOnChange(event, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 33\n      }\n    }) : this.props.ndirectionmastercode === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n      name: 'ncolumn',\n      className: 'alphabetcss',\n      onBlur: event => this.autoSaveGetData(this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1), this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ? this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\", event),\n      onKeyDown: this.props.handleKeyDown // label={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\n      ,\n      label: /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-block\",\n        style: {\n          width: this.props.boxWidth\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 48\n        }\n      }, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)),\n      placeholder: this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1),\n      value: this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ? this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\",\n      maxLength: 20,\n      isDisabled: this.isDisabled // style={this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] &&\n      //     this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\n      //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\n      ,\n      style: this.style,\n      onChange: event => this.onInputOnChange(event, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)),\n      readOnly: this.isReadOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 37\n      }\n    }), \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormInput, {\n      className: 'alphabetcss',\n      name: 'ncolumn',\n      onKeyDown: this.props.handleKeyDown,\n      onBlur: event => this.autoSaveGetData(this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1), this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] && this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ? this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\", event) // style={this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\n      //     this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ?\n      //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\n      ,\n      style: this.style // label={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\n      ,\n      label: /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-block\",\n        style: {\n          width: this.props.boxWidth\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 48\n        }\n      }, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)),\n      placeholder: this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1),\n      value: this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] && this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ? this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\",\n      maxLength: 20,\n      isDisabled: this.isDisabled,\n      onChange: event => this.onInputOnChange(event, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)),\n      readOnly: this.isReadOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 37\n      }\n    })), Object.keys(this.additionalInfo()).length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n      className: \"test-box-expand-btn\",\n      key: this.props.columnIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faExpand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 93\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      className: \"test-box-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 29\n      }\n    }, this.additionalInfo() && Object.keys(this.additionalInfo()).map(key =>\n    /*#__PURE__*/\n    //  item\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 40\n      }\n    }, \" \", (key.includes('IDS_') ? intl.formatMessage({\n      id: key\n    }) : key) + ' : ' + this.additionalInfo()[key])))))));\n  }\n\n}\n\nexport default CustomComponent;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/CustomComponent.jsx"],"names":["React","Component","FormInput","Col","Row","TestPopOver","intl","Axios","toast","rsapi","FontAwesomeIcon","faExpand","ReactDOM","CustomComponent","constructor","props","alphabet","toggleIsActive","event","findDOMNode","firstChild","classList","value","includes","console","log","infoFields","isDisabled","isReadOnly","style","onInputOnChange","fieldName","sheetData","state","nsamplestoragemappingcode","isMultiSampleAdd","undefined","target","replaceAll","childSheetDataChange","setState","autoCRUD","inputParam","operation","loading","urlArray","url1","post","all","then","response","data","cellData","JSON","parse","isAlreadyExists","warn","formatMessage","id","catch","error","status","message","autoSaveGetData","sposition","spositionvalue","stopPropagation","jsondata","IDS_SAMPLEID","toString","trim","IDS_POSITION","IDS_QUANTITY","nquantity","IDS_UNITNAME","sunitname","nsamplestoragelocationcode","nprojecttypecode","userinfo","userInfo","nbarcodedescription","parseInt","nbarcodeLength","stringify","additionalInfo","ndirectionmastercode","rowIndex","columnIndex","boxOpen","buttonRef","current","map","x","row","y","column","val","className","remove","add","bind","handleClickOutside","isActive","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","domNode","heightDiff","parentNode","offsetHeight","widthDiff","offsetWidth","contains","handleEnter","keyCode","form","index","Array","prototype","indexOf","call","elements","focus","preventDefault","componentDidUpdate","previousProps","previousState","render","count","groupIndex","parentIndex","width","boxWidth","Object","keys","length","el","getBoundingClientRect","handleKeyDown","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport FormInput from './form-input/form-input.component';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport TestPopOver from '../pages/ResultEntryBySample/TestPopOver';\r\nimport { intl } from './App';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport rsapi from '../rsapi';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExpand } from \"@fortawesome/free-solid-svg-icons\";\r\nimport ReactDOM from 'react-dom'; // this is recommended \r\n\r\nclass CustomComponent extends Component {\r\n    alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n       // props.buttonRef[props.rowIndex] = []\r\n      //  props.buttonRef[props.rowIndex][props.columnIndex] = React.createRef();\r\n        // if (props.isMultiSampleAdd) {\r\n            \r\n\r\n        //     props.buttonRef[props.parentIndex] = []\r\n        //     props.buttonRef[props.parentIndex][props.groupIndex] = []\r\n        //     props.buttonRef[props.parentIndex][props.groupIndex][props.rowIndex] = []\r\n        //     props.buttonRef[props.parentIndex][props.groupIndex][props.rowIndex][props.columnIndex] = React.createRef();\r\n        // } else {\r\n            \r\n        //     props.buttonRef[props.rowIndex] = []\r\n        //     props.buttonRef[props.rowIndex][props.columnIndex] = React.createRef();\r\n        // }\r\n\r\n\r\n\r\n        this.toggleIsActive = this.toggleIsActive.bind(this);\r\n        // this.wrapperRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.state = {\r\n            sheetData: this.props.sheetData,\r\n            isActive: false\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n    handleClickOutside(event) {\r\n        const domNode = ReactDOM.findDOMNode(this).firstChild;\r\n        const heightDiff = ReactDOM.findDOMNode(this).parentNode.parentNode.offsetHeight - ((this.props.rowIndex + 1) * (domNode.offsetHeight) );\r\n        const widthDiff = ReactDOM.findDOMNode(this).parentNode.parentNode.offsetWidth - ((this.props.columnIndex + 1) * (domNode.offsetWidth) );\r\n\r\n\r\n        // if (domNode.firstChild.classList.value.includes('test-box-active')) {\r\n        //     //this.props.buttonRef[row][column].classList.remove(\"test-box-active\")    \r\n        //     console.log(\"sakthi\");\r\n        //    // ReactDOM.findDOMNode(this).firstChild.classList.remove(\"test-box-active\");\r\n        // }else{\r\n        //     console.log(\"Kumaran\");            \r\n        //     //ReactDOM.findDOMNode(this).firstChild.classList.add(\"test-box-active\");\r\n        // }\r\n\r\n\r\n        if (!domNode || !domNode.contains(event.target)) {\r\n            // this.setState({\r\n            //     isActive: false\r\n            // });\r\n            domNode.classList.remove(\"test-box-active\")\r\n        } else {\r\n            domNode.classList.add(\"test-box-active\");\r\n            domNode.firstChild.classList.add('yes')\r\n\r\n            if(domNode.offsetHeight > heightDiff ){                \r\n                domNode.classList.add(\"test-box-active-bottom\");\r\n            }\r\n            if(domNode.offsetWidth > widthDiff ){                \r\n                domNode.classList.add(\"test-box-active-right\");\r\n            }\r\n        }\r\n    }\r\n    toggleIsActive = (event) => {\r\n        // domNode.classList.add(\"active\")\r\n     //  const  test = ReactDOM.findDOMNode(this).firstChild.classList;\r\n      // const  test1 = ReactDOM.findDOMNode(this).firstChild;\r\n//       console.log(test)\r\n       if (ReactDOM.findDOMNode(this).firstChild.classList.value.includes('test-box-active')) {\r\n            //this.props.buttonRef[row][column].classList.remove(\"test-box-active\")    \r\n            console.log(\"sakthi\");\r\n           // ReactDOM.findDOMNode(this).firstChild.classList.remove(\"test-box-active\");\r\n        }else{\r\n            console.log(\"Kumaran\");            \r\n            //ReactDOM.findDOMNode(this).firstChild.classList.add(\"test-box-active\");\r\n        }\r\n    \r\n        //  this.setState({isActive: !this.state.isActive});\r\n        // const testt = console.log(this.props.columnIndex);\r\n        // console.log(this.props.rowIndex);\r\n    };\r\n    infoFields = [\r\n        { \"fieldName\": \"spositionvalue\", \"label\": \"IDS_BARCODE\" },\r\n        { \"fieldName\": \"svisitnumbershortcode\", \"label\": \"IDS_VISITNUMBERCODE\" },\r\n        { \"fieldName\": \"sparticipantid\", \"label\": \"IDS_PARTICIPANTID\" },\r\n        { \"fieldName\": \"sprojectshortcode\", \"label\": \"IDS_PROJECTTYPECODE\" },\r\n        { \"fieldName\": \"sproductshortcode\", \"label\": \"IDS_PRODUCTCODE\" },\r\n        { \"fieldName\": \"ssampledonorshortcode\", \"label\": \"IDS_SAMPLEDONORCODE\" },\r\n        { \"fieldName\": \"scollectiontubetypeshortcode\", \"label\": \"IDS_COLLECTIONTUBETYPECODE\" }\r\n    ];\r\n\r\n    isDisabled = this.props.isDisabled;\r\n    isReadOnly = false;\r\n    style={ 'border-bottom': `3px solid #7ca84c` };\r\n\r\n    handleEnter(event) {\r\n        if (event.keyCode === 13) {\r\n            const form = event.target.form;\r\n            const index = Array.prototype.indexOf.call(form, event.target);\r\n            form.elements[index + 1].focus();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, fieldName) => {\r\n        let sheetData = this.state.sheetData;\r\n        let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\r\n        if (this.props.isMultiSampleAdd) {\r\n            if (sheetData[nsamplestoragemappingcode] === undefined) {\r\n                sheetData[nsamplestoragemappingcode] = {}\r\n            }\r\n            if (sheetData[nsamplestoragemappingcode][fieldName] === undefined) {\r\n                sheetData[nsamplestoragemappingcode][fieldName] = {}\r\n            }\r\n            sheetData[nsamplestoragemappingcode][fieldName]['spositionvalue'] = event.target.value.replaceAll(' ','');\r\n        } else {\r\n            if (sheetData[fieldName] === undefined) {\r\n                sheetData[fieldName] = {}\r\n            }\r\n            sheetData[fieldName]['spositionvalue'] = event.target.value.replaceAll(' ','');\r\n        }\r\n        this.props.childSheetDataChange({\r\n            ...sheetData\r\n        });\r\n        this.setState({ sheetData })\r\n    }\r\n    autoCRUD = (inputParam, fieldName, operation, nsamplestoragemappingcode) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let sheetData = this.state.sheetData;\r\n                if (this.props.isMultiSampleAdd) {\r\n                    if (sheetData[nsamplestoragemappingcode] === undefined) {\r\n                        sheetData[nsamplestoragemappingcode] = {}\r\n                    }\r\n                    if (sheetData[nsamplestoragemappingcode][fieldName] === undefined) {\r\n                        sheetData[nsamplestoragemappingcode][fieldName] = {}\r\n                    }\r\n                    sheetData[nsamplestoragemappingcode][fieldName]['spositionvalue'] = response[0].data.cellData['spositionvalue'] ?\r\n                        response[0].data.cellData['spositionvalue'] : \"\"\r\n                    if (response[0].data.cellData['spositionvalue']) {\r\n                        sheetData[nsamplestoragemappingcode][fieldName]['additionalInfo'] = response[0].data.cellData['additionalInfo'] ?\r\n                            JSON.parse(response[0].data.cellData['additionalInfo'].value) : []\r\n                    } else {\r\n                        sheetData[nsamplestoragemappingcode][fieldName]['additionalInfo'] = []\r\n                    }\r\n                    //inputParam['spositionvalue'];\r\n                } else {\r\n                    if (sheetData[fieldName]) {\r\n                        sheetData[fieldName] = {}\r\n                    }\r\n                    sheetData[fieldName]['spositionvalue'] = response[0].data.cellData['spositionvalue'] ?\r\n                        response[0].data.cellData['spositionvalue'] : \"\"\r\n                    if (response[0].data.cellData['spositionvalue']) {\r\n                        sheetData[fieldName]['additionalInfo'] = response[0].data.cellData['additionalInfo'] ?\r\n                            JSON.parse(response[0].data.cellData['additionalInfo'].value) : []\r\n                    } else {\r\n                        sheetData[fieldName]['additionalInfo'] = []\r\n                    }\r\n\r\n\r\n                    // inputParam['spositionvalue'];\r\n                }\r\n                // this.props.availablepsacechange(response[0].data.navailablespace);\r\n                this.isReadOnly = true;\r\n                this.style={ 'border-bottom': `3px solid #ff6347` };\r\n\r\n                if (response[0].data.isAlreadyExists && response[0].data.isAlreadyExists === true) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_THISPOSITIONISALREADYOCCUPIED\" }));\r\n                    this.isDisabled = true;\r\n                }\r\n                this.setState({\r\n                    sheetData,\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        if (this.props.sheetData !== previousProps.sheetData) {\r\n            let sheetData = this.props.sheetData\r\n            this.setState({ sheetData })\r\n        }\r\n    }\r\n\r\n    autoSaveGetData = (sposition, spositionvalue, event) => {\r\n        event.stopPropagation();\r\n        if (spositionvalue !== \"\" && this.isReadOnly === false) {\r\n         let  jsondata={\r\n                IDS_SAMPLEID:spositionvalue.toString().trim(),\r\n                IDS_POSITION:sposition,\r\n                IDS_QUANTITY:this.props.nquantity?this.props.nquantity:0,\r\n                IDS_UNITNAME:this.props.sunitname?this.props.sunitname:\"\"\r\n            }\r\n            let inputParam = {\r\n                nsamplestoragelocationcode: this.props.nsamplestoragelocationcode,\r\n                nsamplestoragemappingcode: this.props.nsamplestoragemappingcode,\r\n                nprojecttypecode: this.props.nprojecttypecode,\r\n                // ncollectiontubetypecode: -1,\r\n                // nproductcode: -1,\r\n                // nsampledonorcode: -1,\r\n                // nvisitnumbercode: 5,\r\n                // sprojectshortcode:  'NA',\r\n                // scollectiontubetypeshortcode:  'NA',\r\n                // sproductshortcode: 'NA',\r\n                // ssampledonorshortcode:  'NA',\r\n                // svisitnumbershortcode: 5,\r\n                // sparticipantid: '00026',\r\n                sposition: sposition,\r\n                spositionvalue: spositionvalue.toString().trim(),\r\n                userinfo: this.props.userInfo,\r\n                nbarcodedescription:parseInt(this.props.nbarcodedescription),\r\n                nbarcodeLength:parseInt(this.props.nbarcodeLength),\r\n               jsondata:JSON.stringify(jsondata)\r\n            }\r\n            this.autoCRUD(inputParam, sposition, 'create', this.props.nsamplestoragemappingcode);\r\n        }\r\n    }\r\n    additionalInfo = () => {\r\n        //  console.log('--------------------->') \r\n        let additionalInfo = []\r\n        let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\r\n        if (this.props.isMultiSampleAdd) {\r\n            if (this.props.ndirectionmastercode === 1) {\r\n                additionalInfo = this.state.sheetData[nsamplestoragemappingcode] ?\r\n                    ((this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]\r\n                        && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] ?\r\n                        this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] : [])) : [];\r\n            } else {\r\n                additionalInfo = this.state.sheetData[nsamplestoragemappingcode] ?\r\n                    ((this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]\r\n                        && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex]\r\n                        + (this.props.rowIndex + 1)]['additionalInfo'] ?\r\n                        this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex]\r\n                        + (this.props.rowIndex + 1)]['additionalInfo'] : [])) : [];\r\n            }\r\n        } else {\r\n            if (this.props.ndirectionmastercode === 1) {\r\n                additionalInfo = this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] ?\r\n                    ((this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo']) ?\r\n                        this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['additionalInfo'] : []) : []\r\n            } else {\r\n                additionalInfo = this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] ?\r\n                    ((this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo']) ?\r\n                        this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['additionalInfo'] : []) : []\r\n            }\r\n        }\r\n        return additionalInfo;\r\n    }\r\n\r\n    boxOpen = (props) => {\r\n        console.log(this.props.buttonRef && this.props.buttonRef.current);\r\n\r\n        const buttonRef=this.props.buttonRef\r\n\r\n\r\n\r\n        this.props.buttonRef.map((x, row) => {\r\n\r\n            x.map((y, column) => {\r\n\r\n                const val = this.props.buttonRef[row][column].className\r\n\r\n                if (val.includes('test-box-active')) {\r\n                    this.props.buttonRef[row][column].classList.remove(\"test-box-active\")\r\n                }\r\n\r\n\r\n            })\r\n\r\n\r\n        })\r\n\r\n\r\n        this.props.buttonRef[this.props.rowIndex][this.props.columnIndex].classList.add(\"test-box-active\")\r\n        // if (this.props.isMultiSampleAdd) {\r\n        //     buttonRef.map((k, groupParent) => {\r\n        //     k.map((z, group) => {\r\n\r\n        //         z.map((x, row) => {\r\n\r\n        //             x.map((y, column) => {\r\n\r\n        //                 const val = buttonRef[group][row][column].current.className\r\n\r\n        //                 if (val.includes('test-box-active')) {\r\n        //                     buttonRef[groupParent][group][row][column].classList.remove(\"test-box-active\")\r\n        //                 }\r\n\r\n\r\n        //             })\r\n\r\n\r\n        //         })\r\n\r\n        //     })\r\n        // })\r\n        //     buttonRef[this.props.parentIndex][this.props.groupIndex][this.props.rowIndex][this.props.columnIndex].current.classList.add(\"test-box-active\")\r\n        // } else {\r\n        //     this.props.buttonRef.map((x, row) => {\r\n\r\n        //         x.map((y, column) => {\r\n\r\n        //             const val = this.props.buttonRef[row][column].className\r\n\r\n        //             if (val.includes('test-box-active')) {\r\n        //                 this.props.buttonRef[row][column].classList.remove(\"test-box-active\")\r\n        //             }\r\n\r\n\r\n        //         })\r\n\r\n\r\n        //     })\r\n\r\n\r\n        //     this.props.buttonRef[this.props.rowIndex][this.props.columnIndex].classList.add(\"test-box-active\")\r\n\r\n\r\n        // }\r\n\r\n\r\n        // this.buttonRef.current;\r\n        //this.buttonRef.current.classList.add(\"test-box-active\");\r\n    }\r\n    render() {\r\n        let count = 0;\r\n        let nsamplestoragemappingcode = this.props.nsamplestoragemappingcode;\r\n        const groupIndex=this.props.groupIndex\r\n        const rowIndex=this.props.rowIndex\r\n        const columnIndex=this.props.columnIndex\r\n        const parentIndex=this.props.parentIndex\r\n        const isMultiSampleAdd=this.props.isMultiSampleAdd\r\n        let buttonRef= this.props.buttonRef\r\n        return (\r\n            <>\r\n                <div className='position-relative' style={{ width: this.props.boxWidth }}>\r\n                    <div className={`p-0 test-box ${this.state.isActive ? 'test-box-active' : \"\"} ${!Object.keys(this.additionalInfo()).length > 0 ? \"test-box-available\" : ''} `}\r\n                        // ref={el=> \r\n\r\n                            \r\n                        //     {\r\n                        //     if (isMultiSampleAdd===true) {\r\n                        //        // console.log('check '+this.props.groupIndex+\" \"+this.props.rowIndex+\" \"+this.props.columnIndex)\r\n                        //        // console.log(\"array \"+ buttonRef[this.props.parentIndex][this.props.groupIndex][this.props.rowIndex][this.props.columnIndex])\r\n                        //         this.props.buttonRef[this.props.rowIndex][this.props.columnIndex] = el\r\n                        //     } else {\r\n                        //         this.props.buttonRef[rowIndex][columnIndex] = el\r\n\r\n                        //     }\r\n                        // }\r\n                        // }\r\n                        ref={el => {\r\n                            // el can be null - see https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\r\n                            if (!el) return;\r\n                    \r\n                            console.log(el.getBoundingClientRect().width); // prints 200px\r\n                          }}\r\n                        // onClick={() => this.boxOpen(this.props)}\r\n                    >\r\n                        {this.props.isMultiSampleAdd ?\r\n                            this.props.ndirectionmastercode === 1 ?\r\n                                <>\r\n\r\n                                    <FormInput\r\n                                        className={'alphabetcss'}\r\n                                        name={'ncolumn'}\r\n                                        onKeyDown={this.props.handleKeyDown}\r\n                                        onBlur={(event) => this.autoSaveGetData(\r\n                                            this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1),\r\n                                            this.state.sheetData[nsamplestoragemappingcode] &&\r\n                                            (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] &&\r\n                                                this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\r\n                                                this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\"), event)}\r\n\r\n                                        //label={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                        label={<span className='d-block' style={{ width: this.props.boxWidth }}>\r\n                                            {this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                            {/* {\r\n                                        Object.values(this.additionalInfo()).length > 0\r\n                                        &&  <span className=\"ml-2\">\r\n                                                <TestPopOver intl={intl} needIcon={true} needPopoverTitleContent={true}\r\n                                                    infoFields={this.infoFields}\r\n                                                    selectedObject={this.additionalInfo()}\r\n                                                    placement={this.props.rowIndex === 0 ? 'bottom':'top'}  >\r\n                                                </TestPopOver>\r\n                                                </span>\r\n                                    } */}\r\n                                        </span>}\r\n                                        placeholder={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                        value={this.state.sheetData[nsamplestoragemappingcode] &&\r\n                                            (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]\r\n                                                && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\r\n                                                this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\")}\r\n                                        // style={this.state.sheetData[nsamplestoragemappingcode] && this.state.sheetData[nsamplestoragemappingcode]\r\n                                        // [this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] && this.state.sheetData[nsamplestoragemappingcode]\r\n                                        // [this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\r\n                                        //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\r\n                                        style={this.style}\r\n                                        maxLength={20}\r\n                                        isDisabled={this.isDisabled}\r\n                                        readOnly={this.isReadOnly}\r\n                                        onChange={(event) => this.onInputOnChange(event, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1))}\r\n                                    /></>\r\n                                :\r\n                                <FormInput\r\n                                    name={'ncolumn'}\r\n                                    className={'alphabetcss'}\r\n                                    onBlur={(event) => this.autoSaveGetData(\r\n                                        this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1),\r\n                                        this.state.sheetData[nsamplestoragemappingcode] &&\r\n                                        (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\r\n                                            this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ?\r\n                                            this.state.sheetData[nsamplestoragemappingcode]\r\n                                            [this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\"), event)}\r\n                                    onKeyDown={this.props.handleKeyDown}\r\n                                    //label={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                    label={<span className='d-block' style={{ width: this.props.boxWidth }}>\r\n                                        {this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                        {/* {\r\n                                        Object.values(this.additionalInfo()).length > 0\r\n                                        &&  <span className=\"ml-2\">\r\n                                                  <TestPopOver intl={intl} needIcon={true} needPopoverTitleContent={true}\r\n                                                    infoFields={this.infoFields}\r\n                                                    selectedObject={this.additionalInfo()}\r\n                                                    placement={this.props.rowIndex === 0 ? 'bottom':'top'}  >\r\n                                                </TestPopOver>\r\n                                                </span>\r\n                                    } */}\r\n                                    </span>}\r\n                                    placeholder={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                    value={this.state.sheetData[nsamplestoragemappingcode] &&\r\n                                        (this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]\r\n                                            && this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ?\r\n                                            this.state.sheetData[nsamplestoragemappingcode][this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\")}\r\n                                    // style={this.state.sheetData[nsamplestoragemappingcode]\r\n                                    //     && this.state.sheetData[nsamplestoragemappingcode]\r\n                                    //     [this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\r\n                                    //     this.state.sheetData[nsamplestoragemappingcode]\r\n                                    //     [this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue']\r\n                                    //     ?\r\n                                    //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\r\n                                    style={this.style}\r\n                                    maxLength={20}\r\n                                    isDisabled={this.isDisabled}\r\n                                    readOnly={this.isReadOnly}\r\n                                    onChange={(event) => this.onInputOnChange(event, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1))}\r\n                                />\r\n                            :\r\n                            this.props.ndirectionmastercode === 1 ?\r\n                                <>\r\n                                    <FormInput\r\n                                        name={'ncolumn'}\r\n                                        className={'alphabetcss'}\r\n                                        onBlur={(event) => this.autoSaveGetData(\r\n                                            this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1),\r\n                                            this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] &&\r\n                                                this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\r\n                                                this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\", event)}\r\n                                        onKeyDown={this.props.handleKeyDown}\r\n                                        // label={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                        label={<span className='d-block' style={{ width: this.props.boxWidth }}>\r\n                                            {this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                            {/* {\r\n                                    Object.values(this.additionalInfo()).length > 0\r\n                                    &&  <span className=\"ml-2\">\r\n                                             <TestPopOver intl={intl} needIcon={true} needPopoverTitleContent={true}\r\n                                                    infoFields={this.infoFields}\r\n                                                    selectedObject={this.additionalInfo()}\r\n                                                    placement={this.props.rowIndex === 0 ? 'bottom':'top'}  >\r\n                                                </TestPopOver>\r\n                                            </span>\r\n                                } */}\r\n                                        </span>}\r\n                                        placeholder={this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)}\r\n                                        value={(this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] &&\r\n                                            this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue']) ?\r\n                                            this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] : \"\"}\r\n                                        maxLength={20}\r\n                                        isDisabled={this.isDisabled}\r\n                                        // style={this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)] &&\r\n                                        //     this.state.sheetData[this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1)]['spositionvalue'] ?\r\n                                        //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\r\n                                        style={this.style}\r\n                                        onChange={(event) => this.onInputOnChange(event, this.alphabet[this.props.rowIndex] + (this.props.columnIndex + 1))}\r\n                                        readOnly={this.isReadOnly}\r\n                                    /> </> :\r\n                                <>\r\n                                    <FormInput\r\n                                        className={'alphabetcss'}\r\n                                        name={'ncolumn'}\r\n                                        onKeyDown={this.props.handleKeyDown}\r\n                                        onBlur={(event) => this.autoSaveGetData(\r\n                                            this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1),\r\n                                            this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\r\n                                                this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ?\r\n                                                this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\", event)}\r\n                                        // style={this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\r\n                                        //     this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] ?\r\n                                        //     { 'border-bottom': `3px solid #ff6347` } : { 'border-bottom': `3px solid #7ca84c` }}\r\n                                        style={this.style}\r\n                                        // label={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                        label={<span className='d-block' style={{ width: this.props.boxWidth }}>\r\n                                            {this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                            {/* {\r\n                                        Object.values(this.additionalInfo()).length > 0\r\n                                        &&  <span className=\"ml-2\">\r\n                                                 <TestPopOver intl={intl} needIcon={true} needPopoverTitleContent={true}\r\n                                                    infoFields={this.infoFields}\r\n                                                    selectedObject={this.additionalInfo()}\r\n                                                    placement={this.props.rowIndex === 0 ? 'bottom':'top'}  >\r\n                                                </TestPopOver>\r\n                                                </span>\r\n                                    } */}\r\n                                        </span>}\r\n                                        placeholder={this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)}\r\n                                        value={(this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)] &&\r\n                                            this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue']) ?\r\n                                            this.state.sheetData[this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1)]['spositionvalue'] : \"\"}\r\n                                        maxLength={20}\r\n                                        isDisabled={this.isDisabled}\r\n                                        onChange={(event) => this.onInputOnChange(event, this.alphabet[this.props.columnIndex] + (this.props.rowIndex + 1))}\r\n                                        readOnly={this.isReadOnly}\r\n                                    />\r\n                                </>\r\n                        }\r\n                         {Object.keys(this.additionalInfo()).length > 0\r\n                        &&\r\n                        <>\r\n                            <a className='test-box-expand-btn' key={this.props.columnIndex}><FontAwesomeIcon icon={faExpand} /></a>\r\n                            <Col className=\"test-box-info\">\r\n                                {\r\n                                    this.additionalInfo() && Object.keys(this.additionalInfo()).map(key =>\r\n                                      //  item\r\n                                       <div> { (key.includes('IDS_')? intl.formatMessage({ id: key }): key) +' : '+this.additionalInfo()[key] }</div>\r\n                                    )\r\n                                }\r\n                            </Col>\r\n                        </>\r\n                    }  \r\n                        \r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default CustomComponent;\r\n\r\n"]},"metadata":{},"sourceType":"module"}