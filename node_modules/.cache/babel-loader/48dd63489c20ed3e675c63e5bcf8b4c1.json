{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\product\\\\PlasmaMasterFile.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getPlasmaMasterFileComboService } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddPlasmaMasterFile from './AddPlasmaMasterFile';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PlasmaMasterFile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getNestedFieldData = (nestedColumnArray, data) => nestedColumnArray.reduce((xs, x) => xs && xs[x] ? xs[x] : null, data);\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteparam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteparam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          //[this.props.Login.inputParam.methodUrl.toLowerCase()]: selectedRecord.dataItem,\n          [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteparam.operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            //screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n            //operation\n            screenName: deleteparam.screenName,\n            operation: deleteparam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nplasmafilecode;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n        inputData[\"plasmamasterfile\"][\"nmanufcode\"] = this.state.selectedRecord[\"nmanufcode\"] ? this.state.selectedRecord[\"nmanufcode\"].value : \"\";\n        dataState = this.state.dataState;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n        inputData[\"plasmamasterfile\"][\"nmanufcode\"] = this.state.selectedRecord[\"nmanufcode\"] ? this.state.selectedRecord[\"nmanufcode\"].value : \"\";\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //let selectedRecord = {};\n      //this.setState({ selectedRecord });\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: _dataState,\n      plasmaData: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      manufList: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //let primaryKeyField = \"\";\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_MANUFNAME\",\n      \"dataField\": \"smanufname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PLASMAFILENUMBER\",\n      \"dataField\": \"splasmafilenumber\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"400px\"\n    }]; //primaryKeyField = \"nplasmafilecode\";\n\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_MANUFNAME\",\n      \"dataField\": \"nmanufcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_PLASMAFILENUMBER\",\n      \"dataField\": \"splasmafilenumber\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.fieldList = [\"splasmafilenumber\", \"sdescription\", \"nmanufcode\"];\n    const addId = this.state.controlMap.has(\"AddPlasmaMasterFile\") && this.state.controlMap.get(\"AddPlasmaMasterFile\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditPlasmaMasterFile\") && this.state.controlMap.get(\"EditPlasmaMasterFile\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeletePlasmaMasterFile\") && this.state.controlMap.get(\"DeletePlasmaMasterFile\").ncontrolcode;\n    const PlasmaMasterFileAddParam = {\n      screenName: \"Plasma Master File\",\n      operation: \"create\",\n      primaryKeyField: \"nplasmafilecode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const PlasmaMasterFileEditParam = {\n      screenName: \"Plasma Master File\",\n      operation: \"update\",\n      primaryKeyField: \"nplasmafilecode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const PlasmaMasterFileDeleteParam = {\n      screenName: \"PlasmaMasterFile\",\n      methodUrl: \"PlasmaMasterFile\",\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    };\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      gridHeight: \"600px\",\n      primaryKeyField: \"nplasmafilecode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getPlasmaMasterFileComboService //fetchRecord}\n      ,\n      editParam: PlasmaMasterFileEditParam,\n      deleteRecord: this.deleteRecord,\n      addRecord: () => this.props.getPlasmaMasterFileComboService(PlasmaMasterFileAddParam),\n      deleteParam: PlasmaMasterFileDeleteParam,\n      reloadData: this.reloadData,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddPlasmaMasterFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        manufList: this.state.manufList || [] //{this.props.Login.manufList || []}\n        ,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.manufList !== previousProps.Login.manufList) {\n      const manufList = constructOptionList(this.props.Login.manufList || [], \"nmanufcode\", \"smanufname\", undefined, undefined, undefined);\n      const manufListFile = manufList.get(\"OptionList\");\n      this.setState({\n        manufList: manufListFile\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getPlasmaMasterFileComboService\n})(injectIntl(PlasmaMasterFile));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/product/PlasmaMasterFile.jsx"],"names":["React","connect","injectIntl","ListWrapper","Row","Col","toast","process","callService","crudMaster","updateStore","validateEsignCredential","getPlasmaMasterFileComboService","DataGrid","SlideOutModal","Esign","AddPlasmaMasterFile","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","mapStateToProps","state","Login","PlasmaMasterFile","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","getNestedFieldData","nestedColumnArray","reduce","xs","x","onComboChange","comboData","fieldName","onInputOnChange","target","type","name","checked","value","deleteRecord","deleteparam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","onSaveClick","saveType","formRef","undefined","nplasmafilecode","JSON","parse","stringify","fieldList","map","item","nmastersitecode","intl","formatMessage","id","validateEsign","sreason","password","createRef","extractedColumnList","skip","take","settings","parseInt","addScreen","masterStatus","error","plasmaData","controlMap","Map","manufList","getDerivedStateFromProps","warn","render","validationColumnList","addId","has","get","ncontrolcode","editId","deleteId","PlasmaMasterFileAddParam","primaryKeyField","PlasmaMasterFileEditParam","PlasmaMasterFileDeleteParam","mandatoryFields","forEach","mandatory","push","buttonCount","pageSizes","componentDidUpdate","previousProps","Object","values","manufListFile"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { Row, Col } from 'react-bootstrap'; \r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, getPlasmaMasterFileComboService } from '../../actions';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddPlasmaMasterFile from './AddPlasmaMasterFile';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass PlasmaMasterFile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            plasmaData: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {},manufList:[]\r\n\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getNestedFieldData = (nestedColumnArray, data) =>\r\n        nestedColumnArray.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, data);\r\n\r\n    render() {\r\n\r\n        //let primaryKeyField = \"\";\r\n\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_MANUFNAME\", \"dataField\": \"smanufname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\" },\r\n\r\n        ]\r\n        //primaryKeyField = \"nplasmafilecode\";\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_MANUFNAME\", \"dataField\": \"nmanufcode\", \"width\": \"200px\",\"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"  },\r\n            { \"idsName\": \"IDS_PLASMAFILENUMBER\", \"dataField\": \"splasmafilenumber\", \"width\": \"200px\",\"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"  },\r\n\r\n        ]\r\n        this.fieldList = [\"splasmafilenumber\", \"sdescription\", \"nmanufcode\"];\r\n\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"AddPlasmaMasterFile\") && this.state.controlMap.get(\"AddPlasmaMasterFile\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditPlasmaMasterFile\") && this.state.controlMap.get(\"EditPlasmaMasterFile\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeletePlasmaMasterFile\") && this.state.controlMap.get(\"DeletePlasmaMasterFile\").ncontrolcode;\r\n\r\n        const PlasmaMasterFileAddParam = {\r\n            screenName: \"Plasma Master File\", operation: \"create\", primaryKeyField: \"nplasmafilecode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const PlasmaMasterFileEditParam = {\r\n            screenName: \"Plasma Master File\", operation: \"update\", primaryKeyField: \"nplasmafilecode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const PlasmaMasterFileDeleteParam = { screenName: \"PlasmaMasterFile\", methodUrl: \"PlasmaMasterFile\", operation: \"delete\", ncontrolCode: deleteId };\r\n\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    gridHeight = {\"600px\"}\r\n                                    primaryKeyField={\"nplasmafilecode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getPlasmaMasterFileComboService} //fetchRecord}\r\n                                    editParam={PlasmaMasterFileEditParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    addRecord={() => this.props.getPlasmaMasterFileComboService(PlasmaMasterFileAddParam)}\r\n                                    deleteParam={PlasmaMasterFileDeleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    scrollable={\"scrollable\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddPlasmaMasterFile\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                manufList={this.state.manufList || []}//{this.props.Login.manufList || []}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if(this.props.Login.manufList !== previousProps.Login.manufList ){\r\n\r\n            const  manufList  = constructOptionList(this.props.Login.manufList ||[], \"nmanufcode\",\r\n            \"smanufname\" , undefined, undefined, undefined);\r\n        const  manufListFile  = manufList.get(\"OptionList\");\r\n\r\n        this.setState({ manufList: manufListFile});\r\n    }\r\n    }\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    // onNumericInputOnChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (value === 0 || value === 0.0) {\r\n    //         selectedRecord[name] = '';\r\n    //         this.setState({ selectedRecord });\r\n    //     } else {\r\n    //         selectedRecord[name] = value;\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n    // }\r\n\r\n    deleteRecord = (deleteparam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteparam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                //[this.props.Login.inputParam.methodUrl.toLowerCase()]: selectedRecord.dataItem,\r\n                [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteparam.operation\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, //screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    //operation\r\n                    screenName: deleteparam.screenName, operation: deleteparam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId=null\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId=this.state.selectedRecord.nplasmafilecode\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n\r\n            inputData[\"plasmamasterfile\"][\"nmanufcode\"] = this.state.selectedRecord[\"nmanufcode\"] ? this.state.selectedRecord[\"nmanufcode\"].value : \"\";\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]?this.state.selectedRecord[item]:\"\"\r\n            })\r\n\r\n            inputData[\"plasmamasterfile\"][\"nmanufcode\"] = this.state.selectedRecord[\"nmanufcode\"] ? this.state.selectedRecord[\"nmanufcode\"].value : \"\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation, saveType, formRef, dataState,selectedId\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //let selectedRecord = {};\r\n        //this.setState({ selectedRecord });\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getPlasmaMasterFileComboService\r\n})(injectIntl(PlasmaMasterFile));"]},"metadata":{},"sourceType":"module"}