{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\ScreenRights.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, Button } from 'react-bootstrap';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport ScreenRightsFilter from './ScreenRightsFilter';\nimport AddScreenRights from './AddScreenRights';\nimport UserRoleScreenRights from './UserRoleScreenRights';\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getScreenRightsDetail, copyScreenRights, filterTransactionList, getScreenRightsComboService, comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, checkUserRoleScreenRights, reload } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ContentPanel, AtSubCard } from '../../components/App.styles';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { ProductList } from '../product/product.styled';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport SplitterLayout from 'react-splitter-layout';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component'; // import ReactTooltip from 'react-tooltip';\n\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ScreenRights extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      // if (event.dataState.group.length === 1 && event.dataState.group[0].field === 'screenname')\n      // {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.ControlRights || [], event.dataState),\n        dataState: event.dataState\n      }); //}\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      }); //this.setState({ ...this.state.dataState });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.switchGroupBy = event => {\n      const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      let dataState = this.state.dataState || {};\n\n      if (selectedSwitch === transactionStatus.YES) {\n        dataState = { ...dataState,\n          group: [{\n            field: 'screenname'\n          }]\n        };\n      } else {\n        dataState = {\n          skip: dataState.skip,\n          take: dataState.take\n        };\n      }\n\n      this.setState({\n        selectedSwitch,\n        dataState\n      });\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      // this.reloadData(this.state.selectedRecord, true);\n      if (this.state.selectedcombo[\"nuserrolecode\"]) {\n        this.props.comboChangeUserRoleScreenRights(this.state.selectedcombo, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"nuserrolecode\") {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.searchRef.current.value = \"\";\n          this.setState({\n            selectedcombo\n          }); // masterData[\"ControlRights\"]=[]\n          // this.props.comboChangeUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedcombo);\n        } else if (fieldName === \"value\") {\n          const comboitem = this.state.comboitem || {};\n          comboitem[fieldName] = comboData;\n          this.setState({\n            comboitem\n          });\n        } else if (fieldName === \"nformcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nformcode\"] = comboData;\n          let availableDatas = [];\n          this.state.selectedRecord.nformcode.map(data => {\n            return availableDatas.push(data.item);\n          });\n          this.setState({\n            selectedRecord,\n            availableDatas\n          });\n        }\n      }\n    };\n\n    this.onComboChangeUserRole = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {}; //this.state.selectedRecord || {};\n\n        selectedRecord[\"nuserrole\"] = comboData;\n\n        if (fieldName === \"nuserrole\") {\n          this.props.checkUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.saveClick = (selectedRecord, saveType, formRef) => {\n      let operation = \"update\";\n      let methodUrl = \"\";\n      let inputData = [];\n      let postParam = {\n        inputListName: \"ScreenRights\",\n        selectedObject: \"SelectedScreenRights\",\n        primaryKeyField: \"nuserrolescreencode\"\n      };\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\n      inputData[\"nflag\"] = transactionStatus.ACTIVE;\n      inputData[\"screenrights\"] = selectedRecord;\n\n      if (saveType === 1) {\n        inputData[\"nneedrights\"] = selectedRecord[\"nneedrights\"];\n        inputData[\"nneedesign\"] = null;\n        methodUrl = \"ControlRights\";\n      } else {\n        inputData[\"nneedesign\"] = selectedRecord[\"nneedesign\"];\n        methodUrl = \"Esign\";\n      }\n\n      const inputParam = {\n        classUrl: \"screenrights\",\n        methodUrl: methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam,\n        dataState: this.state.dataState\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      inputData[\"screenrights\"] = this.state.availableDatas;\n      inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\n      inputData[\"userrolecode\"] = this.state.selectedRecord[\"nuserrole\"] ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\n      inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ScreenRights\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        selectedRecord: this.state.selectedRecord,\n        searchRef: this.searchRef,\n        dataState: this.state.dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (this.props.Login.screenName === \"IDS_SCREENRIGHTS\") {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n          this.ConfirmComponent();\n        } else {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\n          }\n        }\n      }\n    };\n\n    this.copyAlertSave = () => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      inputData[\"screenrights\"] = this.state.availableDatas;\n      inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\n      inputData[\"userrolecode\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\n      inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ScreenRights\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            }\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\n      }\n    };\n\n    this.onSaveAllControlAndEsign = (skip, take, saveType, formRef) => {\n      let value = this.state.comboitem ? this.state.comboitem.value.value : this.ControlButton[0].value;\n      let operation = \"\";\n      let methodUrl = \"\";\n      let inputData = [];\n      let postParam = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo; // inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights.slice(skip, skip + take);\n\n      inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\n      inputData[\"nflag\"] = transactionStatus.DEACTIVE;\n      postParam = {\n        inputListName: \"ScreenRights\",\n        selectedObject: \"SelectedScreenRights\",\n        primaryKeyField: \"nuserrolescreencode\"\n      };\n\n      if (value === 1) {\n        inputData[\"nneedrights\"] = transactionStatus.YES;\n        inputData[\"nneedesign\"] = null;\n        operation = \"update\";\n        methodUrl = \"ControlRights\";\n      } else if (value === 2) {\n        inputData[\"nneedrights\"] = transactionStatus.NO;\n        inputData[\"nneedesign\"] = null;\n        operation = \"update\";\n        methodUrl = \"ControlRights\";\n      } else if (value === 3) {\n        inputData[\"nneedesign\"] = transactionStatus.YES;\n        operation = \"update\";\n        methodUrl = \"Esign\";\n      } else if (value === 4) {\n        inputData[\"nneedesign\"] = transactionStatus.NO;\n        operation = \"update\";\n        methodUrl = \"Esign\";\n      }\n\n      const inputParam = {\n        classUrl: \"screenrights\",\n        methodUrl: methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        selectedcombo: this.props.Login.selectedcombo\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      if (this.props.Login.masterData.SelectedUserRole) {\n        let comboitem = {}; //let selectedcombo= this.state.selectedcombo;\n\n        comboitem[\"value\"] = this.ControlButton[0];\n        this.searchRef.current.value = \"\";\n        this.props.Login.masterData.searchedData = undefined;\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: \"screenrights\",\n          methodUrl: \"ScreenRights\",\n          displayName: \"Screen Rights\",\n          userInfo: this.props.Login.userInfo,\n          comboitem,\n          nuserrolecode: this.props.Login.masterData.SelectedUserRole,\n          masterData: this.props.Login.masterData,\n          skip: this.state.skip,\n          take: this.state.take\n        };\n        this.props.reload(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'screenname' }]\n\n    };\n    this.searchFieldList = [\"sdisplayname\"];\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      isOpen: false,\n      ScreenRightsData: [],\n      userRoleData: [],\n      availableDatas: [],\n      selectedRecord: {},\n      userroleList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      SelectedScreenrights: undefined,\n      selectedcombo: undefined,\n      selectedcomboUserRole: undefined,\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      ConfirmDialogScreen: false,\n      controlMap: new Map(),\n      showAccordian: true,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.ControlButton = [{\n      value: 1,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 2,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 3,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLESIGNRIGHTS\"\n      })\n    }, {\n      value: 4,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLESIGNRIGHTS\"\n      })\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    // console.log(\"master:\", this.props.Login.masterData, this.state.dataResult)\n    const searchedData = this.props.Login.masterData.searchedData;\n    const ScreenRights = this.props.Login.masterData.ScreenRights || [];\n    const addId = this.state.controlMap.has(\"AddScreenRights\") && this.state.controlMap.get(\"AddScreenRights\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteScreenRights\") && this.state.controlMap.get(\"DeleteScreenRights\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyScreenRights\") && this.state.controlMap.get(\"CopyScreenRights\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"ScreenRights\",\n      selectedObject: \"SelectedScreenRights\",\n      primaryKeyField: \"nuserrolescreencode\",\n      fetchUrl: \"screenrights/getSearchScreenRights\",\n      userinfo: this.props.Login.userInfo,\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList,\n      changeList: [],\n      isSingleSelect: false\n    };\n    const mandatoryFieldsScreenRights = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SCREENRIGHTS\",\n      \"dataField\": \"nformcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsUsers = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"nuserrole\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; // let screenlen = searchedData ? searchedData.length : ScreenRights.length\n\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ?\n    /*#__PURE__*/\n    // <Affix top={64}>\n    React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }) // </Affix> \n    : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: searchedData || ScreenRights || [],\n      selectedMaster: this.props.Login.masterData.SelectedScreenRights,\n      primaryKeyField: \"nuserrolescreencode\",\n      getMasterDetail: this.props.getScreenRightsDetail,\n      inputParam: {\n        userinfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.dataState,\n        skip: this.state.skip,\n        take: this.state.take\n      },\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sdisplayname\",\n      selectedListName: \"SelectedScreenRights\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      objectName: \"screenrights\",\n      listName: \"IDS_SCREENRIGHTS\",\n      hideQuickSearch: true,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      hidePaging: false,\n      needFilter: true,\n      needAccordianFilter: false,\n      childTabsKey: [\"ControlRights\"],\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(ScreenRightsFilter, {\n          filterUserRole: this.state.userroleList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 49\n          }\n        })\n      }] // accordianfilterComponent={[\n      //     {\n      //         \"IDS_USERROLE\":\n      //             <ScreenRightsFilter\n      //                 filterUserRole={this.state.userroleList || []}\n      //                 selectedRecord={this.state.selectedcombo || {}}//\n      //                 onComboChange={this.onComboChange}\n      //             />\n      //     }\n      // ]}\n      ,\n      needMultiSelect: true,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip_list_wrap\"\n        ,\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getScreenRightsComboService(\"IDS_SCREENRIGHTS\", \"create\", this.props.Login.userInfo, this.state.selectedcombo, addId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": \"Reload\" //   data-for=\"tooltip_list_wrap\"\n        ,\n        onClick: () => this.reloadData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 49\n        }\n      }))) // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"pb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTROLRIGHTSANDESIGNRIGHTS\"\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex justify-content-end d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      role: \"button\" //    data-for=\"screenrights_wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1 //   data-for=\"screenrights_wrap\"\n      ,\n      onClick: () => this.props.getCopyUseRoleScreenRights(this.props.intl.formatMessage({\n        id: \"IDS_USERROLESCREENRIGHTS\"\n      }), \"copy\", copyId, this.state.selectedcombo, this.props.Login.userInfo, this.props.Login.masterData, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 77\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(AtSubCard, {\n      className: \"d-flex justify-content-start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"value\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECT\"\n      }),\n      value: this.state.comboitem ? this.state.comboitem[\"value\"] : this.ControlButton[0],\n      options: this.ControlButton,\n      optionId: \"label\",\n      optionValue: \"label\",\n      isMandatory: false,\n      isMulti: false,\n      isSearchable: false,\n      closeMenuOnSelect: true,\n      alphabeticalSort: false,\n      as: \"select\",\n      onChange: event => this.onComboChange(event, \"value\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 77\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey ml-2 \",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SAVE\"\n      }) //  data-for=\"screenrights_wrap\"\n      ,\n      onClick: () => this.onSaveAllControlAndEsign(this.state.skip, this.state.take),\n      role: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 81\n      }\n    }), \" \"))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      headerClassName: \"text-center\" //     data-for=\"screenrights_wrap\" \n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ENABLEDISABLEGROUPING\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 80\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      type: \"switch\",\n      id: \"groupbyswitch\",\n      onChange: event => this.switchGroupBy(event),\n      checked: this.state.selectedSwitch === transactionStatus.YES ? true : false,\n      name: \"groupbyswitch\",\n      parentClassName: \"paddingclass\" //data-tip={\"Enable to group by screen name\"}\n      // data-for=\"screenrights_wrap\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 85\n      }\n    }))))) : \"\", this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 59\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: \"scrollable\",\n      onExpandChange: this.expandChange,\n      expandField: \"expanded\",\n      pageable: {\n        buttonCount: 4,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\n        previousNext: false\n      } //data={this.state.dataResult}\n      ,\n      data: process(this.props.Login.masterData.ControlRights || [], this.state.dataState)\n    }, this.state.dataState, {\n      selectedField: \"selected\",\n      onDataStateChange: this.dataStateChange //  groupable={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"300px\",\n      field: \"screenname\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_SCREENNAME\"\n      }) //headerClassName=\"text-center\"\n      //groupable={this.isGroupable(\"screenname\")}\n      ,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        // className={selectedId === row[\"dataItem\"][\"screenname\"] ? 'active' : ''}\n        \"data-tip\": row[\"dataItem\"][\"screenname\"] //     data-for=\"tooltip_list_wrap\"\n        ,\n        style: {\n          textAlign: 'left'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"screenname\"]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 70\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"300px\",\n      field: \"scontrolids\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONTROLNAME\"\n      }) //headerClassName=\"text-center\"\n      ,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: 'left'\n        },\n        \"data-tip\": row[\"dataItem\"][\"scontrolids\"] //    data-for=\"tooltip_list_wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"scontrolids\"]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"250px\",\n      field: \"nneedrights\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONTROLRIGHTS\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedrights\"],\n        onChange: event => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedrights\", row.dataIndex, 1),\n        checked: row[\"dataItem\"][\"nneedrights\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 85\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"230px\",\n      field: \"nneedesign\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_ESIGN\"\n      }),\n      headerClassName: \"text-center\",\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 81\n        }\n      }, row[\"dataItem\"][\"nisesigncontrol\"] === 3 ? /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"nneedesign\"],\n        onChange: event => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedesign\", row.dataIndex, undefined),\n        checked: row[\"dataItem\"][\"nneedesign\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nuserrolescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        disabled: row[\"dataItem\"][\"nisesigncontrol\"] === transactionStatus.NO ? true : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 89\n        }\n      }) : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 69\n      }\n    })))) : \"\")))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_SCREENRIGHTS\" ? mandatoryFieldsScreenRights : mandatoryFieldsUsers,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_SCREENRIGHTS\" ? /*#__PURE__*/React.createElement(AddScreenRights, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        avaliableScreen: this.props.Login.AvaliableScreen,\n        operation: this.props.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(UserRoleScreenRights, {\n        selectedRecord: this.props.Login.masterData.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChangeUserRole,\n        operation: this.props.operation,\n        UserRole: this.props.Login.masterData.Userrole || [],\n        SelectedUserRole: this.state.selectedcombo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 21\n      }\n    }));\n  } // commonActions = (skip, take, testskip, testtake)=>{\n  //     const addId = this.state.controlMap.has(\"AddScreenRights\") && this.state.controlMap.get(\"AddScreenRights\").ncontrolcode;\n  //     return(\n  //          // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n  //          <ProductList className=\"d-flex product-category float-right\">\n  //          {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\n  //          <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \n  //              data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \n  //              data-for=\"tooltip_list_wrap\"\n  //              role=\"button\"\n  //              hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\n  //              onClick={() => this.props.getScreenRightsComboService(\"IDS_SCREENRIGHTS\", \"create\", this.props.Login.userInfo, this.state.selectedcombo, addId)}>\n  //              <FontAwesomeIcon icon={faPlus} />\n  //          </Button>\n  //          <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\n  //              data-tip={\"Reload\"}\n  //              data-for=\"tooltip_list_wrap\"\n  //              onClick={() => this.reloadData()} >\n  //              <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\n  //          </Button>\n  //      </ProductList>\n  //      // </Tooltip>\n  //     )\n  // }\n\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.userrole) {\n      breadCrumbData.push({\n        \"label\": \"IDS_USERROLE\",\n        \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\"\n      });\n    } else {\n      breadCrumbData.push({\n        \"label\": \"IDS_USERROLE\",\n        \"value\": \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    // ReactTooltip.rebuild();\n    const masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.selectedcombo !== previousProps.Login.selectedcombo) {\n      this.setState({\n        selectedcombo: this.props.Login.selectedcombo\n      });\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      this.setState({\n        comboitem: this.props.Login.comboitem\n      });\n    }\n\n    if (this.props.Login.masterData.AvaliableScreen !== previousProps.Login.masterData.AvaliableScreen || this.props.Login.masterData.SelectedUserRole !== previousProps.Login.masterData.SelectedUserRole) {\n      let skip = this.state.skip;\n      let take = this.state.take;\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      this.setState({\n        skip,\n        take\n      });\n    } //     if(this.props.Login.masterData.ControlRights !== previousProps.Login.masterData.ControlRights){\n    //         let skip=this.state.skip;\n    //         let take=this.state.take;\n    //         let dataState=this.state.dataState\n    //         if (this.props.Login.dataState !== previousProps.Login.dataState) {\n    //             dataState = this.props.Login.dataState || this.state.dataState\n    //             dataState= {skip: dataState.skip,\n    //             take: dataState.take\n    //             , group: [{ field: 'screenname' }]} \n    //             if(this.props.Login.dataState===undefined){\n    //                 dataState= {skip: 0,\n    //                     take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    //                     , group: [{ field: 'screenname' }]} \n    //             }\n    //     }\n    //     skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\n    //     take = this.props.Login.take || take\n    //     this.setState({ dataState , dataResult: process(this.props.Login.masterData.ControlRights || [], dataState),skip,take});\n    // }\n    // if(this.props.Login.masterData.ControlRights !== previousProps.Login.masterData.ControlRights){\n    //     this.setState({\n    //           dataResult: process(this.props.Login.masterData.ControlRights || [], this.state.dataState)\n    //     })\n    // }\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRightst\n      });\n    }\n\n    if (this.props.Login.masterData.userrole !== previousProps.Login.masterData.userrole) {\n      const userrole = constructOptionList(this.props.Login.masterData.userrole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, undefined);\n      const userroleList = userrole.get(\"OptionList\");\n      const selectedcombo = {\n        nuserrolecode: masterData.userrole && masterData.userrole.length > 0 ? {\n          \"value\": masterData.userrole[0].nuserrolecode,\n          \"label\": masterData.userrole[0].suserrolename\n        } : \"\"\n      };\n      this.setState({\n        selectedcombo: selectedcombo,\n        userroleList: userroleList\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData(); // let dataState = this.state.dataState || {};\n      // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\n\n      this.setState({\n        filterData //, dataState\n\n      });\n    }\n  }\n\n  onInputOnControlRights(event, rowItem, columnName, rowIndex, saveType) {\n    const selectedRecord = rowItem || {};\n    selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n    this.saveClick(selectedRecord, saveType, undefined);\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    const fieldArray = [];\n    this.props.Login.masterData.SelectedScreenRights.map(item => fieldArray.push(item.nuserrolescreencode));\n    let postParam = {\n      inputListName: \"ScreenRights\",\n      selectedObject: \"SelectedScreenRights\",\n      primaryKeyField: \"nuserrolescreencode\",\n      primaryKeyValue: fieldArray,\n      fetchUrl: \"screenrights/getScreenRights\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      }\n    };\n    modalName = 'openModal';\n    const inputParam = {\n      methodUrl: \"ScreenRights\",\n      classUrl: \"screenrights\",\n      inputData: {\n        \"screenrights\": this.props.Login.masterData.SelectedScreenRights,\n        \"userinfo\": this.props.Login.userInfo,\n        \"nuserrolecode\": this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\"\n      },\n      operation: \"delete\",\n      postParam,\n      displayName: \"Screen Rights\" // dataState: this.state.dataState\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          [modalName]: true,\n          operation: 'delete',\n          screenName: \"ScreenRights\",\n          id: \"screenrights\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, modalName);\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  reload,\n  crudMaster,\n  validateEsignCredential,\n  filterTransactionList,\n  updateStore,\n  getScreenRightsDetail,\n  getScreenRightsComboService,\n  comboChangeUserRoleScreenRights,\n  handleClickDelete,\n  filterColumnData,\n  getCopyUseRoleScreenRights,\n  copyScreenRights,\n  checkUserRoleScreenRights\n})(injectIntl(ScreenRights));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/credentialmanagement/ScreenRights.jsx"],"names":["React","connect","injectIntl","Row","Col","Nav","Card","Button","Grid","GridColumn","process","toast","FontAwesomeIcon","faTrashAlt","faSave","faCopy","faPlus","faSync","FormSelectSearch","CustomSwitch","SlideOutModal","Esign","ScreenRightsFilter","AddScreenRights","UserRoleScreenRights","showEsign","getControlMap","constructOptionList","callService","crudMaster","validateEsignCredential","updateStore","getScreenRightsDetail","copyScreenRights","filterTransactionList","getScreenRightsComboService","comboChangeUserRoleScreenRights","handleClickDelete","filterColumnData","getCopyUseRoleScreenRights","checkUserRoleScreenRights","reload","DEFAULT_RETURN","transactionStatus","ContentPanel","AtSubCard","AtTableWrap","TransactionListMaster","ProductList","ConfirmMessage","PerfectScrollbar","SplitterLayout","BreadcrumbComponent","LocalizationProvider","mapStateToProps","state","Login","ScreenRights","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","ControlRights","dataState","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","paneSizeChange","d","splitChangeWidthPercentage","switchGroupBy","selectedSwitch","target","checked","YES","NO","group","field","skip","take","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","selectedcombo","userInfo","warn","handlePageChange","e","validateEsign","inputParam","inputData","sreason","selectedRecord","password","screenData","closeModal","loadEsign","openModal","operation","selectedId","onComboChange","comboData","fieldName","searchRef","current","value","comboitem","availableDatas","nformcode","map","push","item","onComboChangeUserRole","onInputOnChange","type","name","ACTIVE","DEACTIVE","saveClick","saveType","formRef","methodUrl","postParam","inputListName","selectedObject","primaryKeyField","SelectedScreenRights","classUrl","displayName","onSaveClick","screenName","userRoleControlRights","ncontrolCode","length","ConfirmComponent","copyAlertSave","onSaveAllControlAndEsign","ControlButton","reloadData","SelectedUserRole","searchedData","nuserrolecode","settings","parseInt","searchFieldList","masterStatus","error","isOpen","ScreenRightsData","userRoleData","userroleList","SelectedScreenrights","selectedcomboUserRole","ConfirmDialogScreen","controlMap","Map","showAccordian","columnName","rowIndex","createRef","label","getDerivedStateFromProps","render","addId","has","get","ncontrolcode","copyId","filterParam","fetchUrl","userinfo","fecthInputObject","changeList","isSingleSelect","mandatoryFieldsScreenRights","mandatoryFieldsUsers","breadCrumbData","filterData","parentHeight","indexOf","slanguagetypecode","buttonCount","pageSizes","split","setting","previousNext","row","rowType","textAlign","onInputOnControlRights","dataIndex","columnIndex","AvaliableScreen","Userrole","componentDidMount","height","clientHeight","firstPane","generateBreadCrumData","userrole","suserrolename","componentDidUpdate","previousProps","Object","values","ControlRightst","rowItem","componentWillUnmount","modalName","fieldArray","nuserrolescreencode","primaryKeyValue"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, Button } from 'react-bootstrap';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport ScreenRightsFilter from './ScreenRightsFilter';\r\nimport AddScreenRights from './AddScreenRights';\r\nimport UserRoleScreenRights from './UserRoleScreenRights';\r\nimport { showEsign, getControlMap, constructOptionList } from '../../components/CommonScript';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getScreenRightsDetail, copyScreenRights, filterTransactionList,\r\n    getScreenRightsComboService, comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, checkUserRoleScreenRights, reload\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ContentPanel, AtSubCard } from '../../components/App.styles';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { ProductList } from '../product/product.styled';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport {  LocalizationProvider } from '@progress/kendo-react-intl';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ScreenRights extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n            //, group: [{ field: 'screenname' }]\r\n        };\r\n        this.searchFieldList = [\"sdisplayname\"]\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            isOpen: false,\r\n            ScreenRightsData: [], userRoleData: [],\r\n            availableDatas: [],\r\n            selectedRecord: {},\r\n            userroleList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            SelectedScreenrights: undefined,\r\n            selectedcombo: undefined, selectedcomboUserRole: undefined,\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            ConfirmDialogScreen: false,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n             rowIndex: 0, \r\n             data: [], \r\n             splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.ControlButton = [{ value: 1, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 2, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 3, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLESIGNRIGHTS\" }) },\r\n        { value: 4, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLESIGNRIGHTS\" }) }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n       // if (event.dataState.group.length === 1 && event.dataState.group[0].field === 'screenname')\r\n       // {\r\n            this.setState({\r\n                dataResult: process(this.props.Login.masterData.ControlRights || [], event.dataState),\r\n                dataState: event.dataState\r\n            });\r\n        //}\r\n    }\r\n\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n        //this.setState({ ...this.state.dataState });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n\r\n       // console.log(\"master:\", this.props.Login.masterData, this.state.dataResult)\r\n        const searchedData = this.props.Login.masterData.searchedData \r\n        const ScreenRights = this.props.Login.masterData.ScreenRights || [];\r\n        const addId = this.state.controlMap.has(\"AddScreenRights\") && this.state.controlMap.get(\"AddScreenRights\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteScreenRights\") && this.state.controlMap.get(\"DeleteScreenRights\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyScreenRights\") && this.state.controlMap.get(\"CopyScreenRights\").ncontrolcode;\r\n        const filterParam = {\r\n            inputListName: \"ScreenRights\",\r\n            selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nuserrolescreencode\",\r\n            fetchUrl: \"screenrights/getSearchScreenRights\",\r\n            userinfo: this.props.Login.userInfo,\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList, changeList: [], isSingleSelect: false\r\n        };\r\n\r\n        const mandatoryFieldsScreenRights = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_SCREENRIGHTS\", \"dataField\": \"nformcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n\r\n        const mandatoryFieldsUsers = [{ \"mandatory\": true, \"idsName\": \"IDS_USERROLE\", \"dataField\": \"nuserrole\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n        // let screenlen = searchedData ? searchedData.length : ScreenRights.length\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\"/> */}\r\n                <div className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        // <Affix top={64}>\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        // </Affix> \r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout borderColor=\"#999\"\r\n                             percentage={true} primaryIndex={1}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                              >\r\n                                <TransactionListMaster\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={searchedData || ScreenRights || []}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedScreenRights}\r\n                                    primaryKeyField=\"nuserrolescreencode\"\r\n                                    getMasterDetail={this.props.getScreenRightsDetail}\r\n                                    inputParam={{ userinfo: this.props.Login.userInfo,\r\n                                         masterData: this.props.Login.masterData,\r\n                                          dataState: this.state.dataState,skip:this.state.skip,take:this.state.take }}\r\n                                    additionalParam={['napprovalversioncode']}\r\n                                    mainField=\"sdisplayname\"\r\n                                    selectedListName=\"SelectedScreenRights\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    objectName=\"screenrights\"\r\n                                    listName=\"IDS_SCREENRIGHTS\"\r\n                                    hideQuickSearch={true}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}   \r\n                                    handlePageChange={this.handlePageChange}\r\n                                    hidePaging={false}\r\n                                    needFilter={true}\r\n                                    needAccordianFilter={false}\r\n                                    childTabsKey={[\"ControlRights\"]}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_FILTER\":\r\n                                                <ScreenRightsFilter\r\n                                                    filterUserRole={this.state.userroleList || []}\r\n                                                    selectedRecord={this.state.selectedcombo || {}}//\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                    // accordianfilterComponent={[\r\n                                    //     {\r\n                                    //         \"IDS_USERROLE\":\r\n                                    //             <ScreenRightsFilter\r\n                                    //                 filterUserRole={this.state.userroleList || []}\r\n                                    //                 selectedRecord={this.state.selectedcombo || {}}//\r\n                                    //                 onComboChange={this.onComboChange}\r\n                                    //             />\r\n                                    //     }\r\n                                    // ]}\r\n                                    needMultiSelect={true}\r\n                                    commonActions={\r\n                                          // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                            <ProductList className=\"d-flex product-category float-right\">\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n                                              //  data-for=\"tooltip_list_wrap\"\r\n                                                role=\"button\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.props.getScreenRightsComboService(\"IDS_SCREENRIGHTS\", \"create\", this.props.Login.userInfo, this.state.selectedcombo, addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                data-tip={\"Reload\"}\r\n                                             //   data-for=\"tooltip_list_wrap\"\r\n                                                onClick={() => this.reloadData()} >\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                        // </Tooltip>\r\n                                    }\r\n                                />\r\n                                {/* <PerfectScrollbar> */}\r\n                                {/* <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400} customClassName=\"fixed_list_height\"> */}\r\n                                {/* <Col md={9}> */}\r\n                                <PerfectScrollbar>\r\n                                    <div className=\"fixed_list_height\">\r\n                                        <Row >\r\n                                            <Col md={12}>\r\n                                                <ContentPanel className=\"panel-main-content\">\r\n                                                    <Card className=\"border-0\">\r\n                                                        {this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ?\r\n                                                            <>\r\n                                                            \r\n                                                                <Card.Header className=\"pb-4\" >\r\n                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"screenrights_wrap\"/> */}\r\n                                                                    <Card.Title>\r\n                                                                        <p className=\"product-title-main\">\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_CONTROLRIGHTSANDESIGNRIGHTS\" })}\r\n                                                                        </p>\r\n                                                                    </Card.Title>\r\n                                                                    <ContentPanel className=\"d-flex justify-content-end d-inline\">\r\n                                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" \r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1} \r\n                                                                            role=\"button\"\r\n                                                                        //    data-for=\"screenrights_wrap\"\r\n                                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            {/* <ConfirmDialog\r\n                                                                                    name=\"deleteMessage\"\r\n                                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                    icon={faTrashAlt}\r\n                                                                                    //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                    handleClickDelete={() => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\")}\r\n                                                                                /> */}\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" \r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })} \r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                         //   data-for=\"screenrights_wrap\"\r\n                                                                            onClick={() => this.props.getCopyUseRoleScreenRights(this.props.intl.formatMessage({ id: \"IDS_USERROLESCREENRIGHTS\" }), \"copy\", copyId, this.state.selectedcombo, this.props.Login.userInfo, this.props.Login.masterData, 2)}>\r\n                                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                                        </Nav.Link>\r\n                                                                        {/* </Tooltip> */}\r\n                                                                    </ContentPanel>\r\n                                                                </Card.Header>\r\n                                                                <Row>\r\n                                                                    <Col md='6'>\r\n                                                                        <AtSubCard className=\"d-flex justify-content-start\">\r\n                                                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                            <FormSelectSearch\r\n                                                                                name={\"value\"}\r\n                                                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECT\" })}\r\n                                                                                value={this.state.comboitem ? this.state.comboitem[\"value\"] : this.ControlButton[0]}\r\n                                                                                options={this.ControlButton}\r\n                                                                                optionId=\"label\"\r\n                                                                                optionValue=\"label\"\r\n                                                                                isMandatory={false}\r\n                                                                                isMulti={false}\r\n                                                                                isSearchable={false}\r\n                                                                                closeMenuOnSelect={true}\r\n                                                                                alphabeticalSort={false}\r\n                                                                                as={\"select\"}\r\n                                                                                onChange={(event) => this.onComboChange(event, \"value\")}\r\n                                                                            />\r\n                                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey ml-2 \"\r\n                                                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_SAVE\" })} \r\n                                                                               //  data-for=\"screenrights_wrap\"\r\n                                                                                 onClick={() => this.onSaveAllControlAndEsign(this.state.skip, this.state.take)}\r\n                                                                                 role=\"button\">\r\n                                                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                                            </Nav.Link>\r\n                                                                            {/* </Tooltip> */}\r\n                                                                        </AtSubCard>\r\n                                                                    </Col>\r\n                                                                    {/* <Col md='6' >\r\n                                                                        <Row>\r\n                                                                            <Col md={12}>\r\n                                                                                <strong>\r\n                                                                                    {this.props.intl.formatMessage({ id: \"Enable/Disable Grouping\" })}\r\n                                                                                </strong>\r\n                                                                            </Col> */}\r\n                                                                            <Col>\r\n                                                                               <span    headerClassName=\"text-center\" \r\n                                                                                   //     data-for=\"screenrights_wrap\" \r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ENABLEDISABLEGROUPING\" })}>\r\n                                                                            \r\n                                                                                    <CustomSwitch   type=\"switch\" \r\n                                                                                            id={\"groupbyswitch\"}\r\n                                                                                            onChange={(event) => this.switchGroupBy(event)}\r\n                                                                                            checked={this.state.selectedSwitch === transactionStatus.YES ? true : false}\r\n                                                                                            name={\"groupbyswitch\"} \r\n                                                                                            parentClassName= {\"paddingclass\"}\r\n                                                                                            //data-tip={\"Enable to group by screen name\"}\r\n                                                                                           // data-for=\"screenrights_wrap\"\r\n                                                                                            />\r\n                                                                                </span>\r\n                                                                            </Col>\r\n                                                                        {/* </Row>\r\n                                                                    </Col>*/}\r\n                                                                </Row> \r\n                                                            </> :\r\n                                                            \"\"}\r\n                                                        {this.props.Login.masterData.ScreenRights && this.props.Login.masterData.ScreenRights.length > 0 && this.props.Login.masterData.SelectedScreenRights ?\r\n                                                            <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                                                          <AtTableWrap className=\"at-list-table\">\r\n                                                                <Grid\r\n                                                                    sortable\r\n                                                                    resizable\r\n                                                                    reorderable={false}\r\n                                                                    scrollable={\"scrollable\"}\r\n                                                                    onExpandChange={this.expandChange}\r\n                                                                    expandField=\"expanded\"\r\n                                                                    pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)), previousNext: false}}\r\n                                                                    //data={this.state.dataResult}\r\n                                                                    data={process(this.props.Login.masterData.ControlRights || [], this.state.dataState)}\r\n                                                                    {...this.state.dataState}\r\n                                                                    selectedField=\"selected\"\r\n                                                                    onDataStateChange={this.dataStateChange}\r\n                                                                  //  groupable={true}\r\n                                                                >\r\n                                                                     <GridColumn width=\"300px\"\r\n                                                                        field=\"screenname\"\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_SCREENNAME\" })}\r\n                                                                        //headerClassName=\"text-center\"\r\n                                                                        //groupable={this.isGroupable(\"screenname\")}\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                           \r\n                                                                                <td \r\n                                                                                   // className={selectedId === row[\"dataItem\"][\"screenname\"] ? 'active' : ''}\r\n                                                                                    data-tip={row[\"dataItem\"][\"screenname\"]}\r\n                                                                               //     data-for=\"tooltip_list_wrap\"\r\n                                                                                    style={{textAlign: 'left' }}>\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                                    {row[\"dataItem\"][\"screenname\"]}\r\n                                                                                </td>)}\r\n                                                                    />\r\n                                                                    <GridColumn width=\"300px\"\r\n                                                                        field=\"scontrolids\"\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_CONTROLNAME\" })}\r\n                                                                        //headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td \r\n                                                                                    style={{textAlign: 'left' }}\r\n                                                                                    data-tip={row[\"dataItem\"][\"scontrolids\"]} \r\n                                                                                //    data-for=\"tooltip_list_wrap\"\r\n                                                                                    >\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                                    {row[\"dataItem\"][\"scontrolids\"]}\r\n                                                                                </td>)}\r\n                                                                    />\r\n\r\n                                                                    <GridColumn width=\"250px\"\r\n                                                                        field={\"nneedrights\"}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_CONTROLRIGHTS\" })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td style={{ textAlign: \"center\" }} >\r\n                                                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedrights\"]}\r\n                                                                                        onChange={(event) => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedrights\", row.dataIndex, 1)}\r\n                                                                                        checked={row[\"dataItem\"][\"nneedrights\"] === transactionStatus.YES ? true : false}\r\n                                                                                        name={row[\"dataItem\"][\"nuserrolescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                                </td>)}\r\n                                                                    />\r\n                                                                    <GridColumn width=\"230px\"\r\n                                                                        field={\"nneedesign\"}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_ESIGN\" })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            row.rowType === \"groupHeader\" ? null :\r\n                                                                                <td style={{ textAlign: \"center\" }} >\r\n                                                                                    {row[\"dataItem\"][\"nisesigncontrol\"] === 3 ?\r\n                                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][\"nneedesign\"]}\r\n                                                                                            onChange={(event) => this.onInputOnControlRights(event, row[\"dataItem\"], \"nneedesign\", row.dataIndex, undefined)}\r\n                                                                                            checked={row[\"dataItem\"][\"nneedesign\"] === transactionStatus.YES ? true : false}\r\n                                                                                            name={row[\"dataItem\"][\"nuserrolescreencode\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                                            disabled={row[\"dataItem\"][\"nisesigncontrol\"] === transactionStatus.NO ? true : false}\r\n                                                                                        /> :\r\n                                                                                        \"\"\r\n                                                                                    }\r\n                                                                                </td>\r\n                                                                        )\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Grid>\r\n                                                            </AtTableWrap>\r\n                                                            </LocalizationProvider>\r\n                                                            : \"\"}\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                </PerfectScrollbar>\r\n                                {/* </SplitterLayout> */}\r\n                                {/* </PerfectScrollbar> */}\r\n                            </SplitterLayout >\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display*/}\r\n                {}\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName === \"IDS_SCREENRIGHTS\" ? mandatoryFieldsScreenRights : mandatoryFieldsUsers}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.screenName === \"IDS_SCREENRIGHTS\" ?\r\n                                <AddScreenRights selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    avaliableScreen={this.props.Login.AvaliableScreen}\r\n                                    operation={this.props.operation}\r\n                                />\r\n                                :\r\n                                <UserRoleScreenRights selectedRecord={this.props.Login.masterData.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChangeUserRole}\r\n                                    operation={this.props.operation}\r\n                                    UserRole={this.props.Login.masterData.Userrole || []}\r\n                                    SelectedUserRole={this.state.selectedcombo}\r\n                                />\r\n                        }\r\n                    />\r\n                }\r\n                {}\r\n            </>\r\n        );\r\n    }\r\n\r\n    // commonActions = (skip, take, testskip, testtake)=>{\r\n    //     const addId = this.state.controlMap.has(\"AddScreenRights\") && this.state.controlMap.get(\"AddScreenRights\").ncontrolcode;\r\n      \r\n    //     return(\r\n    //          // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n    //          <ProductList className=\"d-flex product-category float-right\">\r\n    //          {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n    //          <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n    //              data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n    //              data-for=\"tooltip_list_wrap\"\r\n    //              role=\"button\"\r\n    //              hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n    //              onClick={() => this.props.getScreenRightsComboService(\"IDS_SCREENRIGHTS\", \"create\", this.props.Login.userInfo, this.state.selectedcombo, addId)}>\r\n    //              <FontAwesomeIcon icon={faPlus} />\r\n    //          </Button>\r\n    //          <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n    //              data-tip={\"Reload\"}\r\n    //              data-for=\"tooltip_list_wrap\"\r\n    //              onClick={() => this.reloadData()} >\r\n    //              <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n    //          </Button>\r\n    //      </ProductList>\r\n    //      // </Tooltip>\r\n    //     )\r\n    // }\r\n\r\n    switchGroupBy = (event)=>{\r\n       \r\n        const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        let dataState = this.state.dataState || {};\r\n         if (selectedSwitch === transactionStatus.YES){\r\n            dataState= {...dataState, group: [{ field: 'screenname' }]} ;\r\n         }\r\n        else{\r\n            dataState= {skip: dataState.skip,  take: dataState.take} \r\n        }\r\n        this.setState({selectedSwitch, dataState});\r\n    }\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        // this.reloadData(this.state.selectedRecord, true);\r\n        if (this.state.selectedcombo[\"nuserrolecode\"]) {\r\n            this.props.comboChangeUserRoleScreenRights(this.state.selectedcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.userrole) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_USERROLE\",\r\n                    \"value\": this.props.Login.masterData.SelectedUserRole ? this.props.Login.masterData.SelectedUserRole.suserrolename : \"NA\"\r\n\r\n                },\r\n            );\r\n        } else {\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_USERROLE\",\r\n                    \"value\": \"NA\"\r\n\r\n                },\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) { \r\n        // ReactTooltip.rebuild();\r\n        const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n\r\n        }\r\n        if (this.props.Login.selectedcombo !== previousProps.Login.selectedcombo) {\r\n            this.setState({ selectedcombo: this.props.Login.selectedcombo });\r\n        }\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            this.setState({ comboitem: this.props.Login.comboitem });\r\n        }\r\n        if(this.props.Login.masterData.AvaliableScreen !== previousProps.Login.masterData.AvaliableScreen\r\n            || this.props.Login.masterData.SelectedUserRole !== previousProps.Login.masterData.SelectedUserRole){\r\n            let skip=this.state.skip;\r\n            let take=this.state.take;\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\r\n            take = this.props.Login.take || take;        \r\n\r\n            this.setState({ skip,take});          \r\n        }\r\n   \r\n\r\n    //     if(this.props.Login.masterData.ControlRights !== previousProps.Login.masterData.ControlRights){\r\n\r\n    //         let skip=this.state.skip;\r\n    //         let take=this.state.take;\r\n\r\n    //         let dataState=this.state.dataState\r\n    //         if (this.props.Login.dataState !== previousProps.Login.dataState) {\r\n               \r\n    //             dataState = this.props.Login.dataState || this.state.dataState\r\n    //             dataState= {skip: dataState.skip,\r\n    //             take: dataState.take\r\n    //             , group: [{ field: 'screenname' }]} \r\n    //             if(this.props.Login.dataState===undefined){\r\n    //                 dataState= {skip: 0,\r\n    //                     take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n    //                     , group: [{ field: 'screenname' }]} \r\n    //             }\r\n            \r\n    //     }\r\n    //     skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n    //     take = this.props.Login.take || take\r\n\r\n    //     this.setState({ dataState , dataResult: process(this.props.Login.masterData.ControlRights || [], dataState),skip,take});\r\n    // }\r\n        // if(this.props.Login.masterData.ControlRights !== previousProps.Login.masterData.ControlRights){\r\n        //     this.setState({\r\n        //           dataResult: process(this.props.Login.masterData.ControlRights || [], this.state.dataState)\r\n        //     })\r\n        // }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRightst\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.userrole !== previousProps.Login.masterData.userrole) {\r\n            const userrole = constructOptionList(this.props.Login.masterData.userrole || [], \"nuserrolecode\",\r\n                \"suserrolename\", undefined, undefined, undefined);\r\n            const userroleList = userrole.get(\"OptionList\");\r\n\r\n            const selectedcombo = {\r\n                nuserrolecode: masterData.userrole&&masterData.userrole.length > 0 ? {\r\n                    \"value\": masterData.userrole[0].nuserrolecode,\r\n                    \"label\": masterData.userrole[0].suserrolename\r\n                } : \"\"\r\n            }\r\n            this.setState({\r\n                selectedcombo: selectedcombo,\r\n                userroleList: userroleList\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n\r\n            // let dataState = this.state.dataState || {};\r\n            // dataState= {...dataState, group: [{ field: 'screenname' }]} ;\r\n\r\n            this.setState({ filterData//, dataState\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nuserrolecode\") {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ selectedcombo });\r\n                // masterData[\"ControlRights\"]=[]\r\n                // this.props.comboChangeUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedcombo);\r\n            }\r\n            else if (fieldName === \"value\") {\r\n                const comboitem = this.state.comboitem || {};\r\n                comboitem[fieldName] = comboData;\r\n                this.setState({ comboitem });\r\n            }\r\n            else if (fieldName === \"nformcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nformcode\"] = comboData;\r\n                let availableDatas = [];\r\n                this.state.selectedRecord.nformcode.map(data => {\r\n                    return availableDatas.push(data.item);\r\n                });\r\n                this.setState({ selectedRecord, availableDatas });\r\n            }\r\n        }\r\n    }\r\n\r\n    onComboChangeUserRole = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {}; //this.state.selectedRecord || {};\r\n            selectedRecord[\"nuserrole\"] = comboData;\r\n            if (fieldName === \"nuserrole\") {\r\n                this.props.checkUserRoleScreenRights(comboData.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnControlRights(event, rowItem, columnName, rowIndex, saveType) {\r\n        const selectedRecord = rowItem || {};\r\n        selectedRecord[columnName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        this.saveClick(selectedRecord, saveType, undefined);\r\n    }\r\n\r\n    saveClick = (selectedRecord, saveType, formRef) => {\r\n        let operation = \"update\";\r\n        let methodUrl = \"\";\r\n        let inputData = [];\r\n        let postParam = {\r\n            inputListName: \"ScreenRights\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nuserrolescreencode\"\r\n        }\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\r\n        inputData[\"nflag\"] = transactionStatus.ACTIVE;\r\n        inputData[\"screenrights\"] = selectedRecord;\r\n        if (saveType === 1) {\r\n            inputData[\"nneedrights\"] = selectedRecord[\"nneedrights\"];\r\n            inputData[\"nneedesign\"] = null;\r\n            methodUrl = \"ControlRights\";\r\n        }\r\n        else {\r\n            inputData[\"nneedesign\"] = selectedRecord[\"nneedesign\"];\r\n            methodUrl = \"Esign\";\r\n        }\r\n        const inputParam = {\r\n            classUrl: \"screenrights\",\r\n            methodUrl: methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, searchRef: this.searchRef, postParam,dataState: this.state.dataState\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        inputData[\"screenrights\"] = this.state.availableDatas;\r\n        inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"userrolecode\"] = this.state.selectedRecord[\"nuserrole\"] ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\r\n        inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ScreenRights\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n            searchRef: this.searchRef,\r\n            dataState: this.state.dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.screenName === \"IDS_SCREENRIGHTS\") {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                this.ConfirmComponent()\r\n            }\r\n            else {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    copyAlertSave = () => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        inputData[\"screenrights\"] = this.state.availableDatas;\r\n        inputData[\"nuserrolecode\"] = this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\";\r\n        inputData[\"userrolecode\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\";\r\n        inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ScreenRights\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.copyScreenRights(this.state.selectedRecord ? this.state.selectedRecord[\"nuserrole\"].value : \"\", this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\", this.props.Login.userInfo, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    onSaveAllControlAndEsign = (skip,take,saveType, formRef) => {\r\n        let value = this.state.comboitem ? this.state.comboitem.value.value : this.ControlButton[0].value\r\n        let operation = \"\";\r\n        let methodUrl = \"\";\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n       // inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights.slice(skip, skip + take);\r\n        inputData[\"selectedscreenrights\"] = this.props.Login.masterData.SelectedScreenRights;\r\n        inputData[\"nflag\"] = transactionStatus.DEACTIVE;\r\n        postParam = {\r\n            inputListName: \"ScreenRights\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nuserrolescreencode\"\r\n        }\r\n        if (value === 1) {\r\n            inputData[\"nneedrights\"] = transactionStatus.YES;\r\n            inputData[\"nneedesign\"] = null;\r\n            operation = \"update\";\r\n            methodUrl = \"ControlRights\";\r\n        }\r\n        else if (value === 2) {\r\n            inputData[\"nneedrights\"] = transactionStatus.NO;\r\n            inputData[\"nneedesign\"] = null;\r\n            operation = \"update\";\r\n            methodUrl = \"ControlRights\";\r\n        }\r\n        else if (value === 3) {\r\n            inputData[\"nneedesign\"] = transactionStatus.YES;\r\n            operation = \"update\";\r\n            methodUrl = \"Esign\";\r\n        }\r\n        else if (value === 4) {\r\n            inputData[\"nneedesign\"] = transactionStatus.NO;\r\n            operation = \"update\";\r\n            methodUrl = \"Esign\";\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: \"screenrights\",\r\n            methodUrl: methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType,\r\n             formRef, postParam, \r\n             searchRef: this.searchRef, \r\n             selectedcombo: this.props.Login.selectedcombo,\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        const fieldArray = [];\r\n        this.props.Login.masterData.SelectedScreenRights.map(item => fieldArray.push(item.nuserrolescreencode));\r\n        let postParam = {\r\n            inputListName: \"ScreenRights\", selectedObject: \"SelectedScreenRights\",\r\n            primaryKeyField: \"nuserrolescreencode\",\r\n            primaryKeyValue: fieldArray,\r\n            fetchUrl: \"screenrights/getScreenRights\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        modalName = 'openModal'\r\n\r\n        const inputParam = {\r\n            methodUrl: \"ScreenRights\",\r\n            classUrl: \"screenrights\",\r\n            inputData: { \"screenrights\": this.props.Login.masterData.SelectedScreenRights, \"userinfo\": this.props.Login.userInfo, \"nuserrolecode\": this.state.selectedcombo[\"nuserrolecode\"] ? this.state.selectedcombo[\"nuserrolecode\"].value : \"\" },\r\n            operation: \"delete\", postParam,\r\n            displayName: \"Screen Rights\",\r\n           // dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                    operation: 'delete', screenName: \"ScreenRights\", id: \"screenrights\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, modalName);\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        if (this.props.Login.masterData.SelectedUserRole) {\r\n            let comboitem = {}\r\n            //let selectedcombo= this.state.selectedcombo;\r\n            comboitem[\"value\"] = this.ControlButton[0];\r\n            this.searchRef.current.value = \"\";\r\n            this.props.Login.masterData.searchedData= undefined;\r\n            const inputParam = {\r\n                inputData: { \"userinfo\": this.props.Login.userInfo },\r\n                classUrl: \"screenrights\",\r\n                methodUrl: \"ScreenRights\",\r\n                displayName: \"Screen Rights\",\r\n                userInfo: this.props.Login.userInfo,\r\n                comboitem,\r\n                nuserrolecode: this.props.Login.masterData.SelectedUserRole,\r\n                masterData: this.props.Login.masterData,\r\n                skip:this.state.skip,\r\n                take:this.state.take\r\n\r\n            };\r\n            this.props.reload(inputParam);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, reload, crudMaster, validateEsignCredential, filterTransactionList,\r\n    updateStore, getScreenRightsDetail, getScreenRightsComboService, comboChangeUserRoleScreenRights, handleClickDelete, filterColumnData, getCopyUseRoleScreenRights, copyScreenRights, checkUserRoleScreenRights\r\n})(injectIntl(ScreenRights));\r\n\r\n"]},"metadata":{},"sourceType":"module"}