{"ast":null,"code":"import React from'react';import{Col}from'react-bootstrap';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{injectIntl}from'react-intl';var AddTestMethod=function AddTestMethod(props){return/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_METHOD\"}),name:\"nmethodcode\",isDisabled:false,placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:props.isMulti,showOption:props.isMulti,options:props.method,optionId:\"nmethodcode\",optionValue:\"smethodname\",onChange:function onChange(value){return props.onComboChange(value,props.isMulti?\"availableData\":\"nmethodcode\",1);},value:props.selectedRecord?props.selectedRecord[props.isMulti?\"availableData\":\"nmethodcode\"]:\"\",isMulti:props.isMulti,isSearchable:true,closeMenuOnSelect:!props.isMulti,alphabeticalSort:true,isClearable:true}));};export default injectIntl(AddTestMethod);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testmanagement/AddTestMethod.jsx"],"names":["React","Col","FormSelectSearch","injectIntl","AddTestMethod","props","intl","formatMessage","id","isMulti","method","value","onComboChange","selectedRecord"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,iBAApB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kEAA7B,CACA,OAASC,UAAT,KAA2B,YAA3B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC7B,mBACI,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,eACI,oBAAC,gBAAD,EACI,SAAS,CAAEA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,YAAN,CAAzB,CADf,CAEI,IAAI,CAAE,aAFV,CAGI,UAAU,CAAE,KAHhB,CAII,WAAW,CAAEH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,kBAAN,CAAzB,CAJjB,CAKI,WAAW,CAAEH,KAAK,CAACI,OALvB,CAMI,UAAU,CAAEJ,KAAK,CAACI,OANtB,CAOI,OAAO,CAAEJ,KAAK,CAACK,MAPnB,CAQI,QAAQ,CAAC,aARb,CASI,WAAW,CAAC,aAThB,CAUI,QAAQ,CAAE,kBAAAC,KAAK,QAAIN,CAAAA,KAAK,CAACO,aAAN,CAAoBD,KAApB,CAA2BN,KAAK,CAACI,OAAN,CAAc,eAAd,CAA8B,aAAzD,CAAwE,CAAxE,CAAJ,EAVnB,CAWI,KAAK,CAAEJ,KAAK,CAACQ,cAAN,CAAqBR,KAAK,CAACQ,cAAN,CAAqBR,KAAK,CAACI,OAAN,CAAc,eAAd,CAA8B,aAAnD,CAArB,CAAuF,EAXlG,CAYI,OAAO,CAAEJ,KAAK,CAACI,OAZnB,CAaI,YAAY,CAAE,IAblB,CAcI,iBAAiB,CAAE,CAACJ,KAAK,CAACI,OAd9B,CAeI,gBAAgB,CAAE,IAftB,CAgBI,WAAW,CAAE,IAhBjB,EADJ,CADJ,CAuBH,CAxBD,CA0BA,cAAeN,CAAAA,UAAU,CAACC,aAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nconst AddTestMethod = (props) => {\r\n    return (\r\n        <Col md=\"12\">\r\n            <FormSelectSearch\r\n                formLabel={props.intl.formatMessage({ id: \"IDS_METHOD\" })}\r\n                name={\"nmethodcode\"}\r\n                isDisabled={false}\r\n                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                isMandatory={props.isMulti}\r\n                showOption={props.isMulti}\r\n                options={props.method}\r\n                optionId='nmethodcode'\r\n                optionValue='smethodname'\r\n                onChange={value => props.onComboChange(value, props.isMulti?\"availableData\":\"nmethodcode\", 1)}\r\n                value={props.selectedRecord?props.selectedRecord[props.isMulti?\"availableData\":\"nmethodcode\"]:\"\"}\r\n                isMulti={props.isMulti}\r\n                isSearchable={true}\r\n                closeMenuOnSelect={!props.isMulti}\r\n                alphabeticalSort={true}\r\n                isClearable={true}\r\n            >\r\n            </FormSelectSearch>\r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestMethod);"]},"metadata":{},"sourceType":"module"}