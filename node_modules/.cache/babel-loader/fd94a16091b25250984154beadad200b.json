{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleStorageMove.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { Lims_JSON_stringify, constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData, rearrangeDateFormat } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation, validateEsignCredentialStorage, crudMasterstorage } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel, ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import AddTreeview from './AddTreeview';\n// import AddTreeProperties from './AddTreeProperties';\n\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout'; //import StorageCategoryFilter from './StorageCategoryFilter';\n\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport rsapi from '../../rsapi'; //import AddSampleStorageMapping from './AddSampleStorageMapping';\n\nimport Axios from 'axios'; //import StorageMappingFilter from './StorageMappingFilter';\n\nimport Preloader from '../../components/preloader/preloader.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { groupBy, process } from '@progress/kendo-data-query';\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport MoveSample from '../storagemanagement/MoveSample';\nimport DataGridForStorage from './DataGridForStorage';\nimport { initRequest } from '../../actions/LoginAction';\nimport { bindActionCreators } from 'redux';\n\nclass SampleStorageMove extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.state.loadEsign;\n      let openModal = this.state.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (loadEsign) {\n        //  loadEsign = false;\n        openModal = true;\n        loadEsign = false;\n        selectedRecord['esignpassword'] = \"\";\n        selectedRecord['esigncomments'] = \"\";\n        selectedRecord['esignreason'] = \"\"; //ALPD-4738\n        //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { openModal, loadEsign, selectedRecord, selectedId: null }\n        // }\n        // this.props.updateStore(updateInfo);\n\n        this.setState({\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        });\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      this.setState({\n        selectedRecord,\n        // ismoveSample: false,\n        openModal,\n        isInitialRender: true,\n        isFilterPopup: false,\n        loadEsign: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet && !this.state.ismoveSample) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else if (this.state.ismoveSample) {\n        let destinationPathlst = [];\n        let dataResult = this.state.dataResult;\n        dataResult.data.map(item => {\n          item.items.map(item => {\n            if (item.hasOwnProperty('selected') && item.selected) {\n              destinationPathlst.push(item);\n            }\n          });\n        });\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.state.ncontrolcode)) {\n          const masterData = this.state.masterData;\n          let inputParam = {\n            methodUrl: \"SampleStorageTransaction\",\n            operation: \"update\",\n            classUrl: \"samplestoragemove\",\n            inputData: this.state.isMultiContainermove ? {\n              selectedContainers: JSON.stringify(destinationPathlst),\n              nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n              nsourcensamplestoragelocationcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragelocationcode)),\n              nsourcenprojecttypecode: JSON.stringify(destinationPathlst.map(y => y.nprojecttypecode)),\n              destinationPathCount: destinationPathlst.length,\n              isMultiContainermove: true,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              ...this.state.masterData,\n              userinfo: this.props.Login.userInfo\n            } : {\n              nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\n              nsourceprojecttypecode: this.state.editedsheetData.nprojecttypecode,\n              nsourcesamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterprojecttypecode: this.state.selectedProjectType.value,\n              ssamplestoragelocationname: this.state.editedsheetData.ssamplestoragelocationname,\n              ssamplestoragepathname: this.state.editedsheetData.scontainerpath,\n              stosamplestoragelocationname: this.state.selectedRecord.nsamplestoragelocationcode.label,\n              stosamplestoragepathname: this.state.selectedRecord.nsamplestoragemappingcode.label,\n              sboxid: this.state.editedsheetData.sboxid,\n              stoboxid: this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\n              ...this.state.masterData,\n              userinfo: this.props.Login.userInfo\n            }\n          }; //ALPD-4738\n          //Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\n\n          this.setState({\n            loading: true\n          });\n          let urlArray = [];\n          const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n            \"userinfo\": this.props.Login.userInfo\n          });\n          const reasonUrl = rsapi.post(\"/reason/getReason\", {\n            \"userinfo\": this.props.Login.userInfo\n          });\n          urlArray = [reasonUrl, currentTimeUrl];\n          Axios.all(urlArray).then(response => {\n            const reasonMap = constructOptionList(response[0].data || [], \"nreasoncode\", \"sreason\", undefined, undefined, false);\n            const reasonList = reasonMap.get(\"OptionList\");\n            this.setState({\n              esign: reasonList,\n              serverTime: rearrangeDateFormat(this.props.Login.userInfo, response[1].data),\n              loadEsign: true,\n              openModal: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              loading: false\n            });\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: {\n          //         loadEsign: true, openModal: true,  screenData: { inputParam, masterData }\n          //     }\n          // }\n          // this.props.updateStore(updateInfo);\n          //this.setState({ loadEsign: true, openModal: true,  screenData: { inputParam, masterData }})\n        } else {\n          if (this.state.isMultiContainermove) {\n            this.CRUDSampleStorageTransaction({\n              selectedContainers: JSON.stringify(destinationPathlst),\n              nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n              //ALPD-4490--Vignesh R(07-08-2024)\n              nsourcenprojecttypecode: JSON.stringify(destinationPathlst.map(y => y.nprojecttypecode)),\n              nsourcensamplestoragelocationcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragelocationcode)),\n              destinationPathCount: destinationPathlst.length,\n              isMultiContainermove: true,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              // nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              // nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n              userinfo: this.props.Login.userInfo\n            }, 'update');\n          } else {\n            this.CRUDSampleStorageTransaction({\n              nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\n              //ALPD-4490--Vignesh R(07-08-2024)\n              nsourcesamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n              nsourceprojecttypecode: this.state.editedsheetData.nprojecttypecode,\n              nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n              nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\n              nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\n              filterprojecttypecode: this.state.selectedProjectType.value,\n              ssamplestoragelocationname: this.state.editedsheetData.ssamplestoragelocationname,\n              ssamplestoragepathname: this.state.editedsheetData.scontainerpath,\n              stosamplestoragelocationname: this.state.selectedRecord.nsamplestoragelocationcode.label,\n              stosamplestoragepathname: this.state.selectedRecord.nsamplestoragemappingcode.label,\n              sboxid: this.state.editedsheetData.sboxid,\n              stoboxid: this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\n              filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n              userinfo: this.props.Login.userInfo\n            }, 'update');\n          }\n        }\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        openSpreadSheet: false,\n        ismoveSample: false,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data;\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false,\n            loadEsign: false,\n            ismoveSample: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false,\n            loadEsign: false,\n            ismoveSample: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n      let selectedProjectType = this.state.selectedProjectType;\n      let masterData = this.state.masterData;\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        if (selectedProjectType.value !== comboData.value) {\n          masterData = { ...masterData,\n            sampleStoragetransaction: []\n          };\n        }\n\n        this.setState({\n          masterData,\n          selectedProjectType: {\n            label: comboData.label,\n            value: comboData.value\n          }\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = (selectedRecord, availableContainersdata) => {\n      this.setState({\n        availableContainers: availableContainersdata,\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.ConfirmMove = () => {\n      let destinationPathlst = [];\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        item.items.map(item => {\n          if (item.hasOwnProperty('selected') && item.selected) {\n            destinationPathlst.push(item);\n          }\n        });\n      });\n      const inputData = {\n        isok: true,\n        filterprojecttypecode: this.state.selectedProjectType.value,\n        selectedContainers: JSON.stringify(destinationPathlst),\n        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\n        destinationPathCount: destinationPathlst.length,\n        isMultiContainermove: true,\n        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\n        userinfo: this.props.Login.userInfo\n      };\n      const inputParam = {\n        methodUrl: \"SampleStorageTransaction\",\n        classUrl: 'samplestoragemove',\n        inputData: inputData,\n        operation: \"update\",\n        dataState: this.state.dataStateChange\n      };\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_MISMATCHCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), this.state.loadEsign ? () => this.props.crudMasterstorage(inputParam, this.state.masterData, \"openModal\") : () => this.CRUDSampleStorageTransaction({ ...inputData\n      }, 'update'));\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemove/\" + operation + \"SampleStorageTransaction\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        // if(this.state.isMultiContainermove){\n        //     this.ConfirmMove()\n        // }else{\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false,\n          ismoveSample: false\n        }); //} \n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n            this.ConfirmMove();\n          } else {\n            toast.warn(error.response.data);\n          }\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.isMultiContainermove ? [{\n        \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\",\n        \"dataField\": \"nsamplestoragelocationcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\",\n        \"dataField\": \"nsamplestoragelocationcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TOSAMPLESTORAGEPATH\",\n        \"dataField\": \"nsamplestoragemappingcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }]; // :\n      // this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\n      //     this.state.selectedRecord[\"nneedposition\"] === false ? [\n      //     {\n      //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\n      //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_PRODUCT\",\n      //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_AVAILABLESPACE\",\n      //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     }\n      // ] : [\n      //     {\n      //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\n      //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_PRODUCT\",\n      //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     }\n      //     ,\n      //     {\n      //         \"idsName\": \"IDS_CONTAINERTYPE\",\n      //         \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n      //         \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\n      //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_DIRECTION\",\n      //         \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     },\n      //     {\n      //         \"idsName\": \"IDS_AVAILABLESPACE\",\n      //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\n      //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\n      //     }\n      // ]\n\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      let dataResult = this.state.dataResult;\n\n      if (this.state.masterData.sampleStoragetransaction) {\n        dataResult = this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], event.dataState ? event.dataState : {\n          take: 10,\n          skip: 0\n        }) : [];\n        dataResult.data.map(x => {\n          return x.items.map(item => {\n            item.selected = false;\n            return item;\n          });\n        });\n      }\n\n      this.setState({\n        dataResult: dataResult,\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.checkFilterIsEmptyQueryBuilder = treeData => {\n      //this condition is handle for bulk record only \n      if (this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69']) === transactionStatus.YES) {\n        let isFilterEmpty = true;\n        return isFilterEmpty;\n      } else {\n        let ParentItem = { ...treeData\n        };\n        let isFilterEmpty = false;\n        let childArray = ParentItem.children1;\n\n        if (childArray && childArray.length > 0 && childArray !== undefined) {\n          for (var i = 0; i < childArray.length; i++) {\n            let childData = childArray[i];\n\n            if (!childData.hasOwnProperty('children1')) {\n              if (childData.properties.operator !== \"is_empty\" && childData.properties.operator !== \"is_not_empty\" && childData.properties.operator !== \"is_null\" && childData.properties.operator !== \"is_not_null\") {\n                isFilterEmpty = true;\n                return isFilterEmpty;\n              }\n            } else {\n              if (childData) {\n                ParentItem = this.checkFilterIsEmptyQueryBuilder(childData);\n\n                if (!ParentItem) {\n                  return ParentItem;\n                }\n              }\n            }\n          }\n        }\n\n        return isFilterEmpty;\n      }\n    };\n\n    this.movemultipleContainer = () => {\n      let destinationPathlst = [];\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        item.items.map(item => {\n          if (item.hasOwnProperty('selected') && item.selected) {\n            destinationPathlst.push(item);\n          }\n        });\n      });\n\n      if (destinationPathlst.length > 0) {\n        this.setState({\n          loading: true\n        });\n        let urlArray = [];\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", {\n          isMultiContainermove: true,\n          // ncontainertypecode: 1,\n          // ncontainerstructurecode: 1,\n          isMultiContainermove: true,\n          userinfo: this.props.Login.userInfo\n        });\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          let storagemoverecords = {};\n          let selectedRecord = this.state.selectedRecord;\n          const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n          const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\n          const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", \"descending\", undefined, true);\n          const storageStructureList = storageStructureMap.get(\"OptionList\");\n          storagemoverecords = this.state.masterData.sampleStoragetransaction.filter(item => item.hasOwnProperty('selected') && item.selected);\n          selectedRecord = { ...selectedRecord,\n            nsamplestoragelocationcode: {\n              label: storageStructureList[0].label,\n              value: storageStructureList[0].value,\n              item: storageStructureList[0]\n            },\n            storageStructureOptions: storageStructureList\n          };\n          this.state.masterData.sampleStoragetransaction.map(item => selectedRecord = { ...selectedRecord,\n            mappingcodeOptions: { ...selectedRecord.mappingcodeOptions,\n              [item.nsamplestoragemappingcode]: samplestoragecontainerpathList\n            }\n          });\n          this.setState({\n            availableContainers: response[0].data['availableContainers'],\n            totalContainers: response[0].data['totalContainers'],\n            selectedRecord,\n            isMultiContainermove: true,\n            storagemoverecords: storagemoverecords,\n            ismoveSample: true,\n            openModal: true,\n            loadEsign: false,\n            loading: false,\n            ncontrolcode: this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTACONTAINERTOMOVE\"\n        }));\n      }\n    };\n\n    this.moveSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", {\n        nsamplestoragemappingcode: param.nsamplestoragemappingcode,\n        ncontainertypecode: param.ncontainertypecode,\n        ncontainerstructurecode: param.ncontainerstructurecode,\n        userinfo: this.props.Login.userInfo\n      });\n      const getProjectType = rsapi.post(\"projecttype/getProjectType\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, getProduct, getProjectType];\n      Axios.all(urlArray).then(response => {\n        const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", \"descending\", undefined, true);\n        const storageStructureList = storageStructureMap.get(\"OptionList\"); // const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\n        //     \"nsamplestoragecontainerpathcode\",\n        //     \"scontainerpath\", undefined, undefined, true);\n        // const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\n        // ALPD-3757\n\n        const sampleStorageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragemappingcode\", \"scontainerpath\", undefined, undefined, true);\n        const sampleStorageMappingList = sampleStorageMappingMap.get(\"OptionList\");\n        const sampleTypeMap = constructOptionList(response[1].data || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n        let ProjectTypelst = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n        this.setState({\n          sampleTypeList: sampleTypeList,\n          ProjectTypeOptions: ProjectTypelst,\n          sourcencontainertypecode: param.ncontainertypecode,\n          sourcencontainerstructurecode: param.ncontainerstructurecode,\n          isMultiContainermove: false,\n          selectedRecord: {\n            // nprojecttypecode:{\n            //     label: this.state.selectedProjectType.label,\n            //     value:  this.state.selectedProjectType.value \n            // },\n            nfromsamplestoragelocationcode: {\n              label: param.ssamplestoragelocationname,\n              value: param.nsamplestoragelocationcode,\n              item: param\n            },\n            nfromsamplestoragemappingcode: {\n              label: param.scontainerpath,\n              value: param.nsamplestoragemappingcode,\n              item: param\n            },\n            nsamplestoragelocationcode: storageStructureList.length > 0 ? {\n              label: storageStructureList[0].label,\n              value: storageStructureList[0].value,\n              item: storageStructureList[0].item\n            } : \"\",\n            nsamplestoragemappingcode: sampleStorageMappingList.length > 0 ? {\n              label: sampleStorageMappingList[0].label,\n              value: sampleStorageMappingList[0].value,\n              item: sampleStorageMappingList[0].item\n            } : \"\",\n            storageStructureOptions: storageStructureList,\n            samplestoragecontainerpathOptions: sampleStorageMappingList\n          },\n          editedsheetData: param,\n          ismoveSample: true,\n          openModal: true,\n          loadEsign: false,\n          loading: false,\n          ncontrolcode: this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\n      let tree = QbUtils.getTree(immutableTree);\n      tree = QbUtils.queryString(immutableTree, config, true);\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: { ...selectedRecord\n        }\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      const checkboxElement = event.target;\n      const checked = event.syntheticEvent.target.checked;\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(item => {\n        return item.items.map(item => {\n          if (item.selected === undefined) {\n            item.selected = false;\n          }\n\n          item.selected = checked;\n          return item;\n        });\n      });\n      this.setState({\n        dataResult\n      });\n    };\n\n    this.selectionChange = event => {\n      let dataResult = this.state.dataResult;\n      dataResult.data.map(x => {\n        return x.items.map(item => {\n          if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\n            item.selected = !event.dataItem.selected;\n          }\n\n          return item;\n        });\n      });\n      this.setState({\n        dataResult\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.state.screenData\n      }; //this.props.validateEsignCredential(inputParam, \"openModal\");\n      // let destinationPathlst = [];\n      // let dataResult = this.state.dataResult;\n      // dataResult.data.map(item => {\n      //       item.items.map(item => {\n      //         if (item.hasOwnProperty('selected') && item.selected) {\n      //             destinationPathlst.push(item);\n      //         } \n      //     });\n      // });\n      //this.props.validateEsignCredentialStorage(inputParam, \"openModal\",() => this.ConfirmMove())\n\n      this.validateEsignCredentialStorage(inputParam, \"openModal\", () => this.ConfirmMove());\n    };\n\n    this.validateEsignCredentialStorage = (inputParam, modalName, action) => {\n      this.setState({\n        loading: true\n      });\n\n      if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\n        inputParam.inputData[\"userinfo\"] = { ...inputParam.inputData.userinfo,\n          sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\n          smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename)\n        };\n      }\n\n      return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n        if (response.data === \"Success\") {\n          const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n\n            if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n            } // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\n\n\n            if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\n              delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\n            }\n          }\n\n          return this.crudMasterstorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName, undefined, action);\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n            action();\n          } else {\n            toast.warn(error.response.data);\n          }\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.crudMasterstorage = (inputParam, masterData, modalName, defaultInput, action) => {\n      this.setState({\n        loading: true\n      });\n      let requestUrl = '';\n      let urlArray = [];\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n      urlArray = [requestUrl];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false,\n          ismoveSample: false,\n          loadEsign: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n            this.ConfirmMove();\n          } else {\n            toast.warn(error.response.data);\n          }\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.state = {\n      extractedColumnList: [{\n        \"idsName\": \"IDS_STORAGESTRUCTURE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"450px\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"navailablespace\",\n        \"width\": \"200px\",\n        \"filterType\": \"numeric\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"scontainertype\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"scontainerstructurename\",\n        \"width\": \"200px\"\n      }],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0,\n        group: [{\n          field: \"ssamplestoragelocationname\"\n        }]\n      }\n    };\n    let fields = {};\n\n    if (this.state.extractedColumnList) {\n      this.state.extractedColumnList.map(field => {\n        if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname' && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype' && field.dataField !== 'scontainerstructurename') {\n          fields = { ...fields,\n            [field.dataField]: {\n              \"label\": this.props.intl.formatMessage({\n                id: field.idsName\n              }),\n              \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n              \"valueSources\": [\"value\", \"func\"],\n              \"mainWidgetProps\": {\n                \"valueLabel\": \"Name\",\n                \"valuePlaceholder\": this.props.intl.formatMessage({\n                  id: field.idsName\n                })\n              }\n            }\n          };\n        }\n      });\n    }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      dataResult,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType,\n      openModal,\n      loadEsign\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.openModal !== previousProps.Login.openModal) {\n      bool = true;\n      openModal = this.props.Login.openModal;\n    }\n\n    if (this.props.Login.loadEsign !== previousProps.Login.loadEsign) {\n      bool = true;\n      loadEsign = this.props.Login.loadEsign;\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nproductcode,\n        \"title\": item.sproductname\n      }));\n      fields = { ...fields,\n        'nproductcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_PRODUCT\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      masterData = this.props.Login.masterData;\n      this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nprojecttypecode,\n        \"title\": item.sprojecttypename\n      })); // fields = {\n      //     ...fields,\n      //     'nprojecttypecode': {\n      //         \"label\": this.props.intl.formatMessage({\n      //             id: \"IDS_PROJECTTYPE\",\n      //         }),\n      //         \"type\": \"select\",\n      //         \"valueSources\": [\"value\"],\n      //         \"fieldSettings\": {\n      //             \"listValues\": queryBuilderFreezer\n      //         }\n      //     }\n      // }\n\n      selectedProjectType = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\n    }\n\n    if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainertypecode,\n        \"title\": item.scontainertype\n      }));\n      fields = { ...fields,\n        'ncontainertypecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERTYPE\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainerstructurecode,\n        \"title\": item.scontainerstructurename\n      }));\n      fields = { ...fields,\n        'ncontainerstructurecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERSTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n\n      if (this.state.masterData.sampleStoragetransaction) {\n        if (this.state.masterData.sampleStoragetransaction !== previousState.masterData.sampleStoragetransaction) {\n          masterData = this.state.masterData;\n          console.log('masterData.sampleStoragetransaction', dataResult); //ALPD-4496 janakumar  pagination  work \n\n          if (masterData.sampleStoragetransaction !== undefined && masterData.sampleStoragetransaction.length > this.state.dataStateChange.skip === false) {\n            this.state.dataStateChange.skip = 0;\n            this.state.dataStateChange.take = 10;\n          }\n\n          dataResult = masterData.sampleStoragetransaction ? this.processWithGroups(masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n            take: 10,\n            skip: 0\n          }) : [];\n          console.log('dataResultn', dataResult);\n        }\n      }\n\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType,\n        openModal,\n        loadEsign,\n        dataResult\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\n\n      if (isFilterEmpty) {\n        this.setState({\n          loading: true\n        });\n        let obj = {\n          // ...inputParam.component, \n          label: 'sampleStoragetransaction',\n          valuemember: 'nsamplestoragemappingcode',\n          filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value : selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n          source: 'view_samplestoragelocation',\n          userinfo: this.props.Login.userInfo\n        };\n        let urlArray = [];\n        const url1 = rsapi.post(\"/samplestoragemove/getdynamicfilterexecutedata\", obj);\n        urlArray = [url1];\n        Axios.all(urlArray).then(response => {\n          let masterData = this.state.masterData;\n          masterData = { ...masterData,\n            ...response[0].data\n          };\n          this.setState({\n            masterData: { ...masterData\n            },\n            loading: false,\n            openModal: false,\n            isFilterPopup: false,\n            submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n            } : { ...selectedRecord\n            },\n            selectedRecord: {},\n            displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data.rtn);\n          }\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\"\n        }));\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const moveSampleId = this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode;\n    const moveMultipleSampleId = this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode;\n    const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\n    const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1969,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1970,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1974,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1975,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1976,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedProjectType ? this.state.selectedProjectType || [] : [],\n      options: this.state.masterData && this.state.masterData.projectTypeOptions || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1977,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1993,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1994,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DataGridForStorage, {\n      isDownloadPDFRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isDownloadExcelRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isRefreshRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      reloadData: e => this.getDynamicFilterExecuteData(2),\n      isCustomButton: true,\n      customButtonlist: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? [{\n        label: 'IDS_VIEWMULTIPLEBOX',\n        id: {},\n        hidden: false //this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1\n        ,\n        onClick: () => this.addSample({}, 2),\n        controlname: 'faBoxes'\n      }, {\n        label: 'IDS_MOVEMULTIPLECONTAINER',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(moveMultipleSampleId) === -1,\n        onClick: () => this.movemultipleContainer(),\n        controlname: 'faDollyFlatbed'\n      }, {\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }] : [{\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }],\n      cellRender: this.cellRender,\n      group: this.state.group || [],\n      primaryKeyField: 'nsamplestoragemappingcode' // groupable={true}\n      // groupfooter={true}\n      // aggregateLabel={'IDS_AVAILABLESPACE'}\n      // aggregatedColumn={'navailablespace'}\n      ,\n      selectionChange: this.selectionChange,\n      headerSelectionChange: this.headerSelectionChange,\n      data: this.state.masterData && this.state.masterData.sampleStoragetransaction,\n      dataResult: // this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : {\n      //         take: 10,\n      //         skip: 0\n      //     }) : []\n      this.state.dataResult ? this.state.dataResult : [],\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.state.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '900px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_MOVECONTAINER\"\n        }),\n        controlname: \"faDolly\",\n        hidden: this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\n        objectName: \"edit\",\n        onClick: this.moveSample\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEWBOX\"\n        }),\n        controlname: \"faBox\",\n        hidden: false // this.state.userRoleControlRights.indexOf(addSampleId) === -1\n        ,\n        objectName: \"add\",\n        onClick: param => this.addSample(param, 1)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1995,\n        columnNumber: 37\n      }\n    }))))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: this.state.ismoveSample ? false : true //needClose={this.state.ismoveSample ? true : this.state.isFilterPopup ? false : true}\n      ,\n      needClose: this.state.ismoveSample ? false : this.state.isFilterPopup ? true : false,\n      showSubmit: this.state.ismoveSample ? false : this.state.openSpreadSheet ? false : true,\n      size: this.state.ismoveSample ? \"\" : this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.ismoveSample ? this.props.intl.formatMessage({\n        id: \"IDS_MOVECONTAINER\"\n      }) : this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGE\"\n      }) : this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.state.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {} // ALPD-5120 : Added by rukshana this.state.serverTime for sample storage move : E-signature's date and time not displayed in popup \n      ,\n      addComponent: this.state.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        esignReasonList: this.state.esign || [],\n        serverTime: this.state.serverTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2226,\n          columnNumber: 29\n        }\n      }) : this.state.ismoveSample ? /*#__PURE__*/React.createElement(MoveSample, {\n        ProjectTypeOptions: this.state.ProjectTypeOptions,\n        sampleTypeList: this.state.sampleTypeList,\n        availableContainers: this.state.availableContainers,\n        totalContainers: this.state.totalContainers,\n        storagemoverecords: this.state.storagemoverecords,\n        isMultiContainermove: this.state.isMultiContainermove,\n        sourcencontainertypecode: this.state.sourcencontainertypecode,\n        sourcencontainerstructurecode: this.state.sourcencontainerstructurecode,\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        },\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2236,\n          columnNumber: 33\n        }\n      }) : this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.state.fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2258,\n          columnNumber: 37\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        isMoveScreen: true,\n        updateStore: this.props.updateStore,\n        intl: this.props.intl,\n        Rows: this.state.Rows || 1,\n        AdditionalFieldsComponentData: this.state.AdditionalFieldsComponentData,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        nbarcodedescription: this.props.Login.settings && parseInt(this.props.Login.settings[36]),\n        nbarcodeLength: this.props.Login.settings && parseInt(this.props.Login.settings[37]),\n        sbarcodeboxWidth: this.props.Login.settings && this.props.Login.settings[38],\n        multipleSheetData: this.state.masterData && this.state.masterData.sampleStoragetransaction && process(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2276,\n          columnNumber: 45\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null) // <AddSampleStorageMapping\n      //     operation={this.state.operation}\n      //     selectedRecordFilter={this.state.selectedRecordFilter}\n      //     onInputChange={(e) => this.onInputChange(e)}\n      //     onComboChange={this.onComboChange}\n      //     selectedRecord={this.state.selectedRecord || {}}\n      //     childDataChange={this.childDataChange}\n      //     userInfo={this.props.Login.userInfo}\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2204,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  validateEsignCredential,\n  validateEsignCredentialStorage,\n  crudMasterstorage\n})(injectIntl(SampleStorageMove));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/storagemanagement/SampleStorageMove.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faPuzzlePiece","faCalculator","toast","ListMaster","Lims_JSON_stringify","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","rearrangeDateFormat","ReadOnlyText","ContentPanel","SearchIcon","DataGrid","BasicConfig","BasicFuncs","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","validateEsignCredentialStorage","crudMasterstorage","DEFAULT_RETURN","ListWrapper","MediaLabel","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","rsapi","Axios","Preloader","TransactionListMasterJsonView","groupBy","process","MatrixComponent","FilterQueryBuilder","Grid","GridColumn","FormSelectSearch","MoveSample","DataGridForStorage","initRequest","bindActionCreators","SampleStorageMove","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","state","setState","selectedId","isInitialRender","isFilterPopup","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","Login","onSaveProperties","openSpreadSheet","ismoveSample","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","destinationPathlst","dataResult","item","items","hasOwnProperty","selected","push","userRoleControlRights","nformcode","ncontrolcode","masterData","inputParam","methodUrl","classUrl","inputData","isMultiContainermove","selectedContainers","nsourcemappingcode","y","nsourcensamplestoragelocationcode","nsourcenprojecttypecode","nprojecttypecode","destinationPathCount","length","nsourceprojecttypecode","nsourcesamplestoragelocationcode","filterprojecttypecode","selectedProjectType","ssamplestoragelocationname","ssamplestoragepathname","scontainerpath","stosamplestoragelocationname","label","stosamplestoragepathname","sboxid","stoboxid","loading","urlArray","currentTimeUrl","post","reasonUrl","all","then","response","reasonMap","reasonList","get","esign","serverTime","screenData","catch","error","status","message","warn","filterquery","submittedselectedRecord","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","sampleStorageVersion","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","opensearch","addSample","nflag","groupedArray","processWithGroups","sampleStoragetransaction","dataStateChange","url1","groupedItem","parse","AdditionalFieldsComponentData","Rows","nrow","columns","ncolumn","onComboChange","comboData","fieldName","selectedRecordFilter","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","containerpathCodeArray","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","getsamplestoragetransaction","childDataChange","availableContainersdata","availableContainers","childSheetDataChange","getActiveSampleStorageMappingById","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","ConfirmMove","isok","dataState","confirmMessage","confirm","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","x","approveSampleStorageMapping","checkFilterIsEmptyQueryBuilder","settings","YES","isFilterEmpty","ParentItem","childArray","children1","i","childData","properties","operator","movemultipleContainer","storagemoverecords","samplestoragecontainerpathMap","samplestoragecontainerpathList","storageStructureMap","storageStructureList","filter","storageStructureOptions","mappingcodeOptions","totalContainers","controlMap","has","moveSample","getProjectType","getProduct","sampleStorageMappingMap","sampleStorageMappingList","sampleTypeMap","sampleTypeList","ProjectTypelst","ProjectTypeOptions","sourcencontainertypecode","sourcencontainerstructurecode","nfromsamplestoragelocationcode","nfromsamplestoragemappingcode","samplestoragecontainerpathOptions","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","getTree","tree","queryString","sqlFormat","headerSelectionChange","checkboxElement","syntheticEvent","selectionChange","dataItem","aggregates","field","aggregate","groups","group","newDataState","validateEsign","sreason","nreasoncode","spredefinedreason","password","action","sformname","smodulename","toLowerCase","defaultInput","requestUrl","extractedColumnList","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","Map","detailSkip","detailTake","selectedItem","fields","dataField","idsName","createRef","dragClue","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","bool","sampleStorageLocation","queryBuilderFreezer","sampleType","projectType","sprojecttypename","filterStorageCategorylist","containerType","values","filterStorageCategory","selectedStorageCategory","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","console","log","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","containerStructureList","getDynamicFilterExecuteData","filterQueryTreeStr","valuemember","source","displayQuery","info","rtn","shouldComponentUpdate","nextProps","nextState","render","deleteId","copyId","approveId","moveSampleId","moveMultipleSampleId","addMultipleSampleId","addSampleId","projectTypeOptions","hidden","onClick","controlname","cellRender","deleteRecord","objectName","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,IAApD,EAA0DC,MAA1D,EAAkEC,WAAlE,QAAqF,iBAArF;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,UAA1D,EAAsEC,SAAtE,EAAiFC,KAAjF,EAAwFC,eAAxF,EAAyGC,aAAzG,EAAwHC,QAAxH,EAAkIC,YAAlI,EAAgJC,YAAhJ,EAA8JC,QAA9J,EAAwKC,OAAxK,EAAiLC,WAAjL,EAA8LC,eAA9L,EAA+MC,SAA/M,EAA0NC,OAA1N,EAAmOC,aAAnO,EAAkPC,YAAlP,QAAsQ,mCAAtQ;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,aAAnD,EAAkEC,yBAAlE,EAA6FC,UAA7F,EAAyGC,cAAzG,EAAyHC,SAAzH,EAAoIC,QAApI,EAA6IC,mBAA7I,QAAuK,+BAAvK;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,UAArC,QAAuD,6BAAvD,C,CACA;;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SACIC,WADJ,EACiBC,UADjB,EAEIC,KAAK,IAAIC,OAFb,QAGO,iCAHP;AAKA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,gCADnE,EACqGC,gBADrG,EACuHC,2BADvH,EAEIC,iBAFJ,EAEuBC,yBAFvB,EAEkDC,4BAFlD,EAEgFC,+BAFhF,EAEiHC,oBAFjH,EAEuIC,wBAFvI,EAGIC,yBAHJ,EAG8BC,8BAH9B,EAG6DC,iBAH7D,QAIO,eAJP;AAKA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,2BAAxC,C,CACA;;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,YAAP,MAAyB,kDAAzB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,WAA/B,QAAkD,gCAAlD;AACA,OAAOC,cAAP,MAA2B,0DAA3B,C,CACA;AACA;;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,OAAOC,qBAAP,MAAkC,wCAAlC;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,cAAP,MAA2B,uBAA3B,C,CACA;;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,gCAAvD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,gDAAtB;AACA,OAAOC,6BAAP,MAA0C,gDAA1C;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,4BAAjC;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,4BAAjC;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAGA,MAAMC,iBAAN,SAAgC3G,SAAhC,CAA0C;AAUtC4G,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SATnBC,WASmB,GATL,CASK;AAAA,SARnBC,UAQmB,GARN,KAQM;AAAA,SAPnBC,SAOmB,GAPP,GAOO;AAAA,SANnBC,WAMmB,GANL,EAMK;AAAA,SALnBC,YAKmB,GALJ,CAKI;AAAA,SAJnBC,WAImB,GAJLC,SAIK;AAAA,SAHnBC,WAGmB,GAHL,EAGK;;AAAA,SA2UnBC,SA3UmB,GA2UP,MAAM;AACd,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AACFH,UAAAA,SAAS,EAAE,IADT;AACeI,UAAAA,cAAc,EAAE,EAD/B;AACmCC,UAAAA,kBAAkB,EAAE,KADvD;AAEFC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,IAAI,EAAE,MADV;AAEIC,YAAAA,QAAQ,EAAE,IAFd;AAGIC,YAAAA,QAAQ,EAAE,IAHd;AAIIC,YAAAA,IAAI,EAAE,IAJV;AAKIC,YAAAA,EAAE,EAAErD,IAAI;AALZ,WADM,CAFR;AAUCsD,UAAAA,SAAS,EAAE;AAVZ;AAFS,OAAnB;AAeA,WAAKrB,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KA5VkB;;AAAA,SA6VnBY,UA7VmB,GA6VN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B;AACA,UAAId,SAAS,GAAG,KAAKe,KAAL,CAAWf,SAA3B;AACA,UAAII,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;;AACA,UAAIU,SAAJ,EAAe;AACb;AACEd,QAAAA,SAAS,GAAG,IAAZ;AACAc,QAAAA,SAAS,GAAG,KAAZ;AACAV,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,QAAAA,cAAc,CAAC,aAAD,CAAd,GAAgC,EAAhC,CANW,CAOpB;AACA;AACS;AACA;AACA;AACA;AACA;;AACA,aAAKY,QAAL,CAAc;AAAChB,UAAAA,SAAD;AAAYc,UAAAA,SAAZ;AAAuBV,UAAAA,cAAvB;AAAuCa,UAAAA,UAAU,EAAE;AAAnD,SAAd;AACH,OAfD,MAgBK;AACDjB,QAAAA,SAAS,GAAG,KAAZ;AACAI,QAAAA,cAAc,GAAG,EAAjB;AACH;;AACD,WAAKY,QAAL,CAAc;AACVZ,QAAAA,cADU;AAEX;AACCJ,QAAAA,SAHU;AAGCkB,QAAAA,eAAe,EAAE,IAHlB;AAIRC,QAAAA,aAAa,EAAE,KAJP;AAKVL,QAAAA,SAAS,EAAE;AALD,OAAd;AAOH,KA5XkB;;AAAA,SA6XnBM,aA7XmB,GA6XFC,KAAD,IAAW;AACvB,YAAMjB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;;AACA,UAAIiB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCnB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAjD;AACH,OAFD,MAEO;AACHrB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKV,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AACH,KAtYkB;;AAAA,SAyYnBuB,WAzYmB,GAyYL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAKtC,KAAL,CAAWuC,KAAX,CAAiBzB,kBAAjB,KAAwC,IAA5C,EAAkD;AAC9C,aAAK0B,gBAAL,CAAsBH,QAAtB,EAAgCC,OAAhC;AACH,OAFD,MAEO,IAAI,KAAKd,KAAL,CAAWiB,eAAX,IAA8B,CAAC,KAAKjB,KAAL,CAAWkB,YAA9C,EAA4D;AAC/D,aAAKC,4BAAL,CAAkC,EAC9B,GAAG,KAAKnB,KAAL,CAAWoB,eADgB;AAE9BC,UAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWsB,gBAAX,GACvBC,MAAM,CAACC,IAAP,CAAY,KAAKxB,KAAL,CAAWyB,SAAvB,EAAkCC,GAAlC,CAAsCL,yBAAyB,IAAIA,yBAAnE,EAA8FM,IAA9F,CAAmG,GAAnG,CADuB,GAErB,KAAK3B,KAAL,CAAWoB,eAAX,CAA2BC,yBAA3B,CAAqDO,QAArD,EAJwB;AAK9BC,UAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWoB,eAAX,CAA2BS,0BALzB;AAM9BJ,UAAAA,SAAS,EAAEK,IAAI,CAACC,SAAL,CAAe,KAAK/B,KAAL,CAAWyB,SAAX,GAAuB,KAAKzB,KAAL,CAAWyB,SAAlC,GAA8C,EAA7D,CANmB;AAO9BO,UAAAA,WAAW,EAAE,IAPiB;AAQ9BC,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QARG;AAS9BZ,UAAAA,gBAAgB,EAAE,KAAKtB,KAAL,CAAWsB;AATC,SAAlC,EAUG,QAVH;AAWH,OAZM,MAYA,IAAI,KAAKtB,KAAL,CAAWkB,YAAf,EAA6B;AAChC,YAAIiB,kBAAkB,GAAG,EAAzB;AACA,YAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,QAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,UAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,gBAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,cAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,WAJC;AAKL,SAND;;AAOA,YAAI9H,SAAS,CAAC,KAAKiE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,EAA8E,KAAK3C,KAAL,CAAW4C,YAAzF,CAAb,EAAqH;AACjH,gBAAMC,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA9B;AACA,cAAIC,UAAU,GAAG;AACbC,YAAAA,SAAS,EAAE,0BADE;AAEblD,YAAAA,SAAS,EAAE,QAFE;AAGbmD,YAAAA,QAAQ,EAAE,mBAHG;AAKbC,YAAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWkD,oBAAX,GAAiC;AACxCC,cAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CADoB;AAExCiB,cAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAFoB;AAGxCiC,cAAAA,iCAAiC,EAAExB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAACxB,0BAA9B,CAAf,CAHK;AAIxC0B,cAAAA,uBAAuB,EAAEzB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAACG,gBAA9B,CAAf,CAJe;AAKxCC,cAAAA,oBAAoB,EAAEtB,kBAAkB,CAACuB,MALD;AAMxCR,cAAAA,oBAAoB,EAAE,IANkB;AAOxCrB,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAPzC;AAQxC,iBAAG,KAAKX,KAAL,CAAW6C,UAR0B;AASxCZ,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AATa,aAAjC,GAUP;AACAkB,cAAAA,kBAAkB,EAAE,KAAKpD,KAAL,CAAWoB,eAAX,CAA2BC,yBAD/C;AAEAsC,cAAAA,sBAAsB,EAAE,KAAK3D,KAAL,CAAWoB,eAAX,CAA2BoC,gBAFnD;AAGAI,cAAAA,gCAAgC,EAAE,KAAK5D,KAAL,CAAWoB,eAAX,CAA2BS,0BAH7D;AAIAA,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAJjF;AAKAU,cAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDV,KAL/E;AAMA6C,cAAAA,gBAAgB,EAAE,KAAKxD,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDmB,gBAN3E;AAOAK,cAAAA,qBAAqB,EAAC,KAAK7D,KAAL,CAAW8D,mBAAX,CAA+BnD,KAPrD;AASAoD,cAAAA,0BAA0B,EAAC,KAAK/D,KAAL,CAAWoB,eAAX,CAA2B2C,0BATtD;AAUAC,cAAAA,sBAAsB,EAAC,KAAKhE,KAAL,CAAWoB,eAAX,CAA2B6C,cAVlD;AAWAC,cAAAA,4BAA4B,EAAC,KAAKlE,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDsC,KAXlF;AAYAC,cAAAA,wBAAwB,EAAC,KAAKpE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoD8C,KAZ7E;AAaAE,cAAAA,MAAM,EAAC,KAAKrE,KAAL,CAAWoB,eAAX,CAA2BiD,MAblC;AAcAC,cAAAA,QAAQ,EAAC,KAAKtE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDgC,MAdlE;AAeA,iBAAG,KAAKrE,KAAL,CAAW6C,UAfd;AAgBAZ,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAhB3B;AAfS,WAAjB,CAFiH,CAoC7H;AACA;;AACY,eAAKjC,QAAL,CAAc;AAAEsE,YAAAA,OAAO,EAAE;AAAX,WAAd;AACA,cAAIC,QAAQ,GAAG,EAAf;AACA,gBAAMC,cAAc,GAAGlH,KAAK,CAACmH,IAAN,CAAW,8BAAX,EAA2C;AAC9D,wBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AADiC,WAA3C,CAAvB;AAGA,gBAAMyC,SAAS,GAAGpH,KAAK,CAACmH,IAAN,CAAW,mBAAX,EAAgC;AAC9C,wBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AADiB,WAAhC,CAAlB;AAIAsC,UAAAA,QAAQ,GAAG,CAACG,SAAD,EAAWF,cAAX,CAAX;AACAjH,UAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,kBAAMC,SAAS,GAAG7K,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,IAAoB,EAArB,EAAyB,aAAzB,EACjC,SADiC,EACtBL,SADsB,EACXA,SADW,EACA,KADA,CAArC;AAEA,kBAAMiG,UAAU,GAAGD,SAAS,CAACE,GAAV,CAAc,YAAd,CAAnB;AACA,iBAAKhF,QAAL,CAAc;AACViF,cAAAA,KAAK,EAACF,UADI;AAEVG,cAAAA,UAAU,EAAE1K,mBAAmB,CAAC,KAAK+D,KAAL,CAAWuC,KAAX,CAAiBmB,QAAlB,EAA4B4C,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAxC,CAFrB;AAGVW,cAAAA,SAAS,EAAE,IAHD;AAGOd,cAAAA,SAAS,EAAE,IAHlB;AAGyBmG,cAAAA,UAAU,EAAE;AAAEtC,gBAAAA,UAAF;AAAcD,gBAAAA;AAAd,eAHrC;AAIV0B,cAAAA,OAAO,EAAE;AAJC,aAAd;AAMH,WAXL,EAWOc,KAXP,CAWaC,KAAK,IAAI;AACd,gBAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,cAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,aAFD,MAEO;AACHzL,cAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,iBAAKa,QAAL,CAAc;AACVsE,cAAAA,OAAO,EAAE;AADC,aAAd;AAGH,WApBL,EAhDiH,CAqEjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,SA7ED,MA8EK;AACD,cAAI,KAAKvE,KAAL,CAAWkD,oBAAf,EAAqC;AACjC,iBAAK/B,4BAAL,CAAkC;AAC9BgC,cAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CADU;AAE9BiB,cAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAFU;AAG7B;AACDkC,cAAAA,uBAAuB,EAAEzB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAACG,gBAA9B,CAAf,CAJK;AAK9BF,cAAAA,iCAAiC,EAAExB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAACxB,0BAA9B,CAAf,CALL;AAM9B4B,cAAAA,oBAAoB,EAAEtB,kBAAkB,CAACuB,MANX;AAO9BR,cAAAA,oBAAoB,EAAE,IAPQ;AAQ9BrB,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KARnD;AAS9B;AACA;AACA+E,cAAAA,WAAW,EAAE,KAAK1F,KAAL,CAAW2F,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAK1F,KAAL,CAAW8D,mBAAX,CAA+BnD,KAX1F;AAY9BsB,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAZG,aAAlC,EAaG,QAbH;AAcH,WAfD,MAeO;AACH,iBAAKf,4BAAL,CAAkC;AAC9BiC,cAAAA,kBAAkB,EAAE,KAAKpD,KAAL,CAAWoB,eAAX,CAA2BC,yBADjB;AAE9B;AACAuC,cAAAA,gCAAgC,EAAE,KAAK5D,KAAL,CAAWoB,eAAX,CAA2BS,0BAH/B;AAI9B8B,cAAAA,sBAAsB,EAAE,KAAK3D,KAAL,CAAWoB,eAAX,CAA2BoC,gBAJrB;AAK9B3B,cAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KALnD;AAM9BU,cAAAA,yBAAyB,EAAE,KAAKrB,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDV,KANjD;AAO9B6C,cAAAA,gBAAgB,EAAE,KAAKxD,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDmB,gBAP7C;AAQ9BK,cAAAA,qBAAqB,EAAC,KAAK7D,KAAL,CAAW8D,mBAAX,CAA+BnD,KARvB;AAS9BoD,cAAAA,0BAA0B,EAAC,KAAK/D,KAAL,CAAWoB,eAAX,CAA2B2C,0BATxB;AAU9BC,cAAAA,sBAAsB,EAAC,KAAKhE,KAAL,CAAWoB,eAAX,CAA2B6C,cAVpB;AAW9BC,cAAAA,4BAA4B,EAAC,KAAKlE,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDsC,KAXpD;AAY9BC,cAAAA,wBAAwB,EAAC,KAAKpE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoD8C,KAZ/C;AAa9BE,cAAAA,MAAM,EAAC,KAAKrE,KAAL,CAAWoB,eAAX,CAA2BiD,MAbJ;AAc9BC,cAAAA,QAAQ,EAAC,KAAKtE,KAAL,CAAWX,cAAX,CAA0BgC,yBAA1B,CAAoDgB,IAApD,CAAyDgC,MAdpC;AAe9BqB,cAAAA,WAAW,EAAE,KAAK1F,KAAL,CAAW2F,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAK1F,KAAL,CAAW8D,mBAAX,CAA+BnD,KAf1F;AAgB9BsB,cAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAhBG,aAAlC,EAiBG,QAjBH;AAkBH;AACJ;AACJ,OA7HM,MA6HA;AACH,aAAK0D,8BAAL,CAAoC/E,QAApC,EAA8CC,OAA9C;AACH;AACJ,KAxhBkB;;AAAA,SA2hBnB+E,cA3hBmB,GA2hBDC,CAAD,IAAO;AACpB,WAAK7F,QAAL,CAAc;AACV8F,QAAAA,0BAA0B,EAAED;AADlB,OAAd;AAGH,KA/hBkB;;AAAA,SAgiBnBE,gBAhiBmB,GAgiBAC,CAAC,IAAI;AACpB,WAAKhG,QAAL,CAAc;AACViG,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KAriBkB;;AAAA,SAsiBnBC,sBAtiBmB,GAsiBMH,CAAC,IAAI;AAC1B,WAAKhG,QAAL,CAAc;AACViG,QAAAA,IAAI,EAAED,CAAC,CAACC,IADE;AAEVC,QAAAA,IAAI,EAAEF,CAAC,CAACE;AAFE,OAAd;AAIH,KA3iBkB;;AAAA,SAmlBnBE,UAnlBmB,GAmlBN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAK9H,KAAL,CAAWuC,KAAX,CAAiBuF,UAAnC;AACA,YAAMpH,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AAAEkH,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAK9H,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KA1lBkB;;AAAA,SA4lBnBqH,WA5lBmB,GA4lBL,MAAM;AAEhB,YAAMrH,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEhD,cADK;AAEfiD,QAAAA,IAAI,EAAE;AAAEkH,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAK9H,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,KAnmBkB;;AAAA,SAomBnBsH,UApmBmB,GAomBN,MAAM;AACf,WAAKC,cAAL;AACH,KAtmBkB;;AAAA,SAumBnBC,2BAvmBmB,GAumBW,CAACC,4BAAD,EAA+BzE,QAA/B,EAAyC0E,MAAzC,KAAoD;AAC9E,WAAKC,YAAL;AACA,WAAK5G,QAAL,CAAc;AAAE6G,QAAAA,gBAAgB,EAAE/H;AAApB,OAAd;;AACA,UAAI,KAAKgI,SAAL,CAAeC,OAAnB,EAA4B;AACxB,aAAKD,SAAL,CAAeC,OAAf,CAAuBrG,KAAvB,GAA+B,EAA/B;AACH;;AAED,UAAIsG,WAAW,GAAG,KAAlB;;AACA,UAAI,KAAKzI,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqE,oBAA5B,IAAoD,KAAK1I,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqE,oBAA5B,CAAiDxD,MAAjD,GAA0D,CAAlH,EAAqH;AACjHuD,QAAAA,WAAW,GAAG,IAAd;AACH;;AACD,WAAKzI,KAAL,CAAW7C,yBAAX,CAAqCgL,4BAArC,EAAmEzE,QAAnE,EAA6E+E,WAA7E,EAA0FL,MAA1F;AACH,KAnnBkB;;AAAA,SAonBnBO,kBApnBmB,GAonBGC,KAAD,IAAW;AAC5B,WAAKC,uBAAL,CAA6B;AAAEnF,QAAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWuC,KAAX,CAAiBmB,QAA7B;AAAuCkF,QAAAA;AAAvC,OAA7B;AACH,KAtnBkB;;AAAA,SAunBnBE,0BAvnBmB,GAunBWC,KAAD,IAAW;AACpC,WAAKpG,4BAAL,CAAkC;AAC9B,sCAA8B,KAAKnB,KAAL,CAAW6C,UAAX,CAAsB2E,6BAAtB,CAAoD3F,0BADpD;AAE9B,qCAA6B0F,KAAK,CAAClG,yBAFL;AAG9BY,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAHG,OAAlC,EAIG,QAJH;AAKH,KA7nBkB;;AAAA,SA8nBnBuF,iBA9nBmB,GA8nBEF,KAAD,IAAW;AAC3B,WAAKtH,QAAL,CAAc;AACV;AACAhB,QAAAA,SAAS,EAAE,IAFD;AAEOqC,QAAAA,gBAAgB,EAAE,IAFzB;AAE+BL,QAAAA,eAAe,EAAE,IAFhD;AAEqD;AAC/DsD,QAAAA,OAAO,EAAE;AAHC,OAAd;AAKH,KApoBkB;;AAAA,SAyoBnBmD,UAzoBmB,GAyoBN,MAAM;AACf,WAAKzH,QAAL,CAAc;AACVhB,QAAAA,SAAS,EAAE,IADD;AACOmB,QAAAA,aAAa,EAAE,IADtB;AAC4Ba,QAAAA,eAAe,EAAE,KAD7C;AACmDC,QAAAA,YAAY,EAAC,KADhE;AACuE7B,QAAAA,cAAc,EAAE,EAAE,GAAG,KAAKW,KAAL,CAAW2F;AAAhB,aAC7F,EAAE,GAAG,KAAK3F,KAAL,CAAWX;AAAhB;AAFM,OAAd;AAIH,KA9oBkB;;AAAA,SA+oBnBsI,SA/oBmB,GA+oBP,CAACJ,KAAD,EAAQK,KAAR,KAAkB;AAC1B,WAAK3H,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIqD,YAAY,GAAG,KAAKC,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACf,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD3C,EAIZ9G,IAJP;AAKA,YAAM6I,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,2DAAX,EACT;AACIpD,QAAAA,gBAAgB,EAAGsG,KAAK,KAAK,CAAX,GAAgB,IAAhB,GAAuB,KAD7C;AAEIvG,QAAAA,yBAAyB,EACpBuG,KAAK,KAAK,CAAX,GAAgBC,YAAY,CAACnG,GAAb,CAAiBwG,WAAW,IAAIA,WAAW,CAAC5F,KAAZ,CAAkBZ,GAAlB,CAAsBW,IAAI,IAAIA,IAAI,CAAChB,yBAAnC,CAAhC,EAA+FM,IAA/F,CAAoG,GAApG,CAAhB,GACM4F,KAAK,CAAClG,yBAAN,CAAgCO,QAAhC;AAJd,OADS,CAAb;AAOA4C,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,YAAI8C,KAAK,KAAK,CAAd,EAAiB;AACb,eAAK3H,QAAL,CAAc;AACVwB,YAAAA,SAAS,EAAEK,IAAI,CAACqG,KAAL,CAAWrD,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiBqC,SAA5B,CADD;AAEV2G,YAAAA,6BAA6B,EAAEtG,IAAI,CAACqG,KAAL,CAAWrD,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiBgJ,6BAA5B,CAFrB;AAGVnJ,YAAAA,SAAS,EAAE,IAHD;AAGOqC,YAAAA,gBAAgB,EAAE,IAHzB;AAG+BL,YAAAA,eAAe,EAAE,IAHhD;AAGqD;AAC/DsD,YAAAA,OAAO,EAAE,KAJC;AAKVxE,YAAAA,SAAS,EAAE,KALD;AAKOmB,YAAAA,YAAY,EAAC;AALpB,WAAd;AAOH,SARD,MAQO;AACH,eAAKjB,QAAL,CAAc;AACVwB,YAAAA,SAAS,EAAEK,IAAI,CAACqG,KAAL,CAAWrD,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiBqC,SAA5B,CADD;AAEV2G,YAAAA,6BAA6B,EAAEtG,IAAI,CAACqG,KAAL,CAAWrD,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiBgJ,6BAA5B,CAFrB;AAGVnJ,YAAAA,SAAS,EAAE,IAHD;AAGOqC,YAAAA,gBAAgB,EAAE,KAHzB;AAGgCL,YAAAA,eAAe,EAAE,IAHjD;AAIVG,YAAAA,eAAe,EAAEmG,KAJP;AAIcc,YAAAA,IAAI,EAAEd,KAAK,CAACe,IAJ1B;AAIgCC,YAAAA,OAAO,EAAEhB,KAAK,CAACiB,OAJ/C;AAKVjE,YAAAA,OAAO,EAAE,KALC;AAKMxE,YAAAA,SAAS,EAAE,KALjB;AAKuBmB,YAAAA,YAAY,EAAC;AALpC,WAAd;AAOH;AACJ,OAnBL,EAmBOmE,KAnBP,CAmBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA5BL;AA+BH,KA9rBkB;;AAAA,SA+rBnBkE,aA/rBmB,GA+rBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMtJ,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;AACA,UAAIuJ,oBAAoB,GAAG,KAAK5I,KAAL,CAAW4I,oBAAX,IAAmC,EAA9D;AACA,UAAI9E,mBAAmB,GAAG,KAAK9D,KAAL,CAAW8D,mBAArC;AACA,UAAIjB,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA5B;;AACA,UAAI8F,SAAS,KAAK,sBAAlB,EAA0C;AACtC,eAAO,KAAKE,wBAAL,CAA8B;AACjC5G,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADM;AAEjC4G,UAAAA,oBAAoB,EAAEJ,SAAS,CAAC/H;AAFC,SAA9B,EAGJgI,SAHI,EAGOD,SAHP,CAAP;AAIH,OALD,MAKO,IAAIC,SAAS,KAAK,oBAAlB,EAAwC;AAC3C,eAAO,KAAKI,qBAAL,CAA2B;AAC9B9G,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADG;AAE9B8G,UAAAA,kBAAkB,EAAEN,SAAS,CAAC/H;AAFA,SAA3B,EAGJgI,SAHI,EAGOD,SAHP,CAAP;AAKH,OANM,MAMA,IAAIC,SAAS,KAAK,kBAAlB,EAAsC;AACzC,YAAI7E,mBAAmB,CAACnD,KAApB,KAA8B+H,SAAS,CAAC/H,KAA5C,EAAmD;AAC/CkC,UAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETkF,YAAAA,wBAAwB,EAAE;AAFjB,WAAb;AAIH;;AACD,aAAK9H,QAAL,CAAc;AAAE4C,UAAAA,UAAF;AAAciB,UAAAA,mBAAmB,EAAE;AAAEK,YAAAA,KAAK,EAAEuE,SAAS,CAACvE,KAAnB;AAA0BxD,YAAAA,KAAK,EAAE+H,SAAS,CAAC/H;AAA3C;AAAnC,SAAd;AAEH,OATM,MASA,IAAIgI,SAAS,KAAK,yBAAlB,EAA6C;AAChDtJ,QAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBqJ,SAAS,CAACrG,IAAV,CAAeiG,IAAf,GAAsBI,SAAS,CAACrG,IAAV,CAAeiG,IAArC,GAA4C,CAArE;AACAjJ,QAAAA,cAAc,CAAC,SAAD,CAAd,GAA4BqJ,SAAS,CAACrG,IAAV,CAAemG,OAAf,GAAyBE,SAAS,CAACrG,IAAV,CAAemG,OAAxC,GAAkD,CAA9E;AACH,OAHM,MAGA,IAAIG,SAAS,KAAK,4BAAlB,EAAgD;AACnD,eAAO,KAAKE,wBAAL,CAA8B;AACjC5G,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB,QADM;AAEjC4G,UAAAA,oBAAoB,EAAE,KAAK9I,KAAL,CAAW4I,oBAAX,CAAgC,sBAAhC,EAAwDjI,KAF7C;AAGjCkB,UAAAA,0BAA0B,EAAE6G,SAAS,CAAC/H;AAHL,SAA9B,EAKJgI,SALI,EAKOD,SALP,CAAP;AAMH;;AACD,UAAIC,SAAS,KAAK,2BAAlB,EAA+C;AAC3CC,QAAAA,oBAAoB,CAACD,SAAD,CAApB,GAAkCD,SAAlC;AACA,aAAKzI,QAAL,CAAc;AAAE2I,UAAAA;AAAF,SAAd;AAEH,OAJD,MAIO;AACHvJ,QAAAA,cAAc,CAACsJ,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAKzI,QAAL,CAAc;AAAEZ,UAAAA,cAAF;AAAkBuJ,UAAAA;AAAlB,SAAd;AACH;AAGJ,KA7uBkB;;AAAA,SA+uBnBhD,8BA/uBmB,GA+uBe/E,QAAD,IAAc;AAC3C,UAAIxB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,UAAI4J,sBAAsB,GAAG,EAA7B;;AACA,UAAI,KAAKjJ,KAAL,CAAWH,SAAX,KAAyB,QAA7B,EAAuC;AACnCoJ,QAAAA,sBAAsB,GAAG5J,cAAc,CAAC,iCAAD,CAAd,CAAkDqC,GAAlD,CAAsDW,IAAI,IAAIA,IAAI,CAAC1B,KAAnE,CAAzB;AACH;;AACD,YAAMmC,UAAU,GAChB;AACIoG,QAAAA,6BAA6B,EAAE7J,cAAc,CAAC,+BAAD,CAAd,GAC3B8J,QAAQ,CAAC9J,cAAc,CAAC,+BAAD,CAAf,CADmB,GACiC,CAFpE;AAGIwC,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsB2E,6BAAtB,CAAoD3F,0BAHpF;AAIIR,QAAAA,yBAAyB,EAAEhC,cAAc,CAAC,2BAAD,CAAd,GACvB8J,QAAQ,CAAC9J,cAAc,CAAC,2BAAD,CAAf,CADe,GACiC,CALhE;AAMI2J,QAAAA,kBAAkB,EAAE,CAAC,CANzB;AAOII,QAAAA,YAAY,EAAE/J,cAAc,CAAC,cAAD,CAAd,CAA+BsB,KAPjD;AAQI0I,QAAAA,oBAAoB,EAAE,CAAC,CAR3B;AASIC,QAAAA,yBAAyB,EAAE,GAT/B;AAUIC,QAAAA,+BAA+B,EAAE,KAAKvJ,KAAL,CAAWH,SAAX,KAAyB,QAAzB,GAC7BiC,IAAI,CAACC,SAAL,CAAekH,sBAAf,CAD6B,GACYE,QAAQ,CAAC9J,cAAc,CAAC,iCAAD,CAAd,CAAkDsB,KAAnD,CAXzD;AAYI6I,QAAAA,iBAAiB,EAAEP,sBAAsB,CAACvF,MAZ9C;AAaI+F,QAAAA,aAAa,EAAE,CAbnB;AAcIC,QAAAA,uBAAuB,EAAE,CAAC,CAd9B;AAciCC,QAAAA,SAAS,EAAEtK,cAAc,CAAC,WAAD,CAAd,GACpC8J,QAAQ,CAAC9J,cAAc,CAAC,WAAD,CAAf,CAD4B,GACI,CAfhD;AAgBI4C,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAhB/B,OADA;AAmBA,YAAMW,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAApC;;AACA,UAAItI,SAAS,CAAC,KAAKiE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,EAA8E,KAAKnE,KAAL,CAAWuC,KAAX,CAAiB6B,YAA/F,CAAb,EAA2H;AACvH,cAAM1D,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEhD,cADK;AAEfiD,UAAAA,IAAI,EAAE;AACFW,YAAAA,SAAS,EAAE,IADT;AACeqF,YAAAA,UAAU,EAAE;AAAEtC,cAAAA,UAAF;AAAcD,cAAAA;AAAd,aAD3B;AACuDhC,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKrC,KAAL,CAAWlD,WAAX,CAAuB4D,UAAvB;AACH,OARD,MASK;AACD,aAAKiC,4BAAL,CAAkC2B,UAAlC,EAA8C,KAAK9C,KAAL,CAAWH,SAAzD;AACH;AACJ,KArxBkB;;AAAA,SAsxBnB+J,2BAtxBmB,GAsxBW,CAAC9G,UAAD,EAAab,QAAb,KAA0B;AACpD,WAAKhC,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,sDAAX,EAAmE;AAC5EzC,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AADiD,OAAnE,CAAb;AAGAsC,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,aAAK7E,QAAL,CAAc;AACV4C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AADjC,WADF;AAIVmF,UAAAA,OAAO,EAAE;AAJC,SAAd;AAOH,OATL,EASOc,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAoBH,KAjzBkB;;AAAA,SAmzBnBsF,eAnzBmB,GAmzBD,CAACxK,cAAD,EAAiByK,uBAAjB,KAA6C;AAC3D,WAAK7J,QAAL,CAAc;AACV8J,QAAAA,mBAAmB,EAAED,uBADX;AAEVzK,QAAAA,cAAc,EAAE,EACZ,GAAGA;AADS,SAFN;AAKVc,QAAAA,eAAe,EAAE;AALP,OAAd;AAOH,KA3zBkB;;AAAA,SA4zBnB6J,oBA5zBmB,GA4zBKvI,SAAD,IAAe;AAElC,WAAKxB,QAAL,CAAc;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACAwB,QAAAA,SAAS,EAAE,EACP,GAAGA;AADI,SARD;AAWVtB,QAAAA,eAAe,EAAE;AAXP,OAAd;AAaH,KA30BkB;;AAAA,SA60BnB8J,iCA70BmB,GA60BiB,CAACnH,UAAD,EAAab,QAAb,KAA0B;AAC1D,WAAKhC,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,4DAAX,EAAyE;AAClF7C,QAAAA,0BAA0B,EAAEiB,UAAU,CAAC,+BAAD,CAAV,CAA4C,CAA5C,EAA+CjB,0BADO;AAElFI,QAAAA,QAAQ,EAAEA;AAFwE,OAAzE,CAAb;AAIAuC,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,aAAK7E,QAAL,CAAc;AACV4C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AADjC,WADF,CAGT;AACD;AACA;AACA;AACA;AAPU;AASVmF,UAAAA,OAAO,EAAE;AATC,SAAd;AAYH,OAdL,EAcOc,KAdP,CAcaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAvBL;AAyBH,KA92BkB;;AAAA,SA+2BnB/I,gBA/2BmB,GA+2BA,CAAC0O,WAAD,EAAcC,WAAd,KAA8B;AAC7C,UAAItH,UAAU,GAAGsH,WAAW,CAACtH,UAA7B;AACA,UAAIuH,eAAe,GAAG,CAAtB;AACA,UAAIC,YAAY,GAAGtL,SAAnB;;AACA,UAAImL,WAAW,KAAK,EAApB,EAAwB;AACpB,YAAIrH,UAAU,CAACsH,WAAW,CAACG,aAAb,CAAV,IAAyCzH,UAAU,CAACsH,WAAW,CAACG,aAAb,CAAV,CAAsC5G,MAAtC,GAA+C,CAA5F,EAA+F;AAC3F0G,UAAAA,eAAe,GAAGvH,UAAU,CAACsH,WAAW,CAACG,aAAb,CAAV,CAAsC,CAAtC,EAAyCH,WAAW,CAACI,eAArD,CAAlB;AACH;AACJ,OAJD,MAKK;AACD,YAAIJ,WAAW,CAACK,UAAhB,EAA4B;AACxBH,UAAAA,YAAY,GAAG/P,cAAc,CAAC4P,WAAD,EAAcrH,UAAU,CAACsH,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAA7B;AACH,SAFD,MAGK;AACDJ,UAAAA,YAAY,GAAGhQ,UAAU,CAAC6P,WAAD,EAAcrH,UAAU,CAACsH,WAAW,CAACG,aAAb,CAAxB,EAAqDH,WAAW,CAACM,eAAZ,IAA+B,EAApF,CAAzB;AAEH;;AACD,YAAIJ,YAAY,CAAC3G,MAAb,GAAsB,CAA1B,EAA6B;AACzB0G,UAAAA,eAAe,GAAGC,YAAY,CAAC,CAAD,CAAZ,CAAgBF,WAAW,CAACI,eAA5B,CAAlB;AACH;AACJ;;AAED,UAAIH,eAAe,KAAK,CAAxB,EAA2B;AACvB,aAAKnK,QAAL,CAAc;AAAEsE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,eAAOhH,KAAK,CAACmH,IAAN,CAAWyF,WAAW,CAACO,QAAvB,EAAiC,EAAE,GAAGP,WAAW,CAACQ,gBAAjB;AAAmC,WAACR,WAAW,CAACI,eAAb,GAA+BH;AAAlE,SAAjC,EACFvF,IADE,CACGC,QAAQ,IAAI;AACdjC,UAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BwH,YAA7B;AACAxH,UAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,eAAGiC,QAAQ,CAAC1F;AAA7B,WAAb;;AAEA,cAAI+K,WAAW,CAACS,SAAhB,EAA2B;AACvBpQ,YAAAA,QAAQ,CAACqI,UAAD,EAAasH,WAAW,CAACU,SAAzB,EAAoCV,WAAW,CAACS,SAAhD,CAAR;AACH,WAFD,MAGK;AACDpQ,YAAAA,QAAQ,CAACqI,UAAD,CAAR;AACH;;AACD,eAAK5C,QAAL,CAAc;AAAE4C,YAAAA,UAAF;AAAc0B,YAAAA,OAAO,EAAE,KAAvB;AAA8B2B,YAAAA,IAAI,EAAE,CAApC;AAAuCC,YAAAA,IAAI,EAAE,EAA7C;AAAiDjG,YAAAA,UAAU,EAAE;AAA7D,WAAd;AACH,SAZE,EAaFmF,KAbE,CAaIC,KAAK,IAAI;AACZ,eAAKrF,QAAL,CAAc;AAAEsE,YAAAA,OAAO,EAAE;AAAX,WAAd;;AACA,cAAIe,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,YAAAA,KAAK,CAACuL,KAAN,CAAY,KAAK9G,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,cAAAA,EAAE,EAAE0F,KAAK,CAACE;AAAZ,aAA9B,CAAZ;AACH,WAFD,MAGK;AACDzL,YAAAA,KAAK,CAAC0L,IAAN,CAAW,KAAKjH,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,cAAAA,EAAE,EAAE0F,KAAK,CAACR,QAAN,CAAe1F;AAArB,aAA9B,CAAX;AACH;AACJ,SArBE,CAAP;AAsBH,OAxBD,MAyBK;AACDyD,QAAAA,UAAU,CAACsH,WAAW,CAACa,cAAb,CAAV,GAAyCjM,SAAzC;AACA8D,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,EAA7B;AACAtB,QAAAA,MAAM,CAACC,IAAP,CAAYqB,UAAZ,EAAwBoI,OAAxB,CAAgC5I,IAAI,IAAI;AACpC,cAAIA,IAAI,KAAK8H,WAAW,CAACG,aAArB,IAAsCjI,IAAI,KAAK8H,WAAW,CAACa,cAA3D,IACGb,WAAW,CAACe,YADf,IAC+Bf,WAAW,CAACe,YAAZ,CAAyBC,OAAzB,CAAiC9I,IAAjC,MAA2C,CAAC,CAD/E,EAEIQ,UAAU,CAACR,IAAD,CAAV,GAAmB,EAAnB;AACP,SAJD;AAKA,aAAKpC,QAAL,CAAc;AACV4C,UAAAA,UADU;AACEhD,UAAAA,SAAS,EAAE,IADb;AACmBuL,UAAAA,SAAS,EAAErM,SAD9B;AAEVwF,UAAAA,OAAO,EAAE;AAFC,SAAd;AAKH;AACJ,KA56BkB;;AAAA,SA86BnB8G,WA96BmB,GA86BL,MAAM;AAChB,UAAIlJ,kBAAkB,GAAG,EAAzB;AACA,UAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,QAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,cAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,YAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,SAJC;AAKL,OAND;AAOA,YAAMY,SAAS,GAAC;AACZqI,QAAAA,IAAI,EAAC,IADO;AAEZzH,QAAAA,qBAAqB,EAAC,KAAK7D,KAAL,CAAW8D,mBAAX,CAA+BnD,KAFzC;AAGZwC,QAAAA,kBAAkB,EAAErB,IAAI,CAACC,SAAL,CAAeI,kBAAf,CAHR;AAIZiB,QAAAA,kBAAkB,EAAEtB,IAAI,CAACC,SAAL,CAAeI,kBAAkB,CAACT,GAAnB,CAAuB2B,CAAC,IAAIA,CAAC,CAAChC,yBAA9B,CAAf,CAJR;AAKZoC,QAAAA,oBAAoB,EAAEtB,kBAAkB,CAACuB,MAL7B;AAMZR,QAAAA,oBAAoB,EAAE,IANV;AAOZrB,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAWX,cAAX,CAA0BwC,0BAA1B,CAAqDlB,KAPrE;AAQZsB,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AARf,OAAhB;AAUA,YAAMY,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE,0BADI;AAEfC,QAAAA,QAAQ,EAAE,mBAFK;AAGfC,QAAAA,SAAS,EAAEA,SAHI;AAIfpD,QAAAA,SAAS,EAAE,QAJI;AAKf0L,QAAAA,SAAS,EAAE,KAAKvL,KAAL,CAAWgI;AALP,OAAnB;AAQA,WAAKwD,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EACA,KAAKjN,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADA,EAEC,KAAKpB,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFD,EAGI,KAAKpB,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHJ,EAIK,KAAKpB,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJL,EAKK,KAAKI,KAAL,CAAWD,SAAX,GACA,MAAI,KAAKvB,KAAL,CAAWtC,iBAAX,CAA6B4G,UAA7B,EAAyC,KAAK9C,KAAL,CAAW6C,UAApD,EAAgE,WAAhE,CADJ,GAGA,MAAI,KAAK1B,4BAAL,CAAkC,EAAC,GAAG8B;AAAJ,OAAlC,EAAkD,QAAlD,CART;AASH,KAn9BkB;;AAAA,SAo9BnB9B,4BAp9BmB,GAo9BY,CAAC2B,UAAD,EAAajD,SAAb,KAA2B;AACtD,WAAKI,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,uBAAuB7E,SAAvB,GAAmC,0BAA9C,EAA0EiD,UAA1E,CAAb;AACA0B,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd;AACA;AACA;AACI,aAAK7E,QAAL,CAAc;AACVE,UAAAA,eAAe,EAAE,IADP;AAEVd,UAAAA,cAAc,EAAE,EAFN;AAGVwD,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AACkB,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AADjC,WAHF;AAMVH,UAAAA,SAAS,EAAE,KAND;AAOVsF,UAAAA,OAAO,EAAE,KAPC;AAQVrD,UAAAA,YAAY,EAAE;AARJ,SAAd,EAJU,CAcd;AACH,OAhBL,EAgBOmE,KAhBP,CAgBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH,cAAGF,KAAK,CAACR,QAAN,CAAe1F,IAAf,KAAsB,kCAAzB,EAA4D;AACxD,iBAAKiM,WAAL;AACH,WAFD,MAEK;AACDtR,YAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;AACJ;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA7BL;AA+BH,KAx/BkB;;AAAA,SAqjCnBkC,cArjCmB,GAqjCF,MAAM;AACnB,WAAKxG,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAImH,cAAc,GAAG;AACjB5C,QAAAA,oBAAoB,EAAE,KAAK9I,KAAL,CAAW4I,oBAAX,CAAgC,sBAAhC,EAAwDjI,KAD7D;AAEjB;AACA;AACAsB,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJV,OAArB;AAMA,UAAIsC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,kDAAX,EAA+DgH,cAA/D,CAAb;AACAlH,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,YAAI6G,MAAM,GAAG;AACTC,UAAAA,2BAA2B,EAAE,KAAK5L,KAAL,CAAW4I,oBAAX,CAAgC,sBAAhC,EAAwDvG,IAAxD,CAA6DwJ,oBADjF,CAET;AACA;;AAHS,SAAb;AAKA,YAAIC,UAAU,GAAG,KAAKC,qBAAL,CAA2BJ,MAA3B,CAAjB;AAEA,aAAK1L,QAAL,CAAc;AACV6L,UAAAA,UADU;AAEVjJ,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AAER,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAFP,CAGR;;AAHQ,WAFF;AAOVmF,UAAAA,OAAO,EAAE;AAPC,SAAd;AASH,OAlBL,EAkBOc,KAlBP,CAkBaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA3BL;AA4BH,KA5lCkB;;AAAA,SAiuCnByH,wBAjuCmB,GAiuCQ,MAAM;AAC7B,YAAMC,eAAe,GAChB,KAAKjM,KAAL,CAAWkD,oBAAX,GACA,CAAC;AACE,mBAAW,4BADb;AAC2C,qBAAa,4BADxD;AAEE,0BAAkB,YAFpB;AAEkC,uBAAe;AAFjD,OAAD,CADA,GAKG,CAAC;AACG,mBAAW,4BADd;AAC4C,qBAAa,4BADzD;AAEG,0BAAkB,YAFrB;AAEmC,uBAAe;AAFlD,OAAD,EAIA;AACI,mBAAW,yBADf;AAEI,qBAAa,2BAFjB;AAE8C,0BACtC,YAHR;AAGsB,uBAAe;AAHrC,OAJA,CANR,CAD6B,CAgBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACR9I,MAAAA,yBAAyB,CAAC,KAAK4F,KAAL,CAAWX,cAAZ,EAA4B4M,eAA5B,EACrB,KAAKrL,WADgB,CAAzB;AAEH,KApyCkB;;AAAA,SAqyCnBoH,eAryCmB,GAqyCA1H,KAAD,IAAW;AACzB,UAAI8B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;;AACA,UAAI,KAAKpC,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA1B,EAAoD;AAChD3F,QAAAA,UAAU,GAAG,KAAKpC,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,GACT,KAAKD,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACIzH,KAAK,CAACiL,SAAN,GAAkBjL,KAAK,CAACiL,SAAxB,GAAoC;AAChCpF,UAAAA,IAAI,EAAE,EAD0B;AAEhCD,UAAAA,IAAI,EAAE;AAF0B,SADxC,CADS,GAKA,EALb;AAMA9D,QAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBwK,CAAC,IAAI;AACrB,iBAAOA,CAAC,CAAC5J,KAAF,CAAQZ,GAAR,CAAYW,IAAI,IAAI;AACvBA,YAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACA,mBAAOH,IAAP;AACH,WAHM,CAAP;AAIH,SALD;AAMH;;AACD,WAAKpC,QAAL,CAAc;AACVmC,QAAAA,UAAU,EAAEA,UADF;AAEV4F,QAAAA,eAAe,EAAE1H,KAAK,CAACiL;AAFb,OAAd;AAIH,KAzzCkB;;AAAA,SA2zCnBY,2BA3zCmB,GA2zCY7L,KAAD,IAAW;AACrC,UAAIoL,cAAc,GAAG,EAArB;AACA,WAAKzL,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAmH,MAAAA,cAAc,GAAG;AACb7J,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsB2E,6BAAtB,CAAoD3F,0BADnE;AAEbI,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAFd,OAAjB;AAIA,UAAIsC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,sDAAX,EAAmEgH,cAAnE,CAAb;AAEAlH,MAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,aAAK7E,QAAL,CAAc;AACV4C,UAAAA,UAAU,EAAE,EACR,GAAG,KAAK7C,KAAL,CAAW6C,UADN;AAER,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AAFP,WADF;AAKVmF,UAAAA,OAAO,EAAE;AALC,SAAd;AAOH,OATL,EASOc,KATP,CASaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAlBL;AAmBH,KAz1CkB;;AAAA,SA21CnB6H,8BA31CmB,GA21Ca7M,QAAD,IAAa;AACxC;AACA,UAAG,KAAKf,KAAL,CAAWuC,KAAX,IAAoB,KAAKvC,KAAL,CAAWuC,KAAX,CAAiBsL,QAArC,IAAiDlD,QAAQ,CAAC,KAAK3K,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,CAA0B,IAA1B,CAAD,CAAR,KAA4CnP,iBAAiB,CAACoP,GAAlH,EAAsH;AAClH,YAAIC,aAAa,GAAC,IAAlB;AACA,eAAOA,aAAP;AACH,OAHD,MAGK;AACL,YAAIC,UAAU,GAAG,EAAE,GAAGjN;AAAL,SAAjB;AACA,YAAIgN,aAAa,GAAC,KAAlB;AACI,YAAIE,UAAU,GAAGD,UAAU,CAACE,SAA5B;;AACA,YAAID,UAAU,IAAIA,UAAU,CAAC/I,MAAX,GAAoB,CAAlC,IAAuC+I,UAAU,KAAK1N,SAA1D,EAAqE;AACjE,eAAK,IAAI4N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAAC/I,MAA/B,EAAuCiJ,CAAC,EAAxC,EAA4C;AACxC,gBAAIC,SAAS,GAAGH,UAAU,CAACE,CAAD,CAA1B;;AACA,gBAAI,CAACC,SAAS,CAACrK,cAAV,CAAyB,WAAzB,CAAL,EAA4C;AACxC,kBAAKqK,SAAS,CAACC,UAAV,CAAqBC,QAArB,KAAgC,UAAhC,IACAF,SAAS,CAACC,UAAV,CAAqBC,QAArB,KAAgC,cADhC,IAEAF,SAAS,CAACC,UAAV,CAAqBC,QAArB,KAAgC,SAFhC,IAGAF,SAAS,CAACC,UAAV,CAAqBC,QAArB,KAAgC,aAHrC,EAGoD;AAChDP,gBAAAA,aAAa,GAAC,IAAd;AACA,uBAAOA,aAAP;AACP;AACA,aARD,MAQO;AACH,kBAAIK,SAAJ,EAAe;AACXJ,gBAAAA,UAAU,GAAG,KAAKJ,8BAAL,CAAoCQ,SAApC,CAAb;;AACA,oBAAG,CAACJ,UAAJ,EAAe;AACX,yBAAOA,UAAP;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,eAAOD,aAAP;AACH;AACF,KA33CgB;;AAAA,SAm7CnBQ,qBAn7CmB,GAm7CK,MAAM;AAC1B,UAAI5K,kBAAkB,GAAG,EAAzB;AACA,UAAIC,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACtBA,QAAAA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AACrB,cAAIA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QAA5C,EAAsD;AAClDL,YAAAA,kBAAkB,CAACM,IAAnB,CAAwBJ,IAAxB;AACH;AACJ,SAJC;AAKL,OAND;;AAOA,UAAGF,kBAAkB,CAACuB,MAAnB,GAA0B,CAA7B,EAA+B;AAC/B,aAAKzD,QAAL,CAAc;AAAEsE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAIC,QAAQ,GAAG,EAAf;AACA,cAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,qCAAX,EACT;AACIxB,UAAAA,oBAAoB,EAAE,IAD1B;AAEI;AACA;AACAA,UAAAA,oBAAoB,EAAE,IAJ1B;AAKIjB,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAL/B,SADS,CAAb;AAQAsC,QAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,QAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,cAAIkI,kBAAkB,GAAG,EAAzB;AACA,cAAI3N,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,gBAAM4N,6BAA6B,GAAG/S,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACrD,iCADqD,EAErD,gBAFqD,EAEnCL,SAFmC,EAExBA,SAFwB,EAEb,IAFa,CAAzD;AAGA,gBAAMmO,8BAA8B,GAAGD,6BAA6B,CAAChI,GAA9B,CAAkC,YAAlC,CAAvC;AACA,gBAAMkI,mBAAmB,GAAGjT,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,uBAAjB,KAA6C,EAA9C,EAC3C,4BAD2C,EAE3C,4BAF2C,EAEb,YAFa,EAECL,SAFD,EAEY,IAFZ,CAA/C;AAGA,gBAAMqO,oBAAoB,GAAGD,mBAAmB,CAAClI,GAApB,CAAwB,YAAxB,CAA7B;AAEA+H,UAAAA,kBAAkB,GAAG,KAAKhN,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,CAA+CsF,MAA/C,CAAsDhL,IAAI,IAC3EA,IAAI,CAACE,cAAL,CAAoB,UAApB,KAAmCF,IAAI,CAACG,QADvB,CAArB;AAGAnD,UAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbwC,YAAAA,0BAA0B,EAAE;AACxBsC,cAAAA,KAAK,EAAEiJ,oBAAoB,CAAC,CAAD,CAApB,CAAwBjJ,KADP;AAExBxD,cAAAA,KAAK,EAAEyM,oBAAoB,CAAC,CAAD,CAApB,CAAwBzM,KAFP;AAGxB0B,cAAAA,IAAI,EAAE+K,oBAAoB,CAAC,CAAD;AAHF,aAFf;AAObE,YAAAA,uBAAuB,EAAEF;AAPZ,WAAjB;AASA,eAAKpN,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,CAA+CrG,GAA/C,CAAmDW,IAAI,IACnDhD,cAAc,GAAG,EACb,GAAGA,cADU;AAEbkO,YAAAA,kBAAkB,EAAE,EAChB,GAAGlO,cAAc,CAACkO,kBADF;AAEhB,eAAClL,IAAI,CAAChB,yBAAN,GAAkC6L;AAFlB;AAFP,WADrB;AASA,eAAKjN,QAAL,CAAc;AACV8J,YAAAA,mBAAmB,EAAEjF,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,qBAAjB,CADX;AAEVoO,YAAAA,eAAe,EAAE1I,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,iBAAjB,CAFP;AAGVC,YAAAA,cAHU;AAIV6D,YAAAA,oBAAoB,EAAE,IAJZ;AAKV8J,YAAAA,kBAAkB,EAAEA,kBALV;AAMV9L,YAAAA,YAAY,EAAE,IANJ;AAOVjC,YAAAA,SAAS,EAAE,IAPD;AAQVc,YAAAA,SAAS,EAAE,KARD;AASVwE,YAAAA,OAAO,EAAE,KATC;AAUV3B,YAAAA,YAAY,EAAE,KAAK5C,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,yBAA1B,KAAwD,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,yBAA1B,EAAqDrC;AAVjH,WAAd;AAYH,SA9CL,EA8COyC,KA9CP,CA8CaC,KAAK,IAAI;AACd,cAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,YAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAEO;AACHzL,YAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,eAAKa,QAAL,CAAc;AACVsE,YAAAA,OAAO,EAAE;AADC,WAAd;AAGH,SAvDL;AAwDC,OApED,MAoEO;AACHxK,QAAAA,KAAK,CAAC0L,IAAN,CAAW,KAAKjH,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AAEH;AACJ,KArgDkB;;AAAA,SAsgDnB+N,UAtgDmB,GAsgDN,CAACpG,KAAD,EAAQK,KAAR,KAAkB;AAC3B,WAAK3H,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,qCAAX,EACT;AACIrD,QAAAA,yBAAyB,EAAEkG,KAAK,CAAClG,yBADrC;AAEI2H,QAAAA,kBAAkB,EAAEzB,KAAK,CAACyB,kBAF9B;AAGIU,QAAAA,uBAAuB,EAAEnC,KAAK,CAACmC,uBAHnC;AAIIzH,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJ/B,OADS,CAAb;AAOD,YAAM0L,cAAc,GAAGrQ,KAAK,CAACmH,IAAN,CAAW,4BAAX,EAAyC;AAC/D,oBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AADkC,OAAzC,CAAvB;AAGC,YAAM2L,UAAU,GAAGtQ,KAAK,CAACmH,IAAN,CAAW,mCAAX,EACf;AAAE,oBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,OADe,CAAnB;AAEAsC,MAAAA,QAAQ,GAAG,CAACyD,IAAD,EAAM4F,UAAN,EAAiBD,cAAjB,CAAX;AACApQ,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,cAAMqI,mBAAmB,GAAGjT,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,uBAAjB,KAA6C,EAA9C,EAC3C,4BAD2C,EAE3C,4BAF2C,EAEb,YAFa,EAECL,SAFD,EAEY,IAFZ,CAA/C;AAGA,cAAMqO,oBAAoB,GAAGD,mBAAmB,CAAClI,GAApB,CAAwB,YAAxB,CAA7B,CAJc,CAMd;AACA;AACA;AACA;AACD;;AACC,cAAM6I,uBAAuB,GAAG5T,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EAC/C,2BAD+C,EACnB,gBADmB,EACFL,SADE,EACQA,SADR,EACmB,IADnB,CAAnD;AAGA,cAAMgP,wBAAwB,GAAGD,uBAAuB,CAAC7I,GAAxB,CAA4B,YAA5B,CAAjC;AAEA,cAAM+I,aAAa,GAAG9T,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,IAAqB,EAAtB,EAA0B,cAA1B,EAAyC,cAAzC,EAAyDL,SAAzD,EAAoEA,SAApE,EAA+E,IAA/E,CAAzC;AAEA,cAAMkP,cAAc,GAAGD,aAAa,CAAC/I,GAAd,CAAkB,YAAlB,CAAvB;AACA,YAAIiJ,cAAc,GAAGhU,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,IAAoB,EAArB,EAAyB,kBAAzB,EAA6C,kBAA7C,EAAiE,KAAjE,EAAwE,KAAxE,EAA+E,IAA/E,CAAnB,CAAwG6F,GAAxG,CAA4G,YAA5G,CAArB;AAEA,aAAKhF,QAAL,CAAc;AACVgO,UAAAA,cAAc,EAACA,cADL;AAEVE,UAAAA,kBAAkB,EAACD,cAFT;AAGVE,UAAAA,wBAAwB,EAAE7G,KAAK,CAACyB,kBAHtB;AAIVqF,UAAAA,6BAA6B,EAAE9G,KAAK,CAACmC,uBAJ3B;AAKVxG,UAAAA,oBAAoB,EAAE,KALZ;AAMV7D,UAAAA,cAAc,EAAE;AACZ;AACA;AACA;AACA;AACAiP,YAAAA,8BAA8B,EAAE;AAC5BnK,cAAAA,KAAK,EAAEoD,KAAK,CAACxD,0BADe;AAE5BpD,cAAAA,KAAK,EAAE4G,KAAK,CAAC1F,0BAFe;AAG5BQ,cAAAA,IAAI,EAAEkF;AAHsB,aALpB;AAUZgH,YAAAA,6BAA6B,EAAE;AAC3BpK,cAAAA,KAAK,EAAEoD,KAAK,CAACtD,cADc;AAE3BtD,cAAAA,KAAK,EAAE4G,KAAK,CAAClG,yBAFc;AAG3BgB,cAAAA,IAAI,EAAEkF;AAHqB,aAVnB;AAeZ1F,YAAAA,0BAA0B,EAAEuL,oBAAoB,CAAC1J,MAArB,GAA8B,CAA9B,GAAkC;AAC1DS,cAAAA,KAAK,EAAEiJ,oBAAoB,CAAC,CAAD,CAApB,CAAwBjJ,KAD2B;AAE1DxD,cAAAA,KAAK,EAAEyM,oBAAoB,CAAC,CAAD,CAApB,CAAwBzM,KAF2B;AAG1D0B,cAAAA,IAAI,EAAE+K,oBAAoB,CAAC,CAAD,CAApB,CAAwB/K;AAH4B,aAAlC,GAIxB,EAnBQ;AAoBZhB,YAAAA,yBAAyB,EAAE0M,wBAAwB,CAACrK,MAAzB,GAAkC,CAAlC,GAAsC;AAC7DS,cAAAA,KAAK,EAAE4J,wBAAwB,CAAC,CAAD,CAAxB,CAA4B5J,KAD0B;AAE7DxD,cAAAA,KAAK,EAAEoN,wBAAwB,CAAC,CAAD,CAAxB,CAA4BpN,KAF0B;AAG7D0B,cAAAA,IAAI,EAAE0L,wBAAwB,CAAC,CAAD,CAAxB,CAA4B1L;AAH2B,aAAtC,GAItB,EAxBO;AA0BZiL,YAAAA,uBAAuB,EAAEF,oBA1Bb;AA2BZoB,YAAAA,iCAAiC,EAAET;AA3BvB,WANN;AAmCV3M,UAAAA,eAAe,EAAEmG,KAnCP;AAoCVrG,UAAAA,YAAY,EAAE,IApCJ;AAqCVjC,UAAAA,SAAS,EAAE,IArCD;AAsCVc,UAAAA,SAAS,EAAE,KAtCD;AAuCVwE,UAAAA,OAAO,EAAE,KAvCC;AAwCV3B,UAAAA,YAAY,EAAE,KAAK5C,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,KAA+C,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,gBAA1B,EAA4CrC;AAxC/F,SAAd;AA0CH,OAhEL,EAgEOyC,KAhEP,CAgEaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OAzEL;AA0EH,KAhmDkB;;AAAA,SAimDnBkK,WAjmDmB,GAimDJrP,IAAD,IAAU;AACpB,WAAKa,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,UAAIlF,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,UAAIqM,cAAc,GAAG;AACjB7J,QAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsB2E,6BAAtB,CAAoD3F,0BAD/D;AAEjBI,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAFV,OAArB;AAIA,UAAIsC,QAAQ,GAAG,EAAf;AACA,YAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,kDAAX,EAA+DgH,cAA/D,CAAb;AAEA,YAAMgD,IAAI,GAAGnR,KAAK,CAACmH,IAAN,CAAW,oBAAX,EACT;AAAE,oBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,OADS,CAAb;AAGA,YAAMyM,IAAI,GAAGpR,KAAK,CAACmH,IAAN,CAAW,sDAAX,EACT;AAAE,qCAA6BtF,IAAI,CAACiC,yBAApC;AAA+D,oBAAY,KAAK7C,KAAL,CAAWuC,KAAX,CAAiBmB;AAA5F,OADS,CAAb;AAGAsC,MAAAA,QAAQ,GAAG,CAACyD,IAAD,EAAOyG,IAAP,EAAaC,IAAb,CAAX;AACAnR,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,cAAM8J,iBAAiB,GAAG1U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,cAAM8P,qBAAqB,GAAGD,iBAAiB,CAAC3J,GAAlB,CAAsB,YAAtB,CAA9B;AACA,YAAI6J,kBAAkB,GAAGhK,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,cAAM2P,gBAAgB,GAAG7U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,cAAMiQ,iBAAiB,GAAGD,gBAAgB,CAAC9J,GAAjB,CAAqB,YAArB,CAA1B;AAEA,cAAMgK,kBAAkB,GAAG/U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,cAAMmQ,mBAAmB,GAAGD,kBAAkB,CAAChK,GAAnB,CAAuB,YAAvB,CAA5B;AAGA,cAAMkK,qBAAqB,GAAGjV,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,cAAMqQ,sBAAsB,GAAGD,qBAAqB,CAAClK,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,cAAMoK,UAAU,GAAGnV,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,cAAMuQ,WAAW,GAAGD,UAAU,CAACpK,GAAX,CAAe,YAAf,CAApB;AAEA,cAAMsK,YAAY,GAAGzK,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiBoQ,wBAAtC;AAEAX,QAAAA,qBAAqB,CAACY,OAAtB,CAA8B;AAAEtL,UAAAA,KAAK,EAAEoL,YAAY,CAACtL,cAAtB;AAAsCtD,UAAAA,KAAK,EAAE4O,YAAY,CAAChG;AAA1D,SAA9B;AACAlK,QAAAA,cAAc,GAAG;AACbgK,UAAAA,oBAAoB,EAAE;AAAElF,YAAAA,KAAK,EAAEoL,YAAY,CAACG,UAAtB;AAAkC/O,YAAAA,KAAK,EAAE4O,YAAY,CAAClG;AAAtD,WADT;AAEbE,UAAAA,+BAA+B,EAAE;AAAEpF,YAAAA,KAAK,EAAEoL,YAAY,CAACtL,cAAtB;AAAsCtD,YAAAA,KAAK,EAAE4O,YAAY,CAAChG;AAA1D,WAFpB;AAGbH,UAAAA,YAAY,EAAE;AAAEjF,YAAAA,KAAK,EAAEoL,YAAY,CAACI,YAAtB;AAAoChP,YAAAA,KAAK,EAAE4O,YAAY,CAACnG;AAAxD,WAHD;AAIbJ,UAAAA,kBAAkB,EAAE;AAAE7E,YAAAA,KAAK,EAAEoL,YAAY,CAACK,cAAtB;AAAsCjP,YAAAA,KAAK,EAAE4O,YAAY,CAACvG;AAA1D,WAJP;AAKbU,UAAAA,uBAAuB,EAAE;AAAEvF,YAAAA,KAAK,EAAEoL,YAAY,CAACM,uBAAtB;AAA+ClP,YAAAA,KAAK,EAAE4O,YAAY,CAAC7F;AAAnE,WALZ;AAMbD,UAAAA,aAAa,EAAE8F,YAAY,CAAC9F,aAAb,KAA+B,CAA/B,GAAmC,IAAnC,GAA0C,KAN5C;AAObqG,UAAAA,sBAAsB,EAAEZ,mBAPX;AAQbvF,UAAAA,SAAS,EAAE4F,YAAY,CAAC5F,SARX;AASbrB,UAAAA,IAAI,EAAEiH,YAAY,CAACjH,IATN;AAUbE,UAAAA,OAAO,EAAE+G,YAAY,CAAC/G,OAVT;AAWbnH,UAAAA,yBAAyB,EAAEkO,YAAY,CAAClO;AAX3B,SAAjB;AAaA,aAAKpB,QAAL,CAAc;AACVgB,UAAAA,eAAe,EAAE,KADP;AAEVhC,UAAAA,SAAS,EAAE,IAFD;AAGVI,UAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ0Q,YAAAA,wBAAwB,EAAElB,qBAFd;AAGZmB,YAAAA,cAAc,EAAEV,WAHJ;AAIZW,YAAAA,oBAAoB,EAAEjB,iBAJV;AAKZkB,YAAAA,yBAAyB,EAAEd,sBALf;AAMZjP,YAAAA,eAAe,EAAE;AANL,WAHN;AAWVN,UAAAA,SAAS,EAAE,QAXD;AAYV0E,UAAAA,OAAO,EAAE;AAZC,SAAd;AAcH,OA5DL,EA4DOc,KA5DP,CA4DaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACHzL,UAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OArEL;AAsEH,KAxrDkB;;AAAA,SA2rDnB4L,eA3rDmB,GA2rDA7P,KAAD,IAAW;AAEzB,YAAMjB,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAApD;;AACA,UAAIiB,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIF,KAAK,CAACC,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AAC/BpB,UAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH;AACJ,OAJD,MAKK,IAAIJ,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,YAA1B,EAAwC;AAEzCnB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AAEH,OAJI,MAKA;AACDtB,QAAAA,cAAc,CAACiB,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaI,KAAjD;AACH;;AAED,WAAKV,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AAGH,KA/sDkB;;AAAA,SA4tDnB+Q,sBA5tDmB,GA4tDO9P,KAAD,IAAW;AAChC,WAAKL,QAAL,CAAc;AAAEoQ,QAAAA,SAAS,EAAE/P,KAAK,CAAC4F,IAAnB;AAAyBoK,QAAAA,SAAS,EAAEhQ,KAAK,CAAC6F;AAA1C,OAAd;AACH,KA9tDkB;;AAAA,SA+tDnBoK,QA/tDmB,GA+tDR,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AAClC,UAAIpR,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBmR,aAAzB;AACAnR,MAAAA,cAAc,CAAC,QAAD,CAAd,GAA2BoR,MAA3B;AACApR,MAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCpE,OAAO,CAACyV,OAAR,CAAgBF,aAAhB,CAAvC;AACA,UAAIG,IAAI,GAAG1V,OAAO,CAACyV,OAAR,CAAgBF,aAAhB,CAAX;AACAG,MAAAA,IAAI,GAAG1V,OAAO,CAAC2V,WAAR,CAAoBJ,aAApB,EAAmCC,MAAnC,EAA2C,IAA3C,CAAP;AACApR,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCpE,OAAO,CAAC4V,SAAR,CAAkBL,aAAlB,EAAiCC,MAAjC,CAAhC;AACA,WAAKxQ,QAAL,CAAc;AAAE0Q,QAAAA,IAAI,EAAEH,aAAR;AAAuBC,QAAAA,MAAM,EAAEA,MAA/B;AAAuCpR,QAAAA,cAAc,EAAE,EAAE,GAAGA;AAAL;AAAvD,OAAd;AAEH,KAzuDkB;;AAAA,SAmxDnByR,qBAnxDmB,GAmxDMxQ,KAAD,IAAW;AAC/B,YAAMyQ,eAAe,GAAGzQ,KAAK,CAACC,MAA9B;AACA,YAAMG,OAAO,GAAGJ,KAAK,CAAC0Q,cAAN,CAAqBzQ,MAArB,CAA4BG,OAA5C;AACA,UAAI0B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBW,IAAI,IAAI;AACxB,eAAOA,IAAI,CAACC,KAAL,CAAWZ,GAAX,CAAeW,IAAI,IAAI;AAC1B,cAAIA,IAAI,CAACG,QAAL,KAAkBzD,SAAtB,EAAiC;AAC7BsD,YAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACH;;AACDH,UAAAA,IAAI,CAACG,QAAL,GAAgB9B,OAAhB;AACA,iBAAO2B,IAAP;AACH,SANM,CAAP;AAOH,OARD;AASA,WAAKpC,QAAL,CAAc;AAAEmC,QAAAA;AAAF,OAAd;AACH,KAjyDkB;;AAAA,SAkyDnB6O,eAlyDmB,GAkyDA3Q,KAAD,IAAW;AACzB,UAAI8B,UAAU,GAAG,KAAKpC,KAAL,CAAWoC,UAA5B;AACAA,MAAAA,UAAU,CAAChD,IAAX,CAAgBsC,GAAhB,CAAoBwK,CAAC,IAAI;AACrB,eAAOA,CAAC,CAAC5J,KAAF,CAAQZ,GAAR,CAAYW,IAAI,IAAI;AACvB,cAAIA,IAAI,CAAC,2BAAD,CAAJ,KAAsC/B,KAAK,CAAC4Q,QAAN,CAAe,2BAAf,CAA1C,EAAuF;AACnF7O,YAAAA,IAAI,CAACG,QAAL,GAAgB,CAAClC,KAAK,CAAC4Q,QAAN,CAAe1O,QAAhC;AACH;;AACD,iBAAOH,IAAP;AACH,SALM,CAAP;AAMH,OAPD;AAQA,WAAKpC,QAAL,CAAc;AAAEmC,QAAAA;AAAF,OAAd;AACH,KA7yDkB;;AAAA,SA0zDnB0F,iBA1zDmB,GA0zDC,CAAC1I,IAAD,EAAOmM,SAAP,KAAqB;AACrC,YAAM4F,UAAU,GAAG,CACf;AACIC,QAAAA,KAAK,EAAE,iBADX;AAEIC,QAAAA,SAAS,EAAE;AAFf,OADe,CAAnB;AAMA,YAAMC,MAAM,GAAG/F,SAAS,CAACgG,KAAzB;;AACA,UAAID,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAAC5P,GAAP,CAAY6P,KAAD,IAAYA,KAAK,CAACJ,UAAN,GAAmBA,UAA1C;AACH;;AACD5F,MAAAA,SAAS,CAACgG,KAAV,GAAkBD,MAAlB;AACA,YAAME,YAAY,GAAG5T,OAAO,CAACwB,IAAD,EAAOmM,SAAP,CAA5B,CAZqC,CAarC;AACA;AACA;AACA;;AACA,aAAOiG,YAAP;AACH,KA50DkB;;AAAA,SAmsEnBC,aAnsEmB,GAmsEH,MAAM;AAClB,YAAM3O,UAAU,GAAG;AACfG,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKzE,KAAL,CAAWuC,KAAX,CAAiBmB,QADZ;AAERwP,YAAAA,OAAO,EAAE,KAAK1R,KAAL,CAAWX,cAAX,CAA0B,eAA1B,CAFD;AAGRsS,YAAAA,WAAW,EAAE,KAAK3R,KAAL,CAAWX,cAAX,CAA0B,aAA1B,KAA4C,KAAKW,KAAL,CAAWX,cAAX,CAA0B,aAA1B,EAAyCsB,KAH1F;AAIRiR,YAAAA,iBAAiB,EAAE,KAAK5R,KAAL,CAAWX,cAAX,CAA0B,aAA1B,KAA4C,KAAKW,KAAL,CAAWX,cAAX,CAA0B,aAA1B,EAAyC8E;AAJhG,WADL;AAQP0N,UAAAA,QAAQ,EAAE,KAAK7R,KAAL,CAAWX,cAAX,CAA0B,eAA1B;AARH,SADI;AAWf+F,QAAAA,UAAU,EAAE,KAAKpF,KAAL,CAAWoF;AAXR,OAAnB,CADkB,CAclB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,WAAKnJ,8BAAL,CAAoC6G,UAApC,EAAgD,WAAhD,EAA4D,MAAM,KAAKuI,WAAL,EAAlE;AACH,KA9tEkB;;AAAA,SAkuEnBpP,8BAluEmB,GAkuEc,CAAC6G,UAAD,EAAasI,SAAb,EAAuB0G,MAAvB,KAAkC;AAC9D,WAAK7R,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACC,UAAIzB,UAAU,IAAIA,UAAU,CAACG,SAAzB,IAAsCH,UAAU,CAACG,SAAX,CAAqBhB,QAA/D,EAAyE;AACvEa,QAAAA,UAAU,CAACG,SAAX,CAAqB,UAArB,IAAmC,EACjC,GAAGH,UAAU,CAACG,SAAX,CAAqBhB,QADS;AAEjC8P,UAAAA,SAAS,EAAE9X,mBAAmB,CAAC6I,UAAU,CAACG,SAAX,CAAqBhB,QAArB,CAA8B8P,SAA/B,CAFG;AAGjCC,UAAAA,WAAW,EAAE/X,mBAAmB,CAAC6I,UAAU,CAACG,SAAX,CAAqBhB,QAArB,CAA8B+P,WAA/B;AAHC,SAAnC;AAKD;;AACD,aAAOzU,KAAK,CAACmH,IAAN,CAAW,+BAAX,EAA4C5B,UAAU,CAACG,SAAvD,EACJ4B,IADI,CACCC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAAC1F,IAAT,KAAkB,SAAtB,EAAiC;AAE/B,gBAAM2D,SAAS,GAAGD,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,CAAlB;AACAA,UAAAA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,UAApD,IAAkEA,UAAU,CAACG,SAAX,CAAqBhB,QAAvF;;AAEA,cAAIa,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,CAAJ,EAAkF;AAEhF,mBAAOnP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,EAA6E,aAA7E,CAAP;;AAEA,gBAAInP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,CAAJ,EAAkF;AAChF,qBAAOnP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,qBAAOnP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,qBAAOnP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDC,SAAS,CAACkP,WAAV,EAApD,EAA6E,OAA7E,CAAP;AAGD,aAV+E,CAYhF;;;AACA,gBAAInP,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,CAAJ,EAA8D;AAE5D,qBAAOA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,aAAzD,CAAP;AACA,qBAAOA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,eAAzD,CAAP;AACA,qBAAOA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,eAAzD,CAAP;AACA,qBAAOA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,gBAAvC,EAAyD,OAAzD,CAAP;AACD;AACF;;AACD,iBAAO,KAAK5G,iBAAL,CAAuB4G,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAAvB,EAA+DA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,CAA/D,EAAuGsI,SAAvG,EAAiHrM,SAAjH,EAA2H+S,MAA3H,CAAP;AACD;AACF,OA9BI,EA+BJzM,KA/BI,CA+BEC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AACjCxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACA,SAFF,MAEQ;AACN,cAAGF,KAAK,CAACR,QAAN,CAAe1F,IAAf,KAAsB,kCAAzB,EAA4D;AACxD0S,YAAAA,MAAM;AACT,WAFD,MAEK;AACL/X,YAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACC;AACJ;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGC,OA5CI,CAAP;AA6CH,KAxxEgB;;AAAA,SA4xEpBrI,iBA5xEoB,GA4xEA,CAAC4G,UAAD,EAAaD,UAAb,EAAyBuI,SAAzB,EAAoC8G,YAApC,EAAiDJ,MAAjD,KAA2D;AAC9E,WAAK7R,QAAL,CAAc;AAAEsE,QAAAA,OAAO,EAAE;AAAX,OAAd;AACM,UAAI4N,UAAU,GAAG,EAAjB;AACA,UAAI3N,QAAQ,GAAG,EAAf;AACA2N,MAAAA,UAAU,GAAG5U,KAAK,CAACmH,IAAN,CAAW5B,UAAU,CAACE,QAAX,GAAsB,GAAtB,GAA4BF,UAAU,CAACjD,SAAvC,GAAmDiD,UAAU,CAACC,SAAzE,EAAoF,EAAE,GAAGD,UAAU,CAACG;AAAhB,OAApF,CAAb;AACEuB,MAAAA,QAAQ,GAAG,CAAC2N,UAAD,CAAX;AACA3U,MAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACV,aAAK7E,QAAL,CAAc;AACVE,UAAAA,eAAe,EAAE,IADP;AAEVd,UAAAA,cAAc,EAAE,EAFN;AAGVwD,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AACO,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AADtB,WAHF;AAMVH,UAAAA,SAAS,EAAE,KAND;AAOVsF,UAAAA,OAAO,EAAE,KAPC;AAQVrD,UAAAA,YAAY,EAAE,KARJ;AASVnB,UAAAA,SAAS,EAAE;AATD,SAAd;AAWP,OAbL,EAaOsF,KAbP,CAaaC,KAAK,IAAI;AACd,YAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,UAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAEO;AACH,cAAGF,KAAK,CAACR,QAAN,CAAe1F,IAAf,KAAsB,kCAAzB,EAA4D;AACxD,iBAAKiM,WAAL;AACH,WAFD,MAEK;AACDtR,YAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;AACJ;;AACD,aAAKa,QAAL,CAAc;AACVsE,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH,OA1BL;AA2BL,KA7zEgB;;AAEf,SAAKvE,KAAL,GAAa;AACToS,MAAAA,mBAAmB,EAAE,CACjB;AAAE,mBAAW,sBAAb;AAAqC,qBAAa,4BAAlD;AAAgF,iBAAS;AAAzF,OADiB,EAEjB;AAAE,mBAAW,uBAAb;AAAsC,qBAAa,gBAAnD;AAAqE,iBAAS;AAA9E,OAFiB,EAGjB;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,iBAAhD;AAAmE,iBAAS,OAA5E;AAAqF,sBAAc;AAAnG,OAHiB,EAIjB;AAAE,mBAAW,aAAb;AAA4B,qBAAa,cAAzC;AAAyD,iBAAS;AAAlE,OAJiB,EAKjB;AAAE,mBAAW,iBAAb;AAAgC,qBAAa,kBAA7C;AAAiE,iBAAS;AAA1E,OALiB,EAMjB;AAAE,mBAAW,4BAAb;AAA2C,qBAAa,qBAAxD;AAA+E,iBAAS;AAAxF,OANiB,EAOjB;AAAE,mBAAW,mBAAb;AAAkC,qBAAa,gBAA/C;AAAiE,iBAAS;AAA1E,OAPiB,EAQjB;AAAE,mBAAW,4BAAb;AAA2C,qBAAa,yBAAxD;AAAmF,iBAAS;AAA5F,OARiB,CADZ;AAYT3Q,MAAAA,SAAS,EAAE,EAZF;AAaTmH,MAAAA,oBAAoB,EAAE,EAbb;AAcTrJ,MAAAA,QAAQ,EAAE,CAAC;AAAE8S,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,QAAQ,EAAE,CAAC;AAAED,UAAAA,KAAK,EAAE;AAAT,SAAD;AAA9B,OAAD,CAdD;AAeTE,MAAAA,YAAY,EAAE,KAfL;AAgBTC,MAAAA,YAAY,EAAEzT,SAhBL;AAiBT0T,MAAAA,gBAAgB,EAAE,KAjBT;AAkBTlT,MAAAA,QAAQ,EAAE,CACN;AACI;AACAC,QAAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFV;AAGIH,QAAAA,QAAQ,EAAE,IAHd;AAIIC,QAAAA,QAAQ,EAAE,IAJd;AAKIC,QAAAA,IAAI,EAAE,IALV;AAMIC,QAAAA,EAAE,EAAErD,IAAI;AANZ,OADM,CAlBD;AA2BTmW,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,KADF;AAEJC,QAAAA,UAAU,EAAE;AAFR,OAAD,CA3BE;AA+BTvT,MAAAA,cAAc,EAAE,EA/BP;AAgCTqD,MAAAA,qBAAqB,EAAE,EAhCd;AAiCT+K,MAAAA,UAAU,EAAE,IAAIoF,GAAJ,EAjCH;AAkCT3M,MAAAA,IAAI,EAAE,CAlCG;AAmCT4M,MAAAA,UAAU,EAAE,CAnCH;AAoCTC,MAAAA,UAAU,EAAE,EApCH;AAqCT5M,MAAAA,IAAI,EAAE,KAAK3H,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,GACF,KAAK7N,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,CAA0B,CAA1B,CADE,GAC6B,EAtC1B;AAuCTtG,MAAAA,0BAA0B,EAAE,EAvCnB;AAwCTiN,MAAAA,YAAY,EAAEjU,SAxCL;AAyCTwF,MAAAA,OAAO,EAAE,KAzCA;AA0CTyD,MAAAA,eAAe,EAAE;AACb7B,QAAAA,IAAI,EAAE,EADO;AAEbD,QAAAA,IAAI,EAAE,CAFO;AAGbqL,QAAAA,KAAK,EAAE,CACH;AACIH,UAAAA,KAAK,EAAE;AADX,SADG;AAHM;AA1CR,KAAb;AAoDA,QAAI6B,MAAM,GAAG,EAAb;;AACA,QAAI,KAAKjT,KAAL,CAAWoS,mBAAf,EAAoC;AAChC,WAAKpS,KAAL,CAAWoS,mBAAX,CAA+B1Q,GAA/B,CAAmC0P,KAAK,IAAI;AACxC,YAAIA,KAAK,CAAC8B,SAAN,KAAoB,4BAApB,IAAoD9B,KAAK,CAAC8B,SAAN,KAAoB,cAAxE,IACG9B,KAAK,CAAC8B,SAAN,KAAoB,kBADvB,IAC6C9B,KAAK,CAAC8B,SAAN,KAAoB,gBADjE,IAEG9B,KAAK,CAAC8B,SAAN,KAAoB,yBAF3B,EAEsD;AAClDD,UAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,aAAC7B,KAAK,CAAC8B,SAAP,GAAmB;AACf,uBACI,KAAK1U,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAC1BnL,gBAAAA,EAAE,EAAEwR,KAAK,CAAC+B;AADgB,eAA9B,CAFW;AAMf,sBAAQ/B,KAAK,CAAC8B,SAAN,KAAoB,iBAApB,GAAwC,QAAxC,GAAmD,MAN5C;AAOf,8BAAgB,CAAC,OAAD,EAAU,MAAV,CAPD;AASf,iCAAmB;AACf,8BAAc,MADC;AAEf,oCAAoB,KAAK1U,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAC9CnL,kBAAAA,EAAE,EAAEwR,KAAK,CAAC+B;AADoC,iBAA9B;AAFL;AATJ;AAFd,WAAT;AAmBH;AACJ,OAxBD;AAyBH;;AACD,SAAKnT,KAAL,GAAa,EAAE,GAAI,KAAKA,KAAX;AAAkB,gBAAUiT;AAA5B,KAAb;AACA,SAAKlM,SAAL,GAAiBrP,KAAK,CAAC0b,SAAN,EAAjB;AACA,SAAKC,QAAL,GAAgB3b,KAAK,CAAC0b,SAAN,EAAhB;AACA,SAAK5H,cAAL,GAAsB,IAAI3O,cAAJ,EAAtB;AACH;;AAC8B,SAAxByW,wBAAwB,CAAC9U,KAAD,EAAQwB,KAAR,EAAe;AAE1C,QAAIxB,KAAK,CAACuC,KAAN,CAAYwS,YAAZ,KAA6B,EAA7B,IAAmC/U,KAAK,CAACuC,KAAN,CAAYwS,YAAZ,KAA6BvT,KAAK,CAACuT,YAA1E,EAAwF;AACpFxZ,MAAAA,KAAK,CAAC0L,IAAN,CAAWjH,KAAK,CAACuC,KAAN,CAAYwS,YAAvB;AACA/U,MAAAA,KAAK,CAACuC,KAAN,CAAYwS,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI/U,KAAK,CAACuC,KAAN,CAAYuE,KAAZ,KAAsB,EAAtB,IAA4B9G,KAAK,CAACuC,KAAN,CAAYuE,KAAZ,KAAsBtF,KAAK,CAACsF,KAA5D,EAAmE;AAC/DvL,MAAAA,KAAK,CAACuL,KAAN,CAAY9G,KAAK,CAACuC,KAAN,CAAYuE,KAAxB;AACA9G,MAAAA,KAAK,CAACuC,KAAN,CAAYuE,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AACDkO,EAAAA,kBAAkB,CAACC,aAAD,EAAgBC,aAAhB,EAA+B;AAC7C,QAAI;AAAE5H,MAAAA,UAAF;AAAc6H,MAAAA,sBAAd;AACAtU,MAAAA,cADA;AACgBoO,MAAAA,UADhB;AAEA/K,MAAAA,qBAFA;AAEuBkR,MAAAA,sBAFvB;AAGAC,MAAAA,2BAHA;AAG6BhR,MAAAA,UAH7B;AAGyCT,MAAAA,UAHzC;AAGqDwG,MAAAA,oBAHrD;AAG2EqK,MAAAA,MAH3E;AAGmFnP,MAAAA,mBAHnF;AAGwG7E,MAAAA,SAHxG;AAGmHc,MAAAA;AAHnH,QAGiI,KAAKC,KAH1I;AAIA,QAAI8T,IAAI,GAAG,KAAX,CAL6C,CAM7C;;AACA,QAAI,KAAKtV,KAAL,CAAWuC,KAAX,CAAiB9B,SAAjB,KAA+BwU,aAAa,CAAC1S,KAAd,CAAoB9B,SAAvD,EAAkE;AAC9D6U,MAAAA,IAAI,GAAG,IAAP;AACA7U,MAAAA,SAAS,GAAG,KAAKT,KAAL,CAAWuC,KAAX,CAAiB9B,SAA7B;AACH;;AACD,QAAI,KAAKT,KAAL,CAAWuC,KAAX,CAAiBhB,SAAjB,KAA+B0T,aAAa,CAAC1S,KAAd,CAAoBhB,SAAvD,EAAkE;AAC9D+T,MAAAA,IAAI,GAAG,IAAP;AACA/T,MAAAA,SAAS,GAAG,KAAKvB,KAAL,CAAWuC,KAAX,CAAiBhB,SAA7B;AACH;;AACD,QAAI,KAAKvB,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BkR,qBAA5B,KAAsDN,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BkR,qBAAzF,EAAgH;AAC5G,UAAIC,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAKtV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BkR,qBAA5B,IAAqD,KAAKvV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BkR,qBAA5B,CAAkDrS,GAAlD,CAChDW,IAAD,IAAU2R,mBAAmB,CAACvR,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACR,0BAAhB;AAA4C,iBAASQ,IAAI,CAAC0B;AAA1D,OAAzB,CADuC,CAArD;AAGAkP,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,sCAA8B;AAC1B,mBAAS,KAAKzU,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AACnCnL,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADiB;AAI1B,kBAAQ,QAJkB;AAK1B,0BAAgB,CAAC,OAAD,CALU;AAM1B,2BAAiB;AACb,0BAAcoU;AADD;AANS;AAFzB,OAAT;AAcH;;AACD,QAAI,KAAKxV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BoR,UAA5B,KAA2CR,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BoR,UAA9E,EAA0F;AACtF,UAAID,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAKtV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BoR,UAA5B,IAA0C,KAAKzV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BoR,UAA5B,CAAuCvS,GAAvC,CACrCW,IAAD,IAAU2R,mBAAmB,CAACvR,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAAC+G,YAAhB;AAA8B,iBAAS/G,IAAI,CAACsN;AAA5C,OAAzB,CAD4B,CAA1C;AAGAsD,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,wBAAgB;AACZ,mBAAS,KAAKzU,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AACnCnL,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADG;AAIZ,kBAAQ,QAJI;AAKZ,0BAAgB,CAAC,OAAD,CALJ;AAMZ,2BAAiB;AACb,0BAAcoU;AADD;AANL;AAFX,OAAT;AAcH;;AACD,QAAI,KAAKxV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqR,WAA5B,KAA4CT,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BqR,WAA/E,EAA4F;AACxF,UAAIF,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACAjR,MAAAA,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAA9B;AACA,WAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqR,WAA5B,IAA2C,KAAK1V,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqR,WAA5B,CAAwCxS,GAAxC,CACtCW,IAAD,IAAU2R,mBAAmB,CAACvR,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACmB,gBAAhB;AAAkC,iBAASnB,IAAI,CAAC8R;AAAhD,OAAzB,CAD6B,CAA3C,CAJwF,CAOxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACArQ,MAAAA,mBAAmB,GAAG;AAClBK,QAAAA,KAAK,EAAE,KAAK3F,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiB,mBAA5B,IACH,KAAKtF,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiB,mBAA5B,CAAgDqQ,gBAFlC;AAEoDxT,QAAAA,KAAK,EACvE,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiB,mBAA5B,IACA,KAAKtF,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiB,mBAA5B,CAAgDN;AAJlC,OAAtB;AAMA,YAAM4Q,yBAAyB,GAAGla,mBAAmB,CAAC,KAAKsE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqR,WAA5B,IAA2C,EAA5C,EAAgD,kBAAhD,EACjD,kBADiD,EAC7BnV,SAD6B,EAClBA,SADkB,EACPA,SADO,CAArD;AAEA8D,MAAAA,UAAU,CAAC,oBAAD,CAAV,GAAmCuR,yBAAyB,CAACnP,GAA1B,CAA8B,YAA9B,CAAnC;AACH;;AACD,QAAI,KAAKzG,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwR,aAA5B,KAA8CZ,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BwR,aAAjF,EAAgG;AAC5F,UAAIL,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAKtV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwR,aAA5B,IAA6C,KAAK7V,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BwR,aAA5B,CAA0C3S,GAA1C,CACxCW,IAAD,IAAU2R,mBAAmB,CAACvR,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAAC2G,kBAAhB;AAAoC,iBAAS3G,IAAI,CAACuN;AAAlD,OAAzB,CAD+B,CAA7C;AAGAqD,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,8BAAsB;AAClB,mBAAS,KAAKzU,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AACnCnL,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADS;AAIlB,kBAAQ,QAJU;AAKlB,0BAAgB,CAAC,OAAD,CALE;AAMlB,2BAAiB;AACb,0BAAcoU;AADD;AANC;AAFjB,OAAT;AAcH;;AAAC,QAAI,KAAKxV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiM,kBAA5B,KAAmD2E,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BiM,kBAAtF,EAA0G;AACxG,UAAIkF,mBAAmB,GAAG,EAA1B;AACAF,MAAAA,IAAI,GAAG,IAAP;AACA,WAAKtV,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiM,kBAA5B,IAAkD,KAAKtQ,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BiM,kBAA5B,CAA+CpN,GAA/C,CAC7CW,IAAD,IAAU2R,mBAAmB,CAACvR,IAApB,CAAyB;AAAE,iBAASJ,IAAI,CAACqH,uBAAhB;AAAyC,iBAASrH,IAAI,CAACwN;AAAvD,OAAzB,CADoC,CAAlD;AAGAoD,MAAAA,MAAM,GAAG,EACL,GAAGA,MADE;AAEL,mCAA2B;AACvB,mBAAS,KAAKzU,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AACnCnL,YAAAA,EAAE,EAAE;AAD+B,WAA9B,CADc;AAIvB,kBAAQ,QAJe;AAKvB,0BAAgB,CAAC,OAAD,CALO;AAMvB,2BAAiB;AACb,0BAAcoU;AADD;AANM;AAFtB,OAAT;AAcH,KA/H4C,CAgI7C;;;AACA,QAAI,KAAKxV,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAA1B,KAAwC8Q,aAAa,CAAC1S,KAAd,CAAoBmB,QAApB,CAA6BS,SAAzE,EAAoF;AAChFmR,MAAAA,IAAI,GAAG,IAAP;AACApR,MAAAA,qBAAqB,GAAG,EAAxB;;AACA,UAAI,KAAKlE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAArB,EAA4C;AACxC,aAAKlE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAjB,CAAuC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAjE,KAA+EpB,MAAM,CAAC+S,MAAP,CAAc,KAAK9V,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAjB,CAAuC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAjE,CAAd,EAA2FjB,GAA3F,CAA+FW,IAAI,IAC9KK,qBAAqB,CAACD,IAAtB,CAA2BJ,IAAI,CAACO,YAAhC,CAD2E,CAA/E;AAEH;;AACD6K,MAAAA,UAAU,GAAGtT,aAAa,CAAC,KAAKqE,KAAL,CAAWuC,KAAX,CAAiB2B,qBAAlB,EAAyC,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAAjB,CAA0BS,SAAnE,CAA1B;AAEH;;AAED,QAAI,KAAKnE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B0R,qBAA5B,KAAsDd,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+B0R,qBAAzF,EAAgH;AAC5GT,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMM,yBAAyB,GAAGla,mBAAmB,CAAC,KAAKsE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B0R,qBAA5B,IAAqD,EAAtD,EAA0D,sBAA1D,EACjD,sBADiD,EACzBxV,SADyB,EACdA,SADc,EACHA,SADG,CAArD;AAEA4U,MAAAA,sBAAsB,GAAGS,yBAAyB,CAACnP,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKzG,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2R,uBAAhC,EAAyD;AACrD5L,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnBE,UAAAA,oBAAoB,EAAE6K,sBAAsB,CAACtG,MAAvB,CAA8BhL,IAAI,IACpDA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2R,uBAA5B,CAAoD1L,oBADjD,EACuE,CADvE;AAFH,SAAvB;AAKH;AAEJ;;AACD,QAAI,KAAKtK,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BkR,qBAA5B,KAAsDN,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BkR,qBAAzF,EAAgH;AAC5GD,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMW,yBAAyB,GAAGva,mBAAmB,CAAC,KAAKsE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BkR,qBAA5B,IAAqD,EAAtD,EAA0D,4BAA1D,EACjD,4BADiD,EACnBhV,SADmB,EACRA,SADQ,EACGA,SADH,CAArD;AAEA6U,MAAAA,sBAAsB,GAAGa,yBAAyB,CAACxP,GAA1B,CAA8B,YAA9B,CAAzB;;AACA,UAAI,KAAKzG,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2E,6BAAhC,EAA+D;AAC3DoB,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnB/G,UAAAA,0BAA0B,EAAE+R,sBAAsB,CAACvG,MAAvB,CAA8BhL,IAAI,IAC1DA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B2E,6BAA5B,CAA0D3F,0BADjD,EAC6E,CAD7E;AAFT,SAAvB;AAKH;AAGJ;;AAED,QAAI,KAAKrD,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqE,oBAA5B,KAAqDuM,aAAa,CAAC1S,KAAd,CAAoB8B,UAApB,CAA+BqE,oBAAxF,EAA8G;AAC1G4M,MAAAA,IAAI,GAAG,IAAP;AACA,YAAMY,wBAAwB,GAAGxa,mBAAmB,CAAC,KAAKsE,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4BqE,oBAA5B,IAAoD,EAArD,EAAyD,2BAAzD,EAChD,YADgD,EAClCnI,SADkC,EACvBA,SADuB,EACZA,SADY,CAApD;AAEA8U,MAAAA,2BAA2B,GAAGa,wBAAwB,CAACzP,GAAzB,CAA6B,YAA7B,CAA9B;;AACA,UAAI,KAAKzG,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B8D,4BAAhC,EAA8D;AAC1DiC,QAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnB+L,UAAAA,yBAAyB,EAAEd,2BAA2B,CAACxG,MAA5B,CAAmChL,IAAI,IAC9DA,IAAI,CAAC1B,KAAL,KAAe,KAAKnC,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,CAA4B8D,4BAA5B,CAAyDgO,yBADjD,EAC4E,CAD5E;AAFR,SAAvB;AAKH;AACJ;;AAED,QAAI,KAAKnW,KAAL,CAAWuC,KAAX,CAAiB8B,UAAjB,KAAgC4Q,aAAa,CAAC1S,KAAd,CAAoB8B,UAAxD,EAAoE;AAChEiR,MAAAA,IAAI,GAAG,IAAP;AACAjR,MAAAA,UAAU,GAAG,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAA9B;AACAiJ,MAAAA,UAAU,GAAG,KAAKC,qBAAL,CAA2B,KAAKvN,KAAL,CAAWuC,KAAX,CAAiB8B,UAA5C,CAAb;AAEH;;AACD,QAAI,KAAK7C,KAAL,CAAW6C,UAAX,KAA0B6Q,aAAa,CAAC7Q,UAA5C,EAAwD;AACpDiR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI,KAAK9T,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA1B,EAAoD;AAChD,YAAI,KAAK/H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,KAAmD2L,aAAa,CAAC7Q,UAAd,CAAyBkF,wBAAhF,EAA0G;AACtGlF,UAAAA,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAAxB;AACA+R,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDzS,UAAnD,EAFsG,CAGtG;;AACA,cAAGS,UAAU,CAACkF,wBAAX,KAAwChJ,SAAxC,IAAqD8D,UAAU,CAACkF,wBAAX,CAAoCrE,MAApC,GAA4C,KAAK1D,KAAL,CAAWgI,eAAX,CAA2B9B,IAAvE,KAA+E,KAAvI,EACA;AACI,iBAAKlG,KAAL,CAAWgI,eAAX,CAA2B9B,IAA3B,GAAgC,CAAhC;AACA,iBAAKlG,KAAL,CAAWgI,eAAX,CAA2B7B,IAA3B,GAAgC,EAAhC;AACH;;AACD/D,UAAAA,UAAU,GAAGS,UAAU,CAACkF,wBAAX,GACT,KAAKD,iBAAL,CAAuBjF,UAAU,CAACkF,wBAAX,IAAuC,EAA9D,EACI,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,YAAAA,IAAI,EAAE,EADgD;AAEtDD,YAAAA,IAAI,EAAE;AAFgD,WAD9D,CADS,GAKA,EALb;AAUA0O,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BzS,UAA3B;AACH;AACJ;;AAED0J,MAAAA,UAAU,GAAG,KAAKC,qBAAL,CAA2B,KAAK/L,KAAL,CAAW6C,UAAtC,CAAb;AAEH;;AACD,QAAIiR,IAAJ,EAAU;AACN,WAAK7T,QAAL,CAAc;AACV0T,QAAAA,sBADU;AACc7H,QAAAA,UADd;AAEVzM,QAAAA,cAFU;AAEMoO,QAAAA,UAFN;AAGV/K,QAAAA,qBAHU;AAGakR,QAAAA,sBAHb;AAIVC,QAAAA,2BAJU;AAImBhR,QAAAA,UAJnB;AAI+B+F,QAAAA,oBAJ/B;AAIqDqK,QAAAA,MAJrD;AAI6DnP,QAAAA,mBAJ7D;AAIkF7E,QAAAA,SAJlF;AAI6Fc,QAAAA,SAJ7F;AAIwGqC,QAAAA;AAJxG,OAAd;AAMH;AAEJ;;AAoOD0S,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAKhV,QAAL,CAAc;AACViV,QAAAA,SAAS,EAAEF,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC,MAAM,GAAG;AAFb,OAAd;AAIH;AACJ;;AACDjJ,EAAAA,qBAAqB,CAACoJ,GAAD,EAAM;AACvB,UAAMC,cAAc,GAAG,EAAvB;;AACA,QAAI,KAAKpV,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB0R,qBAAnD,EAA0E;AAEtEa,MAAAA,cAAc,CAAC3S,IAAf,CACI;AACI,iBAAS,qBADb;AAEI,iBAAS0S,GAAG,CAACvJ,2BAAJ,IACLuJ,GAAG,CAACvJ,2BAAJ,KAAoC,IAD/B,GAELuJ,GAAG,CAACvJ,2BAFC,GAE6B;AAJ1C,OADJ,CAQI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBJ;AAsBH;;AACD,WAAOwJ,cAAP;AACH;;AAyaDvM,EAAAA,wBAAwB,CAAC5F,SAAD,EAAY0F,SAAZ,EAAuBD,SAAvB,EAAkC;AACtD,QAAIE,oBAAoB,GAAG,KAAK5I,KAAL,CAAW4I,oBAAX,IAAmC,EAA9D;AACA,QAAI8C,cAAc,GAAG,EAArB;AACA,SAAKzL,QAAL,CAAc;AAAEsE,MAAAA,OAAO,EAAE;AAAX,KAAd;;AACA,QAAIoE,SAAS,KAAK,4BAAlB,EAAgD;AAC5C+C,MAAAA,cAAc,GAAG;AACb5C,QAAAA,oBAAoB,EAAEF,oBAAoB,CAAC,sBAAD,CAApB,CAA6CjI,KADtD;AAEbkB,QAAAA,0BAA0B,EAAE6G,SAAS,CAAC/H,KAFzB;AAGbsB,QAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAHP,OAAjB;AAKH,KAND,MAMO;AACHyJ,MAAAA,cAAc,GAAG;AACb5C,QAAAA,oBAAoB,EAAEJ,SAAS,CAAC/H,KADnB;AAEbsB,QAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAFP,OAAjB;AAIH;;AACD,QAAIuC,QAAQ,GAAG,EAAf;AACA,UAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,kDAAX,EAA+DgH,cAA/D,CAAb;AAEAlH,IAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,IAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAE8O,QAAAA,sBAAF;AACAC,QAAAA;AADA,UACgC,KAAK7T,KADzC;AAGA,UAAIyU,yBAAyB,GAAGva,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB2U,qBAAjB,IAA0C,EAA3C,EAA+C,4BAA/C,EAC/C,4BAD+C,EACjBhV,SADiB,EACNA,SADM,EACKA,SADL,CAAnD;AAEA6U,MAAAA,sBAAsB,GAAGa,yBAAyB,CAACxP,GAA1B,CAA8B,YAA9B,CAAzB;AACA,UAAIyP,wBAAwB,GAAGxa,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB8H,oBAAjB,IAAyC,EAA1C,EAA8C,2BAA9C,EAC9C,YAD8C,EAChCnI,SADgC,EACrBA,SADqB,EACVA,SADU,CAAlD;AAEA8U,MAAAA,2BAA2B,GAAGa,wBAAwB,CAACzP,GAAzB,CAA6B,YAA7B,CAA9B;AACA2D,MAAAA,oBAAoB,GAAG,EACnB,GAAGA,oBADgB;AAEnB/G,QAAAA,0BAA0B,EAAE+R,sBAAsB,CAAClQ,MAAvB,GAAgC,CAAhC,GACxBkQ,sBAAsB,CAAC,CAAD,CADE,GACI,EAHb;AAInBe,QAAAA,yBAAyB,EAAEd,2BAA2B,CAACnQ,MAA5B,GAAqC,CAArC,GACvBmQ,2BAA2B,CAAC,CAAD,CADJ,GACU;AALlB,OAAvB;AAQA,WAAK5T,QAAL,CAAc;AACV2T,QAAAA,sBADU;AACcC,QAAAA,2BADd;AAEVjL,QAAAA,oBAAoB,EAAE,EAClB,GAAGA,oBADe;AAElB,WAACD,SAAD,GAAaD;AAFK,SAFZ;AAMVnE,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOc,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,QAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHzL,QAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,WAAKa,QAAL,CAAc;AACVsE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA0CD8C,EAAAA,uBAAuB,GAAG;AACtB,SAAKpH,QAAL,CAAc;AAAEsE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIlF,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAhC;AACA,QAAIqM,cAAc,GAAG;AACjB;AACA7J,MAAAA,0BAA0B,EAAE,KAAK7B,KAAL,CAAW6C,UAAX,CAAsB2E,6BAAtB,CAAoD3F,0BAF/D;AAGjB;AACAI,MAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAJV,KAArB;AAOA,QAAIsC,QAAQ,GAAG,EAAf;AACA,UAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,kDAAX,EAA+DgH,cAA/D,CAAb;AAEA,UAAMgD,IAAI,GAAGnR,KAAK,CAACmH,IAAN,CAAW,oBAAX,EACT;AAAE,kBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,KADS,CAAb;AAGA,UAAMyM,IAAI,GAAGpR,KAAK,CAACmH,IAAN,CAAW,gCAAX,EACT;AAAE,kBAAY,KAAKlG,KAAL,CAAWuC,KAAX,CAAiBmB;AAA/B,KADS,CAAb;AAGAsC,IAAAA,QAAQ,GAAG,CAACyD,IAAD,EAAOyG,IAAP,CAAX;AACAlR,IAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,YAAM8J,iBAAiB,GAAG1U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACzC,iCADyC,EAEzC,gBAFyC,EAEvBL,SAFuB,EAEZA,SAFY,EAED,IAFC,CAA7C;AAGA,YAAM8P,qBAAqB,GAAGD,iBAAiB,CAAC3J,GAAlB,CAAsB,YAAtB,CAA9B;AACA,UAAI6J,kBAAkB,GAAGhK,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,oBAAjB,CAAzB;AAEA,YAAM2P,gBAAgB,GAAG7U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,eAAjB,KAAqC,EAAtC,EACxC,oBADwC,EAExC,gBAFwC,EAEtBL,SAFsB,EAEXA,SAFW,EAEA,IAFA,CAA5C;AAGA,YAAMiQ,iBAAiB,GAAGD,gBAAgB,CAAC9J,GAAjB,CAAqB,YAArB,CAA1B;AAGA,YAAMgK,kBAAkB,GAAG/U,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,iBAAjB,KAAuC,EAAxC,EAC1C,sBAD0C,EAE1C,YAF0C,EAE5BL,SAF4B,EAEjBA,SAFiB,EAEN,IAFM,CAA9C;AAGA,YAAMmQ,mBAAmB,GAAGD,kBAAkB,CAAChK,GAAnB,CAAuB,YAAvB,CAA5B;AAEA,YAAMkK,qBAAqB,GAAGjV,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,oBAAjB,KAC3C,EAD0C,EAE7C,yBAF6C,EAG7C,yBAH6C,EAGlBL,SAHkB,EAGPA,SAHO,EAGI,IAHJ,CAAjD;AAIA,YAAMqQ,sBAAsB,GAAGD,qBAAqB,CAAClK,GAAtB,CAA0B,YAA1B,CAA/B;AAEA,YAAMoK,UAAU,GAAGnV,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB,SAAjB,KAA+B,EAAhC,EAClC,cADkC,EAElC,cAFkC,EAElBL,SAFkB,EAEPA,SAFO,EAEI,IAFJ,CAAtC;AAGA,YAAMuQ,WAAW,GAAGD,UAAU,CAACpK,GAAX,CAAe,YAAf,CAApB;AAEA,WAAKhF,QAAL,CAAc;AACVhB,QAAAA,SAAS,EAAE,IADD;AAEVI,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ0Q,UAAAA,wBAAwB,EAAElB,qBAFd;AAGZmB,UAAAA,cAAc,EAAEV,WAHJ;AAIZW,UAAAA,oBAAoB,EAAEjB,iBAJV;AAKZc,UAAAA,sBAAsB,EAAEZ,mBALZ;AAMZ;AACA;AACA;AACA5G,UAAAA,IAAI,EAAEwG,kBAAkB,CAACpL,MAAnB,GAA4B,CAA5B,GAAgCoL,kBAAkB,CAAC,CAAD,CAAlB,CAAsBxG,IAAtD,GAA6D,CATvD;AAUZE,UAAAA,OAAO,EAAEsG,kBAAkB,CAACpL,MAAnB,GAA4B,CAA5B,GAAgCoL,kBAAkB,CAAC,CAAD,CAAlB,CAAsBtG,OAAtD,GAAgE,CAV7D;AAWZrI,UAAAA,eAAe,EAAE;AAXL,SAFN;AAgBVc,QAAAA,eAAe,EAAE,KAhBP;AAiBVpB,QAAAA,SAAS,EAAE,QAjBD;AAkBV0E,QAAAA,OAAO,EAAE;AAlBC,OAAd;AAoBH,KAlDL,EAkDOc,KAlDP,CAkDaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,QAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHzL,QAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,WAAKa,QAAL,CAAc;AACVsE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KA3DL;AA4DH;;AAGDwE,EAAAA,qBAAqB,CAAC9F,SAAD,EAAY0F,SAAZ,EAAuBD,SAAvB,EAAkC;AACnD,QAAIgD,cAAc,GAAG,EAArB;AACA,SAAKzL,QAAL,CAAc;AAAEsE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAmH,IAAAA,cAAc,GAAG;AACb1C,MAAAA,kBAAkB,EAAEN,SAAS,CAAC/H,KADjB;AAEbsB,MAAAA,QAAQ,EAAEgB,SAAS,CAAChB;AAFP,KAAjB;AAIA,QAAIuC,QAAQ,GAAG,EAAf;AACA,UAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,gDAAX,EAA6DgH,cAA7D,CAAb;AAEAlH,IAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,IAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAEoL,QAAAA,yBAAF;AAA6B7Q,QAAAA;AAA7B,UAAgD,KAAKW,KAAzD;AAEA,UAAIqV,sBAAsB,GAAGnb,mBAAmB,CAAC4K,QAAQ,CAAC,CAAD,CAAR,CAAY1F,IAAZ,CAAiB0P,kBAAjB,IAAuC,EAAxC,EAA4C,yBAA5C,EAC5C,yBAD4C,EACjB/P,SADiB,EACNA,SADM,EACKA,SADL,CAAhD;AAEAmR,MAAAA,yBAAyB,GAAGmF,sBAAsB,CAACpQ,GAAvB,CAA2B,YAA3B,CAA5B;AACA5F,MAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbiJ,QAAAA,IAAI,EAAE4H,yBAAyB,CAACxM,MAA1B,GAAmC,CAAnC,GACFwM,yBAAyB,CAAC,CAAD,CAAzB,CAA6B7N,IAA7B,CAAkCiG,IADhC,GACuC,CAHhC;AAIbE,QAAAA,OAAO,EAAE0H,yBAAyB,CAACxM,MAA1B,GAAmC,CAAnC,GACLwM,yBAAyB,CAAC,CAAD,CAAzB,CAA6B7N,IAA7B,CAAkCmG,OAD7B,GACuC,CALnC;AAMbkB,QAAAA,uBAAuB,EAAEwG,yBAAyB,CAACxM,MAA1B,GAAmC,CAAnC,GACrBwM,yBAAyB,CAAC,CAAD,CADJ,GACU,EAPtB;AAQbA,QAAAA,yBAAyB,EAAEA,yBAAyB,CAACxM,MAA1B,GAAmC,CAAnC,GACvB,CAAC,GAAGwM,yBAAJ,CADuB,GACU;AATxB,OAAjB;AAYA,WAAKjQ,QAAL,CAAc;AAEVZ,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ,WAACsJ,SAAD,GAAaD;AAFD,SAFN;AAMVnE,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KA3BL,EA2BOc,KA3BP,CA2BaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,QAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHzL,QAAAA,KAAK,CAAC0L,IAAN,CAAWH,KAAK,CAACR,QAAN,CAAe1F,IAA1B;AACH;;AACD,WAAKa,QAAL,CAAc;AACVsE,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KApCL;AAqCH;;AA4JD+Q,EAAAA,2BAA2B,CAAC1N,KAAD,EAAQ;AAC/B,QAAIvI,cAAc,GAAG,KAAKW,KAAL,CAAWX,cAAX,IAA6B,EAAlD;;AACA,QAAIuI,KAAK,KAAK,CAAV,GAAc,IAAd,GAAsBvI,cAAc,CAACqG,WAAf,IAA8BrG,cAAc,CAACqG,WAAf,KAA+B,EAAvF,EAA4F;AACxF,UAAI6G,aAAa,GAAG,KAAKH,8BAAL,CAAoC/M,cAAc,CAACkW,kBAAnD,CAApB;;AACA,UAAGhJ,aAAH,EAAiB;AACjB,aAAKtM,QAAL,CAAc;AAAEsE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAI4Q,GAAG,GAAG;AAAC;AACPhR,UAAAA,KAAK,EAAE,0BADD;AAC6BqR,UAAAA,WAAW,EAAE,2BAD1C;AAEN9P,UAAAA,WAAW,EAAEkC,KAAK,KAAK,CAAV,GACT,KAAK5H,KAAL,CAAW2F,uBAAX,CAAmCD,WAAnC,GAAiD,wBAAjD,GAA4E,KAAK1F,KAAL,CAAW8D,mBAAX,CAA+BnD,KADlG,GAGTtB,cAAc,CAACqG,WAAf,GAA6B,wBAA7B,GAAwD,KAAK1F,KAAL,CAAW8D,mBAAX,CAA+BnD,KALrF;AAMJ8U,UAAAA,MAAM,EAAE,4BANJ;AAMkCxT,UAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAN7D,SAAV;AAQA,YAAIsC,QAAQ,GAAG,EAAf;AACA,cAAMyD,IAAI,GAAG1K,KAAK,CAACmH,IAAN,CAAW,gDAAX,EAA6DyQ,GAA7D,CAAb;AACA3Q,QAAAA,QAAQ,GAAG,CAACyD,IAAD,CAAX;AACAzK,QAAAA,KAAK,CAACoH,GAAN,CAAUJ,QAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,cAAIjC,UAAU,GAAG,KAAK7C,KAAL,CAAW6C,UAA5B;AACAA,UAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB,eAAGiC,QAAQ,CAAC,CAAD,CAAR,CAAY1F;AAAhC,WAAb;AACA,eAAKa,QAAL,CAAc;AACV4C,YAAAA,UAAU,EAAE,EAAE,GAAGA;AAAL,aADF;AAEV0B,YAAAA,OAAO,EAAE,KAFC;AAGVtF,YAAAA,SAAS,EAAE,KAHD;AAIVmB,YAAAA,aAAa,EAAE,KAJL;AAKVuF,YAAAA,uBAAuB,EAAEiC,KAAK,KAAK,CAAV,GACrB,EAAE,GAAG,KAAK5H,KAAL,CAAW2F;AAAhB,aADqB,GAGrB,EAAE,GAAGtG;AAAL,aARM;AAUVA,YAAAA,cAAc,EAAE,EAVN;AAWVqW,YAAAA,YAAY,EAAE,KAAK1V,KAAL,CAAW2Q,IAAX,GAAkB1V,OAAO,CAAC2V,WAAR,CAAoB,KAAK5Q,KAAL,CAAW2Q,IAA/B,EAAqC,KAAK3Q,KAAL,CAAWyQ,MAAhD,EAAwD,IAAxD,CAAlB,GAAkF;AAXtF,WAAd;AAaH,SAjBL,EAkBKpL,KAlBL,CAkBWC,KAAK,IAAI;AACZ,eAAKrF,QAAL,CAAc;AACVsE,YAAAA,OAAO,EAAE;AADC,WAAd;;AAGA,cAAIe,KAAK,CAACR,QAAN,CAAeS,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxL,YAAAA,KAAK,CAACuL,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,WAFD,MAGK;AACDzL,YAAAA,KAAK,CAAC4b,IAAN,CAAWrQ,KAAK,CAACR,QAAN,CAAe1F,IAAf,CAAoBwW,GAA/B;AACH;AAEJ,SA7BL;AA8BC,OA3CD,MA2CK;AACD7b,QAAAA,KAAK,CAAC0L,IAAN,CAAW,KAAKjH,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAhDD,MAgDO;AACH7F,MAAAA,KAAK,CAAC0L,IAAN,CAAW,KAAKjH,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAX;AAEH;AACJ;;AA+RDiW,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAI,KAAK/V,KAAL,CAAWf,SAAX,IAAwB8W,SAAS,CAAC5V,eAAV,KAA8B,KAAtD,IACC4V,SAAS,CAAC1W,cAAV,KAA6B,KAAKW,KAAL,CAAWX,cAD7C,EAC8D;AAC1D,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,KAAKW,KAAL,CAAWf,SAAX,IAAwB8W,SAAS,CAAC5V,eAAV,KAA8B,KAAtD,IACN4V,SAAS,CAACtU,SAAV,KAAwB,KAAKzB,KAAL,CAAWyB,SADjC,EAC6C;AAChD,aAAO,KAAP;AACH,KAHM,MAGA;AACH,aAAO,IAAP;AACH;AACJ;;AAkHDuU,EAAAA,MAAM,GAAG;AAGL,UAAM5O,KAAK,GAAG,KAAKpH,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,8BAA1B,EAA0DrC,YAArI;AACA,UAAMgE,MAAM,GAAG,KAAK5G,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,4BAA1B,EAAwDrC,YAAlI;AACA,UAAMqT,QAAQ,GAAG,KAAKjW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,8BAA1B,EAA0DrC,YAAxI;AACA,UAAMsT,MAAM,GAAG,KAAKlW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,4BAA1B,KAA2D,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,4BAA1B,EAAwDrC,YAAlI;AACA,UAAMuT,SAAS,GAAG,KAAKnW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,+BAA1B,KAA8D,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,+BAA1B,EAA2DrC,YAA3I;AACA,UAAMwT,YAAY,GAAG,KAAKpW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,KAA+C,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,gBAA1B,EAA4CrC,YAAhH;AACA,UAAMyT,oBAAoB,GAAI,KAAKrW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,yBAA1B,KAAwD,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,yBAA1B,EAAqDrC,YAA3I;AAEA,UAAM0T,mBAAmB,GAAG,KAAKtW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,mBAA1B,KAAkD,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,mBAA1B,EAA+CrC,YAA7H;AACA,UAAM2T,WAAW,GAAG,KAAKvW,KAAL,CAAWyN,UAAX,CAAsBC,GAAtB,CAA0B,WAA1B,KAA0C,KAAK1N,KAAL,CAAWyN,UAAX,CAAsBxI,GAAtB,CAA0B,WAA1B,EAAuCrC,YAArG;AAEA,UAAMuH,WAAW,GAAG;AAChBG,MAAAA,aAAa,EAAE,uBADC;AACwBU,MAAAA,cAAc,EAAE,+BADxC;AACyET,MAAAA,eAAe,EAAE,4BAD1F;AAEhBG,MAAAA,QAAQ,EAAE,4DAFM;AAGhBC,MAAAA,gBAAgB,EAAE;AAAE1I,QAAAA,QAAQ,EAAE,KAAKzD,KAAL,CAAWuC,KAAX,CAAiBmB;AAA7B,OAHF;AAIhBW,MAAAA,UAAU,EAAE,KAAKrE,KAAL,CAAWuC,KAAX,CAAiB8B,UAJb;AAKhB4H,MAAAA,eAAe,EAAE,CAAC,4BAAD;AALD,KAApB;AAQA,UAAM2K,cAAc,GAAG,KAAKpV,KAAL,CAAW8L,UAAX,IAAyB,EAAhD;AAEA,UAAMN,cAAc,GAAG,IAAI3O,cAAJ,EAAvB;AACA,wBACI,uDACI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKmD,KAAL,CAAWuE,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIQ,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,kBADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAGjE,KAAD,IAAW,KAAKmI,aAAL,CAAmBnI,KAAnB,EAA0B,kBAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK9B,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf;AAKI,MAAA,WAAW,EAAE,KALjB;AAMI,MAAA,KAAK,EAAE,KAAKI,KAAL,CAAW8D,mBAAX,GAAiC,KAAK9D,KAAL,CAAW8D,mBAAX,IAAkC,EAAnE,GAAwE,EANnF;AAOI,MAAA,OAAO,EAAE,KAAK9D,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsB2T,kBAA/C,IAAqE,EAPlF;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,KAXhB;AAYI,MAAA,YAAY,EAAE,KAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,eAmBU,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,kBAAD;AACI,MAAA,qBAAqB,EAAE,KAAKxW,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA/C,IACnB,KAAKD,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACI,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIO9G,IAJP,CAIYsE,MAJZ,GAIqB,CALF,GAMnB,IANmB,GAMZ,KAPf;AAQI,MAAA,uBAAuB,EAAE,KAAK1D,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA/C,IACrB,KAAKD,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACI,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIO9G,IAJP,CAIYsE,MAJZ,GAIqB,CALA,GAMrB,IANqB,GAMd,KAdf;AAeI,MAAA,iBAAiB,EAAE,KAAK1D,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA/C,IACf,KAAKD,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACI,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIO9G,IAJP,CAIYsE,MAJZ,GAIqB,CALN,GAMf,IANe,GAMR,KArBf;AAsBI,MAAA,UAAU,EAAGuC,CAAD,IAAO,KAAKqP,2BAAL,CAAiC,CAAjC,CAtBvB;AAuBI,MAAA,cAAc,EAAE,IAvBpB;AAwBI,MAAA,gBAAgB,EACZ,KAAKtV,KAAL,CAAW6C,UAAX,IAAyB,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBAA/C,IACI,KAAKD,iBAAL,CAAuB,KAAK9H,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAzE,EACI,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AACtD7B,QAAAA,IAAI,EAAE,EADgD;AAEtDD,QAAAA,IAAI,EAAE;AAFgD,OAD9D,EAIO9G,IAJP,CAIYsE,MAJZ,GAIqB,CALzB,GAMI,CAAC;AACGS,QAAAA,KAAK,EAAE,qBADV;AAEGvE,QAAAA,EAAE,EAAE,EAFP;AAGG6W,QAAAA,MAAM,EAAE,KAHX,CAGgB;AAHhB;AAKGC,QAAAA,OAAO,EAAE,MAAM,KAAK/O,SAAL,CAAe,EAAf,EAAmB,CAAnB,CALlB;AAMGgP,QAAAA,WAAW,EAAE;AANhB,OAAD,EAQA;AACIxS,QAAAA,KAAK,EAAE,2BADX;AAEIvE,QAAAA,EAAE,EAAE,EAFR;AAGI6W,QAAAA,MAAM,EAAE,KAAKzW,KAAL,CAAW0C,qBAAX,CAAiCyI,OAAjC,CAAyCkL,oBAAzC,MAAmE,CAAC,CAHhF;AAIIK,QAAAA,OAAO,EAAE,MAAM,KAAK3J,qBAAL,EAJnB;AAKI4J,QAAAA,WAAW,EAAE;AALjB,OARA,EAeA;AACIxS,QAAAA,KAAK,EAAE,YADX;AAEIvE,QAAAA,EAAE,EAAE,EAFR;AAGI8W,QAAAA,OAAO,EAAE,MAAM,KAAKhP,UAAL,EAHnB;AAIIiP,QAAAA,WAAW,EAAE;AAJjB,OAfA,CANJ,GA0BS,CAAC;AACFxS,QAAAA,KAAK,EAAE,YADL;AAEFvE,QAAAA,EAAE,EAAE,EAFF;AAGF8W,QAAAA,OAAO,EAAE,MAAM,KAAKhP,UAAL,EAHb;AAIFiP,QAAAA,WAAW,EAAE;AAJX,OAAD,CAnDjB;AAyDI,MAAA,UAAU,EAAE,KAAKC,UAzDrB;AA0DI,MAAA,KAAK,EAAE,KAAK5W,KAAL,CAAWuR,KAAX,IAAoB,EA1D/B;AA2DI,MAAA,eAAe,EAAE,2BA3DrB,CA4DI;AACA;AACA;AACA;AA/DJ;AAgEI,MAAA,eAAe,EAAE,KAAKN,eAhE1B;AAiEI,MAAA,qBAAqB,EAAE,KAAKH,qBAjEhC;AAkEI,MAAA,IAAI,EAAE,KAAK9Q,KAAL,CAAW6C,UAAX,IACF,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBAnE9B;AAoEI,MAAA,UAAU,EACN;AACA;AACA;AACA;AACA;AACA,WAAK/H,KAAL,CAAWoC,UAAX,GAAwB,KAAKpC,KAAL,CAAWoC,UAAnC,GAAgD,EA1ExD;AA4EI,MAAA,SAAS,EAAE,KAAKpC,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AAAE9B,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OA5EzE;AA6EI,MAAA,eAAe,EAAE,KAAK6B,eA7E1B;AA8EI,MAAA,mBAAmB,EAAE,KAAKhI,KAAL,CAAWoS,mBA9EpC;AA+EI,MAAA,UAAU,EAAE,KAAKpS,KAAL,CAAWyN,UA/E3B;AAgFI,MAAA,qBAAqB,EAAE,KAAKzN,KAAL,CAAW0C,qBAhFtC;AAiFI,MAAA,QAAQ,EAAE,KAAKlE,KAAL,CAAWuC,KAAX,CAAiBmB,QAjF/B;AAkFI,MAAA,YAAY,EAAE,KAAK2U,YAlFvB;AAmFI,MAAA,QAAQ,EAAE,IAnFd;AAoFI,MAAA,UAAU,EAAE,YApFhB;AAqFI,MAAA,UAAU,EAAE,OArFhB;AAsFI,MAAA,gBAAgB,EAAE,IAtFtB;AAuFI,MAAA,iBAAiB,EAAE,IAvFvB;AAwFI,MAAA,WAAW,EACP,CACI;AACIxE,QAAAA,KAAK,EAAE,KAAK7T,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEI+W,QAAAA,WAAW,EAAE,SAFjB;AAGIF,QAAAA,MAAM,EAAG,KAAKzW,KAAL,CAAW0C,qBAAX,CAAiCyI,OAAjC,CAAyCiL,YAAzC,MAA2D,CAAC,CAHzE;AAIIU,QAAAA,UAAU,EAAE,MAJhB;AAKIJ,QAAAA,OAAO,EAAE,KAAK/I;AALlB,OADJ,EAQI;AACI0E,QAAAA,KAAK,EAAE,KAAK7T,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEI+W,QAAAA,WAAW,EAAE,OAFjB;AAGIF,QAAAA,MAAM,EAAE,KAHZ,CAGiB;AAHjB;AAKIK,QAAAA,UAAU,EAAE,KALhB;AAMIJ,QAAAA,OAAO,EAAGnP,KAAD,IAAW,KAAKI,SAAL,CAAeJ,KAAf,EAAsB,CAAtB;AANxB,OARJ,CAzFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADE,CAnBV,CAJR,CAFJ,EA2OQ,KAAKvH,KAAL,CAAWf,SAAX,iBACA,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,KAAKe,KAAL,CAAWf,SAAhC;AACI,MAAA,UAAU,EAAE,KAAKa,UADrB;AAEI,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWkB,YAAX,GAA0B,KAA1B,GAAkC,IAFhD,CAGI;AAHJ;AAII,MAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWkB,YAAX,GAA0B,KAA1B,GAAmC,KAAKlB,KAAL,CAAWI,aAAX,GAA2B,IAA3B,GAAmC,KAJrF;AAKI,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWkB,YAAX,GAA0B,KAA1B,GAAkC,KAAKlB,KAAL,CAAWiB,eAAX,GAA6B,KAA7B,GAAqC,IALvF;AAMI,MAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWkB,YAAX,GAA0B,EAA1B,GAAgC,KAAKlB,KAAL,CAAWiB,eAAX,IAA8B,KAAKjB,KAAL,CAAWI,aAA1C,GAA2D,IAA3D,GAAkE,EAN3G;AAOI,MAAA,SAAS,EAAE,EAPf;AAQI,MAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWuC,KAAX,CAAiB+B,UARjC;AASI,MAAA,UAAU,EAAE,KAAK9C,KAAL,CAAWkB,YAAX,GAA0B,KAAK1C,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA1B,GAAuF,KAAKI,KAAL,CAAWI,aAAX,GAA2B,EAA3B,GAC/F,KAAKJ,KAAL,CAAWsB,gBAAX,GAA8B,KAAK9C,KAAL,CAAWsM,IAAX,CAAgBC,aAAhB,CAA8B;AAAEnL,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA9B,GACM,KAAKI,KAAL,CAAWoB,eAAX,CAA2B6C,cAXzC;AAYI,MAAA,WAAW,EAAE,KAAKjE,KAAL,CAAWI,aAAX,GAA2B,KAAKkV,2BAAL,CAAiCyB,IAAjC,CAAsC,IAAtC,CAA3B,GAAyE,KAAK/K,wBAZ/F;AAaI,MAAA,KAAK,EAAE,KAAKhM,KAAL,CAAWD,SAbtB,CAcI;AAdJ;AAgBI,MAAA,aAAa,EAAE,KAAK0R,aAhBxB;AAiBI,MAAA,YAAY,EAAE,KAAKjT,KAAL,CAAWuC,KAAX,CAAiBwS,YAjBnC;AAkBI,MAAA,WAAW,EAAE,KAAK/U,KAAL,CAAWlD,WAlB5B;AAmBI,MAAA,cAAc,EAAE,KAAK0E,KAAL,CAAWX,cAAX,IAA6B,EAnBjD,CAoBI;AApBJ;AAqBI,MAAA,YAAY,EAAE,KAAKW,KAAL,CAAWD,SAAX,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKvB,KAAL,CAAWuC,KAAX,CAAiBlB,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKrB,KAAL,CAAWsM,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAKoF,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK3R,KAAL,CAAWuC,KAAX,CAAiB+B,UAHjC;AAII,QAAA,cAAc,EAAE,KAAK9C,KAAL,CAAWX,cAAX,IAA6B,EAJjD;AAKI,QAAA,eAAe,EAAE,KAAKW,KAAL,CAAWkF,KAAX,IAAkB,EALvC;AAMI,QAAA,UAAU,EAAE,KAAKlF,KAAL,CAAWmF,UAAX,IAAyB,EANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAUV,KAAKnF,KAAL,CAAWkB,YAAX,gBACI,oBAAC,UAAD;AACI,QAAA,kBAAkB,EAAE,KAAKlB,KAAL,CAAWmO,kBADnC;AAEI,QAAA,cAAc,EAAE,KAAKnO,KAAL,CAAWiO,cAF/B;AAGI,QAAA,mBAAmB,EAAE,KAAKjO,KAAL,CAAW+J,mBAHpC;AAII,QAAA,eAAe,EAAE,KAAK/J,KAAL,CAAWwN,eAJhC;AAKI,QAAA,kBAAkB,EAAE,KAAKxN,KAAL,CAAWgN,kBALnC;AAMI,QAAA,oBAAoB,EAAE,KAAKhN,KAAL,CAAWkD,oBANrC;AAOI,QAAA,wBAAwB,EAAE,KAAKlD,KAAL,CAAWoO,wBAPzC;AAQI,QAAA,6BAA6B,EAAE,KAAKpO,KAAL,CAAWqO,6BAR9C;AASI,QAAA,SAAS,EAAE,KAAKrO,KAAL,CAAWH,SAT1B;AAUI,QAAA,oBAAoB,EAAE,KAAKG,KAAL,CAAW4I,oBAVrC;AAWI,QAAA,aAAa,EAAG3C,CAAD,IAAO,KAAK5F,aAAL,CAAmB4F,CAAnB,CAX1B;AAYI,QAAA,aAAa,EAAE,KAAKwC,aAZxB;AAaI,QAAA,cAAc,EAAE,KAAKzI,KAAL,CAAWX,cAAX,IAA6B,EAbjD;AAcI,QAAA,eAAe,EAAE,KAAKwK,eAd1B;AAeI,QAAA,QAAQ,EAAE,KAAKrL,KAAL,CAAWuC,KAAX,CAAiBmB,QAf/B;AAgBI,QAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AAAE9B,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAhBzE;AAiBI,QAAA,UAAU,EAAE,KAAKnG,KAAL,CAAWyN,UAjB3B;AAkBI,QAAA,qBAAqB,EAAE,KAAKzN,KAAL,CAAW0C,qBAlBtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAsBI,KAAK1C,KAAL,CAAWI,aAAX,gBACI,oBAAC,kBAAD;AACI,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWiT,MADvB;AAEI,QAAA,eAAe,EAAE,IAFrB;AAGI,QAAA,UAAU,EAAE,KAAKjT,KAAL,CAAWgX,UAH3B;AAII,QAAA,IAAI,EAAE,KAAKhX,KAAL,CAAWqQ,SAJrB;AAKI,QAAA,IAAI,EAAE,KAAKrQ,KAAL,CAAWsQ,SALrB;AAMI,QAAA,QAAQ,EAAE,KAAKC,QANnB;AAOI,QAAA,IAAI,EAAE,KAAK/R,KAAL,CAAWuC,KAAX,CAAiB4P,IAAjB,KAA0B5R,SAA1B,GAAsC,KAAKP,KAAL,CAAWuC,KAAX,CAAiB4P,IAAvD,GAA8D,KAAK3Q,KAAL,CAAWX,cAAX,CAA0BsR,IAPlG;AAQI,QAAA,WAAW,EAAE,KAAKsG,SARtB;AASI,QAAA,UAAU,EAAE,KAAKzY,KAAL,CAAWuC,KAAX,CAAiBmW,WAAjB,IAAgC,EAThD;AAUI,QAAA,gBAAgB,EAAE,KAAK9G,sBAV3B;AAWI,QAAA,MAAM,EAAE,IAXZ;AAYI,QAAA,QAAQ,EAAE,KAAK5R,KAAL,CAAWuC,KAAX,CAAiBmB,QAZ/B;AAaI,QAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWlD,WAb5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,GAiBI,KAAK0E,KAAL,CAAWiB,eAAX,gBAA6B,uDACzB,uDACI,oBAAC,eAAD;AACI,QAAA,YAAY,EAAE,IADlB;AAEI,QAAA,WAAW,EAAE,KAAKzC,KAAL,CAAWlD,WAF5B;AAGI,QAAA,IAAI,EAAE,KAAKkD,KAAL,CAAWsM,IAHrB;AAII,QAAA,IAAI,EAAE,KAAK9K,KAAL,CAAWqI,IAAX,IAAmB,CAJ7B;AAKI,QAAA,6BAA6B,EAAE,KAAKrI,KAAL,CAAWoI,6BAL9C;AAMI,QAAA,QAAQ,EAAE,KAAK5J,KAAL,CAAWuC,KAAX,CAAiBmB,QAN/B;AAOI,QAAA,OAAO,EAAE,KAAKlC,KAAL,CAAWuI,OAAX,IAAsB,CAPnC;AAQI,QAAA,cAAc,EAAE,KAAKvI,KAAL,CAAWX,cAAX,CAA0BoC,SAA1B,IAAuC,EAR3D;AASI,QAAA,SAAS,EAAE,KAAKzB,KAAL,CAAWyB,SAAX,IAAwB,EATvC;AAUI,QAAA,gBAAgB,EAAE,KAAKzB,KAAL,CAAWsB,gBAVjC;AAWI,QAAA,oBAAoB,EAAE,KAAK0I,oBAX/B;AAYI,QAAA,eAAe,EAAE,KAAKhK,KAAL,CAAWoB,eAZhC;AAaI,QAAA,mBAAmB,EAAE,KAAK5C,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,IAA6BlD,QAAQ,CAAC,KAAK3K,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,CAA0B,EAA1B,CAAD,CAb9D;AAcI,QAAA,cAAc,EAAE,KAAK7N,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,IAA6BlD,QAAQ,CAAC,KAAK3K,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,CAA0B,EAA1B,CAAD,CAdzD;AAeI,QAAA,gBAAgB,EAAE,KAAK7N,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,IAA6B,KAAK7N,KAAL,CAAWuC,KAAX,CAAiBsL,QAAjB,CAA0B,EAA1B,CAfnD;AAgBI,QAAA,iBAAiB,EAAE,KAAKrM,KAAL,CAAW6C,UAAX,IACf,KAAK7C,KAAL,CAAW6C,UAAX,CAAsBkF,wBADP,IAEfnK,OAAO,CAAC,KAAKoC,KAAL,CAAW6C,UAAX,CAAsBkF,wBAAtB,IAAkD,EAAnD,EACH,KAAK/H,KAAL,CAAWgI,eAAX,GAA6B,KAAKhI,KAAL,CAAWgI,eAAxC,GAA0D;AAAE9B,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SADvD,CAAP,CACqF/G,IAnB7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADyB,CAA7B,gBAyBI,yCA1EJ,CA2ER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5OR,CADJ;AA2VH;;AA3sEqC;;AA00E1C,MAAM+X,eAAe,GAAInX,KAAD,IAAW;AAC/B,SAAO;AACHe,IAAAA,KAAK,EAAEf,KAAK,CAACe;AADV,GAAP;AAGH,CAJD;;AAOA,eAAenJ,OAAO,CAACuf,eAAD,EAAkB;AACpChc,EAAAA,WADoC;AACvBG,EAAAA,WADuB;AACVD,EAAAA,uBADU;AACeY,EAAAA,8BADf;AAC8CC,EAAAA;AAD9C,CAAlB,CAAP,CAEZrE,UAAU,CAACyG,iBAAD,CAFE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { Lims_JSON_stringify, constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData,rearrangeDateFormat} from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    BasicConfig, BasicFuncs,\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation,validateEsignCredentialStorage,crudMasterstorage\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import AddTreeview from './AddTreeview';\r\n// import AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n//import StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport rsapi from '../../rsapi';\r\n//import AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\n//import StorageMappingFilter from './StorageMappingFilter';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n\r\nimport { groupBy, process } from '@progress/kendo-data-query';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport MoveSample from '../storagemanagement/MoveSample';\r\nimport DataGridForStorage from './DataGridForStorage';\r\nimport { initRequest } from '../../actions/LoginAction';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\nclass SampleStorageMove extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            extractedColumnList: [\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n                { \"idsName\": \"IDS_AVAILABLESPACE\", \"dataField\": \"navailablespace\", \"width\": \"200px\", \"filterType\": \"numeric\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"scontainertype\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\", \"dataField\": \"scontainerstructurename\", \"width\": \"200px\" },\r\n\r\n            ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                group: [\r\n                    {\r\n                        field: \"ssamplestoragelocationname\",\r\n                    },\r\n                ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        if (this.state.extractedColumnList) {\r\n            this.state.extractedColumnList.map(field => {\r\n                if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n                    && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype'\r\n                    && field.dataField !== 'scontainerstructurename') {\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\":\r\n                                this.props.intl.formatMessage({\r\n                                    id: field.idsName,\r\n                                })\r\n                            ,\r\n                            \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, dataResult, selectedRecordFilter, fields, selectedProjectType, openModal, loadEsign } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.openModal !== previousProps.Login.openModal) {\r\n            bool = true;\r\n            openModal = this.props.Login.openModal;\r\n        }\r\n        if (this.props.Login.loadEsign !== previousProps.Login.loadEsign) {\r\n            bool = true;\r\n            loadEsign = this.props.Login.loadEsign;\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nproductcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_PRODUCT\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n            )\r\n            // fields = {\r\n            //     ...fields,\r\n            //     'nprojecttypecode': {\r\n            //         \"label\": this.props.intl.formatMessage({\r\n            //             id: \"IDS_PROJECTTYPE\",\r\n            //         }),\r\n            //         \"type\": \"select\",\r\n            //         \"valueSources\": [\"value\"],\r\n            //         \"fieldSettings\": {\r\n            //             \"listValues\": queryBuilderFreezer\r\n            //         }\r\n            //     }\r\n            // }\r\n            selectedProjectType = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename, value:\r\n                    this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\r\n        }\r\n        if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainertypecode, \"title\": item.scontainertype })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainertypecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERTYPE\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        } if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainerstructurecode, \"title\": item.scontainerstructurename })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainerstructurecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERSTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            if (this.state.masterData.sampleStoragetransaction) {\r\n                if (this.state.masterData.sampleStoragetransaction !== previousState.masterData.sampleStoragetransaction) {\r\n                    masterData = this.state.masterData;\r\n                    console.log('masterData.sampleStoragetransaction', dataResult)\r\n                    //ALPD-4496 janakumar  pagination  work \r\n                    if(masterData.sampleStoragetransaction !== undefined && masterData.sampleStoragetransaction.length >this.state.dataStateChange.skip ===false)\r\n                    {\r\n                        this.state.dataStateChange.skip=0;\r\n                        this.state.dataStateChange.take=10;\r\n                    }\r\n                    dataResult = masterData.sampleStoragetransaction ?\r\n                        this.processWithGroups(masterData.sampleStoragetransaction || [],\r\n                            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                take: 10,\r\n                                skip: 0\r\n                            }) : []\r\n\r\n\r\n                    \r\n\r\n                    console.log('dataResultn', dataResult)\r\n                }\r\n            }\r\n\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType, openModal, loadEsign, dataResult\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.state.loadEsign;\r\n        let openModal = this.state.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (loadEsign) {\r\n          //  loadEsign = false;\r\n            openModal = true;\r\n            loadEsign = false;\r\n            selectedRecord['esignpassword'] = \"\"\r\n            selectedRecord['esigncomments'] = \"\"\r\n            selectedRecord['esignreason'] = \"\"\r\n\t\t\t//ALPD-4738\r\n\t\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            this.setState({openModal, loadEsign, selectedRecord, selectedId: null })\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        this.setState({\r\n            selectedRecord,\r\n           // ismoveSample: false,\r\n            openModal, isInitialRender: true\r\n            , isFilterPopup: false,\r\n            loadEsign: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n \r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet && !this.state.ismoveSample) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else if (this.state.ismoveSample) {\r\n            let destinationPathlst = [];\r\n            let dataResult = this.state.dataResult;\r\n            dataResult.data.map(item => {\r\n                  item.items.map(item => {\r\n                    if (item.hasOwnProperty('selected') && item.selected) {\r\n                        destinationPathlst.push(item);\r\n                    } \r\n                });\r\n            });\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.state.ncontrolcode)) {\r\n                const masterData = this.state.masterData;\r\n                let inputParam = {\r\n                    methodUrl: \"SampleStorageTransaction\",\r\n                    operation: \"update\",\r\n                    classUrl: \"samplestoragemove\",\r\n\r\n                    inputData: this.state.isMultiContainermove? {\r\n                        selectedContainers: JSON.stringify(destinationPathlst),\r\n                        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n                        nsourcensamplestoragelocationcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragelocationcode)),\r\n                        nsourcenprojecttypecode: JSON.stringify(destinationPathlst.map(y => y.nprojecttypecode)),\r\n                        destinationPathCount: destinationPathlst.length,\r\n                        isMultiContainermove: true,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value, \r\n                        ...this.state.masterData,\r\n                        userinfo: this.props.Login.userInfo\r\n                    } : {\r\n                        nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\r\n                        nsourceprojecttypecode: this.state.editedsheetData.nprojecttypecode ,\r\n                        nsourcesamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterprojecttypecode:this.state.selectedProjectType.value,\r\n\r\n                        ssamplestoragelocationname:this.state.editedsheetData.ssamplestoragelocationname,\r\n                        ssamplestoragepathname:this.state.editedsheetData.scontainerpath,\r\n                        stosamplestoragelocationname:this.state.selectedRecord.nsamplestoragelocationcode.label,\r\n                        stosamplestoragepathname:this.state.selectedRecord.nsamplestoragemappingcode.label,\r\n                        sboxid:this.state.editedsheetData.sboxid,\r\n                        stoboxid:this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\r\n                        ...this.state.masterData,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }\r\n                }\r\n\t\t\t\t//ALPD-4738\r\n\t\t\t\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n                this.setState({ loading: true })\r\n                let urlArray = [];\r\n                const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                });\r\n                const reasonUrl = rsapi.post(\"/reason/getReason\", {\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                });\r\n        \r\n                urlArray = [reasonUrl,currentTimeUrl];\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        const reasonMap = constructOptionList(response[0].data || [], \"nreasoncode\",\r\n                            \"sreason\", undefined, undefined, false);\r\n                        const reasonList = reasonMap.get(\"OptionList\");\r\n                        this.setState({\r\n                            esign:reasonList,\r\n                            serverTime: rearrangeDateFormat(this.props.Login.userInfo, response[1].data),\r\n                            loadEsign: true, openModal: true,  screenData: { inputParam, masterData },\r\n                            loading: false\r\n                        });\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         loadEsign: true, openModal: true,  screenData: { inputParam, masterData }\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n                //this.setState({ loadEsign: true, openModal: true,  screenData: { inputParam, masterData }})\r\n            }\r\n            else {\r\n                if (this.state.isMultiContainermove) { \r\n                    this.CRUDSampleStorageTransaction({\r\n                        selectedContainers: JSON.stringify(destinationPathlst),\r\n                        nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n                         //ALPD-4490--Vignesh R(07-08-2024)\r\n                        nsourcenprojecttypecode: JSON.stringify(destinationPathlst.map(y => y.nprojecttypecode)),\r\n                        nsourcensamplestoragelocationcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragelocationcode)),\r\n                        destinationPathCount: destinationPathlst.length,\r\n                        isMultiContainermove: true,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        // nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        // nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }, 'update');\r\n                } else {\r\n                    this.CRUDSampleStorageTransaction({\r\n                        nsourcemappingcode: this.state.editedsheetData.nsamplestoragemappingcode,\r\n                        //ALPD-4490--Vignesh R(07-08-2024)\r\n                        nsourcesamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                        nsourceprojecttypecode: this.state.editedsheetData.nprojecttypecode ,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value,\r\n                        nsamplestoragemappingcode: this.state.selectedRecord.nsamplestoragemappingcode.value,\r\n                        nprojecttypecode: this.state.selectedRecord.nsamplestoragemappingcode.item.nprojecttypecode,\r\n                        filterprojecttypecode:this.state.selectedProjectType.value,\r\n                        ssamplestoragelocationname:this.state.editedsheetData.ssamplestoragelocationname,\r\n                        ssamplestoragepathname:this.state.editedsheetData.scontainerpath,\r\n                        stosamplestoragelocationname:this.state.selectedRecord.nsamplestoragelocationcode.label,\r\n                        stosamplestoragepathname:this.state.selectedRecord.nsamplestoragemappingcode.label,\r\n                        sboxid:this.state.editedsheetData.sboxid,\r\n                        stoboxid:this.state.selectedRecord.nsamplestoragemappingcode.item.sboxid,\r\n                        filterquery: this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }, 'update');\r\n                }\r\n            }\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    // opensearch=()={\r\n\r\n    // }\r\n\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, openSpreadSheet: false,ismoveSample:false, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                take: 10,\r\n                skip: 0\r\n            }).data;\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false,\r\n                        loadEsign: false,ismoveSample:false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false, loadEsign: false,ismoveSample:false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let selectedProjectType = this.state.selectedProjectType;\r\n        let masterData = this.state.masterData;\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nprojecttypecode') {\r\n            if (selectedProjectType.value !== comboData.value) {\r\n                masterData = {\r\n                    ...masterData,\r\n                    sampleStoragetransaction: []\r\n                }\r\n            }\r\n            this.setState({ masterData, selectedProjectType: { label: comboData.label, value: comboData.value } })\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord, availableContainersdata) => {\r\n        this.setState({\r\n            availableContainers: availableContainersdata,\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    ConfirmMove = () => { \r\n        let destinationPathlst = [];\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n              item.items.map(item => {\r\n                if (item.hasOwnProperty('selected') && item.selected) {\r\n                    destinationPathlst.push(item);\r\n                } \r\n            });\r\n        });\r\n        const inputData={\r\n            isok:true,\r\n            filterprojecttypecode:this.state.selectedProjectType.value,\r\n            selectedContainers: JSON.stringify(destinationPathlst),\r\n            nsourcemappingcode: JSON.stringify(destinationPathlst.map(y => y.nsamplestoragemappingcode)),\r\n            destinationPathCount: destinationPathlst.length,\r\n            isMultiContainermove: true,\r\n            nsamplestoragelocationcode: this.state.selectedRecord.nsamplestoragelocationcode.value, \r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageTransaction\",\r\n            classUrl: 'samplestoragemove',\r\n            inputData: inputData,\r\n            operation: \"update\",\r\n            dataState: this.state.dataStateChange,\r\n          };\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\", \r\n        this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n         this.props.intl.formatMessage({ id: \"IDS_MISMATCHCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n             this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n             this.state.loadEsign?\r\n             ()=>this.props.crudMasterstorage(inputParam, this.state.masterData, \"openModal\" )\r\n             :\r\n             ()=>this.CRUDSampleStorageTransaction({...inputData}, 'update'));\r\n    }\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/\" + operation + \"SampleStorageTransaction\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // if(this.state.isMultiContainermove){\r\n                //     this.ConfirmMove()\r\n                // }else{\r\n                    this.setState({\r\n                        isInitialRender: true,\r\n                        selectedRecord: {},\r\n                        masterData: {\r\n                            ...this.state.masterData, ...response[0].data\r\n                        },\r\n                        openModal: false,\r\n                        loading: false,\r\n                        ismoveSample: false\r\n                    });\r\n                //} \r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else { \r\n                    if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                        this.ConfirmMove()\r\n                    }else{\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                        //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields =\r\n             this.state.isMultiContainermove ? \r\n             [{\r\n                \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\", \"dataField\": \"nsamplestoragelocationcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            } ] :\r\n                [{\r\n                    \"idsName\": \"IDS_TOSTORAGESTRUCTURENAME\", \"dataField\": \"nsamplestoragelocationcode\",\r\n                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                },\r\n                {\r\n                    \"idsName\": \"IDS_TOSAMPLESTORAGEPATH\",\r\n                    \"dataField\": \"nsamplestoragemappingcode\", \"mandatoryLabel\":\r\n                        \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                }] \r\n                // :\r\n                // this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n                //     this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n                //     {\r\n                //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_PRODUCT\",\r\n                //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                // ] : [\r\n                //     {\r\n                //         \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                //         \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_PRODUCT\",\r\n                //         \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                //     ,\r\n                //     {\r\n                //         \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                //         \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                //         \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                //             \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_DIRECTION\",\r\n                //         \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     },\r\n                //     {\r\n                //         \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                //         \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                //             \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                //     }\r\n                // ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        let dataResult = this.state.dataResult;\r\n        if (this.state.masterData.sampleStoragetransaction) {\r\n            dataResult = this.state.masterData.sampleStoragetransaction ?\r\n                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                    event.dataState ? event.dataState : {\r\n                        take: 10,\r\n                        skip: 0\r\n                    }) : []\r\n            dataResult.data.map(x => {\r\n                return x.items.map(item => {\r\n                    item.selected = false;\r\n                    return item;\r\n                });\r\n            });\r\n        }\r\n        this.setState({\r\n            dataResult: dataResult,\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    //ALPD-4635\r\n    checkFilterIsEmptyQueryBuilder=(treeData)=> {\r\n        //this condition is handle for bulk record only \r\n        if(this.props.Login && this.props.Login.settings && parseInt(this.props.Login.settings['69'])===transactionStatus.YES){\r\n            let isFilterEmpty=true;\r\n            return isFilterEmpty;\r\n        }else{\r\n        let ParentItem = { ...treeData };\r\n        let isFilterEmpty=false;\r\n            let childArray = ParentItem.children1;\r\n            if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (!childData.hasOwnProperty('children1')) {\r\n                        if(  childData.properties.operator!==\"is_empty\"\r\n                          && childData.properties.operator!==\"is_not_empty\"\r\n                          && childData.properties.operator!==\"is_null\"\r\n                          && childData.properties.operator!==\"is_not_null\" ){\r\n                            isFilterEmpty=true;\r\n                            return isFilterEmpty;\r\n                    }\r\n                    } else {\r\n                        if (childData) {\r\n                            ParentItem = this.checkFilterIsEmptyQueryBuilder(childData)\r\n                            if(!ParentItem){\r\n                                return ParentItem;\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n            return isFilterEmpty;\r\n        }\r\n      }\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            let isFilterEmpty = this.checkFilterIsEmptyQueryBuilder(selectedRecord.filterQueryTreeStr);\r\n            if(isFilterEmpty){\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'sampleStoragetransaction', valuemember: 'nsamplestoragemappingcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                    :\r\n                    selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                , source: 'view_samplestoragelocation', userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestoragemove/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n            }else{\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEONEMOREFILTERDATAWITHNOTNULLOPERATOR\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n    movemultipleContainer = () => {\r\n        let destinationPathlst = [];\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n              item.items.map(item => {\r\n                if (item.hasOwnProperty('selected') && item.selected) {\r\n                    destinationPathlst.push(item);\r\n                } \r\n            });\r\n        }); \r\n        if(destinationPathlst.length>0){\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\",\r\n            {\r\n                isMultiContainermove: true,\r\n                // ncontainertypecode: 1,\r\n                // ncontainerstructurecode: 1,\r\n                isMultiContainermove: true,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let storagemoverecords = {};\r\n                let selectedRecord = this.state.selectedRecord;\r\n                const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\r\n                const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [],\r\n                    \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", \"descending\", undefined, true);\r\n                const storageStructureList = storageStructureMap.get(\"OptionList\");\r\n\r\n                storagemoverecords = this.state.masterData.sampleStoragetransaction.filter(item =>\r\n                    item.hasOwnProperty('selected') && item.selected\r\n                )\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nsamplestoragelocationcode: {\r\n                        label: storageStructureList[0].label,\r\n                        value: storageStructureList[0].value,\r\n                        item: storageStructureList[0]\r\n                    },\r\n                    storageStructureOptions: storageStructureList,\r\n                };\r\n                this.state.masterData.sampleStoragetransaction.map(item =>\r\n                    selectedRecord = {\r\n                        ...selectedRecord,\r\n                        mappingcodeOptions: {\r\n                            ...selectedRecord.mappingcodeOptions,\r\n                            [item.nsamplestoragemappingcode]: samplestoragecontainerpathList\r\n                        }\r\n                    }\r\n                )\r\n                this.setState({\r\n                    availableContainers: response[0].data['availableContainers'],\r\n                    totalContainers: response[0].data['totalContainers'],\r\n                    selectedRecord,\r\n                    isMultiContainermove: true,\r\n                    storagemoverecords: storagemoverecords,\r\n                    ismoveSample: true,\r\n                    openModal: true,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    ncontrolcode: this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode\r\n                })\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTACONTAINERTOMOVE\" }));\r\n\r\n        }\r\n    }\r\n    moveSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\",\r\n            {\r\n                nsamplestoragemappingcode: param.nsamplestoragemappingcode,\r\n                ncontainertypecode: param.ncontainertypecode,\r\n                ncontainerstructurecode: param.ncontainerstructurecode,\r\n                userinfo: this.props.Login.userInfo\r\n            });\r\n       const getProjectType = rsapi.post(\"projecttype/getProjectType\", {\r\n        \"userinfo\": this.props.Login.userInfo\r\n       }) ;\r\n        const getProduct = rsapi.post(\"/samplestoragelocation/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n        urlArray = [url1,getProduct,getProjectType];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [],\r\n                    \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", \"descending\", undefined, true);\r\n                const storageStructureList = storageStructureMap.get(\"OptionList\");\r\n\r\n                // const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                //     \"nsamplestoragecontainerpathcode\",\r\n                //     \"scontainerpath\", undefined, undefined, true);\r\n                // const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\r\n               // ALPD-3757\r\n                const sampleStorageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragemappingcode\",\"scontainerpath\",undefined,undefined, true\r\n                    );\r\n                const sampleStorageMappingList = sampleStorageMappingMap.get(\"OptionList\");\r\n\r\n                const sampleTypeMap = constructOptionList(response[1].data  || [], \"nproductcode\",\"sproductname\", undefined, undefined, true);\r\n\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                let ProjectTypelst = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    sampleTypeList:sampleTypeList,\r\n                    ProjectTypeOptions:ProjectTypelst,\r\n                    sourcencontainertypecode: param.ncontainertypecode,\r\n                    sourcencontainerstructurecode: param.ncontainerstructurecode,\r\n                    isMultiContainermove: false,\r\n                    selectedRecord: {\r\n                        // nprojecttypecode:{\r\n                        //     label: this.state.selectedProjectType.label,\r\n                        //     value:  this.state.selectedProjectType.value \r\n                        // },\r\n                        nfromsamplestoragelocationcode: {\r\n                            label: param.ssamplestoragelocationname,\r\n                            value: param.nsamplestoragelocationcode,\r\n                            item: param\r\n                        },\r\n                        nfromsamplestoragemappingcode: {\r\n                            label: param.scontainerpath,\r\n                            value: param.nsamplestoragemappingcode,\r\n                            item: param\r\n                        },\r\n                        nsamplestoragelocationcode: storageStructureList.length > 0 ? {\r\n                            label: storageStructureList[0].label,\r\n                            value: storageStructureList[0].value,\r\n                            item: storageStructureList[0].item\r\n                        } : \"\",\r\n                        nsamplestoragemappingcode: sampleStorageMappingList.length > 0 ? {\r\n                            label: sampleStorageMappingList[0].label,\r\n                            value: sampleStorageMappingList[0].value,\r\n                            item: sampleStorageMappingList[0].item\r\n                        }  : \"\"\r\n                        ,\r\n                        storageStructureOptions: storageStructureList,\r\n                        samplestoragecontainerpathOptions: sampleStorageMappingList,\r\n                    },\r\n                    editedsheetData: param,\r\n                    ismoveSample: true,\r\n                    openModal: true,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    ncontrolcode: this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode\r\n                })\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        selectedRecord[\"filterQueryTreeStr\"] = QbUtils.getTree(immutableTree);\r\n        let tree = QbUtils.getTree(immutableTree);\r\n        tree = QbUtils.queryString(immutableTree, config, true);\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: { ...selectedRecord } });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, sampleStoragetransaction: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    // headerSelectionChange = (event) => {\r\n    //     const checkboxElement = event.target;\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let sampleStoragetransaction=this.state.masterData.sampleStoragetransaction;\r\n    //     let masterData=this.state.masterData\r\n    //     sampleStoragetransaction.map(item => { \r\n    //             if (item.selected === undefined) {\r\n    //                 item.selected = false;\r\n    //             }\r\n    //             item.selected = checked;\r\n    //             return item; \r\n    //     });\r\n    //     masterData[sampleStoragetransaction]=sampleStoragetransaction\r\n    //     this.setState({ masterData })\r\n    // }\r\n    headerSelectionChange = (event) => {\r\n        const checkboxElement = event.target;\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(item => {\r\n            return item.items.map(item => {\r\n                if (item.selected === undefined) {\r\n                    item.selected = false;\r\n                }\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n        });\r\n        this.setState({ dataResult })\r\n    }\r\n    selectionChange = (event) => {\r\n        let dataResult = this.state.dataResult;\r\n        dataResult.data.map(x => {\r\n            return x.items.map(item => {\r\n                if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\r\n                    item.selected = !event.dataItem.selected;\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n        this.setState({ dataResult })\r\n    }\r\n    // selectionChange = (event) => {\r\n    //     let sampleStoragetransaction=this.state.masterData.sampleStoragetransaction;\r\n    //     let masterData=this.state.masterData\r\n    //     sampleStoragetransaction.map(item => {\r\n    //             if (item['nsamplestoragemappingcode'] === event.dataItem['nsamplestoragemappingcode']) {\r\n    //                 item.selected = !event.dataItem.selected;\r\n    //             }\r\n    //             return item; \r\n    //     });\r\n    //     masterData[sampleStoragetransaction]=sampleStoragetransaction\r\n    //     this.setState({ masterData })\r\n    // }\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    render() {\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n        const moveSampleId = this.state.controlMap.has(\"Move Container\") && this.state.controlMap.get(\"Move Container\").ncontrolcode;\r\n        const moveMultipleSampleId  = this.state.controlMap.has(\"Move Multiple Container\") && this.state.controlMap.get(\"Move Multiple Container\").ncontrolcode;\r\n\r\n        const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\r\n        const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {\r\n\r\n\r\n                        <Col md={12}>\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nprojecttypecode\"}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isMandatory={false}\r\n                                        value={this.state.selectedProjectType ? this.state.selectedProjectType || [] : []}\r\n                                        options={this.state.masterData && this.state.masterData.projectTypeOptions || []}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row><Row>\r\n                                <Col md={12}>\r\n                                    <DataGridForStorage\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [{\r\n                                                    label: 'IDS_VIEWMULTIPLEBOX',\r\n                                                    id: {},\r\n                                                    hidden: false//this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1\r\n                                                    ,\r\n                                                    onClick: () => this.addSample({}, 2),\r\n                                                    controlname: 'faBoxes'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_MOVEMULTIPLECONTAINER',\r\n                                                    id: {},\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(moveMultipleSampleId) === -1,\r\n                                                    onClick: () => this.movemultipleContainer(),\r\n                                                    controlname: 'faDollyFlatbed'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }] : [{\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []}\r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        // groupable={true}\r\n                                        // groupfooter={true}\r\n                                        // aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        // aggregatedColumn={'navailablespace'}\r\n                                        selectionChange={this.selectionChange}\r\n                                        headerSelectionChange={this.headerSelectionChange}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={\r\n                                            // this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                            //     this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                            //         take: 10,\r\n                                            //         skip: 0\r\n                                            //     }) : []\r\n                                            this.state.dataResult ? this.state.dataResult : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        gridHeight={'900px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }),\r\n                                                    controlname: \"faDolly\",\r\n                                                    hidden:  this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\r\n                                                    objectName: \"edit\",\r\n                                                    onClick: this.moveSample\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_VIEWBOX\" }),\r\n                                                    controlname: \"faBox\",\r\n                                                    hidden: false// this.state.userRoleControlRights.indexOf(addSampleId) === -1\r\n                                                    ,\r\n                                                    objectName: \"add\",\r\n                                                    onClick: (param) => this.addSample(param, 1)\r\n                                                }]}\r\n                                    />\r\n                                    {/* <DataGrid\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [{\r\n                                                    label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\r\n                                                    id: {},\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\r\n                                                    onClick: () => this.addSample({}, 2),\r\n                                                    controlname: 'faBoxes'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }] : [{\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []} \r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        groupable={true}\r\n                                        groupfooter={true}\r\n                                        aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        aggregatedColumn={'navailablespace'}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={ \r\n                                               this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }) : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord} \r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'} \r\n                                        gridHeight={'600px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [\r\n                                                 {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    hidden: false, //this.state.userRoleControlRights.indexOf(moveSampleId) === -1,\r\n                                                    objectName: \"edit\",\r\n                                                    onClick: this.moveSample\r\n                                                },\r\n                                                {\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLETOABOX\" }),\r\n                                                controlname: \"faBox\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\r\n                                                objectName: \"add\",\r\n                                                onClick: (param) => this.addSample(param, 1)\r\n                                            }]}\r\n                                    /> */}\r\n                                </Col></Row>\r\n                        </Col>\r\n\r\n                    }\r\n\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={this.state.ismoveSample ? false : true}\r\n                        //needClose={this.state.ismoveSample ? true : this.state.isFilterPopup ? false : true}\r\n                        needClose={this.state.ismoveSample ? false  : this.state.isFilterPopup ? true  : false }\r\n                        showSubmit={this.state.ismoveSample ? false : this.state.openSpreadSheet ? false : true}\r\n                        size={this.state.ismoveSample ? \"\" : (this.state.openSpreadSheet || this.state.isFilterPopup) ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.ismoveSample ? this.props.intl.formatMessage({ id: \"IDS_MOVECONTAINER\" }) : this.state.isFilterPopup ? \"\" :\r\n                            this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGE\" })\r\n                                : this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick}\r\n                        esign={this.state.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        // ALPD-5120 : Added by rukshana this.state.serverTime for sample storage move : E-signature's date and time not displayed in popup \r\n                        addComponent={this.state.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                esignReasonList={this.state.esign||[]}\r\n                                serverTime={this.state.serverTime || []}\r\n                            />\r\n                            :\r\n                            this.state.ismoveSample ?\r\n                                <MoveSample\r\n                                    ProjectTypeOptions={this.state.ProjectTypeOptions}\r\n                                    sampleTypeList={this.state.sampleTypeList}\r\n                                    availableContainers={this.state.availableContainers}\r\n                                    totalContainers={this.state.totalContainers}\r\n                                    storagemoverecords={this.state.storagemoverecords}\r\n                                    isMultiContainermove={this.state.isMultiContainermove}\r\n                                    sourcencontainertypecode={this.state.sourcencontainertypecode}\r\n                                    sourcencontainerstructurecode={this.state.sourcencontainerstructurecode}\r\n                                    operation={this.state.operation}\r\n                                    selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    onComboChange={this.onComboChange}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    childDataChange={this.childDataChange}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                />\r\n                                :\r\n                                this.state.isFilterPopup ?\r\n                                    <FilterQueryBuilder\r\n                                        fields={this.state.fields}\r\n                                        isSampleStorage={true}\r\n                                        queryArray={this.state.queryArray}\r\n                                        skip={this.state.kendoSkip}\r\n                                        take={this.state.kendoTake}\r\n                                        onChange={this.onChange}\r\n                                        tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                        gridColumns={this.slideList}\r\n                                        filterData={this.props.Login.slideResult || []}\r\n                                        handlePageChange={this.handlePageChangeFilter}\r\n                                        static={true}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        updateStore={this.props.updateStore}\r\n                                    />\r\n                                    :\r\n                                    this.state.openSpreadSheet ? <>\r\n                                        <>\r\n                                            <MatrixComponent\r\n                                                isMoveScreen={true}\r\n                                                updateStore={this.props.updateStore}\r\n                                                intl={this.props.intl}\r\n                                                Rows={this.state.Rows || 1}\r\n                                                AdditionalFieldsComponentData={this.state.AdditionalFieldsComponentData}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                columns={this.state.columns || 1}\r\n                                                selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                sheetData={this.state.sheetData || {}}\r\n                                                isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                childSheetDataChange={this.childSheetDataChange}\r\n                                                editedsheetData={this.state.editedsheetData}\r\n                                                nbarcodedescription={this.props.Login.settings && parseInt(this.props.Login.settings[36])}\r\n                                                nbarcodeLength={this.props.Login.settings && parseInt(this.props.Login.settings[37])}\r\n                                                sbarcodeboxWidth={this.props.Login.settings && this.props.Login.settings[38]}\r\n                                                multipleSheetData={this.state.masterData &&\r\n                                                    this.state.masterData.sampleStoragetransaction &&\r\n                                                    process(this.state.masterData.sampleStoragetransaction || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} /></>\r\n\r\n                                    </>\r\n                                        :\r\n                                        <></>\r\n                            // <AddSampleStorageMapping\r\n                            //     operation={this.state.operation}\r\n                            //     selectedRecordFilter={this.state.selectedRecordFilter}\r\n                            //     onInputChange={(e) => this.onInputChange(e)}\r\n                            //     onComboChange={this.onComboChange}\r\n                            //     selectedRecord={this.state.selectedRecord || {}}\r\n                            //     childDataChange={this.childDataChange}\r\n                            //     userInfo={this.props.Login.userInfo}\r\n                            // />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    } \r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.state.screenData\r\n        }\r\n        //this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        // let destinationPathlst = [];\r\n        // let dataResult = this.state.dataResult;\r\n        // dataResult.data.map(item => {\r\n        //       item.items.map(item => {\r\n        //         if (item.hasOwnProperty('selected') && item.selected) {\r\n        //             destinationPathlst.push(item);\r\n        //         } \r\n        //     });\r\n        // });\r\n \r\n        //this.props.validateEsignCredentialStorage(inputParam, \"openModal\",() => this.ConfirmMove())\r\n        this.validateEsignCredentialStorage(inputParam, \"openModal\",() => this.ConfirmMove())\r\n    }\r\n\r\n\t//ALPD-4738\r\n\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n    validateEsignCredentialStorage = (inputParam, modalName,action) => {\r\n         this.setState({ loading: true })\r\n          if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\r\n            inputParam.inputData[\"userinfo\"] = {\r\n              ...inputParam.inputData.userinfo,\r\n              sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\r\n              smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename),\r\n            }\r\n          }\r\n          return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n              if (response.data === \"Success\") {\r\n      \r\n                const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n                inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n      \r\n                if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n      \r\n                  delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n      \r\n                  if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n      \r\n      \r\n                  }\r\n      \r\n                  // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\r\n                  if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\r\n      \r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\r\n                    delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\r\n                  }\r\n                }\r\n                return(this.crudMasterstorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName,undefined,action))  \r\n              }\r\n            })\r\n            .catch(error => {\r\n              if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n               } else {\r\n                if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                    action()\r\n                }else{\r\n                toast.warn(error.response.data);\r\n                }\r\n            }\r\n            this.setState({\r\n                loading: false\r\n            });\r\n            })\r\n      }\r\n\r\n\t//ALPD-4738\r\n\t//Fixed: Removed the store action in sample retrieval, and the screen is now fully managed through the state.\r\n   crudMasterstorage = (inputParam, masterData, modalName, defaultInput,action)=> {\r\n    this.setState({ loading: true })\r\n          let requestUrl = '';\r\n          let urlArray = [];\r\n          requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n            urlArray = [requestUrl];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                        this.setState({\r\n                            isInitialRender: true,\r\n                            selectedRecord: {},\r\n                            masterData: {\r\n                                ...masterData, ...response[0].data\r\n                            },\r\n                            openModal: false,\r\n                            loading: false,\r\n                            ismoveSample: false,\r\n                            loadEsign: false,\r\n                        });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else { \r\n                        if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                            this.ConfirmMove()\r\n                        }else{\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n      }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n \r\n \r\nexport default connect(mapStateToProps, {\r\n    callService, updateStore, validateEsignCredential, validateEsignCredentialStorage,crudMasterstorage,\r\n})(injectIntl(SampleStorageMove));"]},"metadata":{},"sourceType":"module"}